
STM32H7_FinalProject20242.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2d4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800e574  0800e574  0000f574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e6e0  0800e6e0  0000f6e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e6e8  0800e6e8  0000f6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e6ec  0800e6ec  0000f6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000016c  24000000  0800e6f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001134  2400016c  0800e85c  0001016c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240012a0  0800e85c  000102a0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001016c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002370a  00000000  00000000  0001019a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e8d  00000000  00000000  000338a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b58  00000000  00000000  00038738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014f9  00000000  00000000  0003a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d386  00000000  00000000  0003b789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000282b8  00000000  00000000  00078b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cca5  00000000  00000000  000a0dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020da6c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000077b8  00000000  00000000  0020dab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007b  00000000  00000000  00215268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400016c 	.word	0x2400016c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e55c 	.word	0x0800e55c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000170 	.word	0x24000170
 80002dc:	0800e55c 	.word	0x0800e55c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <test_sd_card>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void test_sd_card(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	@ 0x70
 8000684:	af00      	add	r7, sp, #0
    char debug_msg[100];
    uint32_t sector_count = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
    
    // Initialize SD card
    sd_status = USER_SPI_initialize(0);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 fc4a 	bl	8000f24 <USER_SPI_initialize>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	4b45      	ldr	r3, [pc, #276]	@ (80007ac <test_sd_card+0x12c>)
 8000696:	701a      	strb	r2, [r3, #0]
    if(sd_status != 0)
 8000698:	4b44      	ldr	r3, [pc, #272]	@ (80007ac <test_sd_card+0x12c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d016      	beq.n	80006ce <test_sd_card+0x4e>
    {
        sprintf(debug_msg, "SD Card init failed with status: %d\r\n", sd_status);
 80006a0:	4b42      	ldr	r3, [pc, #264]	@ (80007ac <test_sd_card+0x12c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4941      	ldr	r1, [pc, #260]	@ (80007b0 <test_sd_card+0x130>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f00d fab5 	bl	800dc1c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4618      	mov	r0, r3
 80006b8:	f7ff fe12 	bl	80002e0 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	b29a      	uxth	r2, r3
 80006c0:	f107 010c 	add.w	r1, r7, #12
 80006c4:	2364      	movs	r3, #100	@ 0x64
 80006c6:	483b      	ldr	r0, [pc, #236]	@ (80007b4 <test_sd_card+0x134>)
 80006c8:	f006 fd82 	bl	80071d0 <HAL_UART_Transmit>
 80006cc:	e06b      	b.n	80007a6 <test_sd_card+0x126>
        return;
    }
    
    // Get card type
    uint8_t card_type = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	71fb      	strb	r3, [r7, #7]
    USER_SPI_ioctl(0, MMC_GET_TYPE, &card_type);
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	461a      	mov	r2, r3
 80006d6:	210a      	movs	r1, #10
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 fd35 	bl	8001148 <USER_SPI_ioctl>
    sprintf(debug_msg, "Card Type: %d\r\n", card_type);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	461a      	mov	r2, r3
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	4934      	ldr	r1, [pc, #208]	@ (80007b8 <test_sd_card+0x138>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f00d fa97 	bl	800dc1c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fdf4 	bl	80002e0 <strlen>
 80006f8:	4603      	mov	r3, r0
 80006fa:	b29a      	uxth	r2, r3
 80006fc:	f107 010c 	add.w	r1, r7, #12
 8000700:	2364      	movs	r3, #100	@ 0x64
 8000702:	482c      	ldr	r0, [pc, #176]	@ (80007b4 <test_sd_card+0x134>)
 8000704:	f006 fd64 	bl	80071d0 <HAL_UART_Transmit>
    
    // Get sector count
    USER_SPI_ioctl(0, GET_SECTOR_COUNT, &sector_count);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	461a      	mov	r2, r3
 800070e:	2101      	movs	r1, #1
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fd19 	bl	8001148 <USER_SPI_ioctl>
    sprintf(debug_msg, "Total Sectors: %lu\r\n", sector_count);
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	4927      	ldr	r1, [pc, #156]	@ (80007bc <test_sd_card+0x13c>)
 800071e:	4618      	mov	r0, r3
 8000720:	f00d fa7c 	bl	800dc1c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fdd9 	bl	80002e0 <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	b29a      	uxth	r2, r3
 8000732:	f107 010c 	add.w	r1, r7, #12
 8000736:	2364      	movs	r3, #100	@ 0x64
 8000738:	481e      	ldr	r0, [pc, #120]	@ (80007b4 <test_sd_card+0x134>)
 800073a:	f006 fd49 	bl	80071d0 <HAL_UART_Transmit>
    
    // Try to read first sector
    if(USER_SPI_read(0, buffer, 0, 1) == RES_OK)
 800073e:	2301      	movs	r3, #1
 8000740:	2200      	movs	r2, #0
 8000742:	491f      	ldr	r1, [pc, #124]	@ (80007c0 <test_sd_card+0x140>)
 8000744:	2000      	movs	r0, #0
 8000746:	f000 fca3 	bl	8001090 <USER_SPI_read>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d117      	bne.n	8000780 <test_sd_card+0x100>
    {
        sprintf(debug_msg, "Read first sector successful\r\n");
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	491b      	ldr	r1, [pc, #108]	@ (80007c4 <test_sd_card+0x144>)
 8000756:	4618      	mov	r0, r3
 8000758:	f00d fa60 	bl	800dc1c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff fdbd 	bl	80002e0 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	b29a      	uxth	r2, r3
 800076a:	f107 010c 	add.w	r1, r7, #12
 800076e:	2364      	movs	r3, #100	@ 0x64
 8000770:	4810      	ldr	r0, [pc, #64]	@ (80007b4 <test_sd_card+0x134>)
 8000772:	f006 fd2d 	bl	80071d0 <HAL_UART_Transmit>
        print_buffer(buffer, 32); // Print first 32 bytes
 8000776:	2120      	movs	r1, #32
 8000778:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <test_sd_card+0x140>)
 800077a:	f000 f827 	bl	80007cc <print_buffer>
 800077e:	e012      	b.n	80007a6 <test_sd_card+0x126>
    }
    else
    {
        sprintf(debug_msg, "Read first sector failed\r\n");
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4910      	ldr	r1, [pc, #64]	@ (80007c8 <test_sd_card+0x148>)
 8000786:	4618      	mov	r0, r3
 8000788:	f00d fa48 	bl	800dc1c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff fda5 	bl	80002e0 <strlen>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	2364      	movs	r3, #100	@ 0x64
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <test_sd_card+0x134>)
 80007a2:	f006 fd15 	bl	80071d0 <HAL_UART_Transmit>
    }
}
 80007a6:	3770      	adds	r7, #112	@ 0x70
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	240004f4 	.word	0x240004f4
 80007b0:	0800e574 	.word	0x0800e574
 80007b4:	24000260 	.word	0x24000260
 80007b8:	0800e59c 	.word	0x0800e59c
 80007bc:	0800e5ac 	.word	0x0800e5ac
 80007c0:	240002f4 	.word	0x240002f4
 80007c4:	0800e5c4 	.word	0x0800e5c4
 80007c8:	0800e5e4 	.word	0x0800e5e4

080007cc <print_buffer>:

void print_buffer(uint8_t* buffer, uint32_t len)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b09c      	sub	sp, #112	@ 0x70
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
    char debug_msg[100];
    for(uint32_t i = 0; i < len; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80007da:	e033      	b.n	8000844 <print_buffer+0x78>
    {
        sprintf(debug_msg, "%02X ", buffer[i]);
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80007e0:	4413      	add	r3, r2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	4924      	ldr	r1, [pc, #144]	@ (800087c <print_buffer+0xb0>)
 80007ec:	4618      	mov	r0, r3
 80007ee:	f00d fa15 	bl	800dc1c <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 80007f2:	f107 0308 	add.w	r3, r7, #8
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff fd72 	bl	80002e0 <strlen>
 80007fc:	4603      	mov	r3, r0
 80007fe:	b29a      	uxth	r2, r3
 8000800:	f107 0108 	add.w	r1, r7, #8
 8000804:	2364      	movs	r3, #100	@ 0x64
 8000806:	481e      	ldr	r0, [pc, #120]	@ (8000880 <print_buffer+0xb4>)
 8000808:	f006 fce2 	bl	80071d0 <HAL_UART_Transmit>
        if((i + 1) % 16 == 0)
 800080c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800080e:	3301      	adds	r3, #1
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	2b00      	cmp	r3, #0
 8000816:	d112      	bne.n	800083e <print_buffer+0x72>
        {
            sprintf(debug_msg, "\r\n");
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	4919      	ldr	r1, [pc, #100]	@ (8000884 <print_buffer+0xb8>)
 800081e:	4618      	mov	r0, r3
 8000820:	f00d f9fc 	bl	800dc1c <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fd59 	bl	80002e0 <strlen>
 800082e:	4603      	mov	r3, r0
 8000830:	b29a      	uxth	r2, r3
 8000832:	f107 0108 	add.w	r1, r7, #8
 8000836:	2364      	movs	r3, #100	@ 0x64
 8000838:	4811      	ldr	r0, [pc, #68]	@ (8000880 <print_buffer+0xb4>)
 800083a:	f006 fcc9 	bl	80071d0 <HAL_UART_Transmit>
    for(uint32_t i = 0; i < len; i++)
 800083e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000840:	3301      	adds	r3, #1
 8000842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000844:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d3c7      	bcc.n	80007dc <print_buffer+0x10>
        }
    }
    sprintf(debug_msg, "\r\n");
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	490c      	ldr	r1, [pc, #48]	@ (8000884 <print_buffer+0xb8>)
 8000852:	4618      	mov	r0, r3
 8000854:	f00d f9e2 	bl	800dc1c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 8000858:	f107 0308 	add.w	r3, r7, #8
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	f107 0108 	add.w	r1, r7, #8
 800086a:	2364      	movs	r3, #100	@ 0x64
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <print_buffer+0xb4>)
 800086e:	f006 fcaf 	bl	80071d0 <HAL_UART_Transmit>
}
 8000872:	bf00      	nop
 8000874:	3770      	adds	r7, #112	@ 0x70
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	0800e600 	.word	0x0800e600
 8000880:	24000260 	.word	0x24000260
 8000884:	0800e608 	.word	0x0800e608

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800088c:	f000 f9cc 	bl	8000c28 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f001 f852 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f810 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f964 	bl	8000b64 <MX_GPIO_Init>
  MX_TIM6_Init();
 800089c:	f000 f8e0 	bl	8000a60 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80008a0:	f000 f914 	bl	8000acc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80008a4:	f009 f906 	bl	8009ab4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80008a8:	f00c fcba 	bl	800d220 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80008ac:	f000 f882 	bl	80009b4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  
  // Test SD card
  test_sd_card();
 80008b0:	f7ff fee6 	bl	8000680 <test_sd_card>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <main+0x2c>

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c2:	224c      	movs	r2, #76	@ 0x4c
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f00d f9c8 	bl	800dc5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2220      	movs	r2, #32
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f00d f9c2 	bl	800dc5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d8:	2002      	movs	r0, #2
 80008da:	f002 ff01 	bl	80036e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <SystemClock_Config+0xf4>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e6:	4a31      	ldr	r2, [pc, #196]	@ (80009ac <SystemClock_Config+0xf4>)
 80008e8:	f023 0301 	bic.w	r3, r3, #1
 80008ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ee:	4b2f      	ldr	r3, [pc, #188]	@ (80009ac <SystemClock_Config+0xf4>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	4b2d      	ldr	r3, [pc, #180]	@ (80009b0 <SystemClock_Config+0xf8>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000900:	4a2b      	ldr	r2, [pc, #172]	@ (80009b0 <SystemClock_Config+0xf8>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <SystemClock_Config+0xf8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000914:	bf00      	nop
 8000916:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <SystemClock_Config+0xf8>)
 8000918:	699b      	ldr	r3, [r3, #24]
 800091a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800091e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000922:	d1f8      	bne.n	8000916 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000928:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	2302      	movs	r3, #2
 8000934:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 22;
 800093a:	2316      	movs	r3, #22
 800093c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800093e:	2302      	movs	r3, #2
 8000940:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000942:	2303      	movs	r3, #3
 8000944:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000946:	2302      	movs	r3, #2
 8000948:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800094a:	230c      	movs	r3, #12
 800094c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800094e:	2302      	movs	r3, #2
 8000950:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 8000952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000956:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095c:	4618      	mov	r0, r3
 800095e:	f002 ff09 	bl	8003774 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000968:	f000 f98a 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	233f      	movs	r3, #63	@ 0x3f
 800096e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000984:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000988:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2101      	movs	r1, #1
 8000992:	4618      	mov	r0, r3
 8000994:	f003 fb48 	bl	8004028 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800099e:	f000 f96f 	bl	8000c80 <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3770      	adds	r7, #112	@ 0x70
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58000400 	.word	0x58000400
 80009b0:	58024800 	.word	0x58024800

080009b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009b8:	4b27      	ldr	r3, [pc, #156]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009ba:	4a28      	ldr	r2, [pc, #160]	@ (8000a5c <MX_SPI2_Init+0xa8>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009c0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009c6:	4b24      	ldr	r3, [pc, #144]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009ce:	2203      	movs	r2, #3
 80009d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d2:	4b21      	ldr	r3, [pc, #132]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009de:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80009e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <MX_SPI2_Init+0xa4>)
 8000a46:	f005 fca7 	bl	8006398 <HAL_SPI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a50:	f000 f916 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2400018c 	.word	0x2400018c
 8000a5c:	40003800 	.word	0x40003800

08000a60 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_TIM6_Init+0x64>)
 8000a72:	4a15      	ldr	r2, [pc, #84]	@ (8000ac8 <MX_TIM6_Init+0x68>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_TIM6_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <MX_TIM6_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <MX_TIM6_Init+0x64>)
 8000a84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a88:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac4 <MX_TIM6_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <MX_TIM6_Init+0x64>)
 8000a92:	f006 f9c8 	bl	8006e26 <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000a9c:	f000 f8f0 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_TIM6_Init+0x64>)
 8000aae:	f006 fab1 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 f8e2 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	24000214 	.word	0x24000214
 8000ac8:	40001000 	.word	0x40001000

08000acc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <MX_USART1_UART_Init+0x94>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b14:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b16:	f006 fb0b 	bl	8007130 <HAL_UART_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 f8ae 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b28:	f007 fba1 	bl	800826e <HAL_UARTEx_SetTxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 f8a5 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b3a:	f007 fbd6 	bl	80082ea <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 f89c 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_USART1_UART_Init+0x90>)
 8000b4a:	f007 fb57 	bl	80081fc <HAL_UARTEx_DisableFifoMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f894 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000260 	.word	0x24000260
 8000b60:	40011000 	.word	0x40011000

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b7a:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	4a27      	ldr	r2, [pc, #156]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8a:	4b25      	ldr	r3, [pc, #148]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b21      	ldr	r3, [pc, #132]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	4a20      	ldr	r2, [pc, #128]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a18      	ldr	r2, [pc, #96]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_GPIO_Init+0xbc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2140      	movs	r1, #64	@ 0x40
 8000bf6:	480b      	ldr	r0, [pc, #44]	@ (8000c24 <MX_GPIO_Init+0xc0>)
 8000bf8:	f001 fa8c 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfc:	2340      	movs	r3, #64	@ 0x40
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <MX_GPIO_Init+0xc0>)
 8000c14:	f001 f8ce 	bl	8001db4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	@ 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	58024400 	.word	0x58024400
 8000c24:	58020800 	.word	0x58020800

08000c28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c2e:	463b      	mov	r3, r7
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c3a:	f001 f843 	bl	8001cc4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c4a:	231f      	movs	r3, #31
 8000c4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c4e:	2387      	movs	r3, #135	@ 0x87
 8000c50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c56:	2300      	movs	r3, #0
 8000c58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 f861 	bl	8001d34 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c72:	2004      	movs	r0, #4
 8000c74:	f001 f83e 	bl	8001cf4 <HAL_MPU_Enable>

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <HAL_GetTick>:

//#define FCLK_SLOW() r_config_rspi0_set_baudrate(280000)//{ MODIFY_REG(SD_SPI_HANDLE.Instance->CR1, SPI_BAUDRATEPRESCALER_256, SPI_BAUDRATEPRESCALER_128); }	/* Set SCLK = slow, approx 280 KBits/s*/
//#define FCLK_FAST() r_config_rspi0_set_baudrate(4500000)

uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return g_systemtick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	24000188 	.word	0x24000188

08000ca4 <SPI_Timer_On>:
uint8_t CardType = CT_MMC;
uint8_t Stat = STA_NOINIT;	/* Physical drive status */
uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <SPI_Timer_On+0x20>)
 8000cb4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <SPI_Timer_On+0x24>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	240004f8 	.word	0x240004f8
 8000cc8:	240004fc 	.word	0x240004fc

08000ccc <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8000cd0:	f7ff ffdc 	bl	8000c8c <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <SPI_Timer_Status+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	1ad2      	subs	r2, r2, r3
 8000cdc:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SPI_Timer_Status+0x28>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	bf34      	ite	cc
 8000ce4:	2301      	movcc	r3, #1
 8000ce6:	2300      	movcs	r3, #0
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	240004f8 	.word	0x240004f8
 8000cf4:	240004fc 	.word	0x240004fc

08000cf8 <xchg_spi>:
/*-----------------------------------------------------------------------*/

/* Exchange a byte */

uint8_t xchg_spi (uint8_t dat)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	uint8_t rxDat;
	HAL_SPI_TransmitReceive(&hspi2, &dat, &rxDat, 1, 100);
 8000d02:	f107 020f 	add.w	r2, r7, #15
 8000d06:	1df9      	adds	r1, r7, #7
 8000d08:	2364      	movs	r3, #100	@ 0x64
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	4804      	ldr	r0, [pc, #16]	@ (8000d20 <xchg_spi+0x28>)
 8000d10:	f005 fc66 	bl	80065e0 <HAL_SPI_TransmitReceive>
	return rxDat;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]

}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2400018c 	.word	0x2400018c

08000d24 <rcvr_spi_multi>:

void rcvr_spi_multi (
	uint8_t *buff,		/* Pointer to data buffer */
	uint32_t btr		/* Number of bytes to receive (even number) */
)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	uint32_t i;
	for( i=0; i<btr; i++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	e00a      	b.n	8000d4a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	18d4      	adds	r4, r2, r3
 8000d3a:	20ff      	movs	r0, #255	@ 0xff
 8000d3c:	f7ff ffdc 	bl	8000cf8 <xchg_spi>
 8000d40:	4603      	mov	r3, r0
 8000d42:	7023      	strb	r3, [r4, #0]
	for( i=0; i<btr; i++) {
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d3f0      	bcc.n	8000d34 <rcvr_spi_multi+0x10>
	}
}
 8000d52:	bf00      	nop
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <wait_ready>:
}

int wait_ready (	/* 1:Ready, 0:Timeout */
	uint32_t wt			/* Timeout [ms] */
)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8000d64:	f7ff ff92 	bl	8000c8c <HAL_GetTick>
 8000d68:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8000d6e:	20ff      	movs	r0, #255	@ 0xff
 8000d70:	f7ff ffc2 	bl	8000cf8 <xchg_spi>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2bff      	cmp	r3, #255	@ 0xff
 8000d7c:	d007      	beq.n	8000d8e <wait_ready+0x32>
 8000d7e:	f7ff ff85 	bl	8000c8c <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8ef      	bhi.n	8000d6e <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	2bff      	cmp	r3, #255	@ 0xff
 8000d92:	bf0c      	ite	eq
 8000d94:	2301      	moveq	r3, #1
 8000d96:	2300      	movne	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/


void despiselect (void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	//CS_HIGH();		/* Set CS# high */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	2140      	movs	r1, #64	@ 0x40
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <despiselect+0x18>)
 8000dae:	f001 f9b1 	bl	8002114 <HAL_GPIO_WritePin>
	//trigger the SPI CS, start to use

	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8000db2:	20ff      	movs	r0, #255	@ 0xff
 8000db4:	f7ff ffa0 	bl	8000cf8 <xchg_spi>

}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	58020800 	.word	0x58020800

08000dc0 <spiselect>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	//CS_LOW();		/* Set CS# low */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2140      	movs	r1, #64	@ 0x40
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <spiselect+0x30>)
 8000dca:	f001 f9a3 	bl	8002114 <HAL_GPIO_WritePin>
	// trigger the SPI, end of use
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8000dce:	20ff      	movs	r0, #255	@ 0xff
 8000dd0:	f7ff ff92 	bl	8000cf8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8000dd4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dd8:	f7ff ffc0 	bl	8000d5c <wait_ready>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <spiselect+0x26>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e002      	b.n	8000dec <spiselect+0x2c>

	despiselect();
 8000de6:	f7ff ffdd 	bl	8000da4 <despiselect>
	return 0;	/* Timeout */
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58020800 	.word	0x58020800

08000df4 <rcvr_datablock>:

int rcvr_datablock (	/* 1:OK, 0:Error */
	uint8_t *buff,			/* Data buffer */
	uint32_t btr			/* Data block length (byte) */
)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	uint8_t token;


	SPI_Timer_On(200);
 8000dfe:	20c8      	movs	r0, #200	@ 0xc8
 8000e00:	f7ff ff50 	bl	8000ca4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8000e04:	20ff      	movs	r0, #255	@ 0xff
 8000e06:	f7ff ff77 	bl	8000cf8 <xchg_spi>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	2bff      	cmp	r3, #255	@ 0xff
 8000e12:	d104      	bne.n	8000e1e <rcvr_datablock+0x2a>
 8000e14:	f7ff ff5a 	bl	8000ccc <SPI_Timer_Status>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f2      	bne.n	8000e04 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	2bfe      	cmp	r3, #254	@ 0xfe
 8000e22:	d001      	beq.n	8000e28 <rcvr_datablock+0x34>
 8000e24:	2300      	movs	r3, #0
 8000e26:	e00a      	b.n	8000e3e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8000e28:	6839      	ldr	r1, [r7, #0]
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff7a 	bl	8000d24 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8000e30:	20ff      	movs	r0, #255	@ 0xff
 8000e32:	f7ff ff61 	bl	8000cf8 <xchg_spi>
 8000e36:	20ff      	movs	r0, #255	@ 0xff
 8000e38:	f7ff ff5e 	bl	8000cf8 <xchg_spi>

	return 1;						/* Function succeeded */
 8000e3c:	2301      	movs	r3, #1
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <send_cmd>:

uint8_t send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	uint8_t cmd,		/* Command index */
	uint32_t arg		/* Argument */
)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	6039      	str	r1, [r7, #0]
 8000e50:	71fb      	strb	r3, [r7, #7]
	uint8_t n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	da0e      	bge.n	8000e78 <send_cmd+0x32>
		cmd &= 0x7F;
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e60:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8000e62:	2100      	movs	r1, #0
 8000e64:	2037      	movs	r0, #55	@ 0x37
 8000e66:	f7ff ffee 	bl	8000e46 <send_cmd>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d901      	bls.n	8000e78 <send_cmd+0x32>
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	e051      	b.n	8000f1c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b0c      	cmp	r3, #12
 8000e7c:	d008      	beq.n	8000e90 <send_cmd+0x4a>
		despiselect();
 8000e7e:	f7ff ff91 	bl	8000da4 <despiselect>
		if (!spiselect()) return 0xFF;
 8000e82:	f7ff ff9d 	bl	8000dc0 <spiselect>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <send_cmd+0x4a>
 8000e8c:	23ff      	movs	r3, #255	@ 0xff
 8000e8e:	e045      	b.n	8000f1c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff2d 	bl	8000cf8 <xchg_spi>
	xchg_spi((uint8_t)(arg >> 24));		/* Argument[31..24] */
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	0e1b      	lsrs	r3, r3, #24
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff27 	bl	8000cf8 <xchg_spi>
	xchg_spi((uint8_t)(arg >> 16));		/* Argument[23..16] */
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0c1b      	lsrs	r3, r3, #16
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff21 	bl	8000cf8 <xchg_spi>
	xchg_spi((uint8_t)(arg >> 8));			/* Argument[15..8] */
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff1b 	bl	8000cf8 <xchg_spi>
	xchg_spi((uint8_t)arg);				/* Argument[7..0] */
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff16 	bl	8000cf8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <send_cmd+0x94>
 8000ed6:	2395      	movs	r3, #149	@ 0x95
 8000ed8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d101      	bne.n	8000ee4 <send_cmd+0x9e>
 8000ee0:	2387      	movs	r3, #135	@ 0x87
 8000ee2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff06 	bl	8000cf8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	d102      	bne.n	8000ef8 <send_cmd+0xb2>
 8000ef2:	20ff      	movs	r0, #255	@ 0xff
 8000ef4:	f7ff ff00 	bl	8000cf8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8000ef8:	230a      	movs	r3, #10
 8000efa:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8000efc:	20ff      	movs	r0, #255	@ 0xff
 8000efe:	f7ff fefb 	bl	8000cf8 <xchg_spi>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8000f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	da05      	bge.n	8000f1a <send_cmd+0xd4>
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3b01      	subs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <send_cmd+0xb6>

	return res;							/* Return received response */
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

uint8_t USER_SPI_initialize (
	uint8_t drv		/* Physical drive number (0) */
)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
//	//assume SPI already init init_spi();	/* Initialize SPI */
//
//	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */

	//FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8000f2e:	230a      	movs	r3, #10
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e005      	b.n	8000f40 <USER_SPI_initialize+0x1c>
 8000f34:	20ff      	movs	r0, #255	@ 0xff
 8000f36:	f7ff fedf 	bl	8000cf8 <xchg_spi>
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f6      	bne.n	8000f34 <USER_SPI_initialize+0x10>

	ty = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff ff7a 	bl	8000e46 <send_cmd>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 808b 	bne.w	8001070 <USER_SPI_initialize+0x14c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8000f5a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f5e:	f7ff fea1 	bl	8000ca4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8000f62:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f66:	2008      	movs	r0, #8
 8000f68:	f7ff ff6d 	bl	8000e46 <send_cmd>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d151      	bne.n	8001016 <USER_SPI_initialize+0xf2>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
 8000f76:	e00d      	b.n	8000f94 <USER_SPI_initialize+0x70>
 8000f78:	7bfc      	ldrb	r4, [r7, #15]
 8000f7a:	20ff      	movs	r0, #255	@ 0xff
 8000f7c:	f7ff febc 	bl	8000cf8 <xchg_spi>
 8000f80:	4603      	mov	r3, r0
 8000f82:	461a      	mov	r2, r3
 8000f84:	f104 0310 	add.w	r3, r4, #16
 8000f88:	443b      	add	r3, r7
 8000f8a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	3301      	adds	r3, #1
 8000f92:	73fb      	strb	r3, [r7, #15]
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d9ee      	bls.n	8000f78 <USER_SPI_initialize+0x54>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8000f9a:	7abb      	ldrb	r3, [r7, #10]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d167      	bne.n	8001070 <USER_SPI_initialize+0x14c>
 8000fa0:	7afb      	ldrb	r3, [r7, #11]
 8000fa2:	2baa      	cmp	r3, #170	@ 0xaa
 8000fa4:	d164      	bne.n	8001070 <USER_SPI_initialize+0x14c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8000fa6:	bf00      	nop
 8000fa8:	f7ff fe90 	bl	8000ccc <SPI_Timer_Status>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <USER_SPI_initialize+0x9e>
 8000fb2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fb6:	20a9      	movs	r0, #169	@ 0xa9
 8000fb8:	f7ff ff45 	bl	8000e46 <send_cmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f2      	bne.n	8000fa8 <USER_SPI_initialize+0x84>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8000fc2:	f7ff fe83 	bl	8000ccc <SPI_Timer_Status>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d051      	beq.n	8001070 <USER_SPI_initialize+0x14c>
 8000fcc:	2100      	movs	r1, #0
 8000fce:	203a      	movs	r0, #58	@ 0x3a
 8000fd0:	f7ff ff39 	bl	8000e46 <send_cmd>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d14a      	bne.n	8001070 <USER_SPI_initialize+0x14c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e00d      	b.n	8000ffc <USER_SPI_initialize+0xd8>
 8000fe0:	7bfc      	ldrb	r4, [r7, #15]
 8000fe2:	20ff      	movs	r0, #255	@ 0xff
 8000fe4:	f7ff fe88 	bl	8000cf8 <xchg_spi>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	f104 0310 	add.w	r3, r4, #16
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d9ee      	bls.n	8000fe0 <USER_SPI_initialize+0xbc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <USER_SPI_initialize+0xec>
 800100c:	230c      	movs	r3, #12
 800100e:	e000      	b.n	8001012 <USER_SPI_initialize+0xee>
 8001010:	2304      	movs	r3, #4
 8001012:	737b      	strb	r3, [r7, #13]
 8001014:	e02c      	b.n	8001070 <USER_SPI_initialize+0x14c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8001016:	2100      	movs	r1, #0
 8001018:	20a9      	movs	r0, #169	@ 0xa9
 800101a:	f7ff ff14 	bl	8000e46 <send_cmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d804      	bhi.n	800102e <USER_SPI_initialize+0x10a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001024:	2302      	movs	r3, #2
 8001026:	737b      	strb	r3, [r7, #13]
 8001028:	23a9      	movs	r3, #169	@ 0xa9
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e003      	b.n	8001036 <USER_SPI_initialize+0x112>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800102e:	2301      	movs	r3, #1
 8001030:	737b      	strb	r3, [r7, #13]
 8001032:	2301      	movs	r3, #1
 8001034:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8001036:	bf00      	nop
 8001038:	f7ff fe48 	bl	8000ccc <SPI_Timer_Status>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d007      	beq.n	8001052 <USER_SPI_initialize+0x12e>
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fefd 	bl	8000e46 <send_cmd>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f2      	bne.n	8001038 <USER_SPI_initialize+0x114>
			if (!SPI_Timer_Status() || send_cmd(CMD16, MMC_SECTOR_SIZE) != 0)	/* Set block length: 512 */
 8001052:	f7ff fe3b 	bl	8000ccc <SPI_Timer_Status>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <USER_SPI_initialize+0x148>
 800105c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001060:	2010      	movs	r0, #16
 8001062:	f7ff fef0 	bl	8000e46 <send_cmd>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <USER_SPI_initialize+0x14c>
				ty = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8001070:	4a05      	ldr	r2, [pc, #20]	@ (8001088 <USER_SPI_initialize+0x164>)
 8001072:	7b7b      	ldrb	r3, [r7, #13]
 8001074:	7013      	strb	r3, [r2, #0]
	// chưa define card type

	despiselect();
 8001076:	f7ff fe95 	bl	8000da4 <despiselect>
//		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
//	} else {			/* Failed */
//		Stat = STA_NOINIT;
//	}

	return Stat;
 800107a:	4b04      	ldr	r3, [pc, #16]	@ (800108c <USER_SPI_initialize+0x168>)
 800107c:	781b      	ldrb	r3, [r3, #0]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bd90      	pop	{r4, r7, pc}
 8001086:	bf00      	nop
 8001088:	24000000 	.word	0x24000000
 800108c:	24000001 	.word	0x24000001

08001090 <USER_SPI_read>:
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t *buff,		/* Pointer to the data buffer to store read data */
	uint32_t sector,	/* Start sector number (LBA) */
	uint32_t count		/* Number of sectors to read (1..128) */
)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <USER_SPI_read+0x1c>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <USER_SPI_read+0x20>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e044      	b.n	800113a <USER_SPI_read+0xaa>
//	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */

	if (!(CardType & CT_BLOCK)) sector *= MMC_SECTOR_SIZE;	/* LBA ot BA conversion (byte addressing cards) */
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <USER_SPI_read+0xb4>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d102      	bne.n	80010c2 <USER_SPI_read+0x32>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	025b      	lsls	r3, r3, #9
 80010c0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d111      	bne.n	80010ec <USER_SPI_read+0x5c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	2011      	movs	r0, #17
 80010cc:	f7ff febb 	bl	8000e46 <send_cmd>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d129      	bne.n	800112a <USER_SPI_read+0x9a>
			&& rcvr_datablock(buff, MMC_SECTOR_SIZE)) {
 80010d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f7ff fe8a 	bl	8000df4 <rcvr_datablock>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d021      	beq.n	800112a <USER_SPI_read+0x9a>
			count = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	e01e      	b.n	800112a <USER_SPI_read+0x9a>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	2012      	movs	r0, #18
 80010f0:	f7ff fea9 	bl	8000e46 <send_cmd>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d117      	bne.n	800112a <USER_SPI_read+0x9a>
			do {
				if (!rcvr_datablock(buff, MMC_SECTOR_SIZE)) break;
 80010fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f7ff fe78 	bl	8000df4 <rcvr_datablock>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <USER_SPI_read+0x90>
				buff += MMC_SECTOR_SIZE;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001110:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	603b      	str	r3, [r7, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1ed      	bne.n	80010fa <USER_SPI_read+0x6a>
 800111e:	e000      	b.n	8001122 <USER_SPI_read+0x92>
				if (!rcvr_datablock(buff, MMC_SECTOR_SIZE)) break;
 8001120:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8001122:	2100      	movs	r1, #0
 8001124:	200c      	movs	r0, #12
 8001126:	f7ff fe8e 	bl	8000e46 <send_cmd>
		}
	}
	despiselect();
 800112a:	f7ff fe3b 	bl	8000da4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	bf14      	ite	ne
 8001134:	2301      	movne	r3, #1
 8001136:	2300      	moveq	r3, #0
 8001138:	b2db      	uxtb	r3, r3
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000000 	.word	0x24000000

08001148 <USER_SPI_ioctl>:
DRESULT USER_SPI_ioctl (
	uint8_t drv,		/* Physical drive number (0) */
	uint8_t cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	@ 0x30
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	603a      	str	r2, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
 8001154:	460b      	mov	r3, r1
 8001156:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16];
	uint32_t *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <USER_SPI_ioctl+0x1a>
 800115e:	2304      	movs	r3, #4
 8001160:	e15a      	b.n	8001418 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001162:	4baf      	ldr	r3, [pc, #700]	@ (8001420 <USER_SPI_ioctl+0x2d8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <USER_SPI_ioctl+0x2a>
 800116e:	2303      	movs	r3, #3
 8001170:	e152      	b.n	8001418 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	2b04      	cmp	r3, #4
 800117c:	f200 8137 	bhi.w	80013ee <USER_SPI_ioctl+0x2a6>
 8001180:	a201      	add	r2, pc, #4	@ (adr r2, 8001188 <USER_SPI_ioctl+0x40>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	0800119d 	.word	0x0800119d
 800118c:	080011b1 	.word	0x080011b1
 8001190:	080013ef 	.word	0x080013ef
 8001194:	0800125d 	.word	0x0800125d
 8001198:	08001353 	.word	0x08001353
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800119c:	f7ff fe10 	bl	8000dc0 <spiselect>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8127 	beq.w	80013f6 <USER_SPI_ioctl+0x2ae>
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80011ae:	e122      	b.n	80013f6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (uint32_t) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80011b0:	2100      	movs	r1, #0
 80011b2:	2009      	movs	r0, #9
 80011b4:	f7ff fe47 	bl	8000e46 <send_cmd>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 811d 	bne.w	80013fa <USER_SPI_ioctl+0x2b2>
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2110      	movs	r1, #16
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fe14 	bl	8000df4 <rcvr_datablock>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 8113 	beq.w	80013fa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80011d4:	7b3b      	ldrb	r3, [r7, #12]
 80011d6:	099b      	lsrs	r3, r3, #6
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d111      	bne.n	8001202 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((uint16_t)csd[8] << 8) + ((uint32_t)(csd[7] & 63) << 16) + 1;
 80011de:	7d7b      	ldrb	r3, [r7, #21]
 80011e0:	461a      	mov	r2, r3
 80011e2:	7d3b      	ldrb	r3, [r7, #20]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	4413      	add	r3, r2
 80011e8:	461a      	mov	r2, r3
 80011ea:	7cfb      	ldrb	r3, [r7, #19]
 80011ec:	041b      	lsls	r3, r3, #16
 80011ee:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80011f2:	4413      	add	r3, r2
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
				*(uint32_t*)buff = csize << 10;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	029a      	lsls	r2, r3, #10
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e028      	b.n	8001254 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001202:	7c7b      	ldrb	r3, [r7, #17]
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	b2da      	uxtb	r2, r3
 800120a:	7dbb      	ldrb	r3, [r7, #22]
 800120c:	09db      	lsrs	r3, r3, #7
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b2da      	uxtb	r2, r3
 8001214:	7d7b      	ldrb	r3, [r7, #21]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 0306 	and.w	r3, r3, #6
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4413      	add	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3302      	adds	r3, #2
 8001226:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((uint16_t)csd[7] << 2) + ((uint16_t)(csd[6] & 3) << 10) + 1;
 800122a:	7d3b      	ldrb	r3, [r7, #20]
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	b2db      	uxtb	r3, r3
 8001230:	461a      	mov	r2, r3
 8001232:	7cfb      	ldrb	r3, [r7, #19]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	441a      	add	r2, r3
 8001238:	7cbb      	ldrb	r3, [r7, #18]
 800123a:	029b      	lsls	r3, r3, #10
 800123c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001240:	4413      	add	r3, r2
 8001242:	3301      	adds	r3, #1
 8001244:	61fb      	str	r3, [r7, #28]
				*(uint32_t*)buff = csize << (n - 9);
 8001246:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800124a:	3b09      	subs	r3, #9
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	409a      	lsls	r2, r3
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800125a:	e0ce      	b.n	80013fa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (uint32_t) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800125c:	4b71      	ldr	r3, [pc, #452]	@ (8001424 <USER_SPI_ioctl+0x2dc>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d031      	beq.n	80012cc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8001268:	2100      	movs	r1, #0
 800126a:	208d      	movs	r0, #141	@ 0x8d
 800126c:	f7ff fdeb 	bl	8000e46 <send_cmd>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	f040 80c3 	bne.w	80013fe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8001278:	20ff      	movs	r0, #255	@ 0xff
 800127a:	f7ff fd3d 	bl	8000cf8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	2110      	movs	r1, #16
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fdb5 	bl	8000df4 <rcvr_datablock>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80b6 	beq.w	80013fe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8001292:	2330      	movs	r3, #48	@ 0x30
 8001294:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001298:	e007      	b.n	80012aa <USER_SPI_ioctl+0x162>
 800129a:	20ff      	movs	r0, #255	@ 0xff
 800129c:	f7ff fd2c 	bl	8000cf8 <xchg_spi>
 80012a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012a4:	3b01      	subs	r3, #1
 80012a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80012aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1f3      	bne.n	800129a <USER_SPI_ioctl+0x152>
					*(uint32_t*)buff = 16UL << (csd[10] >> 4);
 80012b2:	7dbb      	ldrb	r3, [r7, #22]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	2310      	movs	r3, #16
 80012bc:	fa03 f202 	lsl.w	r2, r3, r2
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80012ca:	e098      	b.n	80013fe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80012cc:	2100      	movs	r1, #0
 80012ce:	2009      	movs	r0, #9
 80012d0:	f7ff fdb9 	bl	8000e46 <send_cmd>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f040 8091 	bne.w	80013fe <USER_SPI_ioctl+0x2b6>
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2110      	movs	r1, #16
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd86 	bl	8000df4 <rcvr_datablock>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80012f0:	4b4c      	ldr	r3, [pc, #304]	@ (8001424 <USER_SPI_ioctl+0x2dc>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d012      	beq.n	8001322 <USER_SPI_ioctl+0x1da>
					*(uint32_t*)buff = (((csd[10] & 63) << 1) + ((uint16_t)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80012fc:	7dbb      	ldrb	r3, [r7, #22]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001304:	7dfa      	ldrb	r2, [r7, #23]
 8001306:	09d2      	lsrs	r2, r2, #7
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	4413      	add	r3, r2
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	7e7b      	ldrb	r3, [r7, #25]
 8001310:	099b      	lsrs	r3, r3, #6
 8001312:	b2db      	uxtb	r3, r3
 8001314:	3b01      	subs	r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	461a      	mov	r2, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e013      	b.n	800134a <USER_SPI_ioctl+0x202>
					*(uint32_t*)buff = ((uint16_t)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8001322:	7dbb      	ldrb	r3, [r7, #22]
 8001324:	109b      	asrs	r3, r3, #2
 8001326:	b29b      	uxth	r3, r3
 8001328:	f003 031f 	and.w	r3, r3, #31
 800132c:	3301      	adds	r3, #1
 800132e:	7dfa      	ldrb	r2, [r7, #23]
 8001330:	00d2      	lsls	r2, r2, #3
 8001332:	f002 0218 	and.w	r2, r2, #24
 8001336:	7df9      	ldrb	r1, [r7, #23]
 8001338:	0949      	lsrs	r1, r1, #5
 800133a:	b2c9      	uxtb	r1, r1
 800133c:	440a      	add	r2, r1
 800133e:	3201      	adds	r2, #1
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	461a      	mov	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8001350:	e055      	b.n	80013fe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001352:	4b34      	ldr	r3, [pc, #208]	@ (8001424 <USER_SPI_ioctl+0x2dc>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f003 0306 	and.w	r3, r3, #6
 800135a:	2b00      	cmp	r3, #0
 800135c:	d051      	beq.n	8001402 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800135e:	f107 020c 	add.w	r2, r7, #12
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	210b      	movs	r1, #11
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff feee 	bl	8001148 <USER_SPI_ioctl>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d149      	bne.n	8001406 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8001372:	7b3b      	ldrb	r3, [r7, #12]
 8001374:	099b      	lsrs	r3, r3, #6
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d104      	bne.n	8001386 <USER_SPI_ioctl+0x23e>
 800137c:	7dbb      	ldrb	r3, [r7, #22]
 800137e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001382:	2b00      	cmp	r3, #0
 8001384:	d041      	beq.n	800140a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8001396:	4b23      	ldr	r3, [pc, #140]	@ (8001424 <USER_SPI_ioctl+0x2dc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d105      	bne.n	80013ae <USER_SPI_ioctl+0x266>
			st *= MMC_SECTOR_SIZE; ed *= MMC_SECTOR_SIZE;
 80013a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a4:	025b      	lsls	r3, r3, #9
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	025b      	lsls	r3, r3, #9
 80013ac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80013ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80013b0:	2020      	movs	r0, #32
 80013b2:	f7ff fd48 	bl	8000e46 <send_cmd>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d128      	bne.n	800140e <USER_SPI_ioctl+0x2c6>
 80013bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013be:	2021      	movs	r0, #33	@ 0x21
 80013c0:	f7ff fd41 	bl	8000e46 <send_cmd>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d121      	bne.n	800140e <USER_SPI_ioctl+0x2c6>
 80013ca:	2100      	movs	r1, #0
 80013cc:	2026      	movs	r0, #38	@ 0x26
 80013ce:	f7ff fd3a 	bl	8000e46 <send_cmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11a      	bne.n	800140e <USER_SPI_ioctl+0x2c6>
 80013d8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80013dc:	f7ff fcbe 	bl	8000d5c <wait_ready>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d013      	beq.n	800140e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80013ec:	e00f      	b.n	800140e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80013ee:	2304      	movs	r3, #4
 80013f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80013f4:	e00c      	b.n	8001410 <USER_SPI_ioctl+0x2c8>
		break;
 80013f6:	bf00      	nop
 80013f8:	e00a      	b.n	8001410 <USER_SPI_ioctl+0x2c8>
		break;
 80013fa:	bf00      	nop
 80013fc:	e008      	b.n	8001410 <USER_SPI_ioctl+0x2c8>
		break;
 80013fe:	bf00      	nop
 8001400:	e006      	b.n	8001410 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001402:	bf00      	nop
 8001404:	e004      	b.n	8001410 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8001406:	bf00      	nop
 8001408:	e002      	b.n	8001410 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800140a:	bf00      	nop
 800140c:	e000      	b.n	8001410 <USER_SPI_ioctl+0x2c8>
		break;
 800140e:	bf00      	nop
	}

	despiselect();
 8001410:	f7ff fcc8 	bl	8000da4 <despiselect>

	return res;
 8001414:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001418:	4618      	mov	r0, r3
 800141a:	3730      	adds	r7, #48	@ 0x30
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	24000001 	.word	0x24000001
 8001424:	24000000 	.word	0x24000000

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_MspInit+0x30>)
 8001430:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001434:	4a08      	ldr	r2, [pc, #32]	@ (8001458 <HAL_MspInit+0x30>)
 8001436:	f043 0302 	orr.w	r3, r3, #2
 800143a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800143e:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_MspInit+0x30>)
 8001440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	58024400 	.word	0x58024400

0800145c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0bc      	sub	sp, #240	@ 0xf0
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	22c0      	movs	r2, #192	@ 0xc0
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f00c fbed 	bl	800dc5c <memset>
  if(hspi->Instance==SPI2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a38      	ldr	r2, [pc, #224]	@ (8001568 <HAL_SPI_MspInit+0x10c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d169      	bne.n	8001560 <HAL_SPI_MspInit+0x104>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800148c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001498:	2300      	movs	r3, #0
 800149a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 f94d 	bl	8004740 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80014ac:	f7ff fbe8 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014b0:	4b2e      	ldr	r3, [pc, #184]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b6:	4a2d      	ldr	r2, [pc, #180]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014c0:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b27      	ldr	r3, [pc, #156]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014d4:	4a25      	ldr	r2, [pc, #148]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f2:	4a1e      	ldr	r2, [pc, #120]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_SPI_MspInit+0x110>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2_C     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800150a:	2306      	movs	r3, #6
 800150c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001522:	2305      	movs	r3, #5
 8001524:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800152c:	4619      	mov	r1, r3
 800152e:	4810      	ldr	r0, [pc, #64]	@ (8001570 <HAL_SPI_MspInit+0x114>)
 8001530:	f000 fc40 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001534:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001538:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800154e:	2305      	movs	r3, #5
 8001550:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <HAL_SPI_MspInit+0x118>)
 800155c:	f000 fc2a 	bl	8001db4 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001560:	bf00      	nop
 8001562:	37f0      	adds	r7, #240	@ 0xf0
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40003800 	.word	0x40003800
 800156c:	58024400 	.word	0x58024400
 8001570:	58020800 	.word	0x58020800
 8001574:	58020400 	.word	0x58020400

08001578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10e      	bne.n	80015a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800158a:	4b0b      	ldr	r3, [pc, #44]	@ (80015b8 <HAL_TIM_Base_MspInit+0x40>)
 800158c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001590:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_TIM_Base_MspInit+0x40>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <HAL_TIM_Base_MspInit+0x40>)
 800159c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40001000 	.word	0x40001000
 80015b8:	58024400 	.word	0x58024400

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0ba      	sub	sp, #232	@ 0xe8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	22c0      	movs	r2, #192	@ 0xc0
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00c fb3d 	bl	800dc5c <memset>
  if(huart->Instance==USART1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a27      	ldr	r2, [pc, #156]	@ (8001684 <HAL_UART_MspInit+0xc8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d146      	bne.n	800167a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015ec:	f04f 0201 	mov.w	r2, #1
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	4618      	mov	r0, r3
 8001604:	f003 f89c 	bl	8004740 <HAL_RCCEx_PeriphCLKConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800160e:	f7ff fb37 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001612:	4b1d      	ldr	r3, [pc, #116]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 8001614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001618:	4a1b      	ldr	r2, [pc, #108]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 800161a:	f043 0310 	orr.w	r3, r3, #16
 800161e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001622:	4b19      	ldr	r3, [pc, #100]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 8001624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001628:	f003 0310 	and.w	r3, r3, #16
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001636:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001640:	4b11      	ldr	r3, [pc, #68]	@ (8001688 <HAL_UART_MspInit+0xcc>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800164e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001668:	2304      	movs	r3, #4
 800166a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001672:	4619      	mov	r1, r3
 8001674:	4805      	ldr	r0, [pc, #20]	@ (800168c <HAL_UART_MspInit+0xd0>)
 8001676:	f000 fb9d 	bl	8001db4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800167a:	bf00      	nop
 800167c:	37e8      	adds	r7, #232	@ 0xe8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40011000 	.word	0x40011000
 8001688:	58024400 	.word	0x58024400
 800168c:	58020400 	.word	0x58020400

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <NMI_Handler+0x4>

08001698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <MemManage_Handler+0x4>

080016a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f000 f999 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <OTG_FS_IRQHandler+0x10>)
 80016f6:	f000 fe67 	bl	80023c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	240009fc 	.word	0x240009fc

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f00c fa9a 	bl	800dc6c <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	24080000 	.word	0x24080000
 8001764:	00000400 	.word	0x00000400
 8001768:	24000500 	.word	0x24000500
 800176c:	240012a0 	.word	0x240012a0

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001774:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <SystemInit+0x114>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a42      	ldr	r2, [pc, #264]	@ (8001884 <SystemInit+0x114>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001784:	4b40      	ldr	r3, [pc, #256]	@ (8001888 <SystemInit+0x118>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	2b06      	cmp	r3, #6
 800178e:	d807      	bhi.n	80017a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001790:	4b3d      	ldr	r3, [pc, #244]	@ (8001888 <SystemInit+0x118>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 030f 	bic.w	r3, r3, #15
 8001798:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <SystemInit+0x118>)
 800179a:	f043 0307 	orr.w	r3, r3, #7
 800179e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017a0:	4b3a      	ldr	r3, [pc, #232]	@ (800188c <SystemInit+0x11c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a39      	ldr	r2, [pc, #228]	@ (800188c <SystemInit+0x11c>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017ac:	4b37      	ldr	r3, [pc, #220]	@ (800188c <SystemInit+0x11c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017b2:	4b36      	ldr	r3, [pc, #216]	@ (800188c <SystemInit+0x11c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4935      	ldr	r1, [pc, #212]	@ (800188c <SystemInit+0x11c>)
 80017b8:	4b35      	ldr	r3, [pc, #212]	@ (8001890 <SystemInit+0x120>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017be:	4b32      	ldr	r3, [pc, #200]	@ (8001888 <SystemInit+0x118>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <SystemInit+0x118>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 030f 	bic.w	r3, r3, #15
 80017d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001888 <SystemInit+0x118>)
 80017d4:	f043 0307 	orr.w	r3, r3, #7
 80017d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80017da:	4b2c      	ldr	r3, [pc, #176]	@ (800188c <SystemInit+0x11c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80017e0:	4b2a      	ldr	r3, [pc, #168]	@ (800188c <SystemInit+0x11c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017e6:	4b29      	ldr	r3, [pc, #164]	@ (800188c <SystemInit+0x11c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <SystemInit+0x11c>)
 80017ee:	4a29      	ldr	r2, [pc, #164]	@ (8001894 <SystemInit+0x124>)
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <SystemInit+0x11c>)
 80017f4:	4a28      	ldr	r2, [pc, #160]	@ (8001898 <SystemInit+0x128>)
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017f8:	4b24      	ldr	r3, [pc, #144]	@ (800188c <SystemInit+0x11c>)
 80017fa:	4a28      	ldr	r2, [pc, #160]	@ (800189c <SystemInit+0x12c>)
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017fe:	4b23      	ldr	r3, [pc, #140]	@ (800188c <SystemInit+0x11c>)
 8001800:	2200      	movs	r2, #0
 8001802:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001804:	4b21      	ldr	r3, [pc, #132]	@ (800188c <SystemInit+0x11c>)
 8001806:	4a25      	ldr	r2, [pc, #148]	@ (800189c <SystemInit+0x12c>)
 8001808:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <SystemInit+0x11c>)
 800180c:	2200      	movs	r2, #0
 800180e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <SystemInit+0x11c>)
 8001812:	4a22      	ldr	r2, [pc, #136]	@ (800189c <SystemInit+0x12c>)
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <SystemInit+0x11c>)
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <SystemInit+0x11c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1a      	ldr	r2, [pc, #104]	@ (800188c <SystemInit+0x11c>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001828:	4b18      	ldr	r3, [pc, #96]	@ (800188c <SystemInit+0x11c>)
 800182a:	2200      	movs	r2, #0
 800182c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800182e:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <SystemInit+0x130>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <SystemInit+0x134>)
 8001834:	4013      	ands	r3, r2
 8001836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800183a:	d202      	bcs.n	8001842 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800183c:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <SystemInit+0x138>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001842:	4b12      	ldr	r3, [pc, #72]	@ (800188c <SystemInit+0x11c>)
 8001844:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d113      	bne.n	8001878 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001850:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <SystemInit+0x11c>)
 8001852:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001856:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <SystemInit+0x11c>)
 8001858:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800185c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <SystemInit+0x13c>)
 8001862:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001866:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <SystemInit+0x11c>)
 800186a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800186e:	4a07      	ldr	r2, [pc, #28]	@ (800188c <SystemInit+0x11c>)
 8001870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001874:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	52002000 	.word	0x52002000
 800188c:	58024400 	.word	0x58024400
 8001890:	eaf6ed7f 	.word	0xeaf6ed7f
 8001894:	02020200 	.word	0x02020200
 8001898:	01ff0000 	.word	0x01ff0000
 800189c:	01010280 	.word	0x01010280
 80018a0:	5c001000 	.word	0x5c001000
 80018a4:	ffff0000 	.word	0xffff0000
 80018a8:	51008108 	.word	0x51008108
 80018ac:	52004000 	.word	0x52004000

080018b0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <ExitRun0Mode+0x2c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <ExitRun0Mode+0x2c>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80018c0:	bf00      	nop
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <ExitRun0Mode+0x2c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f9      	beq.n	80018c2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	58024800 	.word	0x58024800

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018e0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800191c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80018e4:	f7ff ffe4 	bl	80018b0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e8:	f7ff ff42 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ec:	480c      	ldr	r0, [pc, #48]	@ (8001920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ee:	490d      	ldr	r1, [pc, #52]	@ (8001924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f4:	e002      	b.n	80018fc <LoopCopyDataInit>

080018f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fa:	3304      	adds	r3, #4

080018fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001900:	d3f9      	bcc.n	80018f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001902:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001904:	4c0a      	ldr	r4, [pc, #40]	@ (8001930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001908:	e001      	b.n	800190e <LoopFillZerobss>

0800190a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800190c:	3204      	adds	r2, #4

0800190e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001910:	d3fb      	bcc.n	800190a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001912:	f00c f9b1 	bl	800dc78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7fe ffb7 	bl	8000888 <main>
  bx  lr
 800191a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001920:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001924:	2400016c 	.word	0x2400016c
  ldr r2, =_sidata
 8001928:	0800e6f0 	.word	0x0800e6f0
  ldr r2, =_sbss
 800192c:	2400016c 	.word	0x2400016c
  ldr r4, =_ebss
 8001930:	240012a0 	.word	0x240012a0

08001934 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC3_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193e:	2003      	movs	r0, #3
 8001940:	f000 f980 	bl	8001c44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001944:	f002 fd26 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_Init+0x68>)
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	0a1b      	lsrs	r3, r3, #8
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	4913      	ldr	r1, [pc, #76]	@ (80019a4 <HAL_Init+0x6c>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	f003 031f 	and.w	r3, r3, #31
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_Init+0x68>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <HAL_Init+0x6c>)
 800196c:	5cd3      	ldrb	r3, [r2, r3]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <HAL_Init+0x70>)
 800197a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800197c:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_Init+0x74>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001982:	200f      	movs	r0, #15
 8001984:	f000 f814 	bl	80019b0 <HAL_InitTick>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e002      	b.n	8001998 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001992:	f7ff fd49 	bl	8001428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	58024400 	.word	0x58024400
 80019a4:	0800e650 	.word	0x0800e650
 80019a8:	24000008 	.word	0x24000008
 80019ac:	24000004 	.word	0x24000004

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_InitTick+0x60>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e021      	b.n	8001a08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <HAL_InitTick+0x64>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_InitTick+0x60>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f965 	bl	8001caa <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295
 80019f8:	f000 f92f 	bl	8001c5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	@ (8001a18 <HAL_InitTick+0x68>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24000010 	.word	0x24000010
 8001a14:	24000004 	.word	0x24000004
 8001a18:	2400000c 	.word	0x2400000c

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	@ (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	24000010 	.word	0x24000010
 8001a40:	24000504 	.word	0x24000504

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff f91e 	bl	8000c8c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff f90e 	bl	8000c8c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	24000010 	.word	0x24000010

08001a8c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_GetREVID+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0c1b      	lsrs	r3, r3, #16
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	5c001000 	.word	0x5c001000

08001aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00
 8001ae8:	05fa0000 	.word	0x05fa0000

08001aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af0:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <__NVIC_GetPriorityGrouping+0x18>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 0307 	and.w	r3, r3, #7
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0b      	blt.n	8001b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	@ (8001b40 <__NVIC_EnableIRQ+0x38>)
 8001b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	db0a      	blt.n	8001b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <__NVIC_SetPriority+0x4c>)
 8001b5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b62:	0112      	lsls	r2, r2, #4
 8001b64:	b2d2      	uxtb	r2, r2
 8001b66:	440b      	add	r3, r1
 8001b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b6c:	e00a      	b.n	8001b84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <__NVIC_SetPriority+0x50>)
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3b04      	subs	r3, #4
 8001b7c:	0112      	lsls	r2, r2, #4
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	440b      	add	r3, r1
 8001b82:	761a      	strb	r2, [r3, #24]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	@ 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f1c3 0307 	rsb	r3, r3, #7
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	bf28      	it	cs
 8001bb6:	2304      	movcs	r3, #4
 8001bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	2b06      	cmp	r3, #6
 8001bc0:	d902      	bls.n	8001bc8 <NVIC_EncodePriority+0x30>
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3b03      	subs	r3, #3
 8001bc6:	e000      	b.n	8001bca <NVIC_EncodePriority+0x32>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43da      	mvns	r2, r3
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	401a      	ands	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	4313      	orrs	r3, r2
         );
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3724      	adds	r7, #36	@ 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c10:	d301      	bcc.n	8001c16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00f      	b.n	8001c36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <SysTick_Config+0x40>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c1e:	210f      	movs	r1, #15
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f7ff ff8e 	bl	8001b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c28:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <SysTick_Config+0x40>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <SysTick_Config+0x40>)
 8001c30:	2207      	movs	r2, #7
 8001c32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000e010 	.word	0xe000e010

08001c44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff ff29 	bl	8001aa4 <__NVIC_SetPriorityGrouping>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c68:	f7ff ff40 	bl	8001aec <__NVIC_GetPriorityGrouping>
 8001c6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	68b9      	ldr	r1, [r7, #8]
 8001c72:	6978      	ldr	r0, [r7, #20]
 8001c74:	f7ff ff90 	bl	8001b98 <NVIC_EncodePriority>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c7e:	4611      	mov	r1, r2
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff5f 	bl	8001b44 <__NVIC_SetPriority>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff33 	bl	8001b08 <__NVIC_EnableIRQ>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffa4 	bl	8001c00 <SysTick_Config>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001cc8:	f3bf 8f5f 	dmb	sy
}
 8001ccc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001cce:	4b07      	ldr	r3, [pc, #28]	@ (8001cec <HAL_MPU_Disable+0x28>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd2:	4a06      	ldr	r2, [pc, #24]	@ (8001cec <HAL_MPU_Disable+0x28>)
 8001cd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_MPU_Disable+0x2c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	e000ed90 	.word	0xe000ed90

08001cf4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d2c <HAL_MPU_Enable+0x38>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_MPU_Enable+0x3c>)
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	4a09      	ldr	r2, [pc, #36]	@ (8001d30 <HAL_MPU_Enable+0x3c>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d10:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001d12:	f3bf 8f4f 	dsb	sy
}
 8001d16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d18:	f3bf 8f6f 	isb	sy
}
 8001d1c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e000ed90 	.word	0xe000ed90
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	785a      	ldrb	r2, [r3, #1]
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HAL_MPU_ConfigRegion+0x7c>)
 8001d42:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_MPU_ConfigRegion+0x7c>)
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_MPU_ConfigRegion+0x7c>)
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d50:	4a17      	ldr	r2, [pc, #92]	@ (8001db0 <HAL_MPU_ConfigRegion+0x7c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	7b1b      	ldrb	r3, [r3, #12]
 8001d5c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7adb      	ldrb	r3, [r3, #11]
 8001d62:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	7a9b      	ldrb	r3, [r3, #10]
 8001d6a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7b5b      	ldrb	r3, [r3, #13]
 8001d72:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7b9b      	ldrb	r3, [r3, #14]
 8001d7a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7bdb      	ldrb	r3, [r3, #15]
 8001d82:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7a5b      	ldrb	r3, [r3, #9]
 8001d8a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7a1b      	ldrb	r3, [r3, #8]
 8001d92:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d94:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	7812      	ldrb	r2, [r2, #0]
 8001d9a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d9e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001da0:	6113      	str	r3, [r2, #16]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed90 	.word	0xe000ed90

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	@ 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dc2:	4b89      	ldr	r3, [pc, #548]	@ (8001fe8 <HAL_GPIO_Init+0x234>)
 8001dc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dc6:	e194      	b.n	80020f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8186 	beq.w	80020ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d005      	beq.n	8001df8 <HAL_GPIO_Init+0x44>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d130      	bne.n	8001e5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e2e:	2201      	movs	r2, #1
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 0201 	and.w	r2, r3, #1
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d017      	beq.n	8001e96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d123      	bne.n	8001eea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	08da      	lsrs	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	3208      	adds	r2, #8
 8001eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	691a      	ldr	r2, [r3, #16]
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	69b9      	ldr	r1, [r7, #24]
 8001ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 0203 	and.w	r2, r3, #3
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80e0 	beq.w	80020ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <HAL_GPIO_Init+0x238>)
 8001f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f32:	4a2e      	ldr	r2, [pc, #184]	@ (8001fec <HAL_GPIO_Init+0x238>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <HAL_GPIO_Init+0x238>)
 8001f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4a:	4a29      	ldr	r2, [pc, #164]	@ (8001ff0 <HAL_GPIO_Init+0x23c>)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a20      	ldr	r2, [pc, #128]	@ (8001ff4 <HAL_GPIO_Init+0x240>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d052      	beq.n	800201c <HAL_GPIO_Init+0x268>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <HAL_GPIO_Init+0x244>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d031      	beq.n	8001fe2 <HAL_GPIO_Init+0x22e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1e      	ldr	r2, [pc, #120]	@ (8001ffc <HAL_GPIO_Init+0x248>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <HAL_GPIO_Init+0x22a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1d      	ldr	r2, [pc, #116]	@ (8002000 <HAL_GPIO_Init+0x24c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d025      	beq.n	8001fda <HAL_GPIO_Init+0x226>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_GPIO_Init+0x250>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <HAL_GPIO_Init+0x222>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_GPIO_Init+0x254>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x21e>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800200c <HAL_GPIO_Init+0x258>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x21a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a19      	ldr	r2, [pc, #100]	@ (8002010 <HAL_GPIO_Init+0x25c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x216>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <HAL_GPIO_Init+0x260>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x212>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a17      	ldr	r2, [pc, #92]	@ (8002018 <HAL_GPIO_Init+0x264>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x20e>
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	e02d      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	e02b      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	e029      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fca:	2307      	movs	r3, #7
 8001fcc:	e027      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fce:	2306      	movs	r3, #6
 8001fd0:	e025      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e023      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	e021      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e01f      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e01d      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e01b      	b.n	800201e <HAL_GPIO_Init+0x26a>
 8001fe6:	bf00      	nop
 8001fe8:	58000080 	.word	0x58000080
 8001fec:	58024400 	.word	0x58024400
 8001ff0:	58000400 	.word	0x58000400
 8001ff4:	58020000 	.word	0x58020000
 8001ff8:	58020400 	.word	0x58020400
 8001ffc:	58020800 	.word	0x58020800
 8002000:	58020c00 	.word	0x58020c00
 8002004:	58021000 	.word	0x58021000
 8002008:	58021400 	.word	0x58021400
 800200c:	58021800 	.word	0x58021800
 8002010:	58021c00 	.word	0x58021c00
 8002014:	58022000 	.word	0x58022000
 8002018:	58022400 	.word	0x58022400
 800201c:	2300      	movs	r3, #0
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	f002 0203 	and.w	r2, r2, #3
 8002024:	0092      	lsls	r2, r2, #2
 8002026:	4093      	lsls	r3, r2
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4313      	orrs	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800202e:	4938      	ldr	r1, [pc, #224]	@ (8002110 <HAL_GPIO_Init+0x35c>)
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	3302      	adds	r3, #2
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800203c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002062:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800206a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3301      	adds	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f ae63 	bne.w	8001dc8 <HAL_GPIO_Init+0x14>
  }
}
 8002102:	bf00      	nop
 8002104:	bf00      	nop
 8002106:	3724      	adds	r7, #36	@ 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	58000400 	.word	0x58000400

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af02      	add	r7, sp, #8
 800214c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0fe      	b.n	8002356 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f00b f9fd 	bl	800d56c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f006 fa65 	bl	800864e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7c1a      	ldrb	r2, [r3, #16]
 800218c:	f88d 2000 	strb.w	r2, [sp]
 8002190:	3304      	adds	r3, #4
 8002192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002194:	f006 f936 	bl	8008404 <USB_CoreInit>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0d5      	b.n	8002356 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f006 fa5d 	bl	8008670 <USB_SetCurrentMode>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0c6      	b.n	8002356 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e04a      	b.n	8002264 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021ce:	7bfa      	ldrb	r2, [r7, #15]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4413      	add	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	3315      	adds	r3, #21
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	3314      	adds	r3, #20
 80021f2:	7bfa      	ldrb	r2, [r7, #15]
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	b298      	uxth	r0, r3
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	332e      	adds	r3, #46	@ 0x2e
 800220a:	4602      	mov	r2, r0
 800220c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3318      	adds	r3, #24
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	331c      	adds	r3, #28
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3320      	adds	r3, #32
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3324      	adds	r3, #36	@ 0x24
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	3301      	adds	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	791b      	ldrb	r3, [r3, #4]
 8002268:	7bfa      	ldrb	r2, [r7, #15]
 800226a:	429a      	cmp	r2, r3
 800226c:	d3af      	bcc.n	80021ce <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e044      	b.n	80022fe <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	791b      	ldrb	r3, [r3, #4]
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3b5      	bcc.n	8002274 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6818      	ldr	r0, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7c1a      	ldrb	r2, [r3, #16]
 8002310:	f88d 2000 	strb.w	r2, [sp]
 8002314:	3304      	adds	r3, #4
 8002316:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002318:	f006 f9f6 	bl	8008708 <USB_DevInit>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d005      	beq.n	800232e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e013      	b.n	8002356 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7b1b      	ldrb	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d102      	bne.n	800234a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f001 f99b 	bl	8003680 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f007 fa39 	bl	80097c6 <USB_DevDisconnect>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_PCD_Start+0x1c>
 8002376:	2302      	movs	r3, #2
 8002378:	e022      	b.n	80023c0 <HAL_PCD_Start+0x62>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f006 f940 	bl	800862c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f007 f9e7 	bl	8009784 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b08d      	sub	sp, #52	@ 0x34
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f007 faa5 	bl	800992e <USB_GetMode>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 84b9 	bne.w	8002d5e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f007 fa09 	bl	8009808 <USB_ReadInterrupts>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 84af 	beq.w	8002d5c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0a1b      	lsrs	r3, r3, #8
 8002408:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f007 f9f6 	bl	8009808 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d107      	bne.n	8002436 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f002 0202 	and.w	r2, r2, #2
 8002434:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f007 f9e4 	bl	8009808 <USB_ReadInterrupts>
 8002440:	4603      	mov	r3, r0
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b10      	cmp	r3, #16
 8002448:	d161      	bne.n	800250e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0210 	bic.w	r2, r2, #16
 8002458:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f003 020f 	and.w	r2, r3, #15
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	3304      	adds	r3, #4
 8002478:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	0c5b      	lsrs	r3, r3, #17
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	2b02      	cmp	r3, #2
 8002484:	d124      	bne.n	80024d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d035      	beq.n	80024fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800249c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	6a38      	ldr	r0, [r7, #32]
 80024a6:	f007 f81b 	bl	80094e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024b6:	441a      	add	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	695a      	ldr	r2, [r3, #20]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024c8:	441a      	add	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	615a      	str	r2, [r3, #20]
 80024ce:	e016      	b.n	80024fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	0c5b      	lsrs	r3, r3, #17
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	2b06      	cmp	r3, #6
 80024da:	d110      	bne.n	80024fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024e2:	2208      	movs	r2, #8
 80024e4:	4619      	mov	r1, r3
 80024e6:	6a38      	ldr	r0, [r7, #32]
 80024e8:	f006 fffa 	bl	80094e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f8:	441a      	add	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0210 	orr.w	r2, r2, #16
 800250c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f007 f978 	bl	8009808 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800251e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002522:	f040 80a7 	bne.w	8002674 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f007 f97d 	bl	800982e <USB_ReadDevAllOutEpInterrupt>
 8002534:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002536:	e099      	b.n	800266c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 808e 	beq.w	8002660 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f007 f9a1 	bl	8009896 <USB_ReadDevOutEPInterrupt>
 8002554:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800256c:	461a      	mov	r2, r3
 800256e:	2301      	movs	r3, #1
 8002570:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002572:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fefd 	bl	8003374 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	2308      	movs	r3, #8
 8002594:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002596:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 ffd3 	bl	8003544 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025b4:	461a      	mov	r2, r3
 80025b6:	2310      	movs	r3, #16
 80025b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d030      	beq.n	8002626 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025cc:	2b80      	cmp	r3, #128	@ 0x80
 80025ce:	d109      	bne.n	80025e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80025e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	3304      	adds	r3, #4
 80025f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	78db      	ldrb	r3, [r3, #3]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2200      	movs	r2, #0
 8002606:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4619      	mov	r1, r3
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f00b f8d2 	bl	800d7b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002620:	461a      	mov	r2, r3
 8002622:	2302      	movs	r3, #2
 8002624:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0320 	and.w	r3, r3, #32
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800263c:	461a      	mov	r2, r3
 800263e:	2320      	movs	r3, #32
 8002640:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4413      	add	r3, r2
 8002654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002658:	461a      	mov	r2, r3
 800265a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800265e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002662:	3301      	adds	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002668:	085b      	lsrs	r3, r3, #1
 800266a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800266c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266e:	2b00      	cmp	r3, #0
 8002670:	f47f af62 	bne.w	8002538 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f007 f8c5 	bl	8009808 <USB_ReadInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002684:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002688:	f040 80db 	bne.w	8002842 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f007 f8e6 	bl	8009862 <USB_ReadDevAllInEpInterrupt>
 8002696:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800269c:	e0cd      	b.n	800283a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80c2 	beq.w	800282e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f007 f90c 	bl	80098d2 <USB_ReadDevInEPInterrupt>
 80026ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d057      	beq.n	8002776 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	2201      	movs	r2, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69f9      	ldr	r1, [r7, #28]
 80026e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80026e6:	4013      	ands	r3, r2
 80026e8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026f6:	461a      	mov	r2, r3
 80026f8:	2301      	movs	r3, #1
 80026fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	799b      	ldrb	r3, [r3, #6]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d132      	bne.n	800276a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3320      	adds	r3, #32
 8002714:	6819      	ldr	r1, [r3, #0]
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4403      	add	r3, r0
 8002724:	331c      	adds	r3, #28
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4419      	add	r1, r3
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4403      	add	r3, r0
 8002738:	3320      	adds	r3, #32
 800273a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d113      	bne.n	800276a <HAL_PCD_IRQHandler+0x3a2>
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3324      	adds	r3, #36	@ 0x24
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d108      	bne.n	800276a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002762:	461a      	mov	r2, r3
 8002764:	2101      	movs	r1, #1
 8002766:	f007 f915 	bl	8009994 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4619      	mov	r1, r3
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f00a ff9c 	bl	800d6ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800278c:	461a      	mov	r2, r3
 800278e:	2308      	movs	r3, #8
 8002790:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a8:	461a      	mov	r2, r3
 80027aa:	2310      	movs	r3, #16
 80027ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027c4:	461a      	mov	r2, r3
 80027c6:	2340      	movs	r3, #64	@ 0x40
 80027c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d023      	beq.n	800281c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80027d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80027d6:	6a38      	ldr	r0, [r7, #32]
 80027d8:	f006 f8f4 	bl	80089c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80027dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	3310      	adds	r3, #16
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	3304      	adds	r3, #4
 80027ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	78db      	ldrb	r3, [r3, #3]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d108      	bne.n	800280a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2200      	movs	r2, #0
 80027fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4619      	mov	r1, r3
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f00a ffe9 	bl	800d7dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4413      	add	r3, r2
 8002812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002816:	461a      	mov	r2, r3
 8002818:	2302      	movs	r3, #2
 800281a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002826:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fd17 	bl	800325c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	3301      	adds	r3, #1
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f af2e 	bne.w	800269e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f006 ffde 	bl	8009808 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002856:	d122      	bne.n	800289e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002872:	2b01      	cmp	r3, #1
 8002874:	d108      	bne.n	8002888 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800287e:	2100      	movs	r1, #0
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 ff21 	bl	80036c8 <HAL_PCDEx_LPM_Callback>
 8002886:	e002      	b.n	800288e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f00a ff87 	bl	800d79c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800289c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f006 ffb0 	bl	8009808 <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028b2:	d112      	bne.n	80028da <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d102      	bne.n	80028ca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f00a ff43 	bl	800d750 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80028d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f006 ff92 	bl	8009808 <USB_ReadInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ee:	d121      	bne.n	8002934 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80028fe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002906:	2b00      	cmp	r3, #0
 8002908:	d111      	bne.n	800292e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002918:	089b      	lsrs	r3, r3, #2
 800291a:	f003 020f 	and.w	r2, r3, #15
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002924:	2101      	movs	r1, #1
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fece 	bl	80036c8 <HAL_PCDEx_LPM_Callback>
 800292c:	e002      	b.n	8002934 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f00a ff0e 	bl	800d750 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f006 ff65 	bl	8009808 <USB_ReadInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002944:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002948:	f040 80b7 	bne.w	8002aba <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800295a:	f023 0301 	bic.w	r3, r3, #1
 800295e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2110      	movs	r1, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f006 f82c 	bl	80089c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002970:	e046      	b.n	8002a00 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800297e:	461a      	mov	r2, r3
 8002980:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002984:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002988:	015a      	lsls	r2, r3, #5
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	4413      	add	r3, r2
 800298e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002996:	0151      	lsls	r1, r2, #5
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	440a      	add	r2, r1
 800299c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80029a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029b2:	461a      	mov	r2, r3
 80029b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029b8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ca:	0151      	lsls	r1, r2, #5
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	440a      	add	r2, r1
 80029d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80029d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ea:	0151      	lsls	r1, r2, #5
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	440a      	add	r2, r1
 80029f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80029f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80029f8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fc:	3301      	adds	r3, #1
 80029fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	791b      	ldrb	r3, [r3, #4]
 8002a04:	461a      	mov	r2, r3
 8002a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d3b2      	bcc.n	8002972 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a1a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002a1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7bdb      	ldrb	r3, [r3, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a32:	69fa      	ldr	r2, [r7, #28]
 8002a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a38:	f043 030b 	orr.w	r3, r3, #11
 8002a3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a4e:	f043 030b 	orr.w	r3, r3, #11
 8002a52:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a54:	e015      	b.n	8002a82 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a64:	4619      	mov	r1, r3
 8002a66:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a7c:	f043 030b 	orr.w	r3, r3, #11
 8002a80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a90:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002a94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6818      	ldr	r0, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	f006 ff75 	bl	8009994 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f006 fea2 	bl	8009808 <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ace:	d123      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f006 ff39 	bl	800994c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f005 ffe9 	bl	8008ab6 <USB_GetDevSpeed>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681c      	ldr	r4, [r3, #0]
 8002af0:	f001 fdca 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 8002af4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002afa:	461a      	mov	r2, r3
 8002afc:	4620      	mov	r0, r4
 8002afe:	f005 fcf3 	bl	80084e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f00a fdfb 	bl	800d6fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f006 fe73 	bl	8009808 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d10a      	bne.n	8002b42 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f00a fdd8 	bl	800d6e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f002 0208 	and.w	r2, r2, #8
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f006 fe5e 	bl	8009808 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b52:	2b80      	cmp	r3, #128	@ 0x80
 8002b54:	d123      	bne.n	8002b9e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b62:	2301      	movs	r3, #1
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b66:	e014      	b.n	8002b92 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	4619      	mov	r1, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fb0a 	bl	80031a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b8e:	3301      	adds	r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	791b      	ldrb	r3, [r3, #4]
 8002b96:	461a      	mov	r2, r3
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d3e4      	bcc.n	8002b68 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f006 fe30 	bl	8009808 <USB_ReadInterrupts>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bb2:	d13c      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb8:	e02b      	b.n	8002c12 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bbc:	015a      	lsls	r2, r3, #5
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3318      	adds	r3, #24
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d115      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002be0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da12      	bge.n	8002c0c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3317      	adds	r3, #23
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 faca 	bl	80031a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	3301      	adds	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	791b      	ldrb	r3, [r3, #4]
 8002c16:	461a      	mov	r2, r3
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d3cd      	bcc.n	8002bba <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002c2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f006 fde8 	bl	8009808 <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c42:	d156      	bne.n	8002cf2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c44:	2301      	movs	r3, #1
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c48:	e045      	b.n	8002cd6 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d12e      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	da2b      	bge.n	8002cd0 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	0c1a      	lsrs	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002c82:	4053      	eors	r3, r2
 8002c84:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d121      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ccc:	6053      	str	r3, [r2, #4]
            break;
 8002cce:	e008      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d3b3      	bcc.n	8002c4a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f006 fd86 	bl	8009808 <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d06:	d10a      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f00a fd79 	bl	800d800 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fd70 	bl	8009808 <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d115      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f00a fd69 	bl	800d81c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e000      	b.n	8002d5e <HAL_PCD_IRQHandler+0x996>
      return;
 8002d5c:	bf00      	nop
    }
  }
}
 8002d5e:	3734      	adds	r7, #52	@ 0x34
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}

08002d64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_PCD_SetAddress+0x1a>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e012      	b.n	8002da4 <HAL_PCD_SetAddress+0x40>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f006 fccf 	bl	8009738 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	4608      	mov	r0, r1
 8002db6:	4611      	mov	r1, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	4603      	mov	r3, r0
 8002dbc:	70fb      	strb	r3, [r7, #3]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	803b      	strh	r3, [r7, #0]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da0f      	bge.n	8002df2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 020f 	and.w	r2, r3, #15
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	3310      	adds	r3, #16
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4413      	add	r3, r2
 8002de6:	3304      	adds	r3, #4
 8002de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	705a      	strb	r2, [r3, #1]
 8002df0:	e00f      	b.n	8002e12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 020f 	and.w	r2, r3, #15
 8002df8:	4613      	mov	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4413      	add	r3, r2
 8002e08:	3304      	adds	r3, #4
 8002e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e1e:	883b      	ldrh	r3, [r7, #0]
 8002e20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	78ba      	ldrb	r2, [r7, #2]
 8002e2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	785b      	ldrb	r3, [r3, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d004      	beq.n	8002e40 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e40:	78bb      	ldrb	r3, [r7, #2]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d101      	bne.n	8002e5a <HAL_PCD_EP_Open+0xae>
 8002e56:	2302      	movs	r3, #2
 8002e58:	e00e      	b.n	8002e78 <HAL_PCD_EP_Open+0xcc>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fe49 	bl	8008b00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002e76:	7afb      	ldrb	r3, [r7, #11]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	da0f      	bge.n	8002eb4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e94:	78fb      	ldrb	r3, [r7, #3]
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	705a      	strb	r2, [r3, #1]
 8002eb2:	e00f      	b.n	8002ed4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	f003 020f 	and.w	r2, r3, #15
 8002eba:	4613      	mov	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_PCD_EP_Close+0x6e>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e00e      	b.n	8002f0c <HAL_PCD_EP_Close+0x8c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f005 fe87 	bl	8008c10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	607a      	str	r2, [r7, #4]
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	460b      	mov	r3, r1
 8002f22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f24:	7afb      	ldrb	r3, [r7, #11]
 8002f26:	f003 020f 	and.w	r2, r3, #15
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f56:	7afb      	ldrb	r3, [r7, #11]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	799b      	ldrb	r3, [r3, #6]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	799b      	ldrb	r3, [r3, #6]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6979      	ldr	r1, [r7, #20]
 8002f7c:	f005 ff24 	bl	8008dc8 <USB_EPStartXfer>

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	460b      	mov	r3, r1
 8002f94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002fac:	681b      	ldr	r3, [r3, #0]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b086      	sub	sp, #24
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fca:	7afb      	ldrb	r3, [r7, #11]
 8002fcc:	f003 020f 	and.w	r2, r3, #15
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	3310      	adds	r3, #16
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3304      	adds	r3, #4
 8002fe0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	b2da      	uxtb	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	799b      	ldrb	r3, [r3, #6]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d102      	bne.n	8003014 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	799b      	ldrb	r3, [r3, #6]
 800301c:	461a      	mov	r2, r3
 800301e:	6979      	ldr	r1, [r7, #20]
 8003020:	f005 fed2 	bl	8008dc8 <USB_EPStartXfer>

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	7912      	ldrb	r2, [r2, #4]
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e04f      	b.n	80030ec <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800304c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003050:	2b00      	cmp	r3, #0
 8003052:	da0f      	bge.n	8003074 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 020f 	and.w	r2, r3, #15
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	3310      	adds	r3, #16
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4413      	add	r3, r2
 8003068:	3304      	adds	r3, #4
 800306a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	705a      	strb	r2, [r3, #1]
 8003072:	e00d      	b.n	8003090 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	3304      	adds	r3, #4
 8003088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2201      	movs	r2, #1
 8003094:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003096:	78fb      	ldrb	r3, [r7, #3]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_PCD_EP_SetStall+0x82>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e01d      	b.n	80030ec <HAL_PCD_EP_SetStall+0xbe>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68f9      	ldr	r1, [r7, #12]
 80030be:	4618      	mov	r0, r3
 80030c0:	f006 fa66 	bl	8009590 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030c4:	78fb      	ldrb	r3, [r7, #3]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	7999      	ldrb	r1, [r3, #6]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030dc:	461a      	mov	r2, r3
 80030de:	f006 fc59 	bl	8009994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	7912      	ldrb	r2, [r2, #4]
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e042      	b.n	8003198 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003112:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003116:	2b00      	cmp	r3, #0
 8003118:	da0f      	bge.n	800313a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	3310      	adds	r3, #16
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2201      	movs	r2, #1
 8003136:	705a      	strb	r2, [r3, #1]
 8003138:	e00f      	b.n	800315a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	f003 020f 	and.w	r2, r3, #15
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	3304      	adds	r3, #4
 8003152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_PCD_EP_ClrStall+0x86>
 8003176:	2302      	movs	r3, #2
 8003178:	e00e      	b.n	8003198 <HAL_PCD_EP_ClrStall+0xa4>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	4618      	mov	r0, r3
 800318a:	f006 fa6f 	bl	800966c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da0c      	bge.n	80031ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 020f 	and.w	r2, r3, #15
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	3310      	adds	r3, #16
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	e00c      	b.n	80031e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ce:	78fb      	ldrb	r3, [r7, #3]
 80031d0:	f003 020f 	and.w	r2, r3, #15
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4413      	add	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	4413      	add	r3, r2
 80031e4:	3304      	adds	r3, #4
 80031e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f006 f88e 	bl	8009310 <USB_EPStopXfer>
 80031f4:	4603      	mov	r3, r0
 80031f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80031f8:	7afb      	ldrb	r3, [r7, #11]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003214:	2b01      	cmp	r3, #1
 8003216:	d101      	bne.n	800321c <HAL_PCD_EP_Flush+0x1a>
 8003218:	2302      	movs	r3, #2
 800321a:	e01b      	b.n	8003254 <HAL_PCD_EP_Flush+0x52>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003224:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003228:	2b00      	cmp	r3, #0
 800322a:	da09      	bge.n	8003240 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	4619      	mov	r1, r3
 8003238:	4610      	mov	r0, r2
 800323a:	f005 fbc3 	bl	80089c4 <USB_FlushTxFifo>
 800323e:	e004      	b.n	800324a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f005 fbef 	bl	8008a28 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	@ 0x28
 8003260:	af02      	add	r7, sp, #8
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	3310      	adds	r3, #16
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	4413      	add	r3, r2
 8003280:	3304      	adds	r3, #4
 8003282:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	695a      	ldr	r2, [r3, #20]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d901      	bls.n	8003294 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e06b      	b.n	800336c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d902      	bls.n	80032b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	3303      	adds	r3, #3
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032b8:	e02a      	b.n	8003310 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3303      	adds	r3, #3
 80032da:	089b      	lsrs	r3, r3, #2
 80032dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68d9      	ldr	r1, [r3, #12]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f006 f8b6 	bl	8009464 <USB_WritePacket>

    ep->xfer_buff  += len;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	441a      	add	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	441a      	add	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	429a      	cmp	r2, r3
 8003324:	d809      	bhi.n	800333a <PCD_WriteEmptyTxFifo+0xde>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800332e:	429a      	cmp	r2, r3
 8003330:	d203      	bcs.n	800333a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1bf      	bne.n	80032ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691a      	ldr	r2, [r3, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	429a      	cmp	r2, r3
 8003344:	d811      	bhi.n	800336a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	2201      	movs	r2, #1
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800335a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	43db      	mvns	r3, r3
 8003360:	6939      	ldr	r1, [r7, #16]
 8003362:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003366:	4013      	ands	r3, r2
 8003368:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3720      	adds	r7, #32
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	333c      	adds	r3, #60	@ 0x3c
 800338c:	3304      	adds	r3, #4
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	799b      	ldrb	r3, [r3, #6]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d17b      	bne.n	80034a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	4a61      	ldr	r2, [pc, #388]	@ (800353c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	f240 80b9 	bls.w	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80b3 	beq.w	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d6:	461a      	mov	r2, r3
 80033d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033dc:	6093      	str	r3, [r2, #8]
 80033de:	e0a7      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d009      	beq.n	80033fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033f6:	461a      	mov	r2, r3
 80033f8:	2320      	movs	r3, #32
 80033fa:	6093      	str	r3, [r2, #8]
 80033fc:	e098      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	f040 8093 	bne.w	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	4a4b      	ldr	r2, [pc, #300]	@ (800353c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d90f      	bls.n	8003432 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00a      	beq.n	8003432 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003428:	461a      	mov	r2, r3
 800342a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800342e:	6093      	str	r3, [r2, #8]
 8003430:	e07e      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1a      	ldr	r2, [r3, #32]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	0159      	lsls	r1, r3, #5
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	440b      	add	r3, r1
 8003454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	1ad2      	subs	r2, r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d114      	bne.n	8003494 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6818      	ldr	r0, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800347c:	461a      	mov	r2, r3
 800347e:	2101      	movs	r1, #1
 8003480:	f006 fa88 	bl	8009994 <USB_EP0_OutStart>
 8003484:	e006      	b.n	8003494 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	441a      	add	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f00a f8ec 	bl	800d678 <HAL_PCD_DataOutStageCallback>
 80034a0:	e046      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	4a26      	ldr	r2, [pc, #152]	@ (8003540 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d124      	bne.n	80034f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c0:	461a      	mov	r2, r3
 80034c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034c6:	6093      	str	r3, [r2, #8]
 80034c8:	e032      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034e0:	461a      	mov	r2, r3
 80034e2:	2320      	movs	r3, #32
 80034e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f00a f8c3 	bl	800d678 <HAL_PCD_DataOutStageCallback>
 80034f2:	e01d      	b.n	8003530 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d114      	bne.n	8003524 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800351c:	461a      	mov	r2, r3
 800351e:	2100      	movs	r1, #0
 8003520:	f006 fa38 	bl	8009994 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f00a f8a4 	bl	800d678 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	4f54300a 	.word	0x4f54300a
 8003540:	4f54310a 	.word	0x4f54310a

08003544 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	333c      	adds	r3, #60	@ 0x3c
 800355c:	3304      	adds	r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	015a      	lsls	r2, r3, #5
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4413      	add	r3, r2
 800356a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a15      	ldr	r2, [pc, #84]	@ (80035cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d90e      	bls.n	8003598 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003590:	461a      	mov	r2, r3
 8003592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003596:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f00a f85b 	bl	800d654 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a0a      	ldr	r2, [pc, #40]	@ (80035cc <PCD_EP_OutSetupPacket_int+0x88>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d90c      	bls.n	80035c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	799b      	ldrb	r3, [r3, #6]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d108      	bne.n	80035c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035b8:	461a      	mov	r2, r3
 80035ba:	2101      	movs	r1, #1
 80035bc:	f006 f9ea 	bl	8009994 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	4f54300a 	.word	0x4f54300a

080035d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035ee:	883b      	ldrh	r3, [r7, #0]
 80035f0:	0419      	lsls	r1, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	430a      	orrs	r2, r1
 80035fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80035fc:	e028      	b.n	8003650 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
 8003610:	e00d      	b.n	800362e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	7bfb      	ldrb	r3, [r7, #15]
 8003618:	3340      	adds	r3, #64	@ 0x40
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	4413      	add	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	3301      	adds	r3, #1
 800362c:	73fb      	strb	r3, [r7, #15]
 800362e:	7bfa      	ldrb	r2, [r7, #15]
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	3b01      	subs	r3, #1
 8003634:	429a      	cmp	r2, r3
 8003636:	d3ec      	bcc.n	8003612 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003638:	883b      	ldrh	r3, [r7, #0]
 800363a:	0418      	lsls	r0, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	3b01      	subs	r3, #1
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	4302      	orrs	r2, r0
 8003648:	3340      	adds	r3, #64	@ 0x40
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036ae:	4b05      	ldr	r3, [pc, #20]	@ (80036c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	10000003 	.word	0x10000003

080036c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80036e8:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <HAL_PWREx_ConfigSupply+0x70>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d00a      	beq.n	800370a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80036f4:	4b16      	ldr	r3, [pc, #88]	@ (8003750 <HAL_PWREx_ConfigSupply+0x70>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e01f      	b.n	8003746 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	e01d      	b.n	8003746 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800370a:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <HAL_PWREx_ConfigSupply+0x70>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	490f      	ldr	r1, [pc, #60]	@ (8003750 <HAL_PWREx_ConfigSupply+0x70>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4313      	orrs	r3, r2
 8003718:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800371a:	f7fd fab7 	bl	8000c8c <HAL_GetTick>
 800371e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003720:	e009      	b.n	8003736 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003722:	f7fd fab3 	bl	8000c8c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003730:	d901      	bls.n	8003736 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e007      	b.n	8003746 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003736:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <HAL_PWREx_ConfigSupply+0x70>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800373e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003742:	d1ee      	bne.n	8003722 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	58024800 	.word	0x58024800

08003754 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800375e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	58024800 	.word	0x58024800

08003774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b08c      	sub	sp, #48	@ 0x30
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	f000 bc48 	b.w	8004018 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8088 	beq.w	80038a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003796:	4b99      	ldr	r3, [pc, #612]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80037a0:	4b96      	ldr	r3, [pc, #600]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80037a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d007      	beq.n	80037bc <HAL_RCC_OscConfig+0x48>
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	2b18      	cmp	r3, #24
 80037b0:	d111      	bne.n	80037d6 <HAL_RCC_OscConfig+0x62>
 80037b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d10c      	bne.n	80037d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	4b8f      	ldr	r3, [pc, #572]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d06d      	beq.n	80038a4 <HAL_RCC_OscConfig+0x130>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d169      	bne.n	80038a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f000 bc21 	b.w	8004018 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037de:	d106      	bne.n	80037ee <HAL_RCC_OscConfig+0x7a>
 80037e0:	4b86      	ldr	r3, [pc, #536]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a85      	ldr	r2, [pc, #532]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80037e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e02e      	b.n	800384c <HAL_RCC_OscConfig+0xd8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_RCC_OscConfig+0x9c>
 80037f6:	4b81      	ldr	r3, [pc, #516]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a80      	ldr	r2, [pc, #512]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80037fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	4b7e      	ldr	r3, [pc, #504]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a7d      	ldr	r2, [pc, #500]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003808:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	e01d      	b.n	800384c <HAL_RCC_OscConfig+0xd8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003818:	d10c      	bne.n	8003834 <HAL_RCC_OscConfig+0xc0>
 800381a:	4b78      	ldr	r3, [pc, #480]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a77      	ldr	r2, [pc, #476]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4b75      	ldr	r3, [pc, #468]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a74      	ldr	r2, [pc, #464]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e00b      	b.n	800384c <HAL_RCC_OscConfig+0xd8>
 8003834:	4b71      	ldr	r3, [pc, #452]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a70      	ldr	r2, [pc, #448]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 800383a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	4b6e      	ldr	r3, [pc, #440]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a6d      	ldr	r2, [pc, #436]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800384a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fd fa1a 	bl	8000c8c <HAL_GetTick>
 8003858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800385c:	f7fd fa16 	bl	8000c8c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b64      	cmp	r3, #100	@ 0x64
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e3d4      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800386e:	4b63      	ldr	r3, [pc, #396]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0xe8>
 800387a:	e014      	b.n	80038a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fa06 	bl	8000c8c <HAL_GetTick>
 8003880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003884:	f7fd fa02 	bl	8000c8c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b64      	cmp	r3, #100	@ 0x64
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e3c0      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003896:	4b59      	ldr	r3, [pc, #356]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x110>
 80038a2:	e000      	b.n	80038a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80ca 	beq.w	8003a48 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b4:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038be:	4b4f      	ldr	r3, [pc, #316]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_RCC_OscConfig+0x166>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2b18      	cmp	r3, #24
 80038ce:	d156      	bne.n	800397e <HAL_RCC_OscConfig+0x20a>
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d151      	bne.n	800397e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038da:	4b48      	ldr	r3, [pc, #288]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d005      	beq.n	80038f2 <HAL_RCC_OscConfig+0x17e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e392      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038f2:	4b42      	ldr	r3, [pc, #264]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f023 0219 	bic.w	r2, r3, #25
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	493f      	ldr	r1, [pc, #252]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003900:	4313      	orrs	r3, r2
 8003902:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd f9c2 	bl	8000c8c <HAL_GetTick>
 8003908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800390c:	f7fd f9be 	bl	8000c8c <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e37c      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800391e:	4b37      	ldr	r3, [pc, #220]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d0f0      	beq.n	800390c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	f7fe f8af 	bl	8001a8c <HAL_GetREVID>
 800392e:	4603      	mov	r3, r0
 8003930:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003934:	4293      	cmp	r3, r2
 8003936:	d817      	bhi.n	8003968 <HAL_RCC_OscConfig+0x1f4>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b40      	cmp	r3, #64	@ 0x40
 800393e:	d108      	bne.n	8003952 <HAL_RCC_OscConfig+0x1de>
 8003940:	4b2e      	ldr	r3, [pc, #184]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003948:	4a2c      	ldr	r2, [pc, #176]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 800394a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003950:	e07a      	b.n	8003a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003952:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	031b      	lsls	r3, r3, #12
 8003960:	4926      	ldr	r1, [pc, #152]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003966:	e06f      	b.n	8003a48 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003968:	4b24      	ldr	r3, [pc, #144]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	061b      	lsls	r3, r3, #24
 8003976:	4921      	ldr	r1, [pc, #132]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800397c:	e064      	b.n	8003a48 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d047      	beq.n	8003a16 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003986:	4b1d      	ldr	r3, [pc, #116]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0219 	bic.w	r2, r3, #25
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	491a      	ldr	r1, [pc, #104]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd f978 	bl	8000c8c <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a0:	f7fd f974 	bl	8000c8c <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e332      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b2:	4b12      	ldr	r3, [pc, #72]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039be:	f7fe f865 	bl	8001a8c <HAL_GetREVID>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d819      	bhi.n	8003a00 <HAL_RCC_OscConfig+0x28c>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b40      	cmp	r3, #64	@ 0x40
 80039d2:	d108      	bne.n	80039e6 <HAL_RCC_OscConfig+0x272>
 80039d4:	4b09      	ldr	r3, [pc, #36]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039dc:	4a07      	ldr	r2, [pc, #28]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e2:	6053      	str	r3, [r2, #4]
 80039e4:	e030      	b.n	8003a48 <HAL_RCC_OscConfig+0x2d4>
 80039e6:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	031b      	lsls	r3, r3, #12
 80039f4:	4901      	ldr	r1, [pc, #4]	@ (80039fc <HAL_RCC_OscConfig+0x288>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
 80039fa:	e025      	b.n	8003a48 <HAL_RCC_OscConfig+0x2d4>
 80039fc:	58024400 	.word	0x58024400
 8003a00:	4b9a      	ldr	r3, [pc, #616]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	061b      	lsls	r3, r3, #24
 8003a0e:	4997      	ldr	r1, [pc, #604]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
 8003a14:	e018      	b.n	8003a48 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b95      	ldr	r3, [pc, #596]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a94      	ldr	r2, [pc, #592]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a1c:	f023 0301 	bic.w	r3, r3, #1
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd f933 	bl	8000c8c <HAL_GetTick>
 8003a26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd f92f 	bl	8000c8c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e2ed      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a3c:	4b8b      	ldr	r3, [pc, #556]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a9 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a56:	4b85      	ldr	r3, [pc, #532]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a60:	4b82      	ldr	r3, [pc, #520]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d007      	beq.n	8003a7c <HAL_RCC_OscConfig+0x308>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b18      	cmp	r3, #24
 8003a70:	d13a      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x374>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d135      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a7c:	4b7b      	ldr	r3, [pc, #492]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x320>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b80      	cmp	r3, #128	@ 0x80
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e2c1      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a94:	f7fd fffa 	bl	8001a8c <HAL_GetREVID>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d817      	bhi.n	8003ad2 <HAL_RCC_OscConfig+0x35e>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d108      	bne.n	8003abc <HAL_RCC_OscConfig+0x348>
 8003aaa:	4b70      	ldr	r3, [pc, #448]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003ab2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ab8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003aba:	e075      	b.n	8003ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003abc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	069b      	lsls	r3, r3, #26
 8003aca:	4968      	ldr	r1, [pc, #416]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ad0:	e06a      	b.n	8003ba8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ad2:	4b66      	ldr	r3, [pc, #408]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	061b      	lsls	r3, r3, #24
 8003ae0:	4962      	ldr	r1, [pc, #392]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ae6:	e05f      	b.n	8003ba8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d042      	beq.n	8003b76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003af0:	4b5e      	ldr	r3, [pc, #376]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a5d      	ldr	r2, [pc, #372]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd f8c6 	bl	8000c8c <HAL_GetTick>
 8003b00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b04:	f7fd f8c2 	bl	8000c8c <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e280      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003b16:	4b55      	ldr	r3, [pc, #340]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b22:	f7fd ffb3 	bl	8001a8c <HAL_GetREVID>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d817      	bhi.n	8003b60 <HAL_RCC_OscConfig+0x3ec>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d108      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3d6>
 8003b38:	4b4c      	ldr	r3, [pc, #304]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b40:	4a4a      	ldr	r2, [pc, #296]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b46:	6053      	str	r3, [r2, #4]
 8003b48:	e02e      	b.n	8003ba8 <HAL_RCC_OscConfig+0x434>
 8003b4a:	4b48      	ldr	r3, [pc, #288]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	069b      	lsls	r3, r3, #26
 8003b58:	4944      	ldr	r1, [pc, #272]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
 8003b5e:	e023      	b.n	8003ba8 <HAL_RCC_OscConfig+0x434>
 8003b60:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	493f      	ldr	r1, [pc, #252]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	60cb      	str	r3, [r1, #12]
 8003b74:	e018      	b.n	8003ba8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003b76:	4b3d      	ldr	r3, [pc, #244]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd f883 	bl	8000c8c <HAL_GetTick>
 8003b86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003b8a:	f7fd f87f 	bl	8000c8c <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e23d      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003b9c:	4b33      	ldr	r3, [pc, #204]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1f0      	bne.n	8003b8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d036      	beq.n	8003c22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d019      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7fd f860 	bl	8000c8c <HAL_GetTick>
 8003bcc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd0:	f7fd f85c 	bl	8000c8c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e21a      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003be2:	4b22      	ldr	r3, [pc, #136]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x45c>
 8003bee:	e018      	b.n	8003c22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd f846 	bl	8000c8c <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c04:	f7fd f842 	bl	8000c8c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e200      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c16:	4b15      	ldr	r3, [pc, #84]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d039      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003c3c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c42:	f7fd f823 	bl	8000c8c <HAL_GetTick>
 8003c46:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c4a:	f7fd f81f 	bl	8000c8c <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e1dd      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003c5c:	4b03      	ldr	r3, [pc, #12]	@ (8003c6c <HAL_RCC_OscConfig+0x4f8>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x4d6>
 8003c68:	e01b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x52e>
 8003c6a:	bf00      	nop
 8003c6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c70:	4b9b      	ldr	r3, [pc, #620]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a9a      	ldr	r2, [pc, #616]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003c7c:	f7fd f806 	bl	8000c8c <HAL_GetTick>
 8003c80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c84:	f7fd f802 	bl	8000c8c <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e1c0      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c96:	4b92      	ldr	r3, [pc, #584]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8081 	beq.w	8003db2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003cb0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ee4 <HAL_RCC_OscConfig+0x770>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a8b      	ldr	r2, [pc, #556]	@ (8003ee4 <HAL_RCC_OscConfig+0x770>)
 8003cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cbc:	f7fc ffe6 	bl	8000c8c <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fc ffe2 	bl	8000c8c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b64      	cmp	r3, #100	@ 0x64
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e1a0      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cd6:	4b83      	ldr	r3, [pc, #524]	@ (8003ee4 <HAL_RCC_OscConfig+0x770>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x584>
 8003cea:	4b7d      	ldr	r3, [pc, #500]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	4a7c      	ldr	r2, [pc, #496]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cf6:	e02d      	b.n	8003d54 <HAL_RCC_OscConfig+0x5e0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10c      	bne.n	8003d1a <HAL_RCC_OscConfig+0x5a6>
 8003d00:	4b77      	ldr	r3, [pc, #476]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d04:	4a76      	ldr	r2, [pc, #472]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d0c:	4b74      	ldr	r3, [pc, #464]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d10:	4a73      	ldr	r2, [pc, #460]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d12:	f023 0304 	bic.w	r3, r3, #4
 8003d16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d18:	e01c      	b.n	8003d54 <HAL_RCC_OscConfig+0x5e0>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x5c8>
 8003d22:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d28:	f043 0304 	orr.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0x5e0>
 8003d3c:	4b68      	ldr	r3, [pc, #416]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d40:	4a67      	ldr	r2, [pc, #412]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d42:	f023 0301 	bic.w	r3, r3, #1
 8003d46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d48:	4b65      	ldr	r3, [pc, #404]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4c:	4a64      	ldr	r2, [pc, #400]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d4e:	f023 0304 	bic.w	r3, r3, #4
 8003d52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5c:	f7fc ff96 	bl	8000c8c <HAL_GetTick>
 8003d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d64:	f7fc ff92 	bl	8000c8c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e14e      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d7a:	4b59      	ldr	r3, [pc, #356]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0ee      	beq.n	8003d64 <HAL_RCC_OscConfig+0x5f0>
 8003d86:	e014      	b.n	8003db2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fc ff80 	bl	8000c8c <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d90:	f7fc ff7c 	bl	8000c8c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e138      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003da6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ee      	bne.n	8003d90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 812d 	beq.w	8004016 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003dbc:	4b48      	ldr	r3, [pc, #288]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dc4:	2b18      	cmp	r3, #24
 8003dc6:	f000 80bd 	beq.w	8003f44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	f040 809e 	bne.w	8003f10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd4:	4b42      	ldr	r3, [pc, #264]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a41      	ldr	r2, [pc, #260]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de0:	f7fc ff54 	bl	8000c8c <HAL_GetTick>
 8003de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de8:	f7fc ff50 	bl	8000c8c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e10e      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003dfa:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e06:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e0a:	4b37      	ldr	r3, [pc, #220]	@ (8003ee8 <HAL_RCC_OscConfig+0x774>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	4931      	ldr	r1, [pc, #196]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e24:	3b01      	subs	r3, #1
 8003e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	025b      	lsls	r3, r3, #9
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	431a      	orrs	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	041b      	lsls	r3, r3, #16
 8003e3e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	061b      	lsls	r3, r3, #24
 8003e4c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e50:	4923      	ldr	r1, [pc, #140]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003e56:	4b22      	ldr	r3, [pc, #136]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003e62:	4b1f      	ldr	r3, [pc, #124]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e66:	4b21      	ldr	r3, [pc, #132]	@ (8003eec <HAL_RCC_OscConfig+0x778>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003e6e:	00d2      	lsls	r2, r2, #3
 8003e70:	491b      	ldr	r1, [pc, #108]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	f023 020c 	bic.w	r2, r3, #12
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	4917      	ldr	r1, [pc, #92]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003e88:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	f023 0202 	bic.w	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e94:	4912      	ldr	r1, [pc, #72]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003e9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	4a10      	ldr	r2, [pc, #64]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ebc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003ebe:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec2:	4a07      	ldr	r2, [pc, #28]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eca:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a04      	ldr	r2, [pc, #16]	@ (8003ee0 <HAL_RCC_OscConfig+0x76c>)
 8003ed0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fc fed9 	bl	8000c8c <HAL_GetTick>
 8003eda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003edc:	e011      	b.n	8003f02 <HAL_RCC_OscConfig+0x78e>
 8003ede:	bf00      	nop
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	58024800 	.word	0x58024800
 8003ee8:	fffffc0c 	.word	0xfffffc0c
 8003eec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef0:	f7fc fecc 	bl	8000c8c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e08a      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f02:	4b47      	ldr	r3, [pc, #284]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x77c>
 8003f0e:	e082      	b.n	8004016 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f10:	4b43      	ldr	r3, [pc, #268]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a42      	ldr	r2, [pc, #264]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003f16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1c:	f7fc feb6 	bl	8000c8c <HAL_GetTick>
 8003f20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f22:	e008      	b.n	8003f36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f24:	f7fc feb2 	bl	8000c8c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e070      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f36:	4b3a      	ldr	r3, [pc, #232]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f0      	bne.n	8003f24 <HAL_RCC_OscConfig+0x7b0>
 8003f42:	e068      	b.n	8004016 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003f44:	4b36      	ldr	r3, [pc, #216]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f4a:	4b35      	ldr	r3, [pc, #212]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d031      	beq.n	8003fbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d12a      	bne.n	8003fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d122      	bne.n	8003fbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d11a      	bne.n	8003fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	0a5b      	lsrs	r3, r3, #9
 8003f8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d111      	bne.n	8003fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d108      	bne.n	8003fbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	0e1b      	lsrs	r3, r3, #24
 8003fae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e02b      	b.n	8004018 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003fc0:	4b17      	ldr	r3, [pc, #92]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	08db      	lsrs	r3, r3, #3
 8003fc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d01f      	beq.n	8004016 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fda:	4a11      	ldr	r2, [pc, #68]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fe2:	f7fc fe53 	bl	8000c8c <HAL_GetTick>
 8003fe6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003fe8:	bf00      	nop
 8003fea:	f7fc fe4f 	bl	8000c8c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d0f9      	beq.n	8003fea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8004024 <HAL_RCC_OscConfig+0x8b0>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004002:	00d2      	lsls	r2, r2, #3
 8004004:	4906      	ldr	r1, [pc, #24]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8004006:	4313      	orrs	r3, r2
 8004008:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800400a:	4b05      	ldr	r3, [pc, #20]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	4a04      	ldr	r2, [pc, #16]	@ (8004020 <HAL_RCC_OscConfig+0x8ac>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3730      	adds	r7, #48	@ 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	58024400 	.word	0x58024400
 8004024:	ffff0007 	.word	0xffff0007

08004028 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e19c      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b8a      	ldr	r3, [pc, #552]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d910      	bls.n	800406c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b87      	ldr	r3, [pc, #540]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 020f 	bic.w	r2, r3, #15
 8004052:	4985      	ldr	r1, [pc, #532]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b83      	ldr	r3, [pc, #524]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e184      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d010      	beq.n	800409a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	4b7b      	ldr	r3, [pc, #492]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004084:	429a      	cmp	r2, r3
 8004086:	d908      	bls.n	800409a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004088:	4b78      	ldr	r3, [pc, #480]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	4975      	ldr	r1, [pc, #468]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004096:	4313      	orrs	r3, r2
 8004098:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d010      	beq.n	80040c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	4b70      	ldr	r3, [pc, #448]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d908      	bls.n	80040c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80040b6:	4b6d      	ldr	r3, [pc, #436]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	496a      	ldr	r1, [pc, #424]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d010      	beq.n	80040f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	4b64      	ldr	r3, [pc, #400]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d908      	bls.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040e4:	4b61      	ldr	r3, [pc, #388]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	495e      	ldr	r1, [pc, #376]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d010      	beq.n	8004124 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69da      	ldr	r2, [r3, #28]
 8004106:	4b59      	ldr	r3, [pc, #356]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800410e:	429a      	cmp	r2, r3
 8004110:	d908      	bls.n	8004124 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004112:	4b56      	ldr	r3, [pc, #344]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	4953      	ldr	r1, [pc, #332]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004120:	4313      	orrs	r3, r2
 8004122:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	4b4d      	ldr	r3, [pc, #308]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b4a      	ldr	r3, [pc, #296]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	f023 020f 	bic.w	r2, r3, #15
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4947      	ldr	r1, [pc, #284]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 800414e:	4313      	orrs	r3, r2
 8004150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d055      	beq.n	800420a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800415e:	4b43      	ldr	r3, [pc, #268]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4940      	ldr	r1, [pc, #256]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 800416c:	4313      	orrs	r3, r2
 800416e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d107      	bne.n	8004188 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004178:	4b3c      	ldr	r3, [pc, #240]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d121      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0f6      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004190:	4b36      	ldr	r3, [pc, #216]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0ea      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80041a8:	4b30      	ldr	r3, [pc, #192]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0de      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041b8:	4b2c      	ldr	r3, [pc, #176]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0d6      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041c8:	4b28      	ldr	r3, [pc, #160]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	f023 0207 	bic.w	r2, r3, #7
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	4925      	ldr	r1, [pc, #148]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041da:	f7fc fd57 	bl	8000c8c <HAL_GetTick>
 80041de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e0:	e00a      	b.n	80041f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e2:	f7fc fd53 	bl	8000c8c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e0be      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f8:	4b1c      	ldr	r3, [pc, #112]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	429a      	cmp	r2, r3
 8004208:	d1eb      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d010      	beq.n	8004238 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	4b14      	ldr	r3, [pc, #80]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	429a      	cmp	r2, r3
 8004224:	d208      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f023 020f 	bic.w	r2, r3, #15
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	490e      	ldr	r1, [pc, #56]	@ (800426c <HAL_RCC_ClockConfig+0x244>)
 8004234:	4313      	orrs	r3, r2
 8004236:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004238:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d214      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004246:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 020f 	bic.w	r2, r3, #15
 800424e:	4906      	ldr	r1, [pc, #24]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b04      	ldr	r3, [pc, #16]	@ (8004268 <HAL_RCC_ClockConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e086      	b.n	8004376 <HAL_RCC_ClockConfig+0x34e>
 8004268:	52002000 	.word	0x52002000
 800426c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	4b3f      	ldr	r3, [pc, #252]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004288:	429a      	cmp	r2, r3
 800428a:	d208      	bcs.n	800429e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800428c:	4b3c      	ldr	r3, [pc, #240]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	4939      	ldr	r1, [pc, #228]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 800429a:	4313      	orrs	r3, r2
 800429c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d010      	beq.n	80042cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695a      	ldr	r2, [r3, #20]
 80042ae:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d208      	bcs.n	80042cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80042ba:	4b31      	ldr	r3, [pc, #196]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	492e      	ldr	r1, [pc, #184]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	4b28      	ldr	r3, [pc, #160]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d208      	bcs.n	80042fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80042e8:	4b25      	ldr	r3, [pc, #148]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	4922      	ldr	r1, [pc, #136]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69da      	ldr	r2, [r3, #28]
 800430a:	4b1d      	ldr	r3, [pc, #116]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004312:	429a      	cmp	r2, r3
 8004314:	d208      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004316:	4b1a      	ldr	r3, [pc, #104]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	4917      	ldr	r1, [pc, #92]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 8004324:	4313      	orrs	r3, r2
 8004326:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004328:	f000 f834 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	4912      	ldr	r1, [pc, #72]	@ (8004384 <HAL_RCC_ClockConfig+0x35c>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
 8004344:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004346:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <HAL_RCC_ClockConfig+0x358>)
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	4a0d      	ldr	r2, [pc, #52]	@ (8004384 <HAL_RCC_ClockConfig+0x35c>)
 8004350:	5cd3      	ldrb	r3, [r2, r3]
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	4a0a      	ldr	r2, [pc, #40]	@ (8004388 <HAL_RCC_ClockConfig+0x360>)
 800435e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004360:	4a0a      	ldr	r2, [pc, #40]	@ (800438c <HAL_RCC_ClockConfig+0x364>)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004366:	4b0a      	ldr	r3, [pc, #40]	@ (8004390 <HAL_RCC_ClockConfig+0x368>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fb20 	bl	80019b0 <HAL_InitTick>
 8004370:	4603      	mov	r3, r0
 8004372:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
 8004384:	0800e650 	.word	0x0800e650
 8004388:	24000008 	.word	0x24000008
 800438c:	24000004 	.word	0x24000004
 8004390:	2400000c 	.word	0x2400000c

08004394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	@ 0x24
 8004398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800439a:	4bb3      	ldr	r3, [pc, #716]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043a2:	2b18      	cmp	r3, #24
 80043a4:	f200 8155 	bhi.w	8004652 <HAL_RCC_GetSysClockFreq+0x2be>
 80043a8:	a201      	add	r2, pc, #4	@ (adr r2, 80043b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80043aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ae:	bf00      	nop
 80043b0:	08004415 	.word	0x08004415
 80043b4:	08004653 	.word	0x08004653
 80043b8:	08004653 	.word	0x08004653
 80043bc:	08004653 	.word	0x08004653
 80043c0:	08004653 	.word	0x08004653
 80043c4:	08004653 	.word	0x08004653
 80043c8:	08004653 	.word	0x08004653
 80043cc:	08004653 	.word	0x08004653
 80043d0:	0800443b 	.word	0x0800443b
 80043d4:	08004653 	.word	0x08004653
 80043d8:	08004653 	.word	0x08004653
 80043dc:	08004653 	.word	0x08004653
 80043e0:	08004653 	.word	0x08004653
 80043e4:	08004653 	.word	0x08004653
 80043e8:	08004653 	.word	0x08004653
 80043ec:	08004653 	.word	0x08004653
 80043f0:	08004441 	.word	0x08004441
 80043f4:	08004653 	.word	0x08004653
 80043f8:	08004653 	.word	0x08004653
 80043fc:	08004653 	.word	0x08004653
 8004400:	08004653 	.word	0x08004653
 8004404:	08004653 	.word	0x08004653
 8004408:	08004653 	.word	0x08004653
 800440c:	08004653 	.word	0x08004653
 8004410:	08004447 	.word	0x08004447
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004414:	4b94      	ldr	r3, [pc, #592]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004420:	4b91      	ldr	r3, [pc, #580]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	08db      	lsrs	r3, r3, #3
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	4a90      	ldr	r2, [pc, #576]	@ (800466c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004432:	e111      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004434:	4b8d      	ldr	r3, [pc, #564]	@ (800466c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004436:	61bb      	str	r3, [r7, #24]
      break;
 8004438:	e10e      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800443a:	4b8d      	ldr	r3, [pc, #564]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800443c:	61bb      	str	r3, [r7, #24]
      break;
 800443e:	e10b      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004440:	4b8c      	ldr	r3, [pc, #560]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004442:	61bb      	str	r3, [r7, #24]
      break;
 8004444:	e108      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004446:	4b88      	ldr	r3, [pc, #544]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	f003 0303 	and.w	r3, r3, #3
 800444e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004450:	4b85      	ldr	r3, [pc, #532]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004454:	091b      	lsrs	r3, r3, #4
 8004456:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800445a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800445c:	4b82      	ldr	r3, [pc, #520]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004466:	4b80      	ldr	r3, [pc, #512]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80e1 	beq.w	800464c <HAL_RCC_GetSysClockFreq+0x2b8>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2b02      	cmp	r3, #2
 800448e:	f000 8083 	beq.w	8004598 <HAL_RCC_GetSysClockFreq+0x204>
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b02      	cmp	r3, #2
 8004496:	f200 80a1 	bhi.w	80045dc <HAL_RCC_GetSysClockFreq+0x248>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_RCC_GetSysClockFreq+0x114>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d056      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x1c0>
 80044a6:	e099      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044a8:	4b6f      	ldr	r3, [pc, #444]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0320 	and.w	r3, r3, #32
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d02d      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044b4:	4b6c      	ldr	r3, [pc, #432]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	08db      	lsrs	r3, r3, #3
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	4a6b      	ldr	r2, [pc, #428]	@ (800466c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
 80044c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044de:	4b62      	ldr	r3, [pc, #392]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e6:	ee07 3a90 	vmov	s15, r3
 80044ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80044f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80044f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800450e:	e087      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800467c <HAL_RCC_GetSysClockFreq+0x2e8>
 800451e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004522:	4b51      	ldr	r3, [pc, #324]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004532:	ed97 6a02 	vldr	s12, [r7, #8]
 8004536:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800453a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004552:	e065      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004680 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004566:	4b40      	ldr	r3, [pc, #256]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004576:	ed97 6a02 	vldr	s12, [r7, #8]
 800457a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800457e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800458a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800458e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004596:	e043      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	ee07 3a90 	vmov	s15, r3
 800459e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004684 <HAL_RCC_GetSysClockFreq+0x2f0>
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80045be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045da:	e021      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004680 <HAL_RCC_GetSysClockFreq+0x2ec>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004602:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004678 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800461e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004620:	4b11      	ldr	r3, [pc, #68]	@ (8004668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	0a5b      	lsrs	r3, r3, #9
 8004626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800462a:	3301      	adds	r3, #1
 800462c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	ee07 3a90 	vmov	s15, r3
 8004634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004638:	edd7 6a07 	vldr	s13, [r7, #28]
 800463c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004644:	ee17 3a90 	vmov	r3, s15
 8004648:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800464a:	e005      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800464c:	2300      	movs	r3, #0
 800464e:	61bb      	str	r3, [r7, #24]
      break;
 8004650:	e002      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004652:	4b07      	ldr	r3, [pc, #28]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004654:	61bb      	str	r3, [r7, #24]
      break;
 8004656:	bf00      	nop
  }

  return sysclockfreq;
 8004658:	69bb      	ldr	r3, [r7, #24]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3724      	adds	r7, #36	@ 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
 800466c:	03d09000 	.word	0x03d09000
 8004670:	003d0900 	.word	0x003d0900
 8004674:	007a1200 	.word	0x007a1200
 8004678:	46000000 	.word	0x46000000
 800467c:	4c742400 	.word	0x4c742400
 8004680:	4a742400 	.word	0x4a742400
 8004684:	4af42400 	.word	0x4af42400

08004688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800468e:	f7ff fe81 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8004692:	4602      	mov	r2, r0
 8004694:	4b10      	ldr	r3, [pc, #64]	@ (80046d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	490f      	ldr	r1, [pc, #60]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x54>)
 80046a0:	5ccb      	ldrb	r3, [r1, r3]
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	4a09      	ldr	r2, [pc, #36]	@ (80046dc <HAL_RCC_GetHCLKFreq+0x54>)
 80046b6:	5cd3      	ldrb	r3, [r2, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a07      	ldr	r2, [pc, #28]	@ (80046e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80046c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80046c6:	4a07      	ldr	r2, [pc, #28]	@ (80046e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80046cc:	4b04      	ldr	r3, [pc, #16]	@ (80046e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	58024400 	.word	0x58024400
 80046dc:	0800e650 	.word	0x0800e650
 80046e0:	24000008 	.word	0x24000008
 80046e4:	24000004 	.word	0x24000004

080046e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80046ec:	f7ff ffcc 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x24>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4904      	ldr	r1, [pc, #16]	@ (8004710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	58024400 	.word	0x58024400
 8004710:	0800e650 	.word	0x0800e650

08004714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004718:	f7ff ffb6 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4904      	ldr	r1, [pc, #16]	@ (800473c <HAL_RCC_GetPCLK2Freq+0x28>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004734:	4618      	mov	r0, r3
 8004736:	bd80      	pop	{r7, pc}
 8004738:	58024400 	.word	0x58024400
 800473c:	0800e650 	.word	0x0800e650

08004740 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004744:	b0ca      	sub	sp, #296	@ 0x128
 8004746:	af00      	add	r7, sp, #0
 8004748:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800474c:	2300      	movs	r3, #0
 800474e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004752:	2300      	movs	r3, #0
 8004754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004764:	2500      	movs	r5, #0
 8004766:	ea54 0305 	orrs.w	r3, r4, r5
 800476a:	d049      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004772:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004776:	d02f      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004778:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800477c:	d828      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800477e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004782:	d01a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004788:	d822      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800478e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004792:	d007      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004794:	e01c      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004796:	4bb8      	ldr	r3, [pc, #736]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479a:	4ab7      	ldr	r2, [pc, #732]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800479c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047a2:	e01a      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	3308      	adds	r3, #8
 80047aa:	2102      	movs	r1, #2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fc8f 	bl	80060d0 <RCCEx_PLL2_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047b8:	e00f      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	3328      	adds	r3, #40	@ 0x28
 80047c0:	2102      	movs	r1, #2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 fd36 	bl	8006234 <RCCEx_PLL3_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80047ce:	e004      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047d6:	e000      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80047d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80047e2:	4ba5      	ldr	r3, [pc, #660]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047f0:	4aa1      	ldr	r2, [pc, #644]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800480c:	f04f 0900 	mov.w	r9, #0
 8004810:	ea58 0309 	orrs.w	r3, r8, r9
 8004814:	d047      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481c:	2b04      	cmp	r3, #4
 800481e:	d82a      	bhi.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004820:	a201      	add	r2, pc, #4	@ (adr r2, 8004828 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004826:	bf00      	nop
 8004828:	0800483d 	.word	0x0800483d
 800482c:	0800484b 	.word	0x0800484b
 8004830:	08004861 	.word	0x08004861
 8004834:	0800487f 	.word	0x0800487f
 8004838:	0800487f 	.word	0x0800487f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4b8e      	ldr	r3, [pc, #568]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	4a8d      	ldr	r2, [pc, #564]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004848:	e01a      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484e:	3308      	adds	r3, #8
 8004850:	2100      	movs	r1, #0
 8004852:	4618      	mov	r0, r3
 8004854:	f001 fc3c 	bl	80060d0 <RCCEx_PLL2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800485e:	e00f      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004864:	3328      	adds	r3, #40	@ 0x28
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f001 fce3 	bl	8006234 <RCCEx_PLL3_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004874:	e004      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800487c:	e000      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800487e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004888:	4b7b      	ldr	r3, [pc, #492]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800488a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800488c:	f023 0107 	bic.w	r1, r3, #7
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004896:	4a78      	ldr	r2, [pc, #480]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004898:	430b      	orrs	r3, r1
 800489a:	6513      	str	r3, [r2, #80]	@ 0x50
 800489c:	e003      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80048b2:	f04f 0b00 	mov.w	fp, #0
 80048b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80048ba:	d04c      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c6:	d030      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80048c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048cc:	d829      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80048d0:	d02d      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80048d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80048d4:	d825      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048d6:	2b80      	cmp	r3, #128	@ 0x80
 80048d8:	d018      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80048da:	2b80      	cmp	r3, #128	@ 0x80
 80048dc:	d821      	bhi.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d007      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80048e6:	e01c      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e8:	4b63      	ldr	r3, [pc, #396]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	4a62      	ldr	r2, [pc, #392]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80048f4:	e01c      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	3308      	adds	r3, #8
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 fbe6 	bl	80060d0 <RCCEx_PLL2_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800490c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004910:	3328      	adds	r3, #40	@ 0x28
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fc8d 	bl	8006234 <RCCEx_PLL3_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004920:	e006      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004928:	e002      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800492a:	bf00      	nop
 800492c:	e000      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800492e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004938:	4b4f      	ldr	r3, [pc, #316]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800493a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004946:	4a4c      	ldr	r2, [pc, #304]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004948:	430b      	orrs	r3, r1
 800494a:	6513      	str	r3, [r2, #80]	@ 0x50
 800494c:	e003      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004962:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004966:	2300      	movs	r3, #0
 8004968:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800496c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004970:	460b      	mov	r3, r1
 8004972:	4313      	orrs	r3, r2
 8004974:	d053      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800497e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004982:	d035      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004984:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004988:	d82e      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800498a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800498e:	d031      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004990:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004994:	d828      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800499a:	d01a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800499c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049a0:	d822      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80049a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049aa:	d007      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80049ac:	e01c      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ae:	4b32      	ldr	r3, [pc, #200]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	4a31      	ldr	r2, [pc, #196]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049ba:	e01c      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	3308      	adds	r3, #8
 80049c2:	2100      	movs	r1, #0
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 fb83 	bl	80060d0 <RCCEx_PLL2_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049d0:	e011      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	3328      	adds	r3, #40	@ 0x28
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 fc2a 	bl	8006234 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049e6:	e006      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049ee:	e002      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80049f0:	bf00      	nop
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80049f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80049fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a02:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a14:	e003      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004a2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004a34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d056      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a4a:	d038      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004a4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a50:	d831      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a56:	d034      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004a58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a5c:	d82b      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a62:	d01d      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a68:	d825      	bhi.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d006      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004a74:	e01f      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004a76:	bf00      	nop
 8004a78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a7c:	4ba2      	ldr	r3, [pc, #648]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a80:	4aa1      	ldr	r2, [pc, #644]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004a88:	e01c      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	3308      	adds	r3, #8
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f001 fb1c 	bl	80060d0 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004a9e:	e011      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa4:	3328      	adds	r3, #40	@ 0x28
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 fbc3 	bl	8006234 <RCCEx_PLL3_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004abc:	e002      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10b      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004acc:	4b8e      	ldr	r3, [pc, #568]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004adc:	4a8a      	ldr	r2, [pc, #552]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae2:	e003      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004b02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004b06:	460b      	mov	r3, r1
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	d03a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b12:	2b30      	cmp	r3, #48	@ 0x30
 8004b14:	d01f      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004b16:	2b30      	cmp	r3, #48	@ 0x30
 8004b18:	d819      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	d00c      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d815      	bhi.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d019      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d111      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2a:	4b77      	ldr	r3, [pc, #476]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	4a76      	ldr	r2, [pc, #472]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b36:	e011      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f001 fac5 	bl	80060d0 <RCCEx_PLL2_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004b4c:	e006      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b54:	e002      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b64:	4b68      	ldr	r3, [pc, #416]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b72:	4a65      	ldr	r2, [pc, #404]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b74:	430b      	orrs	r3, r1
 8004b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b78:	e003      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004b8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	d051      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bac:	d035      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bb2:	d82e      	bhi.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bb8:	d031      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004bba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004bbe:	d828      	bhi.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc4:	d01a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bca:	d822      	bhi.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd4:	d007      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004bd6:	e01c      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004be4:	e01c      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bea:	3308      	adds	r3, #8
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f001 fa6e 	bl	80060d0 <RCCEx_PLL2_Config>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004bfa:	e011      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c00:	3328      	adds	r3, #40	@ 0x28
 8004c02:	2100      	movs	r1, #0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 fb15 	bl	8006234 <RCCEx_PLL3_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004c10:	e006      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c18:	e002      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c28:	4b37      	ldr	r3, [pc, #220]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c36:	4a34      	ldr	r2, [pc, #208]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004c52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c56:	2300      	movs	r3, #0
 8004c58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004c5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004c60:	460b      	mov	r3, r1
 8004c62:	4313      	orrs	r3, r2
 8004c64:	d056      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c70:	d033      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004c72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c76:	d82c      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c7c:	d02f      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004c7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c82:	d826      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c88:	d02b      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004c8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004c8e:	d820      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c94:	d012      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c9a:	d81a      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d022      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca4:	d115      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004caa:	3308      	adds	r3, #8
 8004cac:	2101      	movs	r1, #1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f001 fa0e 	bl	80060d0 <RCCEx_PLL2_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cba:	e015      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc0:	3328      	adds	r3, #40	@ 0x28
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fab5 	bl	8006234 <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cda:	bf00      	nop
 8004cdc:	e004      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004cde:	bf00      	nop
 8004ce0:	e002      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ce2:	bf00      	nop
 8004ce4:	e000      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10d      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cfe:	4a02      	ldr	r2, [pc, #8]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d00:	430b      	orrs	r3, r1
 8004d02:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d04:	e006      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4313      	orrs	r3, r2
 8004d32:	d055      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d40:	d033      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d46:	d82c      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d4c:	d02f      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d52:	d826      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d58:	d02b      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d5e:	d820      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d64:	d012      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d6a:	d81a      	bhi.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d022      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d74:	d115      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 f9a6 	bl	80060d0 <RCCEx_PLL2_Config>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004d8a:	e015      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d90:	3328      	adds	r3, #40	@ 0x28
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f001 fa4d 	bl	8006234 <RCCEx_PLL3_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004da0:	e00a      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004da8:	e006      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004daa:	bf00      	nop
 8004dac:	e004      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004dc0:	4ba3      	ldr	r3, [pc, #652]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004dd0:	4a9f      	ldr	r2, [pc, #636]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd6:	e003      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d037      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e0a:	d00e      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e10:	d816      	bhi.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d018      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e1a:	d111      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	4a8b      	ldr	r2, [pc, #556]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e28:	e00f      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2e:	3308      	adds	r3, #8
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f001 f94c 	bl	80060d0 <RCCEx_PLL2_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004e3e:	e004      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e46:	e000      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e52:	4b7f      	ldr	r3, [pc, #508]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e60:	4a7b      	ldr	r2, [pc, #492]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e62:	430b      	orrs	r3, r1
 8004e64:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e66:	e003      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e80:	2300      	movs	r3, #0
 8004e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004e86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	d039      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d81c      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea0:	08004edd 	.word	0x08004edd
 8004ea4:	08004eb1 	.word	0x08004eb1
 8004ea8:	08004ebf 	.word	0x08004ebf
 8004eac:	08004edd 	.word	0x08004edd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eb0:	4b67      	ldr	r3, [pc, #412]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb4:	4a66      	ldr	r2, [pc, #408]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ebc:	e00f      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 f902 	bl	80060d0 <RCCEx_PLL2_Config>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ed2:	e004      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004eda:	e000      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eea:	f023 0103 	bic.w	r1, r3, #3
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef4:	4a56      	ldr	r2, [pc, #344]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ef6:	430b      	orrs	r3, r1
 8004ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004efa:	e003      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004f10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004f1e:	460b      	mov	r3, r1
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f000 809f 	beq.w	8005064 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f26:	4b4b      	ldr	r3, [pc, #300]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f32:	f7fb feab 	bl	8000c8c <HAL_GetTick>
 8004f36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f3c:	f7fb fea6 	bl	8000c8c <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b64      	cmp	r3, #100	@ 0x64
 8004f4a:	d903      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f52:	e005      	b.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f54:	4b3f      	ldr	r3, [pc, #252]	@ (8005054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ed      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d179      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f68:	4b39      	ldr	r3, [pc, #228]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f74:	4053      	eors	r3, r2
 8004f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d015      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f7e:	4b34      	ldr	r3, [pc, #208]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f8a:	4b31      	ldr	r3, [pc, #196]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a30      	ldr	r2, [pc, #192]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f96:	4b2e      	ldr	r3, [pc, #184]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004fa8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb6:	d118      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fb fe68 	bl	8000c8c <HAL_GetTick>
 8004fbc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fc0:	e00d      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc2:	f7fb fe63 	bl	8000c8c <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d903      	bls.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004fdc:	e005      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004fde:	4b1c      	ldr	r3, [pc, #112]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0eb      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d129      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005002:	d10e      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005004:	4b12      	ldr	r3, [pc, #72]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005014:	091a      	lsrs	r2, r3, #4
 8005016:	4b10      	ldr	r3, [pc, #64]	@ (8005058 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005018:	4013      	ands	r3, r2
 800501a:	4a0d      	ldr	r2, [pc, #52]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800501c:	430b      	orrs	r3, r1
 800501e:	6113      	str	r3, [r2, #16]
 8005020:	e005      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005022:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	4a0a      	ldr	r2, [pc, #40]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005028:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800502c:	6113      	str	r3, [r2, #16]
 800502e:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005030:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800503a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503e:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005040:	430b      	orrs	r3, r1
 8005042:	6713      	str	r3, [r2, #112]	@ 0x70
 8005044:	e00e      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800504e:	e009      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005050:	58024400 	.word	0x58024400
 8005054:	58024800 	.word	0x58024800
 8005058:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f002 0301 	and.w	r3, r2, #1
 8005070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800507a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800507e:	460b      	mov	r3, r1
 8005080:	4313      	orrs	r3, r2
 8005082:	f000 8089 	beq.w	8005198 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800508c:	2b28      	cmp	r3, #40	@ 0x28
 800508e:	d86b      	bhi.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005090:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	08005171 	.word	0x08005171
 800509c:	08005169 	.word	0x08005169
 80050a0:	08005169 	.word	0x08005169
 80050a4:	08005169 	.word	0x08005169
 80050a8:	08005169 	.word	0x08005169
 80050ac:	08005169 	.word	0x08005169
 80050b0:	08005169 	.word	0x08005169
 80050b4:	08005169 	.word	0x08005169
 80050b8:	0800513d 	.word	0x0800513d
 80050bc:	08005169 	.word	0x08005169
 80050c0:	08005169 	.word	0x08005169
 80050c4:	08005169 	.word	0x08005169
 80050c8:	08005169 	.word	0x08005169
 80050cc:	08005169 	.word	0x08005169
 80050d0:	08005169 	.word	0x08005169
 80050d4:	08005169 	.word	0x08005169
 80050d8:	08005153 	.word	0x08005153
 80050dc:	08005169 	.word	0x08005169
 80050e0:	08005169 	.word	0x08005169
 80050e4:	08005169 	.word	0x08005169
 80050e8:	08005169 	.word	0x08005169
 80050ec:	08005169 	.word	0x08005169
 80050f0:	08005169 	.word	0x08005169
 80050f4:	08005169 	.word	0x08005169
 80050f8:	08005171 	.word	0x08005171
 80050fc:	08005169 	.word	0x08005169
 8005100:	08005169 	.word	0x08005169
 8005104:	08005169 	.word	0x08005169
 8005108:	08005169 	.word	0x08005169
 800510c:	08005169 	.word	0x08005169
 8005110:	08005169 	.word	0x08005169
 8005114:	08005169 	.word	0x08005169
 8005118:	08005171 	.word	0x08005171
 800511c:	08005169 	.word	0x08005169
 8005120:	08005169 	.word	0x08005169
 8005124:	08005169 	.word	0x08005169
 8005128:	08005169 	.word	0x08005169
 800512c:	08005169 	.word	0x08005169
 8005130:	08005169 	.word	0x08005169
 8005134:	08005169 	.word	0x08005169
 8005138:	08005171 	.word	0x08005171
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800513c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005140:	3308      	adds	r3, #8
 8005142:	2101      	movs	r1, #1
 8005144:	4618      	mov	r0, r3
 8005146:	f000 ffc3 	bl	80060d0 <RCCEx_PLL2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005150:	e00f      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005156:	3328      	adds	r3, #40	@ 0x28
 8005158:	2101      	movs	r1, #1
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f86a 	bl	8006234 <RCCEx_PLL3_Config>
 8005160:	4603      	mov	r3, r0
 8005162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005166:	e004      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800516e:	e000      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800517a:	4bbf      	ldr	r3, [pc, #764]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005188:	4abb      	ldr	r2, [pc, #748]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800518a:	430b      	orrs	r3, r1
 800518c:	6553      	str	r3, [r2, #84]	@ 0x54
 800518e:	e003      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f002 0302 	and.w	r3, r2, #2
 80051a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80051ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80051b2:	460b      	mov	r3, r1
 80051b4:	4313      	orrs	r3, r2
 80051b6:	d041      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80051b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80051be:	2b05      	cmp	r3, #5
 80051c0:	d824      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80051c2:	a201      	add	r2, pc, #4	@ (adr r2, 80051c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80051c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c8:	08005215 	.word	0x08005215
 80051cc:	080051e1 	.word	0x080051e1
 80051d0:	080051f7 	.word	0x080051f7
 80051d4:	08005215 	.word	0x08005215
 80051d8:	08005215 	.word	0x08005215
 80051dc:	08005215 	.word	0x08005215
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e4:	3308      	adds	r3, #8
 80051e6:	2101      	movs	r1, #1
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 ff71 	bl	80060d0 <RCCEx_PLL2_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80051f4:	e00f      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051fa:	3328      	adds	r3, #40	@ 0x28
 80051fc:	2101      	movs	r1, #1
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 f818 	bl	8006234 <RCCEx_PLL3_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800520a:	e004      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005212:	e000      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800521e:	4b96      	ldr	r3, [pc, #600]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005222:	f023 0107 	bic.w	r1, r3, #7
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800522c:	4a92      	ldr	r2, [pc, #584]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800522e:	430b      	orrs	r3, r1
 8005230:	6553      	str	r3, [r2, #84]	@ 0x54
 8005232:	e003      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800523c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 0304 	and.w	r3, r2, #4
 8005248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005252:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d044      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800525c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005264:	2b05      	cmp	r3, #5
 8005266:	d825      	bhi.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005268:	a201      	add	r2, pc, #4	@ (adr r2, 8005270 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800526a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526e:	bf00      	nop
 8005270:	080052bd 	.word	0x080052bd
 8005274:	08005289 	.word	0x08005289
 8005278:	0800529f 	.word	0x0800529f
 800527c:	080052bd 	.word	0x080052bd
 8005280:	080052bd 	.word	0x080052bd
 8005284:	080052bd 	.word	0x080052bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800528c:	3308      	adds	r3, #8
 800528e:	2101      	movs	r1, #1
 8005290:	4618      	mov	r0, r3
 8005292:	f000 ff1d 	bl	80060d0 <RCCEx_PLL2_Config>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800529c:	e00f      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800529e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a2:	3328      	adds	r3, #40	@ 0x28
 80052a4:	2101      	movs	r1, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 ffc4 	bl	8006234 <RCCEx_PLL3_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80052b2:	e004      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052ba:	e000      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80052bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052c6:	4b6c      	ldr	r3, [pc, #432]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ca:	f023 0107 	bic.w	r1, r3, #7
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052d6:	4a68      	ldr	r2, [pc, #416]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052d8:	430b      	orrs	r3, r1
 80052da:	6593      	str	r3, [r2, #88]	@ 0x58
 80052dc:	e003      	b.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f002 0320 	and.w	r3, r2, #32
 80052f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052f6:	2300      	movs	r3, #0
 80052f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005300:	460b      	mov	r3, r1
 8005302:	4313      	orrs	r3, r2
 8005304:	d055      	beq.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005312:	d033      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005318:	d82c      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531e:	d02f      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d826      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800532a:	d02b      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800532c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005330:	d820      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005336:	d012      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800533c:	d81a      	bhi.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d022      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005346:	d115      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534c:	3308      	adds	r3, #8
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f000 febd 	bl	80060d0 <RCCEx_PLL2_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800535c:	e015      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800535e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005362:	3328      	adds	r3, #40	@ 0x28
 8005364:	2102      	movs	r1, #2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 ff64 	bl	8006234 <RCCEx_PLL3_Config>
 800536c:	4603      	mov	r3, r0
 800536e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005372:	e00a      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800537a:	e006      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800537c:	bf00      	nop
 800537e:	e004      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005380:	bf00      	nop
 8005382:	e002      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005384:	bf00      	nop
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800538a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005392:	4b39      	ldr	r3, [pc, #228]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005396:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800539a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800539e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a2:	4a35      	ldr	r2, [pc, #212]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80053a8:	e003      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80053be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80053c2:	2300      	movs	r3, #0
 80053c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80053c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4313      	orrs	r3, r2
 80053d0:	d058      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80053d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053de:	d033      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80053e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80053e4:	d82c      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ea:	d02f      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80053ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f0:	d826      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053f6:	d02b      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80053f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80053fc:	d820      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80053fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005402:	d012      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005408:	d81a      	bhi.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800540a:	2b00      	cmp	r3, #0
 800540c:	d022      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005412:	d115      	bne.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005418:	3308      	adds	r3, #8
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fe57 	bl	80060d0 <RCCEx_PLL2_Config>
 8005422:	4603      	mov	r3, r0
 8005424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005428:	e015      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542e:	3328      	adds	r3, #40	@ 0x28
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fefe 	bl	8006234 <RCCEx_PLL3_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800543e:	e00a      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005446:	e006      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005448:	bf00      	nop
 800544a:	e004      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800544c:	bf00      	nop
 800544e:	e002      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005450:	bf00      	nop
 8005452:	e000      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10e      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005462:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800546a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800546e:	4a02      	ldr	r2, [pc, #8]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005470:	430b      	orrs	r3, r1
 8005472:	6593      	str	r3, [r2, #88]	@ 0x58
 8005474:	e006      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005476:	bf00      	nop
 8005478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005494:	2300      	movs	r3, #0
 8005496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800549a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800549e:	460b      	mov	r3, r1
 80054a0:	4313      	orrs	r3, r2
 80054a2:	d055      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80054a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054b0:	d033      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80054b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80054b6:	d82c      	bhi.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054bc:	d02f      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c2:	d826      	bhi.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054c8:	d02b      	beq.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80054ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80054ce:	d820      	bhi.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054d4:	d012      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80054d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054da:	d81a      	bhi.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d022      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80054e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054e4:	d115      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ea:	3308      	adds	r3, #8
 80054ec:	2100      	movs	r1, #0
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fdee 	bl	80060d0 <RCCEx_PLL2_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80054fa:	e015      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005500:	3328      	adds	r3, #40	@ 0x28
 8005502:	2102      	movs	r1, #2
 8005504:	4618      	mov	r0, r3
 8005506:	f000 fe95 	bl	8006234 <RCCEx_PLL3_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005510:	e00a      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005518:	e006      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800551a:	bf00      	nop
 800551c:	e004      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800551e:	bf00      	nop
 8005520:	e002      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005522:	bf00      	nop
 8005524:	e000      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10b      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005530:	4ba1      	ldr	r3, [pc, #644]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005540:	4a9d      	ldr	r2, [pc, #628]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005542:	430b      	orrs	r3, r1
 8005544:	6593      	str	r3, [r2, #88]	@ 0x58
 8005546:	e003      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800554c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f002 0308 	and.w	r3, r2, #8
 800555c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005560:	2300      	movs	r3, #0
 8005562:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005566:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	d01e      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557c:	d10c      	bne.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800557e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005582:	3328      	adds	r3, #40	@ 0x28
 8005584:	2102      	movs	r1, #2
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fe54 	bl	8006234 <RCCEx_PLL3_Config>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005598:	4b87      	ldr	r3, [pc, #540]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800559a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055a8:	4a83      	ldr	r2, [pc, #524]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055aa:	430b      	orrs	r3, r1
 80055ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b6:	f002 0310 	and.w	r3, r2, #16
 80055ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80055be:	2300      	movs	r3, #0
 80055c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80055c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80055c8:	460b      	mov	r3, r1
 80055ca:	4313      	orrs	r3, r2
 80055cc:	d01e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80055ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055da:	d10c      	bne.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e0:	3328      	adds	r3, #40	@ 0x28
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fe25 	bl	8006234 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055f6:	4b70      	ldr	r3, [pc, #448]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005606:	4a6c      	ldr	r2, [pc, #432]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005608:	430b      	orrs	r3, r1
 800560a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800561c:	2300      	movs	r3, #0
 800561e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005622:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005626:	460b      	mov	r3, r1
 8005628:	4313      	orrs	r3, r2
 800562a:	d03e      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800562c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005638:	d022      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800563a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800563e:	d81b      	bhi.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005648:	d00b      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800564a:	e015      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	3308      	adds	r3, #8
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fd3b 	bl	80060d0 <RCCEx_PLL2_Config>
 800565a:	4603      	mov	r3, r0
 800565c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005660:	e00f      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005666:	3328      	adds	r3, #40	@ 0x28
 8005668:	2102      	movs	r1, #2
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fde2 	bl	8006234 <RCCEx_PLL3_Config>
 8005670:	4603      	mov	r3, r0
 8005672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005676:	e004      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800567e:	e000      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800568a:	4b4b      	ldr	r3, [pc, #300]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800568c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800569a:	4a47      	ldr	r2, [pc, #284]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800569c:	430b      	orrs	r3, r1
 800569e:	6593      	str	r3, [r2, #88]	@ 0x58
 80056a0:	e003      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80056b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056b8:	2300      	movs	r3, #0
 80056ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80056bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80056c0:	460b      	mov	r3, r1
 80056c2:	4313      	orrs	r3, r2
 80056c4:	d03b      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056d2:	d01f      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80056d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056d8:	d818      	bhi.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80056da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056de:	d003      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80056e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056e4:	d007      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80056e6:	e011      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056e8:	4b33      	ldr	r3, [pc, #204]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ec:	4a32      	ldr	r2, [pc, #200]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80056f4:	e00f      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	3328      	adds	r3, #40	@ 0x28
 80056fc:	2101      	movs	r1, #1
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fd98 	bl	8006234 <RCCEx_PLL3_Config>
 8005704:	4603      	mov	r3, r0
 8005706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800570a:	e004      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005712:	e000      	b.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800571e:	4b26      	ldr	r3, [pc, #152]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005722:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572e:	4a22      	ldr	r2, [pc, #136]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005730:	430b      	orrs	r3, r1
 8005732:	6553      	str	r3, [r2, #84]	@ 0x54
 8005734:	e003      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800574a:	673b      	str	r3, [r7, #112]	@ 0x70
 800574c:	2300      	movs	r3, #0
 800574e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005750:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005754:	460b      	mov	r3, r1
 8005756:	4313      	orrs	r3, r2
 8005758:	d034      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005768:	d007      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800576a:	e011      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576c:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	4a11      	ldr	r2, [pc, #68]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005778:	e00e      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577e:	3308      	adds	r3, #8
 8005780:	2102      	movs	r1, #2
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fca4 	bl	80060d0 <RCCEx_PLL2_Config>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800578e:	e003      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10d      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80057a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ae:	4a02      	ldr	r2, [pc, #8]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b0:	430b      	orrs	r3, r1
 80057b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057b4:	e006      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80057b6:	bf00      	nop
 80057b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80057d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057d2:	2300      	movs	r3, #0
 80057d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80057da:	460b      	mov	r3, r1
 80057dc:	4313      	orrs	r3, r2
 80057de:	d00c      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e4:	3328      	adds	r3, #40	@ 0x28
 80057e6:	2102      	movs	r1, #2
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 fd23 	bl	8006234 <RCCEx_PLL3_Config>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005806:	663b      	str	r3, [r7, #96]	@ 0x60
 8005808:	2300      	movs	r3, #0
 800580a:	667b      	str	r3, [r7, #100]	@ 0x64
 800580c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d038      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005822:	d018      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005828:	d811      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800582a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800582e:	d014      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005834:	d80b      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d011      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800583a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800583e:	d106      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005840:	4bc3      	ldr	r3, [pc, #780]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005844:	4ac2      	ldr	r2, [pc, #776]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800584a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800584c:	e008      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005854:	e004      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005856:	bf00      	nop
 8005858:	e002      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800585e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005868:	4bb9      	ldr	r3, [pc, #740]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800586a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005878:	4ab5      	ldr	r2, [pc, #724]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800587a:	430b      	orrs	r3, r1
 800587c:	6553      	str	r3, [r2, #84]	@ 0x54
 800587e:	e003      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005894:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005896:	2300      	movs	r3, #0
 8005898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800589a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800589e:	460b      	mov	r3, r1
 80058a0:	4313      	orrs	r3, r2
 80058a2:	d009      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058a4:	4baa      	ldr	r3, [pc, #680]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80058ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b2:	4aa7      	ldr	r2, [pc, #668]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80058c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80058c6:	2300      	movs	r3, #0
 80058c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80058ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80058d4:	4b9e      	ldr	r3, [pc, #632]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80058e4:	4a9a      	ldr	r2, [pc, #616]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e6:	430b      	orrs	r3, r1
 80058e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80058f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058f8:	2300      	movs	r3, #0
 80058fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005906:	4b92      	ldr	r3, [pc, #584]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800590e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005914:	4a8e      	ldr	r2, [pc, #568]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005916:	430b      	orrs	r3, r1
 8005918:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005926:	643b      	str	r3, [r7, #64]	@ 0x40
 8005928:	2300      	movs	r3, #0
 800592a:	647b      	str	r3, [r7, #68]	@ 0x44
 800592c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005930:	460b      	mov	r3, r1
 8005932:	4313      	orrs	r3, r2
 8005934:	d00e      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005936:	4b86      	ldr	r3, [pc, #536]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	4a85      	ldr	r2, [pc, #532]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800593c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005940:	6113      	str	r3, [r2, #16]
 8005942:	4b83      	ldr	r3, [pc, #524]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005944:	6919      	ldr	r1, [r3, #16]
 8005946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800594e:	4a80      	ldr	r2, [pc, #512]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005950:	430b      	orrs	r3, r1
 8005952:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005962:	2300      	movs	r3, #0
 8005964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005966:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800596a:	460b      	mov	r3, r1
 800596c:	4313      	orrs	r3, r2
 800596e:	d009      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005970:	4b77      	ldr	r3, [pc, #476]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005974:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597e:	4a74      	ldr	r2, [pc, #464]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005980:	430b      	orrs	r3, r1
 8005982:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005990:	633b      	str	r3, [r7, #48]	@ 0x30
 8005992:	2300      	movs	r3, #0
 8005994:	637b      	str	r3, [r7, #52]	@ 0x34
 8005996:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800599a:	460b      	mov	r3, r1
 800599c:	4313      	orrs	r3, r2
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80059a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b0:	4a67      	ldr	r2, [pc, #412]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059b2:	430b      	orrs	r3, r1
 80059b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80059b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	2100      	movs	r1, #0
 80059c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80059cc:	460b      	mov	r3, r1
 80059ce:	4313      	orrs	r3, r2
 80059d0:	d011      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	3308      	adds	r3, #8
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fb78 	bl	80060d0 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fe:	2100      	movs	r1, #0
 8005a00:	6239      	str	r1, [r7, #32]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	d011      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a16:	3308      	adds	r3, #8
 8005a18:	2101      	movs	r1, #1
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fb58 	bl	80060d0 <RCCEx_PLL2_Config>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	2100      	movs	r1, #0
 8005a40:	61b9      	str	r1, [r7, #24]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	d011      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	3308      	adds	r3, #8
 8005a58:	2102      	movs	r1, #2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fb38 	bl	80060d0 <RCCEx_PLL2_Config>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	2100      	movs	r1, #0
 8005a80:	6139      	str	r1, [r7, #16]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	d011      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a96:	3328      	adds	r3, #40	@ 0x28
 8005a98:	2100      	movs	r1, #0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fbca 	bl	8006234 <RCCEx_PLL3_Config>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005acc:	460b      	mov	r3, r1
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	d011      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad6:	3328      	adds	r3, #40	@ 0x28
 8005ad8:	2101      	movs	r1, #1
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fbaa 	bl	8006234 <RCCEx_PLL3_Config>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	2100      	movs	r1, #0
 8005b00:	6039      	str	r1, [r7, #0]
 8005b02:	f003 0320 	and.w	r3, r3, #32
 8005b06:	607b      	str	r3, [r7, #4]
 8005b08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	d011      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	3328      	adds	r3, #40	@ 0x28
 8005b18:	2102      	movs	r1, #2
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fb8a 	bl	8006234 <RCCEx_PLL3_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005b36:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b50:	58024400 	.word	0x58024400

08005b54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b58:	f7fe fd96 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4904      	ldr	r1, [pc, #16]	@ (8005b7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	0800e650 	.word	0x0800e650

08005b80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b089      	sub	sp, #36	@ 0x24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b88:	4ba1      	ldr	r3, [pc, #644]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005b92:	4b9f      	ldr	r3, [pc, #636]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	0b1b      	lsrs	r3, r3, #12
 8005b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005baa:	4b99      	ldr	r3, [pc, #612]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	08db      	lsrs	r3, r3, #3
 8005bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8111 	beq.w	8005df0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	f000 8083 	beq.w	8005cdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	f200 80a1 	bhi.w	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d056      	beq.n	8005c98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bea:	e099      	b.n	8005d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bec:	4b88      	ldr	r3, [pc, #544]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d02d      	beq.n	8005c54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bf8:	4b85      	ldr	r3, [pc, #532]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	08db      	lsrs	r3, r3, #3
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	4a84      	ldr	r2, [pc, #528]	@ (8005e14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c04:	fa22 f303 	lsr.w	r3, r2, r3
 8005c08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b7b      	ldr	r3, [pc, #492]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005c52:	e087      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005e1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c66:	4b6a      	ldr	r3, [pc, #424]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c96:	e065      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005caa:	4b59      	ldr	r3, [pc, #356]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cda:	e043      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cee:	4b48      	ldr	r3, [pc, #288]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1e:	e021      	b.n	8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d32:	4b37      	ldr	r3, [pc, #220]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005d64:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	0a5b      	lsrs	r3, r3, #9
 8005d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d6e:	ee07 3a90 	vmov	s15, r3
 8005d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d8a:	ee17 2a90 	vmov	r2, s15
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005d92:	4b1f      	ldr	r3, [pc, #124]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	0c1b      	lsrs	r3, r3, #16
 8005d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005db8:	ee17 2a90 	vmov	r2, s15
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005dc0:	4b13      	ldr	r3, [pc, #76]	@ (8005e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc4:	0e1b      	lsrs	r3, r3, #24
 8005dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de6:	ee17 2a90 	vmov	r2, s15
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dee:	e008      	b.n	8005e02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
}
 8005e02:	bf00      	nop
 8005e04:	3724      	adds	r7, #36	@ 0x24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400
 8005e14:	03d09000 	.word	0x03d09000
 8005e18:	46000000 	.word	0x46000000
 8005e1c:	4c742400 	.word	0x4c742400
 8005e20:	4a742400 	.word	0x4a742400
 8005e24:	4af42400 	.word	0x4af42400

08005e28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b089      	sub	sp, #36	@ 0x24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e30:	4ba1      	ldr	r3, [pc, #644]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	0d1b      	lsrs	r3, r3, #20
 8005e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e46:	4b9c      	ldr	r3, [pc, #624]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e4a:	0a1b      	lsrs	r3, r3, #8
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005e52:	4b99      	ldr	r3, [pc, #612]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e56:	08db      	lsrs	r3, r3, #3
 8005e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8111 	beq.w	8006098 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	f000 8083 	beq.w	8005f84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	f200 80a1 	bhi.w	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d056      	beq.n	8005f40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e92:	e099      	b.n	8005fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e94:	4b88      	ldr	r3, [pc, #544]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0320 	and.w	r3, r3, #32
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02d      	beq.n	8005efc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005ea0:	4b85      	ldr	r3, [pc, #532]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	08db      	lsrs	r3, r3, #3
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	4a84      	ldr	r2, [pc, #528]	@ (80060bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b7b      	ldr	r3, [pc, #492]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ede:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005efa:	e087      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80060c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f3e:	e065      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f52:	4b59      	ldr	r3, [pc, #356]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f82:	e043      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80060cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b48      	ldr	r3, [pc, #288]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005faa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc6:	e021      	b.n	800600c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	4b37      	ldr	r3, [pc, #220]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800600a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800600c:	4b2a      	ldr	r3, [pc, #168]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	0a5b      	lsrs	r3, r3, #9
 8006012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006026:	edd7 6a07 	vldr	s13, [r7, #28]
 800602a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800602e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006032:	ee17 2a90 	vmov	r2, s15
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800603a:	4b1f      	ldr	r3, [pc, #124]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	0c1b      	lsrs	r3, r3, #16
 8006040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006044:	ee07 3a90 	vmov	s15, r3
 8006048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006054:	edd7 6a07 	vldr	s13, [r7, #28]
 8006058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800605c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006060:	ee17 2a90 	vmov	r2, s15
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006068:	4b13      	ldr	r3, [pc, #76]	@ (80060b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	0e1b      	lsrs	r3, r3, #24
 800606e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800607e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006082:	edd7 6a07 	vldr	s13, [r7, #28]
 8006086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006096:	e008      	b.n	80060aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	609a      	str	r2, [r3, #8]
}
 80060aa:	bf00      	nop
 80060ac:	3724      	adds	r7, #36	@ 0x24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	58024400 	.word	0x58024400
 80060bc:	03d09000 	.word	0x03d09000
 80060c0:	46000000 	.word	0x46000000
 80060c4:	4c742400 	.word	0x4c742400
 80060c8:	4a742400 	.word	0x4a742400
 80060cc:	4af42400 	.word	0x4af42400

080060d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060de:	4b53      	ldr	r3, [pc, #332]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d101      	bne.n	80060ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e099      	b.n	8006222 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060ee:	4b4f      	ldr	r3, [pc, #316]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a4e      	ldr	r2, [pc, #312]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80060f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80060f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fa:	f7fa fdc7 	bl	8000c8c <HAL_GetTick>
 80060fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006100:	e008      	b.n	8006114 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006102:	f7fa fdc3 	bl	8000c8c <HAL_GetTick>
 8006106:	4602      	mov	r2, r0
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1ad3      	subs	r3, r2, r3
 800610c:	2b02      	cmp	r3, #2
 800610e:	d901      	bls.n	8006114 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e086      	b.n	8006222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006114:	4b45      	ldr	r3, [pc, #276]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f0      	bne.n	8006102 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006120:	4b42      	ldr	r3, [pc, #264]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006124:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	493f      	ldr	r1, [pc, #252]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	628b      	str	r3, [r1, #40]	@ 0x28
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	3b01      	subs	r3, #1
 800613a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	3b01      	subs	r3, #1
 8006144:	025b      	lsls	r3, r3, #9
 8006146:	b29b      	uxth	r3, r3
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	3b01      	subs	r3, #1
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	3b01      	subs	r3, #1
 800615e:	061b      	lsls	r3, r3, #24
 8006160:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006164:	4931      	ldr	r1, [pc, #196]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006166:	4313      	orrs	r3, r2
 8006168:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800616a:	4b30      	ldr	r3, [pc, #192]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800616c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800616e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	492d      	ldr	r1, [pc, #180]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006178:	4313      	orrs	r3, r2
 800617a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800617c:	4b2b      	ldr	r3, [pc, #172]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	f023 0220 	bic.w	r2, r3, #32
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	4928      	ldr	r1, [pc, #160]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800618a:	4313      	orrs	r3, r2
 800618c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800618e:	4b27      	ldr	r3, [pc, #156]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	4a26      	ldr	r2, [pc, #152]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006194:	f023 0310 	bic.w	r3, r3, #16
 8006198:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800619a:	4b24      	ldr	r3, [pc, #144]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 800619c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800619e:	4b24      	ldr	r3, [pc, #144]	@ (8006230 <RCCEx_PLL2_Config+0x160>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	69d2      	ldr	r2, [r2, #28]
 80061a6:	00d2      	lsls	r2, r2, #3
 80061a8:	4920      	ldr	r1, [pc, #128]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80061ae:	4b1f      	ldr	r3, [pc, #124]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	4a1e      	ldr	r2, [pc, #120]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061b4:	f043 0310 	orr.w	r3, r3, #16
 80061b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061c0:	4b1a      	ldr	r3, [pc, #104]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c4:	4a19      	ldr	r2, [pc, #100]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061cc:	e00f      	b.n	80061ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d106      	bne.n	80061e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061d4:	4b15      	ldr	r3, [pc, #84]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d8:	4a14      	ldr	r2, [pc, #80]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80061e0:	e005      	b.n	80061ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061e2:	4b12      	ldr	r3, [pc, #72]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	4a11      	ldr	r2, [pc, #68]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80061ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061ee:	4b0f      	ldr	r3, [pc, #60]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0e      	ldr	r2, [pc, #56]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 80061f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061fa:	f7fa fd47 	bl	8000c8c <HAL_GetTick>
 80061fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006200:	e008      	b.n	8006214 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006202:	f7fa fd43 	bl	8000c8c <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d901      	bls.n	8006214 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e006      	b.n	8006222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <RCCEx_PLL2_Config+0x15c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f0      	beq.n	8006202 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	58024400 	.word	0x58024400
 8006230:	ffff0007 	.word	0xffff0007

08006234 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006242:	4b53      	ldr	r3, [pc, #332]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	2b03      	cmp	r3, #3
 800624c:	d101      	bne.n	8006252 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e099      	b.n	8006386 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006252:	4b4f      	ldr	r3, [pc, #316]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a4e      	ldr	r2, [pc, #312]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800625c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800625e:	f7fa fd15 	bl	8000c8c <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006264:	e008      	b.n	8006278 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006266:	f7fa fd11 	bl	8000c8c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e086      	b.n	8006386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006278:	4b45      	ldr	r3, [pc, #276]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006284:	4b42      	ldr	r3, [pc, #264]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006288:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	051b      	lsls	r3, r3, #20
 8006292:	493f      	ldr	r1, [pc, #252]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006294:	4313      	orrs	r3, r2
 8006296:	628b      	str	r3, [r1, #40]	@ 0x28
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	3b01      	subs	r3, #1
 800629e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	025b      	lsls	r3, r3, #9
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	3b01      	subs	r3, #1
 80062b4:	041b      	lsls	r3, r3, #16
 80062b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	3b01      	subs	r3, #1
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80062c8:	4931      	ldr	r1, [pc, #196]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062ce:	4b30      	ldr	r3, [pc, #192]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	492d      	ldr	r1, [pc, #180]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	4928      	ldr	r1, [pc, #160]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062f2:	4b27      	ldr	r3, [pc, #156]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	4a26      	ldr	r2, [pc, #152]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 80062f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062fe:	4b24      	ldr	r3, [pc, #144]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006302:	4b24      	ldr	r3, [pc, #144]	@ (8006394 <RCCEx_PLL3_Config+0x160>)
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	69d2      	ldr	r2, [r2, #28]
 800630a:	00d2      	lsls	r2, r2, #3
 800630c:	4920      	ldr	r1, [pc, #128]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800630e:	4313      	orrs	r3, r2
 8006310:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006312:	4b1f      	ldr	r3, [pc, #124]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006316:	4a1e      	ldr	r2, [pc, #120]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800631c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006324:	4b1a      	ldr	r3, [pc, #104]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006328:	4a19      	ldr	r2, [pc, #100]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800632a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800632e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006330:	e00f      	b.n	8006352 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d106      	bne.n	8006346 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006338:	4b15      	ldr	r3, [pc, #84]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633c:	4a14      	ldr	r2, [pc, #80]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800633e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006344:	e005      	b.n	8006352 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006346:	4b12      	ldr	r3, [pc, #72]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	4a11      	ldr	r2, [pc, #68]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800634c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006350:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006352:	4b0f      	ldr	r3, [pc, #60]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a0e      	ldr	r2, [pc, #56]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800635c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635e:	f7fa fc95 	bl	8000c8c <HAL_GetTick>
 8006362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006364:	e008      	b.n	8006378 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006366:	f7fa fc91 	bl	8000c8c <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b02      	cmp	r3, #2
 8006372:	d901      	bls.n	8006378 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e006      	b.n	8006386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006378:	4b05      	ldr	r3, [pc, #20]	@ (8006390 <RCCEx_PLL3_Config+0x15c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
 8006394:	ffff0007 	.word	0xffff0007

08006398 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e10f      	b.n	80065ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a87      	ldr	r2, [pc, #540]	@ (80065d4 <HAL_SPI_Init+0x23c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <HAL_SPI_Init+0x42>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a86      	ldr	r2, [pc, #536]	@ (80065d8 <HAL_SPI_Init+0x240>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00a      	beq.n	80063da <HAL_SPI_Init+0x42>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a84      	ldr	r2, [pc, #528]	@ (80065dc <HAL_SPI_Init+0x244>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d005      	beq.n	80063da <HAL_SPI_Init+0x42>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b0f      	cmp	r3, #15
 80063d4:	d901      	bls.n	80063da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e0f7      	b.n	80065ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fd08 	bl	8006df0 <SPI_GetPacketSize>
 80063e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a7b      	ldr	r2, [pc, #492]	@ (80065d4 <HAL_SPI_Init+0x23c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d00c      	beq.n	8006406 <HAL_SPI_Init+0x6e>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a79      	ldr	r2, [pc, #484]	@ (80065d8 <HAL_SPI_Init+0x240>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <HAL_SPI_Init+0x6e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a78      	ldr	r2, [pc, #480]	@ (80065dc <HAL_SPI_Init+0x244>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d002      	beq.n	8006406 <HAL_SPI_Init+0x6e>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b08      	cmp	r3, #8
 8006404:	d811      	bhi.n	800642a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800640a:	4a72      	ldr	r2, [pc, #456]	@ (80065d4 <HAL_SPI_Init+0x23c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d009      	beq.n	8006424 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a70      	ldr	r2, [pc, #448]	@ (80065d8 <HAL_SPI_Init+0x240>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <HAL_SPI_Init+0x8c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a6f      	ldr	r2, [pc, #444]	@ (80065dc <HAL_SPI_Init+0x244>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d104      	bne.n	800642e <HAL_SPI_Init+0x96>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b10      	cmp	r3, #16
 8006428:	d901      	bls.n	800642e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0cd      	b.n	80065ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d106      	bne.n	8006448 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fb f80a 	bl	800145c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800646a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006474:	d119      	bne.n	80064aa <HAL_SPI_Init+0x112>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800647e:	d103      	bne.n	8006488 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10c      	bne.n	80064aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006498:	d107      	bne.n	80064aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80064a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <HAL_SPI_Init+0x13e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d90b      	bls.n	80064d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	430a      	orrs	r2, r1
 80064d2:	601a      	str	r2, [r3, #0]
 80064d4:	e007      	b.n	80064e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69da      	ldr	r2, [r3, #28]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	ea42 0103 	orr.w	r1, r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006510:	431a      	orrs	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	431a      	orrs	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	431a      	orrs	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	431a      	orrs	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	431a      	orrs	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006546:	ea42 0103 	orr.w	r1, r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	430a      	orrs	r2, r1
 8006554:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d113      	bne.n	8006586 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006570:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006584:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	40013000 	.word	0x40013000
 80065d8:	40003800 	.word	0x40003800
 80065dc:	40003c00 	.word	0x40003c00

080065e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b08e      	sub	sp, #56	@ 0x38
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3320      	adds	r3, #32
 80065f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3330      	adds	r3, #48	@ 0x30
 80065fc:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	b29b      	uxth	r3, r3
 8006606:	3301      	adds	r3, #1
 8006608:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800660a:	f7fa fb3f 	bl	8000c8c <HAL_GetTick>
 800660e:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 8006610:	887b      	ldrh	r3, [r7, #2]
 8006612:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d001      	beq.n	8006628 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
 8006626:	e310      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <HAL_SPI_TransmitReceive+0x5a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_SPI_TransmitReceive+0x5a>
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e305      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_SPI_TransmitReceive+0x6c>
 8006648:	2302      	movs	r3, #2
 800664a:	e2fe      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x66a>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2205      	movs	r2, #5
 8006658:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	887a      	ldrh	r2, [r7, #2]
 800666e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	887a      	ldrh	r2, [r7, #2]
 8006676:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	887a      	ldrh	r2, [r7, #2]
 8006684:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	887a      	ldrh	r2, [r7, #2]
 800668c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 80066aa:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a70      	ldr	r2, [pc, #448]	@ (8006874 <HAL_SPI_TransmitReceive+0x294>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d009      	beq.n	80066ca <HAL_SPI_TransmitReceive+0xea>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a6f      	ldr	r2, [pc, #444]	@ (8006878 <HAL_SPI_TransmitReceive+0x298>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d004      	beq.n	80066ca <HAL_SPI_TransmitReceive+0xea>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a6d      	ldr	r2, [pc, #436]	@ (800687c <HAL_SPI_TransmitReceive+0x29c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d102      	bne.n	80066d0 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 80066ca:	2310      	movs	r3, #16
 80066cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ce:	e001      	b.n	80066d4 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 80066d0:	2308      	movs	r3, #8
 80066d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	4b69      	ldr	r3, [pc, #420]	@ (8006880 <HAL_SPI_TransmitReceive+0x2a0>)
 80066dc:	4013      	ands	r3, r2
 80066de:	8879      	ldrh	r1, [r7, #2]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	430b      	orrs	r3, r1
 80066e6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0201 	orr.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006700:	d107      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006710:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	f240 80a2 	bls.w	8006860 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	089b      	lsrs	r3, r3, #2
 8006720:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006722:	e094      	b.n	800684e <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b02      	cmp	r3, #2
 8006730:	d120      	bne.n	8006774 <HAL_SPI_TransmitReceive+0x194>
 8006732:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01d      	beq.n	8006774 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006738:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800673a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800673c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800673e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006740:	429a      	cmp	r2, r3
 8006742:	d217      	bcs.n	8006774 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006754:	1d1a      	adds	r2, r3, #4
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006760:	b29b      	uxth	r3, r3
 8006762:	3b01      	subs	r3, #1
 8006764:	b29a      	uxth	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006772:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800677c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800677e:	2b00      	cmp	r3, #0
 8006780:	d065      	beq.n	800684e <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f003 0301 	and.w	r3, r3, #1
 800678c:	2b01      	cmp	r3, #1
 800678e:	d118      	bne.n	80067c2 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006798:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800679a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067a0:	1d1a      	adds	r2, r3, #4
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067be:	853b      	strh	r3, [r7, #40]	@ 0x28
 80067c0:	e045      	b.n	800684e <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80067c2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80067c4:	8bfb      	ldrh	r3, [r7, #30]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d21d      	bcs.n	8006806 <HAL_SPI_TransmitReceive+0x226>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d018      	beq.n	8006806 <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80067de:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e4:	1d1a      	adds	r2, r3, #4
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	3b01      	subs	r3, #1
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006802:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006804:	e023      	b.n	800684e <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006806:	f7fa fa41 	bl	8000c8c <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006812:	429a      	cmp	r2, r3
 8006814:	d803      	bhi.n	800681e <HAL_SPI_TransmitReceive+0x23e>
 8006816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d102      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x244>
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d114      	bne.n	800684e <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 fa15 	bl	8006c54 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006830:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e1fd      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800684e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006850:	2b00      	cmp	r3, #0
 8006852:	f47f af67 	bne.w	8006724 <HAL_SPI_TransmitReceive+0x144>
 8006856:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006858:	2b00      	cmp	r3, #0
 800685a:	f47f af63 	bne.w	8006724 <HAL_SPI_TransmitReceive+0x144>
 800685e:	e1ce      	b.n	8006bfe <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b07      	cmp	r3, #7
 8006866:	f240 81c2 	bls.w	8006bee <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800686a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686c:	085b      	lsrs	r3, r3, #1
 800686e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006870:	e0c9      	b.n	8006a06 <HAL_SPI_TransmitReceive+0x426>
 8006872:	bf00      	nop
 8006874:	40013000 	.word	0x40013000
 8006878:	40003800 	.word	0x40003800
 800687c:	40003c00 	.word	0x40003c00
 8006880:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b02      	cmp	r3, #2
 8006890:	d11f      	bne.n	80068d2 <HAL_SPI_TransmitReceive+0x2f2>
 8006892:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01c      	beq.n	80068d2 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006898:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800689a:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800689c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800689e:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d216      	bcs.n	80068d2 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a8:	881a      	ldrh	r2, [r3, #0]
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068b2:	1c9a      	adds	r2, r3, #2
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80068d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 80068da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8092 	beq.w	8006a06 <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d118      	bne.n	8006922 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f4:	6a3a      	ldr	r2, [r7, #32]
 80068f6:	8812      	ldrh	r2, [r2, #0]
 80068f8:	b292      	uxth	r2, r2
 80068fa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006900:	1c9a      	adds	r2, r3, #2
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800691e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006920:	e071      	b.n	8006a06 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006922:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006924:	8bfb      	ldrh	r3, [r7, #30]
 8006926:	429a      	cmp	r2, r3
 8006928:	d228      	bcs.n	800697c <HAL_SPI_TransmitReceive+0x39c>
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d023      	beq.n	800697c <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006938:	6a3a      	ldr	r2, [r7, #32]
 800693a:	8812      	ldrh	r2, [r2, #0]
 800693c:	b292      	uxth	r2, r2
 800693e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006944:	1c9a      	adds	r2, r3, #2
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800694e:	6a3a      	ldr	r2, [r7, #32]
 8006950:	8812      	ldrh	r2, [r2, #0]
 8006952:	b292      	uxth	r2, r2
 8006954:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800695a:	1c9a      	adds	r2, r3, #2
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b02      	subs	r3, #2
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006978:	853b      	strh	r3, [r7, #40]	@ 0x28
 800697a:	e044      	b.n	8006a06 <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800697c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800697e:	2b01      	cmp	r3, #1
 8006980:	d11d      	bne.n	80069be <HAL_SPI_TransmitReceive+0x3de>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d018      	beq.n	80069be <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006990:	6a3a      	ldr	r2, [r7, #32]
 8006992:	8812      	ldrh	r2, [r2, #0]
 8006994:	b292      	uxth	r2, r2
 8006996:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800699c:	1c9a      	adds	r2, r3, #2
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80069ba:	853b      	strh	r3, [r7, #40]	@ 0x28
 80069bc:	e023      	b.n	8006a06 <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069be:	f7fa f965 	bl	8000c8c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d803      	bhi.n	80069d6 <HAL_SPI_TransmitReceive+0x3f6>
 80069ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	d102      	bne.n	80069dc <HAL_SPI_TransmitReceive+0x3fc>
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d114      	bne.n	8006a06 <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f939 	bl	8006c54 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e121      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006a06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f47f af3b 	bne.w	8006884 <HAL_SPI_TransmitReceive+0x2a4>
 8006a0e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f47f af37 	bne.w	8006884 <HAL_SPI_TransmitReceive+0x2a4>
 8006a16:	e0f2      	b.n	8006bfe <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d121      	bne.n	8006a6a <HAL_SPI_TransmitReceive+0x48a>
 8006a26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d01e      	beq.n	8006a6a <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8006a2c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006a2e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8006a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a32:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d218      	bcs.n	8006a6a <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3320      	adds	r3, #32
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8006a68:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 8006a72:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80ba 	beq.w	8006bee <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d11b      	bne.n	8006ac0 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006abc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006abe:	e096      	b.n	8006bee <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8006ac0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8006ac2:	8bfb      	ldrh	r3, [r7, #30]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d24a      	bcs.n	8006b5e <HAL_SPI_TransmitReceive+0x57e>
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d045      	beq.n	8006b5e <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b16:	7812      	ldrb	r2, [r2, #0]
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b20:	1c5a      	adds	r2, r3, #1
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b32:	7812      	ldrb	r2, [r2, #0]
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b3c:	1c5a      	adds	r2, r3, #1
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b04      	subs	r3, #4
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b5a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006b5c:	e047      	b.n	8006bee <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8006b5e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d820      	bhi.n	8006ba6 <HAL_SPI_TransmitReceive+0x5c6>
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01b      	beq.n	8006ba6 <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b7a:	7812      	ldrb	r2, [r2, #0]
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b84:	1c5a      	adds	r2, r3, #1
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	3b01      	subs	r3, #1
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006ba2:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006ba4:	e023      	b.n	8006bee <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ba6:	f7fa f871 	bl	8000c8c <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d803      	bhi.n	8006bbe <HAL_SPI_TransmitReceive+0x5de>
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbc:	d102      	bne.n	8006bc4 <HAL_SPI_TransmitReceive+0x5e4>
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d114      	bne.n	8006bee <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f845 	bl	8006c54 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e02d      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006bee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f47f af11 	bne.w	8006a18 <HAL_SPI_TransmitReceive+0x438>
 8006bf6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f47f af0d 	bne.w	8006a18 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c04:	2200      	movs	r2, #0
 8006c06:	2108      	movs	r1, #8
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f8c3 	bl	8006d94 <SPI_WaitOnFlagUntilTimeout>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c1a:	f043 0220 	orr.w	r2, r3, #32
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 f815 	bl	8006c54 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d001      	beq.n	8006c48 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 8006c48:	2300      	movs	r3, #0
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3730      	adds	r7, #48	@ 0x30
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop

08006c54 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f042 0210 	orr.w	r2, r2, #16
 8006c82:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6919      	ldr	r1, [r3, #16]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d90 <SPI_CloseTransfer+0x13c>)
 8006ca0:	400b      	ands	r3, r1
 8006ca2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006cb2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d014      	beq.n	8006cea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0320 	and.w	r3, r3, #32
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00f      	beq.n	8006cea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f042 0220 	orr.w	r2, r2, #32
 8006ce8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d014      	beq.n	8006d20 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00f      	beq.n	8006d20 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d06:	f043 0204 	orr.w	r2, r3, #4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d1e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00f      	beq.n	8006d4a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d30:	f043 0201 	orr.w	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	699a      	ldr	r2, [r3, #24]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d48:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00f      	beq.n	8006d74 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d5a:	f043 0208 	orr.w	r2, r3, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d72:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	fffffc90 	.word	0xfffffc90

08006d94 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4613      	mov	r3, r2
 8006da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006da4:	e010      	b.n	8006dc8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006da6:	f7f9 ff71 	bl	8000c8c <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d803      	bhi.n	8006dbe <SPI_WaitOnFlagUntilTimeout+0x2a>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dbc:	d102      	bne.n	8006dc4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e00f      	b.n	8006de8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d0df      	beq.n	8006da6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	3301      	adds	r3, #1
 8006e08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	3307      	adds	r3, #7
 8006e0e:	08db      	lsrs	r3, r3, #3
 8006e10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	e049      	b.n	8006ecc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d106      	bne.n	8006e52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7fa fb93 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2202      	movs	r2, #2
 8006e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	4619      	mov	r1, r3
 8006e64:	4610      	mov	r0, r2
 8006e66:	f000 f835 	bl	8006ed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a43      	ldr	r2, [pc, #268]	@ (8006ff4 <TIM_Base_SetConfig+0x120>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d013      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ef2:	d00f      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a40      	ldr	r2, [pc, #256]	@ (8006ff8 <TIM_Base_SetConfig+0x124>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00b      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a3f      	ldr	r2, [pc, #252]	@ (8006ffc <TIM_Base_SetConfig+0x128>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d007      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a3e      	ldr	r2, [pc, #248]	@ (8007000 <TIM_Base_SetConfig+0x12c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d003      	beq.n	8006f14 <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3d      	ldr	r2, [pc, #244]	@ (8007004 <TIM_Base_SetConfig+0x130>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d108      	bne.n	8006f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a32      	ldr	r2, [pc, #200]	@ (8006ff4 <TIM_Base_SetConfig+0x120>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d01f      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f34:	d01b      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a2f      	ldr	r2, [pc, #188]	@ (8006ff8 <TIM_Base_SetConfig+0x124>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d017      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2e      	ldr	r2, [pc, #184]	@ (8006ffc <TIM_Base_SetConfig+0x128>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d013      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2d      	ldr	r2, [pc, #180]	@ (8007000 <TIM_Base_SetConfig+0x12c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00f      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2c      	ldr	r2, [pc, #176]	@ (8007004 <TIM_Base_SetConfig+0x130>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00b      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2b      	ldr	r2, [pc, #172]	@ (8007008 <TIM_Base_SetConfig+0x134>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d007      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2a      	ldr	r2, [pc, #168]	@ (800700c <TIM_Base_SetConfig+0x138>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d003      	beq.n	8006f6e <TIM_Base_SetConfig+0x9a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a29      	ldr	r2, [pc, #164]	@ (8007010 <TIM_Base_SetConfig+0x13c>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d108      	bne.n	8006f80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689a      	ldr	r2, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a14      	ldr	r2, [pc, #80]	@ (8006ff4 <TIM_Base_SetConfig+0x120>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00f      	beq.n	8006fc6 <TIM_Base_SetConfig+0xf2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a16      	ldr	r2, [pc, #88]	@ (8007004 <TIM_Base_SetConfig+0x130>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d00b      	beq.n	8006fc6 <TIM_Base_SetConfig+0xf2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a15      	ldr	r2, [pc, #84]	@ (8007008 <TIM_Base_SetConfig+0x134>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d007      	beq.n	8006fc6 <TIM_Base_SetConfig+0xf2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a14      	ldr	r2, [pc, #80]	@ (800700c <TIM_Base_SetConfig+0x138>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_Base_SetConfig+0xf2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a13      	ldr	r2, [pc, #76]	@ (8007010 <TIM_Base_SetConfig+0x13c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d103      	bne.n	8006fce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	691a      	ldr	r2, [r3, #16]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f043 0204 	orr.w	r2, r3, #4
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]
}
 8006fe6:	bf00      	nop
 8006fe8:	3714      	adds	r7, #20
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40010000 	.word	0x40010000
 8006ff8:	40000400 	.word	0x40000400
 8006ffc:	40000800 	.word	0x40000800
 8007000:	40000c00 	.word	0x40000c00
 8007004:	40010400 	.word	0x40010400
 8007008:	40014000 	.word	0x40014000
 800700c:	40014400 	.word	0x40014400
 8007010:	40014800 	.word	0x40014800

08007014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e06d      	b.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a30      	ldr	r2, [pc, #192]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2f      	ldr	r2, [pc, #188]	@ (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a20      	ldr	r2, [pc, #128]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d022      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800709e:	d01d      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	@ (800711c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d018      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	@ (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00e      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a15      	ldr	r2, [pc, #84]	@ (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a15      	ldr	r2, [pc, #84]	@ (800712c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d10c      	bne.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40010000 	.word	0x40010000
 8007118:	40010400 	.word	0x40010400
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40001800 	.word	0x40001800
 800712c:	40014000 	.word	0x40014000

08007130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e042      	b.n	80071c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7fa fa31 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2224      	movs	r2, #36	@ 0x24
 800715e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 0201 	bic.w	r2, r2, #1
 8007170:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fe1e 	bl	8007dbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f8b3 	bl	80072ec <UART_SetConfig>
 8007186:	4603      	mov	r3, r0
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e01b      	b.n	80071c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800719e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0201 	orr.w	r2, r2, #1
 80071be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fe9d 	bl	8007f00 <UART_CheckIdleState>
 80071c6:	4603      	mov	r3, r0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	@ 0x28
 80071d4:	af02      	add	r7, sp, #8
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	603b      	str	r3, [r7, #0]
 80071dc:	4613      	mov	r3, r2
 80071de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	d17b      	bne.n	80072e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <HAL_UART_Transmit+0x26>
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e074      	b.n	80072e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2221      	movs	r2, #33	@ 0x21
 8007206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800720a:	f7f9 fd3f 	bl	8000c8c <HAL_GetTick>
 800720e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	88fa      	ldrh	r2, [r7, #6]
 8007214:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	88fa      	ldrh	r2, [r7, #6]
 800721c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007228:	d108      	bne.n	800723c <HAL_UART_Transmit+0x6c>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d104      	bne.n	800723c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e003      	b.n	8007244 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007244:	e030      	b.n	80072a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2200      	movs	r2, #0
 800724e:	2180      	movs	r1, #128	@ 0x80
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 feff 	bl	8008054 <UART_WaitOnFlagUntilTimeout>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2220      	movs	r2, #32
 8007260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e03d      	b.n	80072e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10b      	bne.n	8007286 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800727c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	3302      	adds	r3, #2
 8007282:	61bb      	str	r3, [r7, #24]
 8007284:	e007      	b.n	8007296 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	3301      	adds	r3, #1
 8007294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800729c:	b29b      	uxth	r3, r3
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1c8      	bne.n	8007246 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2200      	movs	r2, #0
 80072bc:	2140      	movs	r1, #64	@ 0x40
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fec8 	bl	8008054 <UART_WaitOnFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d005      	beq.n	80072d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e006      	b.n	80072e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	e000      	b.n	80072e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80072e2:	2302      	movs	r3, #2
  }
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3720      	adds	r7, #32
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072f0:	b092      	sub	sp, #72	@ 0x48
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	431a      	orrs	r2, r3
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	431a      	orrs	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	4313      	orrs	r3, r2
 8007312:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	4bbe      	ldr	r3, [pc, #760]	@ (8007614 <UART_SetConfig+0x328>)
 800731c:	4013      	ands	r3, r2
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007324:	430b      	orrs	r3, r1
 8007326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	699b      	ldr	r3, [r3, #24]
 8007342:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4ab3      	ldr	r2, [pc, #716]	@ (8007618 <UART_SetConfig+0x32c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d004      	beq.n	8007358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007354:	4313      	orrs	r3, r2
 8007356:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	4baf      	ldr	r3, [pc, #700]	@ (800761c <UART_SetConfig+0x330>)
 8007360:	4013      	ands	r3, r2
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007368:	430b      	orrs	r3, r1
 800736a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007372:	f023 010f 	bic.w	r1, r3, #15
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	430a      	orrs	r2, r1
 8007380:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4aa6      	ldr	r2, [pc, #664]	@ (8007620 <UART_SetConfig+0x334>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d177      	bne.n	800747c <UART_SetConfig+0x190>
 800738c:	4ba5      	ldr	r3, [pc, #660]	@ (8007624 <UART_SetConfig+0x338>)
 800738e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007394:	2b28      	cmp	r3, #40	@ 0x28
 8007396:	d86d      	bhi.n	8007474 <UART_SetConfig+0x188>
 8007398:	a201      	add	r2, pc, #4	@ (adr r2, 80073a0 <UART_SetConfig+0xb4>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	08007445 	.word	0x08007445
 80073a4:	08007475 	.word	0x08007475
 80073a8:	08007475 	.word	0x08007475
 80073ac:	08007475 	.word	0x08007475
 80073b0:	08007475 	.word	0x08007475
 80073b4:	08007475 	.word	0x08007475
 80073b8:	08007475 	.word	0x08007475
 80073bc:	08007475 	.word	0x08007475
 80073c0:	0800744d 	.word	0x0800744d
 80073c4:	08007475 	.word	0x08007475
 80073c8:	08007475 	.word	0x08007475
 80073cc:	08007475 	.word	0x08007475
 80073d0:	08007475 	.word	0x08007475
 80073d4:	08007475 	.word	0x08007475
 80073d8:	08007475 	.word	0x08007475
 80073dc:	08007475 	.word	0x08007475
 80073e0:	08007455 	.word	0x08007455
 80073e4:	08007475 	.word	0x08007475
 80073e8:	08007475 	.word	0x08007475
 80073ec:	08007475 	.word	0x08007475
 80073f0:	08007475 	.word	0x08007475
 80073f4:	08007475 	.word	0x08007475
 80073f8:	08007475 	.word	0x08007475
 80073fc:	08007475 	.word	0x08007475
 8007400:	0800745d 	.word	0x0800745d
 8007404:	08007475 	.word	0x08007475
 8007408:	08007475 	.word	0x08007475
 800740c:	08007475 	.word	0x08007475
 8007410:	08007475 	.word	0x08007475
 8007414:	08007475 	.word	0x08007475
 8007418:	08007475 	.word	0x08007475
 800741c:	08007475 	.word	0x08007475
 8007420:	08007465 	.word	0x08007465
 8007424:	08007475 	.word	0x08007475
 8007428:	08007475 	.word	0x08007475
 800742c:	08007475 	.word	0x08007475
 8007430:	08007475 	.word	0x08007475
 8007434:	08007475 	.word	0x08007475
 8007438:	08007475 	.word	0x08007475
 800743c:	08007475 	.word	0x08007475
 8007440:	0800746d 	.word	0x0800746d
 8007444:	2301      	movs	r3, #1
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e222      	b.n	8007892 <UART_SetConfig+0x5a6>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007452:	e21e      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745a:	e21a      	b.n	8007892 <UART_SetConfig+0x5a6>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007462:	e216      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007464:	2320      	movs	r3, #32
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746a:	e212      	b.n	8007892 <UART_SetConfig+0x5a6>
 800746c:	2340      	movs	r3, #64	@ 0x40
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007472:	e20e      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007474:	2380      	movs	r3, #128	@ 0x80
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747a:	e20a      	b.n	8007892 <UART_SetConfig+0x5a6>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a69      	ldr	r2, [pc, #420]	@ (8007628 <UART_SetConfig+0x33c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d130      	bne.n	80074e8 <UART_SetConfig+0x1fc>
 8007486:	4b67      	ldr	r3, [pc, #412]	@ (8007624 <UART_SetConfig+0x338>)
 8007488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	2b05      	cmp	r3, #5
 8007490:	d826      	bhi.n	80074e0 <UART_SetConfig+0x1f4>
 8007492:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <UART_SetConfig+0x1ac>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074b1 	.word	0x080074b1
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	080074c1 	.word	0x080074c1
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e1ec      	b.n	8007892 <UART_SetConfig+0x5a6>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e1e8      	b.n	8007892 <UART_SetConfig+0x5a6>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e1e4      	b.n	8007892 <UART_SetConfig+0x5a6>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e1e0      	b.n	8007892 <UART_SetConfig+0x5a6>
 80074d0:	2320      	movs	r3, #32
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e1dc      	b.n	8007892 <UART_SetConfig+0x5a6>
 80074d8:	2340      	movs	r3, #64	@ 0x40
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e1d8      	b.n	8007892 <UART_SetConfig+0x5a6>
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e1d4      	b.n	8007892 <UART_SetConfig+0x5a6>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a4f      	ldr	r2, [pc, #316]	@ (800762c <UART_SetConfig+0x340>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d130      	bne.n	8007554 <UART_SetConfig+0x268>
 80074f2:	4b4c      	ldr	r3, [pc, #304]	@ (8007624 <UART_SetConfig+0x338>)
 80074f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d826      	bhi.n	800754c <UART_SetConfig+0x260>
 80074fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <UART_SetConfig+0x218>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007525 	.word	0x08007525
 800750c:	0800752d 	.word	0x0800752d
 8007510:	08007535 	.word	0x08007535
 8007514:	0800753d 	.word	0x0800753d
 8007518:	08007545 	.word	0x08007545
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e1b6      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e1b2      	b.n	8007892 <UART_SetConfig+0x5a6>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e1ae      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e1aa      	b.n	8007892 <UART_SetConfig+0x5a6>
 800753c:	2320      	movs	r3, #32
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e1a6      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007544:	2340      	movs	r3, #64	@ 0x40
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e1a2      	b.n	8007892 <UART_SetConfig+0x5a6>
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e19e      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a35      	ldr	r2, [pc, #212]	@ (8007630 <UART_SetConfig+0x344>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d130      	bne.n	80075c0 <UART_SetConfig+0x2d4>
 800755e:	4b31      	ldr	r3, [pc, #196]	@ (8007624 <UART_SetConfig+0x338>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b05      	cmp	r3, #5
 8007568:	d826      	bhi.n	80075b8 <UART_SetConfig+0x2cc>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <UART_SetConfig+0x284>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007589 	.word	0x08007589
 8007574:	08007591 	.word	0x08007591
 8007578:	08007599 	.word	0x08007599
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075b1 	.word	0x080075b1
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e180      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e17c      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e178      	b.n	8007892 <UART_SetConfig+0x5a6>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e174      	b.n	8007892 <UART_SetConfig+0x5a6>
 80075a8:	2320      	movs	r3, #32
 80075aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ae:	e170      	b.n	8007892 <UART_SetConfig+0x5a6>
 80075b0:	2340      	movs	r3, #64	@ 0x40
 80075b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075b6:	e16c      	b.n	8007892 <UART_SetConfig+0x5a6>
 80075b8:	2380      	movs	r3, #128	@ 0x80
 80075ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075be:	e168      	b.n	8007892 <UART_SetConfig+0x5a6>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007634 <UART_SetConfig+0x348>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d142      	bne.n	8007650 <UART_SetConfig+0x364>
 80075ca:	4b16      	ldr	r3, [pc, #88]	@ (8007624 <UART_SetConfig+0x338>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	f003 0307 	and.w	r3, r3, #7
 80075d2:	2b05      	cmp	r3, #5
 80075d4:	d838      	bhi.n	8007648 <UART_SetConfig+0x35c>
 80075d6:	a201      	add	r2, pc, #4	@ (adr r2, 80075dc <UART_SetConfig+0x2f0>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	080075f5 	.word	0x080075f5
 80075e0:	080075fd 	.word	0x080075fd
 80075e4:	08007605 	.word	0x08007605
 80075e8:	0800760d 	.word	0x0800760d
 80075ec:	08007639 	.word	0x08007639
 80075f0:	08007641 	.word	0x08007641
 80075f4:	2300      	movs	r3, #0
 80075f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075fa:	e14a      	b.n	8007892 <UART_SetConfig+0x5a6>
 80075fc:	2304      	movs	r3, #4
 80075fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007602:	e146      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007604:	2308      	movs	r3, #8
 8007606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760a:	e142      	b.n	8007892 <UART_SetConfig+0x5a6>
 800760c:	2310      	movs	r3, #16
 800760e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007612:	e13e      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007614:	cfff69f3 	.word	0xcfff69f3
 8007618:	58000c00 	.word	0x58000c00
 800761c:	11fff4ff 	.word	0x11fff4ff
 8007620:	40011000 	.word	0x40011000
 8007624:	58024400 	.word	0x58024400
 8007628:	40004400 	.word	0x40004400
 800762c:	40004800 	.word	0x40004800
 8007630:	40004c00 	.word	0x40004c00
 8007634:	40005000 	.word	0x40005000
 8007638:	2320      	movs	r3, #32
 800763a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800763e:	e128      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007640:	2340      	movs	r3, #64	@ 0x40
 8007642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007646:	e124      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007648:	2380      	movs	r3, #128	@ 0x80
 800764a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800764e:	e120      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4acb      	ldr	r2, [pc, #812]	@ (8007984 <UART_SetConfig+0x698>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d176      	bne.n	8007748 <UART_SetConfig+0x45c>
 800765a:	4bcb      	ldr	r3, [pc, #812]	@ (8007988 <UART_SetConfig+0x69c>)
 800765c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800765e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007662:	2b28      	cmp	r3, #40	@ 0x28
 8007664:	d86c      	bhi.n	8007740 <UART_SetConfig+0x454>
 8007666:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <UART_SetConfig+0x380>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	08007711 	.word	0x08007711
 8007670:	08007741 	.word	0x08007741
 8007674:	08007741 	.word	0x08007741
 8007678:	08007741 	.word	0x08007741
 800767c:	08007741 	.word	0x08007741
 8007680:	08007741 	.word	0x08007741
 8007684:	08007741 	.word	0x08007741
 8007688:	08007741 	.word	0x08007741
 800768c:	08007719 	.word	0x08007719
 8007690:	08007741 	.word	0x08007741
 8007694:	08007741 	.word	0x08007741
 8007698:	08007741 	.word	0x08007741
 800769c:	08007741 	.word	0x08007741
 80076a0:	08007741 	.word	0x08007741
 80076a4:	08007741 	.word	0x08007741
 80076a8:	08007741 	.word	0x08007741
 80076ac:	08007721 	.word	0x08007721
 80076b0:	08007741 	.word	0x08007741
 80076b4:	08007741 	.word	0x08007741
 80076b8:	08007741 	.word	0x08007741
 80076bc:	08007741 	.word	0x08007741
 80076c0:	08007741 	.word	0x08007741
 80076c4:	08007741 	.word	0x08007741
 80076c8:	08007741 	.word	0x08007741
 80076cc:	08007729 	.word	0x08007729
 80076d0:	08007741 	.word	0x08007741
 80076d4:	08007741 	.word	0x08007741
 80076d8:	08007741 	.word	0x08007741
 80076dc:	08007741 	.word	0x08007741
 80076e0:	08007741 	.word	0x08007741
 80076e4:	08007741 	.word	0x08007741
 80076e8:	08007741 	.word	0x08007741
 80076ec:	08007731 	.word	0x08007731
 80076f0:	08007741 	.word	0x08007741
 80076f4:	08007741 	.word	0x08007741
 80076f8:	08007741 	.word	0x08007741
 80076fc:	08007741 	.word	0x08007741
 8007700:	08007741 	.word	0x08007741
 8007704:	08007741 	.word	0x08007741
 8007708:	08007741 	.word	0x08007741
 800770c:	08007739 	.word	0x08007739
 8007710:	2301      	movs	r3, #1
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e0bc      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007718:	2304      	movs	r3, #4
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e0b8      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007720:	2308      	movs	r3, #8
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e0b4      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007728:	2310      	movs	r3, #16
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e0b0      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007730:	2320      	movs	r3, #32
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e0ac      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007738:	2340      	movs	r3, #64	@ 0x40
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773e:	e0a8      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007740:	2380      	movs	r3, #128	@ 0x80
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007746:	e0a4      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a8f      	ldr	r2, [pc, #572]	@ (800798c <UART_SetConfig+0x6a0>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d130      	bne.n	80077b4 <UART_SetConfig+0x4c8>
 8007752:	4b8d      	ldr	r3, [pc, #564]	@ (8007988 <UART_SetConfig+0x69c>)
 8007754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	2b05      	cmp	r3, #5
 800775c:	d826      	bhi.n	80077ac <UART_SetConfig+0x4c0>
 800775e:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <UART_SetConfig+0x478>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	0800777d 	.word	0x0800777d
 8007768:	08007785 	.word	0x08007785
 800776c:	0800778d 	.word	0x0800778d
 8007770:	08007795 	.word	0x08007795
 8007774:	0800779d 	.word	0x0800779d
 8007778:	080077a5 	.word	0x080077a5
 800777c:	2300      	movs	r3, #0
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e086      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e082      	b.n	8007892 <UART_SetConfig+0x5a6>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e07e      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e07a      	b.n	8007892 <UART_SetConfig+0x5a6>
 800779c:	2320      	movs	r3, #32
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e076      	b.n	8007892 <UART_SetConfig+0x5a6>
 80077a4:	2340      	movs	r3, #64	@ 0x40
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e072      	b.n	8007892 <UART_SetConfig+0x5a6>
 80077ac:	2380      	movs	r3, #128	@ 0x80
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e06e      	b.n	8007892 <UART_SetConfig+0x5a6>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a75      	ldr	r2, [pc, #468]	@ (8007990 <UART_SetConfig+0x6a4>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d130      	bne.n	8007820 <UART_SetConfig+0x534>
 80077be:	4b72      	ldr	r3, [pc, #456]	@ (8007988 <UART_SetConfig+0x69c>)
 80077c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d826      	bhi.n	8007818 <UART_SetConfig+0x52c>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x4e4>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077e9 	.word	0x080077e9
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	080077f9 	.word	0x080077f9
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007809 	.word	0x08007809
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2300      	movs	r3, #0
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e050      	b.n	8007892 <UART_SetConfig+0x5a6>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e04c      	b.n	8007892 <UART_SetConfig+0x5a6>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e048      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e044      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007808:	2320      	movs	r3, #32
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e040      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007810:	2340      	movs	r3, #64	@ 0x40
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e03c      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007818:	2380      	movs	r3, #128	@ 0x80
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e038      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a5b      	ldr	r2, [pc, #364]	@ (8007994 <UART_SetConfig+0x6a8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d130      	bne.n	800788c <UART_SetConfig+0x5a0>
 800782a:	4b57      	ldr	r3, [pc, #348]	@ (8007988 <UART_SetConfig+0x69c>)
 800782c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	2b05      	cmp	r3, #5
 8007834:	d826      	bhi.n	8007884 <UART_SetConfig+0x598>
 8007836:	a201      	add	r2, pc, #4	@ (adr r2, 800783c <UART_SetConfig+0x550>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007855 	.word	0x08007855
 8007840:	0800785d 	.word	0x0800785d
 8007844:	08007865 	.word	0x08007865
 8007848:	0800786d 	.word	0x0800786d
 800784c:	08007875 	.word	0x08007875
 8007850:	0800787d 	.word	0x0800787d
 8007854:	2302      	movs	r3, #2
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e01a      	b.n	8007892 <UART_SetConfig+0x5a6>
 800785c:	2304      	movs	r3, #4
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e016      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007864:	2308      	movs	r3, #8
 8007866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800786a:	e012      	b.n	8007892 <UART_SetConfig+0x5a6>
 800786c:	2310      	movs	r3, #16
 800786e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007872:	e00e      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007874:	2320      	movs	r3, #32
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e00a      	b.n	8007892 <UART_SetConfig+0x5a6>
 800787c:	2340      	movs	r3, #64	@ 0x40
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e006      	b.n	8007892 <UART_SetConfig+0x5a6>
 8007884:	2380      	movs	r3, #128	@ 0x80
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e002      	b.n	8007892 <UART_SetConfig+0x5a6>
 800788c:	2380      	movs	r3, #128	@ 0x80
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a3f      	ldr	r2, [pc, #252]	@ (8007994 <UART_SetConfig+0x6a8>)
 8007898:	4293      	cmp	r3, r2
 800789a:	f040 80f8 	bne.w	8007a8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800789e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	dc46      	bgt.n	8007934 <UART_SetConfig+0x648>
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	f2c0 8082 	blt.w	80079b0 <UART_SetConfig+0x6c4>
 80078ac:	3b02      	subs	r3, #2
 80078ae:	2b1e      	cmp	r3, #30
 80078b0:	d87e      	bhi.n	80079b0 <UART_SetConfig+0x6c4>
 80078b2:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <UART_SetConfig+0x5cc>)
 80078b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b8:	0800793b 	.word	0x0800793b
 80078bc:	080079b1 	.word	0x080079b1
 80078c0:	08007943 	.word	0x08007943
 80078c4:	080079b1 	.word	0x080079b1
 80078c8:	080079b1 	.word	0x080079b1
 80078cc:	080079b1 	.word	0x080079b1
 80078d0:	08007953 	.word	0x08007953
 80078d4:	080079b1 	.word	0x080079b1
 80078d8:	080079b1 	.word	0x080079b1
 80078dc:	080079b1 	.word	0x080079b1
 80078e0:	080079b1 	.word	0x080079b1
 80078e4:	080079b1 	.word	0x080079b1
 80078e8:	080079b1 	.word	0x080079b1
 80078ec:	080079b1 	.word	0x080079b1
 80078f0:	08007963 	.word	0x08007963
 80078f4:	080079b1 	.word	0x080079b1
 80078f8:	080079b1 	.word	0x080079b1
 80078fc:	080079b1 	.word	0x080079b1
 8007900:	080079b1 	.word	0x080079b1
 8007904:	080079b1 	.word	0x080079b1
 8007908:	080079b1 	.word	0x080079b1
 800790c:	080079b1 	.word	0x080079b1
 8007910:	080079b1 	.word	0x080079b1
 8007914:	080079b1 	.word	0x080079b1
 8007918:	080079b1 	.word	0x080079b1
 800791c:	080079b1 	.word	0x080079b1
 8007920:	080079b1 	.word	0x080079b1
 8007924:	080079b1 	.word	0x080079b1
 8007928:	080079b1 	.word	0x080079b1
 800792c:	080079b1 	.word	0x080079b1
 8007930:	080079a3 	.word	0x080079a3
 8007934:	2b40      	cmp	r3, #64	@ 0x40
 8007936:	d037      	beq.n	80079a8 <UART_SetConfig+0x6bc>
 8007938:	e03a      	b.n	80079b0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800793a:	f7fe f90b 	bl	8005b54 <HAL_RCCEx_GetD3PCLK1Freq>
 800793e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007940:	e03c      	b.n	80079bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe f91a 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007950:	e034      	b.n	80079bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007952:	f107 0318 	add.w	r3, r7, #24
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fa66 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007960:	e02c      	b.n	80079bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007962:	4b09      	ldr	r3, [pc, #36]	@ (8007988 <UART_SetConfig+0x69c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800796e:	4b06      	ldr	r3, [pc, #24]	@ (8007988 <UART_SetConfig+0x69c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	08db      	lsrs	r3, r3, #3
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	4a07      	ldr	r2, [pc, #28]	@ (8007998 <UART_SetConfig+0x6ac>)
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007980:	e01c      	b.n	80079bc <UART_SetConfig+0x6d0>
 8007982:	bf00      	nop
 8007984:	40011400 	.word	0x40011400
 8007988:	58024400 	.word	0x58024400
 800798c:	40007800 	.word	0x40007800
 8007990:	40007c00 	.word	0x40007c00
 8007994:	58000c00 	.word	0x58000c00
 8007998:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800799c:	4b9d      	ldr	r3, [pc, #628]	@ (8007c14 <UART_SetConfig+0x928>)
 800799e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a0:	e00c      	b.n	80079bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079a2:	4b9d      	ldr	r3, [pc, #628]	@ (8007c18 <UART_SetConfig+0x92c>)
 80079a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079a6:	e009      	b.n	80079bc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80079ae:	e005      	b.n	80079bc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80079ba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 81de 	beq.w	8007d80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c8:	4a94      	ldr	r2, [pc, #592]	@ (8007c1c <UART_SetConfig+0x930>)
 80079ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079ce:	461a      	mov	r2, r3
 80079d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80079d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4613      	mov	r3, r2
 80079de:	005b      	lsls	r3, r3, #1
 80079e0:	4413      	add	r3, r2
 80079e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d305      	bcc.n	80079f4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d903      	bls.n	80079fc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079fa:	e1c1      	b.n	8007d80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079fe:	2200      	movs	r2, #0
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	60fa      	str	r2, [r7, #12]
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a08:	4a84      	ldr	r2, [pc, #528]	@ (8007c1c <UART_SetConfig+0x930>)
 8007a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2200      	movs	r2, #0
 8007a12:	603b      	str	r3, [r7, #0]
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a1e:	f7f8 fcb7 	bl	8000390 <__aeabi_uldivmod>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4610      	mov	r0, r2
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f04f 0200 	mov.w	r2, #0
 8007a2e:	f04f 0300 	mov.w	r3, #0
 8007a32:	020b      	lsls	r3, r1, #8
 8007a34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a38:	0202      	lsls	r2, r0, #8
 8007a3a:	6979      	ldr	r1, [r7, #20]
 8007a3c:	6849      	ldr	r1, [r1, #4]
 8007a3e:	0849      	lsrs	r1, r1, #1
 8007a40:	2000      	movs	r0, #0
 8007a42:	460c      	mov	r4, r1
 8007a44:	4605      	mov	r5, r0
 8007a46:	eb12 0804 	adds.w	r8, r2, r4
 8007a4a:	eb43 0905 	adc.w	r9, r3, r5
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	469a      	mov	sl, r3
 8007a56:	4693      	mov	fp, r2
 8007a58:	4652      	mov	r2, sl
 8007a5a:	465b      	mov	r3, fp
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	4649      	mov	r1, r9
 8007a60:	f7f8 fc96 	bl	8000390 <__aeabi_uldivmod>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	4613      	mov	r3, r2
 8007a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a72:	d308      	bcc.n	8007a86 <UART_SetConfig+0x79a>
 8007a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a7a:	d204      	bcs.n	8007a86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a82:	60da      	str	r2, [r3, #12]
 8007a84:	e17c      	b.n	8007d80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007a8c:	e178      	b.n	8007d80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	69db      	ldr	r3, [r3, #28]
 8007a92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a96:	f040 80c5 	bne.w	8007c24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007a9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	2b20      	cmp	r3, #32
 8007aa0:	dc48      	bgt.n	8007b34 <UART_SetConfig+0x848>
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	db7b      	blt.n	8007b9e <UART_SetConfig+0x8b2>
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d879      	bhi.n	8007b9e <UART_SetConfig+0x8b2>
 8007aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab0 <UART_SetConfig+0x7c4>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007b3b 	.word	0x08007b3b
 8007ab4:	08007b43 	.word	0x08007b43
 8007ab8:	08007b9f 	.word	0x08007b9f
 8007abc:	08007b9f 	.word	0x08007b9f
 8007ac0:	08007b4b 	.word	0x08007b4b
 8007ac4:	08007b9f 	.word	0x08007b9f
 8007ac8:	08007b9f 	.word	0x08007b9f
 8007acc:	08007b9f 	.word	0x08007b9f
 8007ad0:	08007b5b 	.word	0x08007b5b
 8007ad4:	08007b9f 	.word	0x08007b9f
 8007ad8:	08007b9f 	.word	0x08007b9f
 8007adc:	08007b9f 	.word	0x08007b9f
 8007ae0:	08007b9f 	.word	0x08007b9f
 8007ae4:	08007b9f 	.word	0x08007b9f
 8007ae8:	08007b9f 	.word	0x08007b9f
 8007aec:	08007b9f 	.word	0x08007b9f
 8007af0:	08007b6b 	.word	0x08007b6b
 8007af4:	08007b9f 	.word	0x08007b9f
 8007af8:	08007b9f 	.word	0x08007b9f
 8007afc:	08007b9f 	.word	0x08007b9f
 8007b00:	08007b9f 	.word	0x08007b9f
 8007b04:	08007b9f 	.word	0x08007b9f
 8007b08:	08007b9f 	.word	0x08007b9f
 8007b0c:	08007b9f 	.word	0x08007b9f
 8007b10:	08007b9f 	.word	0x08007b9f
 8007b14:	08007b9f 	.word	0x08007b9f
 8007b18:	08007b9f 	.word	0x08007b9f
 8007b1c:	08007b9f 	.word	0x08007b9f
 8007b20:	08007b9f 	.word	0x08007b9f
 8007b24:	08007b9f 	.word	0x08007b9f
 8007b28:	08007b9f 	.word	0x08007b9f
 8007b2c:	08007b9f 	.word	0x08007b9f
 8007b30:	08007b91 	.word	0x08007b91
 8007b34:	2b40      	cmp	r3, #64	@ 0x40
 8007b36:	d02e      	beq.n	8007b96 <UART_SetConfig+0x8aa>
 8007b38:	e031      	b.n	8007b9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b3a:	f7fc fdd5 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8007b3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b40:	e033      	b.n	8007baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b42:	f7fc fde7 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8007b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b48:	e02f      	b.n	8007baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe f816 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b58:	e027      	b.n	8007baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b5a:	f107 0318 	add.w	r3, r7, #24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe f962 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b68:	e01f      	b.n	8007baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c20 <UART_SetConfig+0x934>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d009      	beq.n	8007b8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b76:	4b2a      	ldr	r3, [pc, #168]	@ (8007c20 <UART_SetConfig+0x934>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	08db      	lsrs	r3, r3, #3
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	4a24      	ldr	r2, [pc, #144]	@ (8007c14 <UART_SetConfig+0x928>)
 8007b82:	fa22 f303 	lsr.w	r3, r2, r3
 8007b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b88:	e00f      	b.n	8007baa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b8a:	4b22      	ldr	r3, [pc, #136]	@ (8007c14 <UART_SetConfig+0x928>)
 8007b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b8e:	e00c      	b.n	8007baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b90:	4b21      	ldr	r3, [pc, #132]	@ (8007c18 <UART_SetConfig+0x92c>)
 8007b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b94:	e009      	b.n	8007baa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b9c:	e005      	b.n	8007baa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ba8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	f000 80e7 	beq.w	8007d80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb6:	4a19      	ldr	r2, [pc, #100]	@ (8007c1c <UART_SetConfig+0x930>)
 8007bb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bc4:	005a      	lsls	r2, r3, #1
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	085b      	lsrs	r3, r3, #1
 8007bcc:	441a      	add	r2, r3
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bda:	2b0f      	cmp	r3, #15
 8007bdc:	d916      	bls.n	8007c0c <UART_SetConfig+0x920>
 8007bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007be4:	d212      	bcs.n	8007c0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f023 030f 	bic.w	r3, r3, #15
 8007bee:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f003 0307 	and.w	r3, r3, #7
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007c08:	60da      	str	r2, [r3, #12]
 8007c0a:	e0b9      	b.n	8007d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007c12:	e0b5      	b.n	8007d80 <UART_SetConfig+0xa94>
 8007c14:	03d09000 	.word	0x03d09000
 8007c18:	003d0900 	.word	0x003d0900
 8007c1c:	0800e660 	.word	0x0800e660
 8007c20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c24:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	dc49      	bgt.n	8007cc0 <UART_SetConfig+0x9d4>
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	db7c      	blt.n	8007d2a <UART_SetConfig+0xa3e>
 8007c30:	2b20      	cmp	r3, #32
 8007c32:	d87a      	bhi.n	8007d2a <UART_SetConfig+0xa3e>
 8007c34:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <UART_SetConfig+0x950>)
 8007c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3a:	bf00      	nop
 8007c3c:	08007cc7 	.word	0x08007cc7
 8007c40:	08007ccf 	.word	0x08007ccf
 8007c44:	08007d2b 	.word	0x08007d2b
 8007c48:	08007d2b 	.word	0x08007d2b
 8007c4c:	08007cd7 	.word	0x08007cd7
 8007c50:	08007d2b 	.word	0x08007d2b
 8007c54:	08007d2b 	.word	0x08007d2b
 8007c58:	08007d2b 	.word	0x08007d2b
 8007c5c:	08007ce7 	.word	0x08007ce7
 8007c60:	08007d2b 	.word	0x08007d2b
 8007c64:	08007d2b 	.word	0x08007d2b
 8007c68:	08007d2b 	.word	0x08007d2b
 8007c6c:	08007d2b 	.word	0x08007d2b
 8007c70:	08007d2b 	.word	0x08007d2b
 8007c74:	08007d2b 	.word	0x08007d2b
 8007c78:	08007d2b 	.word	0x08007d2b
 8007c7c:	08007cf7 	.word	0x08007cf7
 8007c80:	08007d2b 	.word	0x08007d2b
 8007c84:	08007d2b 	.word	0x08007d2b
 8007c88:	08007d2b 	.word	0x08007d2b
 8007c8c:	08007d2b 	.word	0x08007d2b
 8007c90:	08007d2b 	.word	0x08007d2b
 8007c94:	08007d2b 	.word	0x08007d2b
 8007c98:	08007d2b 	.word	0x08007d2b
 8007c9c:	08007d2b 	.word	0x08007d2b
 8007ca0:	08007d2b 	.word	0x08007d2b
 8007ca4:	08007d2b 	.word	0x08007d2b
 8007ca8:	08007d2b 	.word	0x08007d2b
 8007cac:	08007d2b 	.word	0x08007d2b
 8007cb0:	08007d2b 	.word	0x08007d2b
 8007cb4:	08007d2b 	.word	0x08007d2b
 8007cb8:	08007d2b 	.word	0x08007d2b
 8007cbc:	08007d1d 	.word	0x08007d1d
 8007cc0:	2b40      	cmp	r3, #64	@ 0x40
 8007cc2:	d02e      	beq.n	8007d22 <UART_SetConfig+0xa36>
 8007cc4:	e031      	b.n	8007d2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cc6:	f7fc fd0f 	bl	80046e8 <HAL_RCC_GetPCLK1Freq>
 8007cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ccc:	e033      	b.n	8007d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cce:	f7fc fd21 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 8007cd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007cd4:	e02f      	b.n	8007d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fd ff50 	bl	8005b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ce4:	e027      	b.n	8007d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ce6:	f107 0318 	add.w	r3, r7, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe f89c 	bl	8005e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf4:	e01f      	b.n	8007d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8007dac <UART_SetConfig+0xac0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d02:	4b2a      	ldr	r3, [pc, #168]	@ (8007dac <UART_SetConfig+0xac0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	08db      	lsrs	r3, r3, #3
 8007d08:	f003 0303 	and.w	r3, r3, #3
 8007d0c:	4a28      	ldr	r2, [pc, #160]	@ (8007db0 <UART_SetConfig+0xac4>)
 8007d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d14:	e00f      	b.n	8007d36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007d16:	4b26      	ldr	r3, [pc, #152]	@ (8007db0 <UART_SetConfig+0xac4>)
 8007d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d1a:	e00c      	b.n	8007d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d1c:	4b25      	ldr	r3, [pc, #148]	@ (8007db4 <UART_SetConfig+0xac8>)
 8007d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d20:	e009      	b.n	8007d36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007d28:	e005      	b.n	8007d36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d34:	bf00      	nop
    }

    if (pclk != 0U)
 8007d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d021      	beq.n	8007d80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d40:	4a1d      	ldr	r2, [pc, #116]	@ (8007db8 <UART_SetConfig+0xacc>)
 8007d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d46:	461a      	mov	r2, r3
 8007d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	441a      	add	r2, r3
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d62:	2b0f      	cmp	r3, #15
 8007d64:	d909      	bls.n	8007d7a <UART_SetConfig+0xa8e>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d6c:	d205      	bcs.n	8007d7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	60da      	str	r2, [r3, #12]
 8007d78:	e002      	b.n	8007d80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2200      	movs	r2, #0
 8007d94:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d9c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3748      	adds	r7, #72	@ 0x48
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007daa:	bf00      	nop
 8007dac:	58024400 	.word	0x58024400
 8007db0:	03d09000 	.word	0x03d09000
 8007db4:	003d0900 	.word	0x003d0900
 8007db8:	0800e660 	.word	0x0800e660

08007dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	430a      	orrs	r2, r1
 8007e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0c:	f003 0302 	and.w	r3, r3, #2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00a      	beq.n	8007e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e50:	f003 0310 	and.w	r3, r3, #16
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e72:	f003 0320 	and.w	r3, r3, #32
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d01a      	beq.n	8007ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eba:	d10a      	bne.n	8007ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00a      	beq.n	8007ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	605a      	str	r2, [r3, #4]
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b098      	sub	sp, #96	@ 0x60
 8007f04:	af02      	add	r7, sp, #8
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f10:	f7f8 febc 	bl	8000c8c <HAL_GetTick>
 8007f14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0308 	and.w	r3, r3, #8
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d12f      	bne.n	8007f84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f88e 	bl	8008054 <UART_WaitOnFlagUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d022      	beq.n	8007f84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e6      	bne.n	8007f3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2220      	movs	r2, #32
 8007f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e063      	b.n	800804c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d149      	bne.n	8008026 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f857 	bl	8008054 <UART_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d03c      	beq.n	8008026 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd2:	e841 2300 	strex	r3, r2, [r1]
 8007fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1e6      	bne.n	8007fac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3308      	adds	r3, #8
 8007fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 0301 	bic.w	r3, r3, #1
 8007ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ffe:	61fa      	str	r2, [r7, #28]
 8008000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	69b9      	ldr	r1, [r7, #24]
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	617b      	str	r3, [r7, #20]
   return(result);
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e5      	bne.n	8007fde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e012      	b.n	800804c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3758      	adds	r7, #88	@ 0x58
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	603b      	str	r3, [r7, #0]
 8008060:	4613      	mov	r3, r2
 8008062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008064:	e04f      	b.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806c:	d04b      	beq.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800806e:	f7f8 fe0d 	bl	8000c8c <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	429a      	cmp	r2, r3
 800807c:	d302      	bcc.n	8008084 <UART_WaitOnFlagUntilTimeout+0x30>
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e04e      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d037      	beq.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b80      	cmp	r3, #128	@ 0x80
 800809a:	d034      	beq.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb2>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	2b40      	cmp	r3, #64	@ 0x40
 80080a0:	d031      	beq.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d110      	bne.n	80080d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2208      	movs	r2, #8
 80080b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 f839 	bl	8008130 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2208      	movs	r2, #8
 80080c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e029      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080e0:	d111      	bne.n	8008106 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f81f 	bl	8008130 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2220      	movs	r2, #32
 80080f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e00f      	b.n	8008126 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69da      	ldr	r2, [r3, #28]
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	4013      	ands	r3, r2
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	429a      	cmp	r2, r3
 8008114:	bf0c      	ite	eq
 8008116:	2301      	moveq	r3, #1
 8008118:	2300      	movne	r3, #0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	79fb      	ldrb	r3, [r7, #7]
 8008120:	429a      	cmp	r2, r3
 8008122:	d0a0      	beq.n	8008066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
	...

08008130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008130:	b480      	push	{r7}
 8008132:	b095      	sub	sp, #84	@ 0x54
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008148:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800814c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008156:	643b      	str	r3, [r7, #64]	@ 0x40
 8008158:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800815c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e6      	bne.n	8008138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	61fb      	str	r3, [r7, #28]
   return(result);
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	4b1e      	ldr	r3, [pc, #120]	@ (80081f8 <UART_EndRxTransfer+0xc8>)
 800817e:	4013      	ands	r3, r2
 8008180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800818a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d118      	bne.n	80081d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f023 0310 	bic.w	r3, r3, #16
 80081ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	461a      	mov	r2, r3
 80081c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	6979      	ldr	r1, [r7, #20]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	613b      	str	r3, [r7, #16]
   return(result);
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e6      	bne.n	80081a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2220      	movs	r2, #32
 80081dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80081ec:	bf00      	nop
 80081ee:	3754      	adds	r7, #84	@ 0x54
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	effffffe 	.word	0xeffffffe

080081fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800820a:	2b01      	cmp	r3, #1
 800820c:	d101      	bne.n	8008212 <HAL_UARTEx_DisableFifoMode+0x16>
 800820e:	2302      	movs	r3, #2
 8008210:	e027      	b.n	8008262 <HAL_UARTEx_DisableFifoMode+0x66>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2224      	movs	r2, #36	@ 0x24
 800821e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0201 	bic.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008240:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b084      	sub	sp, #16
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800827e:	2b01      	cmp	r3, #1
 8008280:	d101      	bne.n	8008286 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008282:	2302      	movs	r3, #2
 8008284:	e02d      	b.n	80082e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2224      	movs	r2, #36	@ 0x24
 8008292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0201 	bic.w	r2, r2, #1
 80082ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	430a      	orrs	r2, r1
 80082c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f850 	bl	8008368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082fe:	2302      	movs	r3, #2
 8008300:	e02d      	b.n	800835e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2224      	movs	r2, #36	@ 0x24
 800830e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f022 0201 	bic.w	r2, r2, #1
 8008328:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 f812 	bl	8008368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
	...

08008368 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008374:	2b00      	cmp	r3, #0
 8008376:	d108      	bne.n	800838a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008388:	e031      	b.n	80083ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800838a:	2310      	movs	r3, #16
 800838c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800838e:	2310      	movs	r3, #16
 8008390:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	0e5b      	lsrs	r3, r3, #25
 800839a:	b2db      	uxtb	r3, r3
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	0f5b      	lsrs	r3, r3, #29
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	f003 0307 	and.w	r3, r3, #7
 80083b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	7b3a      	ldrb	r2, [r7, #12]
 80083b6:	4911      	ldr	r1, [pc, #68]	@ (80083fc <UARTEx_SetNbDataToProcess+0x94>)
 80083b8:	5c8a      	ldrb	r2, [r1, r2]
 80083ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083be:	7b3a      	ldrb	r2, [r7, #12]
 80083c0:	490f      	ldr	r1, [pc, #60]	@ (8008400 <UARTEx_SetNbDataToProcess+0x98>)
 80083c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
 80083d2:	7b7a      	ldrb	r2, [r7, #13]
 80083d4:	4909      	ldr	r1, [pc, #36]	@ (80083fc <UARTEx_SetNbDataToProcess+0x94>)
 80083d6:	5c8a      	ldrb	r2, [r1, r2]
 80083d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083dc:	7b7a      	ldrb	r2, [r7, #13]
 80083de:	4908      	ldr	r1, [pc, #32]	@ (8008400 <UARTEx_SetNbDataToProcess+0x98>)
 80083e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80083ee:	bf00      	nop
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	0800e678 	.word	0x0800e678
 8008400:	0800e680 	.word	0x0800e680

08008404 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008404:	b084      	sub	sp, #16
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	f107 001c 	add.w	r0, r7, #28
 8008412:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008416:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800841a:	2b01      	cmp	r3, #1
 800841c:	d121      	bne.n	8008462 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008422:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68da      	ldr	r2, [r3, #12]
 800842e:	4b2c      	ldr	r3, [pc, #176]	@ (80084e0 <USB_CoreInit+0xdc>)
 8008430:	4013      	ands	r3, r2
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008442:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008446:	2b01      	cmp	r3, #1
 8008448:	d105      	bne.n	8008456 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f001 fafa 	bl	8009a50 <USB_CoreReset>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]
 8008460:	e01b      	b.n	800849a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f001 faee 	bl	8009a50 <USB_CoreReset>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008478:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800847c:	2b00      	cmp	r3, #0
 800847e:	d106      	bne.n	800848e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008484:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	639a      	str	r2, [r3, #56]	@ 0x38
 800848c:	e005      	b.n	800849a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008492:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800849a:	7fbb      	ldrb	r3, [r7, #30]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d116      	bne.n	80084ce <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <USB_CoreInit+0xe0>)
 80084b0:	4313      	orrs	r3, r2
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f043 0206 	orr.w	r2, r3, #6
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f043 0220 	orr.w	r2, r3, #32
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3710      	adds	r7, #16
 80084d4:	46bd      	mov	sp, r7
 80084d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80084da:	b004      	add	sp, #16
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	ffbdffbf 	.word	0xffbdffbf
 80084e4:	03ee0000 	.word	0x03ee0000

080084e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d165      	bne.n	80085c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4a41      	ldr	r2, [pc, #260]	@ (8008604 <USB_SetTurnaroundTime+0x11c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d906      	bls.n	8008512 <USB_SetTurnaroundTime+0x2a>
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4a40      	ldr	r2, [pc, #256]	@ (8008608 <USB_SetTurnaroundTime+0x120>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d202      	bcs.n	8008512 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800850c:	230f      	movs	r3, #15
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	e062      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	4a3c      	ldr	r2, [pc, #240]	@ (8008608 <USB_SetTurnaroundTime+0x120>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d306      	bcc.n	8008528 <USB_SetTurnaroundTime+0x40>
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	4a3b      	ldr	r2, [pc, #236]	@ (800860c <USB_SetTurnaroundTime+0x124>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d202      	bcs.n	8008528 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008522:	230e      	movs	r3, #14
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	e057      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	4a38      	ldr	r2, [pc, #224]	@ (800860c <USB_SetTurnaroundTime+0x124>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d306      	bcc.n	800853e <USB_SetTurnaroundTime+0x56>
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4a37      	ldr	r2, [pc, #220]	@ (8008610 <USB_SetTurnaroundTime+0x128>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d202      	bcs.n	800853e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008538:	230d      	movs	r3, #13
 800853a:	617b      	str	r3, [r7, #20]
 800853c:	e04c      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4a33      	ldr	r2, [pc, #204]	@ (8008610 <USB_SetTurnaroundTime+0x128>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d306      	bcc.n	8008554 <USB_SetTurnaroundTime+0x6c>
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	4a32      	ldr	r2, [pc, #200]	@ (8008614 <USB_SetTurnaroundTime+0x12c>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d802      	bhi.n	8008554 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800854e:	230c      	movs	r3, #12
 8008550:	617b      	str	r3, [r7, #20]
 8008552:	e041      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4a2f      	ldr	r2, [pc, #188]	@ (8008614 <USB_SetTurnaroundTime+0x12c>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d906      	bls.n	800856a <USB_SetTurnaroundTime+0x82>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	4a2e      	ldr	r2, [pc, #184]	@ (8008618 <USB_SetTurnaroundTime+0x130>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d802      	bhi.n	800856a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008564:	230b      	movs	r3, #11
 8008566:	617b      	str	r3, [r7, #20]
 8008568:	e036      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	4a2a      	ldr	r2, [pc, #168]	@ (8008618 <USB_SetTurnaroundTime+0x130>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d906      	bls.n	8008580 <USB_SetTurnaroundTime+0x98>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	4a29      	ldr	r2, [pc, #164]	@ (800861c <USB_SetTurnaroundTime+0x134>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d802      	bhi.n	8008580 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800857a:	230a      	movs	r3, #10
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	e02b      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4a26      	ldr	r2, [pc, #152]	@ (800861c <USB_SetTurnaroundTime+0x134>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d906      	bls.n	8008596 <USB_SetTurnaroundTime+0xae>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	4a25      	ldr	r2, [pc, #148]	@ (8008620 <USB_SetTurnaroundTime+0x138>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d202      	bcs.n	8008596 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008590:	2309      	movs	r3, #9
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	e020      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	4a21      	ldr	r2, [pc, #132]	@ (8008620 <USB_SetTurnaroundTime+0x138>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d306      	bcc.n	80085ac <USB_SetTurnaroundTime+0xc4>
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4a20      	ldr	r2, [pc, #128]	@ (8008624 <USB_SetTurnaroundTime+0x13c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d802      	bhi.n	80085ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085a6:	2308      	movs	r3, #8
 80085a8:	617b      	str	r3, [r7, #20]
 80085aa:	e015      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008624 <USB_SetTurnaroundTime+0x13c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d906      	bls.n	80085c2 <USB_SetTurnaroundTime+0xda>
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008628 <USB_SetTurnaroundTime+0x140>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d202      	bcs.n	80085c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085bc:	2307      	movs	r3, #7
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e00a      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085c2:	2306      	movs	r3, #6
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	e007      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d102      	bne.n	80085d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085ce:	2309      	movs	r3, #9
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e001      	b.n	80085d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80085d4:	2309      	movs	r3, #9
 80085d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68da      	ldr	r2, [r3, #12]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	029b      	lsls	r3, r3, #10
 80085ec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80085f0:	431a      	orrs	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	371c      	adds	r7, #28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	00d8acbf 	.word	0x00d8acbf
 8008608:	00e4e1c0 	.word	0x00e4e1c0
 800860c:	00f42400 	.word	0x00f42400
 8008610:	01067380 	.word	0x01067380
 8008614:	011a499f 	.word	0x011a499f
 8008618:	01312cff 	.word	0x01312cff
 800861c:	014ca43f 	.word	0x014ca43f
 8008620:	016e3600 	.word	0x016e3600
 8008624:	01a6ab1f 	.word	0x01a6ab1f
 8008628:	01e84800 	.word	0x01e84800

0800862c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f043 0201 	orr.w	r2, r3, #1
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f023 0201 	bic.w	r2, r3, #1
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d115      	bne.n	80086be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800869e:	200a      	movs	r0, #10
 80086a0:	f7f9 f9d0 	bl	8001a44 <HAL_Delay>
      ms += 10U;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	330a      	adds	r3, #10
 80086a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 f93f 	bl	800992e <USB_GetMode>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d01e      	beq.n	80086f4 <USB_SetCurrentMode+0x84>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80086ba:	d9f0      	bls.n	800869e <USB_SetCurrentMode+0x2e>
 80086bc:	e01a      	b.n	80086f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d115      	bne.n	80086f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086d0:	200a      	movs	r0, #10
 80086d2:	f7f9 f9b7 	bl	8001a44 <HAL_Delay>
      ms += 10U;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	330a      	adds	r3, #10
 80086da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 f926 	bl	800992e <USB_GetMode>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <USB_SetCurrentMode+0x84>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80086ec:	d9f0      	bls.n	80086d0 <USB_SetCurrentMode+0x60>
 80086ee:	e001      	b.n	80086f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e005      	b.n	8008700 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80086f8:	d101      	bne.n	80086fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008708:	b084      	sub	sp, #16
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008722:	2300      	movs	r3, #0
 8008724:	613b      	str	r3, [r7, #16]
 8008726:	e009      	b.n	800873c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	3340      	adds	r3, #64	@ 0x40
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	2200      	movs	r2, #0
 8008734:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	3301      	adds	r3, #1
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b0e      	cmp	r3, #14
 8008740:	d9f2      	bls.n	8008728 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008742:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008746:	2b00      	cmp	r3, #0
 8008748:	d11c      	bne.n	8008784 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008758:	f043 0302 	orr.w	r3, r3, #2
 800875c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008762:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	e005      	b.n	8008790 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008796:	461a      	mov	r2, r3
 8008798:	2300      	movs	r3, #0
 800879a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800879c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d10d      	bne.n	80087c0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087ac:	2100      	movs	r1, #0
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f968 	bl	8008a84 <USB_SetDevSpeed>
 80087b4:	e008      	b.n	80087c8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087b6:	2101      	movs	r1, #1
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 f963 	bl	8008a84 <USB_SetDevSpeed>
 80087be:	e003      	b.n	80087c8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087c0:	2103      	movs	r1, #3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f95e 	bl	8008a84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087c8:	2110      	movs	r1, #16
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f8fa 	bl	80089c4 <USB_FlushTxFifo>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d001      	beq.n	80087da <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f924 	bl	8008a28 <USB_FlushRxFifo>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f0:	461a      	mov	r2, r3
 80087f2:	2300      	movs	r3, #0
 80087f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087fc:	461a      	mov	r2, r3
 80087fe:	2300      	movs	r3, #0
 8008800:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008808:	461a      	mov	r2, r3
 800880a:	2300      	movs	r3, #0
 800880c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800880e:	2300      	movs	r3, #0
 8008810:	613b      	str	r3, [r7, #16]
 8008812:	e043      	b.n	800889c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008826:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800882a:	d118      	bne.n	800885e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883e:	461a      	mov	r2, r3
 8008840:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	e013      	b.n	8008870 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008854:	461a      	mov	r2, r3
 8008856:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	e008      	b.n	8008870 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886a:	461a      	mov	r2, r3
 800886c:	2300      	movs	r3, #0
 800886e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887c:	461a      	mov	r2, r3
 800887e:	2300      	movs	r3, #0
 8008880:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	015a      	lsls	r2, r3, #5
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	4413      	add	r3, r2
 800888a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800888e:	461a      	mov	r2, r3
 8008890:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008894:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	3301      	adds	r3, #1
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088a0:	461a      	mov	r2, r3
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d3b5      	bcc.n	8008814 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088a8:	2300      	movs	r3, #0
 80088aa:	613b      	str	r3, [r7, #16]
 80088ac:	e043      	b.n	8008936 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088c4:	d118      	bne.n	80088f8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d8:	461a      	mov	r2, r3
 80088da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	e013      	b.n	800890a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ee:	461a      	mov	r2, r3
 80088f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80088f4:	6013      	str	r3, [r2, #0]
 80088f6:	e008      	b.n	800890a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008904:	461a      	mov	r2, r3
 8008906:	2300      	movs	r3, #0
 8008908:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	015a      	lsls	r2, r3, #5
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	4413      	add	r3, r2
 8008912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008916:	461a      	mov	r2, r3
 8008918:	2300      	movs	r3, #0
 800891a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008928:	461a      	mov	r2, r3
 800892a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800892e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	3301      	adds	r3, #1
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800893a:	461a      	mov	r2, r3
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	4293      	cmp	r3, r2
 8008940:	d3b5      	bcc.n	80088ae <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008954:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008962:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008964:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008968:	2b00      	cmp	r3, #0
 800896a:	d105      	bne.n	8008978 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	f043 0210 	orr.w	r2, r3, #16
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699a      	ldr	r2, [r3, #24]
 800897c:	4b0f      	ldr	r3, [pc, #60]	@ (80089bc <USB_DevInit+0x2b4>)
 800897e:	4313      	orrs	r3, r2
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008984:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008988:	2b00      	cmp	r3, #0
 800898a:	d005      	beq.n	8008998 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	f043 0208 	orr.w	r2, r3, #8
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008998:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800899c:	2b01      	cmp	r3, #1
 800899e:	d105      	bne.n	80089ac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	4b06      	ldr	r3, [pc, #24]	@ (80089c0 <USB_DevInit+0x2b8>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089b8:	b004      	add	sp, #16
 80089ba:	4770      	bx	lr
 80089bc:	803c3800 	.word	0x803c3800
 80089c0:	40000004 	.word	0x40000004

080089c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3301      	adds	r3, #1
 80089d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089de:	d901      	bls.n	80089e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e01b      	b.n	8008a1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	daf2      	bge.n	80089d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	019b      	lsls	r3, r3, #6
 80089f4:	f043 0220 	orr.w	r2, r3, #32
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3301      	adds	r3, #1
 8008a00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a08:	d901      	bls.n	8008a0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e006      	b.n	8008a1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b20      	cmp	r3, #32
 8008a18:	d0f0      	beq.n	80089fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a40:	d901      	bls.n	8008a46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e018      	b.n	8008a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	daf2      	bge.n	8008a34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2210      	movs	r2, #16
 8008a56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a64:	d901      	bls.n	8008a6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e006      	b.n	8008a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	f003 0310 	and.w	r3, r3, #16
 8008a72:	2b10      	cmp	r3, #16
 8008a74:	d0f0      	beq.n	8008a58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b087      	sub	sp, #28
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 0306 	and.w	r3, r3, #6
 8008ace:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d102      	bne.n	8008adc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	75fb      	strb	r3, [r7, #23]
 8008ada:	e00a      	b.n	8008af2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d002      	beq.n	8008ae8 <USB_GetDevSpeed+0x32>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2b06      	cmp	r3, #6
 8008ae6:	d102      	bne.n	8008aee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	75fb      	strb	r3, [r7, #23]
 8008aec:	e001      	b.n	8008af2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008aee:	230f      	movs	r3, #15
 8008af0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	785b      	ldrb	r3, [r3, #1]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d139      	bne.n	8008b90 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b22:	69da      	ldr	r2, [r3, #28]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	f003 030f 	and.w	r3, r3, #15
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d153      	bne.n	8008bfc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	791b      	ldrb	r3, [r3, #4]
 8008b6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	059b      	lsls	r3, r3, #22
 8008b76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	0159      	lsls	r1, r3, #5
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	440b      	add	r3, r1
 8008b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b86:	4619      	mov	r1, r3
 8008b88:	4b20      	ldr	r3, [pc, #128]	@ (8008c0c <USB_ActivateEndpoint+0x10c>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	600b      	str	r3, [r1, #0]
 8008b8e:	e035      	b.n	8008bfc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b96:	69da      	ldr	r2, [r3, #28]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	f003 030f 	and.w	r3, r3, #15
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba6:	041b      	lsls	r3, r3, #16
 8008ba8:	68f9      	ldr	r1, [r7, #12]
 8008baa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d119      	bne.n	8008bfc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	791b      	ldrb	r3, [r3, #4]
 8008be2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008be4:	430b      	orrs	r3, r1
 8008be6:	431a      	orrs	r2, r3
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	0159      	lsls	r1, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	440b      	add	r3, r1
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <USB_ActivateEndpoint+0x10c>)
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	10008000 	.word	0x10008000

08008c10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d161      	bne.n	8008cf0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c42:	d11f      	bne.n	8008c84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	0151      	lsls	r1, r2, #5
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	440a      	add	r2, r1
 8008c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	2101      	movs	r1, #1
 8008c96:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	43db      	mvns	r3, r3
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cae:	69da      	ldr	r2, [r3, #28]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	f003 030f 	and.w	r3, r3, #15
 8008cb8:	2101      	movs	r1, #1
 8008cba:	fa01 f303 	lsl.w	r3, r1, r3
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cc8:	4013      	ands	r3, r2
 8008cca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	0159      	lsls	r1, r3, #5
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	440b      	add	r3, r1
 8008ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4b35      	ldr	r3, [pc, #212]	@ (8008dc0 <USB_DeactivateEndpoint+0x1b0>)
 8008cea:	4013      	ands	r3, r2
 8008cec:	600b      	str	r3, [r1, #0]
 8008cee:	e060      	b.n	8008db2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d06:	d11f      	bne.n	8008d48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	0151      	lsls	r1, r2, #5
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	440a      	add	r2, r1
 8008d1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	015a      	lsls	r2, r3, #5
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	0151      	lsls	r1, r2, #5
 8008d3a:	68fa      	ldr	r2, [r7, #12]
 8008d3c:	440a      	add	r2, r1
 8008d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f003 030f 	and.w	r3, r3, #15
 8008d58:	2101      	movs	r1, #1
 8008d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5e:	041b      	lsls	r3, r3, #16
 8008d60:	43db      	mvns	r3, r3
 8008d62:	68f9      	ldr	r1, [r7, #12]
 8008d64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d68:	4013      	ands	r3, r2
 8008d6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d72:	69da      	ldr	r2, [r3, #28]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	f003 030f 	and.w	r3, r3, #15
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d82:	041b      	lsls	r3, r3, #16
 8008d84:	43db      	mvns	r3, r3
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	0159      	lsls	r1, r3, #5
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	440b      	add	r3, r1
 8008da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008daa:	4619      	mov	r1, r3
 8008dac:	4b05      	ldr	r3, [pc, #20]	@ (8008dc4 <USB_DeactivateEndpoint+0x1b4>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr
 8008dc0:	ec337800 	.word	0xec337800
 8008dc4:	eff37800 	.word	0xeff37800

08008dc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08a      	sub	sp, #40	@ 0x28
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	f040 8185 	bne.w	80090f4 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d132      	bne.n	8008e58 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dfe:	691a      	ldr	r2, [r3, #16]
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	0159      	lsls	r1, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	440b      	add	r3, r1
 8008e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4ba7      	ldr	r3, [pc, #668]	@ (80090ac <USB_EPStartXfer+0x2e4>)
 8008e10:	4013      	ands	r3, r2
 8008e12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	015a      	lsls	r2, r3, #5
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	4413      	add	r3, r2
 8008e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	0151      	lsls	r1, r2, #5
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	440a      	add	r2, r1
 8008e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e40:	691a      	ldr	r2, [r3, #16]
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	0159      	lsls	r1, r3, #5
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4b97      	ldr	r3, [pc, #604]	@ (80090b0 <USB_EPStartXfer+0x2e8>)
 8008e52:	4013      	ands	r3, r2
 8008e54:	610b      	str	r3, [r1, #16]
 8008e56:	e097      	b.n	8008f88 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	015a      	lsls	r2, r3, #5
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	4413      	add	r3, r2
 8008e60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e64:	691a      	ldr	r2, [r3, #16]
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	0159      	lsls	r1, r3, #5
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e72:	4619      	mov	r1, r3
 8008e74:	4b8e      	ldr	r3, [pc, #568]	@ (80090b0 <USB_EPStartXfer+0x2e8>)
 8008e76:	4013      	ands	r3, r2
 8008e78:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e86:	691a      	ldr	r2, [r3, #16]
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	0159      	lsls	r1, r3, #5
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	440b      	add	r3, r1
 8008e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e94:	4619      	mov	r1, r3
 8008e96:	4b85      	ldr	r3, [pc, #532]	@ (80090ac <USB_EPStartXfer+0x2e4>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8008e9c:	69bb      	ldr	r3, [r7, #24]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d11a      	bne.n	8008ed8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d903      	bls.n	8008eb6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	689a      	ldr	r2, [r3, #8]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	69ba      	ldr	r2, [r7, #24]
 8008ec6:	0151      	lsls	r1, r2, #5
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	440a      	add	r2, r1
 8008ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ed0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ed4:	6113      	str	r3, [r2, #16]
 8008ed6:	e044      	b.n	8008f62 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	1e5a      	subs	r2, r3, #1
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eec:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	8afb      	ldrh	r3, [r7, #22]
 8008efe:	04d9      	lsls	r1, r3, #19
 8008f00:	4b6c      	ldr	r3, [pc, #432]	@ (80090b4 <USB_EPStartXfer+0x2ec>)
 8008f02:	400b      	ands	r3, r1
 8008f04:	69b9      	ldr	r1, [r7, #24]
 8008f06:	0148      	lsls	r0, r1, #5
 8008f08:	69f9      	ldr	r1, [r7, #28]
 8008f0a:	4401      	add	r1, r0
 8008f0c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f10:	4313      	orrs	r3, r2
 8008f12:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	791b      	ldrb	r3, [r3, #4]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d122      	bne.n	8008f62 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	69fa      	ldr	r2, [r7, #28]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f36:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008f3a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f48:	691a      	ldr	r2, [r3, #16]
 8008f4a:	8afb      	ldrh	r3, [r7, #22]
 8008f4c:	075b      	lsls	r3, r3, #29
 8008f4e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008f52:	69b9      	ldr	r1, [r7, #24]
 8008f54:	0148      	lsls	r0, r1, #5
 8008f56:	69f9      	ldr	r1, [r7, #28]
 8008f58:	4401      	add	r1, r0
 8008f5a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6e:	691a      	ldr	r2, [r3, #16]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f78:	69b9      	ldr	r1, [r7, #24]
 8008f7a:	0148      	lsls	r0, r1, #5
 8008f7c:	69f9      	ldr	r1, [r7, #28]
 8008f7e:	4401      	add	r1, r0
 8008f80:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f84:	4313      	orrs	r3, r2
 8008f86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f88:	79fb      	ldrb	r3, [r7, #7]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d14b      	bne.n	8009026 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d009      	beq.n	8008faa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d128      	bne.n	8009004 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d110      	bne.n	8008fe4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69ba      	ldr	r2, [r7, #24]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fdc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	e00f      	b.n	8009004 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	69ba      	ldr	r2, [r7, #24]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009002:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800901e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	e169      	b.n	80092fa <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69ba      	ldr	r2, [r7, #24]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	69fa      	ldr	r2, [r7, #28]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009040:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009044:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	791b      	ldrb	r3, [r3, #4]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d015      	beq.n	800907a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	2b00      	cmp	r3, #0
 8009054:	f000 8151 	beq.w	80092fa <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800905e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	2101      	movs	r1, #1
 800906a:	fa01 f303 	lsl.w	r3, r1, r3
 800906e:	69f9      	ldr	r1, [r7, #28]
 8009070:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009074:	4313      	orrs	r3, r2
 8009076:	634b      	str	r3, [r1, #52]	@ 0x34
 8009078:	e13f      	b.n	80092fa <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009086:	2b00      	cmp	r3, #0
 8009088:	d116      	bne.n	80090b8 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69ba      	ldr	r2, [r7, #24]
 800909a:	0151      	lsls	r1, r2, #5
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	440a      	add	r2, r1
 80090a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	e015      	b.n	80090d8 <USB_EPStartXfer+0x310>
 80090ac:	e007ffff 	.word	0xe007ffff
 80090b0:	fff80000 	.word	0xfff80000
 80090b4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69fa      	ldr	r2, [r7, #28]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	68d9      	ldr	r1, [r3, #12]
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	781a      	ldrb	r2, [r3, #0]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	b298      	uxth	r0, r3
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	4603      	mov	r3, r0
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f000 f9b9 	bl	8009464 <USB_WritePacket>
 80090f2:	e102      	b.n	80092fa <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009100:	691a      	ldr	r2, [r3, #16]
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	0159      	lsls	r1, r3, #5
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	440b      	add	r3, r1
 800910a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800910e:	4619      	mov	r1, r3
 8009110:	4b7c      	ldr	r3, [pc, #496]	@ (8009304 <USB_EPStartXfer+0x53c>)
 8009112:	4013      	ands	r3, r2
 8009114:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009122:	691a      	ldr	r2, [r3, #16]
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	0159      	lsls	r1, r3, #5
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	440b      	add	r3, r1
 800912c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009130:	4619      	mov	r1, r3
 8009132:	4b75      	ldr	r3, [pc, #468]	@ (8009308 <USB_EPStartXfer+0x540>)
 8009134:	4013      	ands	r3, r2
 8009136:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d12f      	bne.n	800919e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d003      	beq.n	800914e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	689a      	ldr	r2, [r3, #8]
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	689a      	ldr	r2, [r3, #8]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	4413      	add	r3, r2
 800915e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009162:	691a      	ldr	r2, [r3, #16]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800916c:	69b9      	ldr	r1, [r7, #24]
 800916e:	0148      	lsls	r0, r1, #5
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	4401      	add	r1, r0
 8009174:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009178:	4313      	orrs	r3, r2
 800917a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	015a      	lsls	r2, r3, #5
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	4413      	add	r3, r2
 8009184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	0151      	lsls	r1, r2, #5
 800918e:	69fa      	ldr	r2, [r7, #28]
 8009190:	440a      	add	r2, r1
 8009192:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009196:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800919a:	6113      	str	r3, [r2, #16]
 800919c:	e05f      	b.n	800925e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d123      	bne.n	80091ee <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b2:	691a      	ldr	r2, [r3, #16]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091bc:	69b9      	ldr	r1, [r7, #24]
 80091be:	0148      	lsls	r0, r1, #5
 80091c0:	69f9      	ldr	r1, [r7, #28]
 80091c2:	4401      	add	r1, r0
 80091c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091c8:	4313      	orrs	r3, r2
 80091ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	0151      	lsls	r1, r2, #5
 80091de:	69fa      	ldr	r2, [r7, #28]
 80091e0:	440a      	add	r2, r1
 80091e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091ea:	6113      	str	r3, [r2, #16]
 80091ec:	e037      	b.n	800925e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	4413      	add	r3, r2
 80091f8:	1e5a      	subs	r2, r3, #1
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009202:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	8afa      	ldrh	r2, [r7, #22]
 800920a:	fb03 f202 	mul.w	r2, r3, r2
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	8afb      	ldrh	r3, [r7, #22]
 8009222:	04d9      	lsls	r1, r3, #19
 8009224:	4b39      	ldr	r3, [pc, #228]	@ (800930c <USB_EPStartXfer+0x544>)
 8009226:	400b      	ands	r3, r1
 8009228:	69b9      	ldr	r1, [r7, #24]
 800922a:	0148      	lsls	r0, r1, #5
 800922c:	69f9      	ldr	r1, [r7, #28]
 800922e:	4401      	add	r1, r0
 8009230:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009234:	4313      	orrs	r3, r2
 8009236:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009244:	691a      	ldr	r2, [r3, #16]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800924e:	69b9      	ldr	r1, [r7, #24]
 8009250:	0148      	lsls	r0, r1, #5
 8009252:	69f9      	ldr	r1, [r7, #28]
 8009254:	4401      	add	r1, r0
 8009256:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800925a:	4313      	orrs	r3, r2
 800925c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d10d      	bne.n	8009280 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d009      	beq.n	8009280 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	68d9      	ldr	r1, [r3, #12]
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927c:	460a      	mov	r2, r1
 800927e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	791b      	ldrb	r3, [r3, #4]
 8009284:	2b01      	cmp	r3, #1
 8009286:	d128      	bne.n	80092da <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009294:	2b00      	cmp	r3, #0
 8009296:	d110      	bne.n	80092ba <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	69ba      	ldr	r2, [r7, #24]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e00f      	b.n	80092da <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80092ba:	69bb      	ldr	r3, [r7, #24]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69ba      	ldr	r2, [r7, #24]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	69fa      	ldr	r2, [r7, #28]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	0151      	lsls	r1, r2, #5
 80092ec:	69fa      	ldr	r2, [r7, #28]
 80092ee:	440a      	add	r2, r1
 80092f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80092f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3720      	adds	r7, #32
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	fff80000 	.word	0xfff80000
 8009308:	e007ffff 	.word	0xe007ffff
 800930c:	1ff80000 	.word	0x1ff80000

08009310 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	785b      	ldrb	r3, [r3, #1]
 800932a:	2b01      	cmp	r3, #1
 800932c:	d14a      	bne.n	80093c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009342:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009346:	f040 8086 	bne.w	8009456 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	7812      	ldrb	r2, [r2, #0]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009368:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800936c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	7812      	ldrb	r2, [r2, #0]
 8009382:	0151      	lsls	r1, r2, #5
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	440a      	add	r2, r1
 8009388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800938c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009390:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800939e:	4293      	cmp	r3, r2
 80093a0:	d902      	bls.n	80093a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	75fb      	strb	r3, [r7, #23]
          break;
 80093a6:	e056      	b.n	8009456 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093c0:	d0e7      	beq.n	8009392 <USB_EPStopXfer+0x82>
 80093c2:	e048      	b.n	8009456 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093dc:	d13b      	bne.n	8009456 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009400:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	7812      	ldrb	r2, [r2, #0]
 8009416:	0151      	lsls	r1, r2, #5
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	440a      	add	r2, r1
 800941c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009420:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009424:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3301      	adds	r3, #1
 800942a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009432:	4293      	cmp	r3, r2
 8009434:	d902      	bls.n	800943c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	75fb      	strb	r3, [r7, #23]
          break;
 800943a:	e00c      	b.n	8009456 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009450:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009454:	d0e7      	beq.n	8009426 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009456:	7dfb      	ldrb	r3, [r7, #23]
}
 8009458:	4618      	mov	r0, r3
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009464:	b480      	push	{r7}
 8009466:	b089      	sub	sp, #36	@ 0x24
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	4611      	mov	r1, r2
 8009470:	461a      	mov	r2, r3
 8009472:	460b      	mov	r3, r1
 8009474:	71fb      	strb	r3, [r7, #7]
 8009476:	4613      	mov	r3, r2
 8009478:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009482:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d123      	bne.n	80094d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800948a:	88bb      	ldrh	r3, [r7, #4]
 800948c:	3303      	adds	r3, #3
 800948e:	089b      	lsrs	r3, r3, #2
 8009490:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009492:	2300      	movs	r3, #0
 8009494:	61bb      	str	r3, [r7, #24]
 8009496:	e018      	b.n	80094ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	031a      	lsls	r2, r3, #12
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094a4:	461a      	mov	r2, r3
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	3301      	adds	r3, #1
 80094b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	3301      	adds	r3, #1
 80094b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	3301      	adds	r3, #1
 80094bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	3301      	adds	r3, #1
 80094c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	3301      	adds	r3, #1
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d3e2      	bcc.n	8009498 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3724      	adds	r7, #36	@ 0x24
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b08b      	sub	sp, #44	@ 0x2c
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094f6:	88fb      	ldrh	r3, [r7, #6]
 80094f8:	089b      	lsrs	r3, r3, #2
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80094fe:	88fb      	ldrh	r3, [r7, #6]
 8009500:	f003 0303 	and.w	r3, r3, #3
 8009504:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009506:	2300      	movs	r3, #0
 8009508:	623b      	str	r3, [r7, #32]
 800950a:	e014      	b.n	8009536 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009516:	601a      	str	r2, [r3, #0]
    pDest++;
 8009518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951a:	3301      	adds	r3, #1
 800951c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800951e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009520:	3301      	adds	r3, #1
 8009522:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	3301      	adds	r3, #1
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	3301      	adds	r3, #1
 800952e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	3301      	adds	r3, #1
 8009534:	623b      	str	r3, [r7, #32]
 8009536:	6a3a      	ldr	r2, [r7, #32]
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	429a      	cmp	r2, r3
 800953c:	d3e6      	bcc.n	800950c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800953e:	8bfb      	ldrh	r3, [r7, #30]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d01e      	beq.n	8009582 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800954e:	461a      	mov	r2, r3
 8009550:	f107 0310 	add.w	r3, r7, #16
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	fa22 f303 	lsr.w	r3, r2, r3
 8009564:	b2da      	uxtb	r2, r3
 8009566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009568:	701a      	strb	r2, [r3, #0]
      i++;
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	3301      	adds	r3, #1
 800956e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	3301      	adds	r3, #1
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009576:	8bfb      	ldrh	r3, [r7, #30]
 8009578:	3b01      	subs	r3, #1
 800957a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800957c:	8bfb      	ldrh	r3, [r7, #30]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1ea      	bne.n	8009558 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009584:	4618      	mov	r0, r3
 8009586:	372c      	adds	r7, #44	@ 0x2c
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d12c      	bne.n	8009606 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	015a      	lsls	r2, r3, #5
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	4413      	add	r3, r2
 80095b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	db12      	blt.n	80095e4 <USB_EPSetStall+0x54>
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00f      	beq.n	80095e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	0151      	lsls	r1, r2, #5
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	440a      	add	r2, r1
 80095fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	e02b      	b.n	800965e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	015a      	lsls	r2, r3, #5
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	4413      	add	r3, r2
 800960e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	db12      	blt.n	800963e <USB_EPSetStall+0xae>
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00f      	beq.n	800963e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	015a      	lsls	r2, r3, #5
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	4413      	add	r3, r2
 8009626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	68ba      	ldr	r2, [r7, #8]
 800962e:	0151      	lsls	r1, r2, #5
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	440a      	add	r2, r1
 8009634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009638:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800963c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	0151      	lsls	r1, r2, #5
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	440a      	add	r2, r1
 8009654:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009658:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800965c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3714      	adds	r7, #20
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d128      	bne.n	80096da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	440a      	add	r2, r1
 800969e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	791b      	ldrb	r3, [r3, #4]
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d003      	beq.n	80096b8 <USB_EPClearStall+0x4c>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	791b      	ldrb	r3, [r3, #4]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d138      	bne.n	800972a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	e027      	b.n	800972a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	015a      	lsls	r2, r3, #5
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	0151      	lsls	r1, r2, #5
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	440a      	add	r2, r1
 80096f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	791b      	ldrb	r3, [r3, #4]
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d003      	beq.n	800970a <USB_EPClearStall+0x9e>
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	791b      	ldrb	r3, [r3, #4]
 8009706:	2b02      	cmp	r3, #2
 8009708:	d10f      	bne.n	800972a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	015a      	lsls	r2, r3, #5
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4413      	add	r3, r2
 8009712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	0151      	lsls	r1, r2, #5
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	440a      	add	r2, r1
 8009720:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009728:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009756:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800975a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800976c:	68f9      	ldr	r1, [r7, #12]
 800976e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009772:	4313      	orrs	r3, r2
 8009774:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3714      	adds	r7, #20
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800979e:	f023 0303 	bic.w	r3, r3, #3
 80097a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097b2:	f023 0302 	bic.w	r3, r3, #2
 80097b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b085      	sub	sp, #20
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097e0:	f023 0303 	bic.w	r3, r3, #3
 80097e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097f4:	f043 0302 	orr.w	r3, r3, #2
 80097f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	699b      	ldr	r3, [r3, #24]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4013      	ands	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009820:	68fb      	ldr	r3, [r7, #12]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3714      	adds	r7, #20
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800982e:	b480      	push	{r7}
 8009830:	b085      	sub	sp, #20
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	4013      	ands	r3, r2
 8009850:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	0c1b      	lsrs	r3, r3, #16
}
 8009856:	4618      	mov	r0, r3
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009862:	b480      	push	{r7}
 8009864:	b085      	sub	sp, #20
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800987e:	69db      	ldr	r3, [r3, #28]
 8009880:	68ba      	ldr	r2, [r7, #8]
 8009882:	4013      	ands	r3, r2
 8009884:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	b29b      	uxth	r3, r3
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009896:	b480      	push	{r7}
 8009898:	b085      	sub	sp, #20
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098a6:	78fb      	ldrb	r3, [r7, #3]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	4013      	ands	r3, r2
 80098c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098c4:	68bb      	ldr	r3, [r7, #8]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b087      	sub	sp, #28
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
 80098da:	460b      	mov	r3, r1
 80098dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	01db      	lsls	r3, r3, #7
 8009904:	b2db      	uxtb	r3, r3
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	4313      	orrs	r3, r2
 800990a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	015a      	lsls	r2, r3, #5
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	4413      	add	r3, r2
 8009914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	693a      	ldr	r2, [r7, #16]
 800991c:	4013      	ands	r3, r2
 800991e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009920:	68bb      	ldr	r3, [r7, #8]
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800992e:	b480      	push	{r7}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	f003 0301 	and.w	r3, r3, #1
}
 800993e:	4618      	mov	r0, r3
 8009940:	370c      	adds	r7, #12
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
	...

0800994c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009966:	4619      	mov	r1, r3
 8009968:	4b09      	ldr	r3, [pc, #36]	@ (8009990 <USB_ActivateSetup+0x44>)
 800996a:	4013      	ands	r3, r2
 800996c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800997c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009980:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr
 8009990:	fffff800 	.word	0xfffff800

08009994 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	460b      	mov	r3, r1
 800999e:	607a      	str	r2, [r7, #4]
 80099a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	333c      	adds	r3, #60	@ 0x3c
 80099aa:	3304      	adds	r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	4a26      	ldr	r2, [pc, #152]	@ (8009a4c <USB_EP0_OutStart+0xb8>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d90a      	bls.n	80099ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099c8:	d101      	bne.n	80099ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e037      	b.n	8009a3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d4:	461a      	mov	r2, r3
 80099d6:	2300      	movs	r3, #0
 80099d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80099ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099fc:	f043 0318 	orr.w	r3, r3, #24
 8009a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a16:	7afb      	ldrb	r3, [r7, #11]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d10f      	bne.n	8009a3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a22:	461a      	mov	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	371c      	adds	r7, #28
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	4f54300a 	.word	0x4f54300a

08009a50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a68:	d901      	bls.n	8009a6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	e01b      	b.n	8009aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	daf2      	bge.n	8009a5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	f043 0201 	orr.w	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a92:	d901      	bls.n	8009a98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e006      	b.n	8009aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d0f0      	beq.n	8009a86 <USB_CoreReset+0x36>

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009ab8:	4904      	ldr	r1, [pc, #16]	@ (8009acc <MX_FATFS_Init+0x18>)
 8009aba:	4805      	ldr	r0, [pc, #20]	@ (8009ad0 <MX_FATFS_Init+0x1c>)
 8009abc:	f003 fba0 	bl	800d200 <FATFS_LinkDriver>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	4b03      	ldr	r3, [pc, #12]	@ (8009ad4 <MX_FATFS_Init+0x20>)
 8009ac6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ac8:	bf00      	nop
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	2400050c 	.word	0x2400050c
 8009ad0:	24000014 	.word	0x24000014
 8009ad4:	24000508 	.word	0x24000508

08009ad8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8009ae2:	4b06      	ldr	r3, [pc, #24]	@ (8009afc <USER_initialize+0x24>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009ae8:	4b04      	ldr	r3, [pc, #16]	@ (8009afc <USER_initialize+0x24>)
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	24000011 	.word	0x24000011

08009b00 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8009b0a:	4b06      	ldr	r3, [pc, #24]	@ (8009b24 <USER_status+0x24>)
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8009b10:	4b04      	ldr	r3, [pc, #16]	@ (8009b24 <USER_status+0x24>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	370c      	adds	r7, #12
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	24000011 	.word	0x24000011

08009b28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8009b38:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3714      	adds	r7, #20
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b085      	sub	sp, #20
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
 8009b50:	603b      	str	r3, [r7, #0]
 8009b52:	4603      	mov	r3, r0
 8009b54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8009b56:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b085      	sub	sp, #20
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	603a      	str	r2, [r7, #0]
 8009b6e:	71fb      	strb	r3, [r7, #7]
 8009b70:	460b      	mov	r3, r1
 8009b72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
    return res;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	460b      	mov	r3, r1
 8009b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8009b94:	f44f 701d 	mov.w	r0, #628	@ 0x274
 8009b98:	f003 fffc 	bl	800db94 <USBD_static_malloc>
 8009b9c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d109      	bne.n	8009bb8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	32b0      	adds	r2, #176	@ 0xb0
 8009bae:	2100      	movs	r1, #0
 8009bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e06e      	b.n	8009c96 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	32b0      	adds	r2, #176	@ 0xb0
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	32b0      	adds	r2, #176	@ 0xb0
 8009bd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	7c1b      	ldrb	r3, [r3, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d12b      	bne.n	8009c3c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009be4:	4b2e      	ldr	r3, [pc, #184]	@ (8009ca0 <USBD_MSC_Init+0x118>)
 8009be6:	7819      	ldrb	r1, [r3, #0]
 8009be8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bec:	2202      	movs	r2, #2
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f003 fe8d 	bl	800d90e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8009ca0 <USBD_MSC_Init+0x118>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	f003 020f 	and.w	r2, r3, #15
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	440b      	add	r3, r1
 8009c08:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8009c10:	4b24      	ldr	r3, [pc, #144]	@ (8009ca4 <USBD_MSC_Init+0x11c>)
 8009c12:	7819      	ldrb	r1, [r3, #0]
 8009c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c18:	2202      	movs	r2, #2
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f003 fe77 	bl	800d90e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009c20:	4b20      	ldr	r3, [pc, #128]	@ (8009ca4 <USBD_MSC_Init+0x11c>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f003 020f 	and.w	r2, r3, #15
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	3324      	adds	r3, #36	@ 0x24
 8009c36:	2201      	movs	r2, #1
 8009c38:	801a      	strh	r2, [r3, #0]
 8009c3a:	e028      	b.n	8009c8e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009c3c:	4b18      	ldr	r3, [pc, #96]	@ (8009ca0 <USBD_MSC_Init+0x118>)
 8009c3e:	7819      	ldrb	r1, [r3, #0]
 8009c40:	2340      	movs	r3, #64	@ 0x40
 8009c42:	2202      	movs	r2, #2
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f003 fe62 	bl	800d90e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8009c4a:	4b15      	ldr	r3, [pc, #84]	@ (8009ca0 <USBD_MSC_Init+0x118>)
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	f003 020f 	and.w	r2, r3, #15
 8009c52:	6879      	ldr	r1, [r7, #4]
 8009c54:	4613      	mov	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	440b      	add	r3, r1
 8009c5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c62:	2201      	movs	r2, #1
 8009c64:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8009c66:	4b0f      	ldr	r3, [pc, #60]	@ (8009ca4 <USBD_MSC_Init+0x11c>)
 8009c68:	7819      	ldrb	r1, [r3, #0]
 8009c6a:	2340      	movs	r3, #64	@ 0x40
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f003 fe4d 	bl	800d90e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8009c74:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca4 <USBD_MSC_Init+0x11c>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	f003 020f 	and.w	r2, r3, #15
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	3324      	adds	r3, #36	@ 0x24
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa2c 	bl	800a0ec <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	2400008b 	.word	0x2400008b
 8009ca4:	2400008a 	.word	0x2400008a

08009ca8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8009cb4:	4b26      	ldr	r3, [pc, #152]	@ (8009d50 <USBD_MSC_DeInit+0xa8>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f003 fe4d 	bl	800d95a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8009cc0:	4b23      	ldr	r3, [pc, #140]	@ (8009d50 <USBD_MSC_DeInit+0xa8>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 020f 	and.w	r2, r3, #15
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009cd8:	2200      	movs	r2, #0
 8009cda:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8009cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8009d54 <USBD_MSC_DeInit+0xac>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f003 fe39 	bl	800d95a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8009ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8009d54 <USBD_MSC_DeInit+0xac>)
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	f003 020f 	and.w	r2, r3, #15
 8009cf0:	6879      	ldr	r1, [r7, #4]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	440b      	add	r3, r1
 8009cfc:	3324      	adds	r3, #36	@ 0x24
 8009cfe:	2200      	movs	r2, #0
 8009d00:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	32b0      	adds	r2, #176	@ 0xb0
 8009d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d018      	beq.n	8009d46 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa67 	bl	800a1e8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	32b0      	adds	r2, #176	@ 0xb0
 8009d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f003 ff41 	bl	800dbb0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	32b0      	adds	r2, #176	@ 0xb0
 8009d38:	2100      	movs	r1, #0
 8009d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	2400008b 	.word	0x2400008b
 8009d54:	2400008a 	.word	0x2400008a

08009d58 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	32b0      	adds	r2, #176	@ 0xb0
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e0e1      	b.n	8009f48 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d053      	beq.n	8009e38 <USBD_MSC_Setup+0xe0>
 8009d90:	2b20      	cmp	r3, #32
 8009d92:	f040 80d1 	bne.w	8009f38 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	785b      	ldrb	r3, [r3, #1]
 8009d9a:	2bfe      	cmp	r3, #254	@ 0xfe
 8009d9c:	d002      	beq.n	8009da4 <USBD_MSC_Setup+0x4c>
 8009d9e:	2bff      	cmp	r3, #255	@ 0xff
 8009da0:	d02a      	beq.n	8009df8 <USBD_MSC_Setup+0xa0>
 8009da2:	e041      	b.n	8009e28 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	885b      	ldrh	r3, [r3, #2]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d11e      	bne.n	8009dea <USBD_MSC_Setup+0x92>
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	88db      	ldrh	r3, [r3, #6]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d11a      	bne.n	8009dea <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	da15      	bge.n	8009dea <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	33b0      	adds	r3, #176	@ 0xb0
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	4413      	add	r3, r2
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	4798      	blx	r3
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f003 f95d 	bl	800d0a0 <USBD_CtlSendData>
 8009de6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009de8:	e025      	b.n	8009e36 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f003 f8da 	bl	800cfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009df2:	2303      	movs	r3, #3
 8009df4:	75fb      	strb	r3, [r7, #23]
          break;
 8009df6:	e01e      	b.n	8009e36 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	885b      	ldrh	r3, [r3, #2]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d10c      	bne.n	8009e1a <USBD_MSC_Setup+0xc2>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	88db      	ldrh	r3, [r3, #6]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d108      	bne.n	8009e1a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	db03      	blt.n	8009e1a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f9b4 	bl	800a180 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e18:	e00d      	b.n	8009e36 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8009e1a:	6839      	ldr	r1, [r7, #0]
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f003 f8c2 	bl	800cfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	75fb      	strb	r3, [r7, #23]
          break;
 8009e26:	e006      	b.n	8009e36 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f003 f8bb 	bl	800cfa6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009e30:	2303      	movs	r3, #3
 8009e32:	75fb      	strb	r3, [r7, #23]
          break;
 8009e34:	bf00      	nop
      }
      break;
 8009e36:	e086      	b.n	8009f46 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b0b      	cmp	r3, #11
 8009e3e:	d872      	bhi.n	8009f26 <USBD_MSC_Setup+0x1ce>
 8009e40:	a201      	add	r2, pc, #4	@ (adr r2, 8009e48 <USBD_MSC_Setup+0xf0>)
 8009e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e46:	bf00      	nop
 8009e48:	08009e79 	.word	0x08009e79
 8009e4c:	08009ef5 	.word	0x08009ef5
 8009e50:	08009f27 	.word	0x08009f27
 8009e54:	08009f27 	.word	0x08009f27
 8009e58:	08009f27 	.word	0x08009f27
 8009e5c:	08009f27 	.word	0x08009f27
 8009e60:	08009f27 	.word	0x08009f27
 8009e64:	08009f27 	.word	0x08009f27
 8009e68:	08009f27 	.word	0x08009f27
 8009e6c:	08009f27 	.word	0x08009f27
 8009e70:	08009ea3 	.word	0x08009ea3
 8009e74:	08009ecd 	.word	0x08009ecd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b03      	cmp	r3, #3
 8009e82:	d107      	bne.n	8009e94 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e84:	f107 030e 	add.w	r3, r7, #14
 8009e88:	2202      	movs	r2, #2
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f003 f907 	bl	800d0a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e92:	e050      	b.n	8009f36 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009e94:	6839      	ldr	r1, [r7, #0]
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f003 f885 	bl	800cfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	75fb      	strb	r3, [r7, #23]
          break;
 8009ea0:	e049      	b.n	8009f36 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b03      	cmp	r3, #3
 8009eac:	d107      	bne.n	8009ebe <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f003 f8f2 	bl	800d0a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ebc:	e03b      	b.n	8009f36 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009ebe:	6839      	ldr	r1, [r7, #0]
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f003 f870 	bl	800cfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eca:	e034      	b.n	8009f36 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d106      	bne.n	8009ee6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	885b      	ldrh	r3, [r3, #2]
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ee4:	e027      	b.n	8009f36 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f003 f85c 	bl	800cfa6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009eee:	2303      	movs	r3, #3
 8009ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ef2:	e020      	b.n	8009f36 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d119      	bne.n	8009f34 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	885b      	ldrh	r3, [r3, #2]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d115      	bne.n	8009f34 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	889b      	ldrh	r3, [r3, #4]
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f003 fd41 	bl	800d998 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	889b      	ldrh	r3, [r3, #4]
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fb2e 	bl	800a580 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8009f24:	e006      	b.n	8009f34 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f003 f83c 	bl	800cfa6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	75fb      	strb	r3, [r7, #23]
          break;
 8009f32:	e000      	b.n	8009f36 <USBD_MSC_Setup+0x1de>
          break;
 8009f34:	bf00      	nop
      }
      break;
 8009f36:	e006      	b.n	8009f46 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f003 f833 	bl	800cfa6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f40:	2303      	movs	r3, #3
 8009f42:	75fb      	strb	r3, [r7, #23]
      break;
 8009f44:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 f959 	bl	800a218 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8009f7c:	78fb      	ldrb	r3, [r7, #3]
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f983 	bl	800a28c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009f98:	2181      	movs	r1, #129	@ 0x81
 8009f9a:	4812      	ldr	r0, [pc, #72]	@ (8009fe4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009f9c:	f002 f9a4 	bl	800c2e8 <USBD_GetEpDesc>
 8009fa0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	480f      	ldr	r0, [pc, #60]	@ (8009fe4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8009fa6:	f002 f99f 	bl	800c2e8 <USBD_GetEpDesc>
 8009faa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d006      	beq.n	8009fc0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	711a      	strb	r2, [r3, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f042 0202 	orr.w	r2, r2, #2
 8009fbe:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d006      	beq.n	8009fd4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	711a      	strb	r2, [r3, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f042 0202 	orr.w	r2, r2, #2
 8009fd2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8009fda:	4b02      	ldr	r3, [pc, #8]	@ (8009fe4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	24000060 	.word	0x24000060

08009fe8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8009ff0:	2181      	movs	r1, #129	@ 0x81
 8009ff2:	4812      	ldr	r0, [pc, #72]	@ (800a03c <USBD_MSC_GetFSCfgDesc+0x54>)
 8009ff4:	f002 f978 	bl	800c2e8 <USBD_GetEpDesc>
 8009ff8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	480f      	ldr	r0, [pc, #60]	@ (800a03c <USBD_MSC_GetFSCfgDesc+0x54>)
 8009ffe:	f002 f973 	bl	800c2e8 <USBD_GetEpDesc>
 800a002:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a012:	711a      	strb	r2, [r3, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d006      	beq.n	800a02c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	2200      	movs	r2, #0
 800a022:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a026:	711a      	strb	r2, [r3, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2220      	movs	r2, #32
 800a030:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a032:	4b02      	ldr	r3, [pc, #8]	@ (800a03c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	24000060 	.word	0x24000060

0800a040 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800a048:	2181      	movs	r1, #129	@ 0x81
 800a04a:	4812      	ldr	r0, [pc, #72]	@ (800a094 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800a04c:	f002 f94c 	bl	800c2e8 <USBD_GetEpDesc>
 800a050:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800a052:	2101      	movs	r1, #1
 800a054:	480f      	ldr	r0, [pc, #60]	@ (800a094 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800a056:	f002 f947 	bl	800c2e8 <USBD_GetEpDesc>
 800a05a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d006      	beq.n	800a070 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a06a:	711a      	strb	r2, [r3, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d006      	beq.n	800a084 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2200      	movs	r2, #0
 800a07a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a07e:	711a      	strb	r2, [r3, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2220      	movs	r2, #32
 800a088:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800a08a:	4b02      	ldr	r3, [pc, #8]	@ (800a094 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	24000060 	.word	0x24000060

0800a098 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	220a      	movs	r2, #10
 800a0a4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800a0a6:	4b03      	ldr	r3, [pc, #12]	@ (800a0b4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	24000080 	.word	0x24000080

0800a0b8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d101      	bne.n	800a0cc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0c8:	2303      	movs	r3, #3
 800a0ca:	e009      	b.n	800a0e0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	33b0      	adds	r3, #176	@ 0xb0
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	4413      	add	r3, r2
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	32b0      	adds	r2, #176	@ 0xb0
 800a0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a102:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d032      	beq.n	800a170 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	33b0      	adds	r3, #176	@ 0xb0
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2000      	movs	r0, #0
 800a142:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800a144:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <MSC_BOT_Init+0x8c>)
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f003 fc24 	bl	800d998 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800a150:	4b0a      	ldr	r3, [pc, #40]	@ (800a17c <MSC_BOT_Init+0x90>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f003 fc1e 	bl	800d998 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a15c:	4b06      	ldr	r3, [pc, #24]	@ (800a178 <MSC_BOT_Init+0x8c>)
 800a15e:	7819      	ldrb	r1, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800a166:	231f      	movs	r3, #31
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f003 fcde 	bl	800db2a <USBD_LL_PrepareReceive>
 800a16e:	e000      	b.n	800a172 <MSC_BOT_Init+0x86>
    return;
 800a170:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	2400008b 	.word	0x2400008b
 800a17c:	2400008a 	.word	0x2400008a

0800a180 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	32b0      	adds	r2, #176	@ 0xb0
 800a192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a196:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d01b      	beq.n	800a1d6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e0 <MSC_BOT_Reset+0x60>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f003 fc2f 	bl	800da14 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800a1b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e4 <MSC_BOT_Reset+0x64>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f003 fc29 	bl	800da14 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a1c2:	4b08      	ldr	r3, [pc, #32]	@ (800a1e4 <MSC_BOT_Reset+0x64>)
 800a1c4:	7819      	ldrb	r1, [r3, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800a1cc:	231f      	movs	r3, #31
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f003 fcab 	bl	800db2a <USBD_LL_PrepareReceive>
 800a1d4:	e000      	b.n	800a1d8 <MSC_BOT_Reset+0x58>
    return;
 800a1d6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	2400008a 	.word	0x2400008a
 800a1e4:	2400008b 	.word	0x2400008b

0800a1e8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	32b0      	adds	r2, #176	@ 0xb0
 800a1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fe:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d002      	beq.n	800a20c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	721a      	strb	r2, [r3, #8]
  }
}
 800a20c:	bf00      	nop
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	32b0      	adds	r2, #176	@ 0xb0
 800a22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a232:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d020      	beq.n	800a27c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	7a1b      	ldrb	r3, [r3, #8]
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d005      	beq.n	800a24e <MSC_BOT_DataIn+0x36>
 800a242:	2b02      	cmp	r3, #2
 800a244:	db1c      	blt.n	800a280 <MSC_BOT_DataIn+0x68>
 800a246:	3b03      	subs	r3, #3
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d819      	bhi.n	800a280 <MSC_BOT_DataIn+0x68>
 800a24c:	e011      	b.n	800a272 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800a25a:	461a      	mov	r2, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f9c9 	bl	800a5f4 <SCSI_ProcessCmd>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	da0d      	bge.n	800a284 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a268:	2101      	movs	r1, #1
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f90c 	bl	800a488 <MSC_BOT_SendCSW>
      }
      break;
 800a270:	e008      	b.n	800a284 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a272:	2100      	movs	r1, #0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f907 	bl	800a488 <MSC_BOT_SendCSW>
      break;
 800a27a:	e004      	b.n	800a286 <MSC_BOT_DataIn+0x6e>
    return;
 800a27c:	bf00      	nop
 800a27e:	e002      	b.n	800a286 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800a280:	bf00      	nop
 800a282:	e000      	b.n	800a286 <MSC_BOT_DataIn+0x6e>
      break;
 800a284:	bf00      	nop
  }
}
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	32b0      	adds	r2, #176	@ 0xb0
 800a2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d01c      	beq.n	800a2e8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	7a1b      	ldrb	r3, [r3, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <MSC_BOT_DataOut+0x30>
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d004      	beq.n	800a2c4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800a2ba:	e018      	b.n	800a2ee <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f819 	bl	800a2f4 <MSC_BOT_CBW_Decode>
      break;
 800a2c2:	e014      	b.n	800a2ee <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f98e 	bl	800a5f4 <SCSI_ProcessCmd>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	da06      	bge.n	800a2ec <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a2de:	2101      	movs	r1, #1
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f8d1 	bl	800a488 <MSC_BOT_SendCSW>
      break;
 800a2e6:	e001      	b.n	800a2ec <MSC_BOT_DataOut+0x60>
    return;
 800a2e8:	bf00      	nop
 800a2ea:	e000      	b.n	800a2ee <MSC_BOT_DataOut+0x62>
      break;
 800a2ec:	bf00      	nop
  }
}
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	32b0      	adds	r2, #176	@ 0xb0
 800a306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a30a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d079      	beq.n	800a406 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a32a:	4b3a      	ldr	r3, [pc, #232]	@ (800a414 <MSC_BOT_CBW_Decode+0x120>)
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	4619      	mov	r1, r3
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f003 fc1b 	bl	800db6c <USBD_LL_GetRxDataSize>
 800a336:	4603      	mov	r3, r0
 800a338:	2b1f      	cmp	r3, #31
 800a33a:	d114      	bne.n	800a366 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800a342:	4a35      	ldr	r2, [pc, #212]	@ (800a418 <MSC_BOT_CBW_Decode+0x124>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d10e      	bne.n	800a366 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d809      	bhi.n	800a366 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800a362:	2b10      	cmp	r3, #16
 800a364:	d90e      	bls.n	800a384 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a36c:	2320      	movs	r3, #32
 800a36e:	2205      	movs	r2, #5
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fe54 	bl	800b01e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2202      	movs	r2, #2
 800a37a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f8bd 	bl	800a4fc <MSC_BOT_Abort>
 800a382:	e043      	b.n	800a40c <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800a390:	461a      	mov	r2, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 f92e 	bl	800a5f4 <SCSI_ProcessCmd>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	da0c      	bge.n	800a3b8 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	7a1b      	ldrb	r3, [r3, #8]
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d104      	bne.n	800a3b0 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 f86d 	bl	800a488 <MSC_BOT_SendCSW>
 800a3ae:	e02d      	b.n	800a40c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8a3 	bl	800a4fc <MSC_BOT_Abort>
 800a3b6:	e029      	b.n	800a40c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	7a1b      	ldrb	r3, [r3, #8]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d024      	beq.n	800a40a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d020      	beq.n	800a40a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800a3cc:	2b03      	cmp	r3, #3
 800a3ce:	d01c      	beq.n	800a40a <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d009      	beq.n	800a3ec <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f103 0110 	add.w	r1, r3, #16
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f819 	bl	800a41c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800a3ea:	e00f      	b.n	800a40c <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	68db      	ldr	r3, [r3, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d104      	bne.n	800a3fe <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f846 	bl	800a488 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800a3fc:	e006      	b.n	800a40c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 f87c 	bl	800a4fc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800a404:	e002      	b.n	800a40c <MSC_BOT_CBW_Decode+0x118>
    return;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 800a40a:	bf00      	nop
    }
  }
}
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	2400008b 	.word	0x2400008b
 800a418:	43425355 	.word	0x43425355

0800a41c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b086      	sub	sp, #24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	32b0      	adds	r2, #176	@ 0xb0
 800a432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a436:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d01e      	beq.n	800a47c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	4293      	cmp	r3, r2
 800a448:	bf28      	it	cs
 800a44a:	4613      	movcs	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	1ad2      	subs	r2, r2, r3
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2200      	movs	r2, #0
 800a462:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	2204      	movs	r2, #4
 800a46a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800a46c:	4b05      	ldr	r3, [pc, #20]	@ (800a484 <MSC_BOT_SendData+0x68>)
 800a46e:	7819      	ldrb	r1, [r3, #0]
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f003 fb37 	bl	800dae8 <USBD_LL_Transmit>
 800a47a:	e000      	b.n	800a47e <MSC_BOT_SendData+0x62>
    return;
 800a47c:	bf00      	nop
}
 800a47e:	3718      	adds	r7, #24
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	2400008a 	.word	0x2400008a

0800a488 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	32b0      	adds	r2, #176	@ 0xb0
 800a49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d01d      	beq.n	800a4e6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	4a10      	ldr	r2, [pc, #64]	@ (800a4f0 <MSC_BOT_SendCSW+0x68>)
 800a4ae:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	78fa      	ldrb	r2, [r7, #3]
 800a4b6:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800a4c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a4f4 <MSC_BOT_SendCSW+0x6c>)
 800a4c2:	7819      	ldrb	r1, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 800a4ca:	230d      	movs	r3, #13
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f003 fb0b 	bl	800dae8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800a4d2:	4b09      	ldr	r3, [pc, #36]	@ (800a4f8 <MSC_BOT_SendCSW+0x70>)
 800a4d4:	7819      	ldrb	r1, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800a4dc:	231f      	movs	r3, #31
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f003 fb23 	bl	800db2a <USBD_LL_PrepareReceive>
 800a4e4:	e000      	b.n	800a4e8 <MSC_BOT_SendCSW+0x60>
    return;
 800a4e6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	53425355 	.word	0x53425355
 800a4f4:	2400008a 	.word	0x2400008a
 800a4f8:	2400008b 	.word	0x2400008b

0800a4fc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	32b0      	adds	r2, #176	@ 0xb0
 800a50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a512:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d02a      	beq.n	800a570 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800a520:	2b00      	cmp	r3, #0
 800a522:	d10e      	bne.n	800a542 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d009      	beq.n	800a542 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800a532:	2b00      	cmp	r3, #0
 800a534:	d105      	bne.n	800a542 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a536:	4b10      	ldr	r3, [pc, #64]	@ (800a578 <MSC_BOT_Abort+0x7c>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f003 fa4a 	bl	800d9d6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a542:	4b0e      	ldr	r3, [pc, #56]	@ (800a57c <MSC_BOT_Abort+0x80>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f003 fa44 	bl	800d9d6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	7a5b      	ldrb	r3, [r3, #9]
 800a552:	2b02      	cmp	r3, #2
 800a554:	d10d      	bne.n	800a572 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a556:	4b09      	ldr	r3, [pc, #36]	@ (800a57c <MSC_BOT_Abort+0x80>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f003 fa3a 	bl	800d9d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a562:	4b05      	ldr	r3, [pc, #20]	@ (800a578 <MSC_BOT_Abort+0x7c>)
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f003 fa34 	bl	800d9d6 <USBD_LL_StallEP>
 800a56e:	e000      	b.n	800a572 <MSC_BOT_Abort+0x76>
    return;
 800a570:	bf00      	nop
  }
}
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	2400008b 	.word	0x2400008b
 800a57c:	2400008a 	.word	0x2400008a

0800a580 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	32b0      	adds	r2, #176	@ 0xb0
 800a596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d01d      	beq.n	800a5de <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	7a5b      	ldrb	r3, [r3, #9]
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d10c      	bne.n	800a5c4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800a5aa:	4b10      	ldr	r3, [pc, #64]	@ (800a5ec <MSC_BOT_CplClrFeature+0x6c>)
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f003 fa10 	bl	800d9d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800a5b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f0 <MSC_BOT_CplClrFeature+0x70>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f003 fa0a 	bl	800d9d6 <USBD_LL_StallEP>
 800a5c2:	e00f      	b.n	800a5e4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800a5c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	da0a      	bge.n	800a5e2 <MSC_BOT_CplClrFeature+0x62>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	7a5b      	ldrb	r3, [r3, #9]
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d006      	beq.n	800a5e2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f7ff ff56 	bl	800a488 <MSC_BOT_SendCSW>
 800a5dc:	e002      	b.n	800a5e4 <MSC_BOT_CplClrFeature+0x64>
    return;
 800a5de:	bf00      	nop
 800a5e0:	e000      	b.n	800a5e4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800a5e2:	bf00      	nop
  }
}
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	2400008a 	.word	0x2400008a
 800a5f0:	2400008b 	.word	0x2400008b

0800a5f4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b086      	sub	sp, #24
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	607a      	str	r2, [r7, #4]
 800a600:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	32b0      	adds	r2, #176	@ 0xb0
 800a60c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a610:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 800a618:	f04f 33ff 	mov.w	r3, #4294967295
 800a61c:	e168      	b.n	800a8f0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	2baa      	cmp	r3, #170	@ 0xaa
 800a624:	f000 8144 	beq.w	800a8b0 <SCSI_ProcessCmd+0x2bc>
 800a628:	2baa      	cmp	r3, #170	@ 0xaa
 800a62a:	f300 8153 	bgt.w	800a8d4 <SCSI_ProcessCmd+0x2e0>
 800a62e:	2ba8      	cmp	r3, #168	@ 0xa8
 800a630:	f000 812c 	beq.w	800a88c <SCSI_ProcessCmd+0x298>
 800a634:	2ba8      	cmp	r3, #168	@ 0xa8
 800a636:	f300 814d 	bgt.w	800a8d4 <SCSI_ProcessCmd+0x2e0>
 800a63a:	2b5a      	cmp	r3, #90	@ 0x5a
 800a63c:	f300 80c0 	bgt.w	800a7c0 <SCSI_ProcessCmd+0x1cc>
 800a640:	2b00      	cmp	r3, #0
 800a642:	f2c0 8147 	blt.w	800a8d4 <SCSI_ProcessCmd+0x2e0>
 800a646:	2b5a      	cmp	r3, #90	@ 0x5a
 800a648:	f200 8144 	bhi.w	800a8d4 <SCSI_ProcessCmd+0x2e0>
 800a64c:	a201      	add	r2, pc, #4	@ (adr r2, 800a654 <SCSI_ProcessCmd+0x60>)
 800a64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a652:	bf00      	nop
 800a654:	0800a7c7 	.word	0x0800a7c7
 800a658:	0800a8d5 	.word	0x0800a8d5
 800a65c:	0800a8d5 	.word	0x0800a8d5
 800a660:	0800a7d9 	.word	0x0800a7d9
 800a664:	0800a8d5 	.word	0x0800a8d5
 800a668:	0800a8d5 	.word	0x0800a8d5
 800a66c:	0800a8d5 	.word	0x0800a8d5
 800a670:	0800a8d5 	.word	0x0800a8d5
 800a674:	0800a8d5 	.word	0x0800a8d5
 800a678:	0800a8d5 	.word	0x0800a8d5
 800a67c:	0800a8d5 	.word	0x0800a8d5
 800a680:	0800a8d5 	.word	0x0800a8d5
 800a684:	0800a8d5 	.word	0x0800a8d5
 800a688:	0800a8d5 	.word	0x0800a8d5
 800a68c:	0800a8d5 	.word	0x0800a8d5
 800a690:	0800a8d5 	.word	0x0800a8d5
 800a694:	0800a8d5 	.word	0x0800a8d5
 800a698:	0800a8d5 	.word	0x0800a8d5
 800a69c:	0800a7eb 	.word	0x0800a7eb
 800a6a0:	0800a8d5 	.word	0x0800a8d5
 800a6a4:	0800a8d5 	.word	0x0800a8d5
 800a6a8:	0800a8d5 	.word	0x0800a8d5
 800a6ac:	0800a8d5 	.word	0x0800a8d5
 800a6b0:	0800a8d5 	.word	0x0800a8d5
 800a6b4:	0800a8d5 	.word	0x0800a8d5
 800a6b8:	0800a8d5 	.word	0x0800a8d5
 800a6bc:	0800a821 	.word	0x0800a821
 800a6c0:	0800a7fd 	.word	0x0800a7fd
 800a6c4:	0800a8d5 	.word	0x0800a8d5
 800a6c8:	0800a8d5 	.word	0x0800a8d5
 800a6cc:	0800a80f 	.word	0x0800a80f
 800a6d0:	0800a8d5 	.word	0x0800a8d5
 800a6d4:	0800a8d5 	.word	0x0800a8d5
 800a6d8:	0800a8d5 	.word	0x0800a8d5
 800a6dc:	0800a8d5 	.word	0x0800a8d5
 800a6e0:	0800a845 	.word	0x0800a845
 800a6e4:	0800a8d5 	.word	0x0800a8d5
 800a6e8:	0800a857 	.word	0x0800a857
 800a6ec:	0800a8d5 	.word	0x0800a8d5
 800a6f0:	0800a8d5 	.word	0x0800a8d5
 800a6f4:	0800a87b 	.word	0x0800a87b
 800a6f8:	0800a8d5 	.word	0x0800a8d5
 800a6fc:	0800a89f 	.word	0x0800a89f
 800a700:	0800a8d5 	.word	0x0800a8d5
 800a704:	0800a8d5 	.word	0x0800a8d5
 800a708:	0800a8d5 	.word	0x0800a8d5
 800a70c:	0800a8d5 	.word	0x0800a8d5
 800a710:	0800a8c3 	.word	0x0800a8c3
 800a714:	0800a8d5 	.word	0x0800a8d5
 800a718:	0800a8d5 	.word	0x0800a8d5
 800a71c:	0800a8d5 	.word	0x0800a8d5
 800a720:	0800a8d5 	.word	0x0800a8d5
 800a724:	0800a8d5 	.word	0x0800a8d5
 800a728:	0800a8d5 	.word	0x0800a8d5
 800a72c:	0800a8d5 	.word	0x0800a8d5
 800a730:	0800a8d5 	.word	0x0800a8d5
 800a734:	0800a8d5 	.word	0x0800a8d5
 800a738:	0800a8d5 	.word	0x0800a8d5
 800a73c:	0800a8d5 	.word	0x0800a8d5
 800a740:	0800a8d5 	.word	0x0800a8d5
 800a744:	0800a8d5 	.word	0x0800a8d5
 800a748:	0800a8d5 	.word	0x0800a8d5
 800a74c:	0800a8d5 	.word	0x0800a8d5
 800a750:	0800a8d5 	.word	0x0800a8d5
 800a754:	0800a8d5 	.word	0x0800a8d5
 800a758:	0800a8d5 	.word	0x0800a8d5
 800a75c:	0800a8d5 	.word	0x0800a8d5
 800a760:	0800a8d5 	.word	0x0800a8d5
 800a764:	0800a8d5 	.word	0x0800a8d5
 800a768:	0800a8d5 	.word	0x0800a8d5
 800a76c:	0800a8d5 	.word	0x0800a8d5
 800a770:	0800a8d5 	.word	0x0800a8d5
 800a774:	0800a8d5 	.word	0x0800a8d5
 800a778:	0800a8d5 	.word	0x0800a8d5
 800a77c:	0800a8d5 	.word	0x0800a8d5
 800a780:	0800a8d5 	.word	0x0800a8d5
 800a784:	0800a8d5 	.word	0x0800a8d5
 800a788:	0800a8d5 	.word	0x0800a8d5
 800a78c:	0800a8d5 	.word	0x0800a8d5
 800a790:	0800a8d5 	.word	0x0800a8d5
 800a794:	0800a8d5 	.word	0x0800a8d5
 800a798:	0800a8d5 	.word	0x0800a8d5
 800a79c:	0800a8d5 	.word	0x0800a8d5
 800a7a0:	0800a8d5 	.word	0x0800a8d5
 800a7a4:	0800a8d5 	.word	0x0800a8d5
 800a7a8:	0800a8d5 	.word	0x0800a8d5
 800a7ac:	0800a8d5 	.word	0x0800a8d5
 800a7b0:	0800a8d5 	.word	0x0800a8d5
 800a7b4:	0800a8d5 	.word	0x0800a8d5
 800a7b8:	0800a8d5 	.word	0x0800a8d5
 800a7bc:	0800a833 	.word	0x0800a833
 800a7c0:	2b9e      	cmp	r3, #158	@ 0x9e
 800a7c2:	d051      	beq.n	800a868 <SCSI_ProcessCmd+0x274>
 800a7c4:	e086      	b.n	800a8d4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800a7c6:	7afb      	ldrb	r3, [r7, #11]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f000 f893 	bl	800a8f8 <SCSI_TestUnitReady>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a7d6:	e089      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 800a7d8:	7afb      	ldrb	r3, [r7, #11]
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fb9a 	bl	800af18 <SCSI_RequestSense>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7e8:	e080      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800a7ea:	7afb      	ldrb	r3, [r7, #11]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 f8db 	bl	800a9ac <SCSI_Inquiry>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a7fa:	e077      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800a7fc:	7afb      	ldrb	r3, [r7, #11]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4619      	mov	r1, r3
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fc56 	bl	800b0b4 <SCSI_StartStopUnit>
 800a808:	4603      	mov	r3, r0
 800a80a:	75fb      	strb	r3, [r7, #23]
      break;
 800a80c:	e06e      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800a80e:	7afb      	ldrb	r3, [r7, #11]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	4619      	mov	r1, r3
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 fca2 	bl	800b15e <SCSI_AllowPreventRemovable>
 800a81a:	4603      	mov	r3, r0
 800a81c:	75fb      	strb	r3, [r7, #23]
      break;
 800a81e:	e065      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 800a820:	7afb      	ldrb	r3, [r7, #11]
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4619      	mov	r1, r3
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 faea 	bl	800ae00 <SCSI_ModeSense6>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]
      break;
 800a830:	e05c      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800a832:	7afb      	ldrb	r3, [r7, #11]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	4619      	mov	r1, r3
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 fb27 	bl	800ae8c <SCSI_ModeSense10>
 800a83e:	4603      	mov	r3, r0
 800a840:	75fb      	strb	r3, [r7, #23]
      break;
 800a842:	e053      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	4619      	mov	r1, r3
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f000 fa5c 	bl	800ad08 <SCSI_ReadFormatCapacity>
 800a850:	4603      	mov	r3, r0
 800a852:	75fb      	strb	r3, [r7, #23]
      break;
 800a854:	e04a      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800a856:	7afb      	ldrb	r3, [r7, #11]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	4619      	mov	r1, r3
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 f921 	bl	800aaa4 <SCSI_ReadCapacity10>
 800a862:	4603      	mov	r3, r0
 800a864:	75fb      	strb	r3, [r7, #23]
      break;
 800a866:	e041      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800a868:	7afb      	ldrb	r3, [r7, #11]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	4619      	mov	r1, r3
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f996 	bl	800aba0 <SCSI_ReadCapacity16>
 800a874:	4603      	mov	r3, r0
 800a876:	75fb      	strb	r3, [r7, #23]
      break;
 800a878:	e038      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800a87a:	7afb      	ldrb	r3, [r7, #11]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	4619      	mov	r1, r3
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fc99 	bl	800b1b8 <SCSI_Read10>
 800a886:	4603      	mov	r3, r0
 800a888:	75fb      	strb	r3, [r7, #23]
      break;
 800a88a:	e02f      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	4619      	mov	r1, r3
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f000 fd3a 	bl	800b30c <SCSI_Read12>
 800a898:	4603      	mov	r3, r0
 800a89a:	75fb      	strb	r3, [r7, #23]
      break;
 800a89c:	e026      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 fde5 	bl	800b474 <SCSI_Write10>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ae:	e01d      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 800a8b0:	7afb      	ldrb	r3, [r7, #11]
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f000 feb2 	bl	800b620 <SCSI_Write12>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c0:	e014      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 800a8c2:	7afb      	ldrb	r3, [r7, #11]
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f000 ff8f 	bl	800b7ec <SCSI_Verify10>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a8d2:	e00b      	b.n	800a8ec <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800a8d4:	7af9      	ldrb	r1, [r7, #11]
 800a8d6:	2320      	movs	r3, #32
 800a8d8:	2205      	movs	r2, #5
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 fb9f 	bl	800b01e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800a8e6:	23ff      	movs	r3, #255	@ 0xff
 800a8e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ea:	bf00      	nop
  }

  return ret;
 800a8ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3718      	adds	r7, #24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}

0800a8f8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	460b      	mov	r3, r1
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	32b0      	adds	r2, #176	@ 0xb0
 800a910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a914:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d102      	bne.n	800a922 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800a91c:	f04f 33ff 	mov.w	r3, #4294967295
 800a920:	e03f      	b.n	800a9a2 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a932:	2320      	movs	r3, #32
 800a934:	2205      	movs	r2, #5
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fb71 	bl	800b01e <SCSI_SenseCode>

    return -1;
 800a93c:	f04f 33ff 	mov.w	r3, #4294967295
 800a940:	e02f      	b.n	800a9a2 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800a948:	2b02      	cmp	r3, #2
 800a94a:	d10b      	bne.n	800a964 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a94c:	7af9      	ldrb	r1, [r7, #11]
 800a94e:	233a      	movs	r3, #58	@ 0x3a
 800a950:	2202      	movs	r2, #2
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f000 fb63 	bl	800b01e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	2205      	movs	r2, #5
 800a95c:	721a      	strb	r2, [r3, #8]
    return -1;
 800a95e:	f04f 33ff 	mov.w	r3, #4294967295
 800a962:	e01e      	b.n	800a9a2 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	33b0      	adds	r3, #176	@ 0xb0
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	7afa      	ldrb	r2, [r7, #11]
 800a978:	4610      	mov	r0, r2
 800a97a:	4798      	blx	r3
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00b      	beq.n	800a99a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800a982:	7af9      	ldrb	r1, [r7, #11]
 800a984:	233a      	movs	r3, #58	@ 0x3a
 800a986:	2202      	movs	r2, #2
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f000 fb48 	bl	800b01e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2205      	movs	r2, #5
 800a992:	721a      	strb	r2, [r3, #8]

    return -1;
 800a994:	f04f 33ff 	mov.w	r3, #4294967295
 800a998:	e003      	b.n	800a9a2 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2200      	movs	r2, #0
 800a99e:	60da      	str	r2, [r3, #12]

  return 0;
 800a9a0:	2300      	movs	r3, #0
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3718      	adds	r7, #24
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
	...

0800a9ac <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b088      	sub	sp, #32
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	32b0      	adds	r2, #176	@ 0xb0
 800a9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d102      	bne.n	800a9d6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	e05e      	b.n	800aa94 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800a9e6:	2320      	movs	r3, #32
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	68f8      	ldr	r0, [r7, #12]
 800a9ec:	f000 fb17 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800a9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f4:	e04e      	b.n	800aa94 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d020      	beq.n	800aa46 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3302      	adds	r3, #2
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d105      	bne.n	800aa1a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800aa0e:	2206      	movs	r2, #6
 800aa10:	4922      	ldr	r1, [pc, #136]	@ (800aa9c <SCSI_Inquiry+0xf0>)
 800aa12:	69b8      	ldr	r0, [r7, #24]
 800aa14:	f001 f870 	bl	800baf8 <SCSI_UpdateBotData>
 800aa18:	e03b      	b.n	800aa92 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	3302      	adds	r3, #2
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	2b80      	cmp	r3, #128	@ 0x80
 800aa22:	d105      	bne.n	800aa30 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800aa24:	2208      	movs	r2, #8
 800aa26:	491e      	ldr	r1, [pc, #120]	@ (800aaa0 <SCSI_Inquiry+0xf4>)
 800aa28:	69b8      	ldr	r0, [r7, #24]
 800aa2a:	f001 f865 	bl	800baf8 <SCSI_UpdateBotData>
 800aa2e:	e030      	b.n	800aa92 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800aa36:	2324      	movs	r3, #36	@ 0x24
 800aa38:	2205      	movs	r2, #5
 800aa3a:	68f8      	ldr	r0, [r7, #12]
 800aa3c:	f000 faef 	bl	800b01e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800aa40:	f04f 33ff 	mov.w	r3, #4294967295
 800aa44:	e026      	b.n	800aa94 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	33b0      	adds	r3, #176	@ 0xb0
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800aa56:	69d9      	ldr	r1, [r3, #28]
 800aa58:	7afa      	ldrb	r2, [r7, #11]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	00db      	lsls	r3, r3, #3
 800aa5e:	4413      	add	r3, r2
 800aa60:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 800aa62:	440b      	add	r3, r1
 800aa64:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	3305      	adds	r3, #5
 800aa6e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3304      	adds	r3, #4
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	8bfb      	ldrh	r3, [r7, #30]
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d303      	bcc.n	800aa86 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	3304      	adds	r3, #4
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800aa86:	8bfb      	ldrh	r3, [r7, #30]
 800aa88:	461a      	mov	r2, r3
 800aa8a:	6979      	ldr	r1, [r7, #20]
 800aa8c:	69b8      	ldr	r0, [r7, #24]
 800aa8e:	f001 f833 	bl	800baf8 <SCSI_UpdateBotData>
  }

  return 0;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3720      	adds	r7, #32
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	2400008c 	.word	0x2400008c
 800aaa0:	24000094 	.word	0x24000094

0800aaa4 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	60f8      	str	r0, [r7, #12]
 800aaac:	460b      	mov	r3, r1
 800aaae:	607a      	str	r2, [r7, #4]
 800aab0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	32b0      	adds	r2, #176	@ 0xb0
 800aabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295
 800aacc:	e064      	b.n	800ab98 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	33b0      	adds	r3, #176	@ 0xb0
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	697a      	ldr	r2, [r7, #20]
 800aae2:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800aaec:	7af8      	ldrb	r0, [r7, #11]
 800aaee:	4798      	blx	r3
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	74fb      	strb	r3, [r7, #19]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800aaf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d104      	bne.n	800ab06 <SCSI_ReadCapacity10+0x62>
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800ab02:	2b02      	cmp	r3, #2
 800ab04:	d108      	bne.n	800ab18 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ab06:	7af9      	ldrb	r1, [r7, #11]
 800ab08:	233a      	movs	r3, #58	@ 0x3a
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 fa86 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800ab12:	f04f 33ff 	mov.w	r3, #4294967295
 800ab16:	e03f      	b.n	800ab98 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	0e1b      	lsrs	r3, r3, #24
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	0c1b      	lsrs	r3, r3, #16
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	0a1b      	lsrs	r3, r3, #8
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800ab5e:	161b      	asrs	r3, r3, #24
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800ab6c:	141b      	asrs	r3, r3, #16
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800ab7a:	0a1b      	lsrs	r3, r3, #8
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	b2da      	uxtb	r2, r3
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	2208      	movs	r2, #8
 800ab94:	60da      	str	r2, [r3, #12]

  return 0;
 800ab96:	2300      	movs	r3, #0

}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	460b      	mov	r3, r1
 800abaa:	607a      	str	r2, [r7, #4]
 800abac:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	32b0      	adds	r2, #176	@ 0xb0
 800abb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbc:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 800abc4:	f04f 33ff 	mov.w	r3, #4294967295
 800abc8:	e09a      	b.n	800ad00 <SCSI_ReadCapacity16+0x160>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr,
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	33b0      	adds	r3, #176	@ 0xb0
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	4413      	add	r3, r2
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	f502 711a 	add.w	r1, r2, #616	@ 0x268
 800abe2:	69ba      	ldr	r2, [r7, #24]
 800abe4:	f502 7219 	add.w	r2, r2, #612	@ 0x264
 800abe8:	7af8      	ldrb	r0, [r7, #11]
 800abea:	4798      	blx	r3
 800abec:	4603      	mov	r3, r0
 800abee:	75fb      	strb	r3, [r7, #23]
                                                                             &hmsc->scsi_blk_size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800abf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <SCSI_ReadCapacity16+0x62>
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d108      	bne.n	800ac14 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ac02:	7af9      	ldrb	r1, [r7, #11]
 800ac04:	233a      	movs	r3, #58	@ 0x3a
 800ac06:	2202      	movs	r2, #2
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 fa08 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	e075      	b.n	800ad00 <SCSI_ReadCapacity16+0x160>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	330a      	adds	r3, #10
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	330b      	adds	r3, #11
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ac24:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	330c      	adds	r3, #12
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800ac2e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	320d      	adds	r2, #13
 800ac34:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800ac36:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	61fb      	str	r3, [r7, #28]
 800ac40:	e008      	b.n	800ac54 <SCSI_ReadCapacity16+0xb4>
  {
    hmsc->bot_data[idx] = 0U;
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	4413      	add	r3, r2
 800ac48:	3310      	adds	r3, #16
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	3301      	adds	r3, #1
 800ac52:	61fb      	str	r3, [r7, #28]
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	69fa      	ldr	r2, [r7, #28]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d3f1      	bcc.n	800ac42 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ac64:	3b01      	subs	r3, #1
 800ac66:	0e1b      	lsrs	r3, r3, #24
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	69bb      	ldr	r3, [r7, #24]
 800ac6c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ac74:	3b01      	subs	r3, #1
 800ac76:	0c1b      	lsrs	r3, r3, #16
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ac84:	3b01      	subs	r3, #1
 800ac86:	0a1b      	lsrs	r3, r3, #8
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	3b01      	subs	r3, #1
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800aca4:	161b      	asrs	r3, r3, #24
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800acb2:	141b      	asrs	r3, r3, #16
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800acc0:	0a1b      	lsrs	r3, r3, #8
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	69bb      	ldr	r3, [r7, #24]
 800acd4:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	330a      	adds	r3, #10
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	330b      	adds	r3, #11
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800ace6:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	330c      	adds	r3, #12
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800acf0:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	320d      	adds	r2, #13
 800acf6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800acf8:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	60da      	str	r2, [r3, #12]

  return 0;
 800acfe:	2300      	movs	r3, #0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3720      	adds	r7, #32
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	460b      	mov	r3, r1
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	32b0      	adds	r2, #176	@ 0xb0
 800ad20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad24:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d102      	bne.n	800ad32 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 800ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ad30:	e061      	b.n	800adf6 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	33b0      	adds	r3, #176	@ 0xb0
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f107 0214 	add.w	r2, r7, #20
 800ad48:	f107 0110 	add.w	r1, r7, #16
 800ad4c:	7af8      	ldrb	r0, [r7, #11]
 800ad4e:	4798      	blx	r3
 800ad50:	4603      	mov	r3, r0
 800ad52:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800ad54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d104      	bne.n	800ad66 <SCSI_ReadFormatCapacity+0x5e>
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d108      	bne.n	800ad78 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ad66:	7af9      	ldrb	r1, [r7, #11]
 800ad68:	233a      	movs	r3, #58	@ 0x3a
 800ad6a:	2202      	movs	r2, #2
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 f956 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800ad72:	f04f 33ff 	mov.w	r3, #4294967295
 800ad76:	e03e      	b.n	800adf6 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	83fb      	strh	r3, [r7, #30]
 800ad7c:	e007      	b.n	800ad8e <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800ad7e:	8bfb      	ldrh	r3, [r7, #30]
 800ad80:	69ba      	ldr	r2, [r7, #24]
 800ad82:	4413      	add	r3, r2
 800ad84:	2200      	movs	r2, #0
 800ad86:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800ad88:	8bfb      	ldrh	r3, [r7, #30]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	83fb      	strh	r3, [r7, #30]
 800ad8e:	8bfb      	ldrh	r3, [r7, #30]
 800ad90:	2b0b      	cmp	r3, #11
 800ad92:	d9f4      	bls.n	800ad7e <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	2208      	movs	r2, #8
 800ad98:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	0e1b      	lsrs	r3, r3, #24
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	0c1b      	lsrs	r3, r3, #16
 800adac:	b2da      	uxtb	r2, r3
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	3b01      	subs	r3, #1
 800adb6:	0a1b      	lsrs	r3, r3, #8
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	3b01      	subs	r3, #1
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2202      	movs	r2, #2
 800adce:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800add0:	8abb      	ldrh	r3, [r7, #20]
 800add2:	141b      	asrs	r3, r3, #16
 800add4:	b2da      	uxtb	r2, r3
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800adda:	8abb      	ldrh	r3, [r7, #20]
 800addc:	0a1b      	lsrs	r3, r3, #8
 800adde:	b29b      	uxth	r3, r3
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	69bb      	ldr	r3, [r7, #24]
 800ade4:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800ade6:	8abb      	ldrh	r3, [r7, #20]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	220c      	movs	r2, #12
 800adf2:	60da      	str	r2, [r3, #12]

  return 0;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3720      	adds	r7, #32
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
	...

0800ae00 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	460b      	mov	r3, r1
 800ae0a:	607a      	str	r2, [r7, #4]
 800ae0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	32b0      	adds	r2, #176	@ 0xb0
 800ae18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800ae1e:	2304      	movs	r3, #4
 800ae20:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	e027      	b.n	800ae7e <SCSI_ModeSense6+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	33b0      	adds	r3, #176	@ 0xb0
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	7afa      	ldrb	r2, [r7, #11]
 800ae42:	4610      	mov	r0, r2
 800ae44:	4798      	blx	r3
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d006      	beq.n	800ae5a <SCSI_ModeSense6+0x5a>
  {
    MSC_Mode_Sense6_data[2] |= 0x80U;
 800ae4c:	4b0e      	ldr	r3, [pc, #56]	@ (800ae88 <SCSI_ModeSense6+0x88>)
 800ae4e:	789b      	ldrb	r3, [r3, #2]
 800ae50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	4b0c      	ldr	r3, [pc, #48]	@ (800ae88 <SCSI_ModeSense6+0x88>)
 800ae58:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	8afb      	ldrh	r3, [r7, #22]
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d303      	bcc.n	800ae70 <SCSI_ModeSense6+0x70>
  {
    len = params[4];
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	3304      	adds	r3, #4
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800ae70:	8afb      	ldrh	r3, [r7, #22]
 800ae72:	461a      	mov	r2, r3
 800ae74:	4904      	ldr	r1, [pc, #16]	@ (800ae88 <SCSI_ModeSense6+0x88>)
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f000 fe3e 	bl	800baf8 <SCSI_UpdateBotData>

  return 0;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	2400009c 	.word	0x2400009c

0800ae8c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	460b      	mov	r3, r1
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	32b0      	adds	r2, #176	@ 0xb0
 800aea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800aeaa:	2308      	movs	r3, #8
 800aeac:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d102      	bne.n	800aeba <SCSI_ModeSense10+0x2e>
  {
    return -1;
 800aeb4:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb8:	e027      	b.n	800af0a <SCSI_ModeSense10+0x7e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	33b0      	adds	r3, #176	@ 0xb0
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	7afa      	ldrb	r2, [r7, #11]
 800aece:	4610      	mov	r0, r2
 800aed0:	4798      	blx	r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d006      	beq.n	800aee6 <SCSI_ModeSense10+0x5a>
  {
    MSC_Mode_Sense10_data[3] |= 0x80U;
 800aed8:	4b0e      	ldr	r3, [pc, #56]	@ (800af14 <SCSI_ModeSense10+0x88>)
 800aeda:	78db      	ldrb	r3, [r3, #3]
 800aedc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	4b0c      	ldr	r3, [pc, #48]	@ (800af14 <SCSI_ModeSense10+0x88>)
 800aee4:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	3308      	adds	r3, #8
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	8afb      	ldrh	r3, [r7, #22]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d303      	bcc.n	800aefc <SCSI_ModeSense10+0x70>
  {
    len = params[8];
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3308      	adds	r3, #8
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800aefc:	8afb      	ldrh	r3, [r7, #22]
 800aefe:	461a      	mov	r2, r3
 800af00:	4904      	ldr	r1, [pc, #16]	@ (800af14 <SCSI_ModeSense10+0x88>)
 800af02:	6938      	ldr	r0, [r7, #16]
 800af04:	f000 fdf8 	bl	800baf8 <SCSI_UpdateBotData>

  return 0;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3718      	adds	r7, #24
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	240000a0 	.word	0x240000a0

0800af18 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	460b      	mov	r3, r1
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	32b0      	adds	r2, #176	@ 0xb0
 800af30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af34:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d102      	bne.n	800af42 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800af3c:	f04f 33ff 	mov.w	r3, #4294967295
 800af40:	e069      	b.n	800b016 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800af52:	2320      	movs	r3, #32
 800af54:	2205      	movs	r2, #5
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 f861 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800af5c:	f04f 33ff 	mov.w	r3, #4294967295
 800af60:	e059      	b.n	800b016 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800af62:	2300      	movs	r3, #0
 800af64:	75fb      	strb	r3, [r7, #23]
 800af66:	e007      	b.n	800af78 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	693a      	ldr	r2, [r7, #16]
 800af6c:	4413      	add	r3, r2
 800af6e:	2200      	movs	r2, #0
 800af70:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800af72:	7dfb      	ldrb	r3, [r7, #23]
 800af74:	3301      	adds	r3, #1
 800af76:	75fb      	strb	r3, [r7, #23]
 800af78:	7dfb      	ldrb	r3, [r7, #23]
 800af7a:	2b11      	cmp	r3, #17
 800af7c:	d9f4      	bls.n	800af68 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	2270      	movs	r2, #112	@ 0x70
 800af82:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	220c      	movs	r2, #12
 800af88:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800af96:	429a      	cmp	r2, r3
 800af98:	d02e      	beq.n	800aff8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800afa0:	461a      	mov	r2, r3
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	3248      	adds	r2, #72	@ 0x48
 800afa6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	3348      	adds	r3, #72	@ 0x48
 800afb8:	00db      	lsls	r3, r3, #3
 800afba:	4413      	add	r3, r2
 800afbc:	791a      	ldrb	r2, [r3, #4]
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800afc8:	693a      	ldr	r2, [r7, #16]
 800afca:	3348      	adds	r3, #72	@ 0x48
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	4413      	add	r3, r2
 800afd0:	795a      	ldrb	r2, [r3, #5]
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800afdc:	3301      	adds	r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800afec:	2b04      	cmp	r3, #4
 800afee:	d103      	bne.n	800aff8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	2212      	movs	r2, #18
 800affc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3304      	adds	r3, #4
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	2b12      	cmp	r3, #18
 800b006:	d805      	bhi.n	800b014 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3304      	adds	r3, #4
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800b01e:	b480      	push	{r7}
 800b020:	b085      	sub	sp, #20
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
 800b026:	4608      	mov	r0, r1
 800b028:	4611      	mov	r1, r2
 800b02a:	461a      	mov	r2, r3
 800b02c:	4603      	mov	r3, r0
 800b02e:	70fb      	strb	r3, [r7, #3]
 800b030:	460b      	mov	r3, r1
 800b032:	70bb      	strb	r3, [r7, #2]
 800b034:	4613      	mov	r3, r2
 800b036:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	@ 0xb0
 800b042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b046:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d02c      	beq.n	800b0a8 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800b054:	461a      	mov	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	3248      	adds	r2, #72	@ 0x48
 800b05a:	78b9      	ldrb	r1, [r7, #2]
 800b05c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	3348      	adds	r3, #72	@ 0x48
 800b06a:	00db      	lsls	r3, r3, #3
 800b06c:	4413      	add	r3, r2
 800b06e:	787a      	ldrb	r2, [r7, #1]
 800b070:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	3348      	adds	r3, #72	@ 0x48
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	4413      	add	r3, r2
 800b080:	2200      	movs	r2, #0
 800b082:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800b08a:	3301      	adds	r3, #1
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800b09a:	2b04      	cmp	r3, #4
 800b09c:	d105      	bne.n	800b0aa <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800b0a6:	e000      	b.n	800b0aa <SCSI_SenseCode+0x8c>
    return;
 800b0a8:	bf00      	nop
  }
}
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b086      	sub	sp, #24
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	32b0      	adds	r2, #176	@ 0xb0
 800b0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800b0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b0dc:	e03b      	b.n	800b156 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d10f      	bne.n	800b108 <SCSI_StartStopUnit+0x54>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	3304      	adds	r3, #4
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	f003 0303 	and.w	r3, r3, #3
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d108      	bne.n	800b108 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b0f6:	7af9      	ldrb	r1, [r7, #11]
 800b0f8:	2324      	movs	r3, #36	@ 0x24
 800b0fa:	2205      	movs	r2, #5
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f7ff ff8e 	bl	800b01e <SCSI_SenseCode>

    return -1;
 800b102:	f04f 33ff 	mov.w	r3, #4294967295
 800b106:	e026      	b.n	800b156 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3304      	adds	r3, #4
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	f003 0303 	and.w	r3, r3, #3
 800b112:	2b01      	cmp	r3, #1
 800b114:	d104      	bne.n	800b120 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800b11e:	e016      	b.n	800b14e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3304      	adds	r3, #4
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d104      	bne.n	800b138 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2202      	movs	r2, #2
 800b132:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800b136:	e00a      	b.n	800b14e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	3304      	adds	r3, #4
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	2b03      	cmp	r3, #3
 800b144:	d103      	bne.n	800b14e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2200      	movs	r2, #0
 800b152:	60da      	str	r2, [r3, #12]

  return 0;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b15e:	b480      	push	{r7}
 800b160:	b087      	sub	sp, #28
 800b162:	af00      	add	r7, sp, #0
 800b164:	60f8      	str	r0, [r7, #12]
 800b166:	460b      	mov	r3, r1
 800b168:	607a      	str	r2, [r7, #4]
 800b16a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	32b0      	adds	r2, #176	@ 0xb0
 800b176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b17a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d102      	bne.n	800b188 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 800b182:	f04f 33ff 	mov.w	r3, #4294967295
 800b186:	e011      	b.n	800b1ac <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3304      	adds	r3, #4
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d104      	bne.n	800b19c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800b19a:	e003      	b.n	800b1a4 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	60da      	str	r2, [r3, #12]

  return 0;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	371c      	adds	r7, #28
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	607a      	str	r2, [r7, #4]
 800b1c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	32b0      	adds	r2, #176	@ 0xb0
 800b1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d102      	bne.n	800b1e2 <SCSI_Read10+0x2a>
  {
    return -1;
 800b1dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1e0:	e090      	b.n	800b304 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	7a1b      	ldrb	r3, [r3, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f040 8082 	bne.w	800b2f0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b1f2:	b25b      	sxtb	r3, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	db0a      	blt.n	800b20e <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b1fe:	2320      	movs	r3, #32
 800b200:	2205      	movs	r2, #5
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f7ff ff0b 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b208:	f04f 33ff 	mov.w	r3, #4294967295
 800b20c:	e07a      	b.n	800b304 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b214:	2b02      	cmp	r3, #2
 800b216:	d108      	bne.n	800b22a <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b218:	7af9      	ldrb	r1, [r7, #11]
 800b21a:	233a      	movs	r3, #58	@ 0x3a
 800b21c:	2202      	movs	r2, #2
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7ff fefd 	bl	800b01e <SCSI_SenseCode>

      return -1;
 800b224:	f04f 33ff 	mov.w	r3, #4294967295
 800b228:	e06c      	b.n	800b304 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	33b0      	adds	r3, #176	@ 0xb0
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	7afa      	ldrb	r2, [r7, #11]
 800b23e:	4610      	mov	r0, r2
 800b240:	4798      	blx	r3
 800b242:	4603      	mov	r3, r0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d008      	beq.n	800b25a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b248:	7af9      	ldrb	r1, [r7, #11]
 800b24a:	233a      	movs	r3, #58	@ 0x3a
 800b24c:	2202      	movs	r2, #2
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff fee5 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295
 800b258:	e054      	b.n	800b304 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	3302      	adds	r3, #2
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	3303      	adds	r3, #3
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b26a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3304      	adds	r3, #4
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b274:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	3205      	adds	r2, #5
 800b27a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b27c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3307      	adds	r3, #7
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	021b      	lsls	r3, r3, #8
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	3208      	adds	r2, #8
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	431a      	orrs	r2, r3
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b2a6:	7af9      	ldrb	r1, [r7, #11]
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 fadc 	bl	800b866 <SCSI_CheckAddressRange>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	da02      	bge.n	800b2ba <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b2b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2b8:	e024      	b.n	800b304 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b2c6:	6979      	ldr	r1, [r7, #20]
 800b2c8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800b2cc:	fb01 f303 	mul.w	r3, r1, r3
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d00a      	beq.n	800b2ea <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b2da:	2320      	movs	r3, #32
 800b2dc:	2205      	movs	r2, #5
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff fe9d 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e8:	e00c      	b.n	800b304 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	2202      	movs	r2, #2
 800b2ee:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2f6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b2f8:	7afb      	ldrb	r3, [r7, #11]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f000 fadf 	bl	800b8c0 <SCSI_ProcessRead>
 800b302:	4603      	mov	r3, r0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3718      	adds	r7, #24
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b086      	sub	sp, #24
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	460b      	mov	r3, r1
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	32b0      	adds	r2, #176	@ 0xb0
 800b324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b328:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <SCSI_Read12+0x2a>
  {
    return -1;
 800b330:	f04f 33ff 	mov.w	r3, #4294967295
 800b334:	e09a      	b.n	800b46c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	7a1b      	ldrb	r3, [r3, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 808c 	bne.w	800b458 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b346:	b25b      	sxtb	r3, r3
 800b348:	2b00      	cmp	r3, #0
 800b34a:	db0a      	blt.n	800b362 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b352:	2320      	movs	r3, #32
 800b354:	2205      	movs	r2, #5
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f7ff fe61 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b35c:	f04f 33ff 	mov.w	r3, #4294967295
 800b360:	e084      	b.n	800b46c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800b368:	2b02      	cmp	r3, #2
 800b36a:	d108      	bne.n	800b37e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b36c:	7af9      	ldrb	r1, [r7, #11]
 800b36e:	233a      	movs	r3, #58	@ 0x3a
 800b370:	2202      	movs	r2, #2
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f7ff fe53 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b378:	f04f 33ff 	mov.w	r3, #4294967295
 800b37c:	e076      	b.n	800b46c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	33b0      	adds	r3, #176	@ 0xb0
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	689b      	ldr	r3, [r3, #8]
 800b390:	7afa      	ldrb	r2, [r7, #11]
 800b392:	4610      	mov	r0, r2
 800b394:	4798      	blx	r3
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d008      	beq.n	800b3ae <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b39c:	7af9      	ldrb	r1, [r7, #11]
 800b39e:	233a      	movs	r3, #58	@ 0x3a
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7ff fe3b 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ac:	e05e      	b.n	800b46c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	3302      	adds	r3, #2
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	3303      	adds	r3, #3
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b3be:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b3c8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	3205      	adds	r2, #5
 800b3ce:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800b3d0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	3306      	adds	r3, #6
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	3307      	adds	r3, #7
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b3e8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b3f2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	3209      	adds	r2, #9
 800b3f8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b3fa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b40e:	7af9      	ldrb	r1, [r7, #11]
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 fa28 	bl	800b866 <SCSI_CheckAddressRange>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	da02      	bge.n	800b422 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b41c:	f04f 33ff 	mov.w	r3, #4294967295
 800b420:	e024      	b.n	800b46c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b42e:	6979      	ldr	r1, [r7, #20]
 800b430:	f8b1 1264 	ldrh.w	r1, [r1, #612]	@ 0x264
 800b434:	fb01 f303 	mul.w	r3, r1, r3
 800b438:	429a      	cmp	r2, r3
 800b43a:	d00a      	beq.n	800b452 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b442:	2320      	movs	r3, #32
 800b444:	2205      	movs	r2, #5
 800b446:	68f8      	ldr	r0, [r7, #12]
 800b448:	f7ff fde9 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b44c:	f04f 33ff 	mov.w	r3, #4294967295
 800b450:	e00c      	b.n	800b46c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2202      	movs	r2, #2
 800b456:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b45e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800b460:	7afb      	ldrb	r3, [r7, #11]
 800b462:	4619      	mov	r1, r3
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 fa2b 	bl	800b8c0 <SCSI_ProcessRead>
 800b46a:	4603      	mov	r3, r0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3718      	adds	r7, #24
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	460b      	mov	r3, r1
 800b47e:	607a      	str	r2, [r7, #4]
 800b480:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	32b0      	adds	r2, #176	@ 0xb0
 800b48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b490:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <SCSI_Write10+0x2a>
  {
    return -1;
 800b498:	f04f 33ff 	mov.w	r3, #4294967295
 800b49c:	e0ba      	b.n	800b614 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	7a1b      	ldrb	r3, [r3, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	f040 80b0 	bne.w	800b608 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10a      	bne.n	800b4c8 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	2205      	movs	r2, #5
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f7ff fdae 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c6:	e0a5      	b.n	800b614 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b4ce:	b25b      	sxtb	r3, r3
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	da0a      	bge.n	800b4ea <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b4da:	2320      	movs	r3, #32
 800b4dc:	2205      	movs	r2, #5
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff fd9d 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e8:	e094      	b.n	800b614 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	33b0      	adds	r3, #176	@ 0xb0
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	7afa      	ldrb	r2, [r7, #11]
 800b4fe:	4610      	mov	r0, r2
 800b500:	4798      	blx	r3
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d008      	beq.n	800b51a <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b508:	7af9      	ldrb	r1, [r7, #11]
 800b50a:	233a      	movs	r3, #58	@ 0x3a
 800b50c:	2202      	movs	r2, #2
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7ff fd85 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b514:	f04f 33ff 	mov.w	r3, #4294967295
 800b518:	e07c      	b.n	800b614 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	33b0      	adds	r3, #176	@ 0xb0
 800b524:	009b      	lsls	r3, r3, #2
 800b526:	4413      	add	r3, r2
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	7afa      	ldrb	r2, [r7, #11]
 800b52e:	4610      	mov	r0, r2
 800b530:	4798      	blx	r3
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d008      	beq.n	800b54a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b538:	7af9      	ldrb	r1, [r7, #11]
 800b53a:	2327      	movs	r3, #39	@ 0x27
 800b53c:	2202      	movs	r2, #2
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	f7ff fd6d 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b544:	f04f 33ff 	mov.w	r3, #4294967295
 800b548:	e064      	b.n	800b614 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	3302      	adds	r3, #2
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3303      	adds	r3, #3
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b55a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3304      	adds	r3, #4
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b564:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	3205      	adds	r2, #5
 800b56a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b56c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	3307      	adds	r3, #7
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	3208      	adds	r2, #8
 800b580:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800b582:	431a      	orrs	r2, r3
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b596:	7af9      	ldrb	r1, [r7, #11]
 800b598:	68f8      	ldr	r0, [r7, #12]
 800b59a:	f000 f964 	bl	800b866 <SCSI_CheckAddressRange>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	da02      	bge.n	800b5aa <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a8:	e034      	b.n	800b614 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b5b6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ba:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d00a      	beq.n	800b5de <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b5ce:	2320      	movs	r3, #32
 800b5d0:	2205      	movs	r2, #5
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f7ff fd23 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5dc:	e01a      	b.n	800b614 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5e4:	bf28      	it	cs
 800b5e6:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b5ea:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b5f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b61c <SCSI_Write10+0x1a8>)
 800b5f4:	7819      	ldrb	r1, [r3, #0]
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	f103 0210 	add.w	r2, r3, #16
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f002 fa93 	bl	800db2a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800b604:	2300      	movs	r3, #0
 800b606:	e005      	b.n	800b614 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 800b608:	7afb      	ldrb	r3, [r7, #11]
 800b60a:	4619      	mov	r1, r3
 800b60c:	68f8      	ldr	r0, [r7, #12]
 800b60e:	f000 f9dd 	bl	800b9cc <SCSI_ProcessWrite>
 800b612:	4603      	mov	r3, r0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3718      	adds	r7, #24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	2400008b 	.word	0x2400008b

0800b620 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b086      	sub	sp, #24
 800b624:	af00      	add	r7, sp, #0
 800b626:	60f8      	str	r0, [r7, #12]
 800b628:	460b      	mov	r3, r1
 800b62a:	607a      	str	r2, [r7, #4]
 800b62c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	32b0      	adds	r2, #176	@ 0xb0
 800b638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b63c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d102      	bne.n	800b64a <SCSI_Write12+0x2a>
  {
    return -1;
 800b644:	f04f 33ff 	mov.w	r3, #4294967295
 800b648:	e0ca      	b.n	800b7e0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	7a1b      	ldrb	r3, [r3, #8]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f040 80c0 	bne.w	800b7d4 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10a      	bne.n	800b674 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b664:	2320      	movs	r3, #32
 800b666:	2205      	movs	r2, #5
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f7ff fcd8 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b66e:	f04f 33ff 	mov.w	r3, #4294967295
 800b672:	e0b5      	b.n	800b7e0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800b67a:	b25b      	sxtb	r3, r3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	da0a      	bge.n	800b696 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b686:	2320      	movs	r3, #32
 800b688:	2205      	movs	r2, #5
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7ff fcc7 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b690:	f04f 33ff 	mov.w	r3, #4294967295
 800b694:	e0a4      	b.n	800b7e0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	33b0      	adds	r3, #176	@ 0xb0
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	7afa      	ldrb	r2, [r7, #11]
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4798      	blx	r3
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d00b      	beq.n	800b6cc <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800b6b4:	7af9      	ldrb	r1, [r7, #11]
 800b6b6:	233a      	movs	r3, #58	@ 0x3a
 800b6b8:	2202      	movs	r2, #2
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fcaf 	bl	800b01e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2205      	movs	r2, #5
 800b6c4:	721a      	strb	r2, [r3, #8]
      return -1;
 800b6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ca:	e089      	b.n	800b7e0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	33b0      	adds	r3, #176	@ 0xb0
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4413      	add	r3, r2
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	7afa      	ldrb	r2, [r7, #11]
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	4798      	blx	r3
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00b      	beq.n	800b702 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800b6ea:	7af9      	ldrb	r1, [r7, #11]
 800b6ec:	2327      	movs	r3, #39	@ 0x27
 800b6ee:	2202      	movs	r2, #2
 800b6f0:	68f8      	ldr	r0, [r7, #12]
 800b6f2:	f7ff fc94 	bl	800b01e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	2205      	movs	r2, #5
 800b6fa:	721a      	strb	r2, [r3, #8]
      return -1;
 800b6fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b700:	e06e      	b.n	800b7e0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3302      	adds	r3, #2
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	3303      	adds	r3, #3
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b712:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	3304      	adds	r3, #4
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800b71c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	3205      	adds	r2, #5
 800b722:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800b724:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	3306      	adds	r3, #6
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3307      	adds	r3, #7
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b73c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3308      	adds	r3, #8
 800b742:	781b      	ldrb	r3, [r3, #0]
 800b744:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800b746:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	3209      	adds	r2, #9
 800b74c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800b74e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b762:	7af9      	ldrb	r1, [r7, #11]
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f000 f87e 	bl	800b866 <SCSI_CheckAddressRange>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	da02      	bge.n	800b776 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800b770:	f04f 33ff 	mov.w	r3, #4294967295
 800b774:	e034      	b.n	800b7e0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b782:	fb02 f303 	mul.w	r3, r2, r3
 800b786:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	429a      	cmp	r2, r3
 800b792:	d00a      	beq.n	800b7aa <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800b79a:	2320      	movs	r3, #32
 800b79c:	2205      	movs	r2, #5
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f7ff fc3d 	bl	800b01e <SCSI_SenseCode>
      return -1;
 800b7a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a8:	e01a      	b.n	800b7e0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7b0:	bf28      	it	cs
 800b7b2:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b7b6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800b7be:	4b0a      	ldr	r3, [pc, #40]	@ (800b7e8 <SCSI_Write12+0x1c8>)
 800b7c0:	7819      	ldrb	r1, [r3, #0]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f103 0210 	add.w	r2, r3, #16
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f002 f9ad 	bl	800db2a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e005      	b.n	800b7e0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 800b7d4:	7afb      	ldrb	r3, [r7, #11]
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	68f8      	ldr	r0, [r7, #12]
 800b7da:	f000 f8f7 	bl	800b9cc <SCSI_ProcessWrite>
 800b7de:	4603      	mov	r3, r0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	2400008b 	.word	0x2400008b

0800b7ec <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	607a      	str	r2, [r7, #4]
 800b7f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	32b0      	adds	r2, #176	@ 0xb0
 800b804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b808:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <SCSI_Verify10+0x2a>
  {
    return -1;
 800b810:	f04f 33ff 	mov.w	r3, #4294967295
 800b814:	e023      	b.n	800b85e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3301      	adds	r3, #1
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d008      	beq.n	800b836 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800b824:	7af9      	ldrb	r1, [r7, #11]
 800b826:	2324      	movs	r3, #36	@ 0x24
 800b828:	2205      	movs	r2, #5
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f7ff fbf7 	bl	800b01e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800b830:	f04f 33ff 	mov.w	r3, #4294967295
 800b834:	e013      	b.n	800b85e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b842:	7af9      	ldrb	r1, [r7, #11]
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f000 f80e 	bl	800b866 <SCSI_CheckAddressRange>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	da02      	bge.n	800b856 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 800b850:	f04f 33ff 	mov.w	r3, #4294967295
 800b854:	e003      	b.n	800b85e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2200      	movs	r2, #0
 800b85a:	60da      	str	r2, [r3, #12]

  return 0;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3718      	adds	r7, #24
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b086      	sub	sp, #24
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
 800b872:	460b      	mov	r3, r1
 800b874:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	32b0      	adds	r2, #176	@ 0xb0
 800b880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b884:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 800b88c:	f04f 33ff 	mov.w	r3, #4294967295
 800b890:	e011      	b.n	800b8b6 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	441a      	add	r2, r3
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f8d3 3268 	ldr.w	r3, [r3, #616]	@ 0x268
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d908      	bls.n	800b8b4 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800b8a2:	7af9      	ldrb	r1, [r7, #11]
 800b8a4:	2321      	movs	r3, #33	@ 0x21
 800b8a6:	2205      	movs	r2, #5
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f7ff fbb8 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800b8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b2:	e000      	b.n	800b8b6 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
	...

0800b8c0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b8c0:	b590      	push	{r4, r7, lr}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	32b0      	adds	r2, #176	@ 0xb0
 800b8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8da:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d102      	bne.n	800b8e8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 800b8e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e6:	e06a      	b.n	800b9be <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800b8f4:	fb02 f303 	mul.w	r3, r2, r3
 800b8f8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b900:	bf28      	it	cs
 800b902:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800b906:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	33b0      	adds	r3, #176	@ 0xb0
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	691c      	ldr	r4, [r3, #16]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f103 0110 	add.w	r1, r3, #16
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b92c:	4618      	mov	r0, r3
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 800b934:	b29b      	uxth	r3, r3
 800b936:	78f8      	ldrb	r0, [r7, #3]
 800b938:	47a0      	blx	r4
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	da08      	bge.n	800b952 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800b940:	78f9      	ldrb	r1, [r7, #3]
 800b942:	2311      	movs	r3, #17
 800b944:	2204      	movs	r2, #4
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff fb69 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800b94c:	f04f 33ff 	mov.w	r3, #4294967295
 800b950:	e035      	b.n	800b9be <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 800b952:	4b1d      	ldr	r3, [pc, #116]	@ (800b9c8 <SCSI_ProcessRead+0x108>)
 800b954:	7819      	ldrb	r1, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f103 0210 	add.w	r2, r3, #16
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f002 f8c2 	bl	800dae8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b970:	4619      	mov	r1, r3
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	fbb3 f3f1 	udiv	r3, r3, r1
 800b978:	441a      	add	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800b98c:	4619      	mov	r1, r3
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	fbb3 f3f1 	udiv	r3, r3, r1
 800b994:	1ad2      	subs	r2, r2, r3
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	1ad2      	subs	r2, r2, r3
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d102      	bne.n	800b9bc <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2203      	movs	r2, #3
 800b9ba:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3714      	adds	r7, #20
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd90      	pop	{r4, r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	2400008a 	.word	0x2400008a

0800b9cc <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800b9cc:	b590      	push	{r4, r7, lr}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	32b0      	adds	r2, #176	@ 0xb0
 800b9e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 800b9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f2:	e07a      	b.n	800baea <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800ba00:	fb02 f303 	mul.w	r3, r2, r3
 800ba04:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ba0c:	bf28      	it	cs
 800ba0e:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800ba12:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	33b0      	adds	r3, #176	@ 0xb0
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	695c      	ldr	r4, [r3, #20]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f103 0110 	add.w	r1, r3, #16
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800ba38:	4618      	mov	r0, r3
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	78f8      	ldrb	r0, [r7, #3]
 800ba44:	47a0      	blx	r4
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	da08      	bge.n	800ba5e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800ba4c:	78f9      	ldrb	r1, [r7, #3]
 800ba4e:	2303      	movs	r3, #3
 800ba50:	2204      	movs	r2, #4
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fae3 	bl	800b01e <SCSI_SenseCode>
    return -1;
 800ba58:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5c:	e045      	b.n	800baea <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8d3 226c 	ldr.w	r2, [r3, #620]	@ 0x26c
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba72:	441a      	add	r2, r3
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8c3 226c 	str.w	r2, [r3, #620]	@ 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 2270 	ldr.w	r2, [r3, #624]	@ 0x270
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f8b3 3264 	ldrh.w	r3, [r3, #612]	@ 0x264
 800ba86:	4619      	mov	r1, r3
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba8e:	1ad2      	subs	r2, r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8c3 2270 	str.w	r2, [r3, #624]	@ 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	1ad2      	subs	r2, r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (hmsc->scsi_blk_len == 0U)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800bab0:	2100      	movs	r1, #0
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f7fe fce8 	bl	800a488 <MSC_BOT_SendCSW>
 800bab8:	e016      	b.n	800bae8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	@ 0x264
 800bac6:	fb02 f303 	mul.w	r3, r2, r3
 800baca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bace:	bf28      	it	cs
 800bad0:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800bad4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800bad6:	4b07      	ldr	r3, [pc, #28]	@ (800baf4 <SCSI_ProcessWrite+0x128>)
 800bad8:	7819      	ldrb	r1, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f103 0210 	add.w	r2, r3, #16
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f002 f821 	bl	800db2a <USBD_LL_PrepareReceive>
  }

  return 0;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3714      	adds	r7, #20
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd90      	pop	{r4, r7, pc}
 800baf2:	bf00      	nop
 800baf4:	2400008b 	.word	0x2400008b

0800baf8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	4613      	mov	r3, r2
 800bb04:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800bb06:	88fb      	ldrh	r3, [r7, #6]
 800bb08:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d102      	bne.n	800bb16 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800bb10:	f04f 33ff 	mov.w	r3, #4294967295
 800bb14:	e013      	b.n	800bb3e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 800bb16:	8afa      	ldrh	r2, [r7, #22]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800bb1c:	e00b      	b.n	800bb36 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800bb1e:	8afb      	ldrh	r3, [r7, #22]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800bb24:	8afb      	ldrh	r3, [r7, #22]
 800bb26:	68ba      	ldr	r2, [r7, #8]
 800bb28:	441a      	add	r2, r3
 800bb2a:	8afb      	ldrh	r3, [r7, #22]
 800bb2c:	7811      	ldrb	r1, [r2, #0]
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	4413      	add	r3, r2
 800bb32:	460a      	mov	r2, r1
 800bb34:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800bb36:	8afb      	ldrh	r3, [r7, #22]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1f0      	bne.n	800bb1e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	371c      	adds	r7, #28
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr

0800bb4a <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb4a:	b580      	push	{r7, lr}
 800bb4c:	b086      	sub	sp, #24
 800bb4e:	af00      	add	r7, sp, #0
 800bb50:	60f8      	str	r0, [r7, #12]
 800bb52:	60b9      	str	r1, [r7, #8]
 800bb54:	4613      	mov	r3, r2
 800bb56:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bb5e:	2303      	movs	r3, #3
 800bb60:	e01f      	b.n	800bba2 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d003      	beq.n	800bb88 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	79fa      	ldrb	r2, [r7, #7]
 800bb94:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f001 fe4e 	bl	800d838 <USBD_LL_Init>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d101      	bne.n	800bbc2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bbbe:	2303      	movs	r3, #3
 800bbc0:	e025      	b.n	800bc0e <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	32ae      	adds	r2, #174	@ 0xae
 800bbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00f      	beq.n	800bbfe <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	32ae      	adds	r2, #174	@ 0xae
 800bbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbee:	f107 020e 	add.w	r2, r7, #14
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	4798      	blx	r3
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bc04:	1c5a      	adds	r2, r3, #1
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b082      	sub	sp, #8
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f001 fe5a 	bl	800d8d8 <USBD_LL_Start>
 800bc24:	4603      	mov	r3, r0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b083      	sub	sp, #12
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc36:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc50:	2300      	movs	r3, #0
 800bc52:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d009      	beq.n	800bc72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	78fa      	ldrb	r2, [r7, #3]
 800bc68:	4611      	mov	r1, r2
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	4798      	blx	r3
 800bc6e:	4603      	mov	r3, r0
 800bc70:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3710      	adds	r7, #16
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	460b      	mov	r3, r1
 800bc86:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	78fa      	ldrb	r2, [r7, #3]
 800bc96:	4611      	mov	r1, r2
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	4798      	blx	r3
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d001      	beq.n	800bca6 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bca2:	2303      	movs	r3, #3
 800bca4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bcc0:	6839      	ldr	r1, [r7, #0]
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f001 f935 	bl	800cf32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bce4:	f003 031f 	and.w	r3, r3, #31
 800bce8:	2b02      	cmp	r3, #2
 800bcea:	d01a      	beq.n	800bd22 <USBD_LL_SetupStage+0x72>
 800bcec:	2b02      	cmp	r3, #2
 800bcee:	d822      	bhi.n	800bd36 <USBD_LL_SetupStage+0x86>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d002      	beq.n	800bcfa <USBD_LL_SetupStage+0x4a>
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d00a      	beq.n	800bd0e <USBD_LL_SetupStage+0x5e>
 800bcf8:	e01d      	b.n	800bd36 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd00:	4619      	mov	r1, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fb62 	bl	800c3cc <USBD_StdDevReq>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	73fb      	strb	r3, [r7, #15]
      break;
 800bd0c:	e020      	b.n	800bd50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd14:	4619      	mov	r1, r3
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fbca 	bl	800c4b0 <USBD_StdItfReq>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]
      break;
 800bd20:	e016      	b.n	800bd50 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fc2c 	bl	800c588 <USBD_StdEPReq>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
      break;
 800bd34:	e00c      	b.n	800bd50 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bd3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bd40:	b2db      	uxtb	r3, r3
 800bd42:	4619      	mov	r1, r3
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f001 fe46 	bl	800d9d6 <USBD_LL_StallEP>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	73fb      	strb	r3, [r7, #15]
      break;
 800bd4e:	bf00      	nop
  }

  return ret;
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b086      	sub	sp, #24
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	60f8      	str	r0, [r7, #12]
 800bd62:	460b      	mov	r3, r1
 800bd64:	607a      	str	r2, [r7, #4]
 800bd66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800bd6c:	7afb      	ldrb	r3, [r7, #11]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d16e      	bne.n	800be50 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bd78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	f040 8098 	bne.w	800beb6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	689a      	ldr	r2, [r3, #8]
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d913      	bls.n	800bdba <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	689a      	ldr	r2, [r3, #8]
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	1ad2      	subs	r2, r2, r3
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	68da      	ldr	r2, [r3, #12]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	bf28      	it	cs
 800bdac:	4613      	movcs	r3, r2
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f001 f9a0 	bl	800d0f8 <USBD_CtlContinueRx>
 800bdb8:	e07d      	b.n	800beb6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bdc0:	f003 031f 	and.w	r3, r3, #31
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d014      	beq.n	800bdf2 <USBD_LL_DataOutStage+0x98>
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d81d      	bhi.n	800be08 <USBD_LL_DataOutStage+0xae>
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d002      	beq.n	800bdd6 <USBD_LL_DataOutStage+0x7c>
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d003      	beq.n	800bddc <USBD_LL_DataOutStage+0x82>
 800bdd4:	e018      	b.n	800be08 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	75bb      	strb	r3, [r7, #22]
            break;
 800bdda:	e018      	b.n	800be0e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	4619      	mov	r1, r3
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 fa64 	bl	800c2b4 <USBD_CoreFindIF>
 800bdec:	4603      	mov	r3, r0
 800bdee:	75bb      	strb	r3, [r7, #22]
            break;
 800bdf0:	e00d      	b.n	800be0e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f000 fa66 	bl	800c2ce <USBD_CoreFindEP>
 800be02:	4603      	mov	r3, r0
 800be04:	75bb      	strb	r3, [r7, #22]
            break;
 800be06:	e002      	b.n	800be0e <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800be08:	2300      	movs	r3, #0
 800be0a:	75bb      	strb	r3, [r7, #22]
            break;
 800be0c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800be0e:	7dbb      	ldrb	r3, [r7, #22]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d119      	bne.n	800be48 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b03      	cmp	r3, #3
 800be1e:	d113      	bne.n	800be48 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800be20:	7dba      	ldrb	r2, [r7, #22]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	32ae      	adds	r2, #174	@ 0xae
 800be26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d00b      	beq.n	800be48 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800be30:	7dba      	ldrb	r2, [r7, #22]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800be38:	7dba      	ldrb	r2, [r7, #22]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	32ae      	adds	r2, #174	@ 0xae
 800be3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	f001 f966 	bl	800d11a <USBD_CtlSendStatus>
 800be4e:	e032      	b.n	800beb6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800be50:	7afb      	ldrb	r3, [r7, #11]
 800be52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be56:	b2db      	uxtb	r3, r3
 800be58:	4619      	mov	r1, r3
 800be5a:	68f8      	ldr	r0, [r7, #12]
 800be5c:	f000 fa37 	bl	800c2ce <USBD_CoreFindEP>
 800be60:	4603      	mov	r3, r0
 800be62:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be64:	7dbb      	ldrb	r3, [r7, #22]
 800be66:	2bff      	cmp	r3, #255	@ 0xff
 800be68:	d025      	beq.n	800beb6 <USBD_LL_DataOutStage+0x15c>
 800be6a:	7dbb      	ldrb	r3, [r7, #22]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d122      	bne.n	800beb6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b03      	cmp	r3, #3
 800be7a:	d117      	bne.n	800beac <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800be7c:	7dba      	ldrb	r2, [r7, #22]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	32ae      	adds	r2, #174	@ 0xae
 800be82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00f      	beq.n	800beac <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800be8c:	7dba      	ldrb	r2, [r7, #22]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800be94:	7dba      	ldrb	r2, [r7, #22]
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	32ae      	adds	r2, #174	@ 0xae
 800be9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	7afa      	ldrb	r2, [r7, #11]
 800bea2:	4611      	mov	r1, r2
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	4798      	blx	r3
 800bea8:	4603      	mov	r3, r0
 800beaa:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800beac:	7dfb      	ldrb	r3, [r7, #23]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800beb2:	7dfb      	ldrb	r3, [r7, #23]
 800beb4:	e000      	b.n	800beb8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	460b      	mov	r3, r1
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bece:	7afb      	ldrb	r3, [r7, #11]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d16f      	bne.n	800bfb4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3314      	adds	r3, #20
 800bed8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d15a      	bne.n	800bf9a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	689a      	ldr	r2, [r3, #8]
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	429a      	cmp	r2, r3
 800beee:	d914      	bls.n	800bf1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	689a      	ldr	r2, [r3, #8]
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	68db      	ldr	r3, [r3, #12]
 800bef8:	1ad2      	subs	r2, r2, r3
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	689b      	ldr	r3, [r3, #8]
 800bf02:	461a      	mov	r2, r3
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f001 f8e5 	bl	800d0d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2100      	movs	r1, #0
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f001 fe09 	bl	800db2a <USBD_LL_PrepareReceive>
 800bf18:	e03f      	b.n	800bf9a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	68da      	ldr	r2, [r3, #12]
 800bf1e:	693b      	ldr	r3, [r7, #16]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d11c      	bne.n	800bf60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	685a      	ldr	r2, [r3, #4]
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d316      	bcc.n	800bf60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d20f      	bcs.n	800bf60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bf40:	2200      	movs	r2, #0
 800bf42:	2100      	movs	r1, #0
 800bf44:	68f8      	ldr	r0, [r7, #12]
 800bf46:	f001 f8c6 	bl	800d0d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bf52:	2300      	movs	r3, #0
 800bf54:	2200      	movs	r2, #0
 800bf56:	2100      	movs	r1, #0
 800bf58:	68f8      	ldr	r0, [r7, #12]
 800bf5a:	f001 fde6 	bl	800db2a <USBD_LL_PrepareReceive>
 800bf5e:	e01c      	b.n	800bf9a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	2b03      	cmp	r3, #3
 800bf6a:	d10f      	bne.n	800bf8c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d009      	beq.n	800bf8c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf8c:	2180      	movs	r1, #128	@ 0x80
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	f001 fd21 	bl	800d9d6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f001 f8d3 	bl	800d140 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d03a      	beq.n	800c01a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bfa4:	68f8      	ldr	r0, [r7, #12]
 800bfa6:	f7ff fe42 	bl	800bc2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2200      	movs	r2, #0
 800bfae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bfb2:	e032      	b.n	800c01a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bfb4:	7afb      	ldrb	r3, [r7, #11]
 800bfb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 f985 	bl	800c2ce <USBD_CoreFindEP>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfc8:	7dfb      	ldrb	r3, [r7, #23]
 800bfca:	2bff      	cmp	r3, #255	@ 0xff
 800bfcc:	d025      	beq.n	800c01a <USBD_LL_DataInStage+0x15a>
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d122      	bne.n	800c01a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	2b03      	cmp	r3, #3
 800bfde:	d11c      	bne.n	800c01a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bfe0:	7dfa      	ldrb	r2, [r7, #23]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	32ae      	adds	r2, #174	@ 0xae
 800bfe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d014      	beq.n	800c01a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bff0:	7dfa      	ldrb	r2, [r7, #23]
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bff8:	7dfa      	ldrb	r2, [r7, #23]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	32ae      	adds	r2, #174	@ 0xae
 800bffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	7afa      	ldrb	r2, [r7, #11]
 800c006:	4611      	mov	r1, r2
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	4798      	blx	r3
 800c00c:	4603      	mov	r3, r0
 800c00e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c010:	7dbb      	ldrb	r3, [r7, #22]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c016:	7dbb      	ldrb	r3, [r7, #22]
 800c018:	e000      	b.n	800c01c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3718      	adds	r7, #24
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2200      	movs	r2, #0
 800c04a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d014      	beq.n	800c08a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d00e      	beq.n	800c08a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	6852      	ldr	r2, [r2, #4]
 800c078:	b2d2      	uxtb	r2, r2
 800c07a:	4611      	mov	r1, r2
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	4798      	blx	r3
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d001      	beq.n	800c08a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c086:	2303      	movs	r3, #3
 800c088:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c08a:	2340      	movs	r3, #64	@ 0x40
 800c08c:	2200      	movs	r2, #0
 800c08e:	2100      	movs	r1, #0
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f001 fc3c 	bl	800d90e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2240      	movs	r2, #64	@ 0x40
 800c0a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c0a6:	2340      	movs	r3, #64	@ 0x40
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	2180      	movs	r1, #128	@ 0x80
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 fc2e 	bl	800d90e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2240      	movs	r2, #64	@ 0x40
 800c0bc:	621a      	str	r2, [r3, #32]

  return ret;
 800c0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b083      	sub	sp, #12
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	78fa      	ldrb	r2, [r7, #3]
 800c0d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f6:	b2db      	uxtb	r3, r3
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	d006      	beq.n	800c10a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c102:	b2da      	uxtb	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2204      	movs	r2, #4
 800c10e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	2b04      	cmp	r3, #4
 800c132:	d106      	bne.n	800c142 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b03      	cmp	r3, #3
 800c162:	d110      	bne.n	800c186 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00b      	beq.n	800c186 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d005      	beq.n	800c186 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c180:	69db      	ldr	r3, [r3, #28]
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c186:	2300      	movs	r3, #0
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	32ae      	adds	r2, #174	@ 0xae
 800c1a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d101      	bne.n	800c1b2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e01c      	b.n	800c1ec <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d115      	bne.n	800c1ea <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	32ae      	adds	r2, #174	@ 0xae
 800c1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00b      	beq.n	800c1ea <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	32ae      	adds	r2, #174	@ 0xae
 800c1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	78fa      	ldrb	r2, [r7, #3]
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c1ea:	2300      	movs	r3, #0
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	32ae      	adds	r2, #174	@ 0xae
 800c20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d101      	bne.n	800c216 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c212:	2303      	movs	r3, #3
 800c214:	e01c      	b.n	800c250 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	2b03      	cmp	r3, #3
 800c220:	d115      	bne.n	800c24e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	32ae      	adds	r2, #174	@ 0xae
 800c22c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00b      	beq.n	800c24e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	32ae      	adds	r2, #174	@ 0xae
 800c240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c246:	78fa      	ldrb	r2, [r7, #3]
 800c248:	4611      	mov	r1, r2
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	370c      	adds	r7, #12
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c26e:	b580      	push	{r7, lr}
 800c270:	b084      	sub	sp, #16
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c276:	2300      	movs	r3, #0
 800c278:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00e      	beq.n	800c2aa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	6852      	ldr	r2, [r2, #4]
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	4611      	mov	r1, r2
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	4798      	blx	r3
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d001      	beq.n	800c2aa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c2c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	370c      	adds	r7, #12
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2cc:	4770      	bx	lr

0800c2ce <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	460b      	mov	r3, r1
 800c2d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c2da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	370c      	adds	r7, #12
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b086      	sub	sp, #24
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	885b      	ldrh	r3, [r3, #2]
 800c304:	b29b      	uxth	r3, r3
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	7812      	ldrb	r2, [r2, #0]
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d91f      	bls.n	800c34e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c314:	e013      	b.n	800c33e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c316:	f107 030a 	add.w	r3, r7, #10
 800c31a:	4619      	mov	r1, r3
 800c31c:	6978      	ldr	r0, [r7, #20]
 800c31e:	f000 f81b 	bl	800c358 <USBD_GetNextDesc>
 800c322:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	785b      	ldrb	r3, [r3, #1]
 800c328:	2b05      	cmp	r3, #5
 800c32a:	d108      	bne.n	800c33e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	789b      	ldrb	r3, [r3, #2]
 800c334:	78fa      	ldrb	r2, [r7, #3]
 800c336:	429a      	cmp	r2, r3
 800c338:	d008      	beq.n	800c34c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c33a:	2300      	movs	r3, #0
 800c33c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	885b      	ldrh	r3, [r3, #2]
 800c342:	b29a      	uxth	r2, r3
 800c344:	897b      	ldrh	r3, [r7, #10]
 800c346:	429a      	cmp	r2, r3
 800c348:	d8e5      	bhi.n	800c316 <USBD_GetEpDesc+0x2e>
 800c34a:	e000      	b.n	800c34e <USBD_GetEpDesc+0x66>
          break;
 800c34c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c34e:	693b      	ldr	r3, [r7, #16]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3718      	adds	r7, #24
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}

0800c358 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	68fa      	ldr	r2, [r7, #12]
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	4413      	add	r3, r2
 800c370:	b29a      	uxth	r2, r3
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4413      	add	r3, r2
 800c380:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c382:	68fb      	ldr	r3, [r7, #12]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3714      	adds	r7, #20
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	781b      	ldrb	r3, [r3, #0]
 800c3a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c3ae:	8a3b      	ldrh	r3, [r7, #16]
 800c3b0:	021b      	lsls	r3, r3, #8
 800c3b2:	b21a      	sxth	r2, r3
 800c3b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	b21b      	sxth	r3, r3
 800c3bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c3be:	89fb      	ldrh	r3, [r7, #14]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	371c      	adds	r7, #28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c3e2:	2b40      	cmp	r3, #64	@ 0x40
 800c3e4:	d005      	beq.n	800c3f2 <USBD_StdDevReq+0x26>
 800c3e6:	2b40      	cmp	r3, #64	@ 0x40
 800c3e8:	d857      	bhi.n	800c49a <USBD_StdDevReq+0xce>
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00f      	beq.n	800c40e <USBD_StdDevReq+0x42>
 800c3ee:	2b20      	cmp	r3, #32
 800c3f0:	d153      	bne.n	800c49a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	32ae      	adds	r2, #174	@ 0xae
 800c3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	4798      	blx	r3
 800c408:	4603      	mov	r3, r0
 800c40a:	73fb      	strb	r3, [r7, #15]
      break;
 800c40c:	e04a      	b.n	800c4a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	785b      	ldrb	r3, [r3, #1]
 800c412:	2b09      	cmp	r3, #9
 800c414:	d83b      	bhi.n	800c48e <USBD_StdDevReq+0xc2>
 800c416:	a201      	add	r2, pc, #4	@ (adr r2, 800c41c <USBD_StdDevReq+0x50>)
 800c418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41c:	0800c471 	.word	0x0800c471
 800c420:	0800c485 	.word	0x0800c485
 800c424:	0800c48f 	.word	0x0800c48f
 800c428:	0800c47b 	.word	0x0800c47b
 800c42c:	0800c48f 	.word	0x0800c48f
 800c430:	0800c44f 	.word	0x0800c44f
 800c434:	0800c445 	.word	0x0800c445
 800c438:	0800c48f 	.word	0x0800c48f
 800c43c:	0800c467 	.word	0x0800c467
 800c440:	0800c459 	.word	0x0800c459
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c444:	6839      	ldr	r1, [r7, #0]
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 fa3c 	bl	800c8c4 <USBD_GetDescriptor>
          break;
 800c44c:	e024      	b.n	800c498 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 fbcb 	bl	800cbec <USBD_SetAddress>
          break;
 800c456:	e01f      	b.n	800c498 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fc0a 	bl	800cc74 <USBD_SetConfig>
 800c460:	4603      	mov	r3, r0
 800c462:	73fb      	strb	r3, [r7, #15]
          break;
 800c464:	e018      	b.n	800c498 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fcad 	bl	800cdc8 <USBD_GetConfig>
          break;
 800c46e:	e013      	b.n	800c498 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c470:	6839      	ldr	r1, [r7, #0]
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fcde 	bl	800ce34 <USBD_GetStatus>
          break;
 800c478:	e00e      	b.n	800c498 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c47a:	6839      	ldr	r1, [r7, #0]
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f000 fd0d 	bl	800ce9c <USBD_SetFeature>
          break;
 800c482:	e009      	b.n	800c498 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fd31 	bl	800ceee <USBD_ClrFeature>
          break;
 800c48c:	e004      	b.n	800c498 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fd88 	bl	800cfa6 <USBD_CtlError>
          break;
 800c496:	bf00      	nop
      }
      break;
 800c498:	e004      	b.n	800c4a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c49a:	6839      	ldr	r1, [r7, #0]
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fd82 	bl	800cfa6 <USBD_CtlError>
      break;
 800c4a2:	bf00      	nop
  }

  return ret;
 800c4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop

0800c4b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c4c6:	2b40      	cmp	r3, #64	@ 0x40
 800c4c8:	d005      	beq.n	800c4d6 <USBD_StdItfReq+0x26>
 800c4ca:	2b40      	cmp	r3, #64	@ 0x40
 800c4cc:	d852      	bhi.n	800c574 <USBD_StdItfReq+0xc4>
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <USBD_StdItfReq+0x26>
 800c4d2:	2b20      	cmp	r3, #32
 800c4d4:	d14e      	bne.n	800c574 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d840      	bhi.n	800c566 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	889b      	ldrh	r3, [r3, #4]
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d836      	bhi.n	800c55c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	889b      	ldrh	r3, [r3, #4]
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7ff fedc 	bl	800c2b4 <USBD_CoreFindIF>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c500:	7bbb      	ldrb	r3, [r7, #14]
 800c502:	2bff      	cmp	r3, #255	@ 0xff
 800c504:	d01d      	beq.n	800c542 <USBD_StdItfReq+0x92>
 800c506:	7bbb      	ldrb	r3, [r7, #14]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d11a      	bne.n	800c542 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c50c:	7bba      	ldrb	r2, [r7, #14]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	32ae      	adds	r2, #174	@ 0xae
 800c512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00f      	beq.n	800c53c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c51c:	7bba      	ldrb	r2, [r7, #14]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c524:	7bba      	ldrb	r2, [r7, #14]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	32ae      	adds	r2, #174	@ 0xae
 800c52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	4798      	blx	r3
 800c536:	4603      	mov	r3, r0
 800c538:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c53a:	e004      	b.n	800c546 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c53c:	2303      	movs	r3, #3
 800c53e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c540:	e001      	b.n	800c546 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c542:	2303      	movs	r3, #3
 800c544:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	88db      	ldrh	r3, [r3, #6]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d110      	bne.n	800c570 <USBD_StdItfReq+0xc0>
 800c54e:	7bfb      	ldrb	r3, [r7, #15]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d10d      	bne.n	800c570 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fde0 	bl	800d11a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c55a:	e009      	b.n	800c570 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 fd21 	bl	800cfa6 <USBD_CtlError>
          break;
 800c564:	e004      	b.n	800c570 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fd1c 	bl	800cfa6 <USBD_CtlError>
          break;
 800c56e:	e000      	b.n	800c572 <USBD_StdItfReq+0xc2>
          break;
 800c570:	bf00      	nop
      }
      break;
 800c572:	e004      	b.n	800c57e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c574:	6839      	ldr	r1, [r7, #0]
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 fd15 	bl	800cfa6 <USBD_CtlError>
      break;
 800c57c:	bf00      	nop
  }

  return ret;
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	889b      	ldrh	r3, [r3, #4]
 800c59a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c5a4:	2b40      	cmp	r3, #64	@ 0x40
 800c5a6:	d007      	beq.n	800c5b8 <USBD_StdEPReq+0x30>
 800c5a8:	2b40      	cmp	r3, #64	@ 0x40
 800c5aa:	f200 817f 	bhi.w	800c8ac <USBD_StdEPReq+0x324>
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d02a      	beq.n	800c608 <USBD_StdEPReq+0x80>
 800c5b2:	2b20      	cmp	r3, #32
 800c5b4:	f040 817a 	bne.w	800c8ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c5b8:	7bbb      	ldrb	r3, [r7, #14]
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f7ff fe86 	bl	800c2ce <USBD_CoreFindEP>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c5c6:	7b7b      	ldrb	r3, [r7, #13]
 800c5c8:	2bff      	cmp	r3, #255	@ 0xff
 800c5ca:	f000 8174 	beq.w	800c8b6 <USBD_StdEPReq+0x32e>
 800c5ce:	7b7b      	ldrb	r3, [r7, #13]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f040 8170 	bne.w	800c8b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c5d6:	7b7a      	ldrb	r2, [r7, #13]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c5de:	7b7a      	ldrb	r2, [r7, #13]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	32ae      	adds	r2, #174	@ 0xae
 800c5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 8163 	beq.w	800c8b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c5f0:	7b7a      	ldrb	r2, [r7, #13]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	32ae      	adds	r2, #174	@ 0xae
 800c5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	6839      	ldr	r1, [r7, #0]
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	4798      	blx	r3
 800c602:	4603      	mov	r3, r0
 800c604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c606:	e156      	b.n	800c8b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	785b      	ldrb	r3, [r3, #1]
 800c60c:	2b03      	cmp	r3, #3
 800c60e:	d008      	beq.n	800c622 <USBD_StdEPReq+0x9a>
 800c610:	2b03      	cmp	r3, #3
 800c612:	f300 8145 	bgt.w	800c8a0 <USBD_StdEPReq+0x318>
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 809b 	beq.w	800c752 <USBD_StdEPReq+0x1ca>
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d03c      	beq.n	800c69a <USBD_StdEPReq+0x112>
 800c620:	e13e      	b.n	800c8a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d002      	beq.n	800c634 <USBD_StdEPReq+0xac>
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d016      	beq.n	800c660 <USBD_StdEPReq+0xd8>
 800c632:	e02c      	b.n	800c68e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c634:	7bbb      	ldrb	r3, [r7, #14]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d00d      	beq.n	800c656 <USBD_StdEPReq+0xce>
 800c63a:	7bbb      	ldrb	r3, [r7, #14]
 800c63c:	2b80      	cmp	r3, #128	@ 0x80
 800c63e:	d00a      	beq.n	800c656 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c640:	7bbb      	ldrb	r3, [r7, #14]
 800c642:	4619      	mov	r1, r3
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f001 f9c6 	bl	800d9d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c64a:	2180      	movs	r1, #128	@ 0x80
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f001 f9c2 	bl	800d9d6 <USBD_LL_StallEP>
 800c652:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c654:	e020      	b.n	800c698 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 fca4 	bl	800cfa6 <USBD_CtlError>
              break;
 800c65e:	e01b      	b.n	800c698 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	885b      	ldrh	r3, [r3, #2]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d10e      	bne.n	800c686 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c668:	7bbb      	ldrb	r3, [r7, #14]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00b      	beq.n	800c686 <USBD_StdEPReq+0xfe>
 800c66e:	7bbb      	ldrb	r3, [r7, #14]
 800c670:	2b80      	cmp	r3, #128	@ 0x80
 800c672:	d008      	beq.n	800c686 <USBD_StdEPReq+0xfe>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	88db      	ldrh	r3, [r3, #6]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d104      	bne.n	800c686 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c67c:	7bbb      	ldrb	r3, [r7, #14]
 800c67e:	4619      	mov	r1, r3
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f001 f9a8 	bl	800d9d6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fd47 	bl	800d11a <USBD_CtlSendStatus>

              break;
 800c68c:	e004      	b.n	800c698 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 fc88 	bl	800cfa6 <USBD_CtlError>
              break;
 800c696:	bf00      	nop
          }
          break;
 800c698:	e107      	b.n	800c8aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d002      	beq.n	800c6ac <USBD_StdEPReq+0x124>
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	d016      	beq.n	800c6d8 <USBD_StdEPReq+0x150>
 800c6aa:	e04b      	b.n	800c744 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c6ac:	7bbb      	ldrb	r3, [r7, #14]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00d      	beq.n	800c6ce <USBD_StdEPReq+0x146>
 800c6b2:	7bbb      	ldrb	r3, [r7, #14]
 800c6b4:	2b80      	cmp	r3, #128	@ 0x80
 800c6b6:	d00a      	beq.n	800c6ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f001 f98a 	bl	800d9d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6c2:	2180      	movs	r1, #128	@ 0x80
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f001 f986 	bl	800d9d6 <USBD_LL_StallEP>
 800c6ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c6cc:	e040      	b.n	800c750 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 fc68 	bl	800cfa6 <USBD_CtlError>
              break;
 800c6d6:	e03b      	b.n	800c750 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	885b      	ldrh	r3, [r3, #2]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d136      	bne.n	800c74e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d004      	beq.n	800c6f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f001 f990 	bl	800da14 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fd10 	bl	800d11a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c6fa:	7bbb      	ldrb	r3, [r7, #14]
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff fde5 	bl	800c2ce <USBD_CoreFindEP>
 800c704:	4603      	mov	r3, r0
 800c706:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c708:	7b7b      	ldrb	r3, [r7, #13]
 800c70a:	2bff      	cmp	r3, #255	@ 0xff
 800c70c:	d01f      	beq.n	800c74e <USBD_StdEPReq+0x1c6>
 800c70e:	7b7b      	ldrb	r3, [r7, #13]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d11c      	bne.n	800c74e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c714:	7b7a      	ldrb	r2, [r7, #13]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c71c:	7b7a      	ldrb	r2, [r7, #13]
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	32ae      	adds	r2, #174	@ 0xae
 800c722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d010      	beq.n	800c74e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c72c:	7b7a      	ldrb	r2, [r7, #13]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	32ae      	adds	r2, #174	@ 0xae
 800c732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	4798      	blx	r3
 800c73e:	4603      	mov	r3, r0
 800c740:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c742:	e004      	b.n	800c74e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fc2d 	bl	800cfa6 <USBD_CtlError>
              break;
 800c74c:	e000      	b.n	800c750 <USBD_StdEPReq+0x1c8>
              break;
 800c74e:	bf00      	nop
          }
          break;
 800c750:	e0ab      	b.n	800c8aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b02      	cmp	r3, #2
 800c75c:	d002      	beq.n	800c764 <USBD_StdEPReq+0x1dc>
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d032      	beq.n	800c7c8 <USBD_StdEPReq+0x240>
 800c762:	e097      	b.n	800c894 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c764:	7bbb      	ldrb	r3, [r7, #14]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d007      	beq.n	800c77a <USBD_StdEPReq+0x1f2>
 800c76a:	7bbb      	ldrb	r3, [r7, #14]
 800c76c:	2b80      	cmp	r3, #128	@ 0x80
 800c76e:	d004      	beq.n	800c77a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c770:	6839      	ldr	r1, [r7, #0]
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fc17 	bl	800cfa6 <USBD_CtlError>
                break;
 800c778:	e091      	b.n	800c89e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c77a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	da0b      	bge.n	800c79a <USBD_StdEPReq+0x212>
 800c782:	7bbb      	ldrb	r3, [r7, #14]
 800c784:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	3310      	adds	r3, #16
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	4413      	add	r3, r2
 800c796:	3304      	adds	r3, #4
 800c798:	e00b      	b.n	800c7b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c79a:	7bbb      	ldrb	r3, [r7, #14]
 800c79c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	4619      	mov	r1, r3
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fc6d 	bl	800d0a0 <USBD_CtlSendData>
              break;
 800c7c6:	e06a      	b.n	800c89e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c7c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	da11      	bge.n	800c7f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c7d0:	7bbb      	ldrb	r3, [r7, #14]
 800c7d2:	f003 020f 	and.w	r2, r3, #15
 800c7d6:	6879      	ldr	r1, [r7, #4]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	440b      	add	r3, r1
 800c7e2:	3324      	adds	r3, #36	@ 0x24
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d117      	bne.n	800c81a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c7ea:	6839      	ldr	r1, [r7, #0]
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 fbda 	bl	800cfa6 <USBD_CtlError>
                  break;
 800c7f2:	e054      	b.n	800c89e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c7f4:	7bbb      	ldrb	r3, [r7, #14]
 800c7f6:	f003 020f 	and.w	r2, r3, #15
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4413      	add	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	440b      	add	r3, r1
 800c806:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d104      	bne.n	800c81a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c810:	6839      	ldr	r1, [r7, #0]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 fbc7 	bl	800cfa6 <USBD_CtlError>
                  break;
 800c818:	e041      	b.n	800c89e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c81a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	da0b      	bge.n	800c83a <USBD_StdEPReq+0x2b2>
 800c822:	7bbb      	ldrb	r3, [r7, #14]
 800c824:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c828:	4613      	mov	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	3310      	adds	r3, #16
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	4413      	add	r3, r2
 800c836:	3304      	adds	r3, #4
 800c838:	e00b      	b.n	800c852 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c83a:	7bbb      	ldrb	r3, [r7, #14]
 800c83c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c840:	4613      	mov	r3, r2
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	4413      	add	r3, r2
 800c850:	3304      	adds	r3, #4
 800c852:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c854:	7bbb      	ldrb	r3, [r7, #14]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <USBD_StdEPReq+0x2d8>
 800c85a:	7bbb      	ldrb	r3, [r7, #14]
 800c85c:	2b80      	cmp	r3, #128	@ 0x80
 800c85e:	d103      	bne.n	800c868 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	2200      	movs	r2, #0
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	e00e      	b.n	800c886 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c868:	7bbb      	ldrb	r3, [r7, #14]
 800c86a:	4619      	mov	r1, r3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f001 f8f0 	bl	800da52 <USBD_LL_IsStallEP>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d003      	beq.n	800c880 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	2201      	movs	r2, #1
 800c87c:	601a      	str	r2, [r3, #0]
 800c87e:	e002      	b.n	800c886 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2200      	movs	r2, #0
 800c884:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2202      	movs	r2, #2
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 fc07 	bl	800d0a0 <USBD_CtlSendData>
              break;
 800c892:	e004      	b.n	800c89e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 fb85 	bl	800cfa6 <USBD_CtlError>
              break;
 800c89c:	bf00      	nop
          }
          break;
 800c89e:	e004      	b.n	800c8aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 fb7f 	bl	800cfa6 <USBD_CtlError>
          break;
 800c8a8:	bf00      	nop
      }
      break;
 800c8aa:	e005      	b.n	800c8b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 fb79 	bl	800cfa6 <USBD_CtlError>
      break;
 800c8b4:	e000      	b.n	800c8b8 <USBD_StdEPReq+0x330>
      break;
 800c8b6:	bf00      	nop
  }

  return ret;
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
	...

0800c8c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	885b      	ldrh	r3, [r3, #2]
 800c8de:	0a1b      	lsrs	r3, r3, #8
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	2b0e      	cmp	r3, #14
 800c8e6:	f200 8152 	bhi.w	800cb8e <USBD_GetDescriptor+0x2ca>
 800c8ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f0 <USBD_GetDescriptor+0x2c>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c961 	.word	0x0800c961
 800c8f4:	0800c979 	.word	0x0800c979
 800c8f8:	0800c9b9 	.word	0x0800c9b9
 800c8fc:	0800cb8f 	.word	0x0800cb8f
 800c900:	0800cb8f 	.word	0x0800cb8f
 800c904:	0800cb2f 	.word	0x0800cb2f
 800c908:	0800cb5b 	.word	0x0800cb5b
 800c90c:	0800cb8f 	.word	0x0800cb8f
 800c910:	0800cb8f 	.word	0x0800cb8f
 800c914:	0800cb8f 	.word	0x0800cb8f
 800c918:	0800cb8f 	.word	0x0800cb8f
 800c91c:	0800cb8f 	.word	0x0800cb8f
 800c920:	0800cb8f 	.word	0x0800cb8f
 800c924:	0800cb8f 	.word	0x0800cb8f
 800c928:	0800c92d 	.word	0x0800c92d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c932:	69db      	ldr	r3, [r3, #28]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00b      	beq.n	800c950 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	7c12      	ldrb	r2, [r2, #16]
 800c944:	f107 0108 	add.w	r1, r7, #8
 800c948:	4610      	mov	r0, r2
 800c94a:	4798      	blx	r3
 800c94c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c94e:	e126      	b.n	800cb9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fb27 	bl	800cfa6 <USBD_CtlError>
        err++;
 800c958:	7afb      	ldrb	r3, [r7, #11]
 800c95a:	3301      	adds	r3, #1
 800c95c:	72fb      	strb	r3, [r7, #11]
      break;
 800c95e:	e11e      	b.n	800cb9e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	7c12      	ldrb	r2, [r2, #16]
 800c96c:	f107 0108 	add.w	r1, r7, #8
 800c970:	4610      	mov	r0, r2
 800c972:	4798      	blx	r3
 800c974:	60f8      	str	r0, [r7, #12]
      break;
 800c976:	e112      	b.n	800cb9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	7c1b      	ldrb	r3, [r3, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10d      	bne.n	800c99c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c988:	f107 0208 	add.w	r2, r7, #8
 800c98c:	4610      	mov	r0, r2
 800c98e:	4798      	blx	r3
 800c990:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	3301      	adds	r3, #1
 800c996:	2202      	movs	r2, #2
 800c998:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c99a:	e100      	b.n	800cb9e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a4:	f107 0208 	add.w	r2, r7, #8
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	4798      	blx	r3
 800c9ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	3301      	adds	r3, #1
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	701a      	strb	r2, [r3, #0]
      break;
 800c9b6:	e0f2      	b.n	800cb9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	885b      	ldrh	r3, [r3, #2]
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b05      	cmp	r3, #5
 800c9c0:	f200 80ac 	bhi.w	800cb1c <USBD_GetDescriptor+0x258>
 800c9c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c9cc <USBD_GetDescriptor+0x108>)
 800c9c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ca:	bf00      	nop
 800c9cc:	0800c9e5 	.word	0x0800c9e5
 800c9d0:	0800ca19 	.word	0x0800ca19
 800c9d4:	0800ca4d 	.word	0x0800ca4d
 800c9d8:	0800ca81 	.word	0x0800ca81
 800c9dc:	0800cab5 	.word	0x0800cab5
 800c9e0:	0800cae9 	.word	0x0800cae9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d00b      	beq.n	800ca08 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	687a      	ldr	r2, [r7, #4]
 800c9fa:	7c12      	ldrb	r2, [r2, #16]
 800c9fc:	f107 0108 	add.w	r1, r7, #8
 800ca00:	4610      	mov	r0, r2
 800ca02:	4798      	blx	r3
 800ca04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca06:	e091      	b.n	800cb2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca08:	6839      	ldr	r1, [r7, #0]
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 facb 	bl	800cfa6 <USBD_CtlError>
            err++;
 800ca10:	7afb      	ldrb	r3, [r7, #11]
 800ca12:	3301      	adds	r3, #1
 800ca14:	72fb      	strb	r3, [r7, #11]
          break;
 800ca16:	e089      	b.n	800cb2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d00b      	beq.n	800ca3c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	7c12      	ldrb	r2, [r2, #16]
 800ca30:	f107 0108 	add.w	r1, r7, #8
 800ca34:	4610      	mov	r0, r2
 800ca36:	4798      	blx	r3
 800ca38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca3a:	e077      	b.n	800cb2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f000 fab1 	bl	800cfa6 <USBD_CtlError>
            err++;
 800ca44:	7afb      	ldrb	r3, [r7, #11]
 800ca46:	3301      	adds	r3, #1
 800ca48:	72fb      	strb	r3, [r7, #11]
          break;
 800ca4a:	e06f      	b.n	800cb2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00b      	beq.n	800ca70 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	7c12      	ldrb	r2, [r2, #16]
 800ca64:	f107 0108 	add.w	r1, r7, #8
 800ca68:	4610      	mov	r0, r2
 800ca6a:	4798      	blx	r3
 800ca6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ca6e:	e05d      	b.n	800cb2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ca70:	6839      	ldr	r1, [r7, #0]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fa97 	bl	800cfa6 <USBD_CtlError>
            err++;
 800ca78:	7afb      	ldrb	r3, [r7, #11]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ca7e:	e055      	b.n	800cb2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d00b      	beq.n	800caa4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	7c12      	ldrb	r2, [r2, #16]
 800ca98:	f107 0108 	add.w	r1, r7, #8
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	4798      	blx	r3
 800caa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800caa2:	e043      	b.n	800cb2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800caa4:	6839      	ldr	r1, [r7, #0]
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fa7d 	bl	800cfa6 <USBD_CtlError>
            err++;
 800caac:	7afb      	ldrb	r3, [r7, #11]
 800caae:	3301      	adds	r3, #1
 800cab0:	72fb      	strb	r3, [r7, #11]
          break;
 800cab2:	e03b      	b.n	800cb2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caba:	695b      	ldr	r3, [r3, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00b      	beq.n	800cad8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	687a      	ldr	r2, [r7, #4]
 800caca:	7c12      	ldrb	r2, [r2, #16]
 800cacc:	f107 0108 	add.w	r1, r7, #8
 800cad0:	4610      	mov	r0, r2
 800cad2:	4798      	blx	r3
 800cad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cad6:	e029      	b.n	800cb2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 fa63 	bl	800cfa6 <USBD_CtlError>
            err++;
 800cae0:	7afb      	ldrb	r3, [r7, #11]
 800cae2:	3301      	adds	r3, #1
 800cae4:	72fb      	strb	r3, [r7, #11]
          break;
 800cae6:	e021      	b.n	800cb2c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00b      	beq.n	800cb0c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	7c12      	ldrb	r2, [r2, #16]
 800cb00:	f107 0108 	add.w	r1, r7, #8
 800cb04:	4610      	mov	r0, r2
 800cb06:	4798      	blx	r3
 800cb08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cb0a:	e00f      	b.n	800cb2c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f000 fa49 	bl	800cfa6 <USBD_CtlError>
            err++;
 800cb14:	7afb      	ldrb	r3, [r7, #11]
 800cb16:	3301      	adds	r3, #1
 800cb18:	72fb      	strb	r3, [r7, #11]
          break;
 800cb1a:	e007      	b.n	800cb2c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fa41 	bl	800cfa6 <USBD_CtlError>
          err++;
 800cb24:	7afb      	ldrb	r3, [r7, #11]
 800cb26:	3301      	adds	r3, #1
 800cb28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cb2a:	bf00      	nop
      }
      break;
 800cb2c:	e037      	b.n	800cb9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	7c1b      	ldrb	r3, [r3, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d109      	bne.n	800cb4a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb3e:	f107 0208 	add.w	r2, r7, #8
 800cb42:	4610      	mov	r0, r2
 800cb44:	4798      	blx	r3
 800cb46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb48:	e029      	b.n	800cb9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fa2a 	bl	800cfa6 <USBD_CtlError>
        err++;
 800cb52:	7afb      	ldrb	r3, [r7, #11]
 800cb54:	3301      	adds	r3, #1
 800cb56:	72fb      	strb	r3, [r7, #11]
      break;
 800cb58:	e021      	b.n	800cb9e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7c1b      	ldrb	r3, [r3, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d10d      	bne.n	800cb7e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb6a:	f107 0208 	add.w	r2, r7, #8
 800cb6e:	4610      	mov	r0, r2
 800cb70:	4798      	blx	r3
 800cb72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	3301      	adds	r3, #1
 800cb78:	2207      	movs	r2, #7
 800cb7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cb7c:	e00f      	b.n	800cb9e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cb7e:	6839      	ldr	r1, [r7, #0]
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f000 fa10 	bl	800cfa6 <USBD_CtlError>
        err++;
 800cb86:	7afb      	ldrb	r3, [r7, #11]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	72fb      	strb	r3, [r7, #11]
      break;
 800cb8c:	e007      	b.n	800cb9e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800cb8e:	6839      	ldr	r1, [r7, #0]
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 fa08 	bl	800cfa6 <USBD_CtlError>
      err++;
 800cb96:	7afb      	ldrb	r3, [r7, #11]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	72fb      	strb	r3, [r7, #11]
      break;
 800cb9c:	bf00      	nop
  }

  if (err != 0U)
 800cb9e:	7afb      	ldrb	r3, [r7, #11]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d11e      	bne.n	800cbe2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	88db      	ldrh	r3, [r3, #6]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d016      	beq.n	800cbda <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800cbac:	893b      	ldrh	r3, [r7, #8]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00e      	beq.n	800cbd0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	88da      	ldrh	r2, [r3, #6]
 800cbb6:	893b      	ldrh	r3, [r7, #8]
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	bf28      	it	cs
 800cbbc:	4613      	movcs	r3, r2
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cbc2:	893b      	ldrh	r3, [r7, #8]
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	68f9      	ldr	r1, [r7, #12]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fa69 	bl	800d0a0 <USBD_CtlSendData>
 800cbce:	e009      	b.n	800cbe4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cbd0:	6839      	ldr	r1, [r7, #0]
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f9e7 	bl	800cfa6 <USBD_CtlError>
 800cbd8:	e004      	b.n	800cbe4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fa9d 	bl	800d11a <USBD_CtlSendStatus>
 800cbe0:	e000      	b.n	800cbe4 <USBD_GetDescriptor+0x320>
    return;
 800cbe2:	bf00      	nop
  }
}
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop

0800cbec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b084      	sub	sp, #16
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	889b      	ldrh	r3, [r3, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d131      	bne.n	800cc62 <USBD_SetAddress+0x76>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	88db      	ldrh	r3, [r3, #6]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d12d      	bne.n	800cc62 <USBD_SetAddress+0x76>
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	885b      	ldrh	r3, [r3, #2]
 800cc0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc0c:	d829      	bhi.n	800cc62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	885b      	ldrh	r3, [r3, #2]
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	d104      	bne.n	800cc30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800cc26:	6839      	ldr	r1, [r7, #0]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f9bc 	bl	800cfa6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc2e:	e01d      	b.n	800cc6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	7bfa      	ldrb	r2, [r7, #15]
 800cc34:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 ff34 	bl	800daaa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fa69 	bl	800d11a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d004      	beq.n	800cc58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2202      	movs	r2, #2
 800cc52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc56:	e009      	b.n	800cc6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc60:	e004      	b.n	800cc6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 f99e 	bl	800cfa6 <USBD_CtlError>
  }
}
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	3710      	adds	r7, #16
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	885b      	ldrh	r3, [r3, #2]
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	4b4e      	ldr	r3, [pc, #312]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cc8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cc8c:	4b4d      	ldr	r3, [pc, #308]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d905      	bls.n	800cca0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cc94:	6839      	ldr	r1, [r7, #0]
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f985 	bl	800cfa6 <USBD_CtlError>
    return USBD_FAIL;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e08c      	b.n	800cdba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cca6:	b2db      	uxtb	r3, r3
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d002      	beq.n	800ccb2 <USBD_SetConfig+0x3e>
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d029      	beq.n	800cd04 <USBD_SetConfig+0x90>
 800ccb0:	e075      	b.n	800cd9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ccb2:	4b44      	ldr	r3, [pc, #272]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d020      	beq.n	800ccfc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ccba:	4b42      	ldr	r3, [pc, #264]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ccc4:	4b3f      	ldr	r3, [pc, #252]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7fe ffba 	bl	800bc44 <USBD_SetClassConfig>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d008      	beq.n	800ccec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ccda:	6839      	ldr	r1, [r7, #0]
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f962 	bl	800cfa6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2202      	movs	r2, #2
 800cce6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ccea:	e065      	b.n	800cdb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fa14 	bl	800d11a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2203      	movs	r2, #3
 800ccf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ccfa:	e05d      	b.n	800cdb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fa0c 	bl	800d11a <USBD_CtlSendStatus>
      break;
 800cd02:	e059      	b.n	800cdb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cd04:	4b2f      	ldr	r3, [pc, #188]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d112      	bne.n	800cd32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2202      	movs	r2, #2
 800cd10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cd14:	4b2b      	ldr	r3, [pc, #172]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cd1e:	4b29      	ldr	r3, [pc, #164]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	4619      	mov	r1, r3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7fe ffa9 	bl	800bc7c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 f9f5 	bl	800d11a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cd30:	e042      	b.n	800cdb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cd32:	4b24      	ldr	r3, [pc, #144]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	461a      	mov	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d02a      	beq.n	800cd96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7fe ff97 	bl	800bc7c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cd4e:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	461a      	mov	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cd58:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7fe ff70 	bl	800bc44 <USBD_SetClassConfig>
 800cd64:	4603      	mov	r3, r0
 800cd66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cd68:	7bfb      	ldrb	r3, [r7, #15]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00f      	beq.n	800cd8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cd6e:	6839      	ldr	r1, [r7, #0]
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 f918 	bl	800cfa6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7fe ff7c 	bl	800bc7c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cd8c:	e014      	b.n	800cdb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f9c3 	bl	800d11a <USBD_CtlSendStatus>
      break;
 800cd94:	e010      	b.n	800cdb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f9bf 	bl	800d11a <USBD_CtlSendStatus>
      break;
 800cd9c:	e00c      	b.n	800cdb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cd9e:	6839      	ldr	r1, [r7, #0]
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 f900 	bl	800cfa6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cda6:	4b07      	ldr	r3, [pc, #28]	@ (800cdc4 <USBD_SetConfig+0x150>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7fe ff65 	bl	800bc7c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cdb2:	2303      	movs	r3, #3
 800cdb4:	73fb      	strb	r3, [r7, #15]
      break;
 800cdb6:	bf00      	nop
  }

  return ret;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	24000510 	.word	0x24000510

0800cdc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	88db      	ldrh	r3, [r3, #6]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d004      	beq.n	800cde4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cdda:	6839      	ldr	r1, [r7, #0]
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f8e2 	bl	800cfa6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cde2:	e023      	b.n	800ce2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	dc02      	bgt.n	800cdf6 <USBD_GetConfig+0x2e>
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dc03      	bgt.n	800cdfc <USBD_GetConfig+0x34>
 800cdf4:	e015      	b.n	800ce22 <USBD_GetConfig+0x5a>
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d00b      	beq.n	800ce12 <USBD_GetConfig+0x4a>
 800cdfa:	e012      	b.n	800ce22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3308      	adds	r3, #8
 800ce06:	2201      	movs	r2, #1
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f948 	bl	800d0a0 <USBD_CtlSendData>
        break;
 800ce10:	e00c      	b.n	800ce2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	3304      	adds	r3, #4
 800ce16:	2201      	movs	r2, #1
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f940 	bl	800d0a0 <USBD_CtlSendData>
        break;
 800ce20:	e004      	b.n	800ce2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f000 f8be 	bl	800cfa6 <USBD_CtlError>
        break;
 800ce2a:	bf00      	nop
}
 800ce2c:	bf00      	nop
 800ce2e:	3708      	adds	r7, #8
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce44:	b2db      	uxtb	r3, r3
 800ce46:	3b01      	subs	r3, #1
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d81e      	bhi.n	800ce8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	88db      	ldrh	r3, [r3, #6]
 800ce50:	2b02      	cmp	r3, #2
 800ce52:	d004      	beq.n	800ce5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ce54:	6839      	ldr	r1, [r7, #0]
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 f8a5 	bl	800cfa6 <USBD_CtlError>
        break;
 800ce5c:	e01a      	b.n	800ce94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2201      	movs	r2, #1
 800ce62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d005      	beq.n	800ce7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	68db      	ldr	r3, [r3, #12]
 800ce72:	f043 0202 	orr.w	r2, r3, #2
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	330c      	adds	r3, #12
 800ce7e:	2202      	movs	r2, #2
 800ce80:	4619      	mov	r1, r3
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 f90c 	bl	800d0a0 <USBD_CtlSendData>
      break;
 800ce88:	e004      	b.n	800ce94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ce8a:	6839      	ldr	r1, [r7, #0]
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 f88a 	bl	800cfa6 <USBD_CtlError>
      break;
 800ce92:	bf00      	nop
  }
}
 800ce94:	bf00      	nop
 800ce96:	3708      	adds	r7, #8
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	885b      	ldrh	r3, [r3, #2]
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d107      	bne.n	800cebe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 f92f 	bl	800d11a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cebc:	e013      	b.n	800cee6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	885b      	ldrh	r3, [r3, #2]
 800cec2:	2b02      	cmp	r3, #2
 800cec4:	d10b      	bne.n	800cede <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	889b      	ldrh	r3, [r3, #4]
 800ceca:	0a1b      	lsrs	r3, r3, #8
 800cecc:	b29b      	uxth	r3, r3
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f91f 	bl	800d11a <USBD_CtlSendStatus>
}
 800cedc:	e003      	b.n	800cee6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cede:	6839      	ldr	r1, [r7, #0]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f860 	bl	800cfa6 <USBD_CtlError>
}
 800cee6:	bf00      	nop
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b082      	sub	sp, #8
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cefe:	b2db      	uxtb	r3, r3
 800cf00:	3b01      	subs	r3, #1
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d80b      	bhi.n	800cf1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	885b      	ldrh	r3, [r3, #2]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d10c      	bne.n	800cf28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f8ff 	bl	800d11a <USBD_CtlSendStatus>
      }
      break;
 800cf1c:	e004      	b.n	800cf28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f840 	bl	800cfa6 <USBD_CtlError>
      break;
 800cf26:	e000      	b.n	800cf2a <USBD_ClrFeature+0x3c>
      break;
 800cf28:	bf00      	nop
  }
}
 800cf2a:	bf00      	nop
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b084      	sub	sp, #16
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	781a      	ldrb	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	781a      	ldrb	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f7ff fa17 	bl	800c390 <SWAPBYTE>
 800cf62:	4603      	mov	r3, r0
 800cf64:	461a      	mov	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	3301      	adds	r3, #1
 800cf74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff fa0a 	bl	800c390 <SWAPBYTE>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	461a      	mov	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3301      	adds	r3, #1
 800cf88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff f9fd 	bl	800c390 <SWAPBYTE>
 800cf96:	4603      	mov	r3, r0
 800cf98:	461a      	mov	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	80da      	strh	r2, [r3, #6]
}
 800cf9e:	bf00      	nop
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cfb0:	2180      	movs	r1, #128	@ 0x80
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fd0f 	bl	800d9d6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cfb8:	2100      	movs	r1, #0
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fd0b 	bl	800d9d6 <USBD_LL_StallEP>
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b086      	sub	sp, #24
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d042      	beq.n	800d064 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800cfe2:	6938      	ldr	r0, [r7, #16]
 800cfe4:	f000 f842 	bl	800d06c <USBD_GetLen>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	3301      	adds	r3, #1
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cff2:	d808      	bhi.n	800d006 <USBD_GetString+0x3e>
 800cff4:	6938      	ldr	r0, [r7, #16]
 800cff6:	f000 f839 	bl	800d06c <USBD_GetLen>
 800cffa:	4603      	mov	r3, r0
 800cffc:	3301      	adds	r3, #1
 800cffe:	b29b      	uxth	r3, r3
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	b29a      	uxth	r2, r3
 800d004:	e001      	b.n	800d00a <USBD_GetString+0x42>
 800d006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	4413      	add	r3, r2
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	7812      	ldrb	r2, [r2, #0]
 800d018:	701a      	strb	r2, [r3, #0]
  idx++;
 800d01a:	7dfb      	ldrb	r3, [r7, #23]
 800d01c:	3301      	adds	r3, #1
 800d01e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d020:	7dfb      	ldrb	r3, [r7, #23]
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	4413      	add	r3, r2
 800d026:	2203      	movs	r2, #3
 800d028:	701a      	strb	r2, [r3, #0]
  idx++;
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
 800d02c:	3301      	adds	r3, #1
 800d02e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d030:	e013      	b.n	800d05a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d032:	7dfb      	ldrb	r3, [r7, #23]
 800d034:	68ba      	ldr	r2, [r7, #8]
 800d036:	4413      	add	r3, r2
 800d038:	693a      	ldr	r2, [r7, #16]
 800d03a:	7812      	ldrb	r2, [r2, #0]
 800d03c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	3301      	adds	r3, #1
 800d042:	613b      	str	r3, [r7, #16]
    idx++;
 800d044:	7dfb      	ldrb	r3, [r7, #23]
 800d046:	3301      	adds	r3, #1
 800d048:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d04a:	7dfb      	ldrb	r3, [r7, #23]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	4413      	add	r3, r2
 800d050:	2200      	movs	r2, #0
 800d052:	701a      	strb	r2, [r3, #0]
    idx++;
 800d054:	7dfb      	ldrb	r3, [r7, #23]
 800d056:	3301      	adds	r3, #1
 800d058:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1e7      	bne.n	800d032 <USBD_GetString+0x6a>
 800d062:	e000      	b.n	800d066 <USBD_GetString+0x9e>
    return;
 800d064:	bf00      	nop
  }
}
 800d066:	3718      	adds	r7, #24
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d074:	2300      	movs	r3, #0
 800d076:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d07c:	e005      	b.n	800d08a <USBD_GetLen+0x1e>
  {
    len++;
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
 800d080:	3301      	adds	r3, #1
 800d082:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	3301      	adds	r3, #1
 800d088:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1f5      	bne.n	800d07e <USBD_GetLen+0x12>
  }

  return len;
 800d092:	7bfb      	ldrb	r3, [r7, #15]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2202      	movs	r2, #2
 800d0b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68ba      	ldr	r2, [r7, #8]
 800d0c4:	2100      	movs	r1, #0
 800d0c6:	68f8      	ldr	r0, [r7, #12]
 800d0c8:	f000 fd0e 	bl	800dae8 <USBD_LL_Transmit>

  return USBD_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3710      	adds	r7, #16
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b084      	sub	sp, #16
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	60f8      	str	r0, [r7, #12]
 800d0de:	60b9      	str	r1, [r7, #8]
 800d0e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	2100      	movs	r1, #0
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 fcfd 	bl	800dae8 <USBD_LL_Transmit>

  return USBD_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	2100      	movs	r1, #0
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f000 fd0d 	bl	800db2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b082      	sub	sp, #8
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2204      	movs	r2, #4
 800d126:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d12a:	2300      	movs	r3, #0
 800d12c:	2200      	movs	r2, #0
 800d12e:	2100      	movs	r1, #0
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fcd9 	bl	800dae8 <USBD_LL_Transmit>

  return USBD_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2205      	movs	r2, #5
 800d14c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d150:	2300      	movs	r3, #0
 800d152:	2200      	movs	r2, #0
 800d154:	2100      	movs	r1, #0
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f000 fce7 	bl	800db2a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d168:	b480      	push	{r7}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d176:	2301      	movs	r3, #1
 800d178:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d17e:	4b1f      	ldr	r3, [pc, #124]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d180:	7a5b      	ldrb	r3, [r3, #9]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d131      	bne.n	800d1ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d188:	4b1c      	ldr	r3, [pc, #112]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d18a:	7a5b      	ldrb	r3, [r3, #9]
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	461a      	mov	r2, r3
 800d190:	4b1a      	ldr	r3, [pc, #104]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d192:	2100      	movs	r1, #0
 800d194:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d196:	4b19      	ldr	r3, [pc, #100]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d198:	7a5b      	ldrb	r3, [r3, #9]
 800d19a:	b2db      	uxtb	r3, r3
 800d19c:	4a17      	ldr	r2, [pc, #92]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1a6:	4b15      	ldr	r3, [pc, #84]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d1a8:	7a5b      	ldrb	r3, [r3, #9]
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	4b13      	ldr	r3, [pc, #76]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d1b0:	4413      	add	r3, r2
 800d1b2:	79fa      	ldrb	r2, [r7, #7]
 800d1b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d1b6:	4b11      	ldr	r3, [pc, #68]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d1b8:	7a5b      	ldrb	r3, [r3, #9]
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	b2d1      	uxtb	r1, r2
 800d1c0:	4a0e      	ldr	r2, [pc, #56]	@ (800d1fc <FATFS_LinkDriverEx+0x94>)
 800d1c2:	7251      	strb	r1, [r2, #9]
 800d1c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d1c6:	7dbb      	ldrb	r3, [r7, #22]
 800d1c8:	3330      	adds	r3, #48	@ 0x30
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	223a      	movs	r2, #58	@ 0x3a
 800d1d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	3302      	adds	r3, #2
 800d1dc:	222f      	movs	r2, #47	@ 0x2f
 800d1de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	3303      	adds	r3, #3
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	371c      	adds	r7, #28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr
 800d1fa:	bf00      	nop
 800d1fc:	24000514 	.word	0x24000514

0800d200 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d20a:	2200      	movs	r2, #0
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff ffaa 	bl	800d168 <FATFS_LinkDriverEx>
 800d214:	4603      	mov	r3, r0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3708      	adds	r7, #8
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
	...

0800d220 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d224:	2200      	movs	r2, #0
 800d226:	4913      	ldr	r1, [pc, #76]	@ (800d274 <MX_USB_DEVICE_Init+0x54>)
 800d228:	4813      	ldr	r0, [pc, #76]	@ (800d278 <MX_USB_DEVICE_Init+0x58>)
 800d22a:	f7fe fc8e 	bl	800bb4a <USBD_Init>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	d001      	beq.n	800d238 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d234:	f7f3 fd24 	bl	8000c80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800d238:	4910      	ldr	r1, [pc, #64]	@ (800d27c <MX_USB_DEVICE_Init+0x5c>)
 800d23a:	480f      	ldr	r0, [pc, #60]	@ (800d278 <MX_USB_DEVICE_Init+0x58>)
 800d23c:	f7fe fcb5 	bl	800bbaa <USBD_RegisterClass>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d001      	beq.n	800d24a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d246:	f7f3 fd1b 	bl	8000c80 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800d24a:	490d      	ldr	r1, [pc, #52]	@ (800d280 <MX_USB_DEVICE_Init+0x60>)
 800d24c:	480a      	ldr	r0, [pc, #40]	@ (800d278 <MX_USB_DEVICE_Init+0x58>)
 800d24e:	f7fc ff33 	bl	800a0b8 <USBD_MSC_RegisterStorage>
 800d252:	4603      	mov	r3, r0
 800d254:	2b00      	cmp	r3, #0
 800d256:	d001      	beq.n	800d25c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d258:	f7f3 fd12 	bl	8000c80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d25c:	4806      	ldr	r0, [pc, #24]	@ (800d278 <MX_USB_DEVICE_Init+0x58>)
 800d25e:	f7fe fcda 	bl	800bc16 <USBD_Start>
 800d262:	4603      	mov	r3, r0
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d268:	f7f3 fd0a 	bl	8000c80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800d26c:	f7f6 fa72 	bl	8003754 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d270:	bf00      	nop
 800d272:	bd80      	pop	{r7, pc}
 800d274:	240000a8 	.word	0x240000a8
 800d278:	24000520 	.word	0x24000520
 800d27c:	24000028 	.word	0x24000028
 800d280:	240000fc 	.word	0x240000fc

0800d284 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	4603      	mov	r3, r0
 800d28c:	6039      	str	r1, [r7, #0]
 800d28e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	2212      	movs	r2, #18
 800d294:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d296:	4b03      	ldr	r3, [pc, #12]	@ (800d2a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d298:	4618      	mov	r0, r3
 800d29a:	370c      	adds	r7, #12
 800d29c:	46bd      	mov	sp, r7
 800d29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a2:	4770      	bx	lr
 800d2a4:	240000c8 	.word	0x240000c8

0800d2a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	6039      	str	r1, [r7, #0]
 800d2b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2204      	movs	r2, #4
 800d2b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2ba:	4b03      	ldr	r3, [pc, #12]	@ (800d2c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	240000dc 	.word	0x240000dc

0800d2cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	6039      	str	r1, [r7, #0]
 800d2d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2d8:	79fb      	ldrb	r3, [r7, #7]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d105      	bne.n	800d2ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	4907      	ldr	r1, [pc, #28]	@ (800d300 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2e2:	4808      	ldr	r0, [pc, #32]	@ (800d304 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2e4:	f7ff fe70 	bl	800cfc8 <USBD_GetString>
 800d2e8:	e004      	b.n	800d2f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2ea:	683a      	ldr	r2, [r7, #0]
 800d2ec:	4904      	ldr	r1, [pc, #16]	@ (800d300 <USBD_FS_ProductStrDescriptor+0x34>)
 800d2ee:	4805      	ldr	r0, [pc, #20]	@ (800d304 <USBD_FS_ProductStrDescriptor+0x38>)
 800d2f0:	f7ff fe6a 	bl	800cfc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2f4:	4b02      	ldr	r3, [pc, #8]	@ (800d300 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	240007fc 	.word	0x240007fc
 800d304:	0800e60c 	.word	0x0800e60c

0800d308 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	4603      	mov	r3, r0
 800d310:	6039      	str	r1, [r7, #0]
 800d312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d314:	683a      	ldr	r2, [r7, #0]
 800d316:	4904      	ldr	r1, [pc, #16]	@ (800d328 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d318:	4804      	ldr	r0, [pc, #16]	@ (800d32c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d31a:	f7ff fe55 	bl	800cfc8 <USBD_GetString>
  return USBD_StrDesc;
 800d31e:	4b02      	ldr	r3, [pc, #8]	@ (800d328 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	240007fc 	.word	0x240007fc
 800d32c:	0800e620 	.word	0x0800e620

0800d330 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	4603      	mov	r3, r0
 800d338:	6039      	str	r1, [r7, #0]
 800d33a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	221a      	movs	r2, #26
 800d340:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d342:	f000 f843 	bl	800d3cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d346:	4b02      	ldr	r3, [pc, #8]	@ (800d350 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	240000e0 	.word	0x240000e0

0800d354 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	4603      	mov	r3, r0
 800d35c:	6039      	str	r1, [r7, #0]
 800d35e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d360:	79fb      	ldrb	r3, [r7, #7]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d105      	bne.n	800d372 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	4907      	ldr	r1, [pc, #28]	@ (800d388 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d36a:	4808      	ldr	r0, [pc, #32]	@ (800d38c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d36c:	f7ff fe2c 	bl	800cfc8 <USBD_GetString>
 800d370:	e004      	b.n	800d37c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	4904      	ldr	r1, [pc, #16]	@ (800d388 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d376:	4805      	ldr	r0, [pc, #20]	@ (800d38c <USBD_FS_ConfigStrDescriptor+0x38>)
 800d378:	f7ff fe26 	bl	800cfc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d37c:	4b02      	ldr	r3, [pc, #8]	@ (800d388 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	240007fc 	.word	0x240007fc
 800d38c:	0800e634 	.word	0x0800e634

0800d390 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	4603      	mov	r3, r0
 800d398:	6039      	str	r1, [r7, #0]
 800d39a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d39c:	79fb      	ldrb	r3, [r7, #7]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d105      	bne.n	800d3ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3a2:	683a      	ldr	r2, [r7, #0]
 800d3a4:	4907      	ldr	r1, [pc, #28]	@ (800d3c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3a6:	4808      	ldr	r0, [pc, #32]	@ (800d3c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3a8:	f7ff fe0e 	bl	800cfc8 <USBD_GetString>
 800d3ac:	e004      	b.n	800d3b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	4904      	ldr	r1, [pc, #16]	@ (800d3c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3b2:	4805      	ldr	r0, [pc, #20]	@ (800d3c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3b4:	f7ff fe08 	bl	800cfc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3b8:	4b02      	ldr	r3, [pc, #8]	@ (800d3c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	240007fc 	.word	0x240007fc
 800d3c8:	0800e640 	.word	0x0800e640

0800d3cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b084      	sub	sp, #16
 800d3d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d410 <Get_SerialNum+0x44>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d414 <Get_SerialNum+0x48>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3de:	4b0e      	ldr	r3, [pc, #56]	@ (800d418 <Get_SerialNum+0x4c>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d009      	beq.n	800d406 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3f2:	2208      	movs	r2, #8
 800d3f4:	4909      	ldr	r1, [pc, #36]	@ (800d41c <Get_SerialNum+0x50>)
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	f000 f814 	bl	800d424 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d3fc:	2204      	movs	r2, #4
 800d3fe:	4908      	ldr	r1, [pc, #32]	@ (800d420 <Get_SerialNum+0x54>)
 800d400:	68b8      	ldr	r0, [r7, #8]
 800d402:	f000 f80f 	bl	800d424 <IntToUnicode>
  }
}
 800d406:	bf00      	nop
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	1ff1e800 	.word	0x1ff1e800
 800d414:	1ff1e804 	.word	0x1ff1e804
 800d418:	1ff1e808 	.word	0x1ff1e808
 800d41c:	240000e2 	.word	0x240000e2
 800d420:	240000f2 	.word	0x240000f2

0800d424 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d424:	b480      	push	{r7}
 800d426:	b087      	sub	sp, #28
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	4613      	mov	r3, r2
 800d430:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d436:	2300      	movs	r3, #0
 800d438:	75fb      	strb	r3, [r7, #23]
 800d43a:	e027      	b.n	800d48c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	0f1b      	lsrs	r3, r3, #28
 800d440:	2b09      	cmp	r3, #9
 800d442:	d80b      	bhi.n	800d45c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	0f1b      	lsrs	r3, r3, #28
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	4619      	mov	r1, r3
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	440b      	add	r3, r1
 800d454:	3230      	adds	r2, #48	@ 0x30
 800d456:	b2d2      	uxtb	r2, r2
 800d458:	701a      	strb	r2, [r3, #0]
 800d45a:	e00a      	b.n	800d472 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	0f1b      	lsrs	r3, r3, #28
 800d460:	b2da      	uxtb	r2, r3
 800d462:	7dfb      	ldrb	r3, [r7, #23]
 800d464:	005b      	lsls	r3, r3, #1
 800d466:	4619      	mov	r1, r3
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	440b      	add	r3, r1
 800d46c:	3237      	adds	r2, #55	@ 0x37
 800d46e:	b2d2      	uxtb	r2, r2
 800d470:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	011b      	lsls	r3, r3, #4
 800d476:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d478:	7dfb      	ldrb	r3, [r7, #23]
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	3301      	adds	r3, #1
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	4413      	add	r3, r2
 800d482:	2200      	movs	r2, #0
 800d484:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d486:	7dfb      	ldrb	r3, [r7, #23]
 800d488:	3301      	adds	r3, #1
 800d48a:	75fb      	strb	r3, [r7, #23]
 800d48c:	7dfa      	ldrb	r2, [r7, #23]
 800d48e:	79fb      	ldrb	r3, [r7, #7]
 800d490:	429a      	cmp	r2, r3
 800d492:	d3d3      	bcc.n	800d43c <IntToUnicode+0x18>
  }
}
 800d494:	bf00      	nop
 800d496:	bf00      	nop
 800d498:	371c      	adds	r7, #28
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800d4a2:	b480      	push	{r7}
 800d4a4:	b083      	sub	sp, #12
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800d4ac:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	370c      	adds	r7, #12
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b8:	4770      	bx	lr

0800d4ba <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b085      	sub	sp, #20
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	60b9      	str	r1, [r7, #8]
 800d4c4:	607a      	str	r2, [r7, #4]
 800d4c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d4ce:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4d6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800d4d8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800d4e6:	b480      	push	{r7}
 800d4e8:	b083      	sub	sp, #12
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800d4f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	370c      	adds	r7, #12
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr

0800d4fe <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b083      	sub	sp, #12
 800d502:	af00      	add	r7, sp, #0
 800d504:	4603      	mov	r3, r0
 800d506:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800d508:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d516:	b480      	push	{r7}
 800d518:	b085      	sub	sp, #20
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
 800d520:	461a      	mov	r2, r3
 800d522:	4603      	mov	r3, r0
 800d524:	73fb      	strb	r3, [r7, #15]
 800d526:	4613      	mov	r3, r2
 800d528:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800d52a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3714      	adds	r7, #20
 800d530:	46bd      	mov	sp, r7
 800d532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d536:	4770      	bx	lr

0800d538 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	60b9      	str	r1, [r7, #8]
 800d540:	607a      	str	r2, [r7, #4]
 800d542:	461a      	mov	r2, r3
 800d544:	4603      	mov	r3, r0
 800d546:	73fb      	strb	r3, [r7, #15]
 800d548:	4613      	mov	r3, r2
 800d54a:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800d54c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3714      	adds	r7, #20
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800d55a:	b480      	push	{r7}
 800d55c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800d55e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d560:	4618      	mov	r0, r3
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr
	...

0800d56c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b0ba      	sub	sp, #232	@ 0xe8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d574:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d578:	2200      	movs	r2, #0
 800d57a:	601a      	str	r2, [r3, #0]
 800d57c:	605a      	str	r2, [r3, #4]
 800d57e:	609a      	str	r2, [r3, #8]
 800d580:	60da      	str	r2, [r3, #12]
 800d582:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d584:	f107 0310 	add.w	r3, r7, #16
 800d588:	22c0      	movs	r2, #192	@ 0xc0
 800d58a:	2100      	movs	r1, #0
 800d58c:	4618      	mov	r0, r3
 800d58e:	f000 fb65 	bl	800dc5c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4a2c      	ldr	r2, [pc, #176]	@ (800d648 <HAL_PCD_MspInit+0xdc>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d151      	bne.n	800d640 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800d59c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800d5a0:	f04f 0300 	mov.w	r3, #0
 800d5a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800d5a8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d5ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d5b0:	f107 0310 	add.w	r3, r7, #16
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f7f7 f8c3 	bl	8004740 <HAL_RCCEx_PeriphCLKConfig>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d001      	beq.n	800d5c4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800d5c0:	f7f3 fb5e 	bl	8000c80 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800d5c4:	f7f6 f8c6 	bl	8003754 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d5c8:	4b20      	ldr	r3, [pc, #128]	@ (800d64c <HAL_PCD_MspInit+0xe0>)
 800d5ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5ce:	4a1f      	ldr	r2, [pc, #124]	@ (800d64c <HAL_PCD_MspInit+0xe0>)
 800d5d0:	f043 0301 	orr.w	r3, r3, #1
 800d5d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d5d8:	4b1c      	ldr	r3, [pc, #112]	@ (800d64c <HAL_PCD_MspInit+0xe0>)
 800d5da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d5e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d5ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5ee:	2302      	movs	r3, #2
 800d5f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d600:	230a      	movs	r3, #10
 800d602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d606:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800d60a:	4619      	mov	r1, r3
 800d60c:	4810      	ldr	r0, [pc, #64]	@ (800d650 <HAL_PCD_MspInit+0xe4>)
 800d60e:	f7f4 fbd1 	bl	8001db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d612:	4b0e      	ldr	r3, [pc, #56]	@ (800d64c <HAL_PCD_MspInit+0xe0>)
 800d614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d618:	4a0c      	ldr	r2, [pc, #48]	@ (800d64c <HAL_PCD_MspInit+0xe0>)
 800d61a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d61e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d622:	4b0a      	ldr	r3, [pc, #40]	@ (800d64c <HAL_PCD_MspInit+0xe0>)
 800d624:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d62c:	60bb      	str	r3, [r7, #8]
 800d62e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d630:	2200      	movs	r2, #0
 800d632:	2100      	movs	r1, #0
 800d634:	2065      	movs	r0, #101	@ 0x65
 800d636:	f7f4 fb10 	bl	8001c5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d63a:	2065      	movs	r0, #101	@ 0x65
 800d63c:	f7f4 fb27 	bl	8001c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d640:	bf00      	nop
 800d642:	37e8      	adds	r7, #232	@ 0xe8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	40080000 	.word	0x40080000
 800d64c:	58024400 	.word	0x58024400
 800d650:	58020000 	.word	0x58020000

0800d654 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d668:	4619      	mov	r1, r3
 800d66a:	4610      	mov	r0, r2
 800d66c:	f7fe fb20 	bl	800bcb0 <USBD_LL_SetupStage>
}
 800d670:	bf00      	nop
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	460b      	mov	r3, r1
 800d682:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d68a:	78fa      	ldrb	r2, [r7, #3]
 800d68c:	6879      	ldr	r1, [r7, #4]
 800d68e:	4613      	mov	r3, r2
 800d690:	00db      	lsls	r3, r3, #3
 800d692:	4413      	add	r3, r2
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	440b      	add	r3, r1
 800d698:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	78fb      	ldrb	r3, [r7, #3]
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f7fe fb5a 	bl	800bd5a <USBD_LL_DataOutStage>
}
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d6c0:	78fa      	ldrb	r2, [r7, #3]
 800d6c2:	6879      	ldr	r1, [r7, #4]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	4413      	add	r3, r2
 800d6ca:	009b      	lsls	r3, r3, #2
 800d6cc:	440b      	add	r3, r1
 800d6ce:	3320      	adds	r3, #32
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	78fb      	ldrb	r3, [r7, #3]
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	f7fe fbf3 	bl	800bec0 <USBD_LL_DataInStage>
}
 800d6da:	bf00      	nop
 800d6dc:	3708      	adds	r7, #8
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b082      	sub	sp, #8
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f7fe fd2d 	bl	800c150 <USBD_LL_SOF>
}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b084      	sub	sp, #16
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d706:	2301      	movs	r3, #1
 800d708:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	79db      	ldrb	r3, [r3, #7]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d102      	bne.n	800d718 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d712:	2300      	movs	r3, #0
 800d714:	73fb      	strb	r3, [r7, #15]
 800d716:	e008      	b.n	800d72a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	79db      	ldrb	r3, [r3, #7]
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d102      	bne.n	800d726 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d720:	2301      	movs	r3, #1
 800d722:	73fb      	strb	r3, [r7, #15]
 800d724:	e001      	b.n	800d72a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d726:	f7f3 faab 	bl	8000c80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d730:	7bfa      	ldrb	r2, [r7, #15]
 800d732:	4611      	mov	r1, r2
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe fcc7 	bl	800c0c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d740:	4618      	mov	r0, r3
 800d742:	f7fe fc6f 	bl	800c024 <USBD_LL_Reset>
}
 800d746:	bf00      	nop
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fe fcc2 	bl	800c0e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	6812      	ldr	r2, [r2, #0]
 800d772:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d776:	f043 0301 	orr.w	r3, r3, #1
 800d77a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	7adb      	ldrb	r3, [r3, #11]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d005      	beq.n	800d790 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d784:	4b04      	ldr	r3, [pc, #16]	@ (800d798 <HAL_PCD_SuspendCallback+0x48>)
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	4a03      	ldr	r2, [pc, #12]	@ (800d798 <HAL_PCD_SuspendCallback+0x48>)
 800d78a:	f043 0306 	orr.w	r3, r3, #6
 800d78e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	e000ed00 	.word	0xe000ed00

0800d79c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f7fe fcb8 	bl	800c120 <USBD_LL_Resume>
}
 800d7b0:	bf00      	nop
 800d7b2:	3708      	adds	r7, #8
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7ca:	78fa      	ldrb	r2, [r7, #3]
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fe fd10 	bl	800c1f4 <USBD_LL_IsoOUTIncomplete>
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7ee:	78fa      	ldrb	r2, [r7, #3]
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fe fccc 	bl	800c190 <USBD_LL_IsoINIncomplete>
}
 800d7f8:	bf00      	nop
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe fd22 	bl	800c258 <USBD_LL_DevConnected>
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe fd1f 	bl	800c26e <USBD_LL_DevDisconnected>
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d13e      	bne.n	800d8c6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d848:	4a21      	ldr	r2, [pc, #132]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4a1f      	ldr	r2, [pc, #124]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d854:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d858:	4b1d      	ldr	r3, [pc, #116]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d85a:	4a1e      	ldr	r2, [pc, #120]	@ (800d8d4 <USBD_LL_Init+0x9c>)
 800d85c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d85e:	4b1c      	ldr	r3, [pc, #112]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d860:	2209      	movs	r2, #9
 800d862:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d864:	4b1a      	ldr	r3, [pc, #104]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d866:	2202      	movs	r2, #2
 800d868:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d86a:	4b19      	ldr	r3, [pc, #100]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d870:	4b17      	ldr	r3, [pc, #92]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d872:	2202      	movs	r2, #2
 800d874:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d876:	4b16      	ldr	r3, [pc, #88]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d878:	2200      	movs	r2, #0
 800d87a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d87c:	4b14      	ldr	r3, [pc, #80]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d87e:	2200      	movs	r2, #0
 800d880:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d882:	4b13      	ldr	r3, [pc, #76]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d884:	2200      	movs	r2, #0
 800d886:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d888:	4b11      	ldr	r3, [pc, #68]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d88a:	2200      	movs	r2, #0
 800d88c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d88e:	4b10      	ldr	r3, [pc, #64]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d890:	2200      	movs	r2, #0
 800d892:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d894:	4b0e      	ldr	r3, [pc, #56]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d896:	2200      	movs	r2, #0
 800d898:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d89a:	480d      	ldr	r0, [pc, #52]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d89c:	f7f4 fc53 	bl	8002146 <HAL_PCD_Init>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d001      	beq.n	800d8aa <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d8a6:	f7f3 f9eb 	bl	8000c80 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d8aa:	2180      	movs	r1, #128	@ 0x80
 800d8ac:	4808      	ldr	r0, [pc, #32]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d8ae:	f7f5 fed6 	bl	800365e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d8b2:	2240      	movs	r2, #64	@ 0x40
 800d8b4:	2100      	movs	r1, #0
 800d8b6:	4806      	ldr	r0, [pc, #24]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d8b8:	f7f5 fe8a 	bl	80035d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d8bc:	2280      	movs	r2, #128	@ 0x80
 800d8be:	2101      	movs	r1, #1
 800d8c0:	4803      	ldr	r0, [pc, #12]	@ (800d8d0 <USBD_LL_Init+0x98>)
 800d8c2:	f7f5 fe85 	bl	80035d0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3708      	adds	r7, #8
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}
 800d8d0:	240009fc 	.word	0x240009fc
 800d8d4:	40080000 	.word	0x40080000

0800d8d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7f4 fd35 	bl	800235e <HAL_PCD_Start>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f000 f962 	bl	800dbc4 <USBD_Get_USB_Status>
 800d900:	4603      	mov	r3, r0
 800d902:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d904:	7bbb      	ldrb	r3, [r7, #14]
}
 800d906:	4618      	mov	r0, r3
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d90e:	b580      	push	{r7, lr}
 800d910:	b084      	sub	sp, #16
 800d912:	af00      	add	r7, sp, #0
 800d914:	6078      	str	r0, [r7, #4]
 800d916:	4608      	mov	r0, r1
 800d918:	4611      	mov	r1, r2
 800d91a:	461a      	mov	r2, r3
 800d91c:	4603      	mov	r3, r0
 800d91e:	70fb      	strb	r3, [r7, #3]
 800d920:	460b      	mov	r3, r1
 800d922:	70bb      	strb	r3, [r7, #2]
 800d924:	4613      	mov	r3, r2
 800d926:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d936:	78bb      	ldrb	r3, [r7, #2]
 800d938:	883a      	ldrh	r2, [r7, #0]
 800d93a:	78f9      	ldrb	r1, [r7, #3]
 800d93c:	f7f5 fa36 	bl	8002dac <HAL_PCD_EP_Open>
 800d940:	4603      	mov	r3, r0
 800d942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d944:	7bfb      	ldrb	r3, [r7, #15]
 800d946:	4618      	mov	r0, r3
 800d948:	f000 f93c 	bl	800dbc4 <USBD_Get_USB_Status>
 800d94c:	4603      	mov	r3, r0
 800d94e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d950:	7bbb      	ldrb	r3, [r7, #14]
}
 800d952:	4618      	mov	r0, r3
 800d954:	3710      	adds	r7, #16
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b084      	sub	sp, #16
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d974:	78fa      	ldrb	r2, [r7, #3]
 800d976:	4611      	mov	r1, r2
 800d978:	4618      	mov	r0, r3
 800d97a:	f7f5 fa81 	bl	8002e80 <HAL_PCD_EP_Close>
 800d97e:	4603      	mov	r3, r0
 800d980:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d982:	7bfb      	ldrb	r3, [r7, #15]
 800d984:	4618      	mov	r0, r3
 800d986:	f000 f91d 	bl	800dbc4 <USBD_Get_USB_Status>
 800d98a:	4603      	mov	r3, r0
 800d98c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3710      	adds	r7, #16
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}

0800d998 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b084      	sub	sp, #16
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9b2:	78fa      	ldrb	r2, [r7, #3]
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7f5 fc23 	bl	8003202 <HAL_PCD_EP_Flush>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 f8fe 	bl	800dbc4 <USBD_Get_USB_Status>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3710      	adds	r7, #16
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b084      	sub	sp, #16
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
 800d9de:	460b      	mov	r3, r1
 800d9e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9f0:	78fa      	ldrb	r2, [r7, #3]
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7f5 fb1a 	bl	800302e <HAL_PCD_EP_SetStall>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9fe:	7bfb      	ldrb	r3, [r7, #15]
 800da00:	4618      	mov	r0, r3
 800da02:	f000 f8df 	bl	800dbc4 <USBD_Get_USB_Status>
 800da06:	4603      	mov	r3, r0
 800da08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3710      	adds	r7, #16
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}

0800da14 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
 800da1c:	460b      	mov	r3, r1
 800da1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da2e:	78fa      	ldrb	r2, [r7, #3]
 800da30:	4611      	mov	r1, r2
 800da32:	4618      	mov	r0, r3
 800da34:	f7f5 fb5e 	bl	80030f4 <HAL_PCD_EP_ClrStall>
 800da38:	4603      	mov	r3, r0
 800da3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	4618      	mov	r0, r3
 800da40:	f000 f8c0 	bl	800dbc4 <USBD_Get_USB_Status>
 800da44:	4603      	mov	r3, r0
 800da46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da48:	7bbb      	ldrb	r3, [r7, #14]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	460b      	mov	r3, r1
 800da5c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da64:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800da66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	da0b      	bge.n	800da86 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800da6e:	78fb      	ldrb	r3, [r7, #3]
 800da70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da74:	68f9      	ldr	r1, [r7, #12]
 800da76:	4613      	mov	r3, r2
 800da78:	00db      	lsls	r3, r3, #3
 800da7a:	4413      	add	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	440b      	add	r3, r1
 800da80:	3316      	adds	r3, #22
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	e00b      	b.n	800da9e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800da86:	78fb      	ldrb	r3, [r7, #3]
 800da88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da8c:	68f9      	ldr	r1, [r7, #12]
 800da8e:	4613      	mov	r3, r2
 800da90:	00db      	lsls	r3, r3, #3
 800da92:	4413      	add	r3, r2
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	440b      	add	r3, r1
 800da98:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800da9c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3714      	adds	r7, #20
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr

0800daaa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b084      	sub	sp, #16
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
 800dab2:	460b      	mov	r3, r1
 800dab4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dac4:	78fa      	ldrb	r2, [r7, #3]
 800dac6:	4611      	mov	r1, r2
 800dac8:	4618      	mov	r0, r3
 800daca:	f7f5 f94b 	bl	8002d64 <HAL_PCD_SetAddress>
 800dace:	4603      	mov	r3, r0
 800dad0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	4618      	mov	r0, r3
 800dad6:	f000 f875 	bl	800dbc4 <USBD_Get_USB_Status>
 800dada:	4603      	mov	r3, r0
 800dadc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dade:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}

0800dae8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	607a      	str	r2, [r7, #4]
 800daf2:	603b      	str	r3, [r7, #0]
 800daf4:	460b      	mov	r3, r1
 800daf6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db06:	7af9      	ldrb	r1, [r7, #11]
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	f7f5 fa55 	bl	8002fba <HAL_PCD_EP_Transmit>
 800db10:	4603      	mov	r3, r0
 800db12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f854 	bl	800dbc4 <USBD_Get_USB_Status>
 800db1c:	4603      	mov	r3, r0
 800db1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db20:	7dbb      	ldrb	r3, [r7, #22]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b086      	sub	sp, #24
 800db2e:	af00      	add	r7, sp, #0
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	607a      	str	r2, [r7, #4]
 800db34:	603b      	str	r3, [r7, #0]
 800db36:	460b      	mov	r3, r1
 800db38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db3a:	2300      	movs	r3, #0
 800db3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800db48:	7af9      	ldrb	r1, [r7, #11]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	f7f5 f9e1 	bl	8002f14 <HAL_PCD_EP_Receive>
 800db52:	4603      	mov	r3, r0
 800db54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	4618      	mov	r0, r3
 800db5a:	f000 f833 	bl	800dbc4 <USBD_Get_USB_Status>
 800db5e:	4603      	mov	r3, r0
 800db60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800db62:	7dbb      	ldrb	r3, [r7, #22]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3718      	adds	r7, #24
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	460b      	mov	r3, r1
 800db76:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800db7e:	78fa      	ldrb	r2, [r7, #3]
 800db80:	4611      	mov	r1, r2
 800db82:	4618      	mov	r0, r3
 800db84:	f7f5 fa01 	bl	8002f8a <HAL_PCD_EP_GetRxCount>
 800db88:	4603      	mov	r3, r0
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	3708      	adds	r7, #8
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd80      	pop	{r7, pc}
	...

0800db94 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800db9c:	4b03      	ldr	r3, [pc, #12]	@ (800dbac <USBD_static_malloc+0x18>)
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	24000ee0 	.word	0x24000ee0

0800dbb0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dbd2:	79fb      	ldrb	r3, [r7, #7]
 800dbd4:	2b03      	cmp	r3, #3
 800dbd6:	d817      	bhi.n	800dc08 <USBD_Get_USB_Status+0x44>
 800dbd8:	a201      	add	r2, pc, #4	@ (adr r2, 800dbe0 <USBD_Get_USB_Status+0x1c>)
 800dbda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbde:	bf00      	nop
 800dbe0:	0800dbf1 	.word	0x0800dbf1
 800dbe4:	0800dbf7 	.word	0x0800dbf7
 800dbe8:	0800dbfd 	.word	0x0800dbfd
 800dbec:	0800dc03 	.word	0x0800dc03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800dbf4:	e00b      	b.n	800dc0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	73fb      	strb	r3, [r7, #15]
    break;
 800dbfa:	e008      	b.n	800dc0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	73fb      	strb	r3, [r7, #15]
    break;
 800dc00:	e005      	b.n	800dc0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dc02:	2303      	movs	r3, #3
 800dc04:	73fb      	strb	r3, [r7, #15]
    break;
 800dc06:	e002      	b.n	800dc0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	73fb      	strb	r3, [r7, #15]
    break;
 800dc0c:	bf00      	nop
  }
  return usb_status;
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3714      	adds	r7, #20
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr

0800dc1c <siprintf>:
 800dc1c:	b40e      	push	{r1, r2, r3}
 800dc1e:	b500      	push	{lr}
 800dc20:	b09c      	sub	sp, #112	@ 0x70
 800dc22:	ab1d      	add	r3, sp, #116	@ 0x74
 800dc24:	9002      	str	r0, [sp, #8]
 800dc26:	9006      	str	r0, [sp, #24]
 800dc28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dc2c:	4809      	ldr	r0, [pc, #36]	@ (800dc54 <siprintf+0x38>)
 800dc2e:	9107      	str	r1, [sp, #28]
 800dc30:	9104      	str	r1, [sp, #16]
 800dc32:	4909      	ldr	r1, [pc, #36]	@ (800dc58 <siprintf+0x3c>)
 800dc34:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc38:	9105      	str	r1, [sp, #20]
 800dc3a:	6800      	ldr	r0, [r0, #0]
 800dc3c:	9301      	str	r3, [sp, #4]
 800dc3e:	a902      	add	r1, sp, #8
 800dc40:	f000 f994 	bl	800df6c <_svfiprintf_r>
 800dc44:	9b02      	ldr	r3, [sp, #8]
 800dc46:	2200      	movs	r2, #0
 800dc48:	701a      	strb	r2, [r3, #0]
 800dc4a:	b01c      	add	sp, #112	@ 0x70
 800dc4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc50:	b003      	add	sp, #12
 800dc52:	4770      	bx	lr
 800dc54:	2400011c 	.word	0x2400011c
 800dc58:	ffff0208 	.word	0xffff0208

0800dc5c <memset>:
 800dc5c:	4402      	add	r2, r0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d100      	bne.n	800dc66 <memset+0xa>
 800dc64:	4770      	bx	lr
 800dc66:	f803 1b01 	strb.w	r1, [r3], #1
 800dc6a:	e7f9      	b.n	800dc60 <memset+0x4>

0800dc6c <__errno>:
 800dc6c:	4b01      	ldr	r3, [pc, #4]	@ (800dc74 <__errno+0x8>)
 800dc6e:	6818      	ldr	r0, [r3, #0]
 800dc70:	4770      	bx	lr
 800dc72:	bf00      	nop
 800dc74:	2400011c 	.word	0x2400011c

0800dc78 <__libc_init_array>:
 800dc78:	b570      	push	{r4, r5, r6, lr}
 800dc7a:	4d0d      	ldr	r5, [pc, #52]	@ (800dcb0 <__libc_init_array+0x38>)
 800dc7c:	4c0d      	ldr	r4, [pc, #52]	@ (800dcb4 <__libc_init_array+0x3c>)
 800dc7e:	1b64      	subs	r4, r4, r5
 800dc80:	10a4      	asrs	r4, r4, #2
 800dc82:	2600      	movs	r6, #0
 800dc84:	42a6      	cmp	r6, r4
 800dc86:	d109      	bne.n	800dc9c <__libc_init_array+0x24>
 800dc88:	4d0b      	ldr	r5, [pc, #44]	@ (800dcb8 <__libc_init_array+0x40>)
 800dc8a:	4c0c      	ldr	r4, [pc, #48]	@ (800dcbc <__libc_init_array+0x44>)
 800dc8c:	f000 fc66 	bl	800e55c <_init>
 800dc90:	1b64      	subs	r4, r4, r5
 800dc92:	10a4      	asrs	r4, r4, #2
 800dc94:	2600      	movs	r6, #0
 800dc96:	42a6      	cmp	r6, r4
 800dc98:	d105      	bne.n	800dca6 <__libc_init_array+0x2e>
 800dc9a:	bd70      	pop	{r4, r5, r6, pc}
 800dc9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dca0:	4798      	blx	r3
 800dca2:	3601      	adds	r6, #1
 800dca4:	e7ee      	b.n	800dc84 <__libc_init_array+0xc>
 800dca6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcaa:	4798      	blx	r3
 800dcac:	3601      	adds	r6, #1
 800dcae:	e7f2      	b.n	800dc96 <__libc_init_array+0x1e>
 800dcb0:	0800e6e8 	.word	0x0800e6e8
 800dcb4:	0800e6e8 	.word	0x0800e6e8
 800dcb8:	0800e6e8 	.word	0x0800e6e8
 800dcbc:	0800e6ec 	.word	0x0800e6ec

0800dcc0 <__retarget_lock_acquire_recursive>:
 800dcc0:	4770      	bx	lr

0800dcc2 <__retarget_lock_release_recursive>:
 800dcc2:	4770      	bx	lr

0800dcc4 <_free_r>:
 800dcc4:	b538      	push	{r3, r4, r5, lr}
 800dcc6:	4605      	mov	r5, r0
 800dcc8:	2900      	cmp	r1, #0
 800dcca:	d041      	beq.n	800dd50 <_free_r+0x8c>
 800dccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcd0:	1f0c      	subs	r4, r1, #4
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	bfb8      	it	lt
 800dcd6:	18e4      	addlt	r4, r4, r3
 800dcd8:	f000 f8e0 	bl	800de9c <__malloc_lock>
 800dcdc:	4a1d      	ldr	r2, [pc, #116]	@ (800dd54 <_free_r+0x90>)
 800dcde:	6813      	ldr	r3, [r2, #0]
 800dce0:	b933      	cbnz	r3, 800dcf0 <_free_r+0x2c>
 800dce2:	6063      	str	r3, [r4, #4]
 800dce4:	6014      	str	r4, [r2, #0]
 800dce6:	4628      	mov	r0, r5
 800dce8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dcec:	f000 b8dc 	b.w	800dea8 <__malloc_unlock>
 800dcf0:	42a3      	cmp	r3, r4
 800dcf2:	d908      	bls.n	800dd06 <_free_r+0x42>
 800dcf4:	6820      	ldr	r0, [r4, #0]
 800dcf6:	1821      	adds	r1, r4, r0
 800dcf8:	428b      	cmp	r3, r1
 800dcfa:	bf01      	itttt	eq
 800dcfc:	6819      	ldreq	r1, [r3, #0]
 800dcfe:	685b      	ldreq	r3, [r3, #4]
 800dd00:	1809      	addeq	r1, r1, r0
 800dd02:	6021      	streq	r1, [r4, #0]
 800dd04:	e7ed      	b.n	800dce2 <_free_r+0x1e>
 800dd06:	461a      	mov	r2, r3
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	b10b      	cbz	r3, 800dd10 <_free_r+0x4c>
 800dd0c:	42a3      	cmp	r3, r4
 800dd0e:	d9fa      	bls.n	800dd06 <_free_r+0x42>
 800dd10:	6811      	ldr	r1, [r2, #0]
 800dd12:	1850      	adds	r0, r2, r1
 800dd14:	42a0      	cmp	r0, r4
 800dd16:	d10b      	bne.n	800dd30 <_free_r+0x6c>
 800dd18:	6820      	ldr	r0, [r4, #0]
 800dd1a:	4401      	add	r1, r0
 800dd1c:	1850      	adds	r0, r2, r1
 800dd1e:	4283      	cmp	r3, r0
 800dd20:	6011      	str	r1, [r2, #0]
 800dd22:	d1e0      	bne.n	800dce6 <_free_r+0x22>
 800dd24:	6818      	ldr	r0, [r3, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	6053      	str	r3, [r2, #4]
 800dd2a:	4408      	add	r0, r1
 800dd2c:	6010      	str	r0, [r2, #0]
 800dd2e:	e7da      	b.n	800dce6 <_free_r+0x22>
 800dd30:	d902      	bls.n	800dd38 <_free_r+0x74>
 800dd32:	230c      	movs	r3, #12
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	e7d6      	b.n	800dce6 <_free_r+0x22>
 800dd38:	6820      	ldr	r0, [r4, #0]
 800dd3a:	1821      	adds	r1, r4, r0
 800dd3c:	428b      	cmp	r3, r1
 800dd3e:	bf04      	itt	eq
 800dd40:	6819      	ldreq	r1, [r3, #0]
 800dd42:	685b      	ldreq	r3, [r3, #4]
 800dd44:	6063      	str	r3, [r4, #4]
 800dd46:	bf04      	itt	eq
 800dd48:	1809      	addeq	r1, r1, r0
 800dd4a:	6021      	streq	r1, [r4, #0]
 800dd4c:	6054      	str	r4, [r2, #4]
 800dd4e:	e7ca      	b.n	800dce6 <_free_r+0x22>
 800dd50:	bd38      	pop	{r3, r4, r5, pc}
 800dd52:	bf00      	nop
 800dd54:	2400129c 	.word	0x2400129c

0800dd58 <sbrk_aligned>:
 800dd58:	b570      	push	{r4, r5, r6, lr}
 800dd5a:	4e0f      	ldr	r6, [pc, #60]	@ (800dd98 <sbrk_aligned+0x40>)
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	6831      	ldr	r1, [r6, #0]
 800dd60:	4605      	mov	r5, r0
 800dd62:	b911      	cbnz	r1, 800dd6a <sbrk_aligned+0x12>
 800dd64:	f000 fba6 	bl	800e4b4 <_sbrk_r>
 800dd68:	6030      	str	r0, [r6, #0]
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	4628      	mov	r0, r5
 800dd6e:	f000 fba1 	bl	800e4b4 <_sbrk_r>
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	d103      	bne.n	800dd7e <sbrk_aligned+0x26>
 800dd76:	f04f 34ff 	mov.w	r4, #4294967295
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	bd70      	pop	{r4, r5, r6, pc}
 800dd7e:	1cc4      	adds	r4, r0, #3
 800dd80:	f024 0403 	bic.w	r4, r4, #3
 800dd84:	42a0      	cmp	r0, r4
 800dd86:	d0f8      	beq.n	800dd7a <sbrk_aligned+0x22>
 800dd88:	1a21      	subs	r1, r4, r0
 800dd8a:	4628      	mov	r0, r5
 800dd8c:	f000 fb92 	bl	800e4b4 <_sbrk_r>
 800dd90:	3001      	adds	r0, #1
 800dd92:	d1f2      	bne.n	800dd7a <sbrk_aligned+0x22>
 800dd94:	e7ef      	b.n	800dd76 <sbrk_aligned+0x1e>
 800dd96:	bf00      	nop
 800dd98:	24001298 	.word	0x24001298

0800dd9c <_malloc_r>:
 800dd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda0:	1ccd      	adds	r5, r1, #3
 800dda2:	f025 0503 	bic.w	r5, r5, #3
 800dda6:	3508      	adds	r5, #8
 800dda8:	2d0c      	cmp	r5, #12
 800ddaa:	bf38      	it	cc
 800ddac:	250c      	movcc	r5, #12
 800ddae:	2d00      	cmp	r5, #0
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	db01      	blt.n	800ddb8 <_malloc_r+0x1c>
 800ddb4:	42a9      	cmp	r1, r5
 800ddb6:	d904      	bls.n	800ddc2 <_malloc_r+0x26>
 800ddb8:	230c      	movs	r3, #12
 800ddba:	6033      	str	r3, [r6, #0]
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800de98 <_malloc_r+0xfc>
 800ddc6:	f000 f869 	bl	800de9c <__malloc_lock>
 800ddca:	f8d8 3000 	ldr.w	r3, [r8]
 800ddce:	461c      	mov	r4, r3
 800ddd0:	bb44      	cbnz	r4, 800de24 <_malloc_r+0x88>
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	4630      	mov	r0, r6
 800ddd6:	f7ff ffbf 	bl	800dd58 <sbrk_aligned>
 800ddda:	1c43      	adds	r3, r0, #1
 800dddc:	4604      	mov	r4, r0
 800ddde:	d158      	bne.n	800de92 <_malloc_r+0xf6>
 800dde0:	f8d8 4000 	ldr.w	r4, [r8]
 800dde4:	4627      	mov	r7, r4
 800dde6:	2f00      	cmp	r7, #0
 800dde8:	d143      	bne.n	800de72 <_malloc_r+0xd6>
 800ddea:	2c00      	cmp	r4, #0
 800ddec:	d04b      	beq.n	800de86 <_malloc_r+0xea>
 800ddee:	6823      	ldr	r3, [r4, #0]
 800ddf0:	4639      	mov	r1, r7
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	eb04 0903 	add.w	r9, r4, r3
 800ddf8:	f000 fb5c 	bl	800e4b4 <_sbrk_r>
 800ddfc:	4581      	cmp	r9, r0
 800ddfe:	d142      	bne.n	800de86 <_malloc_r+0xea>
 800de00:	6821      	ldr	r1, [r4, #0]
 800de02:	1a6d      	subs	r5, r5, r1
 800de04:	4629      	mov	r1, r5
 800de06:	4630      	mov	r0, r6
 800de08:	f7ff ffa6 	bl	800dd58 <sbrk_aligned>
 800de0c:	3001      	adds	r0, #1
 800de0e:	d03a      	beq.n	800de86 <_malloc_r+0xea>
 800de10:	6823      	ldr	r3, [r4, #0]
 800de12:	442b      	add	r3, r5
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	f8d8 3000 	ldr.w	r3, [r8]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	bb62      	cbnz	r2, 800de78 <_malloc_r+0xdc>
 800de1e:	f8c8 7000 	str.w	r7, [r8]
 800de22:	e00f      	b.n	800de44 <_malloc_r+0xa8>
 800de24:	6822      	ldr	r2, [r4, #0]
 800de26:	1b52      	subs	r2, r2, r5
 800de28:	d420      	bmi.n	800de6c <_malloc_r+0xd0>
 800de2a:	2a0b      	cmp	r2, #11
 800de2c:	d917      	bls.n	800de5e <_malloc_r+0xc2>
 800de2e:	1961      	adds	r1, r4, r5
 800de30:	42a3      	cmp	r3, r4
 800de32:	6025      	str	r5, [r4, #0]
 800de34:	bf18      	it	ne
 800de36:	6059      	strne	r1, [r3, #4]
 800de38:	6863      	ldr	r3, [r4, #4]
 800de3a:	bf08      	it	eq
 800de3c:	f8c8 1000 	streq.w	r1, [r8]
 800de40:	5162      	str	r2, [r4, r5]
 800de42:	604b      	str	r3, [r1, #4]
 800de44:	4630      	mov	r0, r6
 800de46:	f000 f82f 	bl	800dea8 <__malloc_unlock>
 800de4a:	f104 000b 	add.w	r0, r4, #11
 800de4e:	1d23      	adds	r3, r4, #4
 800de50:	f020 0007 	bic.w	r0, r0, #7
 800de54:	1ac2      	subs	r2, r0, r3
 800de56:	bf1c      	itt	ne
 800de58:	1a1b      	subne	r3, r3, r0
 800de5a:	50a3      	strne	r3, [r4, r2]
 800de5c:	e7af      	b.n	800ddbe <_malloc_r+0x22>
 800de5e:	6862      	ldr	r2, [r4, #4]
 800de60:	42a3      	cmp	r3, r4
 800de62:	bf0c      	ite	eq
 800de64:	f8c8 2000 	streq.w	r2, [r8]
 800de68:	605a      	strne	r2, [r3, #4]
 800de6a:	e7eb      	b.n	800de44 <_malloc_r+0xa8>
 800de6c:	4623      	mov	r3, r4
 800de6e:	6864      	ldr	r4, [r4, #4]
 800de70:	e7ae      	b.n	800ddd0 <_malloc_r+0x34>
 800de72:	463c      	mov	r4, r7
 800de74:	687f      	ldr	r7, [r7, #4]
 800de76:	e7b6      	b.n	800dde6 <_malloc_r+0x4a>
 800de78:	461a      	mov	r2, r3
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	42a3      	cmp	r3, r4
 800de7e:	d1fb      	bne.n	800de78 <_malloc_r+0xdc>
 800de80:	2300      	movs	r3, #0
 800de82:	6053      	str	r3, [r2, #4]
 800de84:	e7de      	b.n	800de44 <_malloc_r+0xa8>
 800de86:	230c      	movs	r3, #12
 800de88:	6033      	str	r3, [r6, #0]
 800de8a:	4630      	mov	r0, r6
 800de8c:	f000 f80c 	bl	800dea8 <__malloc_unlock>
 800de90:	e794      	b.n	800ddbc <_malloc_r+0x20>
 800de92:	6005      	str	r5, [r0, #0]
 800de94:	e7d6      	b.n	800de44 <_malloc_r+0xa8>
 800de96:	bf00      	nop
 800de98:	2400129c 	.word	0x2400129c

0800de9c <__malloc_lock>:
 800de9c:	4801      	ldr	r0, [pc, #4]	@ (800dea4 <__malloc_lock+0x8>)
 800de9e:	f7ff bf0f 	b.w	800dcc0 <__retarget_lock_acquire_recursive>
 800dea2:	bf00      	nop
 800dea4:	24001294 	.word	0x24001294

0800dea8 <__malloc_unlock>:
 800dea8:	4801      	ldr	r0, [pc, #4]	@ (800deb0 <__malloc_unlock+0x8>)
 800deaa:	f7ff bf0a 	b.w	800dcc2 <__retarget_lock_release_recursive>
 800deae:	bf00      	nop
 800deb0:	24001294 	.word	0x24001294

0800deb4 <__ssputs_r>:
 800deb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb8:	688e      	ldr	r6, [r1, #8]
 800deba:	461f      	mov	r7, r3
 800debc:	42be      	cmp	r6, r7
 800debe:	680b      	ldr	r3, [r1, #0]
 800dec0:	4682      	mov	sl, r0
 800dec2:	460c      	mov	r4, r1
 800dec4:	4690      	mov	r8, r2
 800dec6:	d82d      	bhi.n	800df24 <__ssputs_r+0x70>
 800dec8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800decc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ded0:	d026      	beq.n	800df20 <__ssputs_r+0x6c>
 800ded2:	6965      	ldr	r5, [r4, #20]
 800ded4:	6909      	ldr	r1, [r1, #16]
 800ded6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800deda:	eba3 0901 	sub.w	r9, r3, r1
 800dede:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dee2:	1c7b      	adds	r3, r7, #1
 800dee4:	444b      	add	r3, r9
 800dee6:	106d      	asrs	r5, r5, #1
 800dee8:	429d      	cmp	r5, r3
 800deea:	bf38      	it	cc
 800deec:	461d      	movcc	r5, r3
 800deee:	0553      	lsls	r3, r2, #21
 800def0:	d527      	bpl.n	800df42 <__ssputs_r+0x8e>
 800def2:	4629      	mov	r1, r5
 800def4:	f7ff ff52 	bl	800dd9c <_malloc_r>
 800def8:	4606      	mov	r6, r0
 800defa:	b360      	cbz	r0, 800df56 <__ssputs_r+0xa2>
 800defc:	6921      	ldr	r1, [r4, #16]
 800defe:	464a      	mov	r2, r9
 800df00:	f000 fae8 	bl	800e4d4 <memcpy>
 800df04:	89a3      	ldrh	r3, [r4, #12]
 800df06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df0e:	81a3      	strh	r3, [r4, #12]
 800df10:	6126      	str	r6, [r4, #16]
 800df12:	6165      	str	r5, [r4, #20]
 800df14:	444e      	add	r6, r9
 800df16:	eba5 0509 	sub.w	r5, r5, r9
 800df1a:	6026      	str	r6, [r4, #0]
 800df1c:	60a5      	str	r5, [r4, #8]
 800df1e:	463e      	mov	r6, r7
 800df20:	42be      	cmp	r6, r7
 800df22:	d900      	bls.n	800df26 <__ssputs_r+0x72>
 800df24:	463e      	mov	r6, r7
 800df26:	6820      	ldr	r0, [r4, #0]
 800df28:	4632      	mov	r2, r6
 800df2a:	4641      	mov	r1, r8
 800df2c:	f000 faa8 	bl	800e480 <memmove>
 800df30:	68a3      	ldr	r3, [r4, #8]
 800df32:	1b9b      	subs	r3, r3, r6
 800df34:	60a3      	str	r3, [r4, #8]
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	4433      	add	r3, r6
 800df3a:	6023      	str	r3, [r4, #0]
 800df3c:	2000      	movs	r0, #0
 800df3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df42:	462a      	mov	r2, r5
 800df44:	f000 fad4 	bl	800e4f0 <_realloc_r>
 800df48:	4606      	mov	r6, r0
 800df4a:	2800      	cmp	r0, #0
 800df4c:	d1e0      	bne.n	800df10 <__ssputs_r+0x5c>
 800df4e:	6921      	ldr	r1, [r4, #16]
 800df50:	4650      	mov	r0, sl
 800df52:	f7ff feb7 	bl	800dcc4 <_free_r>
 800df56:	230c      	movs	r3, #12
 800df58:	f8ca 3000 	str.w	r3, [sl]
 800df5c:	89a3      	ldrh	r3, [r4, #12]
 800df5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df62:	81a3      	strh	r3, [r4, #12]
 800df64:	f04f 30ff 	mov.w	r0, #4294967295
 800df68:	e7e9      	b.n	800df3e <__ssputs_r+0x8a>
	...

0800df6c <_svfiprintf_r>:
 800df6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df70:	4698      	mov	r8, r3
 800df72:	898b      	ldrh	r3, [r1, #12]
 800df74:	061b      	lsls	r3, r3, #24
 800df76:	b09d      	sub	sp, #116	@ 0x74
 800df78:	4607      	mov	r7, r0
 800df7a:	460d      	mov	r5, r1
 800df7c:	4614      	mov	r4, r2
 800df7e:	d510      	bpl.n	800dfa2 <_svfiprintf_r+0x36>
 800df80:	690b      	ldr	r3, [r1, #16]
 800df82:	b973      	cbnz	r3, 800dfa2 <_svfiprintf_r+0x36>
 800df84:	2140      	movs	r1, #64	@ 0x40
 800df86:	f7ff ff09 	bl	800dd9c <_malloc_r>
 800df8a:	6028      	str	r0, [r5, #0]
 800df8c:	6128      	str	r0, [r5, #16]
 800df8e:	b930      	cbnz	r0, 800df9e <_svfiprintf_r+0x32>
 800df90:	230c      	movs	r3, #12
 800df92:	603b      	str	r3, [r7, #0]
 800df94:	f04f 30ff 	mov.w	r0, #4294967295
 800df98:	b01d      	add	sp, #116	@ 0x74
 800df9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df9e:	2340      	movs	r3, #64	@ 0x40
 800dfa0:	616b      	str	r3, [r5, #20]
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfa6:	2320      	movs	r3, #32
 800dfa8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfac:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfb0:	2330      	movs	r3, #48	@ 0x30
 800dfb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e150 <_svfiprintf_r+0x1e4>
 800dfb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfba:	f04f 0901 	mov.w	r9, #1
 800dfbe:	4623      	mov	r3, r4
 800dfc0:	469a      	mov	sl, r3
 800dfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfc6:	b10a      	cbz	r2, 800dfcc <_svfiprintf_r+0x60>
 800dfc8:	2a25      	cmp	r2, #37	@ 0x25
 800dfca:	d1f9      	bne.n	800dfc0 <_svfiprintf_r+0x54>
 800dfcc:	ebba 0b04 	subs.w	fp, sl, r4
 800dfd0:	d00b      	beq.n	800dfea <_svfiprintf_r+0x7e>
 800dfd2:	465b      	mov	r3, fp
 800dfd4:	4622      	mov	r2, r4
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	4638      	mov	r0, r7
 800dfda:	f7ff ff6b 	bl	800deb4 <__ssputs_r>
 800dfde:	3001      	adds	r0, #1
 800dfe0:	f000 80a7 	beq.w	800e132 <_svfiprintf_r+0x1c6>
 800dfe4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dfe6:	445a      	add	r2, fp
 800dfe8:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfea:	f89a 3000 	ldrb.w	r3, [sl]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	f000 809f 	beq.w	800e132 <_svfiprintf_r+0x1c6>
 800dff4:	2300      	movs	r3, #0
 800dff6:	f04f 32ff 	mov.w	r2, #4294967295
 800dffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dffe:	f10a 0a01 	add.w	sl, sl, #1
 800e002:	9304      	str	r3, [sp, #16]
 800e004:	9307      	str	r3, [sp, #28]
 800e006:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e00a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e00c:	4654      	mov	r4, sl
 800e00e:	2205      	movs	r2, #5
 800e010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e014:	484e      	ldr	r0, [pc, #312]	@ (800e150 <_svfiprintf_r+0x1e4>)
 800e016:	f7f2 f96b 	bl	80002f0 <memchr>
 800e01a:	9a04      	ldr	r2, [sp, #16]
 800e01c:	b9d8      	cbnz	r0, 800e056 <_svfiprintf_r+0xea>
 800e01e:	06d0      	lsls	r0, r2, #27
 800e020:	bf44      	itt	mi
 800e022:	2320      	movmi	r3, #32
 800e024:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e028:	0711      	lsls	r1, r2, #28
 800e02a:	bf44      	itt	mi
 800e02c:	232b      	movmi	r3, #43	@ 0x2b
 800e02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e032:	f89a 3000 	ldrb.w	r3, [sl]
 800e036:	2b2a      	cmp	r3, #42	@ 0x2a
 800e038:	d015      	beq.n	800e066 <_svfiprintf_r+0xfa>
 800e03a:	9a07      	ldr	r2, [sp, #28]
 800e03c:	4654      	mov	r4, sl
 800e03e:	2000      	movs	r0, #0
 800e040:	f04f 0c0a 	mov.w	ip, #10
 800e044:	4621      	mov	r1, r4
 800e046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e04a:	3b30      	subs	r3, #48	@ 0x30
 800e04c:	2b09      	cmp	r3, #9
 800e04e:	d94b      	bls.n	800e0e8 <_svfiprintf_r+0x17c>
 800e050:	b1b0      	cbz	r0, 800e080 <_svfiprintf_r+0x114>
 800e052:	9207      	str	r2, [sp, #28]
 800e054:	e014      	b.n	800e080 <_svfiprintf_r+0x114>
 800e056:	eba0 0308 	sub.w	r3, r0, r8
 800e05a:	fa09 f303 	lsl.w	r3, r9, r3
 800e05e:	4313      	orrs	r3, r2
 800e060:	9304      	str	r3, [sp, #16]
 800e062:	46a2      	mov	sl, r4
 800e064:	e7d2      	b.n	800e00c <_svfiprintf_r+0xa0>
 800e066:	9b03      	ldr	r3, [sp, #12]
 800e068:	1d19      	adds	r1, r3, #4
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	9103      	str	r1, [sp, #12]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	bfbb      	ittet	lt
 800e072:	425b      	neglt	r3, r3
 800e074:	f042 0202 	orrlt.w	r2, r2, #2
 800e078:	9307      	strge	r3, [sp, #28]
 800e07a:	9307      	strlt	r3, [sp, #28]
 800e07c:	bfb8      	it	lt
 800e07e:	9204      	strlt	r2, [sp, #16]
 800e080:	7823      	ldrb	r3, [r4, #0]
 800e082:	2b2e      	cmp	r3, #46	@ 0x2e
 800e084:	d10a      	bne.n	800e09c <_svfiprintf_r+0x130>
 800e086:	7863      	ldrb	r3, [r4, #1]
 800e088:	2b2a      	cmp	r3, #42	@ 0x2a
 800e08a:	d132      	bne.n	800e0f2 <_svfiprintf_r+0x186>
 800e08c:	9b03      	ldr	r3, [sp, #12]
 800e08e:	1d1a      	adds	r2, r3, #4
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	9203      	str	r2, [sp, #12]
 800e094:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e098:	3402      	adds	r4, #2
 800e09a:	9305      	str	r3, [sp, #20]
 800e09c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e160 <_svfiprintf_r+0x1f4>
 800e0a0:	7821      	ldrb	r1, [r4, #0]
 800e0a2:	2203      	movs	r2, #3
 800e0a4:	4650      	mov	r0, sl
 800e0a6:	f7f2 f923 	bl	80002f0 <memchr>
 800e0aa:	b138      	cbz	r0, 800e0bc <_svfiprintf_r+0x150>
 800e0ac:	9b04      	ldr	r3, [sp, #16]
 800e0ae:	eba0 000a 	sub.w	r0, r0, sl
 800e0b2:	2240      	movs	r2, #64	@ 0x40
 800e0b4:	4082      	lsls	r2, r0
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	3401      	adds	r4, #1
 800e0ba:	9304      	str	r3, [sp, #16]
 800e0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0c0:	4824      	ldr	r0, [pc, #144]	@ (800e154 <_svfiprintf_r+0x1e8>)
 800e0c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0c6:	2206      	movs	r2, #6
 800e0c8:	f7f2 f912 	bl	80002f0 <memchr>
 800e0cc:	2800      	cmp	r0, #0
 800e0ce:	d036      	beq.n	800e13e <_svfiprintf_r+0x1d2>
 800e0d0:	4b21      	ldr	r3, [pc, #132]	@ (800e158 <_svfiprintf_r+0x1ec>)
 800e0d2:	bb1b      	cbnz	r3, 800e11c <_svfiprintf_r+0x1b0>
 800e0d4:	9b03      	ldr	r3, [sp, #12]
 800e0d6:	3307      	adds	r3, #7
 800e0d8:	f023 0307 	bic.w	r3, r3, #7
 800e0dc:	3308      	adds	r3, #8
 800e0de:	9303      	str	r3, [sp, #12]
 800e0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0e2:	4433      	add	r3, r6
 800e0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0e6:	e76a      	b.n	800dfbe <_svfiprintf_r+0x52>
 800e0e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	2001      	movs	r0, #1
 800e0f0:	e7a8      	b.n	800e044 <_svfiprintf_r+0xd8>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	3401      	adds	r4, #1
 800e0f6:	9305      	str	r3, [sp, #20]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	f04f 0c0a 	mov.w	ip, #10
 800e0fe:	4620      	mov	r0, r4
 800e100:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e104:	3a30      	subs	r2, #48	@ 0x30
 800e106:	2a09      	cmp	r2, #9
 800e108:	d903      	bls.n	800e112 <_svfiprintf_r+0x1a6>
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d0c6      	beq.n	800e09c <_svfiprintf_r+0x130>
 800e10e:	9105      	str	r1, [sp, #20]
 800e110:	e7c4      	b.n	800e09c <_svfiprintf_r+0x130>
 800e112:	fb0c 2101 	mla	r1, ip, r1, r2
 800e116:	4604      	mov	r4, r0
 800e118:	2301      	movs	r3, #1
 800e11a:	e7f0      	b.n	800e0fe <_svfiprintf_r+0x192>
 800e11c:	ab03      	add	r3, sp, #12
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	462a      	mov	r2, r5
 800e122:	4b0e      	ldr	r3, [pc, #56]	@ (800e15c <_svfiprintf_r+0x1f0>)
 800e124:	a904      	add	r1, sp, #16
 800e126:	4638      	mov	r0, r7
 800e128:	f3af 8000 	nop.w
 800e12c:	1c42      	adds	r2, r0, #1
 800e12e:	4606      	mov	r6, r0
 800e130:	d1d6      	bne.n	800e0e0 <_svfiprintf_r+0x174>
 800e132:	89ab      	ldrh	r3, [r5, #12]
 800e134:	065b      	lsls	r3, r3, #25
 800e136:	f53f af2d 	bmi.w	800df94 <_svfiprintf_r+0x28>
 800e13a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e13c:	e72c      	b.n	800df98 <_svfiprintf_r+0x2c>
 800e13e:	ab03      	add	r3, sp, #12
 800e140:	9300      	str	r3, [sp, #0]
 800e142:	462a      	mov	r2, r5
 800e144:	4b05      	ldr	r3, [pc, #20]	@ (800e15c <_svfiprintf_r+0x1f0>)
 800e146:	a904      	add	r1, sp, #16
 800e148:	4638      	mov	r0, r7
 800e14a:	f000 f879 	bl	800e240 <_printf_i>
 800e14e:	e7ed      	b.n	800e12c <_svfiprintf_r+0x1c0>
 800e150:	0800e6ac 	.word	0x0800e6ac
 800e154:	0800e6b6 	.word	0x0800e6b6
 800e158:	00000000 	.word	0x00000000
 800e15c:	0800deb5 	.word	0x0800deb5
 800e160:	0800e6b2 	.word	0x0800e6b2

0800e164 <_printf_common>:
 800e164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e168:	4616      	mov	r6, r2
 800e16a:	4698      	mov	r8, r3
 800e16c:	688a      	ldr	r2, [r1, #8]
 800e16e:	690b      	ldr	r3, [r1, #16]
 800e170:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e174:	4293      	cmp	r3, r2
 800e176:	bfb8      	it	lt
 800e178:	4613      	movlt	r3, r2
 800e17a:	6033      	str	r3, [r6, #0]
 800e17c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e180:	4607      	mov	r7, r0
 800e182:	460c      	mov	r4, r1
 800e184:	b10a      	cbz	r2, 800e18a <_printf_common+0x26>
 800e186:	3301      	adds	r3, #1
 800e188:	6033      	str	r3, [r6, #0]
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	0699      	lsls	r1, r3, #26
 800e18e:	bf42      	ittt	mi
 800e190:	6833      	ldrmi	r3, [r6, #0]
 800e192:	3302      	addmi	r3, #2
 800e194:	6033      	strmi	r3, [r6, #0]
 800e196:	6825      	ldr	r5, [r4, #0]
 800e198:	f015 0506 	ands.w	r5, r5, #6
 800e19c:	d106      	bne.n	800e1ac <_printf_common+0x48>
 800e19e:	f104 0a19 	add.w	sl, r4, #25
 800e1a2:	68e3      	ldr	r3, [r4, #12]
 800e1a4:	6832      	ldr	r2, [r6, #0]
 800e1a6:	1a9b      	subs	r3, r3, r2
 800e1a8:	42ab      	cmp	r3, r5
 800e1aa:	dc26      	bgt.n	800e1fa <_printf_common+0x96>
 800e1ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1b0:	6822      	ldr	r2, [r4, #0]
 800e1b2:	3b00      	subs	r3, #0
 800e1b4:	bf18      	it	ne
 800e1b6:	2301      	movne	r3, #1
 800e1b8:	0692      	lsls	r2, r2, #26
 800e1ba:	d42b      	bmi.n	800e214 <_printf_common+0xb0>
 800e1bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1c0:	4641      	mov	r1, r8
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	47c8      	blx	r9
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d01e      	beq.n	800e208 <_printf_common+0xa4>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	6922      	ldr	r2, [r4, #16]
 800e1ce:	f003 0306 	and.w	r3, r3, #6
 800e1d2:	2b04      	cmp	r3, #4
 800e1d4:	bf02      	ittt	eq
 800e1d6:	68e5      	ldreq	r5, [r4, #12]
 800e1d8:	6833      	ldreq	r3, [r6, #0]
 800e1da:	1aed      	subeq	r5, r5, r3
 800e1dc:	68a3      	ldr	r3, [r4, #8]
 800e1de:	bf0c      	ite	eq
 800e1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1e4:	2500      	movne	r5, #0
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	bfc4      	itt	gt
 800e1ea:	1a9b      	subgt	r3, r3, r2
 800e1ec:	18ed      	addgt	r5, r5, r3
 800e1ee:	2600      	movs	r6, #0
 800e1f0:	341a      	adds	r4, #26
 800e1f2:	42b5      	cmp	r5, r6
 800e1f4:	d11a      	bne.n	800e22c <_printf_common+0xc8>
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	e008      	b.n	800e20c <_printf_common+0xa8>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	4652      	mov	r2, sl
 800e1fe:	4641      	mov	r1, r8
 800e200:	4638      	mov	r0, r7
 800e202:	47c8      	blx	r9
 800e204:	3001      	adds	r0, #1
 800e206:	d103      	bne.n	800e210 <_printf_common+0xac>
 800e208:	f04f 30ff 	mov.w	r0, #4294967295
 800e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e210:	3501      	adds	r5, #1
 800e212:	e7c6      	b.n	800e1a2 <_printf_common+0x3e>
 800e214:	18e1      	adds	r1, r4, r3
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	2030      	movs	r0, #48	@ 0x30
 800e21a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e21e:	4422      	add	r2, r4
 800e220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e228:	3302      	adds	r3, #2
 800e22a:	e7c7      	b.n	800e1bc <_printf_common+0x58>
 800e22c:	2301      	movs	r3, #1
 800e22e:	4622      	mov	r2, r4
 800e230:	4641      	mov	r1, r8
 800e232:	4638      	mov	r0, r7
 800e234:	47c8      	blx	r9
 800e236:	3001      	adds	r0, #1
 800e238:	d0e6      	beq.n	800e208 <_printf_common+0xa4>
 800e23a:	3601      	adds	r6, #1
 800e23c:	e7d9      	b.n	800e1f2 <_printf_common+0x8e>
	...

0800e240 <_printf_i>:
 800e240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e244:	7e0f      	ldrb	r7, [r1, #24]
 800e246:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e248:	2f78      	cmp	r7, #120	@ 0x78
 800e24a:	4691      	mov	r9, r2
 800e24c:	4680      	mov	r8, r0
 800e24e:	460c      	mov	r4, r1
 800e250:	469a      	mov	sl, r3
 800e252:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e256:	d807      	bhi.n	800e268 <_printf_i+0x28>
 800e258:	2f62      	cmp	r7, #98	@ 0x62
 800e25a:	d80a      	bhi.n	800e272 <_printf_i+0x32>
 800e25c:	2f00      	cmp	r7, #0
 800e25e:	f000 80d2 	beq.w	800e406 <_printf_i+0x1c6>
 800e262:	2f58      	cmp	r7, #88	@ 0x58
 800e264:	f000 80b9 	beq.w	800e3da <_printf_i+0x19a>
 800e268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e26c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e270:	e03a      	b.n	800e2e8 <_printf_i+0xa8>
 800e272:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e276:	2b15      	cmp	r3, #21
 800e278:	d8f6      	bhi.n	800e268 <_printf_i+0x28>
 800e27a:	a101      	add	r1, pc, #4	@ (adr r1, 800e280 <_printf_i+0x40>)
 800e27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e280:	0800e2d9 	.word	0x0800e2d9
 800e284:	0800e2ed 	.word	0x0800e2ed
 800e288:	0800e269 	.word	0x0800e269
 800e28c:	0800e269 	.word	0x0800e269
 800e290:	0800e269 	.word	0x0800e269
 800e294:	0800e269 	.word	0x0800e269
 800e298:	0800e2ed 	.word	0x0800e2ed
 800e29c:	0800e269 	.word	0x0800e269
 800e2a0:	0800e269 	.word	0x0800e269
 800e2a4:	0800e269 	.word	0x0800e269
 800e2a8:	0800e269 	.word	0x0800e269
 800e2ac:	0800e3ed 	.word	0x0800e3ed
 800e2b0:	0800e317 	.word	0x0800e317
 800e2b4:	0800e3a7 	.word	0x0800e3a7
 800e2b8:	0800e269 	.word	0x0800e269
 800e2bc:	0800e269 	.word	0x0800e269
 800e2c0:	0800e40f 	.word	0x0800e40f
 800e2c4:	0800e269 	.word	0x0800e269
 800e2c8:	0800e317 	.word	0x0800e317
 800e2cc:	0800e269 	.word	0x0800e269
 800e2d0:	0800e269 	.word	0x0800e269
 800e2d4:	0800e3af 	.word	0x0800e3af
 800e2d8:	6833      	ldr	r3, [r6, #0]
 800e2da:	1d1a      	adds	r2, r3, #4
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	6032      	str	r2, [r6, #0]
 800e2e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e09d      	b.n	800e428 <_printf_i+0x1e8>
 800e2ec:	6833      	ldr	r3, [r6, #0]
 800e2ee:	6820      	ldr	r0, [r4, #0]
 800e2f0:	1d19      	adds	r1, r3, #4
 800e2f2:	6031      	str	r1, [r6, #0]
 800e2f4:	0606      	lsls	r6, r0, #24
 800e2f6:	d501      	bpl.n	800e2fc <_printf_i+0xbc>
 800e2f8:	681d      	ldr	r5, [r3, #0]
 800e2fa:	e003      	b.n	800e304 <_printf_i+0xc4>
 800e2fc:	0645      	lsls	r5, r0, #25
 800e2fe:	d5fb      	bpl.n	800e2f8 <_printf_i+0xb8>
 800e300:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e304:	2d00      	cmp	r5, #0
 800e306:	da03      	bge.n	800e310 <_printf_i+0xd0>
 800e308:	232d      	movs	r3, #45	@ 0x2d
 800e30a:	426d      	negs	r5, r5
 800e30c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e310:	4859      	ldr	r0, [pc, #356]	@ (800e478 <_printf_i+0x238>)
 800e312:	230a      	movs	r3, #10
 800e314:	e011      	b.n	800e33a <_printf_i+0xfa>
 800e316:	6821      	ldr	r1, [r4, #0]
 800e318:	6833      	ldr	r3, [r6, #0]
 800e31a:	0608      	lsls	r0, r1, #24
 800e31c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e320:	d402      	bmi.n	800e328 <_printf_i+0xe8>
 800e322:	0649      	lsls	r1, r1, #25
 800e324:	bf48      	it	mi
 800e326:	b2ad      	uxthmi	r5, r5
 800e328:	2f6f      	cmp	r7, #111	@ 0x6f
 800e32a:	4853      	ldr	r0, [pc, #332]	@ (800e478 <_printf_i+0x238>)
 800e32c:	6033      	str	r3, [r6, #0]
 800e32e:	bf14      	ite	ne
 800e330:	230a      	movne	r3, #10
 800e332:	2308      	moveq	r3, #8
 800e334:	2100      	movs	r1, #0
 800e336:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e33a:	6866      	ldr	r6, [r4, #4]
 800e33c:	60a6      	str	r6, [r4, #8]
 800e33e:	2e00      	cmp	r6, #0
 800e340:	bfa2      	ittt	ge
 800e342:	6821      	ldrge	r1, [r4, #0]
 800e344:	f021 0104 	bicge.w	r1, r1, #4
 800e348:	6021      	strge	r1, [r4, #0]
 800e34a:	b90d      	cbnz	r5, 800e350 <_printf_i+0x110>
 800e34c:	2e00      	cmp	r6, #0
 800e34e:	d04b      	beq.n	800e3e8 <_printf_i+0x1a8>
 800e350:	4616      	mov	r6, r2
 800e352:	fbb5 f1f3 	udiv	r1, r5, r3
 800e356:	fb03 5711 	mls	r7, r3, r1, r5
 800e35a:	5dc7      	ldrb	r7, [r0, r7]
 800e35c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e360:	462f      	mov	r7, r5
 800e362:	42bb      	cmp	r3, r7
 800e364:	460d      	mov	r5, r1
 800e366:	d9f4      	bls.n	800e352 <_printf_i+0x112>
 800e368:	2b08      	cmp	r3, #8
 800e36a:	d10b      	bne.n	800e384 <_printf_i+0x144>
 800e36c:	6823      	ldr	r3, [r4, #0]
 800e36e:	07df      	lsls	r7, r3, #31
 800e370:	d508      	bpl.n	800e384 <_printf_i+0x144>
 800e372:	6923      	ldr	r3, [r4, #16]
 800e374:	6861      	ldr	r1, [r4, #4]
 800e376:	4299      	cmp	r1, r3
 800e378:	bfde      	ittt	le
 800e37a:	2330      	movle	r3, #48	@ 0x30
 800e37c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e380:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e384:	1b92      	subs	r2, r2, r6
 800e386:	6122      	str	r2, [r4, #16]
 800e388:	f8cd a000 	str.w	sl, [sp]
 800e38c:	464b      	mov	r3, r9
 800e38e:	aa03      	add	r2, sp, #12
 800e390:	4621      	mov	r1, r4
 800e392:	4640      	mov	r0, r8
 800e394:	f7ff fee6 	bl	800e164 <_printf_common>
 800e398:	3001      	adds	r0, #1
 800e39a:	d14a      	bne.n	800e432 <_printf_i+0x1f2>
 800e39c:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a0:	b004      	add	sp, #16
 800e3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3a6:	6823      	ldr	r3, [r4, #0]
 800e3a8:	f043 0320 	orr.w	r3, r3, #32
 800e3ac:	6023      	str	r3, [r4, #0]
 800e3ae:	4833      	ldr	r0, [pc, #204]	@ (800e47c <_printf_i+0x23c>)
 800e3b0:	2778      	movs	r7, #120	@ 0x78
 800e3b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	6831      	ldr	r1, [r6, #0]
 800e3ba:	061f      	lsls	r7, r3, #24
 800e3bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3c0:	d402      	bmi.n	800e3c8 <_printf_i+0x188>
 800e3c2:	065f      	lsls	r7, r3, #25
 800e3c4:	bf48      	it	mi
 800e3c6:	b2ad      	uxthmi	r5, r5
 800e3c8:	6031      	str	r1, [r6, #0]
 800e3ca:	07d9      	lsls	r1, r3, #31
 800e3cc:	bf44      	itt	mi
 800e3ce:	f043 0320 	orrmi.w	r3, r3, #32
 800e3d2:	6023      	strmi	r3, [r4, #0]
 800e3d4:	b11d      	cbz	r5, 800e3de <_printf_i+0x19e>
 800e3d6:	2310      	movs	r3, #16
 800e3d8:	e7ac      	b.n	800e334 <_printf_i+0xf4>
 800e3da:	4827      	ldr	r0, [pc, #156]	@ (800e478 <_printf_i+0x238>)
 800e3dc:	e7e9      	b.n	800e3b2 <_printf_i+0x172>
 800e3de:	6823      	ldr	r3, [r4, #0]
 800e3e0:	f023 0320 	bic.w	r3, r3, #32
 800e3e4:	6023      	str	r3, [r4, #0]
 800e3e6:	e7f6      	b.n	800e3d6 <_printf_i+0x196>
 800e3e8:	4616      	mov	r6, r2
 800e3ea:	e7bd      	b.n	800e368 <_printf_i+0x128>
 800e3ec:	6833      	ldr	r3, [r6, #0]
 800e3ee:	6825      	ldr	r5, [r4, #0]
 800e3f0:	6961      	ldr	r1, [r4, #20]
 800e3f2:	1d18      	adds	r0, r3, #4
 800e3f4:	6030      	str	r0, [r6, #0]
 800e3f6:	062e      	lsls	r6, r5, #24
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	d501      	bpl.n	800e400 <_printf_i+0x1c0>
 800e3fc:	6019      	str	r1, [r3, #0]
 800e3fe:	e002      	b.n	800e406 <_printf_i+0x1c6>
 800e400:	0668      	lsls	r0, r5, #25
 800e402:	d5fb      	bpl.n	800e3fc <_printf_i+0x1bc>
 800e404:	8019      	strh	r1, [r3, #0]
 800e406:	2300      	movs	r3, #0
 800e408:	6123      	str	r3, [r4, #16]
 800e40a:	4616      	mov	r6, r2
 800e40c:	e7bc      	b.n	800e388 <_printf_i+0x148>
 800e40e:	6833      	ldr	r3, [r6, #0]
 800e410:	1d1a      	adds	r2, r3, #4
 800e412:	6032      	str	r2, [r6, #0]
 800e414:	681e      	ldr	r6, [r3, #0]
 800e416:	6862      	ldr	r2, [r4, #4]
 800e418:	2100      	movs	r1, #0
 800e41a:	4630      	mov	r0, r6
 800e41c:	f7f1 ff68 	bl	80002f0 <memchr>
 800e420:	b108      	cbz	r0, 800e426 <_printf_i+0x1e6>
 800e422:	1b80      	subs	r0, r0, r6
 800e424:	6060      	str	r0, [r4, #4]
 800e426:	6863      	ldr	r3, [r4, #4]
 800e428:	6123      	str	r3, [r4, #16]
 800e42a:	2300      	movs	r3, #0
 800e42c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e430:	e7aa      	b.n	800e388 <_printf_i+0x148>
 800e432:	6923      	ldr	r3, [r4, #16]
 800e434:	4632      	mov	r2, r6
 800e436:	4649      	mov	r1, r9
 800e438:	4640      	mov	r0, r8
 800e43a:	47d0      	blx	sl
 800e43c:	3001      	adds	r0, #1
 800e43e:	d0ad      	beq.n	800e39c <_printf_i+0x15c>
 800e440:	6823      	ldr	r3, [r4, #0]
 800e442:	079b      	lsls	r3, r3, #30
 800e444:	d413      	bmi.n	800e46e <_printf_i+0x22e>
 800e446:	68e0      	ldr	r0, [r4, #12]
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	4298      	cmp	r0, r3
 800e44c:	bfb8      	it	lt
 800e44e:	4618      	movlt	r0, r3
 800e450:	e7a6      	b.n	800e3a0 <_printf_i+0x160>
 800e452:	2301      	movs	r3, #1
 800e454:	4632      	mov	r2, r6
 800e456:	4649      	mov	r1, r9
 800e458:	4640      	mov	r0, r8
 800e45a:	47d0      	blx	sl
 800e45c:	3001      	adds	r0, #1
 800e45e:	d09d      	beq.n	800e39c <_printf_i+0x15c>
 800e460:	3501      	adds	r5, #1
 800e462:	68e3      	ldr	r3, [r4, #12]
 800e464:	9903      	ldr	r1, [sp, #12]
 800e466:	1a5b      	subs	r3, r3, r1
 800e468:	42ab      	cmp	r3, r5
 800e46a:	dcf2      	bgt.n	800e452 <_printf_i+0x212>
 800e46c:	e7eb      	b.n	800e446 <_printf_i+0x206>
 800e46e:	2500      	movs	r5, #0
 800e470:	f104 0619 	add.w	r6, r4, #25
 800e474:	e7f5      	b.n	800e462 <_printf_i+0x222>
 800e476:	bf00      	nop
 800e478:	0800e6bd 	.word	0x0800e6bd
 800e47c:	0800e6ce 	.word	0x0800e6ce

0800e480 <memmove>:
 800e480:	4288      	cmp	r0, r1
 800e482:	b510      	push	{r4, lr}
 800e484:	eb01 0402 	add.w	r4, r1, r2
 800e488:	d902      	bls.n	800e490 <memmove+0x10>
 800e48a:	4284      	cmp	r4, r0
 800e48c:	4623      	mov	r3, r4
 800e48e:	d807      	bhi.n	800e4a0 <memmove+0x20>
 800e490:	1e43      	subs	r3, r0, #1
 800e492:	42a1      	cmp	r1, r4
 800e494:	d008      	beq.n	800e4a8 <memmove+0x28>
 800e496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e49a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e49e:	e7f8      	b.n	800e492 <memmove+0x12>
 800e4a0:	4402      	add	r2, r0
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	428a      	cmp	r2, r1
 800e4a6:	d100      	bne.n	800e4aa <memmove+0x2a>
 800e4a8:	bd10      	pop	{r4, pc}
 800e4aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4b2:	e7f7      	b.n	800e4a4 <memmove+0x24>

0800e4b4 <_sbrk_r>:
 800e4b4:	b538      	push	{r3, r4, r5, lr}
 800e4b6:	4d06      	ldr	r5, [pc, #24]	@ (800e4d0 <_sbrk_r+0x1c>)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	4604      	mov	r4, r0
 800e4bc:	4608      	mov	r0, r1
 800e4be:	602b      	str	r3, [r5, #0]
 800e4c0:	f7f3 f920 	bl	8001704 <_sbrk>
 800e4c4:	1c43      	adds	r3, r0, #1
 800e4c6:	d102      	bne.n	800e4ce <_sbrk_r+0x1a>
 800e4c8:	682b      	ldr	r3, [r5, #0]
 800e4ca:	b103      	cbz	r3, 800e4ce <_sbrk_r+0x1a>
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	bd38      	pop	{r3, r4, r5, pc}
 800e4d0:	24001290 	.word	0x24001290

0800e4d4 <memcpy>:
 800e4d4:	440a      	add	r2, r1
 800e4d6:	4291      	cmp	r1, r2
 800e4d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4dc:	d100      	bne.n	800e4e0 <memcpy+0xc>
 800e4de:	4770      	bx	lr
 800e4e0:	b510      	push	{r4, lr}
 800e4e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4ea:	4291      	cmp	r1, r2
 800e4ec:	d1f9      	bne.n	800e4e2 <memcpy+0xe>
 800e4ee:	bd10      	pop	{r4, pc}

0800e4f0 <_realloc_r>:
 800e4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f4:	4680      	mov	r8, r0
 800e4f6:	4615      	mov	r5, r2
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	b921      	cbnz	r1, 800e506 <_realloc_r+0x16>
 800e4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e500:	4611      	mov	r1, r2
 800e502:	f7ff bc4b 	b.w	800dd9c <_malloc_r>
 800e506:	b92a      	cbnz	r2, 800e514 <_realloc_r+0x24>
 800e508:	f7ff fbdc 	bl	800dcc4 <_free_r>
 800e50c:	2400      	movs	r4, #0
 800e50e:	4620      	mov	r0, r4
 800e510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e514:	f000 f81a 	bl	800e54c <_malloc_usable_size_r>
 800e518:	4285      	cmp	r5, r0
 800e51a:	4606      	mov	r6, r0
 800e51c:	d802      	bhi.n	800e524 <_realloc_r+0x34>
 800e51e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e522:	d8f4      	bhi.n	800e50e <_realloc_r+0x1e>
 800e524:	4629      	mov	r1, r5
 800e526:	4640      	mov	r0, r8
 800e528:	f7ff fc38 	bl	800dd9c <_malloc_r>
 800e52c:	4607      	mov	r7, r0
 800e52e:	2800      	cmp	r0, #0
 800e530:	d0ec      	beq.n	800e50c <_realloc_r+0x1c>
 800e532:	42b5      	cmp	r5, r6
 800e534:	462a      	mov	r2, r5
 800e536:	4621      	mov	r1, r4
 800e538:	bf28      	it	cs
 800e53a:	4632      	movcs	r2, r6
 800e53c:	f7ff ffca 	bl	800e4d4 <memcpy>
 800e540:	4621      	mov	r1, r4
 800e542:	4640      	mov	r0, r8
 800e544:	f7ff fbbe 	bl	800dcc4 <_free_r>
 800e548:	463c      	mov	r4, r7
 800e54a:	e7e0      	b.n	800e50e <_realloc_r+0x1e>

0800e54c <_malloc_usable_size_r>:
 800e54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e550:	1f18      	subs	r0, r3, #4
 800e552:	2b00      	cmp	r3, #0
 800e554:	bfbc      	itt	lt
 800e556:	580b      	ldrlt	r3, [r1, r0]
 800e558:	18c0      	addlt	r0, r0, r3
 800e55a:	4770      	bx	lr

0800e55c <_init>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	bf00      	nop
 800e560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e562:	bc08      	pop	{r3}
 800e564:	469e      	mov	lr, r3
 800e566:	4770      	bx	lr

0800e568 <_fini>:
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	bf00      	nop
 800e56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56e:	bc08      	pop	{r3}
 800e570:	469e      	mov	lr, r3
 800e572:	4770      	bx	lr
