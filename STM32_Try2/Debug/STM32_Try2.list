
STM32_Try2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c68  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08005e18  08005e18  00006e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006480  08006480  00008074  2**0
                  CONTENTS
  4 .ARM          00000008  08006480  08006480  00007480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006488  08006488  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006488  08006488  00007488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800648c  0800648c  0000748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006490  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008074  2**0
                  CONTENTS
 10 .bss          00001814  20000074  20000074  00008074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001888  20001888  00008074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e3b1  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002447  00000000  00000000  00016455  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  000188a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000996  00000000  00000000  00019508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002494f  00000000  00000000  00019e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011ed5  00000000  00000000  0003e7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4fd9  00000000  00000000  000506c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012569b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003748  00000000  00000000  001256e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00128e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005e00 	.word	0x08005e00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005e00 	.word	0x08005e00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USER_Path);
 8000594:	4904      	ldr	r1, [pc, #16]	@ (80005a8 <MX_FATFS_Init+0x18>)
 8000596:	4805      	ldr	r0, [pc, #20]	@ (80005ac <MX_FATFS_Init+0x1c>)
 8000598:	f004 feb4 	bl	8005304 <FATFS_LinkDriver>
 800059c:	4603      	mov	r3, r0
 800059e:	461a      	mov	r2, r3
 80005a0:	4b03      	ldr	r3, [pc, #12]	@ (80005b0 <MX_FATFS_Init+0x20>)
 80005a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000094 	.word	0x20000094
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000090 	.word	0x20000090

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 fe88 	bl	80012cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005bc:	f000 f814 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c0:	f000 f8dc 	bl	800077c <MX_GPIO_Init>
  MX_FATFS_Init();
 80005c4:	f7ff ffe4 	bl	8000590 <MX_FATFS_Init>
  MX_SPI1_Init();
 80005c8:	f000 f878 	bl	80006bc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 f8ac 	bl	8000728 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  disk_initialize(SDFatFs.drv);
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <main+0x30>)
 80005d2:	785b      	ldrb	r3, [r3, #1]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fd87 	bl	80030e8 <disk_initialize>
  SD_List_File();
 80005da:	f000 fb9b 	bl	8000d14 <SD_List_File>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	bf00      	nop
 80005e0:	e7fd      	b.n	80005de <main+0x2a>
 80005e2:	bf00      	nop
 80005e4:	2000013c 	.word	0x2000013c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f004 ff7a 	bl	80054f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000660:	2350      	movs	r3, #80	@ 0x50
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f001 f96d 	bl	8001950 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800067c:	f000 f8a6 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fbcf 	bl	8001e40 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006a8:	f000 f890 	bl	80007cc <Error_Handler>
  }
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	@ 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2210      	movs	r2, #16
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f001 fdb7 	bl	8002280 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 f858 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000098 	.word	0x20000098
 8000724:	40013000 	.word	0x40013000

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_USART2_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000734:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	@ (8000774 <MX_USART2_UART_Init+0x4c>)
 8000760:	f002 f89c 	bl	800289c <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f82f 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200000f0 	.word	0x200000f0
 8000778:	40004400 	.word	0x40004400

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_GPIO_Init+0x4c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a0f      	ldr	r2, [pc, #60]	@ (80007c8 <MX_GPIO_Init+0x4c>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b0d      	ldr	r3, [pc, #52]	@ (80007c8 <MX_GPIO_Init+0x4c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_GPIO_Init+0x4c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a08      	ldr	r2, [pc, #32]	@ (80007c8 <MX_GPIO_Init+0x4c>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_GPIO_Init+0x4c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <Error>:
	DIR dir;  /* Directory object structure (DIR) */
	//Kiem tra dung luong cua the
	DWORD fre_clust, fre_sect, tot_sect;
//-------------------------------------------------- 
static void Error (void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  LD_ON;
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e2:	4802      	ldr	r0, [pc, #8]	@ (80007ec <Error+0x14>)
 80007e4:	f001 f89a 	bl	800191c <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020800 	.word	0x40020800

080007f0 <SPIx_WriteRead>:
//----------------------------------------------- Ham ghi, doc du lieu tren bus SPI
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af02      	add	r7, sp, #8
 80007f6:	4603      	mov	r3, r0
 80007f8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 80007fe:	f107 020f 	add.w	r2, r7, #15
 8000802:	1df9      	adds	r1, r7, #7
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	4806      	ldr	r0, [pc, #24]	@ (8000828 <SPIx_WriteRead+0x38>)
 800080e:	f001 fdc0 	bl	8002392 <HAL_SPI_TransmitReceive>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SPIx_WriteRead+0x2c>
  {
    Error();
 8000818:	f7ff ffde 	bl	80007d8 <Error>
  }
  return receivedbyte;
 800081c:	7bfb      	ldrb	r3, [r7, #15]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000098 	.word	0x20000098

0800082c <SPI_SendByte>:
//----------------------------------------------- Ham truyen 1byte du lieu tren bus SPI
void SPI_SendByte(uint8_t bt)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ffd9 	bl	80007f0 <SPIx_WriteRead>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <SPI_ReceiveByte>:
//----------------------------------------------- Ham nhan 1byte du lieu tren bus SPI
uint8_t SPI_ReceiveByte(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 800084c:	20ff      	movs	r0, #255	@ 0xff
 800084e:	f7ff ffcf 	bl	80007f0 <SPIx_WriteRead>
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  return bt;
 8000856:	79fb      	ldrb	r3, [r7, #7]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8000864:	20ff      	movs	r0, #255	@ 0xff
 8000866:	f7ff ffc3 	bl	80007f0 <SPIx_WriteRead>
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}

0800086e <SPI_wait_ready>:
//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8000874:	2300      	movs	r3, #0
 8000876:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8000878:	f7ff ffe5 	bl	8000846 <SPI_ReceiveByte>
 800087c:	4603      	mov	r3, r0
 800087e:	717b      	strb	r3, [r7, #5]
    cnt++;
 8000880:	88fb      	ldrh	r3, [r7, #6]
 8000882:	3301      	adds	r3, #1
 8000884:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8000886:	797b      	ldrb	r3, [r7, #5]
 8000888:	2bff      	cmp	r3, #255	@ 0xff
 800088a:	d004      	beq.n	8000896 <SPI_wait_ready+0x28>
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000892:	4293      	cmp	r3, r2
 8000894:	d1f0      	bne.n	8000878 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089c:	4293      	cmp	r3, r2
 800089e:	d101      	bne.n	80008a4 <SPI_wait_ready+0x36>
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <SPI_wait_ready+0x38>
  return res;
 80008a4:	797b      	ldrb	r3, [r7, #5]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <SD_cmd>:
/*
	Cau lenh goi theo format of CMD8 - 48bit - 6bytes
*/
//----------------------------------------------- Goi 1 lenh den 
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
	//Phan biet lenh ACMD hay lenh CMD
	// ACMD<n> is the command sequense of CMD55-CMD<n>
	if (cmd & 0x80)
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	da0e      	bge.n	80008e2 <SD_cmd+0x32>
	{
		cmd &= 0x7F;
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008ca:	71fb      	strb	r3, [r7, #7]
		res = SD_cmd(CMD55, 0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2077      	movs	r0, #119	@ 0x77
 80008d0:	f7ff ffee 	bl	80008b0 <SD_cmd>
 80008d4:	4603      	mov	r3, r0
 80008d6:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d901      	bls.n	80008e2 <SD_cmd+0x32>
 80008de:	7bbb      	ldrb	r3, [r7, #14]
 80008e0:	e049      	b.n	8000976 <SD_cmd+0xc6>
	}
	// Select the card
	SS_SD_DESELECT();
 80008e2:	2201      	movs	r2, #1
 80008e4:	2108      	movs	r1, #8
 80008e6:	4826      	ldr	r0, [pc, #152]	@ (8000980 <SD_cmd+0xd0>)
 80008e8:	f001 f818 	bl	800191c <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80008ec:	f7ff ffab 	bl	8000846 <SPI_ReceiveByte>
	SS_SD_SELECT();
 80008f0:	2200      	movs	r2, #0
 80008f2:	2108      	movs	r1, #8
 80008f4:	4822      	ldr	r0, [pc, #136]	@ (8000980 <SD_cmd+0xd0>)
 80008f6:	f001 f811 	bl	800191c <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 80008fa:	f7ff ffa4 	bl	8000846 <SPI_ReceiveByte>
	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff93 	bl	800082c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	0e1b      	lsrs	r3, r3, #24
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff8d 	bl	800082c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	0c1b      	lsrs	r3, r3, #16
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff87 	bl	800082c <SPI_SendByte>
	SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ff81 	bl	800082c <SPI_SendByte>
	SPI_SendByte((uint8_t)arg); // Argument[7..0]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff7c 	bl	800082c <SPI_SendByte>
	n = 0x01; // Dummy CRC + Stop
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
	//Cyclic Redundancy Check: Ham bam phat sinh kiem thu cho chuoi bit
	if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b40      	cmp	r3, #64	@ 0x40
 800093c:	d101      	bne.n	8000942 <SD_cmd+0x92>
 800093e:	2395      	movs	r3, #149	@ 0x95
 8000940:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b48      	cmp	r3, #72	@ 0x48
 8000946:	d101      	bne.n	800094c <SD_cmd+0x9c>
 8000948:	2387      	movs	r3, #135	@ 0x87
 800094a:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(n);	
 800094c:	7bfb      	ldrb	r3, [r7, #15]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ff6c 	bl	800082c <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8000954:	230a      	movs	r3, #10
 8000956:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8000958:	f7ff ff75 	bl	8000846 <SPI_ReceiveByte>
 800095c:	4603      	mov	r3, r0
 800095e:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8000960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000964:	2b00      	cmp	r3, #0
 8000966:	da05      	bge.n	8000974 <SD_cmd+0xc4>
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	3b01      	subs	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f1      	bne.n	8000958 <SD_cmd+0xa8>
  return res;
 8000974:	7bbb      	ldrb	r3, [r7, #14]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3710      	adds	r7, #16
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40020000 	.word	0x40020000

08000984 <SD_Read_Block>:
  while(Timer1<2) //cho 20mili giay, de on dinh dien ap
    ;
}
//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
	result=SD_cmd (CMD17, lba); //CMD17 datasheet trang 50 -> 96
 800098e:	6839      	ldr	r1, [r7, #0]
 8000990:	2051      	movs	r0, #81	@ 0x51
 8000992:	f7ff ff8d 	bl	80008b0 <SD_cmd>
 8000996:	4603      	mov	r3, r0
 8000998:	737b      	strb	r3, [r7, #13]
	if (result!=0x00) return 5; //Thoat, neu ket qua tra ve 0x00
 800099a:	7b7b      	ldrb	r3, [r7, #13]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SD_Read_Block+0x20>
 80009a0:	2305      	movs	r3, #5
 80009a2:	e02f      	b.n	8000a04 <SD_Read_Block+0x80>
	  SPI_Release();
 80009a4:	f7ff ff5c 	bl	8000860 <SPI_Release>
  cnt=0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	81fb      	strh	r3, [r7, #14]
  do{ //We are waiting for the beginning of the block
    result = SPI_ReceiveByte();
 80009ac:	f7ff ff4b 	bl	8000846 <SPI_ReceiveByte>
 80009b0:	4603      	mov	r3, r0
 80009b2:	737b      	strb	r3, [r7, #13]
    cnt++;
 80009b4:	89fb      	ldrh	r3, [r7, #14]
 80009b6:	3301      	adds	r3, #1
 80009b8:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 80009ba:	7b7b      	ldrb	r3, [r7, #13]
 80009bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80009be:	d004      	beq.n	80009ca <SD_Read_Block+0x46>
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d1f0      	bne.n	80009ac <SD_Read_Block+0x28>
  if (cnt>=0xFFFF) return 5;
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d101      	bne.n	80009d8 <SD_Read_Block+0x54>
 80009d4:	2305      	movs	r3, #5
 80009d6:	e015      	b.n	8000a04 <SD_Read_Block+0x80>
  for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte(); //get the bytes of the block from the bus to the buffer
 80009d8:	2300      	movs	r3, #0
 80009da:	81fb      	strh	r3, [r7, #14]
 80009dc:	e009      	b.n	80009f2 <SD_Read_Block+0x6e>
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	18d4      	adds	r4, r2, r3
 80009e4:	f7ff ff2f 	bl	8000846 <SPI_ReceiveByte>
 80009e8:	4603      	mov	r3, r0
 80009ea:	7023      	strb	r3, [r4, #0]
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	3301      	adds	r3, #1
 80009f0:	81fb      	strh	r3, [r7, #14]
 80009f2:	89fb      	ldrh	r3, [r7, #14]
 80009f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009f8:	d3f1      	bcc.n	80009de <SD_Read_Block+0x5a>
  SPI_Release(); 
 80009fa:	f7ff ff31 	bl	8000860 <SPI_Release>
  SPI_Release();
 80009fe:	f7ff ff2f 	bl	8000860 <SPI_Release>
  return 0;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd90      	pop	{r4, r7, pc}

08000a0c <SD_Write_Block>:
//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba); //CMD24 Datasheet 51 and 97-98
 8000a16:	6839      	ldr	r1, [r7, #0]
 8000a18:	2058      	movs	r0, #88	@ 0x58
 8000a1a:	f7ff ff49 	bl	80008b0 <SD_cmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 6; //Exit if the result is not 0x00
 8000a22:	7b7b      	ldrb	r3, [r7, #13]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SD_Write_Block+0x20>
 8000a28:	2306      	movs	r3, #6
 8000a2a:	e03d      	b.n	8000aa8 <SD_Write_Block+0x9c>
  SPI_Release();
 8000a2c:	f7ff ff18 	bl	8000860 <SPI_Release>
  SPI_SendByte (0xFE); //Beginning of the buffer (Start block token)
 8000a30:	20fe      	movs	r0, #254	@ 0xfe
 8000a32:	f7ff fefb 	bl	800082c <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); //data transfer
 8000a36:	2300      	movs	r3, #0
 8000a38:	81fb      	strh	r3, [r7, #14]
 8000a3a:	e009      	b.n	8000a50 <SD_Write_Block+0x44>
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fef1 	bl	800082c <SPI_SendByte>
 8000a4a:	89fb      	ldrh	r3, [r7, #14]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	81fb      	strh	r3, [r7, #14]
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a56:	d3f1      	bcc.n	8000a3c <SD_Write_Block+0x30>
  SPI_Release();
 8000a58:	f7ff ff02 	bl	8000860 <SPI_Release>
  SPI_Release();
 8000a5c:	f7ff ff00 	bl	8000860 <SPI_Release>
  result=SPI_ReceiveByte();
 8000a60:	f7ff fef1 	bl	8000846 <SPI_ReceiveByte>
 8000a64:	4603      	mov	r3, r0
 8000a66:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) return 6; //Exit if the result is not 0x05 (Datamount pg 111)
 8000a68:	7b7b      	ldrb	r3, [r7, #13]
 8000a6a:	f003 0305 	and.w	r3, r3, #5
 8000a6e:	2b05      	cmp	r3, #5
 8000a70:	d001      	beq.n	8000a76 <SD_Write_Block+0x6a>
 8000a72:	2306      	movs	r3, #6
 8000a74:	e018      	b.n	8000aa8 <SD_Write_Block+0x9c>
  cnt=0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	81fb      	strh	r3, [r7, #14]
  do { //We are waiting for the end of the BUSY state
    result=SPI_ReceiveByte();
 8000a7a:	f7ff fee4 	bl	8000846 <SPI_ReceiveByte>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	737b      	strb	r3, [r7, #13]
    cnt++;
 8000a82:	89fb      	ldrh	r3, [r7, #14]
 8000a84:	3301      	adds	r3, #1
 8000a86:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8000a88:	7b7b      	ldrb	r3, [r7, #13]
 8000a8a:	2bff      	cmp	r3, #255	@ 0xff
 8000a8c:	d004      	beq.n	8000a98 <SD_Write_Block+0x8c>
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d1f0      	bne.n	8000a7a <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) return 6;
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <SD_Write_Block+0x9a>
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	e000      	b.n	8000aa8 <SD_Write_Block+0x9c>
  return 0;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <sd_ini>:
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8000ab0:	b590      	push	{r4, r7, lr}
 8000ab2:	b087      	sub	sp, #28
 8000ab4:	af02      	add	r7, sp, #8
	uint8_t i, cmd;					//Command
  int16_t tmr;						//Virtual timer
  uint32_t temp;					//Bien tam
  LD_OFF;									//Tat led PC13
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000abc:	488d      	ldr	r0, [pc, #564]	@ (8000cf4 <sd_ini+0x244>)
 8000abe:	f000 ff2d 	bl	800191c <HAL_GPIO_WritePin>
  sdinfo.type = 0;				//Kieu the
 8000ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8000cf8 <sd_ini+0x248>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
	//OCR Register
	uint8_t ocr[4];
	temp = hspi1.Init.BaudRatePrescaler;
 8000ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8000cfc <sd_ini+0x24c>)
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	60bb      	str	r3, [r7, #8]
	//Chia toc do cua SPI thang 156.25 KBPS vi toc doc cua bus APH qua cao nen sd card khong the dong bo
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbps
 8000ace:	4b8b      	ldr	r3, [pc, #556]	@ (8000cfc <sd_ini+0x24c>)
 8000ad0:	2230      	movs	r2, #48	@ 0x30
 8000ad2:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi1);
 8000ad4:	4889      	ldr	r0, [pc, #548]	@ (8000cfc <sd_ini+0x24c>)
 8000ad6:	f001 fbd3 	bl	8002280 <HAL_SPI_Init>
	SS_SD_DESELECT();
 8000ada:	2201      	movs	r2, #1
 8000adc:	2108      	movs	r1, #8
 8000ade:	4888      	ldr	r0, [pc, #544]	@ (8000d00 <sd_ini+0x250>)
 8000ae0:	f000 ff1c 	bl	800191c <HAL_GPIO_WritePin>
	for(i=0;i<10;i++) //Can phai doi it nhat 74 xung de dong bo, o day minh set 80
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e004      	b.n	8000af4 <sd_ini+0x44>
	SPI_Release();
 8000aea:	f7ff feb9 	bl	8000860 <SPI_Release>
	for(i=0;i<10;i++) //Can phai doi it nhat 74 xung de dong bo, o day minh set 80
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	3301      	adds	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	7bfb      	ldrb	r3, [r7, #15]
 8000af6:	2b09      	cmp	r3, #9
 8000af8:	d9f7      	bls.n	8000aea <sd_ini+0x3a>
	hspi1.Init.BaudRatePrescaler = temp;
 8000afa:	4a80      	ldr	r2, [pc, #512]	@ (8000cfc <sd_ini+0x24c>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi1);
 8000b00:	487e      	ldr	r0, [pc, #504]	@ (8000cfc <sd_ini+0x24c>)
 8000b02:	f001 fbbd 	bl	8002280 <HAL_SPI_Init>
	SS_SD_SELECT();
 8000b06:	2200      	movs	r2, #0
 8000b08:	2108      	movs	r1, #8
 8000b0a:	487d      	ldr	r0, [pc, #500]	@ (8000d00 <sd_ini+0x250>)
 8000b0c:	f000 ff06 	bl	800191c <HAL_GPIO_WritePin>
  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8000b10:	2100      	movs	r1, #0
 8000b12:	2040      	movs	r0, #64	@ 0x40
 8000b14:	f7ff fecc 	bl	80008b0 <SD_cmd>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	f040 80cf 	bne.w	8000cbe <sd_ini+0x20e>
  {
		SPI_Release();
 8000b20:	f7ff fe9e 	bl	8000860 <SPI_Release>
		if (SD_cmd(CMD8, 0x1AA) == 1) // SD version2 (Card returns response without illegal command) Lenh hop le
 8000b24:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000b28:	2048      	movs	r0, #72	@ 0x48
 8000b2a:	f7ff fec1 	bl	80008b0 <SD_cmd>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	f040 808c 	bne.w	8000c4e <sd_ini+0x19e>
		{
			for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e00c      	b.n	8000b56 <sd_ini+0xa6>
 8000b3c:	7bfc      	ldrb	r4, [r7, #15]
 8000b3e:	f7ff fe82 	bl	8000846 <SPI_ReceiveByte>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	f104 0310 	add.w	r3, r4, #16
 8000b4a:	443b      	add	r3, r7
 8000b4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	3301      	adds	r3, #1
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d9ef      	bls.n	8000b3c <sd_ini+0x8c>
			sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8000b5c:	793b      	ldrb	r3, [r7, #4]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	797b      	ldrb	r3, [r7, #5]
 8000b62:	4618      	mov	r0, r3
 8000b64:	79bb      	ldrb	r3, [r7, #6]
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	9201      	str	r2, [sp, #4]
 8000b6a:	9300      	str	r3, [sp, #0]
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	460a      	mov	r2, r1
 8000b70:	4964      	ldr	r1, [pc, #400]	@ (8000d04 <sd_ini+0x254>)
 8000b72:	4865      	ldr	r0, [pc, #404]	@ (8000d08 <sd_ini+0x258>)
 8000b74:	f004 fc9c 	bl	80054b0 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000b78:	4863      	ldr	r0, [pc, #396]	@ (8000d08 <sd_ini+0x258>)
 8000b7a:	f7ff fb39 	bl	80001f0 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b86:	4960      	ldr	r1, [pc, #384]	@ (8000d08 <sd_ini+0x258>)
 8000b88:	4860      	ldr	r0, [pc, #384]	@ (8000d0c <sd_ini+0x25c>)
 8000b8a:	f001 fed7 	bl	800293c <HAL_UART_Transmit>
			// Get trailing return value of R7 resp 
			//Check nguong dien ap hoat dong sd card
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	f040 8096 	bne.w	8000cc2 <sd_ini+0x212>
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2baa      	cmp	r3, #170	@ 0xaa
 8000b9a:	f040 8092 	bne.w	8000cc2 <sd_ini+0x212>
			{
				  for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8000b9e:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8000ba2:	81bb      	strh	r3, [r7, #12]
 8000ba4:	e005      	b.n	8000bb2 <sd_ini+0x102>
 8000ba6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	3b01      	subs	r3, #1
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	81bb      	strh	r3, [r7, #12]
 8000bb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d007      	beq.n	8000bca <sd_ini+0x11a>
 8000bba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000bbe:	20e9      	movs	r0, #233	@ 0xe9
 8000bc0:	f7ff fe76 	bl	80008b0 <SD_cmd>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1ed      	bne.n	8000ba6 <sd_ini+0xf6>
						; // Wait for leaving idle state (ACMD41 with HCS bit)
					if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 8000bca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d077      	beq.n	8000cc2 <sd_ini+0x212>
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	207a      	movs	r0, #122	@ 0x7a
 8000bd6:	f7ff fe6b 	bl	80008b0 <SD_cmd>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d170      	bne.n	8000cc2 <sd_ini+0x212>
					for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
 8000be4:	e00c      	b.n	8000c00 <sd_ini+0x150>
 8000be6:	7bfc      	ldrb	r4, [r7, #15]
 8000be8:	f7ff fe2d 	bl	8000846 <SPI_ReceiveByte>
 8000bec:	4603      	mov	r3, r0
 8000bee:	461a      	mov	r2, r3
 8000bf0:	f104 0310 	add.w	r3, r4, #16
 8000bf4:	443b      	add	r3, r7
 8000bf6:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d9ef      	bls.n	8000be6 <sd_ini+0x136>
					sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n",ocr[0],ocr[1],ocr[2],ocr[3]);
 8000c06:	793b      	ldrb	r3, [r7, #4]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	797b      	ldrb	r3, [r7, #5]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	79bb      	ldrb	r3, [r7, #6]
 8000c10:	79fa      	ldrb	r2, [r7, #7]
 8000c12:	9201      	str	r2, [sp, #4]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	493a      	ldr	r1, [pc, #232]	@ (8000d04 <sd_ini+0x254>)
 8000c1c:	483a      	ldr	r0, [pc, #232]	@ (8000d08 <sd_ini+0x258>)
 8000c1e:	f004 fc47 	bl	80054b0 <siprintf>
					HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
 8000c22:	4839      	ldr	r0, [pc, #228]	@ (8000d08 <sd_ini+0x258>)
 8000c24:	f7ff fae4 	bl	80001f0 <strlen>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c30:	4935      	ldr	r1, [pc, #212]	@ (8000d08 <sd_ini+0x258>)
 8000c32:	4836      	ldr	r0, [pc, #216]	@ (8000d0c <sd_ini+0x25c>)
 8000c34:	f001 fe82 	bl	800293c <HAL_UART_Transmit>
						//Kiem tra neu 8bit OCR dau tien la Low voltage range thi SDv2 (0x04) + CT_BLOCK (0x08)
					sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8000c38:	793b      	ldrb	r3, [r7, #4]
 8000c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <sd_ini+0x196>
 8000c42:	220c      	movs	r2, #12
 8000c44:	e000      	b.n	8000c48 <sd_ini+0x198>
 8000c46:	2204      	movs	r2, #4
 8000c48:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <sd_ini+0x248>)
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e039      	b.n	8000cc2 <sd_ini+0x212>
				}
			}
		}
		else //SD version1 or MMC version3 (illegal command) Lenh khong hop le
		{
			if (SD_cmd(ACMD41, 0) <= 1)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	20e9      	movs	r0, #233	@ 0xe9
 8000c52:	f7ff fe2d 	bl	80008b0 <SD_cmd>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d805      	bhi.n	8000c68 <sd_ini+0x1b8>
			{
				sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8000c5c:	4b26      	ldr	r3, [pc, #152]	@ (8000cf8 <sd_ini+0x248>)
 8000c5e:	2202      	movs	r2, #2
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	23e9      	movs	r3, #233	@ 0xe9
 8000c64:	73bb      	strb	r3, [r7, #14]
 8000c66:	e004      	b.n	8000c72 <sd_ini+0x1c2>
			}
			else
			{
				sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8000c68:	4b23      	ldr	r3, [pc, #140]	@ (8000cf8 <sd_ini+0x248>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
 8000c6e:	2341      	movs	r3, #65	@ 0x41
 8000c70:	73bb      	strb	r3, [r7, #14]
			}
			for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8000c72:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8000c76:	81bb      	strh	r3, [r7, #12]
 8000c78:	e005      	b.n	8000c86 <sd_ini+0x1d6>
 8000c7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	3b01      	subs	r3, #1
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	81bb      	strh	r3, [r7, #12]
 8000c86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d007      	beq.n	8000c9e <sd_ini+0x1ee>
 8000c8e:	7bbb      	ldrb	r3, [r7, #14]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fe0c 	bl	80008b0 <SD_cmd>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ed      	bne.n	8000c7a <sd_ini+0x1ca>
			if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8000c9e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d007      	beq.n	8000cb6 <sd_ini+0x206>
 8000ca6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000caa:	2050      	movs	r0, #80	@ 0x50
 8000cac:	f7ff fe00 	bl	80008b0 <SD_cmd>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <sd_ini+0x212>
			sdinfo.type = 0;
 8000cb6:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <sd_ini+0x248>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e001      	b.n	8000cc2 <sd_ini+0x212>
		}
  }
  else
  {
    return 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e013      	b.n	8000cea <sd_ini+0x23a>
  }
  sprintf(str1,"Type SD: 0x%02X\r\n",sdinfo.type);
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <sd_ini+0x248>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4911      	ldr	r1, [pc, #68]	@ (8000d10 <sd_ini+0x260>)
 8000ccc:	480e      	ldr	r0, [pc, #56]	@ (8000d08 <sd_ini+0x258>)
 8000cce:	f004 fbef 	bl	80054b0 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);	
 8000cd2:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <sd_ini+0x258>)
 8000cd4:	f7ff fa8c 	bl	80001f0 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce0:	4909      	ldr	r1, [pc, #36]	@ (8000d08 <sd_ini+0x258>)
 8000ce2:	480a      	ldr	r0, [pc, #40]	@ (8000d0c <sd_ini+0x25c>)
 8000ce4:	f001 fe2a 	bl	800293c <HAL_UART_Transmit>
  return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd90      	pop	{r4, r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	20000138 	.word	0x20000138
 8000cfc:	20000098 	.word	0x20000098
 8000d00:	40020000 	.word	0x40020000
 8000d04:	08005e18 	.word	0x08005e18
 8000d08:	20001174 	.word	0x20001174
 8000d0c:	200000f0 	.word	0x200000f0
 8000d10:	08005e3c 	.word	0x08005e3c

08000d14 <SD_List_File>:
			}
		 }
	return SD.rdata;
}

void SD_List_File(void){
 8000d14:	b598      	push	{r3, r4, r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4935      	ldr	r1, [pc, #212]	@ (8000df0 <SD_List_File+0xdc>)
 8000d1c:	4835      	ldr	r0, [pc, #212]	@ (8000df4 <SD_List_File+0xe0>)
 8000d1e:	f004 f989 	bl	8005034 <f_mount>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <SD_List_File+0x1a>
	{
		Error_Handler();
 8000d28:	f7ff fd50 	bl	80007cc <Error_Handler>
				HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
			}
			f_closedir(&dir);
		}
	}
}
 8000d2c:	e05e      	b.n	8000dec <SD_List_File+0xd8>
		strcpy(fileInfo.fname, (char*)sect);
 8000d2e:	4932      	ldr	r1, [pc, #200]	@ (8000df8 <SD_List_File+0xe4>)
 8000d30:	4832      	ldr	r0, [pc, #200]	@ (8000dfc <SD_List_File+0xe8>)
 8000d32:	f004 fc11 	bl	8005558 <strcpy>
		fileInfo.fsize = sizeof(sect);
 8000d36:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <SD_List_File+0xec>)
 8000d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d3c:	601a      	str	r2, [r3, #0]
		result = f_opendir(&dir, "/");
 8000d3e:	4931      	ldr	r1, [pc, #196]	@ (8000e04 <SD_List_File+0xf0>)
 8000d40:	4831      	ldr	r0, [pc, #196]	@ (8000e08 <SD_List_File+0xf4>)
 8000d42:	f004 f9bd 	bl	80050c0 <f_opendir>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b30      	ldr	r3, [pc, #192]	@ (8000e0c <SD_List_File+0xf8>)
 8000d4c:	701a      	strb	r2, [r3, #0]
		if (result == FR_OK)
 8000d4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e0c <SD_List_File+0xf8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d14a      	bne.n	8000dec <SD_List_File+0xd8>
				result = f_readdir(&dir, &fileInfo);
 8000d56:	492a      	ldr	r1, [pc, #168]	@ (8000e00 <SD_List_File+0xec>)
 8000d58:	482b      	ldr	r0, [pc, #172]	@ (8000e08 <SD_List_File+0xf4>)
 8000d5a:	f004 fa4a 	bl	80051f2 <f_readdir>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <SD_List_File+0xf8>)
 8000d64:	701a      	strb	r2, [r3, #0]
				if (result==FR_OK && fileInfo.fname[0])
 8000d66:	4b29      	ldr	r3, [pc, #164]	@ (8000e0c <SD_List_File+0xf8>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d13b      	bne.n	8000de6 <SD_List_File+0xd2>
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <SD_List_File+0xec>)
 8000d70:	7d9b      	ldrb	r3, [r3, #22]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d037      	beq.n	8000de6 <SD_List_File+0xd2>
					fn = fileInfo.fname; // Pointer to the LFN buffer
 8000d76:	4b26      	ldr	r3, [pc, #152]	@ (8000e10 <SD_List_File+0xfc>)
 8000d78:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <SD_List_File+0xe8>)
 8000d7a:	601a      	str	r2, [r3, #0]
					if(strlen(fn)) HAL_UART_Transmit(&huart2,(uint8_t*)fn,strlen(fn),0x1000);
 8000d7c:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <SD_List_File+0xfc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d00f      	beq.n	8000da6 <SD_List_File+0x92>
 8000d86:	4b22      	ldr	r3, [pc, #136]	@ (8000e10 <SD_List_File+0xfc>)
 8000d88:	681c      	ldr	r4, [r3, #0]
 8000d8a:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <SD_List_File+0xfc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fa2e 	bl	80001f0 <strlen>
 8000d94:	4603      	mov	r3, r0
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	481d      	ldr	r0, [pc, #116]	@ (8000e14 <SD_List_File+0x100>)
 8000da0:	f001 fdcc 	bl	800293c <HAL_UART_Transmit>
 8000da4:	e00a      	b.n	8000dbc <SD_List_File+0xa8>
					else HAL_UART_Transmit(&huart2,(uint8_t*)fileInfo.fname,strlen((char*)fileInfo.fname),0x1000);
 8000da6:	4815      	ldr	r0, [pc, #84]	@ (8000dfc <SD_List_File+0xe8>)
 8000da8:	f7ff fa22 	bl	80001f0 <strlen>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000db4:	4911      	ldr	r1, [pc, #68]	@ (8000dfc <SD_List_File+0xe8>)
 8000db6:	4817      	ldr	r0, [pc, #92]	@ (8000e14 <SD_List_File+0x100>)
 8000db8:	f001 fdc0 	bl	800293c <HAL_UART_Transmit>
					if(fileInfo.fattrib&AM_DIR)
 8000dbc:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <SD_List_File+0xec>)
 8000dbe:	7a1b      	ldrb	r3, [r3, #8]
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <SD_List_File+0xc2>
						HAL_UART_Transmit(&huart2,(uint8_t*)"  [DIR]",7,0x1000);
 8000dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dcc:	2207      	movs	r2, #7
 8000dce:	4912      	ldr	r1, [pc, #72]	@ (8000e18 <SD_List_File+0x104>)
 8000dd0:	4810      	ldr	r0, [pc, #64]	@ (8000e14 <SD_List_File+0x100>)
 8000dd2:	f001 fdb3 	bl	800293c <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2,(uint8_t*)"\r\n",2,0x1000);
 8000dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dda:	2202      	movs	r2, #2
 8000ddc:	490f      	ldr	r1, [pc, #60]	@ (8000e1c <SD_List_File+0x108>)
 8000dde:	480d      	ldr	r0, [pc, #52]	@ (8000e14 <SD_List_File+0x100>)
 8000de0:	f001 fdac 	bl	800293c <HAL_UART_Transmit>
				result = f_readdir(&dir, &fileInfo);
 8000de4:	e7b7      	b.n	8000d56 <SD_List_File+0x42>
			f_closedir(&dir);
 8000de6:	4808      	ldr	r0, [pc, #32]	@ (8000e08 <SD_List_File+0xf4>)
 8000de8:	f004 f9dd 	bl	80051a6 <f_closedir>
}
 8000dec:	bf00      	nop
 8000dee:	bd98      	pop	{r3, r4, r7, pc}
 8000df0:	20000094 	.word	0x20000094
 8000df4:	2000013c 	.word	0x2000013c
 8000df8:	200011b0 	.word	0x200011b0
 8000dfc:	200013ca 	.word	0x200013ca
 8000e00:	200013b4 	.word	0x200013b4
 8000e04:	08005e60 	.word	0x08005e60
 8000e08:	200014d0 	.word	0x200014d0
 8000e0c:	200013b0 	.word	0x200013b0
 8000e10:	200014cc 	.word	0x200014cc
 8000e14:	200000f0 	.word	0x200000f0
 8000e18:	08005e64 	.word	0x08005e64
 8000e1c:	08005e6c 	.word	0x08005e6c

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e36:	4b0d      	ldr	r3, [pc, #52]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	4a08      	ldr	r2, [pc, #32]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e52:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_MspInit+0x4c>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800

08000e70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <HAL_SPI_MspInit+0x84>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d12b      	bne.n	8000eea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000e9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <HAL_SPI_MspInit+0x88>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eca:	23e0      	movs	r3, #224	@ 0xe0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eda:	2305      	movs	r3, #5
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <HAL_SPI_MspInit+0x8c>)
 8000ee6:	f000 fb6d 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000eea:	bf00      	nop
 8000eec:	3728      	adds	r7, #40	@ 0x28
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40013000 	.word	0x40013000
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a19      	ldr	r2, [pc, #100]	@ (8000f84 <HAL_UART_MspInit+0x84>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d12b      	bne.n	8000f7a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a10      	ldr	r2, [pc, #64]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <HAL_UART_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f5a:	230c      	movs	r3, #12
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <HAL_UART_MspInit+0x8c>)
 8000f76:	f000 fb25 	bl	80015c4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <NMI_Handler+0x4>

08000f98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9c:	bf00      	nop
 8000f9e:	e7fd      	b.n	8000f9c <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	bf00      	nop
 8000fa6:	e7fd      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe6:	f000 f9c3 	bl	8001370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f004 fa6e 	bl	8005500 <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	@ (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20030000 	.word	0x20030000
 8001050:	00000400 	.word	0x00000400
 8001054:	20001504 	.word	0x20001504
 8001058:	20001888 	.word	0x20001888

0800105c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
		HAL_UART_Transmit(&huart2,(uint8_t*)"USER_initialize\r\n",17,0x1000);
 800108a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800108e:	2211      	movs	r2, #17
 8001090:	490d      	ldr	r1, [pc, #52]	@ (80010c8 <USER_initialize+0x48>)
 8001092:	480e      	ldr	r0, [pc, #56]	@ (80010cc <USER_initialize+0x4c>)
 8001094:	f001 fc52 	bl	800293c <HAL_UART_Transmit>

		HAL_Delay(2);
 8001098:	2002      	movs	r0, #2
 800109a:	f000 f989 	bl	80013b0 <HAL_Delay>
		if(sd_ini()==0) {Stat &= ~STA_NOINIT;} //Reset status STA_NOINIT
 800109e:	f7ff fd07 	bl	8000ab0 <sd_ini>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d107      	bne.n	80010b8 <USER_initialize+0x38>
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <USER_initialize+0x50>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <USER_initialize+0x50>)
 80010b6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <USER_initialize+0x50>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	08005f98 	.word	0x08005f98
 80010cc:	200000f0 	.word	0x200000f0
 80010d0:	20000004 	.word	0x20000004

080010d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		//HAL_UART_Transmit(&huart2,(uint8_t*)"USER_status\r\n",13,0x1000);
		if (pdrv) return STA_NOINIT;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <USER_status+0x14>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e002      	b.n	80010ee <USER_status+0x1a>
    return Stat;
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <USER_status+0x28>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000004 	.word	0x20000004

08001100 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//		HAL_UART_Transmit(&huart2,(uint8_t*)"USER_read\r\n",11,0x1000);
//		sprintf(str1,"sector: %lu; count: %d\r\n",sector, count);
//		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
		if (pdrv || !count) return RES_PARERR;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <USER_read+0x1c>
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <USER_read+0x20>
 800111c:	2304      	movs	r3, #4
 800111e:	e023      	b.n	8001168 <USER_read+0x68>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <USER_read+0x70>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <USER_read+0x32>
 800112e:	2303      	movs	r3, #3
 8001130:	e01a      	b.n	8001168 <USER_read+0x68>
		if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <USER_read+0x74>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	d102      	bne.n	8001146 <USER_read+0x46>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	607b      	str	r3, [r7, #4]
		if (count == 1) /* Single block read */
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <USER_read+0x58>
		{
			SD_Read_Block(buff,sector); //Consider the block in the buffer
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	68b8      	ldr	r0, [r7, #8]
 8001150:	f7ff fc18 	bl	8000984 <SD_Read_Block>
			count = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	603b      	str	r3, [r7, #0]
		}
		else /* Multiple block read */
		{
		}
		SPI_Release();
 8001158:	f7ff fb82 	bl	8000860 <SPI_Release>
		return count ? RES_ERROR : RES_OK;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000004 	.word	0x20000004
 8001174:	20000138 	.word	0x20000138

08001178 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//		HAL_UART_Transmit(&huart2,(uint8_t*)"USER_write\r\n",12,0x1000);
//		sprintf(str1,"sector: %lu\r\n",sector);
//		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
	  if (pdrv || !count) return RES_PARERR;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <USER_write+0x1c>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d101      	bne.n	8001198 <USER_write+0x20>
 8001194:	2304      	movs	r3, #4
 8001196:	e02c      	b.n	80011f2 <USER_write+0x7a>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001198:	4b18      	ldr	r3, [pc, #96]	@ (80011fc <USER_write+0x84>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <USER_write+0x32>
 80011a6:	2303      	movs	r3, #3
 80011a8:	e023      	b.n	80011f2 <USER_write+0x7a>
		if (Stat & STA_PROTECT) return RES_WRPRT;
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <USER_write+0x84>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <USER_write+0x44>
 80011b8:	2302      	movs	r3, #2
 80011ba:	e01a      	b.n	80011f2 <USER_write+0x7a>
		if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <USER_write+0x88>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <USER_write+0x58>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	607b      	str	r3, [r7, #4]
		if (count == 1) /* Single block read */
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d105      	bne.n	80011e2 <USER_write+0x6a>
		{
			SD_Write_Block((BYTE*)buff,sector); //Consider the block in the buffer
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	68b8      	ldr	r0, [r7, #8]
 80011da:	f7ff fc17 	bl	8000a0c <SD_Write_Block>
			count = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
		}
		else /* Multiple block read */
		{
		}
		SPI_Release();
 80011e2:	f7ff fb3d 	bl	8000860 <SPI_Release>
		return count ? RES_ERROR : RES_OK;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf14      	ite	ne
 80011ec:	2301      	movne	r3, #1
 80011ee:	2300      	moveq	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000004 	.word	0x20000004
 8001200:	20000138 	.word	0x20000138

08001204 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	603a      	str	r2, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	460b      	mov	r3, r1
 8001212:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
//		HAL_UART_Transmit(&huart2,(uint8_t*)"USER_ioctl\r\n",12,0x1000);
	//So lenh dang su dung
//		sprintf(str1,"cmd: %d\r\n",cmd);
//		HAL_UART_Transmit(&huart2,(uint8_t*)str1,strlen(str1),0x1000);
		if (pdrv) return RES_PARERR;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <USER_ioctl+0x1a>
 800121a:	2304      	movs	r3, #4
 800121c:	e026      	b.n	800126c <USER_ioctl+0x68>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800121e:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <USER_ioctl+0x70>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <USER_ioctl+0x2c>
 800122c:	2303      	movs	r3, #3
 800122e:	e01d      	b.n	800126c <USER_ioctl+0x68>
		res = RES_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
		switch (cmd)
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <USER_ioctl+0x3c>
 800123a:	2b02      	cmp	r3, #2
 800123c:	d008      	beq.n	8001250 <USER_ioctl+0x4c>
 800123e:	e00e      	b.n	800125e <USER_ioctl+0x5a>
		{
			case CTRL_SYNC : /* Flush dirty buffer if present */
				//SS_SD_SELECT();
				if (SPI_wait_ready() == 0xFF)
 8001240:	f7ff fb15 	bl	800086e <SPI_wait_ready>
 8001244:	4603      	mov	r3, r0
 8001246:	2bff      	cmp	r3, #255	@ 0xff
 8001248:	d10c      	bne.n	8001264 <USER_ioctl+0x60>
				res = RES_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
				break;
 800124e:	e009      	b.n	8001264 <USER_ioctl+0x60>
			case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
				*(WORD*)buff = 512;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001256:	801a      	strh	r2, [r3, #0]
				res = RES_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
				break;
 800125c:	e003      	b.n	8001266 <USER_ioctl+0x62>
			default:
				res = RES_PARERR;
 800125e:	2304      	movs	r3, #4
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e000      	b.n	8001266 <USER_ioctl+0x62>
				break;
 8001264:	bf00      	nop
		}
		SPI_Release();
 8001266:	f7ff fafb 	bl	8000860 <SPI_Release>
    return res;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000004 	.word	0x20000004

08001278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800127c:	f7ff feee 	bl	800105c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001282:	490d      	ldr	r1, [pc, #52]	@ (80012b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001284:	4a0d      	ldr	r2, [pc, #52]	@ (80012bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001298:	4c0a      	ldr	r4, [pc, #40]	@ (80012c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012a6:	f004 f931 	bl	800550c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012aa:	f7ff f983 	bl	80005b4 <main>
  bx  lr    
 80012ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80012bc:	08006490 	.word	0x08006490
  ldr r2, =_sbss
 80012c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80012c4:	20001888 	.word	0x20001888

080012c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c8:	e7fe      	b.n	80012c8 <ADC_IRQHandler>
	...

080012cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d0:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0d      	ldr	r2, [pc, #52]	@ (800130c <HAL_Init+0x40>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_Init+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <HAL_Init+0x40>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <HAL_Init+0x40>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a07      	ldr	r2, [pc, #28]	@ (800130c <HAL_Init+0x40>)
 80012ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f4:	2003      	movs	r0, #3
 80012f6:	f000 f931 	bl	800155c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f808 	bl	8001310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001300:	f7ff fd8e 	bl	8000e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00

08001310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_InitTick+0x54>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_InitTick+0x58>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 f93b 	bl	80015aa <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e00e      	b.n	800135c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80a      	bhi.n	800135a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001344:	2200      	movs	r2, #0
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f000 f911 	bl	8001572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001350:	4a06      	ldr	r2, [pc, #24]	@ (800136c <HAL_InitTick+0x5c>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	e000      	b.n	800135c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000000 	.word	0x20000000
 8001368:	20000020 	.word	0x20000020
 800136c:	2000001c 	.word	0x2000001c

08001370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001374:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_IncTick+0x20>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	461a      	mov	r2, r3
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <HAL_IncTick+0x24>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4413      	add	r3, r2
 8001380:	4a04      	ldr	r2, [pc, #16]	@ (8001394 <HAL_IncTick+0x24>)
 8001382:	6013      	str	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000020 	.word	0x20000020
 8001394:	20001508 	.word	0x20001508

08001398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b03      	ldr	r3, [pc, #12]	@ (80013ac <HAL_GetTick+0x14>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20001508 	.word	0x20001508

080013b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b8:	f7ff ffee 	bl	8001398 <HAL_GetTick>
 80013bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c8:	d005      	beq.n	80013d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ca:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <HAL_Delay+0x44>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013d6:	bf00      	nop
 80013d8:	f7ff ffde 	bl	8001398 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d8f7      	bhi.n	80013d8 <HAL_Delay+0x28>
  {
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000020 	.word	0x20000020

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	6039      	str	r1, [r7, #0]
 8001466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	db0a      	blt.n	8001486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	b2da      	uxtb	r2, r3
 8001474:	490c      	ldr	r1, [pc, #48]	@ (80014a8 <__NVIC_SetPriority+0x4c>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	440b      	add	r3, r1
 8001480:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001484:	e00a      	b.n	800149c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4908      	ldr	r1, [pc, #32]	@ (80014ac <__NVIC_SetPriority+0x50>)
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3b04      	subs	r3, #4
 8001494:	0112      	lsls	r2, r2, #4
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	440b      	add	r3, r1
 800149a:	761a      	strb	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	@ 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f1c3 0307 	rsb	r3, r3, #7
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	bf28      	it	cs
 80014ce:	2304      	movcs	r3, #4
 80014d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3304      	adds	r3, #4
 80014d6:	2b06      	cmp	r3, #6
 80014d8:	d902      	bls.n	80014e0 <NVIC_EncodePriority+0x30>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3b03      	subs	r3, #3
 80014de:	e000      	b.n	80014e2 <NVIC_EncodePriority+0x32>
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	f04f 32ff 	mov.w	r2, #4294967295
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43da      	mvns	r2, r3
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f8:	f04f 31ff 	mov.w	r1, #4294967295
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	43d9      	mvns	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	4313      	orrs	r3, r2
         );
}
 800150a:	4618      	mov	r0, r3
 800150c:	3724      	adds	r7, #36	@ 0x24
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001528:	d301      	bcc.n	800152e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800152a:	2301      	movs	r3, #1
 800152c:	e00f      	b.n	800154e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152e:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <SysTick_Config+0x40>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001536:	210f      	movs	r1, #15
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7ff ff8e 	bl	800145c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <SysTick_Config+0x40>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <SysTick_Config+0x40>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff ff47 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001584:	f7ff ff5c 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	68b9      	ldr	r1, [r7, #8]
 800158e:	6978      	ldr	r0, [r7, #20]
 8001590:	f7ff ff8e 	bl	80014b0 <NVIC_EncodePriority>
 8001594:	4602      	mov	r2, r0
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff5d 	bl	800145c <__NVIC_SetPriority>
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffb0 	bl	8001518 <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e177      	b.n	80018d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8166 	bne.w	80018ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d005      	beq.n	8001616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001612:	2b02      	cmp	r3, #2
 8001614:	d130      	bne.n	8001678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164c:	2201      	movs	r2, #1
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4013      	ands	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 0201 	and.w	r2, r3, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b03      	cmp	r3, #3
 8001682:	d017      	beq.n	80016b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d123      	bne.n	8001708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80c0 	beq.w	80018ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b66      	ldr	r3, [pc, #408]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	4a65      	ldr	r2, [pc, #404]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 8001754:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001758:	6453      	str	r3, [r2, #68]	@ 0x44
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <HAL_GPIO_Init+0x324>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001766:	4a61      	ldr	r2, [pc, #388]	@ (80018ec <HAL_GPIO_Init+0x328>)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	220f      	movs	r2, #15
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a58      	ldr	r2, [pc, #352]	@ (80018f0 <HAL_GPIO_Init+0x32c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d037      	beq.n	8001802 <HAL_GPIO_Init+0x23e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a57      	ldr	r2, [pc, #348]	@ (80018f4 <HAL_GPIO_Init+0x330>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d031      	beq.n	80017fe <HAL_GPIO_Init+0x23a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a56      	ldr	r2, [pc, #344]	@ (80018f8 <HAL_GPIO_Init+0x334>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d02b      	beq.n	80017fa <HAL_GPIO_Init+0x236>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a55      	ldr	r2, [pc, #340]	@ (80018fc <HAL_GPIO_Init+0x338>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d025      	beq.n	80017f6 <HAL_GPIO_Init+0x232>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a54      	ldr	r2, [pc, #336]	@ (8001900 <HAL_GPIO_Init+0x33c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01f      	beq.n	80017f2 <HAL_GPIO_Init+0x22e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a53      	ldr	r2, [pc, #332]	@ (8001904 <HAL_GPIO_Init+0x340>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d019      	beq.n	80017ee <HAL_GPIO_Init+0x22a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	@ (8001908 <HAL_GPIO_Init+0x344>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x226>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a51      	ldr	r2, [pc, #324]	@ (800190c <HAL_GPIO_Init+0x348>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x222>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a50      	ldr	r2, [pc, #320]	@ (8001910 <HAL_GPIO_Init+0x34c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x21e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4f      	ldr	r2, [pc, #316]	@ (8001914 <HAL_GPIO_Init+0x350>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x21a>
 80017da:	2309      	movs	r3, #9
 80017dc:	e012      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017de:	230a      	movs	r3, #10
 80017e0:	e010      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017e2:	2308      	movs	r3, #8
 80017e4:	e00e      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017e6:	2307      	movs	r3, #7
 80017e8:	e00c      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017ea:	2306      	movs	r3, #6
 80017ec:	e00a      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017ee:	2305      	movs	r3, #5
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x240>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x240>
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001814:	4935      	ldr	r1, [pc, #212]	@ (80018ec <HAL_GPIO_Init+0x328>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001822:	4b3d      	ldr	r3, [pc, #244]	@ (8001918 <HAL_GPIO_Init+0x354>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001846:	4a34      	ldr	r2, [pc, #208]	@ (8001918 <HAL_GPIO_Init+0x354>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800184c:	4b32      	ldr	r3, [pc, #200]	@ (8001918 <HAL_GPIO_Init+0x354>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001870:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <HAL_GPIO_Init+0x354>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001876:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <HAL_GPIO_Init+0x354>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800189a:	4a1f      	ldr	r2, [pc, #124]	@ (8001918 <HAL_GPIO_Init+0x354>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_GPIO_Init+0x354>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018c4:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <HAL_GPIO_Init+0x354>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	f67f ae84 	bls.w	80015e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3724      	adds	r7, #36	@ 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40013800 	.word	0x40013800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40021400 	.word	0x40021400
 8001908:	40021800 	.word	0x40021800
 800190c:	40021c00 	.word	0x40021c00
 8001910:	40022000 	.word	0x40022000
 8001914:	40022400 	.word	0x40022400
 8001918:	40013c00 	.word	0x40013c00

0800191c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
 8001928:	4613      	mov	r3, r2
 800192a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800192c:	787b      	ldrb	r3, [r7, #1]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001932:	887a      	ldrh	r2, [r7, #2]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001938:	e003      	b.n	8001942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	041a      	lsls	r2, r3, #16
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	619a      	str	r2, [r3, #24]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e267      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d075      	beq.n	8001a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800196e:	4b88      	ldr	r3, [pc, #544]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d00c      	beq.n	8001994 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197a:	4b85      	ldr	r3, [pc, #532]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001982:	2b08      	cmp	r3, #8
 8001984:	d112      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001986:	4b82      	ldr	r3, [pc, #520]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001992:	d10b      	bne.n	80019ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	4b7e      	ldr	r3, [pc, #504]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d05b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x108>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d157      	bne.n	8001a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e242      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019b4:	d106      	bne.n	80019c4 <HAL_RCC_OscConfig+0x74>
 80019b6:	4b76      	ldr	r3, [pc, #472]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a75      	ldr	r2, [pc, #468]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e01d      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b70      	ldr	r3, [pc, #448]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b6d      	ldr	r3, [pc, #436]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a6c      	ldr	r2, [pc, #432]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_OscConfig+0xb0>
 80019e8:	4b69      	ldr	r3, [pc, #420]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a68      	ldr	r2, [pc, #416]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	4b66      	ldr	r3, [pc, #408]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a65      	ldr	r2, [pc, #404]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d013      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff fcc6 	bl	8001398 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a10:	f7ff fcc2 	bl	8001398 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	@ 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e207      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a22:	4b5b      	ldr	r3, [pc, #364]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0xc0>
 8001a2e:	e014      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fcb2 	bl	8001398 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a38:	f7ff fcae 	bl	8001398 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b64      	cmp	r3, #100	@ 0x64
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1f3      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	4b51      	ldr	r3, [pc, #324]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0xe8>
 8001a56:	e000      	b.n	8001a5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a66:	4b4a      	ldr	r3, [pc, #296]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00b      	beq.n	8001a8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a72:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d11c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7e:	4b44      	ldr	r3, [pc, #272]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d116      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d001      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e1c7      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	4937      	ldr	r1, [pc, #220]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	e03a      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d020      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac0:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <HAL_RCC_OscConfig+0x244>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fc67 	bl	8001398 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ace:	f7ff fc63 	bl	8001398 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1a8      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4925      	ldr	r1, [pc, #148]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001afc:	4313      	orrs	r3, r2
 8001afe:	600b      	str	r3, [r1, #0]
 8001b00:	e015      	b.n	8001b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_RCC_OscConfig+0x244>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff fc46 	bl	8001398 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b10:	f7ff fc42 	bl	8001398 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e187      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d036      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d016      	beq.n	8001b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b42:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <HAL_RCC_OscConfig+0x248>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff fc26 	bl	8001398 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc22 	bl	8001398 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e167      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <HAL_RCC_OscConfig+0x240>)
 8001b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0x200>
 8001b6e:	e01b      	b.n	8001ba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_RCC_OscConfig+0x248>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fc0f 	bl	8001398 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	e00e      	b.n	8001b9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff fc0b 	bl	8001398 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d907      	bls.n	8001b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e150      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
 8001b90:	40023800 	.word	0x40023800
 8001b94:	42470000 	.word	0x42470000
 8001b98:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	4b88      	ldr	r3, [pc, #544]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1ea      	bne.n	8001b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8097 	beq.w	8001ce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bba:	4b81      	ldr	r3, [pc, #516]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	4b7d      	ldr	r3, [pc, #500]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a7c      	ldr	r2, [pc, #496]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	60bb      	str	r3, [r7, #8]
 8001be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be2:	2301      	movs	r3, #1
 8001be4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be6:	4b77      	ldr	r3, [pc, #476]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d118      	bne.n	8001c24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf2:	4b74      	ldr	r3, [pc, #464]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a73      	ldr	r2, [pc, #460]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fbcb 	bl	8001398 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c06:	f7ff fbc7 	bl	8001398 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e10c      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c18:	4b6a      	ldr	r3, [pc, #424]	@ (8001dc4 <HAL_RCC_OscConfig+0x474>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCC_OscConfig+0x2ea>
 8001c2c:	4b64      	ldr	r3, [pc, #400]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c30:	4a63      	ldr	r2, [pc, #396]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c38:	e01c      	b.n	8001c74 <HAL_RCC_OscConfig+0x324>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	d10c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x30c>
 8001c42:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	4a5e      	ldr	r2, [pc, #376]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0x324>
 8001c5c:	4b58      	ldr	r3, [pc, #352]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	4a57      	ldr	r2, [pc, #348]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c68:	4b55      	ldr	r3, [pc, #340]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6c:	4a54      	ldr	r2, [pc, #336]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	f023 0304 	bic.w	r3, r3, #4
 8001c72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d015      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7c:	f7ff fb8c 	bl	8001398 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c82:	e00a      	b.n	8001c9a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c84:	f7ff fb88 	bl	8001398 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0cb      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	4b49      	ldr	r3, [pc, #292]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ee      	beq.n	8001c84 <HAL_RCC_OscConfig+0x334>
 8001ca6:	e014      	b.n	8001cd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fb76 	bl	8001398 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fb72 	bl	8001398 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e0b5      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1ee      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d105      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd8:	4b39      	ldr	r3, [pc, #228]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	4a38      	ldr	r2, [pc, #224]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a1 	beq.w	8001e30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cee:	4b34      	ldr	r3, [pc, #208]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d05c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d141      	bne.n	8001d86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fb46 	bl	8001398 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff fb42 	bl	8001398 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e087      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d44:	085b      	lsrs	r3, r3, #1
 8001d46:	3b01      	subs	r3, #1
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	491b      	ldr	r1, [pc, #108]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d58:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fb1b 	bl	8001398 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d66:	f7ff fb17 	bl	8001398 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e05c      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d78:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCC_OscConfig+0x416>
 8001d84:	e054      	b.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <HAL_RCC_OscConfig+0x478>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fb04 	bl	8001398 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff fb00 	bl	8001398 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e045      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_OscConfig+0x470>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x444>
 8001db2:	e03d      	b.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e038      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40007000 	.word	0x40007000
 8001dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x4ec>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d028      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d121      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d11a      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d111      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	3b01      	subs	r3, #1
 8001e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0cc      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e54:	4b68      	ldr	r3, [pc, #416]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d90c      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b63      	ldr	r3, [pc, #396]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e0b8      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d020      	beq.n	8001eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e94:	4b59      	ldr	r3, [pc, #356]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	4a58      	ldr	r2, [pc, #352]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eac:	4b53      	ldr	r3, [pc, #332]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a52      	ldr	r2, [pc, #328]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb8:	4b50      	ldr	r3, [pc, #320]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	494d      	ldr	r1, [pc, #308]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d044      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d119      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e07f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e067      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f1e:	4b37      	ldr	r3, [pc, #220]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 0203 	bic.w	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4934      	ldr	r1, [pc, #208]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f30:	f7ff fa32 	bl	8001398 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f38:	f7ff fa2e 	bl	8001398 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e04f      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 020c 	and.w	r2, r3, #12
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d1eb      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d20c      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e032      	b.n	8001fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d008      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	4916      	ldr	r1, [pc, #88]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb2:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	490e      	ldr	r1, [pc, #56]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fc6:	f000 f821 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	490a      	ldr	r1, [pc, #40]	@ (8002000 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	5ccb      	ldrb	r3, [r1, r3]
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f992 	bl	8001310 <HAL_InitTick>

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00
 8001ffc:	40023800 	.word	0x40023800
 8002000:	08005ff4 	.word	0x08005ff4
 8002004:	20000000 	.word	0x20000000
 8002008:	2000001c 	.word	0x2000001c

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002010:	b094      	sub	sp, #80	@ 0x50
 8002012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002024:	4b79      	ldr	r3, [pc, #484]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	d00d      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x40>
 8002030:	2b08      	cmp	r3, #8
 8002032:	f200 80e1 	bhi.w	80021f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_RCC_GetSysClockFreq+0x34>
 800203a:	2b04      	cmp	r3, #4
 800203c:	d003      	beq.n	8002046 <HAL_RCC_GetSysClockFreq+0x3a>
 800203e:	e0db      	b.n	80021f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002040:	4b73      	ldr	r3, [pc, #460]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x204>)
 8002042:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002044:	e0db      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002046:	4b73      	ldr	r3, [pc, #460]	@ (8002214 <HAL_RCC_GetSysClockFreq+0x208>)
 8002048:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800204a:	e0d8      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4b6f      	ldr	r3, [pc, #444]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002054:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002056:	4b6d      	ldr	r3, [pc, #436]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b6a      	ldr	r3, [pc, #424]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	2200      	movs	r2, #0
 800206a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800206c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800206e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002074:	633b      	str	r3, [r7, #48]	@ 0x30
 8002076:	2300      	movs	r3, #0
 8002078:	637b      	str	r3, [r7, #52]	@ 0x34
 800207a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800207e:	4622      	mov	r2, r4
 8002080:	462b      	mov	r3, r5
 8002082:	f04f 0000 	mov.w	r0, #0
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	0159      	lsls	r1, r3, #5
 800208c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002090:	0150      	lsls	r0, r2, #5
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4621      	mov	r1, r4
 8002098:	1a51      	subs	r1, r2, r1
 800209a:	6139      	str	r1, [r7, #16]
 800209c:	4629      	mov	r1, r5
 800209e:	eb63 0301 	sbc.w	r3, r3, r1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020b0:	4659      	mov	r1, fp
 80020b2:	018b      	lsls	r3, r1, #6
 80020b4:	4651      	mov	r1, sl
 80020b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ba:	4651      	mov	r1, sl
 80020bc:	018a      	lsls	r2, r1, #6
 80020be:	4651      	mov	r1, sl
 80020c0:	ebb2 0801 	subs.w	r8, r2, r1
 80020c4:	4659      	mov	r1, fp
 80020c6:	eb63 0901 	sbc.w	r9, r3, r1
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020de:	4690      	mov	r8, r2
 80020e0:	4699      	mov	r9, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	eb18 0303 	adds.w	r3, r8, r3
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	462b      	mov	r3, r5
 80020ec:	eb49 0303 	adc.w	r3, r9, r3
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020fe:	4629      	mov	r1, r5
 8002100:	024b      	lsls	r3, r1, #9
 8002102:	4621      	mov	r1, r4
 8002104:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002108:	4621      	mov	r1, r4
 800210a:	024a      	lsls	r2, r1, #9
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	2200      	movs	r2, #0
 8002114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800211c:	f7fe f8c0 	bl	80002a0 <__aeabi_uldivmod>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4613      	mov	r3, r2
 8002126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002128:	e058      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800212a:	4b38      	ldr	r3, [pc, #224]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	099b      	lsrs	r3, r3, #6
 8002130:	2200      	movs	r2, #0
 8002132:	4618      	mov	r0, r3
 8002134:	4611      	mov	r1, r2
 8002136:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	2300      	movs	r3, #0
 800213e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002140:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002144:	4642      	mov	r2, r8
 8002146:	464b      	mov	r3, r9
 8002148:	f04f 0000 	mov.w	r0, #0
 800214c:	f04f 0100 	mov.w	r1, #0
 8002150:	0159      	lsls	r1, r3, #5
 8002152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002156:	0150      	lsls	r0, r2, #5
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4641      	mov	r1, r8
 800215e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002162:	4649      	mov	r1, r9
 8002164:	eb63 0b01 	sbc.w	fp, r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002174:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002178:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800217c:	ebb2 040a 	subs.w	r4, r2, sl
 8002180:	eb63 050b 	sbc.w	r5, r3, fp
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	00eb      	lsls	r3, r5, #3
 800218e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002192:	00e2      	lsls	r2, r4, #3
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
 8002198:	4643      	mov	r3, r8
 800219a:	18e3      	adds	r3, r4, r3
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	464b      	mov	r3, r9
 80021a0:	eb45 0303 	adc.w	r3, r5, r3
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021b2:	4629      	mov	r1, r5
 80021b4:	028b      	lsls	r3, r1, #10
 80021b6:	4621      	mov	r1, r4
 80021b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021bc:	4621      	mov	r1, r4
 80021be:	028a      	lsls	r2, r1, #10
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c6:	2200      	movs	r2, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	61fa      	str	r2, [r7, #28]
 80021cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d0:	f7fe f866 	bl	80002a0 <__aeabi_uldivmod>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4613      	mov	r3, r2
 80021da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_GetSysClockFreq+0x200>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80021ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021f6:	e002      	b.n	80021fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_RCC_GetSysClockFreq+0x204>)
 80021fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002200:	4618      	mov	r0, r3
 8002202:	3750      	adds	r7, #80	@ 0x50
 8002204:	46bd      	mov	sp, r7
 8002206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	@ (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000000 	.word	0x20000000

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	@ (8002250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4903      	ldr	r1, [pc, #12]	@ (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	08006004 	.word	0x08006004

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800225c:	f7ff ffdc 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0b5b      	lsrs	r3, r3, #13
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4903      	ldr	r1, [pc, #12]	@ (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08006004 	.word	0x08006004

08002280 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e07b      	b.n	800238a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80022a2:	d009      	beq.n	80022b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	61da      	str	r2, [r3, #28]
 80022aa:	e005      	b.n	80022b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fdcc 	bl	8000e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2202      	movs	r2, #2
 80022dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233c:	ea42 0103 	orr.w	r1, r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0104 	and.w	r1, r3, #4
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	f003 0210 	and.w	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002378:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08a      	sub	sp, #40	@ 0x28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023a0:	2301      	movs	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a4:	f7fe fff8 	bl	8001398 <HAL_GetTick>
 80023a8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023b0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023bc:	7ffb      	ldrb	r3, [r7, #31]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d00c      	beq.n	80023dc <HAL_SPI_TransmitReceive+0x4a>
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023c8:	d106      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d102      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x46>
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d001      	beq.n	80023dc <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80023d8:	2302      	movs	r3, #2
 80023da:	e17f      	b.n	80026dc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x5c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HAL_SPI_TransmitReceive+0x5c>
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e174      	b.n	80026dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_SPI_TransmitReceive+0x6e>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e16d      	b.n	80026dc <HAL_SPI_TransmitReceive+0x34a>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b04      	cmp	r3, #4
 8002412:	d003      	beq.n	800241c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2205      	movs	r2, #5
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	887a      	ldrh	r2, [r7, #2]
 800243e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d007      	beq.n	8002470 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800246e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002478:	d17e      	bne.n	8002578 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_SPI_TransmitReceive+0xf6>
 8002482:	8afb      	ldrh	r3, [r7, #22]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d16c      	bne.n	8002562 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	1c9a      	adds	r2, r3, #2
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ac:	e059      	b.n	8002562 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d11b      	bne.n	80024f4 <HAL_SPI_TransmitReceive+0x162>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_SPI_TransmitReceive+0x162>
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d113      	bne.n	80024f4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	881a      	ldrh	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	1c9a      	adds	r2, r3, #2
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d119      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x1a4>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d014      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002516:	b292      	uxth	r2, r2
 8002518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800251e:	1c9a      	adds	r2, r3, #2
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002532:	2301      	movs	r3, #1
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002536:	f7fe ff2f 	bl	8001398 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002542:	429a      	cmp	r2, r3
 8002544:	d80d      	bhi.n	8002562 <HAL_SPI_TransmitReceive+0x1d0>
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d009      	beq.n	8002562 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0bc      	b.n	80026dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1a0      	bne.n	80024ae <HAL_SPI_TransmitReceive+0x11c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d19b      	bne.n	80024ae <HAL_SPI_TransmitReceive+0x11c>
 8002576:	e082      	b.n	800267e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_SPI_TransmitReceive+0x1f4>
 8002580:	8afb      	ldrh	r3, [r7, #22]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d171      	bne.n	800266a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ac:	e05d      	b.n	800266a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d11c      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x264>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d017      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x264>
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d114      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	7812      	ldrb	r2, [r2, #0]
 80025d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	1c5a      	adds	r2, r3, #1
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d119      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x2a6>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d014      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002634:	2301      	movs	r3, #1
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002638:	f7fe feae 	bl	8001398 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002644:	429a      	cmp	r2, r3
 8002646:	d803      	bhi.n	8002650 <HAL_SPI_TransmitReceive+0x2be>
 8002648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d102      	bne.n	8002656 <HAL_SPI_TransmitReceive+0x2c4>
 8002650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e038      	b.n	80026dc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d19c      	bne.n	80025ae <HAL_SPI_TransmitReceive+0x21c>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d197      	bne.n	80025ae <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f8b6 	bl	80027f4 <SPI_EndRxTxTransaction>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d008      	beq.n	80026a0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01d      	b.n	80026dc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10a      	bne.n	80026be <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80026da:	2300      	movs	r3, #0
  }
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3728      	adds	r7, #40	@ 0x28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	4613      	mov	r3, r2
 80026f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026f4:	f7fe fe50 	bl	8001398 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002704:	f7fe fe48 	bl	8001398 <HAL_GetTick>
 8002708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800270a:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	015b      	lsls	r3, r3, #5
 8002710:	0d1b      	lsrs	r3, r3, #20
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800271a:	e055      	b.n	80027c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002722:	d051      	beq.n	80027c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002724:	f7fe fe38 	bl	8001398 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	d902      	bls.n	800273a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d13d      	bne.n	80027b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002752:	d111      	bne.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800275c:	d004      	beq.n	8002768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002766:	d107      	bne.n	8002778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002780:	d10f      	bne.n	80027a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e018      	b.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
 80027c0:	e002      	b.n	80027c8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	4013      	ands	r3, r2
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d19a      	bne.n	800271c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3720      	adds	r7, #32
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000000 	.word	0x20000000

080027f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2201      	movs	r2, #1
 8002808:	2102      	movs	r1, #2
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff ff6a 	bl	80026e4 <SPI_WaitFlagStateUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e032      	b.n	800288c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002826:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <SPI_EndRxTxTransaction+0xa0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1b      	ldr	r2, [pc, #108]	@ (8002898 <SPI_EndRxTxTransaction+0xa4>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	0d5b      	lsrs	r3, r3, #21
 8002832:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002844:	d112      	bne.n	800286c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2200      	movs	r2, #0
 800284e:	2180      	movs	r1, #128	@ 0x80
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff47 	bl	80026e4 <SPI_WaitFlagStateUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d016      	beq.n	800288a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	f043 0220 	orr.w	r2, r3, #32
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e00f      	b.n	800288c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	3b01      	subs	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002882:	2b80      	cmp	r3, #128	@ 0x80
 8002884:	d0f2      	beq.n	800286c <SPI_EndRxTxTransaction+0x78>
 8002886:	e000      	b.n	800288a <SPI_EndRxTxTransaction+0x96>
        break;
 8002888:	bf00      	nop
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000000 	.word	0x20000000
 8002898:	165e9f81 	.word	0x165e9f81

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e042      	b.n	8002934 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fb1c 	bl	8000f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	@ 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f973 	bl	8002bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	d175      	bne.n	8002a48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_UART_Transmit+0x2c>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e06e      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2221      	movs	r2, #33	@ 0x21
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800297a:	f7fe fd0d 	bl	8001398 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002994:	d108      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e003      	b.n	80029b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029b0:	e02e      	b.n	8002a10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	@ 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f848 	bl	8002a52 <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03a      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	3302      	adds	r3, #2
 80029ee:	61bb      	str	r3, [r7, #24]
 80029f0:	e007      	b.n	8002a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	3301      	adds	r3, #1
 8002a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1cb      	bne.n	80029b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2140      	movs	r1, #64	@ 0x40
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f814 	bl	8002a52 <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e006      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a62:	e03b      	b.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6a:	d037      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6c:	f7fe fc94 	bl	8001398 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	6a3a      	ldr	r2, [r7, #32]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d302      	bcc.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e03a      	b.n	8002afc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d023      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b80      	cmp	r3, #128	@ 0x80
 8002a98:	d020      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b40      	cmp	r3, #64	@ 0x40
 8002a9e:	d01d      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d116      	bne.n	8002adc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 f81d 	bl	8002b04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2208      	movs	r2, #8
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e00f      	b.n	8002afc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d0b4      	beq.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b095      	sub	sp, #84	@ 0x54
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b16:	e853 3f00 	ldrex	r3, [r3]
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b34:	e841 2300 	strex	r3, r2, [r1]
 8002b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1e5      	bne.n	8002b0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3314      	adds	r3, #20
 8002b46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	e853 3f00 	ldrex	r3, [r3]
 8002b4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b68:	e841 2300 	strex	r3, r2, [r1]
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e5      	bne.n	8002b40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d119      	bne.n	8002bb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	330c      	adds	r3, #12
 8002b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	e853 3f00 	ldrex	r3, [r3]
 8002b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f023 0310 	bic.w	r3, r3, #16
 8002b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	330c      	adds	r3, #12
 8002b9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b9c:	61ba      	str	r2, [r7, #24]
 8002b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba0:	6979      	ldr	r1, [r7, #20]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	e841 2300 	strex	r3, r2, [r1]
 8002ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1e5      	bne.n	8002b7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bbe:	bf00      	nop
 8002bc0:	3754      	adds	r7, #84	@ 0x54
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b0c0      	sub	sp, #256	@ 0x100
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	68d9      	ldr	r1, [r3, #12]
 8002bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	ea40 0301 	orr.w	r3, r0, r1
 8002bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	431a      	orrs	r2, r3
 8002c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002c24:	f021 010c 	bic.w	r1, r1, #12
 8002c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002c32:	430b      	orrs	r3, r1
 8002c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c46:	6999      	ldr	r1, [r3, #24]
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	ea40 0301 	orr.w	r3, r0, r1
 8002c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	@ (8002e98 <UART_SetConfig+0x2cc>)
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d005      	beq.n	8002c6c <UART_SetConfig+0xa0>
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b8d      	ldr	r3, [pc, #564]	@ (8002e9c <UART_SetConfig+0x2d0>)
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d104      	bne.n	8002c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c6c:	f7ff faf4 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8002c70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c74:	e003      	b.n	8002c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c76:	f7ff fadb 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8002c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c88:	f040 810c 	bne.w	8002ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c90:	2200      	movs	r2, #0
 8002c92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c9e:	4622      	mov	r2, r4
 8002ca0:	462b      	mov	r3, r5
 8002ca2:	1891      	adds	r1, r2, r2
 8002ca4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ca6:	415b      	adcs	r3, r3
 8002ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002cae:	4621      	mov	r1, r4
 8002cb0:	eb12 0801 	adds.w	r8, r2, r1
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	eb43 0901 	adc.w	r9, r3, r1
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cce:	4690      	mov	r8, r2
 8002cd0:	4699      	mov	r9, r3
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	eb18 0303 	adds.w	r3, r8, r3
 8002cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002cdc:	462b      	mov	r3, r5
 8002cde:	eb49 0303 	adc.w	r3, r9, r3
 8002ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	18db      	adds	r3, r3, r3
 8002cfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d00:	4613      	mov	r3, r2
 8002d02:	eb42 0303 	adc.w	r3, r2, r3
 8002d06:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002d10:	f7fd fac6 	bl	80002a0 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4b61      	ldr	r3, [pc, #388]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	011c      	lsls	r4, r3, #4
 8002d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	1891      	adds	r1, r2, r2
 8002d3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d3c:	415b      	adcs	r3, r3
 8002d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d44:	4641      	mov	r1, r8
 8002d46:	eb12 0a01 	adds.w	sl, r2, r1
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	f04f 0300 	mov.w	r3, #0
 8002d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d64:	4692      	mov	sl, r2
 8002d66:	469b      	mov	fp, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8002d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d72:	464b      	mov	r3, r9
 8002d74:	eb4b 0303 	adc.w	r3, fp, r3
 8002d78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d90:	460b      	mov	r3, r1
 8002d92:	18db      	adds	r3, r3, r3
 8002d94:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d96:	4613      	mov	r3, r2
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002da6:	f7fd fa7b 	bl	80002a0 <__aeabi_uldivmod>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002db2:	fba3 2301 	umull	r2, r3, r3, r1
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	2264      	movs	r2, #100	@ 0x64
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	1acb      	subs	r3, r1, r3
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002dc6:	4b36      	ldr	r3, [pc, #216]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002dd4:	441c      	add	r4, r3
 8002dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002de0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	1891      	adds	r1, r2, r2
 8002dee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002df0:	415b      	adcs	r3, r3
 8002df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002df8:	4641      	mov	r1, r8
 8002dfa:	1851      	adds	r1, r2, r1
 8002dfc:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dfe:	4649      	mov	r1, r9
 8002e00:	414b      	adcs	r3, r1
 8002e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002e10:	4659      	mov	r1, fp
 8002e12:	00cb      	lsls	r3, r1, #3
 8002e14:	4651      	mov	r1, sl
 8002e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	00ca      	lsls	r2, r1, #3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	4642      	mov	r2, r8
 8002e26:	189b      	adds	r3, r3, r2
 8002e28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e2c:	464b      	mov	r3, r9
 8002e2e:	460a      	mov	r2, r1
 8002e30:	eb42 0303 	adc.w	r3, r2, r3
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	18db      	adds	r3, r3, r3
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	4613      	mov	r3, r2
 8002e54:	eb42 0303 	adc.w	r3, r2, r3
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e62:	f7fd fa1d 	bl	80002a0 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	2164      	movs	r1, #100	@ 0x64
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	3332      	adds	r3, #50	@ 0x32
 8002e7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ea0 <UART_SetConfig+0x2d4>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	f003 0207 	and.w	r2, r3, #7
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4422      	add	r2, r4
 8002e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e94:	e106      	b.n	80030a4 <UART_SetConfig+0x4d8>
 8002e96:	bf00      	nop
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40011400 	.word	0x40011400
 8002ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002eae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002eb6:	4642      	mov	r2, r8
 8002eb8:	464b      	mov	r3, r9
 8002eba:	1891      	adds	r1, r2, r2
 8002ebc:	6239      	str	r1, [r7, #32]
 8002ebe:	415b      	adcs	r3, r3
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ec6:	4641      	mov	r1, r8
 8002ec8:	1854      	adds	r4, r2, r1
 8002eca:	4649      	mov	r1, r9
 8002ecc:	eb43 0501 	adc.w	r5, r3, r1
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	00eb      	lsls	r3, r5, #3
 8002eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ede:	00e2      	lsls	r2, r4, #3
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	461d      	mov	r5, r3
 8002ee4:	4643      	mov	r3, r8
 8002ee6:	18e3      	adds	r3, r4, r3
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eec:	464b      	mov	r3, r9
 8002eee:	eb45 0303 	adc.w	r3, r5, r3
 8002ef2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f12:	4629      	mov	r1, r5
 8002f14:	008b      	lsls	r3, r1, #2
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	008a      	lsls	r2, r1, #2
 8002f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f24:	f7fd f9bc 	bl	80002a0 <__aeabi_uldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4b60      	ldr	r3, [pc, #384]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8002f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	011c      	lsls	r4, r3, #4
 8002f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	1891      	adds	r1, r2, r2
 8002f4e:	61b9      	str	r1, [r7, #24]
 8002f50:	415b      	adcs	r3, r3
 8002f52:	61fb      	str	r3, [r7, #28]
 8002f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f58:	4641      	mov	r1, r8
 8002f5a:	1851      	adds	r1, r2, r1
 8002f5c:	6139      	str	r1, [r7, #16]
 8002f5e:	4649      	mov	r1, r9
 8002f60:	414b      	adcs	r3, r1
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f70:	4659      	mov	r1, fp
 8002f72:	00cb      	lsls	r3, r1, #3
 8002f74:	4651      	mov	r1, sl
 8002f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	00ca      	lsls	r2, r1, #3
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	4642      	mov	r2, r8
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	460a      	mov	r2, r1
 8002f90:	eb42 0303 	adc.w	r3, r2, r3
 8002f94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002fa2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	008b      	lsls	r3, r1, #2
 8002fb4:	4641      	mov	r1, r8
 8002fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fba:	4641      	mov	r1, r8
 8002fbc:	008a      	lsls	r2, r1, #2
 8002fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002fc2:	f7fd f96d 	bl	80002a0 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4b38      	ldr	r3, [pc, #224]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8002fce:	fba3 2301 	umull	r2, r3, r3, r1
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2264      	movs	r2, #100	@ 0x64
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	1acb      	subs	r3, r1, r3
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	3332      	adds	r3, #50	@ 0x32
 8002fe0:	4a33      	ldr	r2, [pc, #204]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fec:	441c      	add	r4, r3
 8002fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ff6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ff8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	1891      	adds	r1, r2, r2
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	415b      	adcs	r3, r3
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800300c:	4641      	mov	r1, r8
 800300e:	1851      	adds	r1, r2, r1
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	4649      	mov	r1, r9
 8003014:	414b      	adcs	r3, r1
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003024:	4659      	mov	r1, fp
 8003026:	00cb      	lsls	r3, r1, #3
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302e:	4651      	mov	r1, sl
 8003030:	00ca      	lsls	r2, r1, #3
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	4603      	mov	r3, r0
 8003038:	4642      	mov	r2, r8
 800303a:	189b      	adds	r3, r3, r2
 800303c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800303e:	464b      	mov	r3, r9
 8003040:	460a      	mov	r2, r1
 8003042:	eb42 0303 	adc.w	r3, r2, r3
 8003046:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	663b      	str	r3, [r7, #96]	@ 0x60
 8003052:	667a      	str	r2, [r7, #100]	@ 0x64
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003060:	4649      	mov	r1, r9
 8003062:	008b      	lsls	r3, r1, #2
 8003064:	4641      	mov	r1, r8
 8003066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800306a:	4641      	mov	r1, r8
 800306c:	008a      	lsls	r2, r1, #2
 800306e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003072:	f7fd f915 	bl	80002a0 <__aeabi_uldivmod>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <UART_SetConfig+0x4e4>)
 800307c:	fba3 1302 	umull	r1, r3, r3, r2
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	2164      	movs	r1, #100	@ 0x64
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	3332      	adds	r3, #50	@ 0x32
 800308e:	4a08      	ldr	r2, [pc, #32]	@ (80030b0 <UART_SetConfig+0x4e4>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	f003 020f 	and.w	r2, r3, #15
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4422      	add	r2, r4
 80030a2:	609a      	str	r2, [r3, #8]
}
 80030a4:	bf00      	nop
 80030a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80030aa:	46bd      	mov	sp, r7
 80030ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b0:	51eb851f 	.word	0x51eb851f

080030b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4a08      	ldr	r2, [pc, #32]	@ (80030e4 <disk_status+0x30>)
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	79fa      	ldrb	r2, [r7, #7]
 80030cc:	4905      	ldr	r1, [pc, #20]	@ (80030e4 <disk_status+0x30>)
 80030ce:	440a      	add	r2, r1
 80030d0:	7a12      	ldrb	r2, [r2, #8]
 80030d2:	4610      	mov	r0, r2
 80030d4:	4798      	blx	r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20001734 	.word	0x20001734

080030e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003134 <disk_initialize+0x4c>)
 80030fa:	5cd3      	ldrb	r3, [r2, r3]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d114      	bne.n	800312a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	4a0c      	ldr	r2, [pc, #48]	@ (8003134 <disk_initialize+0x4c>)
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	79fa      	ldrb	r2, [r7, #7]
 800310e:	4909      	ldr	r1, [pc, #36]	@ (8003134 <disk_initialize+0x4c>)
 8003110:	440a      	add	r2, r1
 8003112:	7a12      	ldrb	r2, [r2, #8]
 8003114:	4610      	mov	r0, r2
 8003116:	4798      	blx	r3
 8003118:	4603      	mov	r3, r0
 800311a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	4a03      	ldr	r2, [pc, #12]	@ (8003134 <disk_initialize+0x4c>)
 8003126:	2101      	movs	r1, #1
 8003128:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20001734 	.word	0x20001734

08003138 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	4a0a      	ldr	r2, [pc, #40]	@ (8003174 <disk_read+0x3c>)
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	689c      	ldr	r4, [r3, #8]
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	4a07      	ldr	r2, [pc, #28]	@ (8003174 <disk_read+0x3c>)
 8003158:	4413      	add	r3, r2
 800315a:	7a18      	ldrb	r0, [r3, #8]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	47a0      	blx	r4
 8003164:	4603      	mov	r3, r0
 8003166:	75fb      	strb	r3, [r7, #23]
  return res;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
}
 800316a:	4618      	mov	r0, r3
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
 8003172:	bf00      	nop
 8003174:	20001734 	.word	0x20001734

08003178 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003178:	b590      	push	{r4, r7, lr}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	4a0a      	ldr	r2, [pc, #40]	@ (80031b4 <disk_write+0x3c>)
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	68dc      	ldr	r4, [r3, #12]
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	4a07      	ldr	r2, [pc, #28]	@ (80031b4 <disk_write+0x3c>)
 8003198:	4413      	add	r3, r2
 800319a:	7a18      	ldrb	r0, [r3, #8]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	47a0      	blx	r4
 80031a4:	4603      	mov	r3, r0
 80031a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20001734 	.word	0x20001734

080031b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	603a      	str	r2, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
 80031c4:	460b      	mov	r3, r1
 80031c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	4a09      	ldr	r2, [pc, #36]	@ (80031f0 <disk_ioctl+0x38>)
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	79fa      	ldrb	r2, [r7, #7]
 80031d6:	4906      	ldr	r1, [pc, #24]	@ (80031f0 <disk_ioctl+0x38>)
 80031d8:	440a      	add	r2, r1
 80031da:	7a10      	ldrb	r0, [r2, #8]
 80031dc:	79b9      	ldrb	r1, [r7, #6]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	4798      	blx	r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20001734 	.word	0x20001734

080031f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003204:	89fb      	ldrh	r3, [r7, #14]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	b21a      	sxth	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b21b      	sxth	r3, r3
 8003210:	4313      	orrs	r3, r2
 8003212:	b21b      	sxth	r3, r3
 8003214:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003216:	89fb      	ldrh	r3, [r7, #14]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3303      	adds	r3, #3
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	3202      	adds	r2, #2
 800323c:	7812      	ldrb	r2, [r2, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	021b      	lsls	r3, r3, #8
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	3201      	adds	r2, #1
 800324a:	7812      	ldrb	r2, [r2, #0]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	7812      	ldrb	r2, [r2, #0]
 8003258:	4313      	orrs	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
	return rv;
 800325c:	68fb      	ldr	r3, [r7, #12]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	887a      	ldrh	r2, [r7, #2]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	887b      	ldrh	r3, [r7, #2]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	0a1b      	lsrs	r3, r3, #8
 80032ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	1c5a      	adds	r2, r3, #1
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	617a      	str	r2, [r7, #20]
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f3      	bne.n	8003308 <mem_set+0x10>
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800332e:	b480      	push	{r7}
 8003330:	b089      	sub	sp, #36	@ 0x24
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	61fa      	str	r2, [r7, #28]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4619      	mov	r1, r3
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	61ba      	str	r2, [r7, #24]
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	1acb      	subs	r3, r1, r3
 800335a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <mem_cmp+0x40>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0eb      	beq.n	8003346 <mem_cmp+0x18>

	return r;
 800336e:	697b      	ldr	r3, [r7, #20]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3724      	adds	r7, #36	@ 0x24
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003386:	e002      	b.n	800338e <chk_chr+0x12>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3301      	adds	r3, #1
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d005      	beq.n	80033a2 <chk_chr+0x26>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4293      	cmp	r3, r2
 80033a0:	d1f2      	bne.n	8003388 <chk_chr+0xc>
	return *str;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	781b      	ldrb	r3, [r3, #0]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e01f      	b.n	8003404 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80033c4:	4a41      	ldr	r2, [pc, #260]	@ (80034cc <inc_lock+0x118>)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	4413      	add	r3, r2
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d113      	bne.n	80033fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80033d6:	4a3d      	ldr	r2, [pc, #244]	@ (80034cc <inc_lock+0x118>)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	4413      	add	r3, r2
 80033de:	3304      	adds	r3, #4
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d109      	bne.n	80033fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80033ea:	4a38      	ldr	r2, [pc, #224]	@ (80034cc <inc_lock+0x118>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4413      	add	r3, r2
 80033f2:	3308      	adds	r3, #8
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d006      	beq.n	800340c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3301      	adds	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d9dc      	bls.n	80033c4 <inc_lock+0x10>
 800340a:	e000      	b.n	800340e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800340c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d132      	bne.n	800347a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	e002      	b.n	8003420 <inc_lock+0x6c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3301      	adds	r3, #1
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d806      	bhi.n	8003434 <inc_lock+0x80>
 8003426:	4a29      	ldr	r2, [pc, #164]	@ (80034cc <inc_lock+0x118>)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f2      	bne.n	800341a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d101      	bne.n	800343e <inc_lock+0x8a>
 800343a:	2300      	movs	r3, #0
 800343c:	e040      	b.n	80034c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4922      	ldr	r1, [pc, #136]	@ (80034cc <inc_lock+0x118>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	440b      	add	r3, r1
 800344a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	491e      	ldr	r1, [pc, #120]	@ (80034cc <inc_lock+0x118>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	440b      	add	r3, r1
 8003458:	3304      	adds	r3, #4
 800345a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	491a      	ldr	r1, [pc, #104]	@ (80034cc <inc_lock+0x118>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	440b      	add	r3, r1
 8003468:	3308      	adds	r3, #8
 800346a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800346c:	4a17      	ldr	r2, [pc, #92]	@ (80034cc <inc_lock+0x118>)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	4413      	add	r3, r2
 8003474:	330c      	adds	r3, #12
 8003476:	2200      	movs	r2, #0
 8003478:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <inc_lock+0xe0>
 8003480:	4a12      	ldr	r2, [pc, #72]	@ (80034cc <inc_lock+0x118>)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	4413      	add	r3, r2
 8003488:	330c      	adds	r3, #12
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <inc_lock+0xe0>
 8003490:	2300      	movs	r3, #0
 8003492:	e015      	b.n	80034c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d108      	bne.n	80034ac <inc_lock+0xf8>
 800349a:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <inc_lock+0x118>)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	4413      	add	r3, r2
 80034a2:	330c      	adds	r3, #12
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	e001      	b.n	80034b0 <inc_lock+0xfc>
 80034ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034b0:	4906      	ldr	r1, [pc, #24]	@ (80034cc <inc_lock+0x118>)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	440b      	add	r3, r1
 80034b8:	330c      	adds	r3, #12
 80034ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	20001514 	.word	0x20001514

080034d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	607b      	str	r3, [r7, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d825      	bhi.n	8003530 <dec_lock+0x60>
		n = Files[i].ctr;
 80034e4:	4a17      	ldr	r2, [pc, #92]	@ (8003544 <dec_lock+0x74>)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	4413      	add	r3, r2
 80034ec:	330c      	adds	r3, #12
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80034f2:	89fb      	ldrh	r3, [r7, #14]
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f8:	d101      	bne.n	80034fe <dec_lock+0x2e>
 80034fa:	2300      	movs	r3, #0
 80034fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80034fe:	89fb      	ldrh	r3, [r7, #14]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <dec_lock+0x3a>
 8003504:	89fb      	ldrh	r3, [r7, #14]
 8003506:	3b01      	subs	r3, #1
 8003508:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800350a:	4a0e      	ldr	r2, [pc, #56]	@ (8003544 <dec_lock+0x74>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	4413      	add	r3, r2
 8003512:	330c      	adds	r3, #12
 8003514:	89fa      	ldrh	r2, [r7, #14]
 8003516:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003518:	89fb      	ldrh	r3, [r7, #14]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d105      	bne.n	800352a <dec_lock+0x5a>
 800351e:	4a09      	ldr	r2, [pc, #36]	@ (8003544 <dec_lock+0x74>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	4413      	add	r3, r2
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	737b      	strb	r3, [r7, #13]
 800352e:	e001      	b.n	8003534 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003530:	2302      	movs	r3, #2
 8003532:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003534:	7b7b      	ldrb	r3, [r7, #13]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20001514 	.word	0x20001514

08003548 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e010      	b.n	8003578 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003556:	4a0d      	ldr	r2, [pc, #52]	@ (800358c <clear_lock+0x44>)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4413      	add	r3, r2
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d105      	bne.n	8003572 <clear_lock+0x2a>
 8003566:	4a09      	ldr	r2, [pc, #36]	@ (800358c <clear_lock+0x44>)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4413      	add	r3, r2
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3301      	adds	r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d9eb      	bls.n	8003556 <clear_lock+0xe>
	}
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	20001514 	.word	0x20001514

08003590 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	78db      	ldrb	r3, [r3, #3]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d034      	beq.n	800360e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	7858      	ldrb	r0, [r3, #1]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80035b4:	2301      	movs	r3, #1
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	f7ff fdde 	bl	8003178 <disk_write>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
 80035c6:	e022      	b.n	800360e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	1ad2      	subs	r2, r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d217      	bcs.n	800360e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	789b      	ldrb	r3, [r3, #2]
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	e010      	b.n	8003608 <sync_window+0x78>
					wsect += fs->fsize;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4413      	add	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7858      	ldrb	r0, [r3, #1]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80035fa:	2301      	movs	r3, #1
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	f7ff fdbb 	bl	8003178 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3b01      	subs	r3, #1
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d8eb      	bhi.n	80035e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d01b      	beq.n	8003668 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff ffad 	bl	8003590 <sync_window>
 8003636:	4603      	mov	r3, r0
 8003638:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d113      	bne.n	8003668 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	7858      	ldrb	r0, [r3, #1]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800364a:	2301      	movs	r3, #1
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	f7ff fd73 	bl	8003138 <disk_read>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d004      	beq.n	8003662 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003658:	f04f 33ff 	mov.w	r3, #4294967295
 800365c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	3b02      	subs	r3, #2
 8003680:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	3b02      	subs	r3, #2
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d301      	bcc.n	8003692 <clust2sect+0x20>
 800368e:	2300      	movs	r3, #0
 8003690:	e008      	b.n	80036a4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	895b      	ldrh	r3, [r3, #10]
 8003696:	461a      	mov	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	fb03 f202 	mul.w	r2, r3, r2
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	4413      	add	r3, r2
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d904      	bls.n	80036d0 <get_fat+0x20>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d302      	bcc.n	80036d6 <get_fat+0x26>
		val = 1;	/* Internal error */
 80036d0:	2301      	movs	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e0ba      	b.n	800384c <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	f000 8082 	beq.w	80037ea <get_fat+0x13a>
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	f300 80a6 	bgt.w	8003838 <get_fat+0x188>
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d002      	beq.n	80036f6 <get_fat+0x46>
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d055      	beq.n	80037a0 <get_fat+0xf0>
 80036f4:	e0a0      	b.n	8003838 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	899b      	ldrh	r3, [r3, #12]
 800370c:	4619      	mov	r1, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	fbb3 f3f1 	udiv	r3, r3, r1
 8003714:	4413      	add	r3, r2
 8003716:	4619      	mov	r1, r3
 8003718:	6938      	ldr	r0, [r7, #16]
 800371a:	f7ff ff7d 	bl	8003618 <move_window>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f040 808c 	bne.w	800383e <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	60fa      	str	r2, [r7, #12]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	8992      	ldrh	r2, [r2, #12]
 8003730:	fbb3 f1f2 	udiv	r1, r3, r2
 8003734:	fb01 f202 	mul.w	r2, r1, r2
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003742:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	899b      	ldrh	r3, [r3, #12]
 800374c:	4619      	mov	r1, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	fbb3 f3f1 	udiv	r3, r3, r1
 8003754:	4413      	add	r3, r2
 8003756:	4619      	mov	r1, r3
 8003758:	6938      	ldr	r0, [r7, #16]
 800375a:	f7ff ff5d 	bl	8003618 <move_window>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d16e      	bne.n	8003842 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	899b      	ldrh	r3, [r3, #12]
 8003768:	461a      	mov	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003770:	fb01 f202 	mul.w	r2, r1, r2
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4413      	add	r3, r2
 800377a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800377e:	021b      	lsls	r3, r3, #8
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	4313      	orrs	r3, r2
 8003784:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <get_fat+0xe6>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	e002      	b.n	800379c <get_fat+0xec>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	617b      	str	r3, [r7, #20]
			break;
 800379e:	e055      	b.n	800384c <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	899b      	ldrh	r3, [r3, #12]
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	4619      	mov	r1, r3
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b4:	4413      	add	r3, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	6938      	ldr	r0, [r7, #16]
 80037ba:	f7ff ff2d 	bl	8003618 <move_window>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d140      	bne.n	8003846 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	8992      	ldrh	r2, [r2, #12]
 80037d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80037d6:	fb00 f202 	mul.w	r2, r0, r2
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	440b      	add	r3, r1
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fd08 	bl	80031f4 <ld_word>
 80037e4:	4603      	mov	r3, r0
 80037e6:	617b      	str	r3, [r7, #20]
			break;
 80037e8:	e030      	b.n	800384c <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	899b      	ldrh	r3, [r3, #12]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	4619      	mov	r1, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fe:	4413      	add	r3, r2
 8003800:	4619      	mov	r1, r3
 8003802:	6938      	ldr	r0, [r7, #16]
 8003804:	f7ff ff08 	bl	8003618 <move_window>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11d      	bne.n	800384a <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	8992      	ldrh	r2, [r2, #12]
 800381c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003820:	fb00 f202 	mul.w	r2, r0, r2
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	440b      	add	r3, r1
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fcfb 	bl	8003224 <ld_dword>
 800382e:	4603      	mov	r3, r0
 8003830:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003834:	617b      	str	r3, [r7, #20]
			break;
 8003836:	e009      	b.n	800384c <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003838:	2301      	movs	r3, #1
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e006      	b.n	800384c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800383e:	bf00      	nop
 8003840:	e004      	b.n	800384c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003842:	bf00      	nop
 8003844:	e002      	b.n	800384c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003846:	bf00      	nop
 8003848:	e000      	b.n	800384c <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800384a:	bf00      	nop
		}
	}

	return val;
 800384c:	697b      	ldr	r3, [r7, #20]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003856:	b590      	push	{r4, r7, lr}
 8003858:	b089      	sub	sp, #36	@ 0x24
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003862:	2302      	movs	r3, #2
 8003864:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b01      	cmp	r3, #1
 800386a:	f240 8109 	bls.w	8003a80 <put_fat+0x22a>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	429a      	cmp	r2, r3
 8003876:	f080 8103 	bcs.w	8003a80 <put_fat+0x22a>
		switch (fs->fs_type) {
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b03      	cmp	r3, #3
 8003880:	f000 80b6 	beq.w	80039f0 <put_fat+0x19a>
 8003884:	2b03      	cmp	r3, #3
 8003886:	f300 80fb 	bgt.w	8003a80 <put_fat+0x22a>
 800388a:	2b01      	cmp	r3, #1
 800388c:	d003      	beq.n	8003896 <put_fat+0x40>
 800388e:	2b02      	cmp	r3, #2
 8003890:	f000 8083 	beq.w	800399a <put_fat+0x144>
 8003894:	e0f4      	b.n	8003a80 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	61bb      	str	r3, [r7, #24]
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4413      	add	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	899b      	ldrh	r3, [r3, #12]
 80038ac:	4619      	mov	r1, r3
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80038b4:	4413      	add	r3, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f7ff fead 	bl	8003618 <move_window>
 80038be:	4603      	mov	r3, r0
 80038c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f040 80d4 	bne.w	8003a72 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	61ba      	str	r2, [r7, #24]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	8992      	ldrh	r2, [r2, #12]
 80038da:	fbb3 f0f2 	udiv	r0, r3, r2
 80038de:	fb00 f202 	mul.w	r2, r0, r2
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00d      	beq.n	800390e <put_fat+0xb8>
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	b25a      	sxtb	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	b25b      	sxtb	r3, r3
 8003906:	4313      	orrs	r3, r2
 8003908:	b25b      	sxtb	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	e001      	b.n	8003912 <put_fat+0xbc>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2201      	movs	r2, #1
 800391a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	899b      	ldrh	r3, [r3, #12]
 8003924:	4619      	mov	r1, r3
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	fbb3 f3f1 	udiv	r3, r3, r1
 800392c:	4413      	add	r3, r2
 800392e:	4619      	mov	r1, r3
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff fe71 	bl	8003618 <move_window>
 8003936:	4603      	mov	r3, r0
 8003938:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 809a 	bne.w	8003a76 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	899b      	ldrh	r3, [r3, #12]
 800394c:	461a      	mov	r2, r3
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	fbb3 f0f2 	udiv	r0, r3, r2
 8003954:	fb00 f202 	mul.w	r2, r0, r2
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	440b      	add	r3, r1
 800395c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <put_fat+0x11a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	091b      	lsrs	r3, r3, #4
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e00e      	b.n	800398e <put_fat+0x138>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b25b      	sxtb	r3, r3
 8003976:	f023 030f 	bic.w	r3, r3, #15
 800397a:	b25a      	sxtb	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	b25b      	sxtb	r3, r3
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	b25b      	sxtb	r3, r3
 8003988:	4313      	orrs	r3, r2
 800398a:	b25b      	sxtb	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	70da      	strb	r2, [r3, #3]
			break;
 8003998:	e072      	b.n	8003a80 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	899b      	ldrh	r3, [r3, #12]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4619      	mov	r1, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ae:	4413      	add	r3, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f7ff fe30 	bl	8003618 <move_window>
 80039b8:	4603      	mov	r3, r0
 80039ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80039bc:	7ffb      	ldrb	r3, [r7, #31]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d15b      	bne.n	8003a7a <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	8992      	ldrh	r2, [r2, #12]
 80039d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80039d4:	fb00 f202 	mul.w	r2, r0, r2
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	440b      	add	r3, r1
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	b292      	uxth	r2, r2
 80039e0:	4611      	mov	r1, r2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff fc41 	bl	800326a <st_word>
			fs->wflag = 1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	70da      	strb	r2, [r3, #3]
			break;
 80039ee:	e047      	b.n	8003a80 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	899b      	ldrh	r3, [r3, #12]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a04:	4413      	add	r3, r2
 8003a06:	4619      	mov	r1, r3
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7ff fe05 	bl	8003618 <move_window>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003a12:	7ffb      	ldrb	r3, [r7, #31]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d132      	bne.n	8003a7e <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	8992      	ldrh	r2, [r2, #12]
 8003a2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a30:	fb00 f202 	mul.w	r2, r0, r2
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fbf3 	bl	8003224 <ld_dword>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003a44:	4323      	orrs	r3, r4
 8003a46:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	8992      	ldrh	r2, [r2, #12]
 8003a56:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a5a:	fb00 f202 	mul.w	r2, r0, r2
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	440b      	add	r3, r1
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fc1b 	bl	80032a0 <st_dword>
			fs->wflag = 1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	70da      	strb	r2, [r3, #3]
			break;
 8003a70:	e006      	b.n	8003a80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003a72:	bf00      	nop
 8003a74:	e004      	b.n	8003a80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <put_fat+0x22a>
			if (res != FR_OK) break;
 8003a7e:	bf00      	nop
		}
	}
	return res;
 8003a80:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3724      	adds	r7, #36	@ 0x24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}

08003a8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b088      	sub	sp, #32
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <create_chain+0x2c>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d31b      	bcc.n	8003aee <create_chain+0x64>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	61bb      	str	r3, [r7, #24]
 8003aba:	e018      	b.n	8003aee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003abc:	6839      	ldr	r1, [r7, #0]
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fdf6 	bl	80036b0 <get_fat>
 8003ac4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d801      	bhi.n	8003ad0 <create_chain+0x46>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e070      	b.n	8003bb2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d101      	bne.n	8003adc <create_chain+0x52>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	e06a      	b.n	8003bb2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d201      	bcs.n	8003aea <create_chain+0x60>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	e063      	b.n	8003bb2 <create_chain+0x128>
		scl = clst;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d307      	bcc.n	8003b12 <create_chain+0x88>
				ncl = 2;
 8003b02:	2302      	movs	r3, #2
 8003b04:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d901      	bls.n	8003b12 <create_chain+0x88>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e04f      	b.n	8003bb2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003b12:	69f9      	ldr	r1, [r7, #28]
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff fdcb 	bl	80036b0 <get_fat>
 8003b1a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00e      	beq.n	8003b40 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d003      	beq.n	8003b30 <create_chain+0xa6>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d101      	bne.n	8003b34 <create_chain+0xaa>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	e03e      	b.n	8003bb2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1da      	bne.n	8003af2 <create_chain+0x68>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e038      	b.n	8003bb2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8003b40:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295
 8003b46:	69f9      	ldr	r1, [r7, #28]
 8003b48:	6938      	ldr	r0, [r7, #16]
 8003b4a:	f7ff fe84 	bl	8003856 <put_fat>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <create_chain+0xe2>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d006      	beq.n	8003b6c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	6938      	ldr	r0, [r7, #16]
 8003b64:	f7ff fe77 	bl	8003856 <put_fat>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d116      	bne.n	8003ba0 <create_chain+0x116>
		fs->last_clst = ncl;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	699a      	ldr	r2, [r3, #24]
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	3b02      	subs	r3, #2
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d804      	bhi.n	8003b90 <create_chain+0x106>
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	1e5a      	subs	r2, r3, #1
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	791b      	ldrb	r3, [r3, #4]
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	711a      	strb	r2, [r3, #4]
 8003b9e:	e007      	b.n	8003bb0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003ba0:	7dfb      	ldrb	r3, [r7, #23]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d102      	bne.n	8003bac <create_chain+0x122>
 8003ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8003baa:	e000      	b.n	8003bae <create_chain+0x124>
 8003bac:	2301      	movs	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003bb0:	69fb      	ldr	r3, [r7, #28]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b086      	sub	sp, #24
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bd0:	d204      	bcs.n	8003bdc <dir_sdi+0x22>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e071      	b.n	8003cc4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <dir_sdi+0x46>
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <dir_sdi+0x46>
		clst = fs->dirbase;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	8912      	ldrh	r2, [r2, #8]
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d301      	bcc.n	8003c16 <dir_sdi+0x5c>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e056      	b.n	8003cc4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	61da      	str	r2, [r3, #28]
 8003c1e:	e02d      	b.n	8003c7c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	895b      	ldrh	r3, [r3, #10]
 8003c24:	461a      	mov	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	899b      	ldrh	r3, [r3, #12]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003c30:	e019      	b.n	8003c66 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6979      	ldr	r1, [r7, #20]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fd3a 	bl	80036b0 <get_fat>
 8003c3c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d101      	bne.n	8003c4a <dir_sdi+0x90>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e03c      	b.n	8003cc4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d904      	bls.n	8003c5a <dir_sdi+0xa0>
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d301      	bcc.n	8003c5e <dir_sdi+0xa4>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e032      	b.n	8003cc4 <dir_sdi+0x10a>
			ofs -= csz;
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d2e1      	bcs.n	8003c32 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8003c6e:	6979      	ldr	r1, [r7, #20]
 8003c70:	6938      	ldr	r0, [r7, #16]
 8003c72:	f7ff fcfe 	bl	8003672 <clust2sect>
 8003c76:	4602      	mov	r2, r0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <dir_sdi+0xd4>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e01a      	b.n	8003cc4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	899b      	ldrh	r3, [r3, #12]
 8003c96:	4619      	mov	r1, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	899b      	ldrh	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8003cb6:	fb00 f202 	mul.w	r2, r0, r2
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	18ca      	adds	r2, r1, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3718      	adds	r7, #24
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	3320      	adds	r3, #32
 8003ce2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <dir_next+0x28>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cf2:	d301      	bcc.n	8003cf8 <dir_next+0x2c>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	e0bb      	b.n	8003e70 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	899b      	ldrh	r3, [r3, #12]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d04:	fb01 f202 	mul.w	r2, r1, r2
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f040 809d 	bne.w	8003e4a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69db      	ldr	r3, [r3, #28]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	8912      	ldrh	r2, [r2, #8]
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f0c0 808d 	bcc.w	8003e4a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	61da      	str	r2, [r3, #28]
 8003d36:	2304      	movs	r3, #4
 8003d38:	e09a      	b.n	8003e70 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	899b      	ldrh	r3, [r3, #12]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	8952      	ldrh	r2, [r2, #10]
 8003d4a:	3a01      	subs	r2, #1
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d17b      	bne.n	8003e4a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7ff fca8 	bl	80036b0 <get_fat>
 8003d60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d801      	bhi.n	8003d6c <dir_next+0xa0>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e081      	b.n	8003e70 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d101      	bne.n	8003d78 <dir_next+0xac>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e07b      	b.n	8003e70 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d359      	bcc.n	8003e36 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
 8003d8e:	2304      	movs	r3, #4
 8003d90:	e06e      	b.n	8003e70 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4610      	mov	r0, r2
 8003d9c:	f7ff fe75 	bl	8003a8a <create_chain>
 8003da0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <dir_next+0xe0>
 8003da8:	2307      	movs	r3, #7
 8003daa:	e061      	b.n	8003e70 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <dir_next+0xea>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e05c      	b.n	8003e70 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d101      	bne.n	8003dc2 <dir_next+0xf6>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e056      	b.n	8003e70 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fbe4 	bl	8003590 <sync_window>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <dir_next+0x106>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e04e      	b.n	8003e70 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	899b      	ldrh	r3, [r3, #12]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2100      	movs	r1, #0
 8003de0:	f7ff fa8a 	bl	80032f8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003de4:	2300      	movs	r3, #0
 8003de6:	613b      	str	r3, [r7, #16]
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff fc41 	bl	8003672 <clust2sect>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003df6:	e012      	b.n	8003e1e <dir_next+0x152>
						fs->wflag = 1;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7ff fbc6 	bl	8003590 <sync_window>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <dir_next+0x142>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e030      	b.n	8003e70 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	3301      	adds	r3, #1
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	895b      	ldrh	r3, [r3, #10]
 8003e22:	461a      	mov	r2, r3
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d3e6      	bcc.n	8003df8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad2      	subs	r2, r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8003e3c:	6979      	ldr	r1, [r7, #20]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff fc17 	bl	8003672 <clust2sect>
 8003e44:	4602      	mov	r2, r0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	899b      	ldrh	r3, [r3, #12]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8003e62:	fb00 f202 	mul.w	r2, r0, r2
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	18ca      	adds	r2, r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	331a      	adds	r3, #26
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff f9b4 	bl	80031f4 <ld_word>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d109      	bne.n	8003eac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	3314      	adds	r3, #20
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f9a9 	bl	80031f4 <ld_word>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003eac:	68fb      	ldr	r3, [r7, #12]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	331a      	adds	r3, #26
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f994 	bl	80031f4 <ld_word>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <cmp_lfn+0x1e>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e059      	b.n	8003f8a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ede:	1e5a      	subs	r2, r3, #1
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003eec:	2301      	movs	r3, #1
 8003eee:	81fb      	strh	r3, [r7, #14]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	e033      	b.n	8003f5e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003ef6:	4a27      	ldr	r2, [pc, #156]	@ (8003f94 <cmp_lfn+0xdc>)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4413      	add	r3, r2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7ff f975 	bl	80031f4 <ld_word>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003f0e:	89fb      	ldrh	r3, [r7, #14]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01a      	beq.n	8003f4a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2bfe      	cmp	r3, #254	@ 0xfe
 8003f18:	d812      	bhi.n	8003f40 <cmp_lfn+0x88>
 8003f1a:	89bb      	ldrh	r3, [r7, #12]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fa3d 	bl	800539c <ff_wtoupper>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461c      	mov	r4, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	617a      	str	r2, [r7, #20]
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fa31 	bl	800539c <ff_wtoupper>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	d001      	beq.n	8003f44 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8003f40:	2300      	movs	r3, #0
 8003f42:	e022      	b.n	8003f8a <cmp_lfn+0xd2>
			}
			wc = uc;
 8003f44:	89bb      	ldrh	r3, [r7, #12]
 8003f46:	81fb      	strh	r3, [r7, #14]
 8003f48:	e006      	b.n	8003f58 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003f4a:	89bb      	ldrh	r3, [r7, #12]
 8003f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d001      	beq.n	8003f58 <cmp_lfn+0xa0>
 8003f54:	2300      	movs	r3, #0
 8003f56:	e018      	b.n	8003f8a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b0c      	cmp	r3, #12
 8003f62:	d9c8      	bls.n	8003ef6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00b      	beq.n	8003f88 <cmp_lfn+0xd0>
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <cmp_lfn+0xd0>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <cmp_lfn+0xd0>
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8003f88:	2301      	movs	r3, #1
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	371c      	adds	r7, #28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd90      	pop	{r4, r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0800608c 	.word	0x0800608c

08003f98 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	331a      	adds	r3, #26
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff f924 	bl	80031f4 <ld_word>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <pick_lfn+0x1e>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e04d      	b.n	8004052 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fbe:	1e5a      	subs	r2, r3, #1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003fcc:	2301      	movs	r3, #1
 8003fce:	81fb      	strh	r3, [r7, #14]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	e028      	b.n	8004028 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003fd6:	4a21      	ldr	r2, [pc, #132]	@ (800405c <pick_lfn+0xc4>)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4413      	add	r3, r2
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff f905 	bl	80031f4 <ld_word>
 8003fea:	4603      	mov	r3, r0
 8003fec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00f      	beq.n	8004014 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2bfe      	cmp	r3, #254	@ 0xfe
 8003ff8:	d901      	bls.n	8003ffe <pick_lfn+0x66>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e029      	b.n	8004052 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8003ffe:	89bb      	ldrh	r3, [r7, #12]
 8004000:	81fb      	strh	r3, [r7, #14]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	617a      	str	r2, [r7, #20]
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	89fa      	ldrh	r2, [r7, #14]
 8004010:	801a      	strh	r2, [r3, #0]
 8004012:	e006      	b.n	8004022 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004014:	89bb      	ldrh	r3, [r7, #12]
 8004016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800401a:	4293      	cmp	r3, r2
 800401c:	d001      	beq.n	8004022 <pick_lfn+0x8a>
 800401e:	2300      	movs	r3, #0
 8004020:	e017      	b.n	8004052 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3301      	adds	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d9d3      	bls.n	8003fd6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2bfe      	cmp	r3, #254	@ 0xfe
 800403e:	d901      	bls.n	8004044 <pick_lfn+0xac>
 8004040:	2300      	movs	r3, #0
 8004042:	e006      	b.n	8004052 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	005b      	lsls	r3, r3, #1
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	2200      	movs	r2, #0
 800404e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8004050:	2301      	movs	r3, #1
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	0800608c 	.word	0x0800608c

08004060 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800406c:	230b      	movs	r3, #11
 800406e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	0852      	lsrs	r2, r2, #1
 8004076:	01db      	lsls	r3, r3, #7
 8004078:	4313      	orrs	r3, r2
 800407a:	b2da      	uxtb	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	1c59      	adds	r1, r3, #1
 8004080:	6079      	str	r1, [r7, #4]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	4413      	add	r3, r2
 8004086:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3b01      	subs	r3, #1
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1ed      	bne.n	8004070 <sum_sfn+0x10>
	return sum;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80040ac:	2304      	movs	r3, #4
 80040ae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80040b6:	23ff      	movs	r3, #255	@ 0xff
 80040b8:	757b      	strb	r3, [r7, #21]
 80040ba:	23ff      	movs	r3, #255	@ 0xff
 80040bc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80040be:	e081      	b.n	80041c4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4619      	mov	r1, r3
 80040c6:	6938      	ldr	r0, [r7, #16]
 80040c8:	f7ff faa6 	bl	8003618 <move_window>
 80040cc:	4603      	mov	r3, r0
 80040ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d17c      	bne.n	80041d0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80040de:	7dbb      	ldrb	r3, [r7, #22]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d102      	bne.n	80040ea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80040e4:	2304      	movs	r3, #4
 80040e6:	75fb      	strb	r3, [r7, #23]
 80040e8:	e077      	b.n	80041da <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	330b      	adds	r3, #11
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80040fe:	7dbb      	ldrb	r3, [r7, #22]
 8004100:	2be5      	cmp	r3, #229	@ 0xe5
 8004102:	d00e      	beq.n	8004122 <dir_read+0x80>
 8004104:	7dbb      	ldrb	r3, [r7, #22]
 8004106:	2b2e      	cmp	r3, #46	@ 0x2e
 8004108:	d00b      	beq.n	8004122 <dir_read+0x80>
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	f023 0320 	bic.w	r3, r3, #32
 8004110:	2b08      	cmp	r3, #8
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	4293      	cmp	r3, r2
 8004120:	d002      	beq.n	8004128 <dir_read+0x86>
				ord = 0xFF;
 8004122:	23ff      	movs	r3, #255	@ 0xff
 8004124:	757b      	strb	r3, [r7, #21]
 8004126:	e044      	b.n	80041b2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8004128:	7bfb      	ldrb	r3, [r7, #15]
 800412a:	2b0f      	cmp	r3, #15
 800412c:	d12f      	bne.n	800418e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800412e:	7dbb      	ldrb	r3, [r7, #22]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00d      	beq.n	8004154 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	7b5b      	ldrb	r3, [r3, #13]
 800413e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8004140:	7dbb      	ldrb	r3, [r7, #22]
 8004142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004146:	75bb      	strb	r3, [r7, #22]
 8004148:	7dbb      	ldrb	r3, [r7, #22]
 800414a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004154:	7dba      	ldrb	r2, [r7, #22]
 8004156:	7d7b      	ldrb	r3, [r7, #21]
 8004158:	429a      	cmp	r2, r3
 800415a:	d115      	bne.n	8004188 <dir_read+0xe6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	330d      	adds	r3, #13
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	7d3a      	ldrb	r2, [r7, #20]
 8004166:	429a      	cmp	r2, r3
 8004168:	d10e      	bne.n	8004188 <dir_read+0xe6>
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f7ff ff0f 	bl	8003f98 <pick_lfn>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <dir_read+0xe6>
 8004180:	7d7b      	ldrb	r3, [r7, #21]
 8004182:	3b01      	subs	r3, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e000      	b.n	800418a <dir_read+0xe8>
 8004188:	23ff      	movs	r3, #255	@ 0xff
 800418a:	757b      	strb	r3, [r7, #21]
 800418c:	e011      	b.n	80041b2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800418e:	7d7b      	ldrb	r3, [r7, #21]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d109      	bne.n	80041a8 <dir_read+0x106>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff61 	bl	8004060 <sum_sfn>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	7d3b      	ldrb	r3, [r7, #20]
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d015      	beq.n	80041d4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f04f 32ff 	mov.w	r2, #4294967295
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80041b0:	e010      	b.n	80041d4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80041b2:	2100      	movs	r1, #0
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fd89 	bl	8003ccc <dir_next>
 80041ba:	4603      	mov	r3, r0
 80041bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <dir_read+0x136>
	while (dp->sect) {
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f af79 	bne.w	80040c0 <dir_read+0x1e>
 80041ce:	e004      	b.n	80041da <dir_read+0x138>
		if (res != FR_OK) break;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <dir_read+0x138>
					break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <dir_read+0x138>
		if (res != FR_OK) break;
 80041d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d002      	beq.n	80041e6 <dir_read+0x144>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
	return res;
 80041e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80041fe:	2100      	movs	r1, #0
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fcda 	bl	8003bba <dir_sdi>
 8004206:	4603      	mov	r3, r0
 8004208:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <dir_find+0x24>
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	e0a9      	b.n	8004368 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004214:	23ff      	movs	r3, #255	@ 0xff
 8004216:	753b      	strb	r3, [r7, #20]
 8004218:	7d3b      	ldrb	r3, [r7, #20]
 800421a:	757b      	strb	r3, [r7, #21]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f04f 32ff 	mov.w	r2, #4294967295
 8004222:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	4619      	mov	r1, r3
 800422a:	6938      	ldr	r0, [r7, #16]
 800422c:	f7ff f9f4 	bl	8003618 <move_window>
 8004230:	4603      	mov	r3, r0
 8004232:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8090 	bne.w	800435c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004244:	7dbb      	ldrb	r3, [r7, #22]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <dir_find+0x60>
 800424a:	2304      	movs	r3, #4
 800424c:	75fb      	strb	r3, [r7, #23]
 800424e:	e08a      	b.n	8004366 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	330b      	adds	r3, #11
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800425c:	73fb      	strb	r3, [r7, #15]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7bfa      	ldrb	r2, [r7, #15]
 8004262:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004264:	7dbb      	ldrb	r3, [r7, #22]
 8004266:	2be5      	cmp	r3, #229	@ 0xe5
 8004268:	d007      	beq.n	800427a <dir_find+0x8a>
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <dir_find+0x98>
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b0f      	cmp	r3, #15
 8004278:	d006      	beq.n	8004288 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800427a:	23ff      	movs	r3, #255	@ 0xff
 800427c:	757b      	strb	r3, [r7, #21]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f04f 32ff 	mov.w	r2, #4294967295
 8004284:	631a      	str	r2, [r3, #48]	@ 0x30
 8004286:	e05e      	b.n	8004346 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	2b0f      	cmp	r3, #15
 800428c:	d136      	bne.n	80042fc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d154      	bne.n	8004346 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800429c:	7dbb      	ldrb	r3, [r7, #22]
 800429e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	7b5b      	ldrb	r3, [r3, #13]
 80042ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80042ae:	7dbb      	ldrb	r3, [r7, #22]
 80042b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042b4:	75bb      	strb	r3, [r7, #22]
 80042b6:	7dbb      	ldrb	r3, [r7, #22]
 80042b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80042c2:	7dba      	ldrb	r2, [r7, #22]
 80042c4:	7d7b      	ldrb	r3, [r7, #21]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d115      	bne.n	80042f6 <dir_find+0x106>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	330d      	adds	r3, #13
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	7d3a      	ldrb	r2, [r7, #20]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d10e      	bne.n	80042f6 <dir_find+0x106>
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f7ff fde8 	bl	8003eb8 <cmp_lfn>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <dir_find+0x106>
 80042ee:	7d7b      	ldrb	r3, [r7, #21]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e000      	b.n	80042f8 <dir_find+0x108>
 80042f6:	23ff      	movs	r3, #255	@ 0xff
 80042f8:	757b      	strb	r3, [r7, #21]
 80042fa:	e024      	b.n	8004346 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80042fc:	7d7b      	ldrb	r3, [r7, #21]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <dir_find+0x126>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff feaa 	bl	8004060 <sum_sfn>
 800430c:	4603      	mov	r3, r0
 800430e:	461a      	mov	r2, r3
 8004310:	7d3b      	ldrb	r3, [r7, #20]
 8004312:	4293      	cmp	r3, r2
 8004314:	d024      	beq.n	8004360 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <dir_find+0x14a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a18      	ldr	r0, [r3, #32]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3324      	adds	r3, #36	@ 0x24
 800432c:	220b      	movs	r2, #11
 800432e:	4619      	mov	r1, r3
 8004330:	f7fe fffd 	bl	800332e <mem_cmp>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d014      	beq.n	8004364 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800433a:	23ff      	movs	r3, #255	@ 0xff
 800433c:	757b      	strb	r3, [r7, #21]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f04f 32ff 	mov.w	r2, #4294967295
 8004344:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004346:	2100      	movs	r1, #0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fcbf 	bl	8003ccc <dir_next>
 800434e:	4603      	mov	r3, r0
 8004350:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f43f af65 	beq.w	8004224 <dir_find+0x34>
 800435a:	e004      	b.n	8004366 <dir_find+0x176>
		if (res != FR_OK) break;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004364:	bf00      	nop

	return res;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	2200      	movs	r2, #0
 8004384:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f000 80ca 	beq.w	8004524 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d032      	beq.n	8004400 <get_fileinfo+0x90>
			i = j = 0;
 800439a:	2300      	movs	r3, #0
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80043a2:	e01b      	b.n	80043dc <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80043a4:	89fb      	ldrh	r3, [r7, #14]
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 ffbb 	bl	8005324 <ff_convert>
 80043ae:	4603      	mov	r3, r0
 80043b0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <get_fileinfo+0x4e>
 80043b8:	2300      	movs	r3, #0
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e01a      	b.n	80043f4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80043c2:	d902      	bls.n	80043ca <get_fileinfo+0x5a>
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e014      	b.n	80043f4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	61fa      	str	r2, [r7, #28]
 80043d0:	89fa      	ldrh	r2, [r7, #14]
 80043d2:	b2d1      	uxtb	r1, r2
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	4413      	add	r3, r2
 80043d8:	460a      	mov	r2, r1
 80043da:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	1c59      	adds	r1, r3, #1
 80043e4:	61b9      	str	r1, [r7, #24]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4413      	add	r3, r2
 80043ea:	881b      	ldrh	r3, [r3, #0]
 80043ec:	81fb      	strh	r3, [r7, #14]
 80043ee:	89fb      	ldrh	r3, [r7, #14]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1d7      	bne.n	80043a4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	4413      	add	r3, r2
 80043fa:	3316      	adds	r3, #22
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	4413      	add	r3, r2
 800440e:	3316      	adds	r3, #22
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8004414:	e04d      	b.n	80044b2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1a      	ldr	r2, [r3, #32]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	1c59      	adds	r1, r3, #1
 800441e:	61f9      	str	r1, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b20      	cmp	r3, #32
 800442a:	d041      	beq.n	80044b0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b05      	cmp	r3, #5
 8004430:	d101      	bne.n	8004436 <get_fileinfo+0xc6>
 8004432:	23e5      	movs	r3, #229	@ 0xe5
 8004434:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	2b09      	cmp	r3, #9
 800443a:	d10f      	bne.n	800445c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800443c:	89bb      	ldrh	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <get_fileinfo+0xde>
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	4413      	add	r3, r2
 8004448:	3316      	adds	r3, #22
 800444a:	222e      	movs	r2, #46	@ 0x2e
 800444c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	61ba      	str	r2, [r7, #24]
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4413      	add	r3, r2
 8004458:	222e      	movs	r2, #46	@ 0x2e
 800445a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4413      	add	r3, r2
 8004462:	3309      	adds	r3, #9
 8004464:	7dfa      	ldrb	r2, [r7, #23]
 8004466:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8004468:	89bb      	ldrh	r3, [r7, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d11c      	bne.n	80044a8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	2b40      	cmp	r3, #64	@ 0x40
 8004472:	d913      	bls.n	800449c <get_fileinfo+0x12c>
 8004474:	7dfb      	ldrb	r3, [r7, #23]
 8004476:	2b5a      	cmp	r3, #90	@ 0x5a
 8004478:	d810      	bhi.n	800449c <get_fileinfo+0x12c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	330c      	adds	r3, #12
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b08      	cmp	r3, #8
 8004488:	d901      	bls.n	800448e <get_fileinfo+0x11e>
 800448a:	2310      	movs	r3, #16
 800448c:	e000      	b.n	8004490 <get_fileinfo+0x120>
 800448e:	2308      	movs	r3, #8
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d002      	beq.n	800449c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	3320      	adds	r3, #32
 800449a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	4413      	add	r3, r2
 80044a2:	3316      	adds	r3, #22
 80044a4:	7dfa      	ldrb	r2, [r7, #23]
 80044a6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	3301      	adds	r3, #1
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	e000      	b.n	80044b2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80044b0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b0a      	cmp	r3, #10
 80044b6:	d9ae      	bls.n	8004416 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80044b8:	89bb      	ldrh	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10d      	bne.n	80044da <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	4413      	add	r3, r2
 80044c4:	3316      	adds	r3, #22
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	330c      	adds	r3, #12
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <get_fileinfo+0x16a>
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	4413      	add	r3, r2
 80044e0:	3309      	adds	r3, #9
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	7ada      	ldrb	r2, [r3, #11]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	331c      	adds	r3, #28
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe fe94 	bl	8003224 <ld_dword>
 80044fc:	4602      	mov	r2, r0
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	3316      	adds	r3, #22
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fe8b 	bl	8003224 <ld_dword>
 800450e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	b29a      	uxth	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	80da      	strh	r2, [r3, #6]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	0c1b      	lsrs	r3, r3, #16
 800451c:	b29a      	uxth	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	809a      	strh	r2, [r3, #4]
 8004522:	e000      	b.n	8004526 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8004524:	bf00      	nop
}
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	61ba      	str	r2, [r7, #24]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800455a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800455c:	2b1f      	cmp	r3, #31
 800455e:	d940      	bls.n	80045e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004562:	2b2f      	cmp	r3, #47	@ 0x2f
 8004564:	d006      	beq.n	8004574 <create_name+0x48>
 8004566:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004568:	2b5c      	cmp	r3, #92	@ 0x5c
 800456a:	d110      	bne.n	800458e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800456c:	e002      	b.n	8004574 <create_name+0x48>
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	3301      	adds	r3, #1
 8004572:	61bb      	str	r3, [r7, #24]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4413      	add	r3, r2
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b2f      	cmp	r3, #47	@ 0x2f
 800457e:	d0f6      	beq.n	800456e <create_name+0x42>
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	4413      	add	r3, r2
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b5c      	cmp	r3, #92	@ 0x5c
 800458a:	d0f0      	beq.n	800456e <create_name+0x42>
			break;
 800458c:	e02a      	b.n	80045e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2bfe      	cmp	r3, #254	@ 0xfe
 8004592:	d901      	bls.n	8004598 <create_name+0x6c>
 8004594:	2306      	movs	r3, #6
 8004596:	e17d      	b.n	8004894 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004598:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800459a:	b2db      	uxtb	r3, r3
 800459c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800459e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045a0:	2101      	movs	r1, #1
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 febe 	bl	8005324 <ff_convert>
 80045a8:	4603      	mov	r3, r0
 80045aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80045ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <create_name+0x8a>
 80045b2:	2306      	movs	r3, #6
 80045b4:	e16e      	b.n	8004894 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80045b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80045ba:	d809      	bhi.n	80045d0 <create_name+0xa4>
 80045bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045be:	4619      	mov	r1, r3
 80045c0:	488d      	ldr	r0, [pc, #564]	@ (80047f8 <create_name+0x2cc>)
 80045c2:	f7fe fedb 	bl	800337c <chk_chr>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <create_name+0xa4>
 80045cc:	2306      	movs	r3, #6
 80045ce:	e161      	b.n	8004894 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	617a      	str	r2, [r7, #20]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80045de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80045e0:	e7b4      	b.n	800454c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80045e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	441a      	add	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80045ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80045f0:	2b1f      	cmp	r3, #31
 80045f2:	d801      	bhi.n	80045f8 <create_name+0xcc>
 80045f4:	2304      	movs	r3, #4
 80045f6:	e000      	b.n	80045fa <create_name+0xce>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80045fe:	e011      	b.n	8004624 <create_name+0xf8>
		w = lfn[di - 1];
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004606:	3b01      	subs	r3, #1
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8004612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004614:	2b20      	cmp	r3, #32
 8004616:	d002      	beq.n	800461e <create_name+0xf2>
 8004618:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800461a:	2b2e      	cmp	r3, #46	@ 0x2e
 800461c:	d106      	bne.n	800462c <create_name+0x100>
		di--;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	3b01      	subs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1ea      	bne.n	8004600 <create_name+0xd4>
 800462a:	e000      	b.n	800462e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800462c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4413      	add	r3, r2
 8004636:	2200      	movs	r2, #0
 8004638:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <create_name+0x118>
 8004640:	2306      	movs	r3, #6
 8004642:	e127      	b.n	8004894 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3324      	adds	r3, #36	@ 0x24
 8004648:	220b      	movs	r2, #11
 800464a:	2120      	movs	r1, #32
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fe53 	bl	80032f8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8004652:	2300      	movs	r3, #0
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	e002      	b.n	800465e <create_name+0x132>
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	3301      	adds	r3, #1
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	2b20      	cmp	r3, #32
 800466a:	d0f5      	beq.n	8004658 <create_name+0x12c>
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	2b2e      	cmp	r3, #46	@ 0x2e
 8004678:	d0ee      	beq.n	8004658 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d009      	beq.n	8004694 <create_name+0x168>
 8004680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004684:	f043 0303 	orr.w	r3, r3, #3
 8004688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800468c:	e002      	b.n	8004694 <create_name+0x168>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	3b01      	subs	r3, #1
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <create_name+0x182>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80046a0:	3b01      	subs	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80046ac:	d1ef      	bne.n	800468e <create_name+0x162>

	i = b = 0; ni = 8;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80046b4:	2300      	movs	r3, #0
 80046b6:	623b      	str	r3, [r7, #32]
 80046b8:	2308      	movs	r3, #8
 80046ba:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	61ba      	str	r2, [r7, #24]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80046cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 8090 	beq.w	80047f4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80046d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d006      	beq.n	80046e8 <create_name+0x1bc>
 80046da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80046de:	d10a      	bne.n	80046f6 <create_name+0x1ca>
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d006      	beq.n	80046f6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80046e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ec:	f043 0303 	orr.w	r3, r3, #3
 80046f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80046f4:	e07d      	b.n	80047f2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80046f6:	6a3a      	ldr	r2, [r7, #32]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d203      	bcs.n	8004706 <create_name+0x1da>
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	429a      	cmp	r2, r3
 8004704:	d123      	bne.n	800474e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b0b      	cmp	r3, #11
 800470a:	d106      	bne.n	800471a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004710:	f043 0303 	orr.w	r3, r3, #3
 8004714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004718:	e075      	b.n	8004806 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	429a      	cmp	r2, r3
 8004720:	d005      	beq.n	800472e <create_name+0x202>
 8004722:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004726:	f043 0303 	orr.w	r3, r3, #3
 800472a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	429a      	cmp	r2, r3
 8004734:	d866      	bhi.n	8004804 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	2308      	movs	r3, #8
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	230b      	movs	r3, #11
 8004740:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8004742:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800474c:	e051      	b.n	80047f2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800474e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004750:	2b7f      	cmp	r3, #127	@ 0x7f
 8004752:	d914      	bls.n	800477e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8004754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fde3 	bl	8005324 <ff_convert>
 800475e:	4603      	mov	r3, r0
 8004760:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8004762:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <create_name+0x246>
 8004768:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800476a:	3b80      	subs	r3, #128	@ 0x80
 800476c:	4a23      	ldr	r2, [pc, #140]	@ (80047fc <create_name+0x2d0>)
 800476e:	5cd3      	ldrb	r3, [r2, r3]
 8004770:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8004772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004776:	f043 0302 	orr.w	r3, r3, #2
 800477a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800477e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <create_name+0x268>
 8004784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004786:	4619      	mov	r1, r3
 8004788:	481d      	ldr	r0, [pc, #116]	@ (8004800 <create_name+0x2d4>)
 800478a:	f7fe fdf7 	bl	800337c <chk_chr>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d008      	beq.n	80047a6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8004794:	235f      	movs	r3, #95	@ 0x5f
 8004796:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004798:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800479c:	f043 0303 	orr.w	r3, r3, #3
 80047a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80047a4:	e01b      	b.n	80047de <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80047a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	d909      	bls.n	80047c0 <create_name+0x294>
 80047ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80047b0:	d806      	bhi.n	80047c0 <create_name+0x294>
					b |= 2;
 80047b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047b6:	f043 0302 	orr.w	r3, r3, #2
 80047ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80047be:	e00e      	b.n	80047de <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80047c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047c2:	2b60      	cmp	r3, #96	@ 0x60
 80047c4:	d90b      	bls.n	80047de <create_name+0x2b2>
 80047c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047c8:	2b7a      	cmp	r3, #122	@ 0x7a
 80047ca:	d808      	bhi.n	80047de <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80047cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80047d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80047da:	3b20      	subs	r3, #32
 80047dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	623a      	str	r2, [r7, #32]
 80047e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80047e6:	b2d1      	uxtb	r1, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	460a      	mov	r2, r1
 80047ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80047f2:	e763      	b.n	80046bc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80047f4:	bf00      	nop
 80047f6:	e006      	b.n	8004806 <create_name+0x2da>
 80047f8:	08005fac 	.word	0x08005fac
 80047fc:	0800600c 	.word	0x0800600c
 8004800:	08005fb8 	.word	0x08005fb8
			if (si > di) break;			/* No extension */
 8004804:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800480c:	2be5      	cmp	r3, #229	@ 0xe5
 800480e:	d103      	bne.n	8004818 <create_name+0x2ec>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2205      	movs	r2, #5
 8004814:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d104      	bne.n	8004828 <create_name+0x2fc>
 800481e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8004828:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800482c:	f003 030c 	and.w	r3, r3, #12
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d005      	beq.n	8004840 <create_name+0x314>
 8004834:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b03      	cmp	r3, #3
 800483e:	d105      	bne.n	800484c <create_name+0x320>
 8004840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800484c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d117      	bne.n	8004888 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8004858:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	2b01      	cmp	r3, #1
 8004862:	d105      	bne.n	8004870 <create_name+0x344>
 8004864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004868:	f043 0310 	orr.w	r3, r3, #16
 800486c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8004870:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b04      	cmp	r3, #4
 800487a:	d105      	bne.n	8004888 <create_name+0x35c>
 800487c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800488e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8004892:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8004894:	4618      	mov	r0, r3
 8004896:	3728      	adds	r7, #40	@ 0x28
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80048b0:	e002      	b.n	80048b8 <follow_path+0x1c>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3301      	adds	r3, #1
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80048be:	d0f8      	beq.n	80048b2 <follow_path+0x16>
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b5c      	cmp	r3, #92	@ 0x5c
 80048c6:	d0f4      	beq.n	80048b2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b1f      	cmp	r3, #31
 80048d4:	d80a      	bhi.n	80048ec <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2280      	movs	r2, #128	@ 0x80
 80048da:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80048de:	2100      	movs	r1, #0
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff f96a 	bl	8003bba <dir_sdi>
 80048e6:	4603      	mov	r3, r0
 80048e8:	75fb      	strb	r3, [r7, #23]
 80048ea:	e048      	b.n	800497e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80048ec:	463b      	mov	r3, r7
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fe1b 	bl	800452c <create_name>
 80048f6:	4603      	mov	r3, r0
 80048f8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80048fa:	7dfb      	ldrb	r3, [r7, #23]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d139      	bne.n	8004974 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fc75 	bl	80041f0 <dir_find>
 8004906:	4603      	mov	r3, r0
 8004908:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004910:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	2b04      	cmp	r3, #4
 800491c:	d12c      	bne.n	8004978 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800491e:	7afb      	ldrb	r3, [r7, #11]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b00      	cmp	r3, #0
 8004926:	d127      	bne.n	8004978 <follow_path+0xdc>
 8004928:	2305      	movs	r3, #5
 800492a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800492c:	e024      	b.n	8004978 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d121      	bne.n	800497c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	799b      	ldrb	r3, [r3, #6]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004944:	2305      	movs	r3, #5
 8004946:	75fb      	strb	r3, [r7, #23]
 8004948:	e019      	b.n	800497e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	8992      	ldrh	r2, [r2, #12]
 8004958:	fbb3 f0f2 	udiv	r0, r3, r2
 800495c:	fb00 f202 	mul.w	r2, r0, r2
 8004960:	1a9b      	subs	r3, r3, r2
 8004962:	440b      	add	r3, r1
 8004964:	4619      	mov	r1, r3
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff fa86 	bl	8003e78 <ld_clust>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004972:	e7bb      	b.n	80048ec <follow_path+0x50>
			if (res != FR_OK) break;
 8004974:	bf00      	nop
 8004976:	e002      	b.n	800497e <follow_path+0xe2>
				break;
 8004978:	bf00      	nop
 800497a:	e000      	b.n	800497e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800497c:	bf00      	nop
			}
		}
	}

	return res;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004990:	f04f 33ff 	mov.w	r3, #4294967295
 8004994:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d031      	beq.n	8004a02 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	617b      	str	r3, [r7, #20]
 80049a4:	e002      	b.n	80049ac <get_ldnumber+0x24>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3301      	adds	r3, #1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b1f      	cmp	r3, #31
 80049b2:	d903      	bls.n	80049bc <get_ldnumber+0x34>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b3a      	cmp	r3, #58	@ 0x3a
 80049ba:	d1f4      	bne.n	80049a6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b3a      	cmp	r3, #58	@ 0x3a
 80049c2:	d11c      	bne.n	80049fe <get_ldnumber+0x76>
			tp = *path;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	60fa      	str	r2, [r7, #12]
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	3b30      	subs	r3, #48	@ 0x30
 80049d4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b09      	cmp	r3, #9
 80049da:	d80e      	bhi.n	80049fa <get_ldnumber+0x72>
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d10a      	bne.n	80049fa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d107      	bne.n	80049fa <get_ldnumber+0x72>
					vol = (int)i;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3301      	adds	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	e002      	b.n	8004a04 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004a02:	693b      	ldr	r3, [r7, #16]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	70da      	strb	r2, [r3, #3]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295
 8004a26:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe fdf4 	bl	8003618 <move_window>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <check_fs+0x2a>
 8004a36:	2304      	movs	r3, #4
 8004a38:	e038      	b.n	8004aac <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3338      	adds	r3, #56	@ 0x38
 8004a3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fe fbd6 	bl	80031f4 <ld_word>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <check_fs+0x48>
 8004a54:	2303      	movs	r3, #3
 8004a56:	e029      	b.n	8004aac <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a5e:	2be9      	cmp	r3, #233	@ 0xe9
 8004a60:	d009      	beq.n	8004a76 <check_fs+0x66>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a68:	2beb      	cmp	r3, #235	@ 0xeb
 8004a6a:	d11e      	bne.n	8004aaa <check_fs+0x9a>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004a72:	2b90      	cmp	r3, #144	@ 0x90
 8004a74:	d119      	bne.n	8004aaa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3338      	adds	r3, #56	@ 0x38
 8004a7a:	3336      	adds	r3, #54	@ 0x36
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe fbd1 	bl	8003224 <ld_dword>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a88:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab4 <check_fs+0xa4>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <check_fs+0x82>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	e00c      	b.n	8004aac <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3338      	adds	r3, #56	@ 0x38
 8004a96:	3352      	adds	r3, #82	@ 0x52
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7fe fbc3 	bl	8003224 <ld_dword>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4a05      	ldr	r2, [pc, #20]	@ (8004ab8 <check_fs+0xa8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d101      	bne.n	8004aaa <check_fs+0x9a>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004aaa:	2302      	movs	r3, #2
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	00544146 	.word	0x00544146
 8004ab8:	33544146 	.word	0x33544146

08004abc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b096      	sub	sp, #88	@ 0x58
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff ff59 	bl	8004988 <get_ldnumber>
 8004ad6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da01      	bge.n	8004ae2 <find_volume+0x26>
 8004ade:	230b      	movs	r3, #11
 8004ae0:	e265      	b.n	8004fae <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004ae2:	4a9f      	ldr	r2, [pc, #636]	@ (8004d60 <find_volume+0x2a4>)
 8004ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aea:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <find_volume+0x3a>
 8004af2:	230c      	movs	r3, #12
 8004af4:	e25b      	b.n	8004fae <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004afa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01a      	beq.n	8004b42 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe facf 	bl	80030b4 <disk_status>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10c      	bne.n	8004b42 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d007      	beq.n	8004b3e <find_volume+0x82>
 8004b2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004b3a:	230a      	movs	r3, #10
 8004b3c:	e237      	b.n	8004fae <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e235      	b.n	8004fae <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b4a:	b2da      	uxtb	r2, r3
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b4e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe fac7 	bl	80030e8 <disk_initialize>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004b60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e21e      	b.n	8004fae <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004b70:	79fb      	ldrb	r3, [r7, #7]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <find_volume+0xca>
 8004b76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004b82:	230a      	movs	r3, #10
 8004b84:	e213      	b.n	8004fae <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b88:	7858      	ldrb	r0, [r3, #1]
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2102      	movs	r1, #2
 8004b92:	f7fe fb11 	bl	80031b8 <disk_ioctl>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <find_volume+0xe4>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e206      	b.n	8004fae <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	899b      	ldrh	r3, [r3, #12]
 8004ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba8:	d80d      	bhi.n	8004bc6 <find_volume+0x10a>
 8004baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bac:	899b      	ldrh	r3, [r3, #12]
 8004bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb2:	d308      	bcc.n	8004bc6 <find_volume+0x10a>
 8004bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb6:	899b      	ldrh	r3, [r3, #12]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	899b      	ldrh	r3, [r3, #12]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <find_volume+0x10e>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e1f1      	b.n	8004fae <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004bce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004bd0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004bd2:	f7ff ff1d 	bl	8004a10 <check_fs>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004bdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d149      	bne.n	8004c78 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004be4:	2300      	movs	r3, #0
 8004be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be8:	e01e      	b.n	8004c28 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004bf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8004bf8:	4413      	add	r3, r2
 8004bfa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	3304      	adds	r3, #4
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <find_volume+0x158>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	3308      	adds	r3, #8
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe fb0a 	bl	8003224 <ld_dword>
 8004c10:	4602      	mov	r2, r0
 8004c12:	e000      	b.n	8004c16 <find_volume+0x15a>
 8004c14:	2200      	movs	r2, #0
 8004c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	3358      	adds	r3, #88	@ 0x58
 8004c1c:	443b      	add	r3, r7
 8004c1e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c24:	3301      	adds	r3, #1
 8004c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d9dd      	bls.n	8004bea <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004c2e:	2300      	movs	r3, #0
 8004c30:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8004c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <find_volume+0x182>
 8004c38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	3358      	adds	r3, #88	@ 0x58
 8004c44:	443b      	add	r3, r7
 8004c46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004c4a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d005      	beq.n	8004c5e <find_volume+0x1a2>
 8004c52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004c54:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004c56:	f7ff fedb 	bl	8004a10 <check_fs>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	e000      	b.n	8004c60 <find_volume+0x1a4>
 8004c5e:	2303      	movs	r3, #3
 8004c60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004c64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d905      	bls.n	8004c78 <find_volume+0x1bc>
 8004c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c6e:	3301      	adds	r3, #1
 8004c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d9e2      	bls.n	8004c3e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004c78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c7c:	2b04      	cmp	r3, #4
 8004c7e:	d101      	bne.n	8004c84 <find_volume+0x1c8>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e194      	b.n	8004fae <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004c84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d901      	bls.n	8004c90 <find_volume+0x1d4>
 8004c8c:	230d      	movs	r3, #13
 8004c8e:	e18e      	b.n	8004fae <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	3338      	adds	r3, #56	@ 0x38
 8004c94:	330b      	adds	r3, #11
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe faac 	bl	80031f4 <ld_word>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	899b      	ldrh	r3, [r3, #12]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d001      	beq.n	8004cac <find_volume+0x1f0>
 8004ca8:	230d      	movs	r3, #13
 8004caa:	e180      	b.n	8004fae <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cae:	3338      	adds	r3, #56	@ 0x38
 8004cb0:	3316      	adds	r3, #22
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe fa9e 	bl	80031f4 <ld_word>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <find_volume+0x214>
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	3338      	adds	r3, #56	@ 0x38
 8004cc6:	3324      	adds	r3, #36	@ 0x24
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fe faab 	bl	8003224 <ld_dword>
 8004cce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cd4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce2:	789b      	ldrb	r3, [r3, #2]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d005      	beq.n	8004cf4 <find_volume+0x238>
 8004ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cea:	789b      	ldrb	r3, [r3, #2]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d001      	beq.n	8004cf4 <find_volume+0x238>
 8004cf0:	230d      	movs	r3, #13
 8004cf2:	e15c      	b.n	8004fae <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	789b      	ldrb	r3, [r3, #2]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cfc:	fb02 f303 	mul.w	r3, r2, r3
 8004d00:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	895b      	ldrh	r3, [r3, #10]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <find_volume+0x26c>
 8004d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d18:	895b      	ldrh	r3, [r3, #10]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1e:	895b      	ldrh	r3, [r3, #10]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <find_volume+0x270>
 8004d28:	230d      	movs	r3, #13
 8004d2a:	e140      	b.n	8004fae <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	3338      	adds	r3, #56	@ 0x38
 8004d30:	3311      	adds	r3, #17
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fe fa5e 	bl	80031f4 <ld_word>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d42:	891b      	ldrh	r3, [r3, #8]
 8004d44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d46:	8992      	ldrh	r2, [r2, #12]
 8004d48:	0952      	lsrs	r2, r2, #5
 8004d4a:	b292      	uxth	r2, r2
 8004d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d50:	fb01 f202 	mul.w	r2, r1, r2
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <find_volume+0x2a8>
 8004d5c:	230d      	movs	r3, #13
 8004d5e:	e126      	b.n	8004fae <find_volume+0x4f2>
 8004d60:	2000150c 	.word	0x2000150c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d66:	3338      	adds	r3, #56	@ 0x38
 8004d68:	3313      	adds	r3, #19
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe fa42 	bl	80031f4 <ld_word>
 8004d70:	4603      	mov	r3, r0
 8004d72:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <find_volume+0x2cc>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	3338      	adds	r3, #56	@ 0x38
 8004d7e:	3320      	adds	r3, #32
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe fa4f 	bl	8003224 <ld_dword>
 8004d86:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8a:	3338      	adds	r3, #56	@ 0x38
 8004d8c:	330e      	adds	r3, #14
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe fa30 	bl	80031f4 <ld_word>
 8004d94:	4603      	mov	r3, r0
 8004d96:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004d98:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d101      	bne.n	8004da2 <find_volume+0x2e6>
 8004d9e:	230d      	movs	r3, #13
 8004da0:	e105      	b.n	8004fae <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004da2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da6:	4413      	add	r3, r2
 8004da8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004daa:	8911      	ldrh	r1, [r2, #8]
 8004dac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dae:	8992      	ldrh	r2, [r2, #12]
 8004db0:	0952      	lsrs	r2, r2, #5
 8004db2:	b292      	uxth	r2, r2
 8004db4:	fbb1 f2f2 	udiv	r2, r1, r2
 8004db8:	b292      	uxth	r2, r2
 8004dba:	4413      	add	r3, r2
 8004dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d201      	bcs.n	8004dca <find_volume+0x30e>
 8004dc6:	230d      	movs	r3, #13
 8004dc8:	e0f1      	b.n	8004fae <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004dca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dd2:	8952      	ldrh	r2, [r2, #10]
 8004dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <find_volume+0x328>
 8004de0:	230d      	movs	r3, #13
 8004de2:	e0e4      	b.n	8004fae <find_volume+0x4f2>
		fmt = FS_FAT32;
 8004de4:	2303      	movs	r3, #3
 8004de6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d802      	bhi.n	8004dfa <find_volume+0x33e>
 8004df4:	2302      	movs	r3, #2
 8004df6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d802      	bhi.n	8004e0a <find_volume+0x34e>
 8004e04:	2301      	movs	r3, #1
 8004e06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e10:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8004e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e16:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004e18:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1c:	441a      	add	r2, r3
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e20:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8004e22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	441a      	add	r2, r3
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8004e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d11e      	bne.n	8004e72 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	3338      	adds	r3, #56	@ 0x38
 8004e38:	332a      	adds	r3, #42	@ 0x2a
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe f9da 	bl	80031f4 <ld_word>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <find_volume+0x38e>
 8004e46:	230d      	movs	r3, #13
 8004e48:	e0b1      	b.n	8004fae <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	891b      	ldrh	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <find_volume+0x39a>
 8004e52:	230d      	movs	r3, #13
 8004e54:	e0ab      	b.n	8004fae <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	3338      	adds	r3, #56	@ 0x38
 8004e5a:	332c      	adds	r3, #44	@ 0x2c
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe f9e1 	bl	8003224 <ld_dword>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e66:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e70:	e01f      	b.n	8004eb2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	891b      	ldrh	r3, [r3, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <find_volume+0x3c2>
 8004e7a:	230d      	movs	r3, #13
 8004e7c:	e097      	b.n	8004fae <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e84:	441a      	add	r2, r3
 8004e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e88:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004e8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d103      	bne.n	8004e9a <find_volume+0x3de>
 8004e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	e00a      	b.n	8004eb0 <find_volume+0x3f4>
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	69da      	ldr	r2, [r3, #28]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
 8004ea4:	085a      	lsrs	r2, r3, #1
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004eb0:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	899b      	ldrh	r3, [r3, #12]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ec4:	8989      	ldrh	r1, [r1, #12]
 8004ec6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d201      	bcs.n	8004ed2 <find_volume+0x416>
 8004ece:	230d      	movs	r3, #13
 8004ed0:	e06d      	b.n	8004fae <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	619a      	str	r2, [r3, #24]
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	2280      	movs	r2, #128	@ 0x80
 8004ee6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d149      	bne.n	8004f84 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef2:	3338      	adds	r3, #56	@ 0x38
 8004ef4:	3330      	adds	r3, #48	@ 0x30
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe f97c 	bl	80031f4 <ld_word>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d140      	bne.n	8004f84 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f04:	3301      	adds	r3, #1
 8004f06:	4619      	mov	r1, r3
 8004f08:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f0a:	f7fe fb85 	bl	8003618 <move_window>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d137      	bne.n	8004f84 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8004f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f16:	2200      	movs	r2, #0
 8004f18:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1c:	3338      	adds	r3, #56	@ 0x38
 8004f1e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe f966 	bl	80031f4 <ld_word>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d127      	bne.n	8004f84 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	3338      	adds	r3, #56	@ 0x38
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f973 	bl	8003224 <ld_dword>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb8 <find_volume+0x4fc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d11e      	bne.n	8004f84 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f48:	3338      	adds	r3, #56	@ 0x38
 8004f4a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7fe f968 	bl	8003224 <ld_dword>
 8004f54:	4603      	mov	r3, r0
 8004f56:	4a19      	ldr	r2, [pc, #100]	@ (8004fbc <find_volume+0x500>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d113      	bne.n	8004f84 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5e:	3338      	adds	r3, #56	@ 0x38
 8004f60:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe f95d 	bl	8003224 <ld_dword>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	3338      	adds	r3, #56	@ 0x38
 8004f74:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe f953 	bl	8003224 <ld_dword>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f82:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004f8a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc0 <find_volume+0x504>)
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	3301      	adds	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <find_volume+0x504>)
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	4b09      	ldr	r3, [pc, #36]	@ (8004fc0 <find_volume+0x504>)
 8004f9a:	881a      	ldrh	r2, [r3, #0]
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	4a08      	ldr	r2, [pc, #32]	@ (8004fc4 <find_volume+0x508>)
 8004fa4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004fa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004fa8:	f7fe face 	bl	8003548 <clear_lock>
#endif
	return FR_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3758      	adds	r7, #88	@ 0x58
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	41615252 	.word	0x41615252
 8004fbc:	61417272 	.word	0x61417272
 8004fc0:	20001510 	.word	0x20001510
 8004fc4:	20001534 	.word	0x20001534

08004fc8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004fd2:	2309      	movs	r3, #9
 8004fd4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01c      	beq.n	8005016 <validate+0x4e>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d018      	beq.n	8005016 <validate+0x4e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d013      	beq.n	8005016 <validate+0x4e>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	889a      	ldrh	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	88db      	ldrh	r3, [r3, #6]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d10c      	bne.n	8005016 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe f856 	bl	80030b4 <disk_status>
 8005008:	4603      	mov	r3, r0
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <validate+0x4e>
			res = FR_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <validate+0x5a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	e000      	b.n	8005024 <validate+0x5c>
 8005022:	2300      	movs	r3, #0
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	6013      	str	r3, [r2, #0]
	return res;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	4613      	mov	r3, r2
 8005040:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005046:	f107 0310 	add.w	r3, r7, #16
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff fc9c 	bl	8004988 <get_ldnumber>
 8005050:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	da01      	bge.n	800505c <f_mount+0x28>
 8005058:	230b      	movs	r3, #11
 800505a:	e02b      	b.n	80050b4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800505c:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <f_mount+0x88>)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005064:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d005      	beq.n	8005078 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800506c:	69b8      	ldr	r0, [r7, #24]
 800506e:	f7fe fa6b 	bl	8003548 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	490d      	ldr	r1, [pc, #52]	@ (80050bc <f_mount+0x88>)
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <f_mount+0x66>
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <f_mount+0x6a>
 800509a:	2300      	movs	r3, #0
 800509c:	e00a      	b.n	80050b4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800509e:	f107 010c 	add.w	r1, r7, #12
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	2200      	movs	r2, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fd07 	bl	8004abc <find_volume>
 80050ae:	4603      	mov	r3, r0
 80050b0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	2000150c 	.word	0x2000150c

080050c0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <f_opendir+0x14>
 80050d0:	2309      	movs	r3, #9
 80050d2:	e064      	b.n	800519e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80050d8:	f107 010c 	add.w	r1, r7, #12
 80050dc:	463b      	mov	r3, r7
 80050de:	2200      	movs	r2, #0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff fceb 	bl	8004abc <find_volume>
 80050e6:	4603      	mov	r3, r0
 80050e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80050ea:	7dfb      	ldrb	r3, [r7, #23]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d14f      	bne.n	8005190 <f_opendir+0xd0>
		obj->fs = fs;
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	4619      	mov	r1, r3
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff fbce 	bl	800489c <follow_path>
 8005100:	4603      	mov	r3, r0
 8005102:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d13d      	bne.n	8005186 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005110:	b25b      	sxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	db12      	blt.n	800513c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	799b      	ldrb	r3, [r3, #6]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f7fe fea4 	bl	8003e78 <ld_clust>
 8005130:	4602      	mov	r2, r0
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	e001      	b.n	800513c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8005138:	2305      	movs	r3, #5
 800513a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d121      	bne.n	8005186 <f_opendir+0xc6>
				obj->id = fs->id;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	88da      	ldrh	r2, [r3, #6]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800514a:	2100      	movs	r1, #0
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7fe fd34 	bl	8003bba <dir_sdi>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d114      	bne.n	8005186 <f_opendir+0xc6>
					if (obj->sclust) {
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00d      	beq.n	8005180 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8005164:	2100      	movs	r1, #0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fe f924 	bl	80033b4 <inc_lock>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d105      	bne.n	8005186 <f_opendir+0xc6>
 800517a:	2312      	movs	r3, #18
 800517c:	75fb      	strb	r3, [r7, #23]
 800517e:	e002      	b.n	8005186 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005186:	7dfb      	ldrb	r3, [r7, #23]
 8005188:	2b04      	cmp	r3, #4
 800518a:	d101      	bne.n	8005190 <f_opendir+0xd0>
 800518c:	2305      	movs	r3, #5
 800518e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <f_opendir+0xdc>
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800519c:	7dfb      	ldrb	r3, [r7, #23]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f107 0208 	add.w	r2, r7, #8
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7ff ff06 	bl	8004fc8 <validate>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d110      	bne.n	80051e8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d006      	beq.n	80051dc <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe f97c 	bl	80034d0 <dec_lock>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f107 0208 	add.w	r2, r7, #8
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fedf 	bl	8004fc8 <validate>
 800520a:	4603      	mov	r3, r0
 800520c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800520e:	7bfb      	ldrb	r3, [r7, #15]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d126      	bne.n	8005262 <f_readdir+0x70>
		if (!fno) {
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800521a:	2100      	movs	r1, #0
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7fe fccc 	bl	8003bba <dir_sdi>
 8005222:	4603      	mov	r3, r0
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e01c      	b.n	8005262 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8005228:	2100      	movs	r1, #0
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fe ff39 	bl	80040a2 <dir_read>
 8005230:	4603      	mov	r3, r0
 8005232:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b04      	cmp	r3, #4
 8005238:	d101      	bne.n	800523e <f_readdir+0x4c>
 800523a:	2300      	movs	r3, #0
 800523c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10e      	bne.n	8005262 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7ff f892 	bl	8004370 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800524c:	2100      	movs	r1, #0
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fe fd3c 	bl	8003ccc <dir_next>
 8005254:	4603      	mov	r3, r0
 8005256:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b04      	cmp	r3, #4
 800525c:	d101      	bne.n	8005262 <f_readdir+0x70>
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8005262:	7bfb      	ldrb	r3, [r7, #15]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005282:	4b1f      	ldr	r3, [pc, #124]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 8005284:	7a5b      	ldrb	r3, [r3, #9]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	d131      	bne.n	80052f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800528c:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 800528e:	7a5b      	ldrb	r3, [r3, #9]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 8005296:	2100      	movs	r1, #0
 8005298:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800529a:	4b19      	ldr	r3, [pc, #100]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 800529c:	7a5b      	ldrb	r3, [r3, #9]
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80052aa:	4b15      	ldr	r3, [pc, #84]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 80052ac:	7a5b      	ldrb	r3, [r3, #9]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 80052b4:	4413      	add	r3, r2
 80052b6:	79fa      	ldrb	r2, [r7, #7]
 80052b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80052ba:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 80052bc:	7a5b      	ldrb	r3, [r3, #9]
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	b2d1      	uxtb	r1, r2
 80052c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005300 <FATFS_LinkDriverEx+0x94>)
 80052c6:	7251      	strb	r1, [r2, #9]
 80052c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80052ca:	7dbb      	ldrb	r3, [r7, #22]
 80052cc:	3330      	adds	r3, #48	@ 0x30
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	3301      	adds	r3, #1
 80052d8:	223a      	movs	r2, #58	@ 0x3a
 80052da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	3302      	adds	r3, #2
 80052e0:	222f      	movs	r2, #47	@ 0x2f
 80052e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	3303      	adds	r3, #3
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80052f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20001734 	.word	0x20001734

08005304 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800530e:	2200      	movs	r2, #0
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff ffaa 	bl	800526c <FATFS_LinkDriverEx>
 8005318:	4603      	mov	r3, r0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b7f      	cmp	r3, #127	@ 0x7f
 8005334:	d802      	bhi.n	800533c <ff_convert+0x18>
		c = chr;
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	81fb      	strh	r3, [r7, #14]
 800533a:	e025      	b.n	8005388 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	2bff      	cmp	r3, #255	@ 0xff
 8005346:	d805      	bhi.n	8005354 <ff_convert+0x30>
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	3b80      	subs	r3, #128	@ 0x80
 800534c:	4a12      	ldr	r2, [pc, #72]	@ (8005398 <ff_convert+0x74>)
 800534e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005352:	e000      	b.n	8005356 <ff_convert+0x32>
 8005354:	2300      	movs	r3, #0
 8005356:	81fb      	strh	r3, [r7, #14]
 8005358:	e016      	b.n	8005388 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800535a:	2300      	movs	r3, #0
 800535c:	81fb      	strh	r3, [r7, #14]
 800535e:	e009      	b.n	8005374 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8005360:	89fb      	ldrh	r3, [r7, #14]
 8005362:	4a0d      	ldr	r2, [pc, #52]	@ (8005398 <ff_convert+0x74>)
 8005364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	429a      	cmp	r2, r3
 800536c:	d006      	beq.n	800537c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800536e:	89fb      	ldrh	r3, [r7, #14]
 8005370:	3301      	adds	r3, #1
 8005372:	81fb      	strh	r3, [r7, #14]
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	2b7f      	cmp	r3, #127	@ 0x7f
 8005378:	d9f2      	bls.n	8005360 <ff_convert+0x3c>
 800537a:	e000      	b.n	800537e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800537c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800537e:	89fb      	ldrh	r3, [r7, #14]
 8005380:	3380      	adds	r3, #128	@ 0x80
 8005382:	b29b      	uxth	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005388:	89fb      	ldrh	r3, [r7, #14]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	0800609c 	.word	0x0800609c

0800539c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	4603      	mov	r3, r0
 80053a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ac:	d201      	bcs.n	80053b2 <ff_wtoupper+0x16>
 80053ae:	4b3e      	ldr	r3, [pc, #248]	@ (80054a8 <ff_wtoupper+0x10c>)
 80053b0:	e000      	b.n	80053b4 <ff_wtoupper+0x18>
 80053b2:	4b3e      	ldr	r3, [pc, #248]	@ (80054ac <ff_wtoupper+0x110>)
 80053b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	1c9a      	adds	r2, r3, #2
 80053ba:	617a      	str	r2, [r7, #20]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80053c0:	8a7b      	ldrh	r3, [r7, #18]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d068      	beq.n	8005498 <ff_wtoupper+0xfc>
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	8a7b      	ldrh	r3, [r7, #18]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d364      	bcc.n	8005498 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	1c9a      	adds	r2, r3, #2
 80053d2:	617a      	str	r2, [r7, #20]
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	823b      	strh	r3, [r7, #16]
 80053d8:	8a3b      	ldrh	r3, [r7, #16]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	81fb      	strh	r3, [r7, #14]
 80053de:	8a3b      	ldrh	r3, [r7, #16]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80053e4:	88fa      	ldrh	r2, [r7, #6]
 80053e6:	8a79      	ldrh	r1, [r7, #18]
 80053e8:	8a3b      	ldrh	r3, [r7, #16]
 80053ea:	440b      	add	r3, r1
 80053ec:	429a      	cmp	r2, r3
 80053ee:	da49      	bge.n	8005484 <ff_wtoupper+0xe8>
			switch (cmd) {
 80053f0:	89fb      	ldrh	r3, [r7, #14]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d84f      	bhi.n	8005496 <ff_wtoupper+0xfa>
 80053f6:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <ff_wtoupper+0x60>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005433 	.word	0x08005433
 8005404:	08005449 	.word	0x08005449
 8005408:	08005451 	.word	0x08005451
 800540c:	08005459 	.word	0x08005459
 8005410:	08005461 	.word	0x08005461
 8005414:	08005469 	.word	0x08005469
 8005418:	08005471 	.word	0x08005471
 800541c:	08005479 	.word	0x08005479
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8005420:	88fa      	ldrh	r2, [r7, #6]
 8005422:	8a7b      	ldrh	r3, [r7, #18]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4413      	add	r3, r2
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	80fb      	strh	r3, [r7, #6]
 8005430:	e027      	b.n	8005482 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	8a7b      	ldrh	r3, [r7, #18]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	b29b      	uxth	r3, r3
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	88fa      	ldrh	r2, [r7, #6]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	80fb      	strh	r3, [r7, #6]
 8005446:	e01c      	b.n	8005482 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	3b10      	subs	r3, #16
 800544c:	80fb      	strh	r3, [r7, #6]
 800544e:	e018      	b.n	8005482 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	3b20      	subs	r3, #32
 8005454:	80fb      	strh	r3, [r7, #6]
 8005456:	e014      	b.n	8005482 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8005458:	88fb      	ldrh	r3, [r7, #6]
 800545a:	3b30      	subs	r3, #48	@ 0x30
 800545c:	80fb      	strh	r3, [r7, #6]
 800545e:	e010      	b.n	8005482 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	3b1a      	subs	r3, #26
 8005464:	80fb      	strh	r3, [r7, #6]
 8005466:	e00c      	b.n	8005482 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	3308      	adds	r3, #8
 800546c:	80fb      	strh	r3, [r7, #6]
 800546e:	e008      	b.n	8005482 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	3b50      	subs	r3, #80	@ 0x50
 8005474:	80fb      	strh	r3, [r7, #6]
 8005476:	e004      	b.n	8005482 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800547e:	80fb      	strh	r3, [r7, #6]
 8005480:	bf00      	nop
			}
			break;
 8005482:	e008      	b.n	8005496 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8005484:	89fb      	ldrh	r3, [r7, #14]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d195      	bne.n	80053b6 <ff_wtoupper+0x1a>
 800548a:	8a3b      	ldrh	r3, [r7, #16]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8005494:	e78f      	b.n	80053b6 <ff_wtoupper+0x1a>
			break;
 8005496:	bf00      	nop
	}

	return chr;
 8005498:	88fb      	ldrh	r3, [r7, #6]
}
 800549a:	4618      	mov	r0, r3
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	0800619c 	.word	0x0800619c
 80054ac:	08006390 	.word	0x08006390

080054b0 <siprintf>:
 80054b0:	b40e      	push	{r1, r2, r3}
 80054b2:	b500      	push	{lr}
 80054b4:	b09c      	sub	sp, #112	@ 0x70
 80054b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80054b8:	9002      	str	r0, [sp, #8]
 80054ba:	9006      	str	r0, [sp, #24]
 80054bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80054c0:	4809      	ldr	r0, [pc, #36]	@ (80054e8 <siprintf+0x38>)
 80054c2:	9107      	str	r1, [sp, #28]
 80054c4:	9104      	str	r1, [sp, #16]
 80054c6:	4909      	ldr	r1, [pc, #36]	@ (80054ec <siprintf+0x3c>)
 80054c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054cc:	9105      	str	r1, [sp, #20]
 80054ce:	6800      	ldr	r0, [r0, #0]
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	a902      	add	r1, sp, #8
 80054d4:	f000 f99c 	bl	8005810 <_svfiprintf_r>
 80054d8:	9b02      	ldr	r3, [sp, #8]
 80054da:	2200      	movs	r2, #0
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	b01c      	add	sp, #112	@ 0x70
 80054e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e4:	b003      	add	sp, #12
 80054e6:	4770      	bx	lr
 80054e8:	20000024 	.word	0x20000024
 80054ec:	ffff0208 	.word	0xffff0208

080054f0 <memset>:
 80054f0:	4402      	add	r2, r0
 80054f2:	4603      	mov	r3, r0
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d100      	bne.n	80054fa <memset+0xa>
 80054f8:	4770      	bx	lr
 80054fa:	f803 1b01 	strb.w	r1, [r3], #1
 80054fe:	e7f9      	b.n	80054f4 <memset+0x4>

08005500 <__errno>:
 8005500:	4b01      	ldr	r3, [pc, #4]	@ (8005508 <__errno+0x8>)
 8005502:	6818      	ldr	r0, [r3, #0]
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	20000024 	.word	0x20000024

0800550c <__libc_init_array>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	4d0d      	ldr	r5, [pc, #52]	@ (8005544 <__libc_init_array+0x38>)
 8005510:	4c0d      	ldr	r4, [pc, #52]	@ (8005548 <__libc_init_array+0x3c>)
 8005512:	1b64      	subs	r4, r4, r5
 8005514:	10a4      	asrs	r4, r4, #2
 8005516:	2600      	movs	r6, #0
 8005518:	42a6      	cmp	r6, r4
 800551a:	d109      	bne.n	8005530 <__libc_init_array+0x24>
 800551c:	4d0b      	ldr	r5, [pc, #44]	@ (800554c <__libc_init_array+0x40>)
 800551e:	4c0c      	ldr	r4, [pc, #48]	@ (8005550 <__libc_init_array+0x44>)
 8005520:	f000 fc6e 	bl	8005e00 <_init>
 8005524:	1b64      	subs	r4, r4, r5
 8005526:	10a4      	asrs	r4, r4, #2
 8005528:	2600      	movs	r6, #0
 800552a:	42a6      	cmp	r6, r4
 800552c:	d105      	bne.n	800553a <__libc_init_array+0x2e>
 800552e:	bd70      	pop	{r4, r5, r6, pc}
 8005530:	f855 3b04 	ldr.w	r3, [r5], #4
 8005534:	4798      	blx	r3
 8005536:	3601      	adds	r6, #1
 8005538:	e7ee      	b.n	8005518 <__libc_init_array+0xc>
 800553a:	f855 3b04 	ldr.w	r3, [r5], #4
 800553e:	4798      	blx	r3
 8005540:	3601      	adds	r6, #1
 8005542:	e7f2      	b.n	800552a <__libc_init_array+0x1e>
 8005544:	08006488 	.word	0x08006488
 8005548:	08006488 	.word	0x08006488
 800554c:	08006488 	.word	0x08006488
 8005550:	0800648c 	.word	0x0800648c

08005554 <__retarget_lock_acquire_recursive>:
 8005554:	4770      	bx	lr

08005556 <__retarget_lock_release_recursive>:
 8005556:	4770      	bx	lr

08005558 <strcpy>:
 8005558:	4603      	mov	r3, r0
 800555a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800555e:	f803 2b01 	strb.w	r2, [r3], #1
 8005562:	2a00      	cmp	r2, #0
 8005564:	d1f9      	bne.n	800555a <strcpy+0x2>
 8005566:	4770      	bx	lr

08005568 <_free_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4605      	mov	r5, r0
 800556c:	2900      	cmp	r1, #0
 800556e:	d041      	beq.n	80055f4 <_free_r+0x8c>
 8005570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005574:	1f0c      	subs	r4, r1, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	bfb8      	it	lt
 800557a:	18e4      	addlt	r4, r4, r3
 800557c:	f000 f8e0 	bl	8005740 <__malloc_lock>
 8005580:	4a1d      	ldr	r2, [pc, #116]	@ (80055f8 <_free_r+0x90>)
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	b933      	cbnz	r3, 8005594 <_free_r+0x2c>
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6014      	str	r4, [r2, #0]
 800558a:	4628      	mov	r0, r5
 800558c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005590:	f000 b8dc 	b.w	800574c <__malloc_unlock>
 8005594:	42a3      	cmp	r3, r4
 8005596:	d908      	bls.n	80055aa <_free_r+0x42>
 8005598:	6820      	ldr	r0, [r4, #0]
 800559a:	1821      	adds	r1, r4, r0
 800559c:	428b      	cmp	r3, r1
 800559e:	bf01      	itttt	eq
 80055a0:	6819      	ldreq	r1, [r3, #0]
 80055a2:	685b      	ldreq	r3, [r3, #4]
 80055a4:	1809      	addeq	r1, r1, r0
 80055a6:	6021      	streq	r1, [r4, #0]
 80055a8:	e7ed      	b.n	8005586 <_free_r+0x1e>
 80055aa:	461a      	mov	r2, r3
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	b10b      	cbz	r3, 80055b4 <_free_r+0x4c>
 80055b0:	42a3      	cmp	r3, r4
 80055b2:	d9fa      	bls.n	80055aa <_free_r+0x42>
 80055b4:	6811      	ldr	r1, [r2, #0]
 80055b6:	1850      	adds	r0, r2, r1
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d10b      	bne.n	80055d4 <_free_r+0x6c>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	4401      	add	r1, r0
 80055c0:	1850      	adds	r0, r2, r1
 80055c2:	4283      	cmp	r3, r0
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	d1e0      	bne.n	800558a <_free_r+0x22>
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	6053      	str	r3, [r2, #4]
 80055ce:	4408      	add	r0, r1
 80055d0:	6010      	str	r0, [r2, #0]
 80055d2:	e7da      	b.n	800558a <_free_r+0x22>
 80055d4:	d902      	bls.n	80055dc <_free_r+0x74>
 80055d6:	230c      	movs	r3, #12
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	e7d6      	b.n	800558a <_free_r+0x22>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	1821      	adds	r1, r4, r0
 80055e0:	428b      	cmp	r3, r1
 80055e2:	bf04      	itt	eq
 80055e4:	6819      	ldreq	r1, [r3, #0]
 80055e6:	685b      	ldreq	r3, [r3, #4]
 80055e8:	6063      	str	r3, [r4, #4]
 80055ea:	bf04      	itt	eq
 80055ec:	1809      	addeq	r1, r1, r0
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	6054      	str	r4, [r2, #4]
 80055f2:	e7ca      	b.n	800558a <_free_r+0x22>
 80055f4:	bd38      	pop	{r3, r4, r5, pc}
 80055f6:	bf00      	nop
 80055f8:	20001884 	.word	0x20001884

080055fc <sbrk_aligned>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	4e0f      	ldr	r6, [pc, #60]	@ (800563c <sbrk_aligned+0x40>)
 8005600:	460c      	mov	r4, r1
 8005602:	6831      	ldr	r1, [r6, #0]
 8005604:	4605      	mov	r5, r0
 8005606:	b911      	cbnz	r1, 800560e <sbrk_aligned+0x12>
 8005608:	f000 fba6 	bl	8005d58 <_sbrk_r>
 800560c:	6030      	str	r0, [r6, #0]
 800560e:	4621      	mov	r1, r4
 8005610:	4628      	mov	r0, r5
 8005612:	f000 fba1 	bl	8005d58 <_sbrk_r>
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	d103      	bne.n	8005622 <sbrk_aligned+0x26>
 800561a:	f04f 34ff 	mov.w	r4, #4294967295
 800561e:	4620      	mov	r0, r4
 8005620:	bd70      	pop	{r4, r5, r6, pc}
 8005622:	1cc4      	adds	r4, r0, #3
 8005624:	f024 0403 	bic.w	r4, r4, #3
 8005628:	42a0      	cmp	r0, r4
 800562a:	d0f8      	beq.n	800561e <sbrk_aligned+0x22>
 800562c:	1a21      	subs	r1, r4, r0
 800562e:	4628      	mov	r0, r5
 8005630:	f000 fb92 	bl	8005d58 <_sbrk_r>
 8005634:	3001      	adds	r0, #1
 8005636:	d1f2      	bne.n	800561e <sbrk_aligned+0x22>
 8005638:	e7ef      	b.n	800561a <sbrk_aligned+0x1e>
 800563a:	bf00      	nop
 800563c:	20001880 	.word	0x20001880

08005640 <_malloc_r>:
 8005640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005644:	1ccd      	adds	r5, r1, #3
 8005646:	f025 0503 	bic.w	r5, r5, #3
 800564a:	3508      	adds	r5, #8
 800564c:	2d0c      	cmp	r5, #12
 800564e:	bf38      	it	cc
 8005650:	250c      	movcc	r5, #12
 8005652:	2d00      	cmp	r5, #0
 8005654:	4606      	mov	r6, r0
 8005656:	db01      	blt.n	800565c <_malloc_r+0x1c>
 8005658:	42a9      	cmp	r1, r5
 800565a:	d904      	bls.n	8005666 <_malloc_r+0x26>
 800565c:	230c      	movs	r3, #12
 800565e:	6033      	str	r3, [r6, #0]
 8005660:	2000      	movs	r0, #0
 8005662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800573c <_malloc_r+0xfc>
 800566a:	f000 f869 	bl	8005740 <__malloc_lock>
 800566e:	f8d8 3000 	ldr.w	r3, [r8]
 8005672:	461c      	mov	r4, r3
 8005674:	bb44      	cbnz	r4, 80056c8 <_malloc_r+0x88>
 8005676:	4629      	mov	r1, r5
 8005678:	4630      	mov	r0, r6
 800567a:	f7ff ffbf 	bl	80055fc <sbrk_aligned>
 800567e:	1c43      	adds	r3, r0, #1
 8005680:	4604      	mov	r4, r0
 8005682:	d158      	bne.n	8005736 <_malloc_r+0xf6>
 8005684:	f8d8 4000 	ldr.w	r4, [r8]
 8005688:	4627      	mov	r7, r4
 800568a:	2f00      	cmp	r7, #0
 800568c:	d143      	bne.n	8005716 <_malloc_r+0xd6>
 800568e:	2c00      	cmp	r4, #0
 8005690:	d04b      	beq.n	800572a <_malloc_r+0xea>
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	4639      	mov	r1, r7
 8005696:	4630      	mov	r0, r6
 8005698:	eb04 0903 	add.w	r9, r4, r3
 800569c:	f000 fb5c 	bl	8005d58 <_sbrk_r>
 80056a0:	4581      	cmp	r9, r0
 80056a2:	d142      	bne.n	800572a <_malloc_r+0xea>
 80056a4:	6821      	ldr	r1, [r4, #0]
 80056a6:	1a6d      	subs	r5, r5, r1
 80056a8:	4629      	mov	r1, r5
 80056aa:	4630      	mov	r0, r6
 80056ac:	f7ff ffa6 	bl	80055fc <sbrk_aligned>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d03a      	beq.n	800572a <_malloc_r+0xea>
 80056b4:	6823      	ldr	r3, [r4, #0]
 80056b6:	442b      	add	r3, r5
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	f8d8 3000 	ldr.w	r3, [r8]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	bb62      	cbnz	r2, 800571c <_malloc_r+0xdc>
 80056c2:	f8c8 7000 	str.w	r7, [r8]
 80056c6:	e00f      	b.n	80056e8 <_malloc_r+0xa8>
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	1b52      	subs	r2, r2, r5
 80056cc:	d420      	bmi.n	8005710 <_malloc_r+0xd0>
 80056ce:	2a0b      	cmp	r2, #11
 80056d0:	d917      	bls.n	8005702 <_malloc_r+0xc2>
 80056d2:	1961      	adds	r1, r4, r5
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	6025      	str	r5, [r4, #0]
 80056d8:	bf18      	it	ne
 80056da:	6059      	strne	r1, [r3, #4]
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	bf08      	it	eq
 80056e0:	f8c8 1000 	streq.w	r1, [r8]
 80056e4:	5162      	str	r2, [r4, r5]
 80056e6:	604b      	str	r3, [r1, #4]
 80056e8:	4630      	mov	r0, r6
 80056ea:	f000 f82f 	bl	800574c <__malloc_unlock>
 80056ee:	f104 000b 	add.w	r0, r4, #11
 80056f2:	1d23      	adds	r3, r4, #4
 80056f4:	f020 0007 	bic.w	r0, r0, #7
 80056f8:	1ac2      	subs	r2, r0, r3
 80056fa:	bf1c      	itt	ne
 80056fc:	1a1b      	subne	r3, r3, r0
 80056fe:	50a3      	strne	r3, [r4, r2]
 8005700:	e7af      	b.n	8005662 <_malloc_r+0x22>
 8005702:	6862      	ldr	r2, [r4, #4]
 8005704:	42a3      	cmp	r3, r4
 8005706:	bf0c      	ite	eq
 8005708:	f8c8 2000 	streq.w	r2, [r8]
 800570c:	605a      	strne	r2, [r3, #4]
 800570e:	e7eb      	b.n	80056e8 <_malloc_r+0xa8>
 8005710:	4623      	mov	r3, r4
 8005712:	6864      	ldr	r4, [r4, #4]
 8005714:	e7ae      	b.n	8005674 <_malloc_r+0x34>
 8005716:	463c      	mov	r4, r7
 8005718:	687f      	ldr	r7, [r7, #4]
 800571a:	e7b6      	b.n	800568a <_malloc_r+0x4a>
 800571c:	461a      	mov	r2, r3
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	42a3      	cmp	r3, r4
 8005722:	d1fb      	bne.n	800571c <_malloc_r+0xdc>
 8005724:	2300      	movs	r3, #0
 8005726:	6053      	str	r3, [r2, #4]
 8005728:	e7de      	b.n	80056e8 <_malloc_r+0xa8>
 800572a:	230c      	movs	r3, #12
 800572c:	6033      	str	r3, [r6, #0]
 800572e:	4630      	mov	r0, r6
 8005730:	f000 f80c 	bl	800574c <__malloc_unlock>
 8005734:	e794      	b.n	8005660 <_malloc_r+0x20>
 8005736:	6005      	str	r5, [r0, #0]
 8005738:	e7d6      	b.n	80056e8 <_malloc_r+0xa8>
 800573a:	bf00      	nop
 800573c:	20001884 	.word	0x20001884

08005740 <__malloc_lock>:
 8005740:	4801      	ldr	r0, [pc, #4]	@ (8005748 <__malloc_lock+0x8>)
 8005742:	f7ff bf07 	b.w	8005554 <__retarget_lock_acquire_recursive>
 8005746:	bf00      	nop
 8005748:	2000187c 	.word	0x2000187c

0800574c <__malloc_unlock>:
 800574c:	4801      	ldr	r0, [pc, #4]	@ (8005754 <__malloc_unlock+0x8>)
 800574e:	f7ff bf02 	b.w	8005556 <__retarget_lock_release_recursive>
 8005752:	bf00      	nop
 8005754:	2000187c 	.word	0x2000187c

08005758 <__ssputs_r>:
 8005758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800575c:	688e      	ldr	r6, [r1, #8]
 800575e:	461f      	mov	r7, r3
 8005760:	42be      	cmp	r6, r7
 8005762:	680b      	ldr	r3, [r1, #0]
 8005764:	4682      	mov	sl, r0
 8005766:	460c      	mov	r4, r1
 8005768:	4690      	mov	r8, r2
 800576a:	d82d      	bhi.n	80057c8 <__ssputs_r+0x70>
 800576c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005770:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005774:	d026      	beq.n	80057c4 <__ssputs_r+0x6c>
 8005776:	6965      	ldr	r5, [r4, #20]
 8005778:	6909      	ldr	r1, [r1, #16]
 800577a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800577e:	eba3 0901 	sub.w	r9, r3, r1
 8005782:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005786:	1c7b      	adds	r3, r7, #1
 8005788:	444b      	add	r3, r9
 800578a:	106d      	asrs	r5, r5, #1
 800578c:	429d      	cmp	r5, r3
 800578e:	bf38      	it	cc
 8005790:	461d      	movcc	r5, r3
 8005792:	0553      	lsls	r3, r2, #21
 8005794:	d527      	bpl.n	80057e6 <__ssputs_r+0x8e>
 8005796:	4629      	mov	r1, r5
 8005798:	f7ff ff52 	bl	8005640 <_malloc_r>
 800579c:	4606      	mov	r6, r0
 800579e:	b360      	cbz	r0, 80057fa <__ssputs_r+0xa2>
 80057a0:	6921      	ldr	r1, [r4, #16]
 80057a2:	464a      	mov	r2, r9
 80057a4:	f000 fae8 	bl	8005d78 <memcpy>
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	6126      	str	r6, [r4, #16]
 80057b6:	6165      	str	r5, [r4, #20]
 80057b8:	444e      	add	r6, r9
 80057ba:	eba5 0509 	sub.w	r5, r5, r9
 80057be:	6026      	str	r6, [r4, #0]
 80057c0:	60a5      	str	r5, [r4, #8]
 80057c2:	463e      	mov	r6, r7
 80057c4:	42be      	cmp	r6, r7
 80057c6:	d900      	bls.n	80057ca <__ssputs_r+0x72>
 80057c8:	463e      	mov	r6, r7
 80057ca:	6820      	ldr	r0, [r4, #0]
 80057cc:	4632      	mov	r2, r6
 80057ce:	4641      	mov	r1, r8
 80057d0:	f000 faa8 	bl	8005d24 <memmove>
 80057d4:	68a3      	ldr	r3, [r4, #8]
 80057d6:	1b9b      	subs	r3, r3, r6
 80057d8:	60a3      	str	r3, [r4, #8]
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	4433      	add	r3, r6
 80057de:	6023      	str	r3, [r4, #0]
 80057e0:	2000      	movs	r0, #0
 80057e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e6:	462a      	mov	r2, r5
 80057e8:	f000 fad4 	bl	8005d94 <_realloc_r>
 80057ec:	4606      	mov	r6, r0
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d1e0      	bne.n	80057b4 <__ssputs_r+0x5c>
 80057f2:	6921      	ldr	r1, [r4, #16]
 80057f4:	4650      	mov	r0, sl
 80057f6:	f7ff feb7 	bl	8005568 <_free_r>
 80057fa:	230c      	movs	r3, #12
 80057fc:	f8ca 3000 	str.w	r3, [sl]
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	f04f 30ff 	mov.w	r0, #4294967295
 800580c:	e7e9      	b.n	80057e2 <__ssputs_r+0x8a>
	...

08005810 <_svfiprintf_r>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	4698      	mov	r8, r3
 8005816:	898b      	ldrh	r3, [r1, #12]
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	b09d      	sub	sp, #116	@ 0x74
 800581c:	4607      	mov	r7, r0
 800581e:	460d      	mov	r5, r1
 8005820:	4614      	mov	r4, r2
 8005822:	d510      	bpl.n	8005846 <_svfiprintf_r+0x36>
 8005824:	690b      	ldr	r3, [r1, #16]
 8005826:	b973      	cbnz	r3, 8005846 <_svfiprintf_r+0x36>
 8005828:	2140      	movs	r1, #64	@ 0x40
 800582a:	f7ff ff09 	bl	8005640 <_malloc_r>
 800582e:	6028      	str	r0, [r5, #0]
 8005830:	6128      	str	r0, [r5, #16]
 8005832:	b930      	cbnz	r0, 8005842 <_svfiprintf_r+0x32>
 8005834:	230c      	movs	r3, #12
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295
 800583c:	b01d      	add	sp, #116	@ 0x74
 800583e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005842:	2340      	movs	r3, #64	@ 0x40
 8005844:	616b      	str	r3, [r5, #20]
 8005846:	2300      	movs	r3, #0
 8005848:	9309      	str	r3, [sp, #36]	@ 0x24
 800584a:	2320      	movs	r3, #32
 800584c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005850:	f8cd 800c 	str.w	r8, [sp, #12]
 8005854:	2330      	movs	r3, #48	@ 0x30
 8005856:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059f4 <_svfiprintf_r+0x1e4>
 800585a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800585e:	f04f 0901 	mov.w	r9, #1
 8005862:	4623      	mov	r3, r4
 8005864:	469a      	mov	sl, r3
 8005866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800586a:	b10a      	cbz	r2, 8005870 <_svfiprintf_r+0x60>
 800586c:	2a25      	cmp	r2, #37	@ 0x25
 800586e:	d1f9      	bne.n	8005864 <_svfiprintf_r+0x54>
 8005870:	ebba 0b04 	subs.w	fp, sl, r4
 8005874:	d00b      	beq.n	800588e <_svfiprintf_r+0x7e>
 8005876:	465b      	mov	r3, fp
 8005878:	4622      	mov	r2, r4
 800587a:	4629      	mov	r1, r5
 800587c:	4638      	mov	r0, r7
 800587e:	f7ff ff6b 	bl	8005758 <__ssputs_r>
 8005882:	3001      	adds	r0, #1
 8005884:	f000 80a7 	beq.w	80059d6 <_svfiprintf_r+0x1c6>
 8005888:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800588a:	445a      	add	r2, fp
 800588c:	9209      	str	r2, [sp, #36]	@ 0x24
 800588e:	f89a 3000 	ldrb.w	r3, [sl]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 809f 	beq.w	80059d6 <_svfiprintf_r+0x1c6>
 8005898:	2300      	movs	r3, #0
 800589a:	f04f 32ff 	mov.w	r2, #4294967295
 800589e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058a2:	f10a 0a01 	add.w	sl, sl, #1
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	9307      	str	r3, [sp, #28]
 80058aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80058b0:	4654      	mov	r4, sl
 80058b2:	2205      	movs	r2, #5
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	484e      	ldr	r0, [pc, #312]	@ (80059f4 <_svfiprintf_r+0x1e4>)
 80058ba:	f7fa fca1 	bl	8000200 <memchr>
 80058be:	9a04      	ldr	r2, [sp, #16]
 80058c0:	b9d8      	cbnz	r0, 80058fa <_svfiprintf_r+0xea>
 80058c2:	06d0      	lsls	r0, r2, #27
 80058c4:	bf44      	itt	mi
 80058c6:	2320      	movmi	r3, #32
 80058c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058cc:	0711      	lsls	r1, r2, #28
 80058ce:	bf44      	itt	mi
 80058d0:	232b      	movmi	r3, #43	@ 0x2b
 80058d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058d6:	f89a 3000 	ldrb.w	r3, [sl]
 80058da:	2b2a      	cmp	r3, #42	@ 0x2a
 80058dc:	d015      	beq.n	800590a <_svfiprintf_r+0xfa>
 80058de:	9a07      	ldr	r2, [sp, #28]
 80058e0:	4654      	mov	r4, sl
 80058e2:	2000      	movs	r0, #0
 80058e4:	f04f 0c0a 	mov.w	ip, #10
 80058e8:	4621      	mov	r1, r4
 80058ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ee:	3b30      	subs	r3, #48	@ 0x30
 80058f0:	2b09      	cmp	r3, #9
 80058f2:	d94b      	bls.n	800598c <_svfiprintf_r+0x17c>
 80058f4:	b1b0      	cbz	r0, 8005924 <_svfiprintf_r+0x114>
 80058f6:	9207      	str	r2, [sp, #28]
 80058f8:	e014      	b.n	8005924 <_svfiprintf_r+0x114>
 80058fa:	eba0 0308 	sub.w	r3, r0, r8
 80058fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	9304      	str	r3, [sp, #16]
 8005906:	46a2      	mov	sl, r4
 8005908:	e7d2      	b.n	80058b0 <_svfiprintf_r+0xa0>
 800590a:	9b03      	ldr	r3, [sp, #12]
 800590c:	1d19      	adds	r1, r3, #4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	9103      	str	r1, [sp, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	bfbb      	ittet	lt
 8005916:	425b      	neglt	r3, r3
 8005918:	f042 0202 	orrlt.w	r2, r2, #2
 800591c:	9307      	strge	r3, [sp, #28]
 800591e:	9307      	strlt	r3, [sp, #28]
 8005920:	bfb8      	it	lt
 8005922:	9204      	strlt	r2, [sp, #16]
 8005924:	7823      	ldrb	r3, [r4, #0]
 8005926:	2b2e      	cmp	r3, #46	@ 0x2e
 8005928:	d10a      	bne.n	8005940 <_svfiprintf_r+0x130>
 800592a:	7863      	ldrb	r3, [r4, #1]
 800592c:	2b2a      	cmp	r3, #42	@ 0x2a
 800592e:	d132      	bne.n	8005996 <_svfiprintf_r+0x186>
 8005930:	9b03      	ldr	r3, [sp, #12]
 8005932:	1d1a      	adds	r2, r3, #4
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800593c:	3402      	adds	r4, #2
 800593e:	9305      	str	r3, [sp, #20]
 8005940:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a04 <_svfiprintf_r+0x1f4>
 8005944:	7821      	ldrb	r1, [r4, #0]
 8005946:	2203      	movs	r2, #3
 8005948:	4650      	mov	r0, sl
 800594a:	f7fa fc59 	bl	8000200 <memchr>
 800594e:	b138      	cbz	r0, 8005960 <_svfiprintf_r+0x150>
 8005950:	9b04      	ldr	r3, [sp, #16]
 8005952:	eba0 000a 	sub.w	r0, r0, sl
 8005956:	2240      	movs	r2, #64	@ 0x40
 8005958:	4082      	lsls	r2, r0
 800595a:	4313      	orrs	r3, r2
 800595c:	3401      	adds	r4, #1
 800595e:	9304      	str	r3, [sp, #16]
 8005960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005964:	4824      	ldr	r0, [pc, #144]	@ (80059f8 <_svfiprintf_r+0x1e8>)
 8005966:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800596a:	2206      	movs	r2, #6
 800596c:	f7fa fc48 	bl	8000200 <memchr>
 8005970:	2800      	cmp	r0, #0
 8005972:	d036      	beq.n	80059e2 <_svfiprintf_r+0x1d2>
 8005974:	4b21      	ldr	r3, [pc, #132]	@ (80059fc <_svfiprintf_r+0x1ec>)
 8005976:	bb1b      	cbnz	r3, 80059c0 <_svfiprintf_r+0x1b0>
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	3307      	adds	r3, #7
 800597c:	f023 0307 	bic.w	r3, r3, #7
 8005980:	3308      	adds	r3, #8
 8005982:	9303      	str	r3, [sp, #12]
 8005984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005986:	4433      	add	r3, r6
 8005988:	9309      	str	r3, [sp, #36]	@ 0x24
 800598a:	e76a      	b.n	8005862 <_svfiprintf_r+0x52>
 800598c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005990:	460c      	mov	r4, r1
 8005992:	2001      	movs	r0, #1
 8005994:	e7a8      	b.n	80058e8 <_svfiprintf_r+0xd8>
 8005996:	2300      	movs	r3, #0
 8005998:	3401      	adds	r4, #1
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	4619      	mov	r1, r3
 800599e:	f04f 0c0a 	mov.w	ip, #10
 80059a2:	4620      	mov	r0, r4
 80059a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059a8:	3a30      	subs	r2, #48	@ 0x30
 80059aa:	2a09      	cmp	r2, #9
 80059ac:	d903      	bls.n	80059b6 <_svfiprintf_r+0x1a6>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0c6      	beq.n	8005940 <_svfiprintf_r+0x130>
 80059b2:	9105      	str	r1, [sp, #20]
 80059b4:	e7c4      	b.n	8005940 <_svfiprintf_r+0x130>
 80059b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ba:	4604      	mov	r4, r0
 80059bc:	2301      	movs	r3, #1
 80059be:	e7f0      	b.n	80059a2 <_svfiprintf_r+0x192>
 80059c0:	ab03      	add	r3, sp, #12
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	462a      	mov	r2, r5
 80059c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <_svfiprintf_r+0x1f0>)
 80059c8:	a904      	add	r1, sp, #16
 80059ca:	4638      	mov	r0, r7
 80059cc:	f3af 8000 	nop.w
 80059d0:	1c42      	adds	r2, r0, #1
 80059d2:	4606      	mov	r6, r0
 80059d4:	d1d6      	bne.n	8005984 <_svfiprintf_r+0x174>
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	065b      	lsls	r3, r3, #25
 80059da:	f53f af2d 	bmi.w	8005838 <_svfiprintf_r+0x28>
 80059de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059e0:	e72c      	b.n	800583c <_svfiprintf_r+0x2c>
 80059e2:	ab03      	add	r3, sp, #12
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	462a      	mov	r2, r5
 80059e8:	4b05      	ldr	r3, [pc, #20]	@ (8005a00 <_svfiprintf_r+0x1f0>)
 80059ea:	a904      	add	r1, sp, #16
 80059ec:	4638      	mov	r0, r7
 80059ee:	f000 f879 	bl	8005ae4 <_printf_i>
 80059f2:	e7ed      	b.n	80059d0 <_svfiprintf_r+0x1c0>
 80059f4:	0800644c 	.word	0x0800644c
 80059f8:	08006456 	.word	0x08006456
 80059fc:	00000000 	.word	0x00000000
 8005a00:	08005759 	.word	0x08005759
 8005a04:	08006452 	.word	0x08006452

08005a08 <_printf_common>:
 8005a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a0c:	4616      	mov	r6, r2
 8005a0e:	4698      	mov	r8, r3
 8005a10:	688a      	ldr	r2, [r1, #8]
 8005a12:	690b      	ldr	r3, [r1, #16]
 8005a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	bfb8      	it	lt
 8005a1c:	4613      	movlt	r3, r2
 8005a1e:	6033      	str	r3, [r6, #0]
 8005a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a24:	4607      	mov	r7, r0
 8005a26:	460c      	mov	r4, r1
 8005a28:	b10a      	cbz	r2, 8005a2e <_printf_common+0x26>
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	6033      	str	r3, [r6, #0]
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	0699      	lsls	r1, r3, #26
 8005a32:	bf42      	ittt	mi
 8005a34:	6833      	ldrmi	r3, [r6, #0]
 8005a36:	3302      	addmi	r3, #2
 8005a38:	6033      	strmi	r3, [r6, #0]
 8005a3a:	6825      	ldr	r5, [r4, #0]
 8005a3c:	f015 0506 	ands.w	r5, r5, #6
 8005a40:	d106      	bne.n	8005a50 <_printf_common+0x48>
 8005a42:	f104 0a19 	add.w	sl, r4, #25
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	6832      	ldr	r2, [r6, #0]
 8005a4a:	1a9b      	subs	r3, r3, r2
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	dc26      	bgt.n	8005a9e <_printf_common+0x96>
 8005a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	3b00      	subs	r3, #0
 8005a58:	bf18      	it	ne
 8005a5a:	2301      	movne	r3, #1
 8005a5c:	0692      	lsls	r2, r2, #26
 8005a5e:	d42b      	bmi.n	8005ab8 <_printf_common+0xb0>
 8005a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a64:	4641      	mov	r1, r8
 8005a66:	4638      	mov	r0, r7
 8005a68:	47c8      	blx	r9
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	d01e      	beq.n	8005aac <_printf_common+0xa4>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	6922      	ldr	r2, [r4, #16]
 8005a72:	f003 0306 	and.w	r3, r3, #6
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	bf02      	ittt	eq
 8005a7a:	68e5      	ldreq	r5, [r4, #12]
 8005a7c:	6833      	ldreq	r3, [r6, #0]
 8005a7e:	1aed      	subeq	r5, r5, r3
 8005a80:	68a3      	ldr	r3, [r4, #8]
 8005a82:	bf0c      	ite	eq
 8005a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a88:	2500      	movne	r5, #0
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	bfc4      	itt	gt
 8005a8e:	1a9b      	subgt	r3, r3, r2
 8005a90:	18ed      	addgt	r5, r5, r3
 8005a92:	2600      	movs	r6, #0
 8005a94:	341a      	adds	r4, #26
 8005a96:	42b5      	cmp	r5, r6
 8005a98:	d11a      	bne.n	8005ad0 <_printf_common+0xc8>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e008      	b.n	8005ab0 <_printf_common+0xa8>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	4641      	mov	r1, r8
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	47c8      	blx	r9
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d103      	bne.n	8005ab4 <_printf_common+0xac>
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	e7c6      	b.n	8005a46 <_printf_common+0x3e>
 8005ab8:	18e1      	adds	r1, r4, r3
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	2030      	movs	r0, #48	@ 0x30
 8005abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ac2:	4422      	add	r2, r4
 8005ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005acc:	3302      	adds	r3, #2
 8005ace:	e7c7      	b.n	8005a60 <_printf_common+0x58>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c8      	blx	r9
 8005ada:	3001      	adds	r0, #1
 8005adc:	d0e6      	beq.n	8005aac <_printf_common+0xa4>
 8005ade:	3601      	adds	r6, #1
 8005ae0:	e7d9      	b.n	8005a96 <_printf_common+0x8e>
	...

08005ae4 <_printf_i>:
 8005ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	7e0f      	ldrb	r7, [r1, #24]
 8005aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005aec:	2f78      	cmp	r7, #120	@ 0x78
 8005aee:	4691      	mov	r9, r2
 8005af0:	4680      	mov	r8, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	469a      	mov	sl, r3
 8005af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005afa:	d807      	bhi.n	8005b0c <_printf_i+0x28>
 8005afc:	2f62      	cmp	r7, #98	@ 0x62
 8005afe:	d80a      	bhi.n	8005b16 <_printf_i+0x32>
 8005b00:	2f00      	cmp	r7, #0
 8005b02:	f000 80d2 	beq.w	8005caa <_printf_i+0x1c6>
 8005b06:	2f58      	cmp	r7, #88	@ 0x58
 8005b08:	f000 80b9 	beq.w	8005c7e <_printf_i+0x19a>
 8005b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b14:	e03a      	b.n	8005b8c <_printf_i+0xa8>
 8005b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b1a:	2b15      	cmp	r3, #21
 8005b1c:	d8f6      	bhi.n	8005b0c <_printf_i+0x28>
 8005b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b24 <_printf_i+0x40>)
 8005b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b24:	08005b7d 	.word	0x08005b7d
 8005b28:	08005b91 	.word	0x08005b91
 8005b2c:	08005b0d 	.word	0x08005b0d
 8005b30:	08005b0d 	.word	0x08005b0d
 8005b34:	08005b0d 	.word	0x08005b0d
 8005b38:	08005b0d 	.word	0x08005b0d
 8005b3c:	08005b91 	.word	0x08005b91
 8005b40:	08005b0d 	.word	0x08005b0d
 8005b44:	08005b0d 	.word	0x08005b0d
 8005b48:	08005b0d 	.word	0x08005b0d
 8005b4c:	08005b0d 	.word	0x08005b0d
 8005b50:	08005c91 	.word	0x08005c91
 8005b54:	08005bbb 	.word	0x08005bbb
 8005b58:	08005c4b 	.word	0x08005c4b
 8005b5c:	08005b0d 	.word	0x08005b0d
 8005b60:	08005b0d 	.word	0x08005b0d
 8005b64:	08005cb3 	.word	0x08005cb3
 8005b68:	08005b0d 	.word	0x08005b0d
 8005b6c:	08005bbb 	.word	0x08005bbb
 8005b70:	08005b0d 	.word	0x08005b0d
 8005b74:	08005b0d 	.word	0x08005b0d
 8005b78:	08005c53 	.word	0x08005c53
 8005b7c:	6833      	ldr	r3, [r6, #0]
 8005b7e:	1d1a      	adds	r2, r3, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6032      	str	r2, [r6, #0]
 8005b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e09d      	b.n	8005ccc <_printf_i+0x1e8>
 8005b90:	6833      	ldr	r3, [r6, #0]
 8005b92:	6820      	ldr	r0, [r4, #0]
 8005b94:	1d19      	adds	r1, r3, #4
 8005b96:	6031      	str	r1, [r6, #0]
 8005b98:	0606      	lsls	r6, r0, #24
 8005b9a:	d501      	bpl.n	8005ba0 <_printf_i+0xbc>
 8005b9c:	681d      	ldr	r5, [r3, #0]
 8005b9e:	e003      	b.n	8005ba8 <_printf_i+0xc4>
 8005ba0:	0645      	lsls	r5, r0, #25
 8005ba2:	d5fb      	bpl.n	8005b9c <_printf_i+0xb8>
 8005ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ba8:	2d00      	cmp	r5, #0
 8005baa:	da03      	bge.n	8005bb4 <_printf_i+0xd0>
 8005bac:	232d      	movs	r3, #45	@ 0x2d
 8005bae:	426d      	negs	r5, r5
 8005bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb4:	4859      	ldr	r0, [pc, #356]	@ (8005d1c <_printf_i+0x238>)
 8005bb6:	230a      	movs	r3, #10
 8005bb8:	e011      	b.n	8005bde <_printf_i+0xfa>
 8005bba:	6821      	ldr	r1, [r4, #0]
 8005bbc:	6833      	ldr	r3, [r6, #0]
 8005bbe:	0608      	lsls	r0, r1, #24
 8005bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bc4:	d402      	bmi.n	8005bcc <_printf_i+0xe8>
 8005bc6:	0649      	lsls	r1, r1, #25
 8005bc8:	bf48      	it	mi
 8005bca:	b2ad      	uxthmi	r5, r5
 8005bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bce:	4853      	ldr	r0, [pc, #332]	@ (8005d1c <_printf_i+0x238>)
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	bf14      	ite	ne
 8005bd4:	230a      	movne	r3, #10
 8005bd6:	2308      	moveq	r3, #8
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bde:	6866      	ldr	r6, [r4, #4]
 8005be0:	60a6      	str	r6, [r4, #8]
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	bfa2      	ittt	ge
 8005be6:	6821      	ldrge	r1, [r4, #0]
 8005be8:	f021 0104 	bicge.w	r1, r1, #4
 8005bec:	6021      	strge	r1, [r4, #0]
 8005bee:	b90d      	cbnz	r5, 8005bf4 <_printf_i+0x110>
 8005bf0:	2e00      	cmp	r6, #0
 8005bf2:	d04b      	beq.n	8005c8c <_printf_i+0x1a8>
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8005bfe:	5dc7      	ldrb	r7, [r0, r7]
 8005c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c04:	462f      	mov	r7, r5
 8005c06:	42bb      	cmp	r3, r7
 8005c08:	460d      	mov	r5, r1
 8005c0a:	d9f4      	bls.n	8005bf6 <_printf_i+0x112>
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10b      	bne.n	8005c28 <_printf_i+0x144>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07df      	lsls	r7, r3, #31
 8005c14:	d508      	bpl.n	8005c28 <_printf_i+0x144>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	6861      	ldr	r1, [r4, #4]
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	bfde      	ittt	le
 8005c1e:	2330      	movle	r3, #48	@ 0x30
 8005c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c28:	1b92      	subs	r2, r2, r6
 8005c2a:	6122      	str	r2, [r4, #16]
 8005c2c:	f8cd a000 	str.w	sl, [sp]
 8005c30:	464b      	mov	r3, r9
 8005c32:	aa03      	add	r2, sp, #12
 8005c34:	4621      	mov	r1, r4
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff fee6 	bl	8005a08 <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d14a      	bne.n	8005cd6 <_printf_i+0x1f2>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b004      	add	sp, #16
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	4833      	ldr	r0, [pc, #204]	@ (8005d20 <_printf_i+0x23c>)
 8005c54:	2778      	movs	r7, #120	@ 0x78
 8005c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	6831      	ldr	r1, [r6, #0]
 8005c5e:	061f      	lsls	r7, r3, #24
 8005c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c64:	d402      	bmi.n	8005c6c <_printf_i+0x188>
 8005c66:	065f      	lsls	r7, r3, #25
 8005c68:	bf48      	it	mi
 8005c6a:	b2ad      	uxthmi	r5, r5
 8005c6c:	6031      	str	r1, [r6, #0]
 8005c6e:	07d9      	lsls	r1, r3, #31
 8005c70:	bf44      	itt	mi
 8005c72:	f043 0320 	orrmi.w	r3, r3, #32
 8005c76:	6023      	strmi	r3, [r4, #0]
 8005c78:	b11d      	cbz	r5, 8005c82 <_printf_i+0x19e>
 8005c7a:	2310      	movs	r3, #16
 8005c7c:	e7ac      	b.n	8005bd8 <_printf_i+0xf4>
 8005c7e:	4827      	ldr	r0, [pc, #156]	@ (8005d1c <_printf_i+0x238>)
 8005c80:	e7e9      	b.n	8005c56 <_printf_i+0x172>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	f023 0320 	bic.w	r3, r3, #32
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	e7f6      	b.n	8005c7a <_printf_i+0x196>
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	e7bd      	b.n	8005c0c <_printf_i+0x128>
 8005c90:	6833      	ldr	r3, [r6, #0]
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	6961      	ldr	r1, [r4, #20]
 8005c96:	1d18      	adds	r0, r3, #4
 8005c98:	6030      	str	r0, [r6, #0]
 8005c9a:	062e      	lsls	r6, r5, #24
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	d501      	bpl.n	8005ca4 <_printf_i+0x1c0>
 8005ca0:	6019      	str	r1, [r3, #0]
 8005ca2:	e002      	b.n	8005caa <_printf_i+0x1c6>
 8005ca4:	0668      	lsls	r0, r5, #25
 8005ca6:	d5fb      	bpl.n	8005ca0 <_printf_i+0x1bc>
 8005ca8:	8019      	strh	r1, [r3, #0]
 8005caa:	2300      	movs	r3, #0
 8005cac:	6123      	str	r3, [r4, #16]
 8005cae:	4616      	mov	r6, r2
 8005cb0:	e7bc      	b.n	8005c2c <_printf_i+0x148>
 8005cb2:	6833      	ldr	r3, [r6, #0]
 8005cb4:	1d1a      	adds	r2, r3, #4
 8005cb6:	6032      	str	r2, [r6, #0]
 8005cb8:	681e      	ldr	r6, [r3, #0]
 8005cba:	6862      	ldr	r2, [r4, #4]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f7fa fa9e 	bl	8000200 <memchr>
 8005cc4:	b108      	cbz	r0, 8005cca <_printf_i+0x1e6>
 8005cc6:	1b80      	subs	r0, r0, r6
 8005cc8:	6060      	str	r0, [r4, #4]
 8005cca:	6863      	ldr	r3, [r4, #4]
 8005ccc:	6123      	str	r3, [r4, #16]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cd4:	e7aa      	b.n	8005c2c <_printf_i+0x148>
 8005cd6:	6923      	ldr	r3, [r4, #16]
 8005cd8:	4632      	mov	r2, r6
 8005cda:	4649      	mov	r1, r9
 8005cdc:	4640      	mov	r0, r8
 8005cde:	47d0      	blx	sl
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d0ad      	beq.n	8005c40 <_printf_i+0x15c>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	079b      	lsls	r3, r3, #30
 8005ce8:	d413      	bmi.n	8005d12 <_printf_i+0x22e>
 8005cea:	68e0      	ldr	r0, [r4, #12]
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	4298      	cmp	r0, r3
 8005cf0:	bfb8      	it	lt
 8005cf2:	4618      	movlt	r0, r3
 8005cf4:	e7a6      	b.n	8005c44 <_printf_i+0x160>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4632      	mov	r2, r6
 8005cfa:	4649      	mov	r1, r9
 8005cfc:	4640      	mov	r0, r8
 8005cfe:	47d0      	blx	sl
 8005d00:	3001      	adds	r0, #1
 8005d02:	d09d      	beq.n	8005c40 <_printf_i+0x15c>
 8005d04:	3501      	adds	r5, #1
 8005d06:	68e3      	ldr	r3, [r4, #12]
 8005d08:	9903      	ldr	r1, [sp, #12]
 8005d0a:	1a5b      	subs	r3, r3, r1
 8005d0c:	42ab      	cmp	r3, r5
 8005d0e:	dcf2      	bgt.n	8005cf6 <_printf_i+0x212>
 8005d10:	e7eb      	b.n	8005cea <_printf_i+0x206>
 8005d12:	2500      	movs	r5, #0
 8005d14:	f104 0619 	add.w	r6, r4, #25
 8005d18:	e7f5      	b.n	8005d06 <_printf_i+0x222>
 8005d1a:	bf00      	nop
 8005d1c:	0800645d 	.word	0x0800645d
 8005d20:	0800646e 	.word	0x0800646e

08005d24 <memmove>:
 8005d24:	4288      	cmp	r0, r1
 8005d26:	b510      	push	{r4, lr}
 8005d28:	eb01 0402 	add.w	r4, r1, r2
 8005d2c:	d902      	bls.n	8005d34 <memmove+0x10>
 8005d2e:	4284      	cmp	r4, r0
 8005d30:	4623      	mov	r3, r4
 8005d32:	d807      	bhi.n	8005d44 <memmove+0x20>
 8005d34:	1e43      	subs	r3, r0, #1
 8005d36:	42a1      	cmp	r1, r4
 8005d38:	d008      	beq.n	8005d4c <memmove+0x28>
 8005d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d42:	e7f8      	b.n	8005d36 <memmove+0x12>
 8005d44:	4402      	add	r2, r0
 8005d46:	4601      	mov	r1, r0
 8005d48:	428a      	cmp	r2, r1
 8005d4a:	d100      	bne.n	8005d4e <memmove+0x2a>
 8005d4c:	bd10      	pop	{r4, pc}
 8005d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d56:	e7f7      	b.n	8005d48 <memmove+0x24>

08005d58 <_sbrk_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d06      	ldr	r5, [pc, #24]	@ (8005d74 <_sbrk_r+0x1c>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	f7fb f944 	bl	8000ff0 <_sbrk>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_sbrk_r+0x1a>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_sbrk_r+0x1a>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20001878 	.word	0x20001878

08005d78 <memcpy>:
 8005d78:	440a      	add	r2, r1
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d80:	d100      	bne.n	8005d84 <memcpy+0xc>
 8005d82:	4770      	bx	lr
 8005d84:	b510      	push	{r4, lr}
 8005d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d8e:	4291      	cmp	r1, r2
 8005d90:	d1f9      	bne.n	8005d86 <memcpy+0xe>
 8005d92:	bd10      	pop	{r4, pc}

08005d94 <_realloc_r>:
 8005d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d98:	4680      	mov	r8, r0
 8005d9a:	4615      	mov	r5, r2
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	b921      	cbnz	r1, 8005daa <_realloc_r+0x16>
 8005da0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da4:	4611      	mov	r1, r2
 8005da6:	f7ff bc4b 	b.w	8005640 <_malloc_r>
 8005daa:	b92a      	cbnz	r2, 8005db8 <_realloc_r+0x24>
 8005dac:	f7ff fbdc 	bl	8005568 <_free_r>
 8005db0:	2400      	movs	r4, #0
 8005db2:	4620      	mov	r0, r4
 8005db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db8:	f000 f81a 	bl	8005df0 <_malloc_usable_size_r>
 8005dbc:	4285      	cmp	r5, r0
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	d802      	bhi.n	8005dc8 <_realloc_r+0x34>
 8005dc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005dc6:	d8f4      	bhi.n	8005db2 <_realloc_r+0x1e>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	4640      	mov	r0, r8
 8005dcc:	f7ff fc38 	bl	8005640 <_malloc_r>
 8005dd0:	4607      	mov	r7, r0
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d0ec      	beq.n	8005db0 <_realloc_r+0x1c>
 8005dd6:	42b5      	cmp	r5, r6
 8005dd8:	462a      	mov	r2, r5
 8005dda:	4621      	mov	r1, r4
 8005ddc:	bf28      	it	cs
 8005dde:	4632      	movcs	r2, r6
 8005de0:	f7ff ffca 	bl	8005d78 <memcpy>
 8005de4:	4621      	mov	r1, r4
 8005de6:	4640      	mov	r0, r8
 8005de8:	f7ff fbbe 	bl	8005568 <_free_r>
 8005dec:	463c      	mov	r4, r7
 8005dee:	e7e0      	b.n	8005db2 <_realloc_r+0x1e>

08005df0 <_malloc_usable_size_r>:
 8005df0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df4:	1f18      	subs	r0, r3, #4
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	bfbc      	itt	lt
 8005dfa:	580b      	ldrlt	r3, [r1, r0]
 8005dfc:	18c0      	addlt	r0, r0, r3
 8005dfe:	4770      	bx	lr

08005e00 <_init>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr

08005e0c <_fini>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr
