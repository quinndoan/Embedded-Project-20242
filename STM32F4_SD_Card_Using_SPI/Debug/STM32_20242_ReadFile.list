
STM32_20242_ReadFile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000102f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  080104a8  080104a8  000114a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010dc4  08010dc4  00012164  2**0
                  CONTENTS
  4 .ARM          00000008  08010dc4  08010dc4  00011dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010dcc  08010dcc  00012164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010dcc  08010dcc  00011dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010dd0  08010dd0  00011dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08010dd4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012164  2**0
                  CONTENTS
 10 .bss          00004d50  20000164  20000164  00012164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004eb4  20004eb4  00012164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a868  00000000  00000000  00012194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004764  00000000  00000000  0002c9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001590  00000000  00000000  00031160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106a  00000000  00000000  000326f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ae5  00000000  00000000  0003375a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020546  00000000  00000000  0005c23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da5e7  00000000  00000000  0007c785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156d6c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e88  00000000  00000000  00156db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0015cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010490 	.word	0x08010490

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	08010490 	.word	0x08010490

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96a 	b.w	8000b98 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	460c      	mov	r4, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14e      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008e8:	4694      	mov	ip, r2
 80008ea:	458c      	cmp	ip, r1
 80008ec:	4686      	mov	lr, r0
 80008ee:	fab2 f282 	clz	r2, r2
 80008f2:	d962      	bls.n	80009ba <__udivmoddi4+0xde>
 80008f4:	b14a      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f6:	f1c2 0320 	rsb	r3, r2, #32
 80008fa:	4091      	lsls	r1, r2
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	fa0c fc02 	lsl.w	ip, ip, r2
 8000904:	4319      	orrs	r1, r3
 8000906:	fa00 fe02 	lsl.w	lr, r0, r2
 800090a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090e:	fa1f f68c 	uxth.w	r6, ip
 8000912:	fbb1 f4f7 	udiv	r4, r1, r7
 8000916:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800091a:	fb07 1114 	mls	r1, r7, r4, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb04 f106 	mul.w	r1, r4, r6
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000932:	f080 8112 	bcs.w	8000b5a <__udivmoddi4+0x27e>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 810f 	bls.w	8000b5a <__udivmoddi4+0x27e>
 800093c:	3c02      	subs	r4, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a59      	subs	r1, r3, r1
 8000942:	fa1f f38e 	uxth.w	r3, lr
 8000946:	fbb1 f0f7 	udiv	r0, r1, r7
 800094a:	fb07 1110 	mls	r1, r7, r0, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb00 f606 	mul.w	r6, r0, r6
 8000956:	429e      	cmp	r6, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x94>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000962:	f080 80fc 	bcs.w	8000b5e <__udivmoddi4+0x282>
 8000966:	429e      	cmp	r6, r3
 8000968:	f240 80f9 	bls.w	8000b5e <__udivmoddi4+0x282>
 800096c:	4463      	add	r3, ip
 800096e:	3802      	subs	r0, #2
 8000970:	1b9b      	subs	r3, r3, r6
 8000972:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000976:	2100      	movs	r1, #0
 8000978:	b11d      	cbz	r5, 8000982 <__udivmoddi4+0xa6>
 800097a:	40d3      	lsrs	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	e9c5 3200 	strd	r3, r2, [r5]
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d905      	bls.n	8000996 <__udivmoddi4+0xba>
 800098a:	b10d      	cbz	r5, 8000990 <__udivmoddi4+0xb4>
 800098c:	e9c5 0100 	strd	r0, r1, [r5]
 8000990:	2100      	movs	r1, #0
 8000992:	4608      	mov	r0, r1
 8000994:	e7f5      	b.n	8000982 <__udivmoddi4+0xa6>
 8000996:	fab3 f183 	clz	r1, r3
 800099a:	2900      	cmp	r1, #0
 800099c:	d146      	bne.n	8000a2c <__udivmoddi4+0x150>
 800099e:	42a3      	cmp	r3, r4
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xcc>
 80009a2:	4290      	cmp	r0, r2
 80009a4:	f0c0 80f0 	bcc.w	8000b88 <__udivmoddi4+0x2ac>
 80009a8:	1a86      	subs	r6, r0, r2
 80009aa:	eb64 0303 	sbc.w	r3, r4, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0e6      	beq.n	8000982 <__udivmoddi4+0xa6>
 80009b4:	e9c5 6300 	strd	r6, r3, [r5]
 80009b8:	e7e3      	b.n	8000982 <__udivmoddi4+0xa6>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	f040 8090 	bne.w	8000ae0 <__udivmoddi4+0x204>
 80009c0:	eba1 040c 	sub.w	r4, r1, ip
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	2101      	movs	r1, #1
 80009ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80009d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d6:	fb08 4416 	mls	r4, r8, r6, r4
 80009da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009de:	fb07 f006 	mul.w	r0, r7, r6
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x11c>
 80009e6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x11a>
 80009f0:	4298      	cmp	r0, r3
 80009f2:	f200 80cd 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009f6:	4626      	mov	r6, r4
 80009f8:	1a1c      	subs	r4, r3, r0
 80009fa:	fa1f f38e 	uxth.w	r3, lr
 80009fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a02:	fb08 4410 	mls	r4, r8, r0, r4
 8000a06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0a:	fb00 f707 	mul.w	r7, r0, r7
 8000a0e:	429f      	cmp	r7, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x148>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x146>
 8000a1c:	429f      	cmp	r7, r3
 8000a1e:	f200 80b0 	bhi.w	8000b82 <__udivmoddi4+0x2a6>
 8000a22:	4620      	mov	r0, r4
 8000a24:	1bdb      	subs	r3, r3, r7
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	e7a5      	b.n	8000978 <__udivmoddi4+0x9c>
 8000a2c:	f1c1 0620 	rsb	r6, r1, #32
 8000a30:	408b      	lsls	r3, r1
 8000a32:	fa22 f706 	lsr.w	r7, r2, r6
 8000a36:	431f      	orrs	r7, r3
 8000a38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a40:	ea43 030c 	orr.w	r3, r3, ip
 8000a44:	40f4      	lsrs	r4, r6
 8000a46:	fa00 f801 	lsl.w	r8, r0, r1
 8000a4a:	0c38      	lsrs	r0, r7, #16
 8000a4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a50:	fbb4 fef0 	udiv	lr, r4, r0
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fb00 441e 	mls	r4, r0, lr, r4
 8000a5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a60:	fb0e f90c 	mul.w	r9, lr, ip
 8000a64:	45a1      	cmp	r9, r4
 8000a66:	fa02 f201 	lsl.w	r2, r2, r1
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x1a6>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a72:	f080 8084 	bcs.w	8000b7e <__udivmoddi4+0x2a2>
 8000a76:	45a1      	cmp	r9, r4
 8000a78:	f240 8081 	bls.w	8000b7e <__udivmoddi4+0x2a2>
 8000a7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	eba4 0409 	sub.w	r4, r4, r9
 8000a86:	fa1f f983 	uxth.w	r9, r3
 8000a8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a9a:	45a4      	cmp	ip, r4
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x1d2>
 8000a9e:	193c      	adds	r4, r7, r4
 8000aa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000aa4:	d267      	bcs.n	8000b76 <__udivmoddi4+0x29a>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0x29a>
 8000aaa:	3b02      	subs	r3, #2
 8000aac:	443c      	add	r4, r7
 8000aae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ab2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ab6:	eba4 040c 	sub.w	r4, r4, ip
 8000aba:	429c      	cmp	r4, r3
 8000abc:	46ce      	mov	lr, r9
 8000abe:	469c      	mov	ip, r3
 8000ac0:	d351      	bcc.n	8000b66 <__udivmoddi4+0x28a>
 8000ac2:	d04e      	beq.n	8000b62 <__udivmoddi4+0x286>
 8000ac4:	b155      	cbz	r5, 8000adc <__udivmoddi4+0x200>
 8000ac6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ace:	fa04 f606 	lsl.w	r6, r4, r6
 8000ad2:	40cb      	lsrs	r3, r1
 8000ad4:	431e      	orrs	r6, r3
 8000ad6:	40cc      	lsrs	r4, r1
 8000ad8:	e9c5 6400 	strd	r6, r4, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	e750      	b.n	8000982 <__udivmoddi4+0xa6>
 8000ae0:	f1c2 0320 	rsb	r3, r2, #32
 8000ae4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	fa24 f303 	lsr.w	r3, r4, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	430c      	orrs	r4, r1
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3110 	mls	r1, r8, r0, r3
 8000b08:	0c23      	lsrs	r3, r4, #16
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f107 	mul.w	r1, r0, r7
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x24c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b1e:	d22c      	bcs.n	8000b7a <__udivmoddi4+0x29e>
 8000b20:	4299      	cmp	r1, r3
 8000b22:	d92a      	bls.n	8000b7a <__udivmoddi4+0x29e>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b30:	fb08 3311 	mls	r3, r8, r1, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb01 f307 	mul.w	r3, r1, r7
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x276>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b48:	d213      	bcs.n	8000b72 <__udivmoddi4+0x296>
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	d911      	bls.n	8000b72 <__udivmoddi4+0x296>
 8000b4e:	3902      	subs	r1, #2
 8000b50:	4464      	add	r4, ip
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b58:	e739      	b.n	80009ce <__udivmoddi4+0xf2>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	e6f0      	b.n	8000940 <__udivmoddi4+0x64>
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e706      	b.n	8000970 <__udivmoddi4+0x94>
 8000b62:	45c8      	cmp	r8, r9
 8000b64:	d2ae      	bcs.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7a8      	b.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b72:	4631      	mov	r1, r6
 8000b74:	e7ed      	b.n	8000b52 <__udivmoddi4+0x276>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e799      	b.n	8000aae <__udivmoddi4+0x1d2>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e7d4      	b.n	8000b28 <__udivmoddi4+0x24c>
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1a6>
 8000b82:	4463      	add	r3, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	e74d      	b.n	8000a24 <__udivmoddi4+0x148>
 8000b88:	4606      	mov	r6, r0
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e70f      	b.n	80009b0 <__udivmoddi4+0xd4>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	e730      	b.n	80009f8 <__udivmoddi4+0x11c>
 8000b96:	bf00      	nop

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <disk_status+0x30>)
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	4905      	ldr	r1, [pc, #20]	@ (8000bcc <disk_status+0x30>)
 8000bb6:	440a      	add	r2, r1
 8000bb8:	7a12      	ldrb	r2, [r2, #8]
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4798      	blx	r3
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20004118 	.word	0x20004118

08000bd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <disk_initialize+0x4c>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d114      	bne.n	8000c12 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <disk_initialize+0x4c>)
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	79fa      	ldrb	r2, [r7, #7]
 8000bf6:	4909      	ldr	r1, [pc, #36]	@ (8000c1c <disk_initialize+0x4c>)
 8000bf8:	440a      	add	r2, r1
 8000bfa:	7a12      	ldrb	r2, [r2, #8]
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4798      	blx	r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a03      	ldr	r2, [pc, #12]	@ (8000c1c <disk_initialize+0x4c>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20004118 	.word	0x20004118

08000c20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <disk_read+0x3c>)
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	689c      	ldr	r4, [r3, #8]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <disk_read+0x3c>)
 8000c40:	4413      	add	r3, r2
 8000c42:	7a18      	ldrb	r0, [r3, #8]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	47a0      	blx	r4
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20004118 	.word	0x20004118

08000c60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <disk_write+0x3c>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	68dc      	ldr	r4, [r3, #12]
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <disk_write+0x3c>)
 8000c80:	4413      	add	r3, r2
 8000c82:	7a18      	ldrb	r0, [r3, #8]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	47a0      	blx	r4
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20004118 	.word	0x20004118

08000ca0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	603a      	str	r2, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	460b      	mov	r3, r1
 8000cae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a09      	ldr	r2, [pc, #36]	@ (8000cd8 <disk_ioctl+0x38>)
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	4906      	ldr	r1, [pc, #24]	@ (8000cd8 <disk_ioctl+0x38>)
 8000cc0:	440a      	add	r2, r1
 8000cc2:	7a10      	ldrb	r0, [r2, #8]
 8000cc4:	79b9      	ldrb	r1, [r7, #6]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4798      	blx	r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]
  return res;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20004118 	.word	0x20004118

08000cdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000ce0:	4904      	ldr	r1, [pc, #16]	@ (8000cf4 <MX_FATFS_Init+0x18>)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_FATFS_Init+0x1c>)
 8000ce4:	f00e f93a 	bl	800ef5c <FATFS_LinkDriver>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <MX_FATFS_Init+0x20>)
 8000cee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000184 	.word	0x20000184
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	20000180 	.word	0x20000180

08000d00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8000d04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SELECT>:
 ********************************************/
// Các hàm này dùng để giao tiếp SPI mức thấp với thẻ SD

// Kéo chân CS (Chip Select) xuống mức thấp để chọn thẻ SD
static void SELECT(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
    HAL_Delay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f001 fc0d 	bl	8002534 <HAL_Delay>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <DESELECT>:

static void DESELECT(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
    HAL_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f001 fc06 	bl	8002534 <HAL_Delay>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SPI_TxByte>:

// Gửi 1 byte qua SPI
static void SPI_TxByte(uint8_t data)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    // Truyền 1 byte qua SPI, dùng cho lệnh hoặc dữ liệu
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d36:	1df9      	adds	r1, r7, #7
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <SPI_TxByte+0x20>)
 8000d3e:	f003 ff0e 	bl	8004b5e <HAL_SPI_Transmit>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000151c 	.word	0x2000151c

08000d50 <SPI_TxBuffer>:

// Gửi 1 buffer qua SPI
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
    // Truyền nhiều byte liên tiếp qua SPI
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	2364      	movs	r3, #100	@ 0x64
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SPI_TxBuffer+0x20>)
 8000d64:	f003 fefb 	bl	8004b5e <HAL_SPI_Transmit>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000151c 	.word	0x2000151c

08000d74 <SPI_RxByte>:

// Nhận 1 byte qua SPI
static uint8_t SPI_RxByte(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
    // Để nhận dữ liệu từ slave, master phải gửi 1 byte "dummy" (0xFF)
    uint8_t dummy = 0xFF, data;
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d7e:	1dba      	adds	r2, r7, #6
 8000d80:	1df9      	adds	r1, r7, #7
 8000d82:	2364      	movs	r3, #100	@ 0x64
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <SPI_RxByte+0x24>)
 8000d8a:	f004 f82c 	bl	8004de6 <HAL_SPI_TransmitReceive>
    return data;
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000151c 	.word	0x2000151c

08000d9c <SPI_RxBytePtr>:

// Nhận 1 byte qua SPI và lưu vào con trỏ buff
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 8000da4:	f7ff ffe6 	bl	8000d74 <SPI_RxByte>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	701a      	strb	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SD_ReadyWait>:
 ********************************************/
// Các hàm này dùng để kiểm soát nguồn và trạng thái sẵn sàng của thẻ SD

// Chờ thẻ SD sẵn sàng (trả về 0xFF), timeout nếu quá lâu
static uint8_t SD_ReadyWait(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
    uint8_t res;
    Timer2 = 100; // Timeout 500ms (Timer2 giảm mỗi 5ms hoặc 10ms tuỳ cấu hình timer)
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <SD_ReadyWait+0x30>)
 8000dc0:	2264      	movs	r2, #100	@ 0x64
 8000dc2:	801a      	strh	r2, [r3, #0]
    do {
        res = SPI_RxByte(); // Đọc liên tục cho đến khi nhận được 0xFF (SD sẵn sàng)
 8000dc4:	f7ff ffd6 	bl	8000d74 <SPI_RxByte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2bff      	cmp	r3, #255	@ 0xff
 8000dd0:	d004      	beq.n	8000ddc <SD_ReadyWait+0x24>
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <SD_ReadyWait+0x30>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f3      	bne.n	8000dc4 <SD_ReadyWait+0xc>
    return res;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20003ebf 	.word	0x20003ebf

08000dec <SD_PowerOn>:

// Bật nguồn thẻ SD và đưa về trạng thái idle
static void SD_PowerOn(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF; // Đếm timeout cho quá trình khởi tạo
 8000df2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000df6:	60fb      	str	r3, [r7, #12]
    // Gửi nhiều byte 0xFF để "đánh thức" thẻ SD (theo chuẩn SD)
    DESELECT();
 8000df8:	f7ff ff91 	bl	8000d1e <DESELECT>
    for(int i = 0; i < 10; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e005      	b.n	8000e0e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 8000e02:	20ff      	movs	r0, #255	@ 0xff
 8000e04:	f7ff ff92 	bl	8000d2c <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b09      	cmp	r3, #9
 8000e12:	ddf6      	ble.n	8000e02 <SD_PowerOn+0x16>
    }
    // Chọn thẻ SD
    SELECT();
 8000e14:	f7ff ff7c 	bl	8000d10 <SELECT>
    // Gửi lệnh CMD0 (GO_IDLE_STATE) để đưa thẻ về trạng thái idle
    args[0] = CMD0; // Lệnh CMD0
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95; // CRC hợp lệ cho CMD0 (bắt buộc theo chuẩn SD, các lệnh khác CRC có thể bỏ qua ở chế độ SPI)
 8000e2c:	2395      	movs	r3, #149	@ 0x95
 8000e2e:	717b      	strb	r3, [r7, #5]
    SPI_TxBuffer(args, sizeof(args));
 8000e30:	463b      	mov	r3, r7
 8000e32:	2106      	movs	r1, #6
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff8b 	bl	8000d50 <SPI_TxBuffer>
    // Chờ phản hồi 0x01 (idle), hoặc timeout
    while ((SPI_RxByte() != 0x01) && cnt)
 8000e3a:	e002      	b.n	8000e42 <SD_PowerOn+0x56>
    {
        cnt--;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 8000e42:	f7ff ff97 	bl	8000d74 <SPI_RxByte>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d002      	beq.n	8000e52 <SD_PowerOn+0x66>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f4      	bne.n	8000e3c <SD_PowerOn+0x50>
    }
    DESELECT();
 8000e52:	f7ff ff64 	bl	8000d1e <DESELECT>
    SPI_TxByte(0XFF); // Gửi thêm 1 byte dummy
 8000e56:	20ff      	movs	r0, #255	@ 0xff
 8000e58:	f7ff ff68 	bl	8000d2c <SPI_TxByte>
    PowerFlag = 1; // Đánh dấu đã bật nguồn
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <SD_PowerOn+0x80>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001519 	.word	0x20001519

08000e70 <SD_PowerOff>:

// Tắt nguồn thẻ SD (chỉ set cờ, không thao tác phần cứng)
static void SD_PowerOff(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8000e74:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <SD_PowerOff+0x14>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20001519 	.word	0x20001519

08000e88 <SD_CheckPower>:

// Kiểm tra trạng thái nguồn thẻ SD (1: đã bật, 0: đã tắt)
static uint8_t SD_CheckPower(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
    return PowerFlag;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <SD_CheckPower+0x14>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20001519 	.word	0x20001519

08000ea0 <SD_RxDataBlock>:
// Các hàm này dùng để truyền/nhận block dữ liệu giữa MCU và thẻ SD

// Nhận 1 block dữ liệu từ thẻ SD (thường là 512 byte)
// Trả về TRUE nếu thành công, FALSE nếu lỗi hoặc timeout
static uint8_t SD_RxDataBlock(uint8_t *buff, unsigned int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    uint8_t token;
    Timer1 = 100; // Timeout 200ms
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <SD_RxDataBlock+0x5c>)
 8000eac:	2264      	movs	r2, #100	@ 0x64
 8000eae:	801a      	strh	r2, [r3, #0]
    // Chờ token bắt đầu dữ liệu (0xFE), hoặc timeout
    do {
        token = SPI_RxByte();
 8000eb0:	f7ff ff60 	bl	8000d74 <SPI_RxByte>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2bff      	cmp	r3, #255	@ 0xff
 8000ebc:	d104      	bne.n	8000ec8 <SD_RxDataBlock+0x28>
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <SD_RxDataBlock+0x5c>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f3      	bne.n	8000eb0 <SD_RxDataBlock+0x10>
    if(token != 0xFE) return FALSE; // Không nhận được token hợp lệ
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ecc:	d001      	beq.n	8000ed2 <SD_RxDataBlock+0x32>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e00f      	b.n	8000ef2 <SD_RxDataBlock+0x52>
    // Nhận dữ liệu
    do {
        SPI_RxBytePtr(buff++);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <SPI_RxBytePtr>
    } while(len--);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	1e5a      	subs	r2, r3, #1
 8000ee2:	603a      	str	r2, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <SD_RxDataBlock+0x32>
    // Bỏ qua 2 byte CRC
    SPI_RxByte();
 8000ee8:	f7ff ff44 	bl	8000d74 <SPI_RxByte>
    SPI_RxByte();
 8000eec:	f7ff ff42 	bl	8000d74 <SPI_RxByte>
    return TRUE;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20003ebe 	.word	0x20003ebe

08000f00 <SD_TxDataBlock>:

// Gửi 1 block dữ liệu tới thẻ SD (chỉ dùng khi _USE_WRITE == 1)
#if _USE_WRITE == 1
static uint8_t SD_TxDataBlock(const uint8_t *buff, uint8_t token)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp;
    uint8_t i = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73bb      	strb	r3, [r7, #14]
    // Chờ thẻ sẵn sàng
    if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f10:	f7ff ff52 	bl	8000db8 <SD_ReadyWait>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2bff      	cmp	r3, #255	@ 0xff
 8000f18:	d001      	beq.n	8000f1e <SD_TxDataBlock+0x1e>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e03f      	b.n	8000f9e <SD_TxDataBlock+0x9e>
    // Gửi token bắt đầu ghi
    SPI_TxByte(token);
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff03 	bl	8000d2c <SPI_TxByte>
    // Nếu không phải token STOP, gửi dữ liệu
    if (token != 0xFD)
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f2a:	d030      	beq.n	8000f8e <SD_TxDataBlock+0x8e>
    {
        Timer3 = 200;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <SD_TxDataBlock+0xa8>)
 8000f2e:	22c8      	movs	r2, #200	@ 0xc8
 8000f30:	801a      	strh	r2, [r3, #0]
        Timer4 = 200;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <SD_TxDataBlock+0xac>)
 8000f34:	22c8      	movs	r2, #200	@ 0xc8
 8000f36:	801a      	strh	r2, [r3, #0]
        SPI_TxBuffer((uint8_t*)buff, 512); // Gửi 512 byte dữ liệu
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff07 	bl	8000d50 <SPI_TxBuffer>
        // Bỏ qua 2 byte CRC
        SPI_RxByte();
 8000f42:	f7ff ff17 	bl	8000d74 <SPI_RxByte>
        SPI_RxByte();
 8000f46:	f7ff ff15 	bl	8000d74 <SPI_RxByte>
        // Nhận phản hồi từ thẻ SD
        while (i <= 64 && Timer4)
 8000f4a:	e00b      	b.n	8000f64 <SD_TxDataBlock+0x64>
        {
            resp = SPI_RxByte();
 8000f4c:	f7ff ff12 	bl	8000d74 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]
            // 0x05: dữ liệu được chấp nhận
            if ((resp & 0x1F) == 0x05) break;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	d00b      	beq.n	8000f76 <SD_TxDataBlock+0x76>
            i++;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	3301      	adds	r3, #1
 8000f62:	73bb      	strb	r3, [r7, #14]
        while (i <= 64 && Timer4)
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	2b40      	cmp	r3, #64	@ 0x40
 8000f68:	d806      	bhi.n	8000f78 <SD_TxDataBlock+0x78>
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <SD_TxDataBlock+0xac>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1eb      	bne.n	8000f4c <SD_TxDataBlock+0x4c>
 8000f74:	e000      	b.n	8000f78 <SD_TxDataBlock+0x78>
            if ((resp & 0x1F) == 0x05) break;
 8000f76:	bf00      	nop
        }
        // Xoá bộ đệm nhận
        while (SPI_RxByte() == 0 && Timer3);
 8000f78:	bf00      	nop
 8000f7a:	f7ff fefb 	bl	8000d74 <SPI_RxByte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <SD_TxDataBlock+0x8e>
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <SD_TxDataBlock+0xa8>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f5      	bne.n	8000f7a <SD_TxDataBlock+0x7a>
    }
    // Kiểm tra phản hồi cuối cùng
    if ((resp & 0x1F) == 0x05) return TRUE;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d101      	bne.n	8000f9c <SD_TxDataBlock+0x9c>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <SD_TxDataBlock+0x9e>
    return FALSE;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20003ec0 	.word	0x20003ec0
 8000fac:	20003ec1 	.word	0x20003ec1

08000fb0 <SD_SendCmd>:

// Gửi lệnh tới thẻ SD (SPI CMD)
// cmd: mã lệnh, arg: tham số 32 bit
// Trả về mã phản hồi từ thẻ SD
static uint8_t SD_SendCmd(uint8_t cmd, uint32_t arg)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;
    // Chờ thẻ sẵn sàng
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000fbc:	f7ff fefc 	bl	8000db8 <SD_ReadyWait>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2bff      	cmp	r3, #255	@ 0xff
 8000fc4:	d001      	beq.n	8000fca <SD_SendCmd+0x1a>
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
 8000fc8:	e042      	b.n	8001050 <SD_SendCmd+0xa0>
    // Gửi lệnh và tham số
    SPI_TxByte(cmd); // Command
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fead 	bl	8000d2c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24)); // Argument[31..24]			// SPI truyền 8 bit một lần, và cần gửi 32bit theo big endian
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	0e1b      	lsrs	r3, r3, #24
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fea7 	bl	8000d2c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fea1 	bl	8000d2c <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));  // Argument[15..8]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe9b 	bl	8000d2c <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);         // Argument[7..0]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe96 	bl	8000d2c <SPI_TxByte>
    // CRC chỉ bắt buộc với CMD0 và CMD8, các lệnh khác có thể CRC bất kỳ
    if(cmd == CMD0) crc = 0x95;      // CRC đúng cho CMD0
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b40      	cmp	r3, #64	@ 0x40
 8001004:	d102      	bne.n	800100c <SD_SendCmd+0x5c>
 8001006:	2395      	movs	r3, #149	@ 0x95
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e007      	b.n	800101c <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87; // CRC đúng cho CMD8
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b48      	cmp	r3, #72	@ 0x48
 8001010:	d102      	bne.n	8001018 <SD_SendCmd+0x68>
 8001012:	2387      	movs	r3, #135	@ 0x87
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e001      	b.n	800101c <SD_SendCmd+0x6c>
    else crc = 1;                    // CRC bất kỳ
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
    SPI_TxByte(crc);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe84 	bl	8000d2c <SPI_TxByte>
    // Nếu là lệnh STOP_TRANSMISSION (CMD12), cần đọc bỏ 1 byte
    if (cmd == CMD12) SPI_RxByte();
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b4c      	cmp	r3, #76	@ 0x4c
 8001028:	d101      	bne.n	800102e <SD_SendCmd+0x7e>
 800102a:	f7ff fea3 	bl	8000d74 <SPI_RxByte>
    // Nhận phản hồi từ thẻ SD (tối đa 10 lần)
    uint8_t n = 10;
 800102e:	230a      	movs	r3, #10
 8001030:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 8001032:	f7ff fe9f 	bl	8000d74 <SPI_RxByte>
 8001036:	4603      	mov	r3, r0
 8001038:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 800103a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da05      	bge.n	800104e <SD_SendCmd+0x9e>
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	3b01      	subs	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f1      	bne.n	8001032 <SD_SendCmd+0x82>
    return res;
 800104e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SD_disk_initialize>:
 * 4. HÀM GIAO TIẾP VỚI FATFS (DISKIO)
 ********************************************/

/* Khởi tạo thẻ SD - phát hiện loại thẻ và chuẩn bị sử dụng */
DSTATUS SD_disk_initialize(uint8_t drv) 
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* Chỉ hỗ trợ drive 0 */
	if(drv) return STA_NOINIT;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SD_disk_initialize+0x14>
 8001068:	2301      	movs	r3, #1
 800106a:	e0d5      	b.n	8001218 <SD_disk_initialize+0x1c0>

	/* Kiểm tra có thẻ không */
	if(Stat & STA_NODISK) return Stat;
 800106c:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <SD_disk_initialize+0x2a>
 800107a:	4b69      	ldr	r3, [pc, #420]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	e0ca      	b.n	8001218 <SD_disk_initialize+0x1c0>

	/* Bật nguồn thẻ */
	SD_PowerOn();
 8001082:	f7ff feb3 	bl	8000dec <SD_PowerOn>

	/* Chọn thẻ */
	SELECT();
 8001086:	f7ff fe43 	bl	8000d10 <SELECT>

	/* Khởi tạo biến loại thẻ */
	type = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73bb      	strb	r3, [r7, #14]

	/* Gửi CMD0 để reset thẻ về trạng thái idle */
	if (SD_SendCmd(CMD0, 0) == 1)
 800108e:	2100      	movs	r1, #0
 8001090:	2040      	movs	r0, #64	@ 0x40
 8001092:	f7ff ff8d 	bl	8000fb0 <SD_SendCmd>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 80a5 	bne.w	80011e8 <SD_disk_initialize+0x190>
	{
		/* Timeout 1 giây cho quá trình khởi tạo */
		Timer1 = 100;
 800109e:	4b61      	ldr	r3, [pc, #388]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80010a0:	2264      	movs	r2, #100	@ 0x64
 80010a2:	801a      	strh	r2, [r3, #0]

		/* Kiểm tra SD V2+ bằng CMD8 */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010a4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80010a8:	2048      	movs	r0, #72	@ 0x48
 80010aa:	f7ff ff81 	bl	8000fb0 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d158      	bne.n	8001166 <SD_disk_initialize+0x10e>
		{
			/* Đọc OCR register (4 bytes) */
			for (n = 0; n < 4; n++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e00c      	b.n	80010d4 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 80010ba:	7bfc      	ldrb	r4, [r7, #15]
 80010bc:	f7ff fe5a 	bl	8000d74 <SPI_RxByte>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	f104 0310 	add.w	r3, r4, #16
 80010c8:	443b      	add	r3, r7
 80010ca:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d9ef      	bls.n	80010ba <SD_disk_initialize+0x62>
			}

			/* Kiểm tra voltage 2.7-3.6V và check pattern */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010da:	7abb      	ldrb	r3, [r7, #10]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 8083 	bne.w	80011e8 <SD_disk_initialize+0x190>
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2baa      	cmp	r3, #170	@ 0xaa
 80010e6:	d17f      	bne.n	80011e8 <SD_disk_initialize+0x190>
			{
				/* Khởi tạo SD V2+ với ACMD41 (HCS=1 hỗ trợ SDHC) */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010e8:	2100      	movs	r1, #0
 80010ea:	2077      	movs	r0, #119	@ 0x77
 80010ec:	f7ff ff60 	bl	8000fb0 <SD_SendCmd>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d807      	bhi.n	8001106 <SD_disk_initialize+0xae>
 80010f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010fa:	2069      	movs	r0, #105	@ 0x69
 80010fc:	f7ff ff58 	bl	8000fb0 <SD_SendCmd>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <SD_disk_initialize+0xba>
				} while (Timer1);
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <SD_disk_initialize+0x1cc>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1eb      	bne.n	80010e8 <SD_disk_initialize+0x90>
 8001110:	e000      	b.n	8001114 <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001112:	bf00      	nop

				/* Đọc OCR để kiểm tra CCS bit */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001114:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <SD_disk_initialize+0x1cc>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d064      	beq.n	80011e8 <SD_disk_initialize+0x190>
 800111e:	2100      	movs	r1, #0
 8001120:	207a      	movs	r0, #122	@ 0x7a
 8001122:	f7ff ff45 	bl	8000fb0 <SD_SendCmd>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d15d      	bne.n	80011e8 <SD_disk_initialize+0x190>
				{
					/* Đọc OCR */
					for (n = 0; n < 4; n++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e00c      	b.n	800114c <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001132:	7bfc      	ldrb	r4, [r7, #15]
 8001134:	f7ff fe1e 	bl	8000d74 <SPI_RxByte>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	f104 0310 	add.w	r3, r4, #16
 8001140:	443b      	add	r3, r7
 8001142:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d9ef      	bls.n	8001132 <SD_disk_initialize+0xda>
					}

					/* Phân loại: SDHC/SDXC (block) hoặc SDSC (byte) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001152:	7a3b      	ldrb	r3, [r7, #8]
 8001154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SD_disk_initialize+0x108>
 800115c:	230c      	movs	r3, #12
 800115e:	e000      	b.n	8001162 <SD_disk_initialize+0x10a>
 8001160:	2304      	movs	r3, #4
 8001162:	73bb      	strb	r3, [r7, #14]
 8001164:	e040      	b.n	80011e8 <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* Phân biệt SD V1 và MMC bằng CMD55 */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001166:	2100      	movs	r1, #0
 8001168:	2077      	movs	r0, #119	@ 0x77
 800116a:	f7ff ff21 	bl	8000fb0 <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b01      	cmp	r3, #1
 8001172:	d808      	bhi.n	8001186 <SD_disk_initialize+0x12e>
 8001174:	2100      	movs	r1, #0
 8001176:	2069      	movs	r0, #105	@ 0x69
 8001178:	f7ff ff1a 	bl	8000fb0 <SD_SendCmd>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d801      	bhi.n	8001186 <SD_disk_initialize+0x12e>
 8001182:	2302      	movs	r3, #2
 8001184:	e000      	b.n	8001188 <SD_disk_initialize+0x130>
 8001186:	2301      	movs	r3, #1
 8001188:	73bb      	strb	r3, [r7, #14]

			/* Khởi tạo theo loại thẻ */
			do
			{
				if (type == CT_SD1)
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d10e      	bne.n	80011ae <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* SD V1 dùng ACMD41 */
 8001190:	2100      	movs	r1, #0
 8001192:	2077      	movs	r0, #119	@ 0x77
 8001194:	f7ff ff0c 	bl	8000fb0 <SD_SendCmd>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d80e      	bhi.n	80011bc <SD_disk_initialize+0x164>
 800119e:	2100      	movs	r1, #0
 80011a0:	2069      	movs	r0, #105	@ 0x69
 80011a2:	f7ff ff05 	bl	8000fb0 <SD_SendCmd>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <SD_disk_initialize+0x164>
 80011ac:	e00d      	b.n	80011ca <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* MMC dùng CMD1 */
 80011ae:	2100      	movs	r1, #0
 80011b0:	2041      	movs	r0, #65	@ 0x41
 80011b2:	f7ff fefd 	bl	8000fb0 <SD_SendCmd>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <SD_disk_initialize+0x170>
				}

			} while (Timer1);
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1e1      	bne.n	800118a <SD_disk_initialize+0x132>
 80011c6:	e000      	b.n	80011ca <SD_disk_initialize+0x172>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* MMC dùng CMD1 */
 80011c8:	bf00      	nop

			/* Thiết lập block size = 512 byte cho SD V1/MMC */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <SD_disk_initialize+0x18c>
 80011d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d8:	2050      	movs	r0, #80	@ 0x50
 80011da:	f7ff fee9 	bl	8000fb0 <SD_SendCmd>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SD_disk_initialize+0x190>
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]
		}
	}

	/* Lưu loại thẻ */
	CardType = type;
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <SD_disk_initialize+0x1d0>)
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	7013      	strb	r3, [r2, #0]

	/* Bỏ chọn thẻ */
	DESELECT();
 80011ee:	f7ff fd96 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 80011f2:	f7ff fdbf 	bl	8000d74 <SPI_RxByte>

	/* Cập nhật trạng thái */
	if (type)
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <SD_disk_initialize+0x1b6>
	{
		Stat &= ~STA_NOINIT; /* Khởi tạo thành công */
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <SD_disk_initialize+0x1c8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e001      	b.n	8001212 <SD_disk_initialize+0x1ba>
	}
	else
	{
		SD_PowerOff(); /* Khởi tạo thất bại */
 800120e:	f7ff fe2f 	bl	8000e70 <SD_PowerOff>
	}

	return Stat;
 8001212:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <SD_disk_initialize+0x1c8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	20003ebe 	.word	0x20003ebe
 8001228:	20001518 	.word	0x20001518

0800122c <SD_disk_status>:

/* Trả về trạng thái thẻ SD */
DSTATUS SD_disk_status(uint8_t drv) 
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SD_disk_status+0x14>
 800123c:	2301      	movs	r3, #1
 800123e:	e002      	b.n	8001246 <SD_disk_status+0x1a>
	return Stat;
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SD_disk_status+0x28>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000

08001258 <SD_disk_read>:

/* Đọc sector từ thẻ SD */
DRESULT SD_disk_read(uint8_t pdrv, uint8_t* buff, uint32_t sector, unsigned int count) 
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
	/* Kiểm tra tham số */
	if (pdrv || !count) return RES_PARERR;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <SD_disk_read+0x1c>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <SD_disk_read+0x20>
 8001274:	2304      	movs	r3, #4
 8001276:	e057      	b.n	8001328 <SD_disk_read+0xd0>

	/* Kiểm tra thẻ đã khởi tạo chưa */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <SD_disk_read+0xd8>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SD_disk_read+0x32>
 8001286:	2303      	movs	r3, #3
 8001288:	e04e      	b.n	8001328 <SD_disk_read+0xd0>

	/* Chuyển địa chỉ sector thành byte cho SD V1/MMC */
	if (!(CardType & CT_SD2)) sector *= 512;
 800128a:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <SD_disk_read+0xdc>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <SD_disk_read+0x44>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	607b      	str	r3, [r7, #4]

	SELECT();
 800129c:	f7ff fd38 	bl	8000d10 <SELECT>

	if (count == 1)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d117      	bne.n	80012d6 <SD_disk_read+0x7e>
	{
		/* Đọc 1 block bằng CMD17 */
		if (SD_SendCmd(CMD17, sector) == 0) {
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2051      	movs	r0, #81	@ 0x51
 80012aa:	f7ff fe81 	bl	8000fb0 <SD_SendCmd>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <SD_disk_read+0x78>
			if (SD_RxDataBlock(buff, 512)) {
 80012b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f7ff fdf1 	bl	8000ea0 <SD_RxDataBlock>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <SD_disk_read+0x72>
				count = 0; /* Thành công */
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	e024      	b.n	8001314 <SD_disk_read+0xbc>
			} else {
				count = 1; /* Lỗi đọc data */
 80012ca:	2301      	movs	r3, #1
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	e021      	b.n	8001314 <SD_disk_read+0xbc>
			}
		} else {
			count = 1; /* Lỗi gửi lệnh */
 80012d0:	2301      	movs	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	e01e      	b.n	8001314 <SD_disk_read+0xbc>
		}
	}
	else
	{
		/* Đọc nhiều block bằng CMD18 */
		if (SD_SendCmd(CMD18, sector) == 0)
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	2052      	movs	r0, #82	@ 0x52
 80012da:	f7ff fe69 	bl	8000fb0 <SD_SendCmd>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d117      	bne.n	8001314 <SD_disk_read+0xbc>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80012e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f7ff fdd9 	bl	8000ea0 <SD_RxDataBlock>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00a      	beq.n	800130a <SD_disk_read+0xb2>
				buff += 512; /* Tăng buffer pointer */
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012fa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	3b01      	subs	r3, #1
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ed      	bne.n	80012e4 <SD_disk_read+0x8c>
 8001308:	e000      	b.n	800130c <SD_disk_read+0xb4>
				if (!SD_RxDataBlock(buff, 512)) break;
 800130a:	bf00      	nop

			/* Dừng truyền */
			SD_SendCmd(CMD12, 0);
 800130c:	2100      	movs	r1, #0
 800130e:	204c      	movs	r0, #76	@ 0x4c
 8001310:	f7ff fe4e 	bl	8000fb0 <SD_SendCmd>
		}
	}

	/* Bỏ chọn thẻ */
	DESELECT();
 8001314:	f7ff fd03 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 8001318:	f7ff fd2c 	bl	8000d74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	bf14      	ite	ne
 8001322:	2301      	movne	r3, #1
 8001324:	2300      	moveq	r3, #0
 8001326:	b2db      	uxtb	r3, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000000 	.word	0x20000000
 8001334:	20001518 	.word	0x20001518

08001338 <SD_disk_write>:

/* Ghi sector vào thẻ SD */
#if _USE_WRITE == 1
DRESULT SD_disk_write(uint8_t pdrv, const uint8_t* buff, uint32_t sector, unsigned int count) // count là số sector
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]
	/* Kiểm tra tham số */
	if (pdrv || !count) return RES_PARERR;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d102      	bne.n	8001354 <SD_disk_write+0x1c>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <SD_disk_write+0x20>
 8001354:	2304      	movs	r3, #4
 8001356:	e06b      	b.n	8001430 <SD_disk_write+0xf8>

	/* Kiểm tra thẻ đã khởi tạo chưa */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001358:	4b37      	ldr	r3, [pc, #220]	@ (8001438 <SD_disk_write+0x100>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SD_disk_write+0x32>
 8001366:	2303      	movs	r3, #3
 8001368:	e062      	b.n	8001430 <SD_disk_write+0xf8>

	/* Kiểm tra write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800136a:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <SD_disk_write+0x100>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SD_disk_write+0x44>
 8001378:	2302      	movs	r3, #2
 800137a:	e059      	b.n	8001430 <SD_disk_write+0xf8>

	/* Chuyển địa chỉ sector thành byte cho SD V1/MMC */
	if (!(CardType & CT_SD2)) sector *= 512;
 800137c:	4b2f      	ldr	r3, [pc, #188]	@ (800143c <SD_disk_write+0x104>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <SD_disk_write+0x56>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	025b      	lsls	r3, r3, #9
 800138c:	607b      	str	r3, [r7, #4]

	SELECT();
 800138e:	f7ff fcbf 	bl	8000d10 <SELECT>

	if (count == 1)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d110      	bne.n	80013ba <SD_disk_write+0x82>
	{
		/* Ghi 1 block bằng CMD24 */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001398:	6879      	ldr	r1, [r7, #4]
 800139a:	2058      	movs	r0, #88	@ 0x58
 800139c:	f7ff fe08 	bl	8000fb0 <SD_SendCmd>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d13a      	bne.n	800141c <SD_disk_write+0xe4>
 80013a6:	21fe      	movs	r1, #254	@ 0xfe
 80013a8:	68b8      	ldr	r0, [r7, #8]
 80013aa:	f7ff fda9 	bl	8000f00 <SD_TxDataBlock>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d033      	beq.n	800141c <SD_disk_write+0xe4>
			count = 0; /* Thành công */
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	e030      	b.n	800141c <SD_disk_write+0xe4>
	}
	else
	{
		/* Ghi nhiều block bằng CMD25 */
		if (CardType & CT_SD1)
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <SD_disk_write+0x104>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d007      	beq.n	80013d6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	2077      	movs	r0, #119	@ 0x77
 80013ca:	f7ff fdf1 	bl	8000fb0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* Pre-erase cho SD V1 */
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	2057      	movs	r0, #87	@ 0x57
 80013d2:	f7ff fded 	bl	8000fb0 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	2059      	movs	r0, #89	@ 0x59
 80013da:	f7ff fde9 	bl	8000fb0 <SD_SendCmd>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d11b      	bne.n	800141c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break; /* Multi-block token */
 80013e4:	21fc      	movs	r1, #252	@ 0xfc
 80013e6:	68b8      	ldr	r0, [r7, #8]
 80013e8:	f7ff fd8a 	bl	8000f00 <SD_TxDataBlock>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00a      	beq.n	8001408 <SD_disk_write+0xd0>
				buff += 512; /* Tăng buffer pointer */
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80013f8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ee      	bne.n	80013e4 <SD_disk_write+0xac>
 8001406:	e000      	b.n	800140a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break; /* Multi-block token */
 8001408:	bf00      	nop

			/* Gửi stop token */
			if(!SD_TxDataBlock(0, 0xFD))
 800140a:	21fd      	movs	r1, #253	@ 0xfd
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fd77 	bl	8000f00 <SD_TxDataBlock>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <SD_disk_write+0xe4>
			{
				count = 1; /* Lỗi stop */
 8001418:	2301      	movs	r3, #1
 800141a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Bỏ chọn thẻ */
	DESELECT();
 800141c:	f7ff fc7f 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 8001420:	f7ff fca8 	bl	8000d74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	20001518 	.word	0x20001518

08001440 <SD_disk_ioctl>:
#endif

/* ioctl */
DRESULT SD_disk_ioctl(uint8_t drv, uint8_t ctrl, void *buff) // ctrl: dạng lệnh, drv: số ổ đĩa vật lý, buff: vùng đệm nhận kết quả
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b08b      	sub	sp, #44	@ 0x2c
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	603a      	str	r2, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	460b      	mov	r3, r1
 800144e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	623b      	str	r3, [r7, #32]
	uint16_t csize;

	/* pdrv should be 0, since it is SD Card */
	if (drv) return RES_PARERR;
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SD_disk_ioctl+0x1e>
 800145a:	2304      	movs	r3, #4
 800145c:	e0af      	b.n	80015be <SD_disk_ioctl+0x17e>
	res = RES_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001464:	79bb      	ldrb	r3, [r7, #6]
 8001466:	2b05      	cmp	r3, #5
 8001468:	d124      	bne.n	80014b4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d012      	beq.n	8001498 <SD_disk_ioctl+0x58>
 8001472:	2b02      	cmp	r3, #2
 8001474:	dc1a      	bgt.n	80014ac <SD_disk_ioctl+0x6c>
 8001476:	2b00      	cmp	r3, #0
 8001478:	d002      	beq.n	8001480 <SD_disk_ioctl+0x40>
 800147a:	2b01      	cmp	r3, #1
 800147c:	d006      	beq.n	800148c <SD_disk_ioctl+0x4c>
 800147e:	e015      	b.n	80014ac <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001480:	f7ff fcf6 	bl	8000e70 <SD_PowerOff>
			res = RES_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800148a:	e096      	b.n	80015ba <SD_disk_ioctl+0x17a>
		case 1:
			SD_PowerOn();		/* Power On */
 800148c:	f7ff fcae 	bl	8000dec <SD_PowerOn>
			res = RES_OK;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001496:	e090      	b.n	80015ba <SD_disk_ioctl+0x17a>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	1c5c      	adds	r4, r3, #1
 800149c:	f7ff fcf4 	bl	8000e88 <SD_CheckPower>
 80014a0:	4603      	mov	r3, r0
 80014a2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80014aa:	e086      	b.n	80015ba <SD_disk_ioctl+0x17a>
		default:
			res = RES_PARERR;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014b2:	e082      	b.n	80015ba <SD_disk_ioctl+0x17a>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014b4:	4b44      	ldr	r3, [pc, #272]	@ (80015c8 <SD_disk_ioctl+0x188>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SD_disk_ioctl+0x86>
 80014c2:	2303      	movs	r3, #3
 80014c4:	e07b      	b.n	80015be <SD_disk_ioctl+0x17e>

		SELECT();
 80014c6:	f7ff fc23 	bl	8000d10 <SELECT>

		switch (ctrl)
 80014ca:	79bb      	ldrb	r3, [r7, #6]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d058      	beq.n	8001582 <SD_disk_ioctl+0x142>
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	dc67      	bgt.n	80015a4 <SD_disk_ioctl+0x164>
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d05c      	beq.n	8001592 <SD_disk_ioctl+0x152>
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d163      	bne.n	80015a4 <SD_disk_ioctl+0x164>
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80014dc:	2100      	movs	r1, #0
 80014de:	2049      	movs	r0, #73	@ 0x49
 80014e0:	f7ff fd66 	bl	8000fb0 <SD_SendCmd>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d160      	bne.n	80015ac <SD_disk_ioctl+0x16c>
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2110      	movs	r1, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fcd5 	bl	8000ea0 <SD_RxDataBlock>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d057      	beq.n	80015ac <SD_disk_ioctl+0x16c>
			{
				if ((csd[0] >> 6) == 1)					// csd: card specific data
 80014fc:	7b3b      	ldrb	r3, [r7, #12]
 80014fe:	099b      	lsrs	r3, r3, #6
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d10d      	bne.n	8001522 <SD_disk_ioctl+0xe2>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001506:	7d7b      	ldrb	r3, [r7, #21]
 8001508:	461a      	mov	r2, r3
 800150a:	7d3b      	ldrb	r3, [r7, #20]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b29b      	uxth	r3, r3
 8001510:	4413      	add	r3, r2
 8001512:	b29b      	uxth	r3, r3
 8001514:	3301      	adds	r3, #1
 8001516:	83bb      	strh	r3, [r7, #28]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001518:	8bbb      	ldrh	r3, [r7, #28]
 800151a:	029a      	lsls	r2, r3, #10
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e02b      	b.n	800157a <SD_disk_ioctl+0x13a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001522:	7c7b      	ldrb	r3, [r7, #17]
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	b2da      	uxtb	r2, r3
 800152a:	7dbb      	ldrb	r3, [r7, #22]
 800152c:	09db      	lsrs	r3, r3, #7
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4413      	add	r3, r2
 8001532:	b2da      	uxtb	r2, r3
 8001534:	7d7b      	ldrb	r3, [r7, #21]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0306 	and.w	r3, r3, #6
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4413      	add	r3, r2
 8001542:	b2db      	uxtb	r3, r3
 8001544:	3302      	adds	r3, #2
 8001546:	77fb      	strb	r3, [r7, #31]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001548:	7d3b      	ldrb	r3, [r7, #20]
 800154a:	099b      	lsrs	r3, r3, #6
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b29a      	uxth	r2, r3
 800155a:	7cbb      	ldrb	r3, [r7, #18]
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	b29b      	uxth	r3, r3
 8001560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001564:	b29b      	uxth	r3, r3
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	3301      	adds	r3, #1
 800156c:	83bb      	strh	r3, [r7, #28]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800156e:	8bba      	ldrh	r2, [r7, #28]
 8001570:	7ffb      	ldrb	r3, [r7, #31]
 8001572:	3b09      	subs	r3, #9
 8001574:	409a      	lsls	r2, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001580:	e014      	b.n	80015ac <SD_disk_ioctl+0x16c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001588:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001590:	e00f      	b.n	80015b2 <SD_disk_ioctl+0x172>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001592:	f7ff fc11 	bl	8000db8 <SD_ReadyWait>
 8001596:	4603      	mov	r3, r0
 8001598:	2bff      	cmp	r3, #255	@ 0xff
 800159a:	d109      	bne.n	80015b0 <SD_disk_ioctl+0x170>
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015a2:	e005      	b.n	80015b0 <SD_disk_ioctl+0x170>
//					*ptr++ = SPI_RxByte();
//				}
//				res = RES_OK;
//			}
		default:
			res = RES_PARERR;
 80015a4:	2304      	movs	r3, #4
 80015a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80015aa:	e002      	b.n	80015b2 <SD_disk_ioctl+0x172>
			break;
 80015ac:	bf00      	nop
 80015ae:	e000      	b.n	80015b2 <SD_disk_ioctl+0x172>
			break;
 80015b0:	bf00      	nop
		}

		DESELECT();
 80015b2:	f7ff fbb4 	bl	8000d1e <DESELECT>
		SPI_RxByte();
 80015b6:	f7ff fbdd 	bl	8000d74 <SPI_RxByte>
	}

	return res;
 80015ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80015be:	4618      	mov	r0, r3
 80015c0:	372c      	adds	r7, #44	@ 0x2c
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd90      	pop	{r4, r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000000 	.word	0x20000000

080015cc <SD_List_File>:
 * 5. HÀM THAO TÁC FILE/THƯ MỤC MỨC CAO
 ********************************************/

/* List- File Function */

void SD_List_File(void){
 80015cc:	b598      	push	{r3, r4, r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 80015d0:	2200      	movs	r2, #0
 80015d2:	4935      	ldr	r1, [pc, #212]	@ (80016a8 <SD_List_File+0xdc>)
 80015d4:	4835      	ldr	r0, [pc, #212]	@ (80016ac <SD_List_File+0xe0>)
 80015d6:	f00c f9ef 	bl	800d9b8 <f_mount>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <SD_List_File+0x1a>
	{
		Error_Handler();
 80015e0:	f000 fd66 	bl	80020b0 <Error_Handler>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
			}
			f_closedir(&dir);
		}
	}
}
 80015e4:	e05e      	b.n	80016a4 <SD_List_File+0xd8>
		strcpy(fileInfo.fname, (char*)sect);
 80015e6:	4932      	ldr	r1, [pc, #200]	@ (80016b0 <SD_List_File+0xe4>)
 80015e8:	4832      	ldr	r0, [pc, #200]	@ (80016b4 <SD_List_File+0xe8>)
 80015ea:	f00e fafd 	bl	800fbe8 <strcpy>
		fileInfo.fsize = sizeof(sect);
 80015ee:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <SD_List_File+0xec>)
 80015f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f4:	601a      	str	r2, [r3, #0]
		result = f_opendir(&dir, "/");				// mở thư mục gốc trên thẻ
 80015f6:	4931      	ldr	r1, [pc, #196]	@ (80016bc <SD_List_File+0xf0>)
 80015f8:	4831      	ldr	r0, [pc, #196]	@ (80016c0 <SD_List_File+0xf4>)
 80015fa:	f00d f84b 	bl	800e694 <f_opendir>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <SD_List_File+0xf8>)
 8001604:	701a      	strb	r2, [r3, #0]
		if (result == FR_OK)
 8001606:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <SD_List_File+0xf8>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d14a      	bne.n	80016a4 <SD_List_File+0xd8>
				result = f_readdir(&dir, &fileInfo);
 800160e:	492a      	ldr	r1, [pc, #168]	@ (80016b8 <SD_List_File+0xec>)
 8001610:	482b      	ldr	r0, [pc, #172]	@ (80016c0 <SD_List_File+0xf4>)
 8001612:	f00d f8d8 	bl	800e7c6 <f_readdir>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <SD_List_File+0xf8>)
 800161c:	701a      	strb	r2, [r3, #0]
				if (result==FR_OK && fileInfo.fname[0])		// kiểm tra đọc và lấy ký tự đầu tiên của file/dir
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <SD_List_File+0xf8>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d13b      	bne.n	800169e <SD_List_File+0xd2>
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <SD_List_File+0xec>)
 8001628:	7d9b      	ldrb	r3, [r3, #22]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d037      	beq.n	800169e <SD_List_File+0xd2>
					fn = fileInfo.fname; // Pointer to the LFN buffer
 800162e:	4b26      	ldr	r3, [pc, #152]	@ (80016c8 <SD_List_File+0xfc>)
 8001630:	4a20      	ldr	r2, [pc, #128]	@ (80016b4 <SD_List_File+0xe8>)
 8001632:	601a      	str	r2, [r3, #0]
					if(strlen(fn)) HAL_UART_Transmit(&huart1,(uint8_t*)fn,strlen(fn),0x1000);
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <SD_List_File+0xfc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00f      	beq.n	800165e <SD_List_File+0x92>
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <SD_List_File+0xfc>)
 8001640:	681c      	ldr	r4, [r3, #0]
 8001642:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <SD_List_File+0xfc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fdd2 	bl	80001f0 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	b29a      	uxth	r2, r3
 8001650:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001654:	4621      	mov	r1, r4
 8001656:	481d      	ldr	r0, [pc, #116]	@ (80016cc <SD_List_File+0x100>)
 8001658:	f003 fe9a 	bl	8005390 <HAL_UART_Transmit>
 800165c:	e00a      	b.n	8001674 <SD_List_File+0xa8>
					else HAL_UART_Transmit(&huart1,(uint8_t*)fileInfo.fname,strlen((char*)fileInfo.fname),0x1000);
 800165e:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <SD_List_File+0xe8>)
 8001660:	f7fe fdc6 	bl	80001f0 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	b29a      	uxth	r2, r3
 8001668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166c:	4911      	ldr	r1, [pc, #68]	@ (80016b4 <SD_List_File+0xe8>)
 800166e:	4817      	ldr	r0, [pc, #92]	@ (80016cc <SD_List_File+0x100>)
 8001670:	f003 fe8e 	bl	8005390 <HAL_UART_Transmit>
					if(fileInfo.fattrib&AM_DIR)				//nếu attribute là DIR thì in thêm DIR để phân biệt
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <SD_List_File+0xec>)
 8001676:	7a1b      	ldrb	r3, [r3, #8]
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <SD_List_File+0xc2>
						HAL_UART_Transmit(&huart1,(uint8_t*)"  [DIR]",7,0x1000);
 8001680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001684:	2207      	movs	r2, #7
 8001686:	4912      	ldr	r1, [pc, #72]	@ (80016d0 <SD_List_File+0x104>)
 8001688:	4810      	ldr	r0, [pc, #64]	@ (80016cc <SD_List_File+0x100>)
 800168a:	f003 fe81 	bl	8005390 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 800168e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001692:	2202      	movs	r2, #2
 8001694:	490f      	ldr	r1, [pc, #60]	@ (80016d4 <SD_List_File+0x108>)
 8001696:	480d      	ldr	r0, [pc, #52]	@ (80016cc <SD_List_File+0x100>)
 8001698:	f003 fe7a 	bl	8005390 <HAL_UART_Transmit>
				result = f_readdir(&dir, &fileInfo);
 800169c:	e7b7      	b.n	800160e <SD_List_File+0x42>
			f_closedir(&dir);
 800169e:	4808      	ldr	r0, [pc, #32]	@ (80016c0 <SD_List_File+0xf4>)
 80016a0:	f00d f86b 	bl	800e77a <f_closedir>
}
 80016a4:	bf00      	nop
 80016a6:	bd98      	pop	{r3, r4, r7, pc}
 80016a8:	20000188 	.word	0x20000188
 80016ac:	2000018c 	.word	0x2000018c
 80016b0:	200012dc 	.word	0x200012dc
 80016b4:	200011da 	.word	0x200011da
 80016b8:	200011c4 	.word	0x200011c4
 80016bc:	080104a8 	.word	0x080104a8
 80016c0:	200014e4 	.word	0x200014e4
 80016c4:	200014dc 	.word	0x200014dc
 80016c8:	200014e0 	.word	0x200014e0
 80016cc:	20001574 	.word	0x20001574
 80016d0:	080104ac 	.word	0x080104ac
 80016d4:	080104b4 	.word	0x080104b4

080016d8 <SD_creatSubDir>:
/* Hàm tạo thư mục */

void SD_creatSubDir(char* filename)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 80016e0:	2200      	movs	r2, #0
 80016e2:	4918      	ldr	r1, [pc, #96]	@ (8001744 <SD_creatSubDir+0x6c>)
 80016e4:	4818      	ldr	r0, [pc, #96]	@ (8001748 <SD_creatSubDir+0x70>)
 80016e6:	f00c f967 	bl	800d9b8 <f_mount>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d002      	beq.n	80016f6 <SD_creatSubDir+0x1e>
	{
		Error_Handler();
 80016f0:	f000 fcde 	bl	80020b0 <Error_Handler>
				break;
			default:
				Error_Handler();
		}
	}
}
 80016f4:	e021      	b.n	800173a <SD_creatSubDir+0x62>
		res = f_stat(filename,&fileInfo);
 80016f6:	4915      	ldr	r1, [pc, #84]	@ (800174c <SD_creatSubDir+0x74>)
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f00d f8a1 	bl	800e840 <f_stat>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <SD_creatSubDir+0x78>)
 8001704:	701a      	strb	r2, [r3, #0]
		switch(res)
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <SD_creatSubDir+0x78>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d012      	beq.n	8001734 <SD_creatSubDir+0x5c>
 800170e:	2b04      	cmp	r3, #4
 8001710:	d10d      	bne.n	800172e <SD_creatSubDir+0x56>
				res = f_mkdir(filename);				// tạo thư mục mới nếu chưa có
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f00d fa2d 	bl	800eb72 <f_mkdir>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <SD_creatSubDir+0x78>)
 800171e:	701a      	strb	r2, [r3, #0]
				if(res != FR_OK) Error_Handler();
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <SD_creatSubDir+0x78>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <SD_creatSubDir+0x60>
 8001728:	f000 fcc2 	bl	80020b0 <Error_Handler>
				break;
 800172c:	e004      	b.n	8001738 <SD_creatSubDir+0x60>
				Error_Handler();
 800172e:	f000 fcbf 	bl	80020b0 <Error_Handler>
}
 8001732:	e002      	b.n	800173a <SD_creatSubDir+0x62>
				break;
 8001734:	bf00      	nop
 8001736:	e000      	b.n	800173a <SD_creatSubDir+0x62>
				break;
 8001738:	bf00      	nop
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000188 	.word	0x20000188
 8001748:	2000018c 	.word	0x2000018c
 800174c:	200011c4 	.word	0x200011c4
 8001750:	200014dd 	.word	0x200014dd

08001754 <delete_node>:
FRESULT delete_node (
    TCHAR* path,    /* Path name buffer with the sub-directory to delete */
    UINT sz_buff,   /* Size of path name buffer (items) */
    FILINFO* fno    /* Name read buffer */
)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b094      	sub	sp, #80	@ 0x50
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
    UINT i, j;
    FRESULT fr;
    DIR dir;


    fr = f_opendir(&dir, path); /* Open the directory */
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	68f9      	ldr	r1, [r7, #12]
 8001766:	4618      	mov	r0, r3
 8001768:	f00c ff94 	bl	800e694 <f_opendir>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (fr != FR_OK) return fr;
 8001772:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <delete_node+0x2c>
 800177a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800177e:	e076      	b.n	800186e <delete_node+0x11a>

    for (i = 0; path[i]; i++) ; /* Get current path length */
 8001780:	2300      	movs	r3, #0
 8001782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001784:	e002      	b.n	800178c <delete_node+0x38>
 8001786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001788:	3301      	adds	r3, #1
 800178a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f6      	bne.n	8001786 <delete_node+0x32>
    path[i++] = _T('/');
 8001798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800179a:	1c5a      	adds	r2, r3, #1
 800179c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4413      	add	r3, r2
 80017a2:	222f      	movs	r2, #47	@ 0x2f
 80017a4:	701a      	strb	r2, [r3, #0]

    for (;;) {
        fr = f_readdir(&dir, fno);  /* Get a directory item */
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f00d f80a 	bl	800e7c6 <f_readdir>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (fr != FR_OK || !fno->fname[0]) break;   /* End of directory? */
 80017b8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d13d      	bne.n	800183c <delete_node+0xe8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7d9b      	ldrb	r3, [r3, #22]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d039      	beq.n	800183c <delete_node+0xe8>
        j = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	64bb      	str	r3, [r7, #72]	@ 0x48
        do {    /* Make a path name */
            if (i + j >= sz_buff) { /* Buffer over flow? */
 80017cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017d0:	4413      	add	r3, r2
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d803      	bhi.n	80017e0 <delete_node+0x8c>
                fr = 100; break;    /* Fails with 100 when buffer overflow, suppose to debug*/
 80017d8:	2364      	movs	r3, #100	@ 0x64
 80017da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80017de:	e012      	b.n	8001806 <delete_node+0xb2>
            }
            path[i + j] = fno->fname[j];			// ghép frame vào cuối path
 80017e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017e4:	4413      	add	r3, r2
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017ee:	440a      	add	r2, r1
 80017f0:	3216      	adds	r2, #22
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	701a      	strb	r2, [r3, #0]
        } while (fno->fname[j++]);
 80017f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	7d9b      	ldrb	r3, [r3, #22]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1e2      	bne.n	80017cc <delete_node+0x78>
        if (fno->fattrib & AM_DIR) {    /* Item is a directory */
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	7a1b      	ldrb	r3, [r3, #8]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <delete_node+0xd0>
            fr = delete_node(path, sz_buff, fno);
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	f7ff ff9c 	bl	8001754 <delete_node>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001822:	e005      	b.n	8001830 <delete_node+0xdc>
        } else {                        /* Item is a file */
            fr = f_unlink(path);
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f00d f8f9 	bl	800ea1c <f_unlink>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
        if (fr != FR_OK) break;
 8001830:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001834:	2b00      	cmp	r3, #0
 8001836:	d100      	bne.n	800183a <delete_node+0xe6>
        fr = f_readdir(&dir, fno);  /* Get a directory item */
 8001838:	e7b5      	b.n	80017a6 <delete_node+0x52>
        if (fr != FR_OK) break;
 800183a:	bf00      	nop
    }

    path[--i] = 0;  /* Restore the path name */
 800183c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800183e:	3b01      	subs	r3, #1
 8001840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001846:	4413      	add	r3, r2
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
    f_closedir(&dir);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4618      	mov	r0, r3
 8001852:	f00c ff92 	bl	800e77a <f_closedir>

    if (fr == FR_OK) fr = f_unlink(path);  /* Delete the empty directory */
 8001856:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800185a:	2b00      	cmp	r3, #0
 800185c:	d105      	bne.n	800186a <delete_node+0x116>
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f00d f8dc 	bl	800ea1c <f_unlink>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    return fr;
 800186a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800186e:	4618      	mov	r0, r3
 8001870:	3750      	adds	r7, #80	@ 0x50
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <SD_deleteFolder>:
//-------------------------------------------------- Ham xoa thu muc
void SD_deleteFolder(char* foldername)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b0d0      	sub	sp, #320	@ 0x140
 800187c:	af00      	add	r7, sp, #0
 800187e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001882:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001886:	6018      	str	r0, [r3, #0]
	TCHAR buff[256];
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 8001888:	2200      	movs	r2, #0
 800188a:	492b      	ldr	r1, [pc, #172]	@ (8001938 <SD_deleteFolder+0xc0>)
 800188c:	482b      	ldr	r0, [pc, #172]	@ (800193c <SD_deleteFolder+0xc4>)
 800188e:	f00c f893 	bl	800d9b8 <f_mount>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <SD_deleteFolder+0x26>
	{
		Error_Handler();
 8001898:	f000 fc0a 	bl	80020b0 <Error_Handler>
			{
				send_uart("Failed to delete the directory\r\n");
			}
		}
	}
}
 800189c:	e046      	b.n	800192c <SD_deleteFolder+0xb4>
		char path[50] = {0};
 800189e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	3304      	adds	r3, #4
 80018ac:	222e      	movs	r2, #46	@ 0x2e
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f00e f955 	bl	800fb60 <memset>
		strcpy(path,"0:");
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <SD_deleteFolder+0xc8>)
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	4611      	mov	r1, r2
 80018c0:	8019      	strh	r1, [r3, #0]
 80018c2:	3302      	adds	r3, #2
 80018c4:	0c12      	lsrs	r2, r2, #16
 80018c6:	701a      	strb	r2, [r3, #0]
		strcat(path,foldername);			// nối thêm foldername vào path
 80018c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80018d0:	f107 020c 	add.w	r2, r7, #12
 80018d4:	6819      	ldr	r1, [r3, #0]
 80018d6:	4610      	mov	r0, r2
 80018d8:	f00e f94a 	bl	800fb70 <strcat>
		res = f_opendir(&dir, path);
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4619      	mov	r1, r3
 80018e2:	4818      	ldr	r0, [pc, #96]	@ (8001944 <SD_deleteFolder+0xcc>)
 80018e4:	f00c fed6 	bl	800e694 <f_opendir>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b16      	ldr	r3, [pc, #88]	@ (8001948 <SD_deleteFolder+0xd0>)
 80018ee:	701a      	strb	r2, [r3, #0]
		if (res != FR_OK)
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <SD_deleteFolder+0xd0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <SD_deleteFolder+0x86>
			Error_Handler();
 80018f8:	f000 fbda 	bl	80020b0 <Error_Handler>
}
 80018fc:	e016      	b.n	800192c <SD_deleteFolder+0xb4>
			res = delete_node(path,sizeof(buff),&fileInfo);
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4a12      	ldr	r2, [pc, #72]	@ (800194c <SD_deleteFolder+0xd4>)
 8001904:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff23 	bl	8001754 <delete_node>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <SD_deleteFolder+0xd0>)
 8001914:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK)
 8001916:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <SD_deleteFolder+0xd0>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d103      	bne.n	8001926 <SD_deleteFolder+0xae>
				send_uart("The directory and its contents have successfully been deleted\r\n");
 800191e:	480c      	ldr	r0, [pc, #48]	@ (8001950 <SD_deleteFolder+0xd8>)
 8001920:	f000 f81a 	bl	8001958 <send_uart>
}
 8001924:	e002      	b.n	800192c <SD_deleteFolder+0xb4>
				send_uart("Failed to delete the directory\r\n");
 8001926:	480b      	ldr	r0, [pc, #44]	@ (8001954 <SD_deleteFolder+0xdc>)
 8001928:	f000 f816 	bl	8001958 <send_uart>
}
 800192c:	bf00      	nop
 800192e:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000188 	.word	0x20000188
 800193c:	2000018c 	.word	0x2000018c
 8001940:	080104b8 	.word	0x080104b8
 8001944:	200014e4 	.word	0x200014e4
 8001948:	200014dd 	.word	0x200014dd
 800194c:	200011c4 	.word	0x200011c4
 8001950:	080104bc 	.word	0x080104bc
 8001954:	080104fc 	.word	0x080104fc

08001958 <send_uart>:
char namebuf[128];
char filebuf[1024];
FRESULT fres;

void send_uart(char *string)
{
 8001958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	466b      	mov	r3, sp
 8001964:	469a      	mov	sl, r3
	uint16_t len = strlen(string);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7fe fc42 	bl	80001f0 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	82fb      	strh	r3, [r7, #22]
  char buf1[len];
 8001970:	8afe      	ldrh	r6, [r7, #22]
 8001972:	4633      	mov	r3, r6
 8001974:	3b01      	subs	r3, #1
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	b2b3      	uxth	r3, r6
 800197a:	2200      	movs	r2, #0
 800197c:	4698      	mov	r8, r3
 800197e:	4691      	mov	r9, r2
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	f04f 0300 	mov.w	r3, #0
 8001988:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800198c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001990:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001994:	b2b3      	uxth	r3, r6
 8001996:	2200      	movs	r2, #0
 8001998:	461c      	mov	r4, r3
 800199a:	4615      	mov	r5, r2
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	00eb      	lsls	r3, r5, #3
 80019a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019aa:	00e2      	lsls	r2, r4, #3
 80019ac:	4633      	mov	r3, r6
 80019ae:	3307      	adds	r3, #7
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	ebad 0d03 	sub.w	sp, sp, r3
 80019b8:	466b      	mov	r3, sp
 80019ba:	3300      	adds	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  memset(buf1, 0, sizeof(buf1));
 80019be:	4633      	mov	r3, r6
 80019c0:	461a      	mov	r2, r3
 80019c2:	2100      	movs	r1, #0
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f00e f8cb 	bl	800fb60 <memset>
  strcpy(buf1, string);
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f00e f90b 	bl	800fbe8 <strcpy>
  HAL_UART_Transmit(&huart1,(char*) buf1, sizeof(buf1), 2000);
 80019d2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80019d6:	4632      	mov	r2, r6
 80019d8:	68f9      	ldr	r1, [r7, #12]
 80019da:	4804      	ldr	r0, [pc, #16]	@ (80019ec <send_uart+0x94>)
 80019dc:	f003 fcd8 	bl	8005390 <HAL_UART_Transmit>
 80019e0:	46d5      	mov	sp, sl

}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ec:	20001574 	.word	0x20001574

080019f0 <bufsize>:

int bufsize(char *buf){
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	int i=0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0' )i++;
 80019fc:	e002      	b.n	8001a04 <bufsize+0x14>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	607a      	str	r2, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f6      	bne.n	80019fe <bufsize+0xe>

	return i;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <clear_buffer>:

void clear_buffer (void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++) buffer[i] = '\0';
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	e007      	b.n	8001a3c <clear_buffer+0x1c>
 8001a2c:	4a09      	ldr	r2, [pc, #36]	@ (8001a54 <clear_buffer+0x34>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	dbf3      	blt.n	8001a2c <clear_buffer+0xc>
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20003628 	.word	0x20003628

08001a58 <uart_receive_string>:

// Hàm nhận chuỗi từ UART (blocking, kết thúc khi gặp '!' hoặc '\n')
void uart_receive_string(char* buf, uint16_t maxlen) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	81fb      	strh	r3, [r7, #14]
    char c;
    while (i < maxlen - 1) {
 8001a68:	e01c      	b.n	8001aa4 <uart_receive_string+0x4c>
        HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8001a6a:	f107 010d 	add.w	r1, r7, #13
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	2201      	movs	r2, #1
 8001a74:	4817      	ldr	r0, [pc, #92]	@ (8001ad4 <uart_receive_string+0x7c>)
 8001a76:	f003 fd16 	bl	80054a6 <HAL_UART_Receive>
        if (c == '!' || c == '\n') break;
 8001a7a:	7b7b      	ldrb	r3, [r7, #13]
 8001a7c:	2b21      	cmp	r3, #33	@ 0x21
 8001a7e:	d016      	beq.n	8001aae <uart_receive_string+0x56>
 8001a80:	7b7b      	ldrb	r3, [r7, #13]
 8001a82:	2b0a      	cmp	r3, #10
 8001a84:	d013      	beq.n	8001aae <uart_receive_string+0x56>
        buf[i++] = c;
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	81fa      	strh	r2, [r7, #14]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	7b7a      	ldrb	r2, [r7, #13]
 8001a94:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 100); // Echo lại ký tự
 8001a96:	f107 010d 	add.w	r1, r7, #13
 8001a9a:	2364      	movs	r3, #100	@ 0x64
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <uart_receive_string+0x7c>)
 8001aa0:	f003 fc76 	bl	8005390 <HAL_UART_Transmit>
    while (i < maxlen - 1) {
 8001aa4:	89fa      	ldrh	r2, [r7, #14]
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	dbdd      	blt.n	8001a6a <uart_receive_string+0x12>
    }
    buf[i] = '\0';
 8001aae:	89fb      	ldrh	r3, [r7, #14]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
    char crlf[2] = "\r\n";
 8001ab8:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001abc:	813b      	strh	r3, [r7, #8]
    HAL_UART_Transmit(&huart1, (uint8_t*)crlf, 2, 100);
 8001abe:	f107 0108 	add.w	r1, r7, #8
 8001ac2:	2364      	movs	r3, #100	@ 0x64
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <uart_receive_string+0x7c>)
 8001ac8:	f003 fc62 	bl	8005390 <HAL_UART_Transmit>
}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20001574 	.word	0x20001574

08001ad8 <uart_receive_char>:

// Hàm nhận 1 ký tự từ UART (dùng cho chọn option)
char uart_receive_char(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
    char c;
    HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8001ade:	1df9      	adds	r1, r7, #7
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	480b      	ldr	r0, [pc, #44]	@ (8001b14 <uart_receive_char+0x3c>)
 8001ae8:	f003 fcdd 	bl	80054a6 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 100); // Echo lại ký tự
 8001aec:	1df9      	adds	r1, r7, #7
 8001aee:	2364      	movs	r3, #100	@ 0x64
 8001af0:	2201      	movs	r2, #1
 8001af2:	4808      	ldr	r0, [pc, #32]	@ (8001b14 <uart_receive_char+0x3c>)
 8001af4:	f003 fc4c 	bl	8005390 <HAL_UART_Transmit>
    char crlf[2] = "\r\n";
 8001af8:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001afc:	80bb      	strh	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)crlf, 2, 100);
 8001afe:	1d39      	adds	r1, r7, #4
 8001b00:	2364      	movs	r3, #100	@ 0x64
 8001b02:	2202      	movs	r2, #2
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <uart_receive_char+0x3c>)
 8001b06:	f003 fc43 	bl	8005390 <HAL_UART_Transmit>
    return c;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20001574 	.word	0x20001574

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b092      	sub	sp, #72	@ 0x48
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1e:	f000 fc97 	bl	8002450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b22:	f000 f9d3 	bl	8001ecc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b26:	f000 fa9b 	bl	8002060 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b2a:	f000 fa39 	bl	8001fa0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001b2e:	f000 fa6d 	bl	800200c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001b32:	f7ff f8d3 	bl	8000cdc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001b36:	f00d fae7 	bl	800f108 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001b3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b3e:	f000 fcf9 	bl	8002534 <HAL_Delay>
  // Mount the SD card

    fresult = f_mount(&fs, "/", 1);
 8001b42:	2201      	movs	r2, #1
 8001b44:	49b2      	ldr	r1, [pc, #712]	@ (8001e10 <main+0x2f8>)
 8001b46:	48b3      	ldr	r0, [pc, #716]	@ (8001e14 <main+0x2fc>)
 8001b48:	f00b ff36 	bl	800d9b8 <f_mount>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4bb1      	ldr	r3, [pc, #708]	@ (8001e18 <main+0x300>)
 8001b52:	701a      	strb	r2, [r3, #0]
      	if (fresult != FR_OK) send_uart ("ERROR in mounting SD CARD...\n\n");
 8001b54:	4bb0      	ldr	r3, [pc, #704]	@ (8001e18 <main+0x300>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <main+0x4c>
 8001b5c:	48af      	ldr	r0, [pc, #700]	@ (8001e1c <main+0x304>)
 8001b5e:	f7ff fefb 	bl	8001958 <send_uart>
 8001b62:	e002      	b.n	8001b6a <main+0x52>
      	else send_uart("SD CARD mounted successfully...\n\n");
 8001b64:	48ae      	ldr	r0, [pc, #696]	@ (8001e20 <main+0x308>)
 8001b66:	f7ff fef7 	bl	8001958 <send_uart>


      	/*************** Card capacity details ********************/

      	/* Check free space */
      	f_getfree("", &fre_clust, &pfs);
 8001b6a:	4aae      	ldr	r2, [pc, #696]	@ (8001e24 <main+0x30c>)
 8001b6c:	49ae      	ldr	r1, [pc, #696]	@ (8001e28 <main+0x310>)
 8001b6e:	48af      	ldr	r0, [pc, #700]	@ (8001e2c <main+0x314>)
 8001b70:	f00c fe9f 	bl	800e8b2 <f_getfree>

      	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001b74:	4bab      	ldr	r3, [pc, #684]	@ (8001e24 <main+0x30c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	3b02      	subs	r3, #2
 8001b7c:	4aa9      	ldr	r2, [pc, #676]	@ (8001e24 <main+0x30c>)
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	8952      	ldrh	r2, [r2, #10]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fdf6 	bl	8000778 <__aeabi_ui2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4ba7      	ldr	r3, [pc, #668]	@ (8001e30 <main+0x318>)
 8001b92:	f7fe fb85 	bl	80002a0 <__aeabi_dmul>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f7fe fe65 	bl	800086c <__aeabi_d2uiz>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4aa3      	ldr	r2, [pc, #652]	@ (8001e34 <main+0x31c>)
 8001ba6:	6013      	str	r3, [r2, #0]
      	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8001ba8:	4ba2      	ldr	r3, [pc, #648]	@ (8001e34 <main+0x31c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	49a2      	ldr	r1, [pc, #648]	@ (8001e38 <main+0x320>)
 8001bb0:	48a2      	ldr	r0, [pc, #648]	@ (8001e3c <main+0x324>)
 8001bb2:	f00d ffb5 	bl	800fb20 <siprintf>
      	send_uart(buffer);
 8001bb6:	48a1      	ldr	r0, [pc, #644]	@ (8001e3c <main+0x324>)
 8001bb8:	f7ff fece 	bl	8001958 <send_uart>
      	clear_buffer();
 8001bbc:	f7ff ff30 	bl	8001a20 <clear_buffer>
      	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001bc0:	4b98      	ldr	r3, [pc, #608]	@ (8001e24 <main+0x30c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	895b      	ldrh	r3, [r3, #10]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b97      	ldr	r3, [pc, #604]	@ (8001e28 <main+0x310>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fdd1 	bl	8000778 <__aeabi_ui2d>
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	4b95      	ldr	r3, [pc, #596]	@ (8001e30 <main+0x318>)
 8001bdc:	f7fe fb60 	bl	80002a0 <__aeabi_dmul>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	f7fe fe40 	bl	800086c <__aeabi_d2uiz>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4a94      	ldr	r2, [pc, #592]	@ (8001e40 <main+0x328>)
 8001bf0:	6013      	str	r3, [r2, #0]
      	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001bf2:	4b93      	ldr	r3, [pc, #588]	@ (8001e40 <main+0x328>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4992      	ldr	r1, [pc, #584]	@ (8001e44 <main+0x32c>)
 8001bfa:	4890      	ldr	r0, [pc, #576]	@ (8001e3c <main+0x324>)
 8001bfc:	f00d ff90 	bl	800fb20 <siprintf>
      	send_uart(buffer);
 8001c00:	488e      	ldr	r0, [pc, #568]	@ (8001e3c <main+0x324>)
 8001c02:	f7ff fea9 	bl	8001958 <send_uart>
      	clear_buffer();
 8001c06:	f7ff ff0b 	bl	8001a20 <clear_buffer>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
	  send_uart("==== SD Card Menu ====\r\n");
 8001c0a:	488f      	ldr	r0, [pc, #572]	@ (8001e48 <main+0x330>)
 8001c0c:	f7ff fea4 	bl	8001958 <send_uart>
	  	       send_uart("0. Stop program\r\n");
 8001c10:	488e      	ldr	r0, [pc, #568]	@ (8001e4c <main+0x334>)
 8001c12:	f7ff fea1 	bl	8001958 <send_uart>
	  	       send_uart("1. List files\r\n");
 8001c16:	488e      	ldr	r0, [pc, #568]	@ (8001e50 <main+0x338>)
 8001c18:	f7ff fe9e 	bl	8001958 <send_uart>
	  	       send_uart("2. Create directory\r\n");
 8001c1c:	488d      	ldr	r0, [pc, #564]	@ (8001e54 <main+0x33c>)
 8001c1e:	f7ff fe9b 	bl	8001958 <send_uart>
	  	       send_uart("3. Delete directory\r\n");
 8001c22:	488d      	ldr	r0, [pc, #564]	@ (8001e58 <main+0x340>)
 8001c24:	f7ff fe98 	bl	8001958 <send_uart>
	  	       send_uart("4. Create file \r\n");
 8001c28:	488c      	ldr	r0, [pc, #560]	@ (8001e5c <main+0x344>)
 8001c2a:	f7ff fe95 	bl	8001958 <send_uart>
	  	       send_uart("5. Delete file\r\n");
 8001c2e:	488c      	ldr	r0, [pc, #560]	@ (8001e60 <main+0x348>)
 8001c30:	f7ff fe92 	bl	8001958 <send_uart>
	  	       send_uart("6. Update an existing file\r\n");
 8001c34:	488b      	ldr	r0, [pc, #556]	@ (8001e64 <main+0x34c>)
 8001c36:	f7ff fe8f 	bl	8001958 <send_uart>
	  	       send_uart("Please enter option number: ");
 8001c3a:	488b      	ldr	r0, [pc, #556]	@ (8001e68 <main+0x350>)
 8001c3c:	f7ff fe8c 	bl	8001958 <send_uart>

	  	       char opt = uart_receive_char();
 8001c40:	f7ff ff4a 	bl	8001ad8 <uart_receive_char>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	  	       switch (opt) {
 8001c4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001c4e:	3b30      	subs	r3, #48	@ 0x30
 8001c50:	2b06      	cmp	r3, #6
 8001c52:	f200 80d7 	bhi.w	8001e04 <main+0x2ec>
 8001c56:	a201      	add	r2, pc, #4	@ (adr r2, 8001c5c <main+0x144>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c79 	.word	0x08001c79
 8001c60:	08001c83 	.word	0x08001c83
 8001c64:	08001c8f 	.word	0x08001c8f
 8001c68:	08001cab 	.word	0x08001cab
 8001c6c:	08001cc7 	.word	0x08001cc7
 8001c70:	08001d41 	.word	0x08001d41
 8001c74:	08001d95 	.word	0x08001d95
	  	           case '0':
	  	               send_uart("Stopping program.\r\n");
 8001c78:	487c      	ldr	r0, [pc, #496]	@ (8001e6c <main+0x354>)
 8001c7a:	f7ff fe6d 	bl	8001958 <send_uart>
	  	               while(1); // Dừng chương trình
 8001c7e:	bf00      	nop
 8001c80:	e7fd      	b.n	8001c7e <main+0x166>
	  	               break;
	  	           case '1':
	  	               send_uart("Files on SD card:\r\n");
 8001c82:	487b      	ldr	r0, [pc, #492]	@ (8001e70 <main+0x358>)
 8001c84:	f7ff fe68 	bl	8001958 <send_uart>
	  	               SD_List_File();
 8001c88:	f7ff fca0 	bl	80015cc <SD_List_File>
	  	               break;
 8001c8c:	e0be      	b.n	8001e0c <main+0x2f4>
	  	           case '2':
	  	               send_uart("Please enter directory name: ");
 8001c8e:	4879      	ldr	r0, [pc, #484]	@ (8001e74 <main+0x35c>)
 8001c90:	f7ff fe62 	bl	8001958 <send_uart>
	  	               uart_receive_string(namebuf, sizeof(namebuf));
 8001c94:	2180      	movs	r1, #128	@ 0x80
 8001c96:	4878      	ldr	r0, [pc, #480]	@ (8001e78 <main+0x360>)
 8001c98:	f7ff fede 	bl	8001a58 <uart_receive_string>
	  	               SD_creatSubDir(namebuf);
 8001c9c:	4876      	ldr	r0, [pc, #472]	@ (8001e78 <main+0x360>)
 8001c9e:	f7ff fd1b 	bl	80016d8 <SD_creatSubDir>
	  	               send_uart("Directory created!\r\n");
 8001ca2:	4876      	ldr	r0, [pc, #472]	@ (8001e7c <main+0x364>)
 8001ca4:	f7ff fe58 	bl	8001958 <send_uart>
	  	               break;
 8001ca8:	e0b0      	b.n	8001e0c <main+0x2f4>
	  	           case '3':
	  	               send_uart("Please enter directory name to delete: ");
 8001caa:	4875      	ldr	r0, [pc, #468]	@ (8001e80 <main+0x368>)
 8001cac:	f7ff fe54 	bl	8001958 <send_uart>
	  	               uart_receive_string(namebuf, sizeof(namebuf));
 8001cb0:	2180      	movs	r1, #128	@ 0x80
 8001cb2:	4871      	ldr	r0, [pc, #452]	@ (8001e78 <main+0x360>)
 8001cb4:	f7ff fed0 	bl	8001a58 <uart_receive_string>
	  	               SD_deleteFolder(namebuf);
 8001cb8:	486f      	ldr	r0, [pc, #444]	@ (8001e78 <main+0x360>)
 8001cba:	f7ff fddd 	bl	8001878 <SD_deleteFolder>
	  	               send_uart("Directory deleted!\r\n");
 8001cbe:	4871      	ldr	r0, [pc, #452]	@ (8001e84 <main+0x36c>)
 8001cc0:	f7ff fe4a 	bl	8001958 <send_uart>
	  	               break;
 8001cc4:	e0a2      	b.n	8001e0c <main+0x2f4>
	  	           case '4':
	  	               send_uart("Please enter file name to create: ");
 8001cc6:	4870      	ldr	r0, [pc, #448]	@ (8001e88 <main+0x370>)
 8001cc8:	f7ff fe46 	bl	8001958 <send_uart>
	  	               uart_receive_string(namebuf, sizeof(namebuf));
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	486a      	ldr	r0, [pc, #424]	@ (8001e78 <main+0x360>)
 8001cd0:	f7ff fec2 	bl	8001a58 <uart_receive_string>
	  	               fres = f_open(&fil, namebuf, FA_CREATE_ALWAYS | FA_WRITE);
 8001cd4:	220a      	movs	r2, #10
 8001cd6:	4968      	ldr	r1, [pc, #416]	@ (8001e78 <main+0x360>)
 8001cd8:	486c      	ldr	r0, [pc, #432]	@ (8001e8c <main+0x374>)
 8001cda:	f00b feb3 	bl	800da44 <f_open>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b6b      	ldr	r3, [pc, #428]	@ (8001e90 <main+0x378>)
 8001ce4:	701a      	strb	r2, [r3, #0]
	  	               if (fres == FR_OK) {
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e90 <main+0x378>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d124      	bne.n	8001d38 <main+0x220>
	  	                   send_uart("Enter content (end with !):\r\n");
 8001cee:	4869      	ldr	r0, [pc, #420]	@ (8001e94 <main+0x37c>)
 8001cf0:	f7ff fe32 	bl	8001958 <send_uart>

	  	                   uart_receive_string(filebuf, sizeof(filebuf));
 8001cf4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cf8:	4867      	ldr	r0, [pc, #412]	@ (8001e98 <main+0x380>)
 8001cfa:	f7ff fead 	bl	8001a58 <uart_receive_string>
	  	                   fres = f_write(&fil, filebuf, bufsize(filebuf), &bw);
 8001cfe:	4866      	ldr	r0, [pc, #408]	@ (8001e98 <main+0x380>)
 8001d00:	f7ff fe76 	bl	80019f0 <bufsize>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b64      	ldr	r3, [pc, #400]	@ (8001e9c <main+0x384>)
 8001d0a:	4963      	ldr	r1, [pc, #396]	@ (8001e98 <main+0x380>)
 8001d0c:	485f      	ldr	r0, [pc, #380]	@ (8001e8c <main+0x374>)
 8001d0e:	f00c f861 	bl	800ddd4 <f_write>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b5e      	ldr	r3, [pc, #376]	@ (8001e90 <main+0x378>)
 8001d18:	701a      	strb	r2, [r3, #0]
	  	                   if (fres == FR_OK) send_uart("File created and written!\r\n");
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e90 <main+0x378>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <main+0x212>
 8001d22:	485f      	ldr	r0, [pc, #380]	@ (8001ea0 <main+0x388>)
 8001d24:	f7ff fe18 	bl	8001958 <send_uart>
 8001d28:	e002      	b.n	8001d30 <main+0x218>
	  	                   else send_uart("Failed to write file!\r\n");
 8001d2a:	485e      	ldr	r0, [pc, #376]	@ (8001ea4 <main+0x38c>)
 8001d2c:	f7ff fe14 	bl	8001958 <send_uart>
	  	                   f_close(&fil);
 8001d30:	4856      	ldr	r0, [pc, #344]	@ (8001e8c <main+0x374>)
 8001d32:	f00c fa61 	bl	800e1f8 <f_close>
	  	               } else {
	  	                   send_uart("Failed to create file!\r\n");
	  	               }
	  	               break;
 8001d36:	e069      	b.n	8001e0c <main+0x2f4>
	  	                   send_uart("Failed to create file!\r\n");
 8001d38:	485b      	ldr	r0, [pc, #364]	@ (8001ea8 <main+0x390>)
 8001d3a:	f7ff fe0d 	bl	8001958 <send_uart>
	  	               break;
 8001d3e:	e065      	b.n	8001e0c <main+0x2f4>
	  	           case '5':
	  	               send_uart("Please enter file name to delete: ");
 8001d40:	485a      	ldr	r0, [pc, #360]	@ (8001eac <main+0x394>)
 8001d42:	f7ff fe09 	bl	8001958 <send_uart>
	  	               uart_receive_string(namebuf, sizeof(namebuf));
 8001d46:	2180      	movs	r1, #128	@ 0x80
 8001d48:	484b      	ldr	r0, [pc, #300]	@ (8001e78 <main+0x360>)
 8001d4a:	f7ff fe85 	bl	8001a58 <uart_receive_string>
	  	               char pathbuf[64] = {0};
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	223c      	movs	r2, #60	@ 0x3c
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00d ff00 	bl	800fb60 <memset>
	                   snprintf(pathbuf, sizeof(pathbuf), "/%s", namebuf);
 8001d60:	1d38      	adds	r0, r7, #4
 8001d62:	4b45      	ldr	r3, [pc, #276]	@ (8001e78 <main+0x360>)
 8001d64:	4a52      	ldr	r2, [pc, #328]	@ (8001eb0 <main+0x398>)
 8001d66:	2140      	movs	r1, #64	@ 0x40
 8001d68:	f00d fea6 	bl	800fab8 <sniprintf>
	  	               fres = f_unlink(pathbuf);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f00c fe54 	bl	800ea1c <f_unlink>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b45      	ldr	r3, [pc, #276]	@ (8001e90 <main+0x378>)
 8001d7a:	701a      	strb	r2, [r3, #0]
	  	               if (fres == FR_OK) send_uart("File deleted!\r\n");
 8001d7c:	4b44      	ldr	r3, [pc, #272]	@ (8001e90 <main+0x378>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d103      	bne.n	8001d8c <main+0x274>
 8001d84:	484b      	ldr	r0, [pc, #300]	@ (8001eb4 <main+0x39c>)
 8001d86:	f7ff fde7 	bl	8001958 <send_uart>
	  	               else send_uart("Failed to delete file!\r\n");
	  	               break;
 8001d8a:	e03f      	b.n	8001e0c <main+0x2f4>
	  	               else send_uart("Failed to delete file!\r\n");
 8001d8c:	484a      	ldr	r0, [pc, #296]	@ (8001eb8 <main+0x3a0>)
 8001d8e:	f7ff fde3 	bl	8001958 <send_uart>
	  	               break;
 8001d92:	e03b      	b.n	8001e0c <main+0x2f4>


	  	           case '6':
	  	               send_uart("Please enter file name to update: ");
 8001d94:	4849      	ldr	r0, [pc, #292]	@ (8001ebc <main+0x3a4>)
 8001d96:	f7ff fddf 	bl	8001958 <send_uart>
	  	               uart_receive_string(namebuf, sizeof(namebuf));
 8001d9a:	2180      	movs	r1, #128	@ 0x80
 8001d9c:	4836      	ldr	r0, [pc, #216]	@ (8001e78 <main+0x360>)
 8001d9e:	f7ff fe5b 	bl	8001a58 <uart_receive_string>
	  	               fres = f_open(&fil, namebuf, FA_OPEN_EXISTING | FA_WRITE | FA_READ);
 8001da2:	2203      	movs	r2, #3
 8001da4:	4934      	ldr	r1, [pc, #208]	@ (8001e78 <main+0x360>)
 8001da6:	4839      	ldr	r0, [pc, #228]	@ (8001e8c <main+0x374>)
 8001da8:	f00b fe4c 	bl	800da44 <f_open>
 8001dac:	4603      	mov	r3, r0
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b37      	ldr	r3, [pc, #220]	@ (8001e90 <main+0x378>)
 8001db2:	701a      	strb	r2, [r3, #0]
	  	               if (fres == FR_OK) {
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <main+0x378>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d11f      	bne.n	8001dfc <main+0x2e4>
	  	                   f_lseek(&fil, f_size(&fil));
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <main+0x374>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4832      	ldr	r0, [pc, #200]	@ (8001e8c <main+0x374>)
 8001dc4:	f00c fa42 	bl	800e24c <f_lseek>
	  	                   memset(filebuf, '0', sizeof(filebuf));
 8001dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dcc:	2130      	movs	r1, #48	@ 0x30
 8001dce:	4832      	ldr	r0, [pc, #200]	@ (8001e98 <main+0x380>)
 8001dd0:	f00d fec6 	bl	800fb60 <memset>
	  	                   send_uart("Enter content to append (end with !):\r\n");
 8001dd4:	483a      	ldr	r0, [pc, #232]	@ (8001ec0 <main+0x3a8>)
 8001dd6:	f7ff fdbf 	bl	8001958 <send_uart>

	  	                   uart_receive_string(filebuf, sizeof(filebuf));
 8001dda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dde:	482e      	ldr	r0, [pc, #184]	@ (8001e98 <main+0x380>)
 8001de0:	f7ff fe3a 	bl	8001a58 <uart_receive_string>
	  	                   fres = f_puts(filebuf, &fil);
 8001de4:	4929      	ldr	r1, [pc, #164]	@ (8001e8c <main+0x374>)
 8001de6:	482c      	ldr	r0, [pc, #176]	@ (8001e98 <main+0x380>)
 8001de8:	f00d f847 	bl	800ee7a <f_puts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <main+0x378>)
 8001df2:	701a      	strb	r2, [r3, #0]
	  	                   f_close(&fil);
 8001df4:	4825      	ldr	r0, [pc, #148]	@ (8001e8c <main+0x374>)
 8001df6:	f00c f9ff 	bl	800e1f8 <f_close>
	  	               } else {
	  	                   send_uart("Failed to open file for update!\r\n");
	  	               }
	  	               break;
 8001dfa:	e007      	b.n	8001e0c <main+0x2f4>
	  	                   send_uart("Failed to open file for update!\r\n");
 8001dfc:	4831      	ldr	r0, [pc, #196]	@ (8001ec4 <main+0x3ac>)
 8001dfe:	f7ff fdab 	bl	8001958 <send_uart>
	  	               break;
 8001e02:	e003      	b.n	8001e0c <main+0x2f4>
	  	           default:
	  	               send_uart("Invalid option!\r\n");
 8001e04:	4830      	ldr	r0, [pc, #192]	@ (8001ec8 <main+0x3b0>)
 8001e06:	f7ff fda7 	bl	8001958 <send_uart>
	  	               break;
 8001e0a:	bf00      	nop
  {
 8001e0c:	e6fd      	b.n	8001c0a <main+0xf2>
 8001e0e:	bf00      	nop
 8001e10:	08010520 	.word	0x08010520
 8001e14:	200015bc 	.word	0x200015bc
 8001e18:	20003624 	.word	0x20003624
 8001e1c:	08010524 	.word	0x08010524
 8001e20:	08010544 	.word	0x08010544
 8001e24:	20003a2c 	.word	0x20003a2c
 8001e28:	20003a30 	.word	0x20003a30
 8001e2c:	08010568 	.word	0x08010568
 8001e30:	3fe00000 	.word	0x3fe00000
 8001e34:	20003a34 	.word	0x20003a34
 8001e38:	0801056c 	.word	0x0801056c
 8001e3c:	20003628 	.word	0x20003628
 8001e40:	20003a38 	.word	0x20003a38
 8001e44:	08010588 	.word	0x08010588
 8001e48:	080105a4 	.word	0x080105a4
 8001e4c:	080105c0 	.word	0x080105c0
 8001e50:	080105d4 	.word	0x080105d4
 8001e54:	080105e4 	.word	0x080105e4
 8001e58:	080105fc 	.word	0x080105fc
 8001e5c:	08010614 	.word	0x08010614
 8001e60:	08010628 	.word	0x08010628
 8001e64:	0801063c 	.word	0x0801063c
 8001e68:	0801065c 	.word	0x0801065c
 8001e6c:	0801067c 	.word	0x0801067c
 8001e70:	08010690 	.word	0x08010690
 8001e74:	080106a4 	.word	0x080106a4
 8001e78:	20003a3c 	.word	0x20003a3c
 8001e7c:	080106c4 	.word	0x080106c4
 8001e80:	080106dc 	.word	0x080106dc
 8001e84:	08010704 	.word	0x08010704
 8001e88:	0801071c 	.word	0x0801071c
 8001e8c:	200025f4 	.word	0x200025f4
 8001e90:	20003ebc 	.word	0x20003ebc
 8001e94:	08010740 	.word	0x08010740
 8001e98:	20003abc 	.word	0x20003abc
 8001e9c:	20003a28 	.word	0x20003a28
 8001ea0:	08010760 	.word	0x08010760
 8001ea4:	0801077c 	.word	0x0801077c
 8001ea8:	08010794 	.word	0x08010794
 8001eac:	080107b0 	.word	0x080107b0
 8001eb0:	080107d4 	.word	0x080107d4
 8001eb4:	080107d8 	.word	0x080107d8
 8001eb8:	080107e8 	.word	0x080107e8
 8001ebc:	08010804 	.word	0x08010804
 8001ec0:	08010828 	.word	0x08010828
 8001ec4:	08010850 	.word	0x08010850
 8001ec8:	08010874 	.word	0x08010874

08001ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	@ 0x50
 8001ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2230      	movs	r2, #48	@ 0x30
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00d fe40 	bl	800fb60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <SystemClock_Config+0xcc>)
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	4a27      	ldr	r2, [pc, #156]	@ (8001f98 <SystemClock_Config+0xcc>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <SystemClock_Config+0xcc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b22      	ldr	r3, [pc, #136]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001f18:	4a20      	ldr	r2, [pc, #128]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001f1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <SystemClock_Config+0xd0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f36:	2302      	movs	r3, #2
 8001f38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f40:	2304      	movs	r3, #4
 8001f42:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001f44:	2348      	movs	r3, #72	@ 0x48
 8001f46:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f50:	f107 0320 	add.w	r3, r7, #32
 8001f54:	4618      	mov	r0, r3
 8001f56:	f002 f8e1 	bl	800411c <HAL_RCC_OscConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f60:	f000 f8a6 	bl	80020b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	230f      	movs	r3, #15
 8001f66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fb43 	bl	800460c <HAL_RCC_ClockConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f8c:	f000 f890 	bl	80020b0 <Error_Handler>
  }
}
 8001f90:	bf00      	nop
 8001f92:	3750      	adds	r7, #80	@ 0x50
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40007000 	.word	0x40007000

08001fa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fa4:	4b17      	ldr	r3, [pc, #92]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <MX_SPI1_Init+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001fb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb2:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb8:	4b12      	ldr	r3, [pc, #72]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe4:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001fec:	220a      	movs	r2, #10
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ff0:	4804      	ldr	r0, [pc, #16]	@ (8002004 <MX_SPI1_Init+0x64>)
 8001ff2:	f002 fd2b 	bl	8004a4c <HAL_SPI_Init>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ffc:	f000 f858 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002000:	bf00      	nop
 8002002:	bd80      	pop	{r7, pc}
 8002004:	2000151c 	.word	0x2000151c
 8002008:	40013000 	.word	0x40013000

0800200c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 8002012:	4a12      	ldr	r2, [pc, #72]	@ (800205c <MX_USART1_UART_Init+0x50>)
 8002014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002016:	4b10      	ldr	r3, [pc, #64]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 8002018:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800201c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800201e:	4b0e      	ldr	r3, [pc, #56]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002030:	4b09      	ldr	r3, [pc, #36]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 8002032:	220c      	movs	r2, #12
 8002034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002036:	4b08      	ldr	r3, [pc, #32]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_USART1_UART_Init+0x4c>)
 8002044:	f003 f954 	bl	80052f0 <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800204e:	f000 f82f 	bl	80020b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20001574 	.word	0x20001574
 800205c:	40011000 	.word	0x40011000

08002060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b10      	ldr	r3, [pc, #64]	@ (80020ac <MX_GPIO_Init+0x4c>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <MX_GPIO_Init+0x4c>)
 8002070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <MX_GPIO_Init+0x4c>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4b09      	ldr	r3, [pc, #36]	@ (80020ac <MX_GPIO_Init+0x4c>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	4a08      	ldr	r2, [pc, #32]	@ (80020ac <MX_GPIO_Init+0x4c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6313      	str	r3, [r2, #48]	@ 0x30
 8002092:	4b06      	ldr	r3, [pc, #24]	@ (80020ac <MX_GPIO_Init+0x4c>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <Error_Handler+0x8>

080020bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <HAL_MspInit+0x4c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002108 <HAL_MspInit+0x4c>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <HAL_MspInit+0x4c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b09      	ldr	r3, [pc, #36]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <HAL_MspInit+0x4c>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b06      	ldr	r3, [pc, #24]	@ (8002108 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	@ 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a19      	ldr	r2, [pc, #100]	@ (8002190 <HAL_SPI_MspInit+0x84>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d12b      	bne.n	8002186 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <HAL_SPI_MspInit+0x88>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	4a17      	ldr	r2, [pc, #92]	@ (8002194 <HAL_SPI_MspInit+0x88>)
 8002138:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800213c:	6453      	str	r3, [r2, #68]	@ 0x44
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <HAL_SPI_MspInit+0x88>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_SPI_MspInit+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a10      	ldr	r2, [pc, #64]	@ (8002194 <HAL_SPI_MspInit+0x88>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_SPI_MspInit+0x88>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002166:	23e0      	movs	r3, #224	@ 0xe0
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002176:	2305      	movs	r3, #5
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	4805      	ldr	r0, [pc, #20]	@ (8002198 <HAL_SPI_MspInit+0x8c>)
 8002182:	f000 fb9f 	bl	80028c4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002186:	bf00      	nop
 8002188:	3728      	adds	r7, #40	@ 0x28
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40013000 	.word	0x40013000
 8002194:	40023800 	.word	0x40023800
 8002198:	40020000 	.word	0x40020000

0800219c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	@ 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <HAL_UART_MspInit+0x94>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d134      	bne.n	8002228 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <HAL_UART_MspInit+0x98>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002234 <HAL_UART_MspInit+0x98>)
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <HAL_UART_MspInit+0x98>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_UART_MspInit+0x98>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e2:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <HAL_UART_MspInit+0x98>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_UART_MspInit+0x98>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021f6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002200:	2300      	movs	r3, #0
 8002202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	2303      	movs	r3, #3
 8002206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002208:	2307      	movs	r3, #7
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4809      	ldr	r0, [pc, #36]	@ (8002238 <HAL_UART_MspInit+0x9c>)
 8002214:	f000 fb56 	bl	80028c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	2025      	movs	r0, #37	@ 0x25
 800221e:	f000 fa88 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002222:	2025      	movs	r0, #37	@ 0x25
 8002224:	f000 faa1 	bl	800276a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	@ 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40011000 	.word	0x40011000
 8002234:	40023800 	.word	0x40023800
 8002238:	40020000 	.word	0x40020000

0800223c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2,Timer3,Timer4;

void SDTimer_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <SDTimer_Handler+0x70>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <SDTimer_Handler+0x1c>
    Timer1--;
 800224a:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <SDTimer_Handler+0x70>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <SDTimer_Handler+0x70>)
 8002256:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <SDTimer_Handler+0x74>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <SDTimer_Handler+0x34>
    Timer2--;
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <SDTimer_Handler+0x74>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <SDTimer_Handler+0x74>)
 800226e:	701a      	strb	r2, [r3, #0]
  if(Timer3 > 0)
 8002270:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <SDTimer_Handler+0x78>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d006      	beq.n	8002288 <SDTimer_Handler+0x4c>
      Timer1--;
 800227a:	4b0c      	ldr	r3, [pc, #48]	@ (80022ac <SDTimer_Handler+0x70>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <SDTimer_Handler+0x70>)
 8002286:	701a      	strb	r2, [r3, #0]

  if(Timer4 > 0)
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <SDTimer_Handler+0x7c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <SDTimer_Handler+0x64>
      Timer2--;
 8002292:	4b07      	ldr	r3, [pc, #28]	@ (80022b0 <SDTimer_Handler+0x74>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <SDTimer_Handler+0x74>)
 800229e:	701a      	strb	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20003ebe 	.word	0x20003ebe
 80022b0:	20003ebf 	.word	0x20003ebf
 80022b4:	20003ec0 	.word	0x20003ec0
 80022b8:	20003ec1 	.word	0x20003ec1

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <NMI_Handler+0x4>

080022c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <MemManage_Handler+0x4>

080022d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <SysTick_Handler+0x30>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	3301      	adds	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <SysTick_Handler+0x30>)
 8002320:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <SysTick_Handler+0x30>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b09      	cmp	r3, #9
 800232a:	d904      	bls.n	8002336 <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 800232c:	4b04      	ldr	r3, [pc, #16]	@ (8002340 <SysTick_Handler+0x30>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002332:	f7ff ff83 	bl	800223c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002336:	f000 f8dd 	bl	80024f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20003ebd 	.word	0x20003ebd

08002344 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <USART1_IRQHandler+0x10>)
 800234a:	f003 f943 	bl	80055d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20001574 	.word	0x20001574

08002358 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <OTG_FS_IRQHandler+0x10>)
 800235e:	f000 fda1 	bl	8002ea4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20004600 	.word	0x20004600

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f00d fbf8 	bl	800fb90 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20030000 	.word	0x20030000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20003ec4 	.word	0x20003ec4
 80023d4:	20004eb8 	.word	0x20004eb8

080023d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023dc:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <SystemInit+0x20>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <SystemInit+0x20>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80023fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002434 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002400:	f7ff ffea 	bl	80023d8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002404:	480c      	ldr	r0, [pc, #48]	@ (8002438 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002406:	490d      	ldr	r1, [pc, #52]	@ (800243c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002408:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800240c:	e002      	b.n	8002414 <LoopCopyDataInit>

0800240e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800240e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002412:	3304      	adds	r3, #4

08002414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002418:	d3f9      	bcc.n	800240e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241a:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800241c:	4c0a      	ldr	r4, [pc, #40]	@ (8002448 <LoopFillZerobss+0x22>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002420:	e001      	b.n	8002426 <LoopFillZerobss>

08002422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002424:	3204      	adds	r2, #4

08002426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002428:	d3fb      	bcc.n	8002422 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800242a:	f00d fbb7 	bl	800fb9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242e:	f7ff fb73 	bl	8001b18 <main>
  bx  lr    
 8002432:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002434:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800243c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8002440:	08010dd4 	.word	0x08010dd4
  ldr r2, =_sbss
 8002444:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8002448:	20004eb4 	.word	0x20004eb4

0800244c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC_IRQHandler>
	...

08002450 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002454:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_Init+0x40>)
 800245a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <HAL_Init+0x40>)
 8002466:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800246a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_Init+0x40>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002476:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002478:	2003      	movs	r0, #3
 800247a:	f000 f94f 	bl	800271c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247e:	200f      	movs	r0, #15
 8002480:	f000 f808 	bl	8002494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002484:	f7ff fe1a 	bl	80020bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00

08002494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800249c:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <HAL_InitTick+0x54>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_InitTick+0x58>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f967 	bl	8002786 <HAL_SYSTICK_Config>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00e      	b.n	80024e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0f      	cmp	r3, #15
 80024c6:	d80a      	bhi.n	80024de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c8:	2200      	movs	r2, #0
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	f04f 30ff 	mov.w	r0, #4294967295
 80024d0:	f000 f92f 	bl	8002732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d4:	4a06      	ldr	r2, [pc, #24]	@ (80024f0 <HAL_InitTick+0x5c>)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000004 	.word	0x20000004
 80024ec:	2000000c 	.word	0x2000000c
 80024f0:	20000008 	.word	0x20000008

080024f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_IncTick+0x20>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_IncTick+0x24>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4413      	add	r3, r2
 8002504:	4a04      	ldr	r2, [pc, #16]	@ (8002518 <HAL_IncTick+0x24>)
 8002506:	6013      	str	r3, [r2, #0]
}
 8002508:	bf00      	nop
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	2000000c 	.word	0x2000000c
 8002518:	20003ec8 	.word	0x20003ec8

0800251c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b03      	ldr	r3, [pc, #12]	@ (8002530 <HAL_GetTick+0x14>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20003ec8 	.word	0x20003ec8

08002534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7ff ffee 	bl	800251c <HAL_GetTick>
 8002540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d005      	beq.n	800255a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254e:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <HAL_Delay+0x44>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800255a:	bf00      	nop
 800255c:	f7ff ffde 	bl	800251c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	429a      	cmp	r2, r3
 800256a:	d8f7      	bhi.n	800255c <HAL_Delay+0x28>
  {
  }
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	2000000c 	.word	0x2000000c

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	@ (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	6039      	str	r1, [r7, #0]
 8002626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	2b00      	cmp	r3, #0
 800262e:	db0a      	blt.n	8002646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	490c      	ldr	r1, [pc, #48]	@ (8002668 <__NVIC_SetPriority+0x4c>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	0112      	lsls	r2, r2, #4
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	440b      	add	r3, r1
 8002640:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002644:	e00a      	b.n	800265c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	b2da      	uxtb	r2, r3
 800264a:	4908      	ldr	r1, [pc, #32]	@ (800266c <__NVIC_SetPriority+0x50>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	3b04      	subs	r3, #4
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	b2d2      	uxtb	r2, r2
 8002658:	440b      	add	r3, r1
 800265a:	761a      	strb	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000e100 	.word	0xe000e100
 800266c:	e000ed00 	.word	0xe000ed00

08002670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002670:	b480      	push	{r7}
 8002672:	b089      	sub	sp, #36	@ 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2b04      	cmp	r3, #4
 800268c:	bf28      	it	cs
 800268e:	2304      	movcs	r3, #4
 8002690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3304      	adds	r3, #4
 8002696:	2b06      	cmp	r3, #6
 8002698:	d902      	bls.n	80026a0 <NVIC_EncodePriority+0x30>
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3b03      	subs	r3, #3
 800269e:	e000      	b.n	80026a2 <NVIC_EncodePriority+0x32>
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	f04f 32ff 	mov.w	r2, #4294967295
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	401a      	ands	r2, r3
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026b8:	f04f 31ff 	mov.w	r1, #4294967295
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	43d9      	mvns	r1, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	4313      	orrs	r3, r2
         );
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3724      	adds	r7, #36	@ 0x24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026e8:	d301      	bcc.n	80026ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00f      	b.n	800270e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002718 <SysTick_Config+0x40>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026f6:	210f      	movs	r1, #15
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f7ff ff8e 	bl	800261c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <SysTick_Config+0x40>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002706:	4b04      	ldr	r3, [pc, #16]	@ (8002718 <SysTick_Config+0x40>)
 8002708:	2207      	movs	r2, #7
 800270a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	e000e010 	.word	0xe000e010

0800271c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff ff29 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002744:	f7ff ff3e 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	6978      	ldr	r0, [r7, #20]
 8002750:	f7ff ff8e 	bl	8002670 <NVIC_EncodePriority>
 8002754:	4602      	mov	r2, r0
 8002756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff5d 	bl	800261c <__NVIC_SetPriority>
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	4603      	mov	r3, r0
 8002772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff31 	bl	80025e0 <__NVIC_EnableIRQ>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ffa2 	bl	80026d8 <SysTick_Config>
 8002794:	4603      	mov	r3, r0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff feb6 	bl	800251c <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d008      	beq.n	80027d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2280      	movs	r2, #128	@ 0x80
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e052      	b.n	8002876 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0216 	bic.w	r2, r2, #22
 80027de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695a      	ldr	r2, [r3, #20]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <HAL_DMA_Abort+0x62>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d007      	beq.n	8002810 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0208 	bic.w	r2, r2, #8
 800280e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002820:	e013      	b.n	800284a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002822:	f7ff fe7b 	bl	800251c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b05      	cmp	r3, #5
 800282e:	d90c      	bls.n	800284a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2203      	movs	r2, #3
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e015      	b.n	8002876 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e4      	bne.n	8002822 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	223f      	movs	r2, #63	@ 0x3f
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d004      	beq.n	800289c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2280      	movs	r2, #128	@ 0x80
 8002896:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e00c      	b.n	80028b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2205      	movs	r2, #5
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b089      	sub	sp, #36	@ 0x24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	e177      	b.n	8002bd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e0:	2201      	movs	r2, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f040 8166 	bne.w	8002bca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d005      	beq.n	8002916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002912:	2b02      	cmp	r3, #2
 8002914:	d130      	bne.n	8002978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	fa02 f303 	lsl.w	r3, r2, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800294c:	2201      	movs	r2, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	4013      	ands	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 0201 	and.w	r2, r3, #1
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b03      	cmp	r3, #3
 8002982:	d017      	beq.n	80029b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d123      	bne.n	8002a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	08da      	lsrs	r2, r3, #3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3208      	adds	r2, #8
 80029c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	220f      	movs	r2, #15
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	08da      	lsrs	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3208      	adds	r2, #8
 8002a02:	69b9      	ldr	r1, [r7, #24]
 8002a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	2203      	movs	r2, #3
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0203 	and.w	r2, r3, #3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80c0 	beq.w	8002bca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b66      	ldr	r3, [pc, #408]	@ (8002be8 <HAL_GPIO_Init+0x324>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a52:	4a65      	ldr	r2, [pc, #404]	@ (8002be8 <HAL_GPIO_Init+0x324>)
 8002a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a5a:	4b63      	ldr	r3, [pc, #396]	@ (8002be8 <HAL_GPIO_Init+0x324>)
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a66:	4a61      	ldr	r2, [pc, #388]	@ (8002bec <HAL_GPIO_Init+0x328>)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a58      	ldr	r2, [pc, #352]	@ (8002bf0 <HAL_GPIO_Init+0x32c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d037      	beq.n	8002b02 <HAL_GPIO_Init+0x23e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a57      	ldr	r2, [pc, #348]	@ (8002bf4 <HAL_GPIO_Init+0x330>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d031      	beq.n	8002afe <HAL_GPIO_Init+0x23a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a56      	ldr	r2, [pc, #344]	@ (8002bf8 <HAL_GPIO_Init+0x334>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d02b      	beq.n	8002afa <HAL_GPIO_Init+0x236>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a55      	ldr	r2, [pc, #340]	@ (8002bfc <HAL_GPIO_Init+0x338>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d025      	beq.n	8002af6 <HAL_GPIO_Init+0x232>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a54      	ldr	r2, [pc, #336]	@ (8002c00 <HAL_GPIO_Init+0x33c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d01f      	beq.n	8002af2 <HAL_GPIO_Init+0x22e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a53      	ldr	r2, [pc, #332]	@ (8002c04 <HAL_GPIO_Init+0x340>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d019      	beq.n	8002aee <HAL_GPIO_Init+0x22a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a52      	ldr	r2, [pc, #328]	@ (8002c08 <HAL_GPIO_Init+0x344>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d013      	beq.n	8002aea <HAL_GPIO_Init+0x226>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a51      	ldr	r2, [pc, #324]	@ (8002c0c <HAL_GPIO_Init+0x348>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_GPIO_Init+0x222>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a50      	ldr	r2, [pc, #320]	@ (8002c10 <HAL_GPIO_Init+0x34c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <HAL_GPIO_Init+0x21e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8002c14 <HAL_GPIO_Init+0x350>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d101      	bne.n	8002ade <HAL_GPIO_Init+0x21a>
 8002ada:	2309      	movs	r3, #9
 8002adc:	e012      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002ade:	230a      	movs	r3, #10
 8002ae0:	e010      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002ae2:	2308      	movs	r3, #8
 8002ae4:	e00e      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	e00c      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002aea:	2306      	movs	r3, #6
 8002aec:	e00a      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002aee:	2305      	movs	r3, #5
 8002af0:	e008      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002af2:	2304      	movs	r3, #4
 8002af4:	e006      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002af6:	2303      	movs	r3, #3
 8002af8:	e004      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e002      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <HAL_GPIO_Init+0x240>
 8002b02:	2300      	movs	r3, #0
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f002 0203 	and.w	r2, r2, #3
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	4093      	lsls	r3, r2
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b14:	4935      	ldr	r1, [pc, #212]	@ (8002bec <HAL_GPIO_Init+0x328>)
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	089b      	lsrs	r3, r3, #2
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b22:	4b3d      	ldr	r3, [pc, #244]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b46:	4a34      	ldr	r2, [pc, #208]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b4c:	4b32      	ldr	r3, [pc, #200]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b70:	4a29      	ldr	r2, [pc, #164]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b76:	4b28      	ldr	r3, [pc, #160]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc4:	4a14      	ldr	r2, [pc, #80]	@ (8002c18 <HAL_GPIO_Init+0x354>)
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b0f      	cmp	r3, #15
 8002bd4:	f67f ae84 	bls.w	80028e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3724      	adds	r7, #36	@ 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40020800 	.word	0x40020800
 8002bfc:	40020c00 	.word	0x40020c00
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40021400 	.word	0x40021400
 8002c08:	40021800 	.word	0x40021800
 8002c0c:	40021c00 	.word	0x40021c00
 8002c10:	40022000 	.word	0x40022000
 8002c14:	40022400 	.word	0x40022400
 8002c18:	40013c00 	.word	0x40013c00

08002c1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e101      	b.n	8002e32 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f00c fc01 	bl	800f450 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2203      	movs	r2, #3
 8002c52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c5c:	d102      	bne.n	8002c64 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fd06 	bl	800667a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	7c1a      	ldrb	r2, [r3, #16]
 8002c76:	f88d 2000 	strb.w	r2, [sp]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c7e:	f003 fbe5 	bl	800644c <USB_CoreInit>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0ce      	b.n	8002e32 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fcfe 	bl	800669c <USB_SetCurrentMode>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0bf      	b.n	8002e32 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e04a      	b.n	8002d4e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	3315      	adds	r3, #21
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ccc:	7bfa      	ldrb	r2, [r7, #15]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3314      	adds	r3, #20
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ce0:	7bfa      	ldrb	r2, [r7, #15]
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	b298      	uxth	r0, r3
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	332e      	adds	r3, #46	@ 0x2e
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3318      	adds	r3, #24
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	331c      	adds	r3, #28
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3320      	adds	r3, #32
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	00db      	lsls	r3, r3, #3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	3324      	adds	r3, #36	@ 0x24
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	791b      	ldrb	r3, [r3, #4]
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d3af      	bcc.n	8002cb8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e044      	b.n	8002de8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d5e:	7bfa      	ldrb	r2, [r7, #15]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d8a:	7bfa      	ldrb	r2, [r7, #15]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002db6:	7bfa      	ldrb	r2, [r7, #15]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	3301      	adds	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	791b      	ldrb	r3, [r3, #4]
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3b5      	bcc.n	8002d5e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7c1a      	ldrb	r2, [r3, #16]
 8002dfa:	f88d 2000 	strb.w	r2, [sp]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e02:	f003 fc97 	bl	8006734 <USB_DevInit>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e00c      	b.n	8002e32 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 fce1 	bl	80077f2 <USB_DevDisconnect>

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_PCD_Start+0x1c>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e022      	b.n	8002e9c <HAL_PCD_Start+0x62>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e76:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 fbe8 	bl	8006658 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fc8f 	bl	80077b0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b08d      	sub	sp, #52	@ 0x34
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f004 fd4d 	bl	800795a <USB_GetMode>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 848c 	bne.w	80037e0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 fcb1 	bl	8007834 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8482 	beq.w	80037de <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fc9e 	bl	8007834 <USB_ReadInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d107      	bne.n	8002f12 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f002 0202 	and.w	r2, r2, #2
 8002f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 fc8c 	bl	8007834 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d161      	bne.n	8002fea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699a      	ldr	r2, [r3, #24]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0210 	bic.w	r2, r2, #16
 8002f34:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	4613      	mov	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3304      	adds	r3, #4
 8002f54:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	0c5b      	lsrs	r3, r3, #17
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d124      	bne.n	8002fac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d035      	beq.n	8002fda <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	091b      	lsrs	r3, r3, #4
 8002f76:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	6a38      	ldr	r0, [r7, #32]
 8002f82:	f004 fac3 	bl	800750c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f92:	441a      	add	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa4:	441a      	add	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	615a      	str	r2, [r3, #20]
 8002faa:	e016      	b.n	8002fda <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	0c5b      	lsrs	r3, r3, #17
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	2b06      	cmp	r3, #6
 8002fb6:	d110      	bne.n	8002fda <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002fbe:	2208      	movs	r2, #8
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6a38      	ldr	r0, [r7, #32]
 8002fc4:	f004 faa2 	bl	800750c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fd4:	441a      	add	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0210 	orr.w	r2, r2, #16
 8002fe8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f004 fc20 	bl	8007834 <USB_ReadInterrupts>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ffa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002ffe:	f040 80a7 	bne.w	8003150 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fc25 	bl	800785a <USB_ReadDevAllOutEpInterrupt>
 8003010:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003012:	e099      	b.n	8003148 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 808e 	beq.w	800313c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fc49 	bl	80078c2 <USB_ReadDevOutEPInterrupt>
 8003030:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00c      	beq.n	8003056 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800303c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	4413      	add	r3, r2
 8003044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003048:	461a      	mov	r2, r3
 800304a:	2301      	movs	r3, #1
 800304c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800304e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fed1 	bl	8003df8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00c      	beq.n	800307a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306c:	461a      	mov	r2, r3
 800306e:	2308      	movs	r3, #8
 8003070:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 ffa7 	bl	8003fc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	4413      	add	r3, r2
 800308c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003090:	461a      	mov	r2, r3
 8003092:	2310      	movs	r3, #16
 8003094:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d030      	beq.n	8003102 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a8:	2b80      	cmp	r3, #128	@ 0x80
 80030aa:	d109      	bne.n	80030c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80030c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4413      	add	r3, r2
 80030d2:	3304      	adds	r3, #4
 80030d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	78db      	ldrb	r3, [r3, #3]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d108      	bne.n	80030f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80030e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f00c fab6 	bl	800f65c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fc:	461a      	mov	r2, r3
 80030fe:	2302      	movs	r3, #2
 8003100:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003118:	461a      	mov	r2, r3
 800311a:	2320      	movs	r3, #32
 800311c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4413      	add	r3, r2
 8003130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003134:	461a      	mov	r2, r3
 8003136:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800313a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800313c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313e:	3301      	adds	r3, #1
 8003140:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003144:	085b      	lsrs	r3, r3, #1
 8003146:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	f47f af62 	bne.w	8003014 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f004 fb6d 	bl	8007834 <USB_ReadInterrupts>
 800315a:	4603      	mov	r3, r0
 800315c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003160:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003164:	f040 80db 	bne.w	800331e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f004 fb8e 	bl	800788e <USB_ReadDevAllInEpInterrupt>
 8003172:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003178:	e0cd      	b.n	8003316 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800317a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80c2 	beq.w	800330a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800318c:	b2d2      	uxtb	r2, r2
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fbb4 	bl	80078fe <USB_ReadDevInEPInterrupt>
 8003196:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d057      	beq.n	8003252 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	2201      	movs	r2, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69f9      	ldr	r1, [r7, #28]
 80031be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80031c2:	4013      	ands	r3, r2
 80031c4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031d2:	461a      	mov	r2, r3
 80031d4:	2301      	movs	r3, #1
 80031d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	799b      	ldrb	r3, [r3, #6]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d132      	bne.n	8003246 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3320      	adds	r3, #32
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4403      	add	r3, r0
 8003200:	331c      	adds	r3, #28
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4419      	add	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4403      	add	r3, r0
 8003214:	3320      	adds	r3, #32
 8003216:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	2b00      	cmp	r3, #0
 800321c:	d113      	bne.n	8003246 <HAL_PCD_IRQHandler+0x3a2>
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003222:	4613      	mov	r3, r2
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3324      	adds	r3, #36	@ 0x24
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d108      	bne.n	8003246 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800323e:	461a      	mov	r2, r3
 8003240:	2101      	movs	r1, #1
 8003242:	f004 fbbb 	bl	80079bc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003248:	b2db      	uxtb	r3, r3
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f00c f980 	bl	800f552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003268:	461a      	mov	r2, r3
 800326a:	2308      	movs	r3, #8
 800326c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	015a      	lsls	r2, r3, #5
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4413      	add	r3, r2
 8003280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003284:	461a      	mov	r2, r3
 8003286:	2310      	movs	r3, #16
 8003288:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032a0:	461a      	mov	r2, r3
 80032a2:	2340      	movs	r3, #64	@ 0x40
 80032a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80032b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032b2:	6a38      	ldr	r0, [r7, #32]
 80032b4:	f003 fba2 	bl	80069fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80032b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	3310      	adds	r3, #16
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d108      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2200      	movs	r2, #0
 80032d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f00c f9cd 	bl	800f680 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f2:	461a      	mov	r2, r3
 80032f4:	2302      	movs	r3, #2
 80032f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003302:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fcea 	bl	8003cde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	3301      	adds	r3, #1
 800330e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f af2e 	bne.w	800317a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fa86 	bl	8007834 <USB_ReadInterrupts>
 8003328:	4603      	mov	r3, r0
 800332a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800332e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003332:	d122      	bne.n	800337a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800335a:	2100      	movs	r1, #0
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fed1 	bl	8004104 <HAL_PCDEx_LPM_Callback>
 8003362:	e002      	b.n	800336a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f00c f96b 	bl	800f640 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695a      	ldr	r2, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f004 fa58 	bl	8007834 <USB_ReadInterrupts>
 8003384:	4603      	mov	r3, r0
 8003386:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800338e:	d112      	bne.n	80033b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f00c f927 	bl	800f5f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80033b4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f004 fa3a 	bl	8007834 <USB_ReadInterrupts>
 80033c0:	4603      	mov	r3, r0
 80033c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ca:	f040 80b7 	bne.w	800353c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2110      	movs	r1, #16
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fb07 	bl	80069fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033f2:	e046      	b.n	8003482 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003400:	461a      	mov	r2, r3
 8003402:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003406:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	4413      	add	r3, r2
 8003410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003418:	0151      	lsls	r1, r2, #5
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	440a      	add	r2, r1
 800341e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003422:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003426:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003434:	461a      	mov	r2, r3
 8003436:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800343a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800343c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800344c:	0151      	lsls	r1, r2, #5
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	440a      	add	r2, r1
 8003452:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003456:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800345a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800345c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346c:	0151      	lsls	r1, r2, #5
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	440a      	add	r2, r1
 8003472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003476:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800347a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800347e:	3301      	adds	r3, #1
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	791b      	ldrb	r3, [r3, #4]
 8003486:	461a      	mov	r2, r3
 8003488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348a:	4293      	cmp	r3, r2
 800348c:	d3b2      	bcc.n	80033f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	69fa      	ldr	r2, [r7, #28]
 8003498:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800349c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80034a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	7bdb      	ldrb	r3, [r3, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d016      	beq.n	80034d8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034ba:	f043 030b 	orr.w	r3, r3, #11
 80034be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034d0:	f043 030b 	orr.w	r3, r3, #11
 80034d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034d6:	e015      	b.n	8003504 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80034ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034fe:	f043 030b 	orr.w	r3, r3, #11
 8003502:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003512:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003516:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003526:	461a      	mov	r2, r3
 8003528:	f004 fa48 	bl	80079bc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800353a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f004 f977 	bl	8007834 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800354c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003550:	d123      	bne.n	800359a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f004 fa0d 	bl	8007976 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f003 fac4 	bl	8006aee <USB_GetDevSpeed>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681c      	ldr	r4, [r3, #0]
 8003572:	f001 fa37 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8003576:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800357c:	461a      	mov	r2, r3
 800357e:	4620      	mov	r0, r4
 8003580:	f002 ffc8 	bl	8006514 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f00c f80c 	bl	800f5a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003598:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f004 f948 	bl	8007834 <USB_ReadInterrupts>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b08      	cmp	r3, #8
 80035ac:	d10a      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f00b ffe9 	bl	800f586 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f002 0208 	and.w	r2, r2, #8
 80035c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 f933 	bl	8007834 <USB_ReadInterrupts>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d4:	2b80      	cmp	r3, #128	@ 0x80
 80035d6:	d123      	bne.n	8003620 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e4:	2301      	movs	r3, #1
 80035e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e8:	e014      	b.n	8003614 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035ea:	6879      	ldr	r1, [r7, #4]
 80035ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d105      	bne.n	800360e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 fb0a 	bl	8003c22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	791b      	ldrb	r3, [r3, #4]
 8003618:	461a      	mov	r2, r3
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	4293      	cmp	r3, r2
 800361e:	d3e4      	bcc.n	80035ea <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f004 f905 	bl	8007834 <USB_ReadInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003634:	d13c      	bne.n	80036b0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003636:	2301      	movs	r3, #1
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
 800363a:	e02b      	b.n	8003694 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003650:	4613      	mov	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	3318      	adds	r3, #24
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d115      	bne.n	800368e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003662:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003664:	2b00      	cmp	r3, #0
 8003666:	da12      	bge.n	800368e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3317      	adds	r3, #23
 8003678:	2201      	movs	r2, #1
 800367a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003684:	b2db      	uxtb	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 faca 	bl	8003c22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	3301      	adds	r3, #1
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	791b      	ldrb	r3, [r3, #4]
 8003698:	461a      	mov	r2, r3
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	4293      	cmp	r3, r2
 800369e:	d3cd      	bcc.n	800363c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80036ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f004 f8bd 	bl	8007834 <USB_ReadInterrupts>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036c4:	d156      	bne.n	8003774 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036c6:	2301      	movs	r3, #1
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ca:	e045      	b.n	8003758 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d12e      	bne.n	8003752 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	da2b      	bge.n	8003752 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	0c1a      	lsrs	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003704:	4053      	eors	r3, r2
 8003706:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800370a:	2b00      	cmp	r3, #0
 800370c:	d121      	bne.n	8003752 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003730:	6a3b      	ldr	r3, [r7, #32]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10a      	bne.n	8003752 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800374a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800374e:	6053      	str	r3, [r2, #4]
            break;
 8003750:	e008      	b.n	8003764 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	3301      	adds	r3, #1
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	791b      	ldrb	r3, [r3, #4]
 800375c:	461a      	mov	r2, r3
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003760:	4293      	cmp	r3, r2
 8003762:	d3b3      	bcc.n	80036cc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f004 f85b 	bl	8007834 <USB_ReadInterrupts>
 800377e:	4603      	mov	r3, r0
 8003780:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003788:	d10a      	bne.n	80037a0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f00b ff8a 	bl	800f6a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800379e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 f845 	bl	8007834 <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d115      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f00b ff7a 	bl	800f6c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6859      	ldr	r1, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	430a      	orrs	r2, r1
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	e000      	b.n	80037e0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80037de:	bf00      	nop
    }
  }
}
 80037e0:	3734      	adds	r7, #52	@ 0x34
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd90      	pop	{r4, r7, pc}

080037e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_PCD_SetAddress+0x1a>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e012      	b.n	8003826 <HAL_PCD_SetAddress+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f003 ffa4 	bl	8007764 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	4608      	mov	r0, r1
 8003838:	4611      	mov	r1, r2
 800383a:	461a      	mov	r2, r3
 800383c:	4603      	mov	r3, r0
 800383e:	70fb      	strb	r3, [r7, #3]
 8003840:	460b      	mov	r3, r1
 8003842:	803b      	strh	r3, [r7, #0]
 8003844:	4613      	mov	r3, r2
 8003846:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800384c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003850:	2b00      	cmp	r3, #0
 8003852:	da0f      	bge.n	8003874 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	f003 020f 	and.w	r2, r3, #15
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	3310      	adds	r3, #16
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	4413      	add	r3, r2
 8003868:	3304      	adds	r3, #4
 800386a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	705a      	strb	r2, [r3, #1]
 8003872:	e00f      	b.n	8003894 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	f003 020f 	and.w	r2, r3, #15
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4413      	add	r3, r2
 800388a:	3304      	adds	r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80038a0:	883b      	ldrh	r3, [r7, #0]
 80038a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	78ba      	ldrb	r2, [r7, #2]
 80038ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	785b      	ldrb	r3, [r3, #1]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d004      	beq.n	80038c2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	461a      	mov	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80038c2:	78bb      	ldrb	r3, [r7, #2]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d102      	bne.n	80038ce <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_PCD_EP_Open+0xae>
 80038d8:	2302      	movs	r3, #2
 80038da:	e00e      	b.n	80038fa <HAL_PCD_EP_Open+0xcc>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68f9      	ldr	r1, [r7, #12]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 f924 	bl	8006b38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80038f8:	7afb      	ldrb	r3, [r7, #11]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800390e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003912:	2b00      	cmp	r3, #0
 8003914:	da0f      	bge.n	8003936 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003916:	78fb      	ldrb	r3, [r7, #3]
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	4613      	mov	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	3310      	adds	r3, #16
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	705a      	strb	r2, [r3, #1]
 8003934:	e00f      	b.n	8003956 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	f003 020f 	and.w	r2, r3, #15
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	3304      	adds	r3, #4
 800394e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_PCD_EP_Close+0x6e>
 800396c:	2302      	movs	r3, #2
 800396e:	e00e      	b.n	800398e <HAL_PCD_EP_Close+0x8c>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	4618      	mov	r0, r3
 8003980:	f003 f962 	bl	8006c48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b086      	sub	sp, #24
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	460b      	mov	r3, r1
 80039a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039a6:	7afb      	ldrb	r3, [r7, #11]
 80039a8:	f003 020f 	and.w	r2, r3, #15
 80039ac:	4613      	mov	r3, r2
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	4413      	add	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	3304      	adds	r3, #4
 80039be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2200      	movs	r2, #0
 80039d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039d8:	7afb      	ldrb	r3, [r7, #11]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	799b      	ldrb	r3, [r3, #6]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d102      	bne.n	80039f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	799b      	ldrb	r3, [r3, #6]
 80039fa:	461a      	mov	r2, r3
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	f003 f9ff 	bl	8006e00 <USB_EPStartXfer>

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	607a      	str	r2, [r7, #4]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	3304      	adds	r3, #4
 8003a62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2200      	movs	r2, #0
 8003a74:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	799b      	ldrb	r3, [r3, #6]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d102      	bne.n	8003a96 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	799b      	ldrb	r3, [r3, #6]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6979      	ldr	r1, [r7, #20]
 8003aa2:	f003 f9ad 	bl	8006e00 <USB_EPStartXfer>

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	7912      	ldrb	r2, [r2, #4]
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e04f      	b.n	8003b6e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	da0f      	bge.n	8003af6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 020f 	and.w	r2, r3, #15
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	3310      	adds	r3, #16
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	705a      	strb	r2, [r3, #1]
 8003af4:	e00d      	b.n	8003b12 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003af6:	78fa      	ldrb	r2, [r7, #3]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_PCD_EP_SetStall+0x82>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e01d      	b.n	8003b6e <HAL_PCD_EP_SetStall+0xbe>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f003 fd3b 	bl	80075bc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6818      	ldr	r0, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	7999      	ldrb	r1, [r3, #6]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f003 ff2c 	bl	80079bc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	7912      	ldrb	r2, [r2, #4]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e042      	b.n	8003c1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	da0f      	bge.n	8003bbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3310      	adds	r3, #16
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	705a      	strb	r2, [r3, #1]
 8003bba:	e00f      	b.n	8003bdc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_PCD_EP_ClrStall+0x86>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e00e      	b.n	8003c1a <HAL_PCD_EP_ClrStall+0xa4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68f9      	ldr	r1, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f003 fd44 	bl	8007698 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003c2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	da0c      	bge.n	8003c50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	3310      	adds	r3, #16
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	e00c      	b.n	8003c6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	f003 020f 	and.w	r2, r3, #15
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4413      	add	r3, r2
 8003c66:	3304      	adds	r3, #4
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68f9      	ldr	r1, [r7, #12]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f003 fb63 	bl	800733c <USB_EPStopXfer>
 8003c76:	4603      	mov	r3, r0
 8003c78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_PCD_EP_Flush+0x1a>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e01b      	b.n	8003cd6 <HAL_PCD_EP_Flush+0x52>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da09      	bge.n	8003cc2 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f002 fe9e 	bl	80069fc <USB_FlushTxFifo>
 8003cc0:	e004      	b.n	8003ccc <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f002 feca 	bl	8006a60 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b08a      	sub	sp, #40	@ 0x28
 8003ce2:	af02      	add	r7, sp, #8
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	3310      	adds	r3, #16
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	3304      	adds	r3, #4
 8003d04:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	695a      	ldr	r2, [r3, #20]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d901      	bls.n	8003d16 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e06b      	b.n	8003dee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	691a      	ldr	r2, [r3, #16]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d902      	bls.n	8003d32 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3303      	adds	r3, #3
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d3a:	e02a      	b.n	8003d92 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	69fa      	ldr	r2, [r7, #28]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d902      	bls.n	8003d58 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3303      	adds	r3, #3
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68d9      	ldr	r1, [r3, #12]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	4603      	mov	r3, r0
 8003d74:	6978      	ldr	r0, [r7, #20]
 8003d76:	f003 fb8b 	bl	8007490 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	441a      	add	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	441a      	add	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d809      	bhi.n	8003dbc <PCD_WriteEmptyTxFifo+0xde>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d203      	bcs.n	8003dbc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1bf      	bne.n	8003d3c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d811      	bhi.n	8003dec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	2201      	movs	r2, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	6939      	ldr	r1, [r7, #16]
 8003de4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003de8:	4013      	ands	r3, r2
 8003dea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	333c      	adds	r3, #60	@ 0x3c
 8003e10:	3304      	adds	r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	799b      	ldrb	r3, [r3, #6]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d17b      	bne.n	8003f26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d015      	beq.n	8003e64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4a61      	ldr	r2, [pc, #388]	@ (8003fc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f240 80b9 	bls.w	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80b3 	beq.w	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e60:	6093      	str	r3, [r2, #8]
 8003e62:	e0a7      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	6093      	str	r3, [r2, #8]
 8003e80:	e098      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 8093 	bne.w	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4a4b      	ldr	r2, [pc, #300]	@ (8003fc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d90f      	bls.n	8003eb6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003eac:	461a      	mov	r2, r3
 8003eae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eb2:	6093      	str	r3, [r2, #8]
 8003eb4:	e07e      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	0159      	lsls	r1, r3, #5
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee2:	1ad2      	subs	r2, r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d114      	bne.n	8003f18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f00:	461a      	mov	r2, r3
 8003f02:	2101      	movs	r1, #1
 8003f04:	f003 fd5a 	bl	80079bc <USB_EP0_OutStart>
 8003f08:	e006      	b.n	8003f18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	441a      	add	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f00b fafc 	bl	800f51c <HAL_PCD_DataOutStageCallback>
 8003f24:	e046      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4a26      	ldr	r2, [pc, #152]	@ (8003fc4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d124      	bne.n	8003f78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4a:	6093      	str	r3, [r2, #8]
 8003f4c:	e032      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f64:	461a      	mov	r2, r3
 8003f66:	2320      	movs	r3, #32
 8003f68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f00b fad3 	bl	800f51c <HAL_PCD_DataOutStageCallback>
 8003f76:	e01d      	b.n	8003fb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d114      	bne.n	8003fa8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	f003 fd0a 	bl	80079bc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f00b fab4 	bl	800f51c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3720      	adds	r7, #32
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	4f54300a 	.word	0x4f54300a
 8003fc4:	4f54310a 	.word	0x4f54310a

08003fc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	333c      	adds	r3, #60	@ 0x3c
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a15      	ldr	r2, [pc, #84]	@ (8004050 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d90e      	bls.n	800401c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800401a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f00b fa6b 	bl	800f4f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <PCD_EP_OutSetupPacket_int+0x88>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d90c      	bls.n	8004044 <PCD_EP_OutSetupPacket_int+0x7c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	799b      	ldrb	r3, [r3, #6]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d108      	bne.n	8004044 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800403c:	461a      	mov	r2, r3
 800403e:	2101      	movs	r1, #1
 8004040:	f003 fcbc 	bl	80079bc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	4f54300a 	.word	0x4f54300a

08004054 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
 8004060:	4613      	mov	r3, r2
 8004062:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d107      	bne.n	8004082 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004072:	883b      	ldrh	r3, [r7, #0]
 8004074:	0419      	lsls	r1, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	430a      	orrs	r2, r1
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004080:	e028      	b.n	80040d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4413      	add	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	e00d      	b.n	80040b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	3340      	adds	r3, #64	@ 0x40
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4413      	add	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	3301      	adds	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d3ec      	bcc.n	8004096 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040bc:	883b      	ldrh	r3, [r7, #0]
 80040be:	0418      	lsls	r0, r3, #16
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	78fb      	ldrb	r3, [r7, #3]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	4302      	orrs	r2, r0
 80040cc:	3340      	adds	r3, #64	@ 0x40
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e267      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d075      	beq.n	8004226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800413a:	4b88      	ldr	r3, [pc, #544]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b04      	cmp	r3, #4
 8004144:	d00c      	beq.n	8004160 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004146:	4b85      	ldr	r3, [pc, #532]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800414e:	2b08      	cmp	r3, #8
 8004150:	d112      	bne.n	8004178 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004152:	4b82      	ldr	r3, [pc, #520]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800415a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800415e:	d10b      	bne.n	8004178 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	4b7e      	ldr	r3, [pc, #504]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05b      	beq.n	8004224 <HAL_RCC_OscConfig+0x108>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d157      	bne.n	8004224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e242      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004180:	d106      	bne.n	8004190 <HAL_RCC_OscConfig+0x74>
 8004182:	4b76      	ldr	r3, [pc, #472]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a75      	ldr	r2, [pc, #468]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e01d      	b.n	80041cc <HAL_RCC_OscConfig+0xb0>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCC_OscConfig+0x98>
 800419a:	4b70      	ldr	r3, [pc, #448]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a6f      	ldr	r2, [pc, #444]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b6d      	ldr	r3, [pc, #436]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a6c      	ldr	r2, [pc, #432]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0xb0>
 80041b4:	4b69      	ldr	r3, [pc, #420]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a68      	ldr	r2, [pc, #416]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	4b66      	ldr	r3, [pc, #408]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a65      	ldr	r2, [pc, #404]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe f9a2 	bl	800251c <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fe f99e 	bl	800251c <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	@ 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e207      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b5b      	ldr	r3, [pc, #364]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0xc0>
 80041fa:	e014      	b.n	8004226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fe f98e 	bl	800251c <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004204:	f7fe f98a 	bl	800251c <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	@ 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1f3      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004216:	4b51      	ldr	r3, [pc, #324]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0xe8>
 8004222:	e000      	b.n	8004226 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d063      	beq.n	80042fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004232:	4b4a      	ldr	r3, [pc, #296]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00b      	beq.n	8004256 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423e:	4b47      	ldr	r3, [pc, #284]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004246:	2b08      	cmp	r3, #8
 8004248:	d11c      	bne.n	8004284 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800424a:	4b44      	ldr	r3, [pc, #272]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004256:	4b41      	ldr	r3, [pc, #260]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d005      	beq.n	800426e <HAL_RCC_OscConfig+0x152>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e1c7      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426e:	4b3b      	ldr	r3, [pc, #236]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4937      	ldr	r1, [pc, #220]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004282:	e03a      	b.n	80042fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800428c:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <HAL_RCC_OscConfig+0x244>)
 800428e:	2201      	movs	r2, #1
 8004290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fe f943 	bl	800251c <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004298:	e008      	b.n	80042ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429a:	f7fe f93f 	bl	800251c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d901      	bls.n	80042ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e1a8      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ac:	4b2b      	ldr	r3, [pc, #172]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0f0      	beq.n	800429a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b8:	4b28      	ldr	r3, [pc, #160]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4925      	ldr	r1, [pc, #148]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]
 80042cc:	e015      	b.n	80042fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ce:	4b24      	ldr	r3, [pc, #144]	@ (8004360 <HAL_RCC_OscConfig+0x244>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d4:	f7fe f922 	bl	800251c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042dc:	f7fe f91e 	bl	800251c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e187      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ee:	4b1b      	ldr	r3, [pc, #108]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1f0      	bne.n	80042dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d036      	beq.n	8004374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d016      	beq.n	800433c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430e:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <HAL_RCC_OscConfig+0x248>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fe f902 	bl	800251c <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431c:	f7fe f8fe 	bl	800251c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e167      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432e:	4b0b      	ldr	r3, [pc, #44]	@ (800435c <HAL_RCC_OscConfig+0x240>)
 8004330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x200>
 800433a:	e01b      	b.n	8004374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_OscConfig+0x248>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004342:	f7fe f8eb 	bl	800251c <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004348:	e00e      	b.n	8004368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434a:	f7fe f8e7 	bl	800251c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d907      	bls.n	8004368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e150      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
 800435c:	40023800 	.word	0x40023800
 8004360:	42470000 	.word	0x42470000
 8004364:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	4b88      	ldr	r3, [pc, #544]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 800436a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ea      	bne.n	800434a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 8097 	beq.w	80044b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004382:	2300      	movs	r3, #0
 8004384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004386:	4b81      	ldr	r3, [pc, #516]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10f      	bne.n	80043b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	4b7d      	ldr	r3, [pc, #500]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439a:	4a7c      	ldr	r2, [pc, #496]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 800439c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043a2:	4b7a      	ldr	r3, [pc, #488]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b2:	4b77      	ldr	r3, [pc, #476]	@ (8004590 <HAL_RCC_OscConfig+0x474>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d118      	bne.n	80043f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043be:	4b74      	ldr	r3, [pc, #464]	@ (8004590 <HAL_RCC_OscConfig+0x474>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a73      	ldr	r2, [pc, #460]	@ (8004590 <HAL_RCC_OscConfig+0x474>)
 80043c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ca:	f7fe f8a7 	bl	800251c <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043d2:	f7fe f8a3 	bl	800251c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e10c      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004590 <HAL_RCC_OscConfig+0x474>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x2ea>
 80043f8:	4b64      	ldr	r3, [pc, #400]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 80043fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fc:	4a63      	ldr	r2, [pc, #396]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 80043fe:	f043 0301 	orr.w	r3, r3, #1
 8004402:	6713      	str	r3, [r2, #112]	@ 0x70
 8004404:	e01c      	b.n	8004440 <HAL_RCC_OscConfig+0x324>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b05      	cmp	r3, #5
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0x30c>
 800440e:	4b5f      	ldr	r3, [pc, #380]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004412:	4a5e      	ldr	r2, [pc, #376]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004414:	f043 0304 	orr.w	r3, r3, #4
 8004418:	6713      	str	r3, [r2, #112]	@ 0x70
 800441a:	4b5c      	ldr	r3, [pc, #368]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	4a5b      	ldr	r2, [pc, #364]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6713      	str	r3, [r2, #112]	@ 0x70
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0x324>
 8004428:	4b58      	ldr	r3, [pc, #352]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800442c:	4a57      	ldr	r2, [pc, #348]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	6713      	str	r3, [r2, #112]	@ 0x70
 8004434:	4b55      	ldr	r3, [pc, #340]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004438:	4a54      	ldr	r2, [pc, #336]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 800443a:	f023 0304 	bic.w	r3, r3, #4
 800443e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004448:	f7fe f868 	bl	800251c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444e:	e00a      	b.n	8004466 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004450:	f7fe f864 	bl	800251c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800445e:	4293      	cmp	r3, r2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e0cb      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004466:	4b49      	ldr	r3, [pc, #292]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0ee      	beq.n	8004450 <HAL_RCC_OscConfig+0x334>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004474:	f7fe f852 	bl	800251c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447c:	f7fe f84e 	bl	800251c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0b5      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004492:	4b3e      	ldr	r3, [pc, #248]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ee      	bne.n	800447c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800449e:	7dfb      	ldrb	r3, [r7, #23]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d105      	bne.n	80044b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a4:	4b39      	ldr	r3, [pc, #228]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	4a38      	ldr	r2, [pc, #224]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 80044aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80a1 	beq.w	80045fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044ba:	4b34      	ldr	r3, [pc, #208]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d05c      	beq.n	8004580 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d141      	bne.n	8004552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b31      	ldr	r3, [pc, #196]	@ (8004594 <HAL_RCC_OscConfig+0x478>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe f822 	bl	800251c <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fe f81e 	bl	800251c <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e087      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	4b27      	ldr	r3, [pc, #156]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	3b01      	subs	r3, #1
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	491b      	ldr	r1, [pc, #108]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004524:	4b1b      	ldr	r3, [pc, #108]	@ (8004594 <HAL_RCC_OscConfig+0x478>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fd fff7 	bl	800251c <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004532:	f7fd fff3 	bl	800251c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e05c      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004544:	4b11      	ldr	r3, [pc, #68]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x416>
 8004550:	e054      	b.n	80045fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <HAL_RCC_OscConfig+0x478>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fd ffe0 	bl	800251c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004560:	f7fd ffdc 	bl	800251c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e045      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	4b06      	ldr	r3, [pc, #24]	@ (800458c <HAL_RCC_OscConfig+0x470>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x444>
 800457e:	e03d      	b.n	80045fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d107      	bne.n	8004598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e038      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
 800458c:	40023800 	.word	0x40023800
 8004590:	40007000 	.word	0x40007000
 8004594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004598:	4b1b      	ldr	r3, [pc, #108]	@ (8004608 <HAL_RCC_OscConfig+0x4ec>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d028      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d121      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045be:	429a      	cmp	r2, r3
 80045c0:	d11a      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045c8:	4013      	ands	r3, r2
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d111      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	085b      	lsrs	r3, r3, #1
 80045e0:	3b01      	subs	r3, #1
 80045e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d107      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40023800 	.word	0x40023800

0800460c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0cc      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004620:	4b68      	ldr	r3, [pc, #416]	@ (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d90c      	bls.n	8004648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462e:	4b65      	ldr	r3, [pc, #404]	@ (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004630:	683a      	ldr	r2, [r7, #0]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004636:	4b63      	ldr	r3, [pc, #396]	@ (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d001      	beq.n	8004648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0b8      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004660:	4b59      	ldr	r3, [pc, #356]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a58      	ldr	r2, [pc, #352]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800466a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0308 	and.w	r3, r3, #8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004678:	4b53      	ldr	r3, [pc, #332]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	4a52      	ldr	r2, [pc, #328]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004684:	4b50      	ldr	r3, [pc, #320]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	494d      	ldr	r1, [pc, #308]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d044      	beq.n	800472c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d107      	bne.n	80046ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046aa:	4b47      	ldr	r3, [pc, #284]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d119      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d003      	beq.n	80046ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	4b3f      	ldr	r3, [pc, #252]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e06f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046da:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e067      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ea:	4b37      	ldr	r3, [pc, #220]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f023 0203 	bic.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	4934      	ldr	r1, [pc, #208]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046fc:	f7fd ff0e 	bl	800251c <HAL_GetTick>
 8004700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004702:	e00a      	b.n	800471a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004704:	f7fd ff0a 	bl	800251c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e04f      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471a:	4b2b      	ldr	r3, [pc, #172]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 020c 	and.w	r2, r3, #12
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	429a      	cmp	r2, r3
 800472a:	d1eb      	bne.n	8004704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800472c:	4b25      	ldr	r3, [pc, #148]	@ (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d20c      	bcs.n	8004754 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b22      	ldr	r3, [pc, #136]	@ (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b20      	ldr	r3, [pc, #128]	@ (80047c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e032      	b.n	80047ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004760:	4b19      	ldr	r3, [pc, #100]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	4916      	ldr	r1, [pc, #88]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d009      	beq.n	8004792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477e:	4b12      	ldr	r3, [pc, #72]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	490e      	ldr	r1, [pc, #56]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004792:	f000 f821 	bl	80047d8 <HAL_RCC_GetSysClockFreq>
 8004796:	4602      	mov	r2, r0
 8004798:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	490a      	ldr	r1, [pc, #40]	@ (80047cc <HAL_RCC_ClockConfig+0x1c0>)
 80047a4:	5ccb      	ldrb	r3, [r1, r3]
 80047a6:	fa22 f303 	lsr.w	r3, r2, r3
 80047aa:	4a09      	ldr	r2, [pc, #36]	@ (80047d0 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80047ae:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <HAL_RCC_ClockConfig+0x1c8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd fe6e 	bl	8002494 <HAL_InitTick>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023c00 	.word	0x40023c00
 80047c8:	40023800 	.word	0x40023800
 80047cc:	08010914 	.word	0x08010914
 80047d0:	20000004 	.word	0x20000004
 80047d4:	20000008 	.word	0x20000008

080047d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047dc:	b094      	sub	sp, #80	@ 0x50
 80047de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047f0:	4b79      	ldr	r3, [pc, #484]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d00d      	beq.n	8004818 <HAL_RCC_GetSysClockFreq+0x40>
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	f200 80e1 	bhi.w	80049c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x34>
 8004806:	2b04      	cmp	r3, #4
 8004808:	d003      	beq.n	8004812 <HAL_RCC_GetSysClockFreq+0x3a>
 800480a:	e0db      	b.n	80049c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b73      	ldr	r3, [pc, #460]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x204>)
 800480e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004810:	e0db      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004812:	4b73      	ldr	r3, [pc, #460]	@ (80049e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004814:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004816:	e0d8      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004818:	4b6f      	ldr	r3, [pc, #444]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004820:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004822:	4b6d      	ldr	r3, [pc, #436]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d063      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482e:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	099b      	lsrs	r3, r3, #6
 8004834:	2200      	movs	r2, #0
 8004836:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004838:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004840:	633b      	str	r3, [r7, #48]	@ 0x30
 8004842:	2300      	movs	r3, #0
 8004844:	637b      	str	r3, [r7, #52]	@ 0x34
 8004846:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800484a:	4622      	mov	r2, r4
 800484c:	462b      	mov	r3, r5
 800484e:	f04f 0000 	mov.w	r0, #0
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	0159      	lsls	r1, r3, #5
 8004858:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800485c:	0150      	lsls	r0, r2, #5
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4621      	mov	r1, r4
 8004864:	1a51      	subs	r1, r2, r1
 8004866:	6139      	str	r1, [r7, #16]
 8004868:	4629      	mov	r1, r5
 800486a:	eb63 0301 	sbc.w	r3, r3, r1
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	f04f 0200 	mov.w	r2, #0
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800487c:	4659      	mov	r1, fp
 800487e:	018b      	lsls	r3, r1, #6
 8004880:	4651      	mov	r1, sl
 8004882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004886:	4651      	mov	r1, sl
 8004888:	018a      	lsls	r2, r1, #6
 800488a:	4651      	mov	r1, sl
 800488c:	ebb2 0801 	subs.w	r8, r2, r1
 8004890:	4659      	mov	r1, fp
 8004892:	eb63 0901 	sbc.w	r9, r3, r1
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048aa:	4690      	mov	r8, r2
 80048ac:	4699      	mov	r9, r3
 80048ae:	4623      	mov	r3, r4
 80048b0:	eb18 0303 	adds.w	r3, r8, r3
 80048b4:	60bb      	str	r3, [r7, #8]
 80048b6:	462b      	mov	r3, r5
 80048b8:	eb49 0303 	adc.w	r3, r9, r3
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048ca:	4629      	mov	r1, r5
 80048cc:	024b      	lsls	r3, r1, #9
 80048ce:	4621      	mov	r1, r4
 80048d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d4:	4621      	mov	r1, r4
 80048d6:	024a      	lsls	r2, r1, #9
 80048d8:	4610      	mov	r0, r2
 80048da:	4619      	mov	r1, r3
 80048dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048de:	2200      	movs	r2, #0
 80048e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048e8:	f7fb ffe0 	bl	80008ac <__aeabi_uldivmod>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4613      	mov	r3, r2
 80048f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f4:	e058      	b.n	80049a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f6:	4b38      	ldr	r3, [pc, #224]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	2200      	movs	r2, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	4611      	mov	r1, r2
 8004902:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004906:	623b      	str	r3, [r7, #32]
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	@ 0x24
 800490c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	f04f 0000 	mov.w	r0, #0
 8004918:	f04f 0100 	mov.w	r1, #0
 800491c:	0159      	lsls	r1, r3, #5
 800491e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004922:	0150      	lsls	r0, r2, #5
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4641      	mov	r1, r8
 800492a:	ebb2 0a01 	subs.w	sl, r2, r1
 800492e:	4649      	mov	r1, r9
 8004930:	eb63 0b01 	sbc.w	fp, r3, r1
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004940:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004944:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004948:	ebb2 040a 	subs.w	r4, r2, sl
 800494c:	eb63 050b 	sbc.w	r5, r3, fp
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	00eb      	lsls	r3, r5, #3
 800495a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495e:	00e2      	lsls	r2, r4, #3
 8004960:	4614      	mov	r4, r2
 8004962:	461d      	mov	r5, r3
 8004964:	4643      	mov	r3, r8
 8004966:	18e3      	adds	r3, r4, r3
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	464b      	mov	r3, r9
 800496c:	eb45 0303 	adc.w	r3, r5, r3
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497e:	4629      	mov	r1, r5
 8004980:	028b      	lsls	r3, r1, #10
 8004982:	4621      	mov	r1, r4
 8004984:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004988:	4621      	mov	r1, r4
 800498a:	028a      	lsls	r2, r1, #10
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004992:	2200      	movs	r2, #0
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	61fa      	str	r2, [r7, #28]
 8004998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800499c:	f7fb ff86 	bl	80008ac <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4613      	mov	r3, r2
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80049a8:	4b0b      	ldr	r3, [pc, #44]	@ (80049d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	3301      	adds	r3, #1
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80049b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049c2:	e002      	b.n	80049ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c4:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <HAL_RCC_GetSysClockFreq+0x204>)
 80049c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3750      	adds	r7, #80	@ 0x50
 80049d0:	46bd      	mov	sp, r7
 80049d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	007a1200 	.word	0x007a1200

080049e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e8:	4b03      	ldr	r3, [pc, #12]	@ (80049f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ea:	681b      	ldr	r3, [r3, #0]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000004 	.word	0x20000004

080049fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a00:	f7ff fff0 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	0a9b      	lsrs	r3, r3, #10
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4903      	ldr	r1, [pc, #12]	@ (8004a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	08010924 	.word	0x08010924

08004a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a28:	f7ff ffdc 	bl	80049e4 <HAL_RCC_GetHCLKFreq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	0b5b      	lsrs	r3, r3, #13
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	4903      	ldr	r1, [pc, #12]	@ (8004a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a3a:	5ccb      	ldrb	r3, [r1, r3]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	08010924 	.word	0x08010924

08004a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e07b      	b.n	8004b56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d108      	bne.n	8004a78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a6e:	d009      	beq.n	8004a84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	61da      	str	r2, [r3, #28]
 8004a76:	e005      	b.n	8004a84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f7fd fb34 	bl	800210c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004acc:	431a      	orrs	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af4:	431a      	orrs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b08:	ea42 0103 	orr.w	r1, r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	f003 0104 	and.w	r1, r3, #4
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	f003 0210 	and.w	r2, r3, #16
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b088      	sub	sp, #32
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b6e:	f7fd fcd5 	bl	800251c <HAL_GetTick>
 8004b72:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b74:	88fb      	ldrh	r3, [r7, #6]
 8004b76:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b84:	2302      	movs	r3, #2
 8004b86:	e12a      	b.n	8004dde <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <HAL_SPI_Transmit+0x36>
 8004b8e:	88fb      	ldrh	r3, [r7, #6]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e122      	b.n	8004dde <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_SPI_Transmit+0x48>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e11b      	b.n	8004dde <HAL_SPI_Transmit+0x280>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	88fa      	ldrh	r2, [r7, #6]
 8004bc6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf4:	d10f      	bne.n	8004c16 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c20:	2b40      	cmp	r3, #64	@ 0x40
 8004c22:	d007      	beq.n	8004c34 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c3c:	d152      	bne.n	8004ce4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <HAL_SPI_Transmit+0xee>
 8004c46:	8b7b      	ldrh	r3, [r7, #26]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d145      	bne.n	8004cd8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5c:	1c9a      	adds	r2, r3, #2
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c70:	e032      	b.n	8004cd8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d112      	bne.n	8004ca6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	1c9a      	adds	r2, r3, #2
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ca4:	e018      	b.n	8004cd8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ca6:	f7fd fc39 	bl	800251c <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d803      	bhi.n	8004cbe <HAL_SPI_Transmit+0x160>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cbc:	d102      	bne.n	8004cc4 <HAL_SPI_Transmit+0x166>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e082      	b.n	8004dde <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1c7      	bne.n	8004c72 <HAL_SPI_Transmit+0x114>
 8004ce2:	e053      	b.n	8004d8c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_SPI_Transmit+0x194>
 8004cec:	8b7b      	ldrh	r3, [r7, #26]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d147      	bne.n	8004d82 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d18:	e033      	b.n	8004d82 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d113      	bne.n	8004d50 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d4e:	e018      	b.n	8004d82 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d50:	f7fd fbe4 	bl	800251c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d803      	bhi.n	8004d68 <HAL_SPI_Transmit+0x20a>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d102      	bne.n	8004d6e <HAL_SPI_Transmit+0x210>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e02d      	b.n	8004dde <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1c6      	bne.n	8004d1a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d8c:	69fa      	ldr	r2, [r7, #28]
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fa59 	bl	8005248 <SPI_EndRxTxTransaction>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
  }
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3720      	adds	r7, #32
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b08a      	sub	sp, #40	@ 0x28
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	60f8      	str	r0, [r7, #12]
 8004dee:	60b9      	str	r1, [r7, #8]
 8004df0:	607a      	str	r2, [r7, #4]
 8004df2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004df4:	2301      	movs	r3, #1
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004df8:	f7fd fb90 	bl	800251c <HAL_GetTick>
 8004dfc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e04:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e10:	7ffb      	ldrb	r3, [r7, #31]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d00c      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x4a>
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e1c:	d106      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d102      	bne.n	8004e2c <HAL_SPI_TransmitReceive+0x46>
 8004e26:	7ffb      	ldrb	r3, [r7, #31]
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d001      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e17f      	b.n	8005130 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x5c>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_TransmitReceive+0x5c>
 8004e3c:	887b      	ldrh	r3, [r7, #2]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e174      	b.n	8005130 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_SPI_TransmitReceive+0x6e>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e16d      	b.n	8005130 <HAL_SPI_TransmitReceive+0x34a>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b04      	cmp	r3, #4
 8004e66:	d003      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2205      	movs	r2, #5
 8004e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	887a      	ldrh	r2, [r7, #2]
 8004e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	887a      	ldrh	r2, [r7, #2]
 8004e86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	887a      	ldrh	r2, [r7, #2]
 8004e92:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	887a      	ldrh	r2, [r7, #2]
 8004e98:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb0:	2b40      	cmp	r3, #64	@ 0x40
 8004eb2:	d007      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ec2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ecc:	d17e      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <HAL_SPI_TransmitReceive+0xf6>
 8004ed6:	8afb      	ldrh	r3, [r7, #22]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d16c      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	881a      	ldrh	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eec:	1c9a      	adds	r2, r3, #2
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f00:	e059      	b.n	8004fb6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 0302 	and.w	r3, r3, #2
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d11b      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x162>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <HAL_SPI_TransmitReceive+0x162>
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d113      	bne.n	8004f48 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f24:	881a      	ldrh	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f30:	1c9a      	adds	r2, r3, #2
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d119      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x1a4>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d014      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68da      	ldr	r2, [r3, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	b292      	uxth	r2, r2
 8004f6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f86:	2301      	movs	r3, #1
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f8a:	f7fd fac7 	bl	800251c <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d80d      	bhi.n	8004fb6 <HAL_SPI_TransmitReceive+0x1d0>
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d009      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e0bc      	b.n	8005130 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1a0      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x11c>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d19b      	bne.n	8004f02 <HAL_SPI_TransmitReceive+0x11c>
 8004fca:	e082      	b.n	80050d2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <HAL_SPI_TransmitReceive+0x1f4>
 8004fd4:	8afb      	ldrh	r3, [r7, #22]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d171      	bne.n	80050be <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	330c      	adds	r3, #12
 8004fe4:	7812      	ldrb	r2, [r2, #0]
 8004fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	b29a      	uxth	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005000:	e05d      	b.n	80050be <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d11c      	bne.n	800504a <HAL_SPI_TransmitReceive+0x264>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d017      	beq.n	800504a <HAL_SPI_TransmitReceive+0x264>
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	2b01      	cmp	r3, #1
 800501e:	d114      	bne.n	800504a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	330c      	adds	r3, #12
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d119      	bne.n	800508c <HAL_SPI_TransmitReceive+0x2a6>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d014      	beq.n	800508c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800507e:	b29b      	uxth	r3, r3
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005088:	2301      	movs	r3, #1
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800508c:	f7fd fa46 	bl	800251c <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005098:	429a      	cmp	r2, r3
 800509a:	d803      	bhi.n	80050a4 <HAL_SPI_TransmitReceive+0x2be>
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a2:	d102      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x2c4>
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d109      	bne.n	80050be <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e038      	b.n	8005130 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d19c      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x21c>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d197      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050d2:	6a3a      	ldr	r2, [r7, #32]
 80050d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f8b6 	bl	8005248 <SPI_EndRxTxTransaction>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e01d      	b.n	8005130 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800512e:	2300      	movs	r3, #0
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	3728      	adds	r7, #40	@ 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b088      	sub	sp, #32
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005148:	f7fd f9e8 	bl	800251c <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	4413      	add	r3, r2
 8005156:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005158:	f7fd f9e0 	bl	800251c <HAL_GetTick>
 800515c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800515e:	4b39      	ldr	r3, [pc, #228]	@ (8005244 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	015b      	lsls	r3, r3, #5
 8005164:	0d1b      	lsrs	r3, r3, #20
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516e:	e055      	b.n	800521c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d051      	beq.n	800521c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005178:	f7fd f9d0 	bl	800251c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	69fa      	ldr	r2, [r7, #28]
 8005184:	429a      	cmp	r2, r3
 8005186:	d902      	bls.n	800518e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d13d      	bne.n	800520a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800519c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051a6:	d111      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051b0:	d004      	beq.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ba:	d107      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051d4:	d10f      	bne.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e018      	b.n	800523c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e002      	b.n	800521c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	3b01      	subs	r3, #1
 800521a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4013      	ands	r3, r2
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	429a      	cmp	r2, r3
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	429a      	cmp	r2, r3
 8005238:	d19a      	bne.n	8005170 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3720      	adds	r7, #32
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	20000004 	.word	0x20000004

08005248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2201      	movs	r2, #1
 800525c:	2102      	movs	r1, #2
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f7ff ff6a 	bl	8005138 <SPI_WaitFlagStateUntilTimeout>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	f043 0220 	orr.w	r2, r3, #32
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e032      	b.n	80052e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800527a:	4b1b      	ldr	r3, [pc, #108]	@ (80052e8 <SPI_EndRxTxTransaction+0xa0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ec <SPI_EndRxTxTransaction+0xa4>)
 8005280:	fba2 2303 	umull	r2, r3, r2, r3
 8005284:	0d5b      	lsrs	r3, r3, #21
 8005286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800528a:	fb02 f303 	mul.w	r3, r2, r3
 800528e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005298:	d112      	bne.n	80052c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2180      	movs	r1, #128	@ 0x80
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f7ff ff47 	bl	8005138 <SPI_WaitFlagStateUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d016      	beq.n	80052de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e00f      	b.n	80052e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d6:	2b80      	cmp	r3, #128	@ 0x80
 80052d8:	d0f2      	beq.n	80052c0 <SPI_EndRxTxTransaction+0x78>
 80052da:	e000      	b.n	80052de <SPI_EndRxTxTransaction+0x96>
        break;
 80052dc:	bf00      	nop
  }

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000004 	.word	0x20000004
 80052ec:	165e9f81 	.word	0x165e9f81

080052f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e042      	b.n	8005388 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d106      	bne.n	800531c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7fc ff40 	bl	800219c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2224      	movs	r2, #36	@ 0x24
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fe15 	bl	8005f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08a      	sub	sp, #40	@ 0x28
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d175      	bne.n	800549c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_UART_Transmit+0x2c>
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e06e      	b.n	800549e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2221      	movs	r2, #33	@ 0x21
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ce:	f7fd f8a5 	bl	800251c <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e8:	d108      	bne.n	80053fc <HAL_UART_Transmit+0x6c>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e003      	b.n	8005404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005400:	2300      	movs	r3, #0
 8005402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005404:	e02e      	b.n	8005464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2200      	movs	r2, #0
 800540e:	2180      	movs	r1, #128	@ 0x80
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fbb3 	bl	8005b7c <UART_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e03a      	b.n	800549e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800543c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	3302      	adds	r3, #2
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	e007      	b.n	8005456 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	781a      	ldrb	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	3301      	adds	r3, #1
 8005454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1cb      	bne.n	8005406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2200      	movs	r2, #0
 8005476:	2140      	movs	r1, #64	@ 0x40
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f000 fb7f 	bl	8005b7c <UART_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e006      	b.n	800549e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e000      	b.n	800549e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3720      	adds	r7, #32
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b08a      	sub	sp, #40	@ 0x28
 80054aa:	af02      	add	r7, sp, #8
 80054ac:	60f8      	str	r0, [r7, #12]
 80054ae:	60b9      	str	r1, [r7, #8]
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	f040 8081 	bne.w	80055ca <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Receive+0x2e>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e079      	b.n	80055cc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2222      	movs	r2, #34	@ 0x22
 80054e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054ec:	f7fd f816 	bl	800251c <HAL_GetTick>
 80054f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005506:	d108      	bne.n	800551a <HAL_UART_Receive+0x74>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d104      	bne.n	800551a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e003      	b.n	8005522 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800551e:	2300      	movs	r3, #0
 8005520:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005522:	e047      	b.n	80055b4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2200      	movs	r2, #0
 800552c:	2120      	movs	r1, #32
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fb24 	bl	8005b7c <UART_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e042      	b.n	80055cc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10c      	bne.n	8005566 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005558:	b29a      	uxth	r2, r3
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	3302      	adds	r3, #2
 8005562:	61bb      	str	r3, [r7, #24]
 8005564:	e01f      	b.n	80055a6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556e:	d007      	beq.n	8005580 <HAL_UART_Receive+0xda>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <HAL_UART_Receive+0xe8>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	b2da      	uxtb	r2, r3
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e008      	b.n	80055a0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800559a:	b2da      	uxtb	r2, r3
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	3301      	adds	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1b2      	bne.n	8005524 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3720      	adds	r7, #32
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b0ba      	sub	sp, #232	@ 0xe8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d009      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fbd7 	bl	8005de6 <UART_Receive_IT>
      return;
 8005638:	e273      	b.n	8005b22 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800563a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80de 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
 8005644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d106      	bne.n	800565e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005654:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80d1 	beq.w	8005800 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800566e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f043 0201 	orr.w	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
 800568e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d005      	beq.n	80056a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800569e:	f043 0202 	orr.w	r2, r3, #2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80056a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00b      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
 80056b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
 80056d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d105      	bne.n	80056ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f2:	f043 0208 	orr.w	r2, r3, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 820a 	beq.w	8005b18 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fb62 	bl	8005de6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b40      	cmp	r3, #64	@ 0x40
 800572e:	bf0c      	ite	eq
 8005730:	2301      	moveq	r3, #1
 8005732:	2300      	movne	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d103      	bne.n	800574e <HAL_UART_IRQHandler+0x17a>
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d04f      	beq.n	80057ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa6d 	bl	8005c2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575e:	2b40      	cmp	r3, #64	@ 0x40
 8005760:	d141      	bne.n	80057e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005770:	e853 3f00 	ldrex	r3, [r3]
 8005774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005778:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800577c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3314      	adds	r3, #20
 800578a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800578e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005792:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800579a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80057a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1d9      	bne.n	8005762 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d013      	beq.n	80057de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	4a8a      	ldr	r2, [pc, #552]	@ (80059e4 <HAL_UART_IRQHandler+0x410>)
 80057bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fd f85b 	bl	800287e <HAL_DMA_Abort_IT>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d016      	beq.n	80057fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e00e      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9b6 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e4:	e00a      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9b2 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ec:	e006      	b.n	80057fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9ae 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80057fa:	e18d      	b.n	8005b18 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	bf00      	nop
    return;
 80057fe:	e18b      	b.n	8005b18 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005804:	2b01      	cmp	r3, #1
 8005806:	f040 8167 	bne.w	8005ad8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580e:	f003 0310 	and.w	r3, r3, #16
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 8160 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8159 	beq.w	8005ad8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b40      	cmp	r3, #64	@ 0x40
 8005848:	f040 80ce 	bne.w	80059e8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005858:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80a9 	beq.w	80059b4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800586a:	429a      	cmp	r2, r3
 800586c:	f080 80a2 	bcs.w	80059b4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005876:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005882:	f000 8088 	beq.w	8005996 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	330c      	adds	r3, #12
 800588c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800589c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	330c      	adds	r3, #12
 80058ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80058b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1d9      	bne.n	8005886 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3314      	adds	r3, #20
 80058d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3314      	adds	r3, #20
 80058f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005902:	e841 2300 	strex	r3, r2, [r1]
 8005906:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005908:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1e1      	bne.n	80058d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3314      	adds	r3, #20
 8005914:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800591e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005920:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	3314      	adds	r3, #20
 800592e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005932:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005934:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005938:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005940:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e3      	bne.n	800590e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	330c      	adds	r3, #12
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800595e:	e853 3f00 	ldrex	r3, [r3]
 8005962:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005966:	f023 0310 	bic.w	r3, r3, #16
 800596a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	330c      	adds	r3, #12
 8005974:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005978:	65ba      	str	r2, [r7, #88]	@ 0x58
 800597a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800597e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e3      	bne.n	8005954 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	4618      	mov	r0, r3
 8005992:	f7fc ff04 	bl	800279e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8d9 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059b2:	e0b3      	b.n	8005b1c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059bc:	429a      	cmp	r2, r3
 80059be:	f040 80ad 	bne.w	8005b1c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059cc:	f040 80a6 	bne.w	8005b1c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f8c1 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
      return;
 80059e2:	e09b      	b.n	8005b1c <HAL_UART_IRQHandler+0x548>
 80059e4:	08005cf5 	.word	0x08005cf5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 808e 	beq.w	8005b20 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 8089 	beq.w	8005b20 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005a32:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a38:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e3      	bne.n	8005a0e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3314      	adds	r3, #20
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	623b      	str	r3, [r7, #32]
   return(result);
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	f023 0301 	bic.w	r3, r3, #1
 8005a5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e3      	bne.n	8005a46 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2220      	movs	r2, #32
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	330c      	adds	r3, #12
 8005aac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ab0:	61fa      	str	r2, [r7, #28]
 8005ab2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	69b9      	ldr	r1, [r7, #24]
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	617b      	str	r3, [r7, #20]
   return(result);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e3      	bne.n	8005a8c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f847 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ad6:	e023      	b.n	8005b20 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <HAL_UART_IRQHandler+0x524>
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f910 	bl	8005d16 <UART_Transmit_IT>
    return;
 8005af6:	e014      	b.n	8005b22 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00e      	beq.n	8005b22 <HAL_UART_IRQHandler+0x54e>
 8005b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d008      	beq.n	8005b22 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f950 	bl	8005db6 <UART_EndTransmit_IT>
    return;
 8005b16:	e004      	b.n	8005b22 <HAL_UART_IRQHandler+0x54e>
    return;
 8005b18:	bf00      	nop
 8005b1a:	e002      	b.n	8005b22 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b1c:	bf00      	nop
 8005b1e:	e000      	b.n	8005b22 <HAL_UART_IRQHandler+0x54e>
      return;
 8005b20:	bf00      	nop
  }
}
 8005b22:	37e8      	adds	r7, #232	@ 0xe8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8c:	e03b      	b.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d037      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b96:	f7fc fcc1 	bl	800251c <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d302      	bcc.n	8005bac <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d101      	bne.n	8005bb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e03a      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d023      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b80      	cmp	r3, #128	@ 0x80
 8005bc2:	d020      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b40      	cmp	r3, #64	@ 0x40
 8005bc8:	d01d      	beq.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d116      	bne.n	8005c06 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005bd8:	2300      	movs	r3, #0
 8005bda:	617b      	str	r3, [r7, #20]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 f81d 	bl	8005c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e00f      	b.n	8005c26 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d0b4      	beq.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b095      	sub	sp, #84	@ 0x54
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	330c      	adds	r3, #12
 8005c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c56:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e5      	bne.n	8005c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3314      	adds	r3, #20
 8005c88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d119      	bne.n	8005cda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f023 0310 	bic.w	r3, r3, #16
 8005cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cc6:	61ba      	str	r2, [r7, #24]
 8005cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6979      	ldr	r1, [r7, #20]
 8005ccc:	69ba      	ldr	r2, [r7, #24]
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e5      	bne.n	8005ca6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ce8:	bf00      	nop
 8005cea:	3754      	adds	r7, #84	@ 0x54
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f7ff ff21 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b21      	cmp	r3, #33	@ 0x21
 8005d28:	d13e      	bne.n	8005da8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d32:	d114      	bne.n	8005d5e <UART_Transmit_IT+0x48>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d110      	bne.n	8005d5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	1c9a      	adds	r2, r3, #2
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]
 8005d5c:	e008      	b.n	8005d70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	1c59      	adds	r1, r3, #1
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6211      	str	r1, [r2, #32]
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10f      	bne.n	8005da4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005da2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff fea6 	bl	8005b28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b08c      	sub	sp, #48	@ 0x30
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b22      	cmp	r3, #34	@ 0x22
 8005e00:	f040 80aa 	bne.w	8005f58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e0c:	d115      	bne.n	8005e3a <UART_Receive_IT+0x54>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d111      	bne.n	8005e3a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	1c9a      	adds	r2, r3, #2
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e38:	e024      	b.n	8005e84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e48:	d007      	beq.n	8005e5a <UART_Receive_IT+0x74>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <UART_Receive_IT+0x82>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e008      	b.n	8005e7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e74:	b2da      	uxtb	r2, r3
 8005e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7e:	1c5a      	adds	r2, r3, #1
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	4619      	mov	r1, r3
 8005e92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d15d      	bne.n	8005f54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0220 	bic.w	r2, r2, #32
 8005ea6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68da      	ldr	r2, [r3, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0201 	bic.w	r2, r2, #1
 8005ec6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d135      	bne.n	8005f4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	330c      	adds	r3, #12
 8005eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f023 0310 	bic.w	r3, r3, #16
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f04:	623a      	str	r2, [r7, #32]
 8005f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	69f9      	ldr	r1, [r7, #28]
 8005f0a:	6a3a      	ldr	r2, [r7, #32]
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e5      	bne.n	8005ee4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0310 	and.w	r3, r3, #16
 8005f22:	2b10      	cmp	r3, #16
 8005f24:	d10a      	bne.n	8005f3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fe0e 	bl	8005b64 <HAL_UARTEx_RxEventCallback>
 8005f48:	e002      	b.n	8005f50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7ff fdf6 	bl	8005b3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e002      	b.n	8005f5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005f58:	2302      	movs	r3, #2
  }
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3730      	adds	r7, #48	@ 0x30
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f68:	b0c0      	sub	sp, #256	@ 0x100
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f80:	68d9      	ldr	r1, [r3, #12]
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	ea40 0301 	orr.w	r3, r0, r1
 8005f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005fbc:	f021 010c 	bic.w	r1, r1, #12
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fde:	6999      	ldr	r1, [r3, #24]
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	ea40 0301 	orr.w	r3, r0, r1
 8005fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b8f      	ldr	r3, [pc, #572]	@ (8006230 <UART_SetConfig+0x2cc>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d005      	beq.n	8006004 <UART_SetConfig+0xa0>
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8006234 <UART_SetConfig+0x2d0>)
 8006000:	429a      	cmp	r2, r3
 8006002:	d104      	bne.n	800600e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fe fd0e 	bl	8004a24 <HAL_RCC_GetPCLK2Freq>
 8006008:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800600c:	e003      	b.n	8006016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800600e:	f7fe fcf5 	bl	80049fc <HAL_RCC_GetPCLK1Freq>
 8006012:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006020:	f040 810c 	bne.w	800623c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006028:	2200      	movs	r2, #0
 800602a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800602e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	1891      	adds	r1, r2, r2
 800603c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800603e:	415b      	adcs	r3, r3
 8006040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006046:	4621      	mov	r1, r4
 8006048:	eb12 0801 	adds.w	r8, r2, r1
 800604c:	4629      	mov	r1, r5
 800604e:	eb43 0901 	adc.w	r9, r3, r1
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800605e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006066:	4690      	mov	r8, r2
 8006068:	4699      	mov	r9, r3
 800606a:	4623      	mov	r3, r4
 800606c:	eb18 0303 	adds.w	r3, r8, r3
 8006070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006074:	462b      	mov	r3, r5
 8006076:	eb49 0303 	adc.w	r3, r9, r3
 800607a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800608a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800608e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006092:	460b      	mov	r3, r1
 8006094:	18db      	adds	r3, r3, r3
 8006096:	653b      	str	r3, [r7, #80]	@ 0x50
 8006098:	4613      	mov	r3, r2
 800609a:	eb42 0303 	adc.w	r3, r2, r3
 800609e:	657b      	str	r3, [r7, #84]	@ 0x54
 80060a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80060a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80060a8:	f7fa fc00 	bl	80008ac <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4b61      	ldr	r3, [pc, #388]	@ (8006238 <UART_SetConfig+0x2d4>)
 80060b2:	fba3 2302 	umull	r2, r3, r3, r2
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	011c      	lsls	r4, r3, #4
 80060ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80060c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	1891      	adds	r1, r2, r2
 80060d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80060d4:	415b      	adcs	r3, r3
 80060d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80060dc:	4641      	mov	r1, r8
 80060de:	eb12 0a01 	adds.w	sl, r2, r1
 80060e2:	4649      	mov	r1, r9
 80060e4:	eb43 0b01 	adc.w	fp, r3, r1
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060fc:	4692      	mov	sl, r2
 80060fe:	469b      	mov	fp, r3
 8006100:	4643      	mov	r3, r8
 8006102:	eb1a 0303 	adds.w	r3, sl, r3
 8006106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800610a:	464b      	mov	r3, r9
 800610c:	eb4b 0303 	adc.w	r3, fp, r3
 8006110:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006120:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006128:	460b      	mov	r3, r1
 800612a:	18db      	adds	r3, r3, r3
 800612c:	643b      	str	r3, [r7, #64]	@ 0x40
 800612e:	4613      	mov	r3, r2
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	647b      	str	r3, [r7, #68]	@ 0x44
 8006136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800613a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800613e:	f7fa fbb5 	bl	80008ac <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4611      	mov	r1, r2
 8006148:	4b3b      	ldr	r3, [pc, #236]	@ (8006238 <UART_SetConfig+0x2d4>)
 800614a:	fba3 2301 	umull	r2, r3, r3, r1
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2264      	movs	r2, #100	@ 0x64
 8006152:	fb02 f303 	mul.w	r3, r2, r3
 8006156:	1acb      	subs	r3, r1, r3
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800615e:	4b36      	ldr	r3, [pc, #216]	@ (8006238 <UART_SetConfig+0x2d4>)
 8006160:	fba3 2302 	umull	r2, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800616c:	441c      	add	r4, r3
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006172:	2200      	movs	r2, #0
 8006174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006178:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800617c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	1891      	adds	r1, r2, r2
 8006186:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006188:	415b      	adcs	r3, r3
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800618c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006190:	4641      	mov	r1, r8
 8006192:	1851      	adds	r1, r2, r1
 8006194:	6339      	str	r1, [r7, #48]	@ 0x30
 8006196:	4649      	mov	r1, r9
 8006198:	414b      	adcs	r3, r1
 800619a:	637b      	str	r3, [r7, #52]	@ 0x34
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80061a8:	4659      	mov	r1, fp
 80061aa:	00cb      	lsls	r3, r1, #3
 80061ac:	4651      	mov	r1, sl
 80061ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061b2:	4651      	mov	r1, sl
 80061b4:	00ca      	lsls	r2, r1, #3
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	4642      	mov	r2, r8
 80061be:	189b      	adds	r3, r3, r2
 80061c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061c4:	464b      	mov	r3, r9
 80061c6:	460a      	mov	r2, r1
 80061c8:	eb42 0303 	adc.w	r3, r2, r3
 80061cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80061e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061e4:	460b      	mov	r3, r1
 80061e6:	18db      	adds	r3, r3, r3
 80061e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ea:	4613      	mov	r3, r2
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80061fa:	f7fa fb57 	bl	80008ac <__aeabi_uldivmod>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4b0d      	ldr	r3, [pc, #52]	@ (8006238 <UART_SetConfig+0x2d4>)
 8006204:	fba3 1302 	umull	r1, r3, r3, r2
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	2164      	movs	r1, #100	@ 0x64
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	3332      	adds	r3, #50	@ 0x32
 8006216:	4a08      	ldr	r2, [pc, #32]	@ (8006238 <UART_SetConfig+0x2d4>)
 8006218:	fba2 2303 	umull	r2, r3, r2, r3
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f003 0207 	and.w	r2, r3, #7
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4422      	add	r2, r4
 800622a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800622c:	e106      	b.n	800643c <UART_SetConfig+0x4d8>
 800622e:	bf00      	nop
 8006230:	40011000 	.word	0x40011000
 8006234:	40011400 	.word	0x40011400
 8006238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006240:	2200      	movs	r2, #0
 8006242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006246:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800624a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800624e:	4642      	mov	r2, r8
 8006250:	464b      	mov	r3, r9
 8006252:	1891      	adds	r1, r2, r2
 8006254:	6239      	str	r1, [r7, #32]
 8006256:	415b      	adcs	r3, r3
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
 800625a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800625e:	4641      	mov	r1, r8
 8006260:	1854      	adds	r4, r2, r1
 8006262:	4649      	mov	r1, r9
 8006264:	eb43 0501 	adc.w	r5, r3, r1
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	00eb      	lsls	r3, r5, #3
 8006272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006276:	00e2      	lsls	r2, r4, #3
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	4643      	mov	r3, r8
 800627e:	18e3      	adds	r3, r4, r3
 8006280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006284:	464b      	mov	r3, r9
 8006286:	eb45 0303 	adc.w	r3, r5, r3
 800628a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800629a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80062aa:	4629      	mov	r1, r5
 80062ac:	008b      	lsls	r3, r1, #2
 80062ae:	4621      	mov	r1, r4
 80062b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b4:	4621      	mov	r1, r4
 80062b6:	008a      	lsls	r2, r1, #2
 80062b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80062bc:	f7fa faf6 	bl	80008ac <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4b60      	ldr	r3, [pc, #384]	@ (8006448 <UART_SetConfig+0x4e4>)
 80062c6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	011c      	lsls	r4, r3, #4
 80062ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80062dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	1891      	adds	r1, r2, r2
 80062e6:	61b9      	str	r1, [r7, #24]
 80062e8:	415b      	adcs	r3, r3
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f0:	4641      	mov	r1, r8
 80062f2:	1851      	adds	r1, r2, r1
 80062f4:	6139      	str	r1, [r7, #16]
 80062f6:	4649      	mov	r1, r9
 80062f8:	414b      	adcs	r3, r1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006308:	4659      	mov	r1, fp
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006312:	4651      	mov	r1, sl
 8006314:	00ca      	lsls	r2, r1, #3
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	4603      	mov	r3, r0
 800631c:	4642      	mov	r2, r8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006324:	464b      	mov	r3, r9
 8006326:	460a      	mov	r2, r1
 8006328:	eb42 0303 	adc.w	r3, r2, r3
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	67bb      	str	r3, [r7, #120]	@ 0x78
 800633a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006348:	4649      	mov	r1, r9
 800634a:	008b      	lsls	r3, r1, #2
 800634c:	4641      	mov	r1, r8
 800634e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006352:	4641      	mov	r1, r8
 8006354:	008a      	lsls	r2, r1, #2
 8006356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800635a:	f7fa faa7 	bl	80008ac <__aeabi_uldivmod>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4611      	mov	r1, r2
 8006364:	4b38      	ldr	r3, [pc, #224]	@ (8006448 <UART_SetConfig+0x4e4>)
 8006366:	fba3 2301 	umull	r2, r3, r3, r1
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	2264      	movs	r2, #100	@ 0x64
 800636e:	fb02 f303 	mul.w	r3, r2, r3
 8006372:	1acb      	subs	r3, r1, r3
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	3332      	adds	r3, #50	@ 0x32
 8006378:	4a33      	ldr	r2, [pc, #204]	@ (8006448 <UART_SetConfig+0x4e4>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	095b      	lsrs	r3, r3, #5
 8006380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006384:	441c      	add	r4, r3
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638a:	2200      	movs	r2, #0
 800638c:	673b      	str	r3, [r7, #112]	@ 0x70
 800638e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006394:	4642      	mov	r2, r8
 8006396:	464b      	mov	r3, r9
 8006398:	1891      	adds	r1, r2, r2
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	415b      	adcs	r3, r3
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063a4:	4641      	mov	r1, r8
 80063a6:	1851      	adds	r1, r2, r1
 80063a8:	6039      	str	r1, [r7, #0]
 80063aa:	4649      	mov	r1, r9
 80063ac:	414b      	adcs	r3, r1
 80063ae:	607b      	str	r3, [r7, #4]
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063bc:	4659      	mov	r1, fp
 80063be:	00cb      	lsls	r3, r1, #3
 80063c0:	4651      	mov	r1, sl
 80063c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c6:	4651      	mov	r1, sl
 80063c8:	00ca      	lsls	r2, r1, #3
 80063ca:	4610      	mov	r0, r2
 80063cc:	4619      	mov	r1, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	4642      	mov	r2, r8
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80063d6:	464b      	mov	r3, r9
 80063d8:	460a      	mov	r2, r1
 80063da:	eb42 0303 	adc.w	r3, r2, r3
 80063de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80063ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80063f8:	4649      	mov	r1, r9
 80063fa:	008b      	lsls	r3, r1, #2
 80063fc:	4641      	mov	r1, r8
 80063fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006402:	4641      	mov	r1, r8
 8006404:	008a      	lsls	r2, r1, #2
 8006406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800640a:	f7fa fa4f 	bl	80008ac <__aeabi_uldivmod>
 800640e:	4602      	mov	r2, r0
 8006410:	460b      	mov	r3, r1
 8006412:	4b0d      	ldr	r3, [pc, #52]	@ (8006448 <UART_SetConfig+0x4e4>)
 8006414:	fba3 1302 	umull	r1, r3, r3, r2
 8006418:	095b      	lsrs	r3, r3, #5
 800641a:	2164      	movs	r1, #100	@ 0x64
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	3332      	adds	r3, #50	@ 0x32
 8006426:	4a08      	ldr	r2, [pc, #32]	@ (8006448 <UART_SetConfig+0x4e4>)
 8006428:	fba2 2303 	umull	r2, r3, r2, r3
 800642c:	095b      	lsrs	r3, r3, #5
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4422      	add	r2, r4
 800643a:	609a      	str	r2, [r3, #8]
}
 800643c:	bf00      	nop
 800643e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006442:	46bd      	mov	sp, r7
 8006444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006448:	51eb851f 	.word	0x51eb851f

0800644c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800644c:	b084      	sub	sp, #16
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	f107 001c 	add.w	r0, r7, #28
 800645a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006462:	2b01      	cmp	r3, #1
 8006464:	d123      	bne.n	80064ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800647a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800648e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006492:	2b01      	cmp	r3, #1
 8006494:	d105      	bne.n	80064a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f001 fae8 	bl	8007a78 <USB_CoreReset>
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
 80064ac:	e01b      	b.n	80064e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 fadc 	bl	8007a78 <USB_CoreReset>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80064d8:	e005      	b.n	80064e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064e6:	7fbb      	ldrb	r3, [r7, #30]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d10b      	bne.n	8006504 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	f043 0206 	orr.w	r2, r3, #6
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f043 0220 	orr.w	r2, r3, #32
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006504:	7bfb      	ldrb	r3, [r7, #15]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006510:	b004      	add	sp, #16
 8006512:	4770      	bx	lr

08006514 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006522:	79fb      	ldrb	r3, [r7, #7]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d165      	bne.n	80065f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a41      	ldr	r2, [pc, #260]	@ (8006630 <USB_SetTurnaroundTime+0x11c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d906      	bls.n	800653e <USB_SetTurnaroundTime+0x2a>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a40      	ldr	r2, [pc, #256]	@ (8006634 <USB_SetTurnaroundTime+0x120>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d202      	bcs.n	800653e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006538:	230f      	movs	r3, #15
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e062      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4a3c      	ldr	r2, [pc, #240]	@ (8006634 <USB_SetTurnaroundTime+0x120>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d306      	bcc.n	8006554 <USB_SetTurnaroundTime+0x40>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a3b      	ldr	r2, [pc, #236]	@ (8006638 <USB_SetTurnaroundTime+0x124>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d202      	bcs.n	8006554 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800654e:	230e      	movs	r3, #14
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e057      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a38      	ldr	r2, [pc, #224]	@ (8006638 <USB_SetTurnaroundTime+0x124>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d306      	bcc.n	800656a <USB_SetTurnaroundTime+0x56>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a37      	ldr	r2, [pc, #220]	@ (800663c <USB_SetTurnaroundTime+0x128>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d202      	bcs.n	800656a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006564:	230d      	movs	r3, #13
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e04c      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4a33      	ldr	r2, [pc, #204]	@ (800663c <USB_SetTurnaroundTime+0x128>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d306      	bcc.n	8006580 <USB_SetTurnaroundTime+0x6c>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	4a32      	ldr	r2, [pc, #200]	@ (8006640 <USB_SetTurnaroundTime+0x12c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d802      	bhi.n	8006580 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800657a:	230c      	movs	r3, #12
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	e041      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4a2f      	ldr	r2, [pc, #188]	@ (8006640 <USB_SetTurnaroundTime+0x12c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d906      	bls.n	8006596 <USB_SetTurnaroundTime+0x82>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4a2e      	ldr	r2, [pc, #184]	@ (8006644 <USB_SetTurnaroundTime+0x130>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d802      	bhi.n	8006596 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006590:	230b      	movs	r3, #11
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e036      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4a2a      	ldr	r2, [pc, #168]	@ (8006644 <USB_SetTurnaroundTime+0x130>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d906      	bls.n	80065ac <USB_SetTurnaroundTime+0x98>
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4a29      	ldr	r2, [pc, #164]	@ (8006648 <USB_SetTurnaroundTime+0x134>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d802      	bhi.n	80065ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80065a6:	230a      	movs	r3, #10
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e02b      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4a26      	ldr	r2, [pc, #152]	@ (8006648 <USB_SetTurnaroundTime+0x134>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d906      	bls.n	80065c2 <USB_SetTurnaroundTime+0xae>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4a25      	ldr	r2, [pc, #148]	@ (800664c <USB_SetTurnaroundTime+0x138>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d202      	bcs.n	80065c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065bc:	2309      	movs	r3, #9
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e020      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	4a21      	ldr	r2, [pc, #132]	@ (800664c <USB_SetTurnaroundTime+0x138>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d306      	bcc.n	80065d8 <USB_SetTurnaroundTime+0xc4>
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	4a20      	ldr	r2, [pc, #128]	@ (8006650 <USB_SetTurnaroundTime+0x13c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d802      	bhi.n	80065d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065d2:	2308      	movs	r3, #8
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e015      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <USB_SetTurnaroundTime+0x13c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d906      	bls.n	80065ee <USB_SetTurnaroundTime+0xda>
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006654 <USB_SetTurnaroundTime+0x140>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d202      	bcs.n	80065ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065e8:	2307      	movs	r3, #7
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	e00a      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065ee:	2306      	movs	r3, #6
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	e007      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065fa:	2309      	movs	r3, #9
 80065fc:	617b      	str	r3, [r7, #20]
 80065fe:	e001      	b.n	8006604 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006600:	2309      	movs	r3, #9
 8006602:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	029b      	lsls	r3, r3, #10
 8006618:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	00d8acbf 	.word	0x00d8acbf
 8006634:	00e4e1c0 	.word	0x00e4e1c0
 8006638:	00f42400 	.word	0x00f42400
 800663c:	01067380 	.word	0x01067380
 8006640:	011a499f 	.word	0x011a499f
 8006644:	01312cff 	.word	0x01312cff
 8006648:	014ca43f 	.word	0x014ca43f
 800664c:	016e3600 	.word	0x016e3600
 8006650:	01a6ab1f 	.word	0x01a6ab1f
 8006654:	01e84800 	.word	0x01e84800

08006658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f043 0201 	orr.w	r2, r3, #1
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f023 0201 	bic.w	r2, r3, #1
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800668e:	2300      	movs	r3, #0
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d115      	bne.n	80066ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066ca:	200a      	movs	r0, #10
 80066cc:	f7fb ff32 	bl	8002534 <HAL_Delay>
      ms += 10U;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	330a      	adds	r3, #10
 80066d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f001 f93f 	bl	800795a <USB_GetMode>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d01e      	beq.n	8006720 <USB_SetCurrentMode+0x84>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80066e6:	d9f0      	bls.n	80066ca <USB_SetCurrentMode+0x2e>
 80066e8:	e01a      	b.n	8006720 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066ea:	78fb      	ldrb	r3, [r7, #3]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d115      	bne.n	800671c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066fc:	200a      	movs	r0, #10
 80066fe:	f7fb ff19 	bl	8002534 <HAL_Delay>
      ms += 10U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	330a      	adds	r3, #10
 8006706:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f001 f926 	bl	800795a <USB_GetMode>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <USB_SetCurrentMode+0x84>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2bc7      	cmp	r3, #199	@ 0xc7
 8006718:	d9f0      	bls.n	80066fc <USB_SetCurrentMode+0x60>
 800671a:	e001      	b.n	8006720 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e005      	b.n	800672c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2bc8      	cmp	r3, #200	@ 0xc8
 8006724:	d101      	bne.n	800672a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006734:	b084      	sub	sp, #16
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	e009      	b.n	8006768 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	3340      	adds	r3, #64	@ 0x40
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	2200      	movs	r2, #0
 8006760:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	3301      	adds	r3, #1
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b0e      	cmp	r3, #14
 800676c:	d9f2      	bls.n	8006754 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800676e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006772:	2b00      	cmp	r3, #0
 8006774:	d11c      	bne.n	80067b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006784:	f043 0302 	orr.w	r3, r3, #2
 8006788:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800678e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80067ae:	e00b      	b.n	80067c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067ce:	461a      	mov	r2, r3
 80067d0:	2300      	movs	r3, #0
 80067d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d10d      	bne.n	80067f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d104      	bne.n	80067ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067e4:	2100      	movs	r1, #0
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f968 	bl	8006abc <USB_SetDevSpeed>
 80067ec:	e008      	b.n	8006800 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067ee:	2101      	movs	r1, #1
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f963 	bl	8006abc <USB_SetDevSpeed>
 80067f6:	e003      	b.n	8006800 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067f8:	2103      	movs	r1, #3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f95e 	bl	8006abc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006800:	2110      	movs	r1, #16
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8fa 	bl	80069fc <USB_FlushTxFifo>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f924 	bl	8006a60 <USB_FlushRxFifo>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006828:	461a      	mov	r2, r3
 800682a:	2300      	movs	r3, #0
 800682c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006834:	461a      	mov	r2, r3
 8006836:	2300      	movs	r3, #0
 8006838:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006840:	461a      	mov	r2, r3
 8006842:	2300      	movs	r3, #0
 8006844:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006846:	2300      	movs	r3, #0
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e043      	b.n	80068d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	015a      	lsls	r2, r3, #5
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800685e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006862:	d118      	bne.n	8006896 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006876:	461a      	mov	r2, r3
 8006878:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e013      	b.n	80068a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800688c:	461a      	mov	r2, r3
 800688e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	e008      	b.n	80068a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a2:	461a      	mov	r2, r3
 80068a4:	2300      	movs	r3, #0
 80068a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b4:	461a      	mov	r2, r3
 80068b6:	2300      	movs	r3, #0
 80068b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c6:	461a      	mov	r2, r3
 80068c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3301      	adds	r3, #1
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068d8:	461a      	mov	r2, r3
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4293      	cmp	r3, r2
 80068de:	d3b5      	bcc.n	800684c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e0:	2300      	movs	r3, #0
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	e043      	b.n	800696e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068fc:	d118      	bne.n	8006930 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006910:	461a      	mov	r2, r3
 8006912:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	e013      	b.n	8006942 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4413      	add	r3, r2
 8006922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006926:	461a      	mov	r2, r3
 8006928:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e008      	b.n	8006942 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693c:	461a      	mov	r2, r3
 800693e:	2300      	movs	r3, #0
 8006940:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800694e:	461a      	mov	r2, r3
 8006950:	2300      	movs	r3, #0
 8006952:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006960:	461a      	mov	r2, r3
 8006962:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006966:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	3301      	adds	r3, #1
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006972:	461a      	mov	r2, r3
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	4293      	cmp	r3, r2
 8006978:	d3b5      	bcc.n	80068e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	68fa      	ldr	r2, [r7, #12]
 8006984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800698c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800699a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800699c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d105      	bne.n	80069b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f043 0210 	orr.w	r2, r3, #16
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699a      	ldr	r2, [r3, #24]
 80069b4:	4b10      	ldr	r3, [pc, #64]	@ (80069f8 <USB_DevInit+0x2c4>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f043 0208 	orr.w	r2, r3, #8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069e0:	f043 0304 	orr.w	r3, r3, #4
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr
 80069f8:	803c3800 	.word	0x803c3800

080069fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a16:	d901      	bls.n	8006a1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e01b      	b.n	8006a54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	daf2      	bge.n	8006a0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	019b      	lsls	r3, r3, #6
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a40:	d901      	bls.n	8006a46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e006      	b.n	8006a54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d0f0      	beq.n	8006a34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a78:	d901      	bls.n	8006a7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e018      	b.n	8006ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	daf2      	bge.n	8006a6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2210      	movs	r2, #16
 8006a8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a9c:	d901      	bls.n	8006aa2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e006      	b.n	8006ab0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d0f0      	beq.n	8006a90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	78fb      	ldrb	r3, [r7, #3]
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006adc:	4313      	orrs	r3, r2
 8006ade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b087      	sub	sp, #28
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0306 	and.w	r3, r3, #6
 8006b06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	75fb      	strb	r3, [r7, #23]
 8006b12:	e00a      	b.n	8006b2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d002      	beq.n	8006b20 <USB_GetDevSpeed+0x32>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b06      	cmp	r3, #6
 8006b1e:	d102      	bne.n	8006b26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b20:	2302      	movs	r3, #2
 8006b22:	75fb      	strb	r3, [r7, #23]
 8006b24:	e001      	b.n	8006b2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b26:	230f      	movs	r3, #15
 8006b28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d13a      	bne.n	8006bca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	2101      	movs	r1, #1
 8006b66:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	68f9      	ldr	r1, [r7, #12]
 8006b6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b72:	4313      	orrs	r3, r2
 8006b74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d155      	bne.n	8006c38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	791b      	ldrb	r3, [r3, #4]
 8006ba6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	059b      	lsls	r3, r3, #22
 8006bae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	0151      	lsls	r1, r2, #5
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	440a      	add	r2, r1
 8006bba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bc6:	6013      	str	r3, [r2, #0]
 8006bc8:	e036      	b.n	8006c38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bd0:	69da      	ldr	r2, [r3, #28]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	2101      	movs	r1, #1
 8006bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006be8:	4313      	orrs	r3, r2
 8006bea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d11a      	bne.n	8006c38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	791b      	ldrb	r3, [r3, #4]
 8006c1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	4313      	orrs	r3, r2
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	785b      	ldrb	r3, [r3, #1]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d161      	bne.n	8006d28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c7a:	d11f      	bne.n	8006cbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	0151      	lsls	r1, r2, #5
 8006c8e:	68fa      	ldr	r2, [r7, #12]
 8006c90:	440a      	add	r2, r1
 8006c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	0151      	lsls	r1, r2, #5
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	440a      	add	r2, r1
 8006cb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	2101      	movs	r1, #1
 8006cce:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	43db      	mvns	r3, r3
 8006cd6:	68f9      	ldr	r1, [r7, #12]
 8006cd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cdc:	4013      	ands	r3, r2
 8006cde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	43db      	mvns	r3, r3
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d00:	4013      	ands	r3, r2
 8006d02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	0159      	lsls	r1, r3, #5
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	440b      	add	r3, r1
 8006d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4b35      	ldr	r3, [pc, #212]	@ (8006df8 <USB_DeactivateEndpoint+0x1b0>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	600b      	str	r3, [r1, #0]
 8006d26:	e060      	b.n	8006dea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d3e:	d11f      	bne.n	8006d80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	0151      	lsls	r1, r2, #5
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	440a      	add	r2, r1
 8006d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	2101      	movs	r1, #1
 8006d92:	fa01 f303 	lsl.w	r3, r1, r3
 8006d96:	041b      	lsls	r3, r3, #16
 8006d98:	43db      	mvns	r3, r3
 8006d9a:	68f9      	ldr	r1, [r7, #12]
 8006d9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006da0:	4013      	ands	r3, r2
 8006da2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	2101      	movs	r1, #1
 8006db6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dba:	041b      	lsls	r3, r3, #16
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	68f9      	ldr	r1, [r7, #12]
 8006dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	0159      	lsls	r1, r3, #5
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	440b      	add	r3, r1
 8006dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006de2:	4619      	mov	r1, r3
 8006de4:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <USB_DeactivateEndpoint+0x1b4>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	ec337800 	.word	0xec337800
 8006dfc:	eff37800 	.word	0xeff37800

08006e00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08a      	sub	sp, #40	@ 0x28
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	f040 817f 	bne.w	8007120 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d132      	bne.n	8006e90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	0151      	lsls	r1, r2, #5
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	440a      	add	r2, r1
 8006e40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	69ba      	ldr	r2, [r7, #24]
 8006e5e:	0151      	lsls	r1, r2, #5
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	440a      	add	r2, r1
 8006e64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e88:	0cdb      	lsrs	r3, r3, #19
 8006e8a:	04db      	lsls	r3, r3, #19
 8006e8c:	6113      	str	r3, [r2, #16]
 8006e8e:	e097      	b.n	8006fc0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	69fa      	ldr	r2, [r7, #28]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eaa:	0cdb      	lsrs	r3, r3, #19
 8006eac:	04db      	lsls	r3, r3, #19
 8006eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	0151      	lsls	r1, r2, #5
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	440a      	add	r2, r1
 8006ec6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ece:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ed2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d11a      	bne.n	8006f10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	691a      	ldr	r2, [r3, #16]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d903      	bls.n	8006eee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f0c:	6113      	str	r3, [r2, #16]
 8006f0e:	e044      	b.n	8006f9a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	4413      	add	r3, r2
 8006f1a:	1e5a      	subs	r2, r3, #1
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f24:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	8afb      	ldrh	r3, [r7, #22]
 8006f36:	04d9      	lsls	r1, r3, #19
 8006f38:	4ba4      	ldr	r3, [pc, #656]	@ (80071cc <USB_EPStartXfer+0x3cc>)
 8006f3a:	400b      	ands	r3, r1
 8006f3c:	69b9      	ldr	r1, [r7, #24]
 8006f3e:	0148      	lsls	r0, r1, #5
 8006f40:	69f9      	ldr	r1, [r7, #28]
 8006f42:	4401      	add	r1, r0
 8006f44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	791b      	ldrb	r3, [r3, #4]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d122      	bne.n	8006f9a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	0151      	lsls	r1, r2, #5
 8006f66:	69fa      	ldr	r2, [r7, #28]
 8006f68:	440a      	add	r2, r1
 8006f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f6e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f72:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	8afb      	ldrh	r3, [r7, #22]
 8006f84:	075b      	lsls	r3, r3, #29
 8006f86:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f8a:	69b9      	ldr	r1, [r7, #24]
 8006f8c:	0148      	lsls	r0, r1, #5
 8006f8e:	69f9      	ldr	r1, [r7, #28]
 8006f90:	4401      	add	r1, r0
 8006f92:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f96:	4313      	orrs	r3, r2
 8006f98:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb0:	69b9      	ldr	r1, [r7, #24]
 8006fb2:	0148      	lsls	r0, r1, #5
 8006fb4:	69f9      	ldr	r1, [r7, #28]
 8006fb6:	4401      	add	r1, r0
 8006fb8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fc0:	79fb      	ldrb	r3, [r7, #7]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d14b      	bne.n	800705e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fda:	461a      	mov	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	791b      	ldrb	r3, [r3, #4]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d128      	bne.n	800703c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d110      	bne.n	800701c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007014:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e00f      	b.n	800703c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800703a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007056:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	e166      	b.n	800732c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	0151      	lsls	r1, r2, #5
 8007070:	69fa      	ldr	r2, [r7, #28]
 8007072:	440a      	add	r2, r1
 8007074:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007078:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800707c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	791b      	ldrb	r3, [r3, #4]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d015      	beq.n	80070b2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 814e 	beq.w	800732c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	2101      	movs	r1, #1
 80070a2:	fa01 f303 	lsl.w	r3, r1, r3
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070ac:	4313      	orrs	r3, r2
 80070ae:	634b      	str	r3, [r1, #52]	@ 0x34
 80070b0:	e13c      	b.n	800732c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d110      	bne.n	80070e4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	e00f      	b.n	8007104 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	0151      	lsls	r1, r2, #5
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	440a      	add	r2, r1
 80070fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007102:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	68d9      	ldr	r1, [r3, #12]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	781a      	ldrb	r2, [r3, #0]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	b298      	uxth	r0, r3
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	4603      	mov	r3, r0
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f9b9 	bl	8007490 <USB_WritePacket>
 800711e:	e105      	b.n	800732c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	69ba      	ldr	r2, [r7, #24]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	69fa      	ldr	r2, [r7, #28]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800713a:	0cdb      	lsrs	r3, r3, #19
 800713c:	04db      	lsls	r3, r3, #19
 800713e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800715a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800715e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007162:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d132      	bne.n	80071d0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800718e:	691a      	ldr	r2, [r3, #16]
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007198:	69b9      	ldr	r1, [r7, #24]
 800719a:	0148      	lsls	r0, r1, #5
 800719c:	69f9      	ldr	r1, [r7, #28]
 800719e:	4401      	add	r1, r0
 80071a0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071a4:	4313      	orrs	r3, r2
 80071a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071c6:	6113      	str	r3, [r2, #16]
 80071c8:	e062      	b.n	8007290 <USB_EPStartXfer+0x490>
 80071ca:	bf00      	nop
 80071cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d123      	bne.n	8007220 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e4:	691a      	ldr	r2, [r3, #16]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ee:	69b9      	ldr	r1, [r7, #24]
 80071f0:	0148      	lsls	r0, r1, #5
 80071f2:	69f9      	ldr	r1, [r7, #28]
 80071f4:	4401      	add	r1, r0
 80071f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071fa:	4313      	orrs	r3, r2
 80071fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	0151      	lsls	r1, r2, #5
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	440a      	add	r2, r1
 8007214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007218:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800721c:	6113      	str	r3, [r2, #16]
 800721e:	e037      	b.n	8007290 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	691a      	ldr	r2, [r3, #16]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	4413      	add	r3, r2
 800722a:	1e5a      	subs	r2, r3, #1
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	8afa      	ldrh	r2, [r7, #22]
 800723c:	fb03 f202 	mul.w	r2, r3, r2
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007250:	691a      	ldr	r2, [r3, #16]
 8007252:	8afb      	ldrh	r3, [r7, #22]
 8007254:	04d9      	lsls	r1, r3, #19
 8007256:	4b38      	ldr	r3, [pc, #224]	@ (8007338 <USB_EPStartXfer+0x538>)
 8007258:	400b      	ands	r3, r1
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	0148      	lsls	r0, r1, #5
 800725e:	69f9      	ldr	r1, [r7, #28]
 8007260:	4401      	add	r1, r0
 8007262:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007266:	4313      	orrs	r3, r2
 8007268:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007276:	691a      	ldr	r2, [r3, #16]
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007280:	69b9      	ldr	r1, [r7, #24]
 8007282:	0148      	lsls	r0, r1, #5
 8007284:	69f9      	ldr	r1, [r7, #28]
 8007286:	4401      	add	r1, r0
 8007288:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800728c:	4313      	orrs	r3, r2
 800728e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d10d      	bne.n	80072b2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	68d9      	ldr	r1, [r3, #12]
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ae:	460a      	mov	r2, r1
 80072b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	791b      	ldrb	r3, [r3, #4]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d128      	bne.n	800730c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d110      	bne.n	80072ec <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69ba      	ldr	r2, [r7, #24]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	69fa      	ldr	r2, [r7, #28]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072e8:	6013      	str	r3, [r2, #0]
 80072ea:	e00f      	b.n	800730c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	015a      	lsls	r2, r3, #5
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	4413      	add	r3, r2
 80072f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	0151      	lsls	r1, r2, #5
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	440a      	add	r2, r1
 8007302:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800730a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007326:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800732a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3720      	adds	r7, #32
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	1ff80000 	.word	0x1ff80000

0800733c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d14a      	bne.n	80073f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800736e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007372:	f040 8086 	bne.w	8007482 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	0151      	lsls	r1, r2, #5
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	440a      	add	r2, r1
 8007390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007394:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007398:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	7812      	ldrb	r2, [r2, #0]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	3301      	adds	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d902      	bls.n	80073d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	75fb      	strb	r3, [r7, #23]
          break;
 80073d2:	e056      	b.n	8007482 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073ec:	d0e7      	beq.n	80073be <USB_EPStopXfer+0x82>
 80073ee:	e048      	b.n	8007482 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007408:	d13b      	bne.n	8007482 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007428:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800742c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	7812      	ldrb	r2, [r2, #0]
 8007442:	0151      	lsls	r1, r2, #5
 8007444:	693a      	ldr	r2, [r7, #16]
 8007446:	440a      	add	r2, r1
 8007448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800744c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007450:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	3301      	adds	r3, #1
 8007456:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800745e:	4293      	cmp	r3, r2
 8007460:	d902      	bls.n	8007468 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	75fb      	strb	r3, [r7, #23]
          break;
 8007466:	e00c      	b.n	8007482 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800747c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007480:	d0e7      	beq.n	8007452 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007482:	7dfb      	ldrb	r3, [r7, #23]
}
 8007484:	4618      	mov	r0, r3
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007490:	b480      	push	{r7}
 8007492:	b089      	sub	sp, #36	@ 0x24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4611      	mov	r1, r2
 800749c:	461a      	mov	r2, r3
 800749e:	460b      	mov	r3, r1
 80074a0:	71fb      	strb	r3, [r7, #7]
 80074a2:	4613      	mov	r3, r2
 80074a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d123      	bne.n	80074fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074b6:	88bb      	ldrh	r3, [r7, #4]
 80074b8:	3303      	adds	r3, #3
 80074ba:	089b      	lsrs	r3, r3, #2
 80074bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074be:	2300      	movs	r3, #0
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e018      	b.n	80074f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074c4:	79fb      	ldrb	r3, [r7, #7]
 80074c6:	031a      	lsls	r2, r3, #12
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074d0:	461a      	mov	r2, r3
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	3301      	adds	r3, #1
 80074e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	3301      	adds	r3, #1
 80074e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	3301      	adds	r3, #1
 80074ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	3301      	adds	r3, #1
 80074f4:	61bb      	str	r3, [r7, #24]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d3e2      	bcc.n	80074c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3724      	adds	r7, #36	@ 0x24
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800750c:	b480      	push	{r7}
 800750e:	b08b      	sub	sp, #44	@ 0x2c
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	4613      	mov	r3, r2
 8007518:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	089b      	lsrs	r3, r3, #2
 8007526:	b29b      	uxth	r3, r3
 8007528:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007532:	2300      	movs	r3, #0
 8007534:	623b      	str	r3, [r7, #32]
 8007536:	e014      	b.n	8007562 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007542:	601a      	str	r2, [r3, #0]
    pDest++;
 8007544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007546:	3301      	adds	r3, #1
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	3301      	adds	r3, #1
 800754e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	3301      	adds	r3, #1
 8007554:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	3301      	adds	r3, #1
 800755a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	3301      	adds	r3, #1
 8007560:	623b      	str	r3, [r7, #32]
 8007562:	6a3a      	ldr	r2, [r7, #32]
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	429a      	cmp	r2, r3
 8007568:	d3e6      	bcc.n	8007538 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800756a:	8bfb      	ldrh	r3, [r7, #30]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d01e      	beq.n	80075ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757a:	461a      	mov	r2, r3
 800757c:	f107 0310 	add.w	r3, r7, #16
 8007580:	6812      	ldr	r2, [r2, #0]
 8007582:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	b2da      	uxtb	r2, r3
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	701a      	strb	r2, [r3, #0]
      i++;
 8007596:	6a3b      	ldr	r3, [r7, #32]
 8007598:	3301      	adds	r3, #1
 800759a:	623b      	str	r3, [r7, #32]
      pDest++;
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	3301      	adds	r3, #1
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80075a2:	8bfb      	ldrh	r3, [r7, #30]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075a8:	8bfb      	ldrh	r3, [r7, #30]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1ea      	bne.n	8007584 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	372c      	adds	r7, #44	@ 0x2c
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	785b      	ldrb	r3, [r3, #1]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d12c      	bne.n	8007632 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	db12      	blt.n	8007610 <USB_EPSetStall+0x54>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00f      	beq.n	8007610 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	0151      	lsls	r1, r2, #5
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	440a      	add	r2, r1
 8007606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800760a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800760e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	440a      	add	r2, r1
 8007626:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800762a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	e02b      	b.n	800768a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	db12      	blt.n	800766a <USB_EPSetStall+0xae>
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00f      	beq.n	800766a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007664:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007668:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	0151      	lsls	r1, r2, #5
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	440a      	add	r2, r1
 8007680:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007684:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007688:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d128      	bne.n	8007706 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	0151      	lsls	r1, r2, #5
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	440a      	add	r2, r1
 80076ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076d2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	791b      	ldrb	r3, [r3, #4]
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d003      	beq.n	80076e4 <USB_EPClearStall+0x4c>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	791b      	ldrb	r3, [r3, #4]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d138      	bne.n	8007756 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	0151      	lsls	r1, r2, #5
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	440a      	add	r2, r1
 80076fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	e027      	b.n	8007756 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	4413      	add	r3, r2
 800770e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	0151      	lsls	r1, r2, #5
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	440a      	add	r2, r1
 800771c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007720:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007724:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	791b      	ldrb	r3, [r3, #4]
 800772a:	2b03      	cmp	r3, #3
 800772c:	d003      	beq.n	8007736 <USB_EPClearStall+0x9e>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	791b      	ldrb	r3, [r3, #4]
 8007732:	2b02      	cmp	r3, #2
 8007734:	d10f      	bne.n	8007756 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4413      	add	r3, r2
 800773e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	440a      	add	r2, r1
 800774c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007754:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007782:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007786:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007798:	68f9      	ldr	r1, [r7, #12]
 800779a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800779e:	4313      	orrs	r3, r2
 80077a0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077de:	f023 0302 	bic.w	r3, r3, #2
 80077e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800780c:	f023 0303 	bic.w	r3, r3, #3
 8007810:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007820:	f043 0302 	orr.w	r3, r3, #2
 8007824:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	4013      	ands	r3, r2
 800784a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800784c:	68fb      	ldr	r3, [r7, #12]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800785a:	b480      	push	{r7}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	68ba      	ldr	r2, [r7, #8]
 800787a:	4013      	ands	r3, r2
 800787c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	0c1b      	lsrs	r3, r3, #16
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a0:	699b      	ldr	r3, [r3, #24]
 80078a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	4013      	ands	r3, r2
 80078b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	b29b      	uxth	r3, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
 80078ca:	460b      	mov	r3, r1
 80078cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078d2:	78fb      	ldrb	r3, [r7, #3]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	4013      	ands	r3, r2
 80078ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078f0:	68bb      	ldr	r3, [r7, #8]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078fe:	b480      	push	{r7}
 8007900:	b087      	sub	sp, #28
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	460b      	mov	r3, r1
 8007908:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007920:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	fa22 f303 	lsr.w	r3, r2, r3
 800792e:	01db      	lsls	r3, r3, #7
 8007930:	b2db      	uxtb	r3, r3
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	4313      	orrs	r3, r2
 8007936:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	4013      	ands	r3, r2
 800794a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800794c:	68bb      	ldr	r3, [r7, #8]
}
 800794e:	4618      	mov	r0, r3
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr

0800795a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	f003 0301 	and.w	r3, r3, #1
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007976:	b480      	push	{r7}
 8007978:	b085      	sub	sp, #20
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007990:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007994:	f023 0307 	bic.w	r3, r3, #7
 8007998:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	460b      	mov	r3, r1
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	333c      	adds	r3, #60	@ 0x3c
 80079d2:	3304      	adds	r3, #4
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4a26      	ldr	r2, [pc, #152]	@ (8007a74 <USB_EP0_OutStart+0xb8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d90a      	bls.n	80079f6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079f0:	d101      	bne.n	80079f6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079f2:	2300      	movs	r3, #0
 80079f4:	e037      	b.n	8007a66 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fc:	461a      	mov	r2, r3
 80079fe:	2300      	movs	r3, #0
 8007a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a24:	f043 0318 	orr.w	r3, r3, #24
 8007a28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a38:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a3c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10f      	bne.n	8007a64 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	4f54300a 	.word	0x4f54300a

08007a78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a90:	d901      	bls.n	8007a96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a92:	2303      	movs	r3, #3
 8007a94:	e022      	b.n	8007adc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	daf2      	bge.n	8007a84 <USB_CoreReset+0xc>

  count = 10U;
 8007a9e:	230a      	movs	r3, #10
 8007aa0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007aa2:	e002      	b.n	8007aaa <USB_CoreReset+0x32>
  {
    count--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1f9      	bne.n	8007aa4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	f043 0201 	orr.w	r2, r3, #1
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ac8:	d901      	bls.n	8007ace <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e006      	b.n	8007adc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d0f0      	beq.n	8007abc <USB_CoreReset+0x44>

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7f9 faaf 	bl	8001058 <SD_disk_initialize>
 8007afa:	4603      	mov	r3, r0
 8007afc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7f9 fb8a 	bl	800122c <SD_disk_status>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60b9      	str	r1, [r7, #8]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	603b      	str	r3, [r7, #0]
 8007b30:	4603      	mov	r3, r0
 8007b32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007b34:	7bf8      	ldrb	r0, [r7, #15]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	68b9      	ldr	r1, [r7, #8]
 8007b3c:	f7f9 fb8c 	bl	8001258 <SD_disk_read>
 8007b40:	4603      	mov	r3, r0
 8007b42:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
 8007b56:	603b      	str	r3, [r7, #0]
 8007b58:	4603      	mov	r3, r0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007b5c:	7bf8      	ldrb	r0, [r7, #15]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	68b9      	ldr	r1, [r7, #8]
 8007b64:	f7f9 fbe8 	bl	8001338 <SD_disk_write>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	603a      	str	r2, [r7, #0]
 8007b7e:	71fb      	strb	r3, [r7, #7]
 8007b80:	460b      	mov	r3, r1
 8007b82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   return SD_disk_ioctl(pdrv,cmd, buff);
 8007b84:	79fb      	ldrb	r3, [r7, #7]
 8007b86:	79b9      	ldrb	r1, [r7, #6]
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7f9 fc58 	bl	8001440 <SD_disk_ioctl>
 8007b90:	4603      	mov	r3, r0
 8007b92:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8007ba8:	f44f 7021 	mov.w	r0, #644	@ 0x284
 8007bac:	f007 ff40 	bl	800fa30 <USBD_static_malloc>
 8007bb0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	32b0      	adds	r2, #176	@ 0xb0
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007bc8:	2302      	movs	r3, #2
 8007bca:	e06e      	b.n	8007caa <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	32b0      	adds	r2, #176	@ 0xb0
 8007bd6:	68f9      	ldr	r1, [r7, #12]
 8007bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	32b0      	adds	r2, #176	@ 0xb0
 8007be6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7c1b      	ldrb	r3, [r3, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d12b      	bne.n	8007c50 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8007cb4 <USBD_MSC_Init+0x118>)
 8007bfa:	7819      	ldrb	r1, [r3, #0]
 8007bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c00:	2202      	movs	r2, #2
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f007 fdd1 	bl	800f7aa <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007c08:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb4 <USBD_MSC_Init+0x118>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 020f 	and.w	r2, r3, #15
 8007c10:	6879      	ldr	r1, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007c20:	2201      	movs	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007c24:	4b24      	ldr	r3, [pc, #144]	@ (8007cb8 <USBD_MSC_Init+0x11c>)
 8007c26:	7819      	ldrb	r1, [r3, #0]
 8007c28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f007 fdbb 	bl	800f7aa <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007c34:	4b20      	ldr	r3, [pc, #128]	@ (8007cb8 <USBD_MSC_Init+0x11c>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f003 020f 	and.w	r2, r3, #15
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3323      	adds	r3, #35	@ 0x23
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	e028      	b.n	8007ca2 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007c50:	4b18      	ldr	r3, [pc, #96]	@ (8007cb4 <USBD_MSC_Init+0x118>)
 8007c52:	7819      	ldrb	r1, [r3, #0]
 8007c54:	2340      	movs	r3, #64	@ 0x40
 8007c56:	2202      	movs	r2, #2
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f007 fda6 	bl	800f7aa <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007c5e:	4b15      	ldr	r3, [pc, #84]	@ (8007cb4 <USBD_MSC_Init+0x118>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f003 020f 	and.w	r2, r3, #15
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	440b      	add	r3, r1
 8007c72:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007c76:	2201      	movs	r2, #1
 8007c78:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <USBD_MSC_Init+0x11c>)
 8007c7c:	7819      	ldrb	r1, [r3, #0]
 8007c7e:	2340      	movs	r3, #64	@ 0x40
 8007c80:	2202      	movs	r2, #2
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f007 fd91 	bl	800f7aa <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007c88:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb8 <USBD_MSC_Init+0x11c>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f003 020f 	and.w	r2, r3, #15
 8007c90:	6879      	ldr	r1, [r7, #4]
 8007c92:	4613      	mov	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4413      	add	r3, r2
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	3323      	adds	r3, #35	@ 0x23
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	701a      	strb	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa30 	bl	8008108 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20000087 	.word	0x20000087
 8007cb8:	20000086 	.word	0x20000086

08007cbc <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8007cc8:	4b26      	ldr	r3, [pc, #152]	@ (8007d64 <USBD_MSC_DeInit+0xa8>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f007 fd91 	bl	800f7f6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8007cd4:	4b23      	ldr	r3, [pc, #140]	@ (8007d64 <USBD_MSC_DeInit+0xa8>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	f003 020f 	and.w	r2, r3, #15
 8007cdc:	6879      	ldr	r1, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007cec:	2200      	movs	r2, #0
 8007cee:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8007cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d68 <USBD_MSC_DeInit+0xac>)
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f007 fd7d 	bl	800f7f6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d68 <USBD_MSC_DeInit+0xac>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f003 020f 	and.w	r2, r3, #15
 8007d04:	6879      	ldr	r1, [r7, #4]
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	3323      	adds	r3, #35	@ 0x23
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32b0      	adds	r2, #176	@ 0xb0
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d018      	beq.n	8007d5a <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa6b 	bl	8008204 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	32b0      	adds	r2, #176	@ 0xb0
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f007 fe85 	bl	800fa4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	32b0      	adds	r2, #176	@ 0xb0
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3708      	adds	r7, #8
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000087 	.word	0x20000087
 8007d68:	20000086 	.word	0x20000086

08007d6c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	32b0      	adds	r2, #176	@ 0xb0
 8007d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d84:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]
  uint32_t max_lun;
  uint16_t status_info = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	817b      	strh	r3, [r7, #10]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007d94:	2303      	movs	r3, #3
 8007d96:	e0e5      	b.n	8007f64 <USBD_MSC_Setup+0x1f8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d058      	beq.n	8007e56 <USBD_MSC_Setup+0xea>
 8007da4:	2b20      	cmp	r3, #32
 8007da6:	f040 80d5 	bne.w	8007f54 <USBD_MSC_Setup+0x1e8>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	785b      	ldrb	r3, [r3, #1]
 8007dae:	2bfe      	cmp	r3, #254	@ 0xfe
 8007db0:	d002      	beq.n	8007db8 <USBD_MSC_Setup+0x4c>
 8007db2:	2bff      	cmp	r3, #255	@ 0xff
 8007db4:	d02f      	beq.n	8007e16 <USBD_MSC_Setup+0xaa>
 8007db6:	e046      	b.n	8007e46 <USBD_MSC_Setup+0xda>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	885b      	ldrh	r3, [r3, #2]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d123      	bne.n	8007e08 <USBD_MSC_Setup+0x9c>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	88db      	ldrh	r3, [r3, #6]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d11f      	bne.n	8007e08 <USBD_MSC_Setup+0x9c>
              ((req->bmRequest & 0x80U) == 0x80U))
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	da1a      	bge.n	8007e08 <USBD_MSC_Setup+0x9c>
          {
            max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	33b0      	adds	r3, #176	@ 0xb0
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	4798      	blx	r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	60fb      	str	r3, [r7, #12]
            hmsc->max_lun = (max_lun > MSC_BOT_MAX_LUN) ? MSC_BOT_MAX_LUN : max_lun;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	bf28      	it	cs
 8007df0:	2302      	movcs	r3, #2
 8007df2:	461a      	mov	r2, r3
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f003 fa0a 	bl	800b218 <USBD_CtlSendData>
 8007e04:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e06:	e025      	b.n	8007e54 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f003 f987 	bl	800b11e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e10:	2303      	movs	r3, #3
 8007e12:	75fb      	strb	r3, [r7, #23]
          break;
 8007e14:	e01e      	b.n	8007e54 <USBD_MSC_Setup+0xe8>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10c      	bne.n	8007e38 <USBD_MSC_Setup+0xcc>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d108      	bne.n	8007e38 <USBD_MSC_Setup+0xcc>
              ((req->bmRequest & 0x80U) != 0x80U))
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	db03      	blt.n	8007e38 <USBD_MSC_Setup+0xcc>
          {
            MSC_BOT_Reset(pdev);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f9b3 	bl	800819c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e36:	e00d      	b.n	8007e54 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f003 f96f 	bl	800b11e <USBD_CtlError>
            ret = USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	75fb      	strb	r3, [r7, #23]
          break;
 8007e44:	e006      	b.n	8007e54 <USBD_MSC_Setup+0xe8>

        default:
          USBD_CtlError(pdev, req);
 8007e46:	6839      	ldr	r1, [r7, #0]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f003 f968 	bl	800b11e <USBD_CtlError>
          ret = USBD_FAIL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	75fb      	strb	r3, [r7, #23]
          break;
 8007e52:	bf00      	nop
      }
      break;
 8007e54:	e085      	b.n	8007f62 <USBD_MSC_Setup+0x1f6>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	785b      	ldrb	r3, [r3, #1]
 8007e5a:	2b0b      	cmp	r3, #11
 8007e5c:	d871      	bhi.n	8007f42 <USBD_MSC_Setup+0x1d6>
 8007e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <USBD_MSC_Setup+0xf8>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007e95 	.word	0x08007e95
 8007e68:	08007f11 	.word	0x08007f11
 8007e6c:	08007f43 	.word	0x08007f43
 8007e70:	08007f43 	.word	0x08007f43
 8007e74:	08007f43 	.word	0x08007f43
 8007e78:	08007f43 	.word	0x08007f43
 8007e7c:	08007f43 	.word	0x08007f43
 8007e80:	08007f43 	.word	0x08007f43
 8007e84:	08007f43 	.word	0x08007f43
 8007e88:	08007f43 	.word	0x08007f43
 8007e8c:	08007ebf 	.word	0x08007ebf
 8007e90:	08007ee9 	.word	0x08007ee9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d107      	bne.n	8007eb0 <USBD_MSC_Setup+0x144>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ea0:	f107 030a 	add.w	r3, r7, #10
 8007ea4:	2202      	movs	r2, #2
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f003 f9b5 	bl	800b218 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eae:	e050      	b.n	8007f52 <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f003 f933 	bl	800b11e <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	75fb      	strb	r3, [r7, #23]
          break;
 8007ebc:	e049      	b.n	8007f52 <USBD_MSC_Setup+0x1e6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d107      	bne.n	8007eda <USBD_MSC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	2201      	movs	r2, #1
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f003 f9a0 	bl	800b218 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ed8:	e03b      	b.n	8007f52 <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f003 f91e 	bl	800b11e <USBD_CtlError>
            ret = USBD_FAIL;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	75fb      	strb	r3, [r7, #23]
          break;
 8007ee6:	e034      	b.n	8007f52 <USBD_MSC_Setup+0x1e6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b03      	cmp	r3, #3
 8007ef2:	d106      	bne.n	8007f02 <USBD_MSC_Setup+0x196>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	885b      	ldrh	r3, [r3, #2]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f00:	e027      	b.n	8007f52 <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f003 f90a 	bl	800b11e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f0e:	e020      	b.n	8007f52 <USBD_MSC_Setup+0x1e6>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	d119      	bne.n	8007f50 <USBD_MSC_Setup+0x1e4>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	885b      	ldrh	r3, [r3, #2]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d115      	bne.n	8007f50 <USBD_MSC_Setup+0x1e4>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	889b      	ldrh	r3, [r3, #4]
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f007 fc81 	bl	800f834 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	889b      	ldrh	r3, [r3, #4]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fb30 	bl	80085a0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8007f40:	e006      	b.n	8007f50 <USBD_MSC_Setup+0x1e4>

        default:
          USBD_CtlError(pdev, req);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f003 f8ea 	bl	800b11e <USBD_CtlError>
          ret = USBD_FAIL;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f4e:	e000      	b.n	8007f52 <USBD_MSC_Setup+0x1e6>
          break;
 8007f50:	bf00      	nop
      }
      break;
 8007f52:	e006      	b.n	8007f62 <USBD_MSC_Setup+0x1f6>

    default:
      USBD_CtlError(pdev, req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f003 f8e1 	bl	800b11e <USBD_CtlError>
      ret = USBD_FAIL;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f60:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007f78:	78fb      	ldrb	r3, [r7, #3]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f959 	bl	8008234 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f983 	bl	80082a8 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8007fb4:	2181      	movs	r1, #129	@ 0x81
 8007fb6:	4812      	ldr	r0, [pc, #72]	@ (8008000 <USBD_MSC_GetHSCfgDesc+0x54>)
 8007fb8:	f002 fa79 	bl	800a4ae <USBD_GetEpDesc>
 8007fbc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	480f      	ldr	r0, [pc, #60]	@ (8008000 <USBD_MSC_GetHSCfgDesc+0x54>)
 8007fc2:	f002 fa74 	bl	800a4ae <USBD_GetEpDesc>
 8007fc6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d006      	beq.n	8007fdc <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	711a      	strb	r2, [r3, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f042 0202 	orr.w	r2, r2, #2
 8007fda:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d006      	beq.n	8007ff0 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	711a      	strb	r2, [r3, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f042 0202 	orr.w	r2, r2, #2
 8007fee:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007ff6:	4b02      	ldr	r3, [pc, #8]	@ (8008000 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	2000005c 	.word	0x2000005c

08008004 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800800c:	2181      	movs	r1, #129	@ 0x81
 800800e:	4812      	ldr	r0, [pc, #72]	@ (8008058 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008010:	f002 fa4d 	bl	800a4ae <USBD_GetEpDesc>
 8008014:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008016:	2101      	movs	r1, #1
 8008018:	480f      	ldr	r0, [pc, #60]	@ (8008058 <USBD_MSC_GetFSCfgDesc+0x54>)
 800801a:	f002 fa48 	bl	800a4ae <USBD_GetEpDesc>
 800801e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800802e:	711a      	strb	r2, [r3, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d006      	beq.n	8008048 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008042:	711a      	strb	r2, [r3, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800804e:	4b02      	ldr	r3, [pc, #8]	@ (8008058 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	2000005c 	.word	0x2000005c

0800805c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008064:	2181      	movs	r1, #129	@ 0x81
 8008066:	4812      	ldr	r0, [pc, #72]	@ (80080b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008068:	f002 fa21 	bl	800a4ae <USBD_GetEpDesc>
 800806c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800806e:	2101      	movs	r1, #1
 8008070:	480f      	ldr	r0, [pc, #60]	@ (80080b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8008072:	f002 fa1c 	bl	800a4ae <USBD_GetEpDesc>
 8008076:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d006      	beq.n	800808c <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008086:	711a      	strb	r2, [r3, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d006      	beq.n	80080a0 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	2200      	movs	r2, #0
 8008096:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800809a:	711a      	strb	r2, [r3, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80080a6:	4b02      	ldr	r3, [pc, #8]	@ (80080b0 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	2000005c 	.word	0x2000005c

080080b4 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	220a      	movs	r2, #10
 80080c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80080c2:	4b03      	ldr	r3, [pc, #12]	@ (80080d0 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	2000007c 	.word	0x2000007c

080080d4 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e009      	b.n	80080fc <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	33b0      	adds	r3, #176	@ 0xb0
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	32b0      	adds	r2, #176	@ 0xb0
 800811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d032      	beq.n	800818c <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	33b0      	adds	r3, #176	@ 0xb0
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2000      	movs	r0, #0
 800815e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8008160:	4b0c      	ldr	r3, [pc, #48]	@ (8008194 <MSC_BOT_Init+0x8c>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f007 fb64 	bl	800f834 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 800816c:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <MSC_BOT_Init+0x90>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f007 fb5e 	bl	800f834 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8008178:	4b06      	ldr	r3, [pc, #24]	@ (8008194 <MSC_BOT_Init+0x8c>)
 800817a:	7819      	ldrb	r1, [r3, #0]
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8008182:	231f      	movs	r3, #31
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f007 fc1e 	bl	800f9c6 <USBD_LL_PrepareReceive>
 800818a:	e000      	b.n	800818e <MSC_BOT_Init+0x86>
    return;
 800818c:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20000087 	.word	0x20000087
 8008198:	20000086 	.word	0x20000086

0800819c <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32b0      	adds	r2, #176	@ 0xb0
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d01b      	beq.n	80081f2 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80081c6:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <MSC_BOT_Reset+0x60>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f007 fb6f 	bl	800f8b0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80081d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <MSC_BOT_Reset+0x64>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f007 fb69 	bl	800f8b0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80081de:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <MSC_BOT_Reset+0x64>)
 80081e0:	7819      	ldrb	r1, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80081e8:	231f      	movs	r3, #31
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f007 fbeb 	bl	800f9c6 <USBD_LL_PrepareReceive>
 80081f0:	e000      	b.n	80081f4 <MSC_BOT_Reset+0x58>
    return;
 80081f2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000086 	.word	0x20000086
 8008200:	20000087 	.word	0x20000087

08008204 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	32b0      	adds	r2, #176	@ 0xb0
 8008216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821a:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	721a      	strb	r2, [r3, #8]
  }
}
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	32b0      	adds	r2, #176	@ 0xb0
 800824a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800824e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d020      	beq.n	8008298 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	7a1b      	ldrb	r3, [r3, #8]
 800825a:	2b02      	cmp	r3, #2
 800825c:	d005      	beq.n	800826a <MSC_BOT_DataIn+0x36>
 800825e:	2b02      	cmp	r3, #2
 8008260:	db1c      	blt.n	800829c <MSC_BOT_DataIn+0x68>
 8008262:	3b03      	subs	r3, #3
 8008264:	2b01      	cmp	r3, #1
 8008266:	d819      	bhi.n	800829c <MSC_BOT_DataIn+0x68>
 8008268:	e011      	b.n	800828e <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8008276:	461a      	mov	r2, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f9cb 	bl	8008614 <SCSI_ProcessCmd>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	da0d      	bge.n	80082a0 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008284:	2101      	movs	r1, #1
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f90e 	bl	80084a8 <MSC_BOT_SendCSW>
      }
      break;
 800828c:	e008      	b.n	80082a0 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800828e:	2100      	movs	r1, #0
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f909 	bl	80084a8 <MSC_BOT_SendCSW>
      break;
 8008296:	e004      	b.n	80082a2 <MSC_BOT_DataIn+0x6e>
    return;
 8008298:	bf00      	nop
 800829a:	e002      	b.n	80082a2 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 800829c:	bf00      	nop
 800829e:	e000      	b.n	80082a2 <MSC_BOT_DataIn+0x6e>
      break;
 80082a0:	bf00      	nop
  }
}
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	32b0      	adds	r2, #176	@ 0xb0
 80082be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d01c      	beq.n	8008304 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	7a1b      	ldrb	r3, [r3, #8]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <MSC_BOT_DataOut+0x30>
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d004      	beq.n	80082e0 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80082d6:	e018      	b.n	800830a <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f819 	bl	8008310 <MSC_BOT_CBW_Decode>
      break;
 80082de:	e014      	b.n	800830a <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80082ec:	461a      	mov	r2, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f990 	bl	8008614 <SCSI_ProcessCmd>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da06      	bge.n	8008308 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80082fa:	2101      	movs	r1, #1
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f8d3 	bl	80084a8 <MSC_BOT_SendCSW>
      break;
 8008302:	e001      	b.n	8008308 <MSC_BOT_DataOut+0x60>
    return;
 8008304:	bf00      	nop
 8008306:	e000      	b.n	800830a <MSC_BOT_DataOut+0x62>
      break;
 8008308:	bf00      	nop
  }
}
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	32b0      	adds	r2, #176	@ 0xb0
 8008322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008326:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d07c      	beq.n	8008428 <MSC_BOT_CBW_Decode+0x118>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008346:	4b3b      	ldr	r3, [pc, #236]	@ (8008434 <MSC_BOT_CBW_Decode+0x124>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f007 fb5b 	bl	800fa08 <USBD_LL_GetRxDataSize>
 8008352:	4603      	mov	r3, r0
 8008354:	2b1f      	cmp	r3, #31
 8008356:	d117      	bne.n	8008388 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800835e:	4a36      	ldr	r2, [pc, #216]	@ (8008438 <MSC_BOT_CBW_Decode+0x128>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d111      	bne.n	8008388 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 800836a:	461a      	mov	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008370:	429a      	cmp	r2, r3
 8008372:	d809      	bhi.n	8008388 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8008384:	2b10      	cmp	r3, #16
 8008386:	d90e      	bls.n	80083a6 <MSC_BOT_CBW_Decode+0x96>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800838e:	2320      	movs	r3, #32
 8008390:	2205      	movs	r2, #5
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fe85 	bl	80090a2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2202      	movs	r2, #2
 800839c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 f8bc 	bl	800851c <MSC_BOT_Abort>
 80083a4:	e043      	b.n	800842e <MSC_BOT_CBW_Decode+0x11e>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80083b2:	461a      	mov	r2, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f92d 	bl	8008614 <SCSI_ProcessCmd>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	da0c      	bge.n	80083da <MSC_BOT_CBW_Decode+0xca>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	7a1b      	ldrb	r3, [r3, #8]
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	d104      	bne.n	80083d2 <MSC_BOT_CBW_Decode+0xc2>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80083c8:	2101      	movs	r1, #1
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f86c 	bl	80084a8 <MSC_BOT_SendCSW>
 80083d0:	e02d      	b.n	800842e <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f8a2 	bl	800851c <MSC_BOT_Abort>
 80083d8:	e029      	b.n	800842e <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	7a1b      	ldrb	r3, [r3, #8]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d024      	beq.n	800842c <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d020      	beq.n	800842c <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d01c      	beq.n	800842c <MSC_BOT_CBW_Decode+0x11c>
    {
      if (hmsc->bot_data_length > 0U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f103 0110 	add.w	r1, r3, #16
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	461a      	mov	r2, r3
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f818 	bl	800843c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800840c:	e00f      	b.n	800842e <MSC_BOT_CBW_Decode+0x11e>
      }
      else if (hmsc->bot_data_length == 0U)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d104      	bne.n	8008420 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008416:	2100      	movs	r1, #0
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f845 	bl	80084a8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800841e:	e006      	b.n	800842e <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f87b 	bl	800851c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8008426:	e002      	b.n	800842e <MSC_BOT_CBW_Decode+0x11e>
    return;
 8008428:	bf00      	nop
 800842a:	e000      	b.n	800842e <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    else
    {
      return;
 800842c:	bf00      	nop
    }
  }
}
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	20000087 	.word	0x20000087
 8008438:	43425355 	.word	0x43425355

0800843c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	32b0      	adds	r2, #176	@ 0xb0
 8008452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008456:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d01e      	beq.n	800849c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4293      	cmp	r3, r2
 8008468:	bf28      	it	cs
 800846a:	4613      	movcs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	1ad2      	subs	r2, r2, r3
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2204      	movs	r2, #4
 800848a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 800848c:	4b05      	ldr	r3, [pc, #20]	@ (80084a4 <MSC_BOT_SendData+0x68>)
 800848e:	7819      	ldrb	r1, [r3, #0]
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f007 fa75 	bl	800f984 <USBD_LL_Transmit>
 800849a:	e000      	b.n	800849e <MSC_BOT_SendData+0x62>
    return;
 800849c:	bf00      	nop
}
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000086 	.word	0x20000086

080084a8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32b0      	adds	r2, #176	@ 0xb0
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01d      	beq.n	8008506 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4a10      	ldr	r2, [pc, #64]	@ (8008510 <MSC_BOT_SendCSW+0x68>)
 80084ce:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	78fa      	ldrb	r2, [r7, #3]
 80084d6:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80084e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008514 <MSC_BOT_SendCSW+0x6c>)
 80084e2:	7819      	ldrb	r1, [r3, #0]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80084ea:	230d      	movs	r3, #13
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f007 fa49 	bl	800f984 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80084f2:	4b09      	ldr	r3, [pc, #36]	@ (8008518 <MSC_BOT_SendCSW+0x70>)
 80084f4:	7819      	ldrb	r1, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80084fc:	231f      	movs	r3, #31
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f007 fa61 	bl	800f9c6 <USBD_LL_PrepareReceive>
 8008504:	e000      	b.n	8008508 <MSC_BOT_SendCSW+0x60>
    return;
 8008506:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	53425355 	.word	0x53425355
 8008514:	20000086 	.word	0x20000086
 8008518:	20000087 	.word	0x20000087

0800851c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	32b0      	adds	r2, #176	@ 0xb0
 800852e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008532:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d02a      	beq.n	8008590 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10e      	bne.n	8008562 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8008552:	2b00      	cmp	r3, #0
 8008554:	d105      	bne.n	8008562 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008556:	4b10      	ldr	r3, [pc, #64]	@ (8008598 <MSC_BOT_Abort+0x7c>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	4619      	mov	r1, r3
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f007 f988 	bl	800f872 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008562:	4b0e      	ldr	r3, [pc, #56]	@ (800859c <MSC_BOT_Abort+0x80>)
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	4619      	mov	r1, r3
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f007 f982 	bl	800f872 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	7a5b      	ldrb	r3, [r3, #9]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d10d      	bne.n	8008592 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008576:	4b09      	ldr	r3, [pc, #36]	@ (800859c <MSC_BOT_Abort+0x80>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f007 f978 	bl	800f872 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008582:	4b05      	ldr	r3, [pc, #20]	@ (8008598 <MSC_BOT_Abort+0x7c>)
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f007 f972 	bl	800f872 <USBD_LL_StallEP>
 800858e:	e000      	b.n	8008592 <MSC_BOT_Abort+0x76>
    return;
 8008590:	bf00      	nop
  }
}
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20000087 	.word	0x20000087
 800859c:	20000086 	.word	0x20000086

080085a0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	460b      	mov	r3, r1
 80085aa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	32b0      	adds	r2, #176	@ 0xb0
 80085b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ba:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d01d      	beq.n	80085fe <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	7a5b      	ldrb	r3, [r3, #9]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d10c      	bne.n	80085e4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80085ca:	4b10      	ldr	r3, [pc, #64]	@ (800860c <MSC_BOT_CplClrFeature+0x6c>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f007 f94e 	bl	800f872 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80085d6:	4b0e      	ldr	r3, [pc, #56]	@ (8008610 <MSC_BOT_CplClrFeature+0x70>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f007 f948 	bl	800f872 <USBD_LL_StallEP>
 80085e2:	e00f      	b.n	8008604 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80085e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	da0a      	bge.n	8008602 <MSC_BOT_CplClrFeature+0x62>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	7a5b      	ldrb	r3, [r3, #9]
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d006      	beq.n	8008602 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80085f4:	2101      	movs	r1, #1
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7ff ff56 	bl	80084a8 <MSC_BOT_SendCSW>
 80085fc:	e002      	b.n	8008604 <MSC_BOT_CplClrFeature+0x64>
    return;
 80085fe:	bf00      	nop
 8008600:	e000      	b.n	8008604 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8008602:	bf00      	nop
  }
}
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000086 	.word	0x20000086
 8008610:	20000087 	.word	0x20000087

08008614 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	460b      	mov	r3, r1
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	32b0      	adds	r2, #176	@ 0xb0
 800862c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008630:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8008638:	f04f 33ff 	mov.w	r3, #4294967295
 800863c:	e18f      	b.n	800895e <SCSI_ProcessCmd+0x34a>
  }

  switch (cmd[0])
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b5a      	cmp	r3, #90	@ 0x5a
 8008644:	f300 80e0 	bgt.w	8008808 <SCSI_ProcessCmd+0x1f4>
 8008648:	2b00      	cmp	r3, #0
 800864a:	da21      	bge.n	8008690 <SCSI_ProcessCmd+0x7c>
 800864c:	e17c      	b.n	8008948 <SCSI_ProcessCmd+0x334>
 800864e:	3b9e      	subs	r3, #158	@ 0x9e
 8008650:	2b0c      	cmp	r3, #12
 8008652:	f200 8179 	bhi.w	8008948 <SCSI_ProcessCmd+0x334>
 8008656:	a201      	add	r2, pc, #4	@ (adr r2, 800865c <SCSI_ProcessCmd+0x48>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	080088b9 	.word	0x080088b9
 8008660:	08008949 	.word	0x08008949
 8008664:	08008925 	.word	0x08008925
 8008668:	08008949 	.word	0x08008949
 800866c:	08008949 	.word	0x08008949
 8008670:	08008949 	.word	0x08008949
 8008674:	08008949 	.word	0x08008949
 8008678:	08008949 	.word	0x08008949
 800867c:	08008949 	.word	0x08008949
 8008680:	08008949 	.word	0x08008949
 8008684:	080088dd 	.word	0x080088dd
 8008688:	08008949 	.word	0x08008949
 800868c:	08008901 	.word	0x08008901
 8008690:	2b5a      	cmp	r3, #90	@ 0x5a
 8008692:	f200 8159 	bhi.w	8008948 <SCSI_ProcessCmd+0x334>
 8008696:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <SCSI_ProcessCmd+0x88>)
 8008698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869c:	08008817 	.word	0x08008817
 80086a0:	08008949 	.word	0x08008949
 80086a4:	08008949 	.word	0x08008949
 80086a8:	08008829 	.word	0x08008829
 80086ac:	08008949 	.word	0x08008949
 80086b0:	08008949 	.word	0x08008949
 80086b4:	08008949 	.word	0x08008949
 80086b8:	08008949 	.word	0x08008949
 80086bc:	08008949 	.word	0x08008949
 80086c0:	08008949 	.word	0x08008949
 80086c4:	08008949 	.word	0x08008949
 80086c8:	08008949 	.word	0x08008949
 80086cc:	08008949 	.word	0x08008949
 80086d0:	08008949 	.word	0x08008949
 80086d4:	08008949 	.word	0x08008949
 80086d8:	08008949 	.word	0x08008949
 80086dc:	08008949 	.word	0x08008949
 80086e0:	08008949 	.word	0x08008949
 80086e4:	0800883b 	.word	0x0800883b
 80086e8:	08008949 	.word	0x08008949
 80086ec:	08008949 	.word	0x08008949
 80086f0:	08008949 	.word	0x08008949
 80086f4:	08008949 	.word	0x08008949
 80086f8:	08008949 	.word	0x08008949
 80086fc:	08008949 	.word	0x08008949
 8008700:	08008949 	.word	0x08008949
 8008704:	08008871 	.word	0x08008871
 8008708:	0800884d 	.word	0x0800884d
 800870c:	08008937 	.word	0x08008937
 8008710:	08008949 	.word	0x08008949
 8008714:	0800885f 	.word	0x0800885f
 8008718:	08008949 	.word	0x08008949
 800871c:	08008949 	.word	0x08008949
 8008720:	08008949 	.word	0x08008949
 8008724:	08008949 	.word	0x08008949
 8008728:	08008895 	.word	0x08008895
 800872c:	08008949 	.word	0x08008949
 8008730:	080088a7 	.word	0x080088a7
 8008734:	08008949 	.word	0x08008949
 8008738:	08008949 	.word	0x08008949
 800873c:	080088cb 	.word	0x080088cb
 8008740:	08008949 	.word	0x08008949
 8008744:	080088ef 	.word	0x080088ef
 8008748:	08008949 	.word	0x08008949
 800874c:	08008949 	.word	0x08008949
 8008750:	08008949 	.word	0x08008949
 8008754:	08008949 	.word	0x08008949
 8008758:	08008913 	.word	0x08008913
 800875c:	08008949 	.word	0x08008949
 8008760:	08008949 	.word	0x08008949
 8008764:	08008949 	.word	0x08008949
 8008768:	08008949 	.word	0x08008949
 800876c:	08008949 	.word	0x08008949
 8008770:	08008949 	.word	0x08008949
 8008774:	08008949 	.word	0x08008949
 8008778:	08008949 	.word	0x08008949
 800877c:	08008949 	.word	0x08008949
 8008780:	08008949 	.word	0x08008949
 8008784:	08008949 	.word	0x08008949
 8008788:	08008949 	.word	0x08008949
 800878c:	08008949 	.word	0x08008949
 8008790:	08008949 	.word	0x08008949
 8008794:	08008949 	.word	0x08008949
 8008798:	08008949 	.word	0x08008949
 800879c:	08008949 	.word	0x08008949
 80087a0:	08008949 	.word	0x08008949
 80087a4:	08008949 	.word	0x08008949
 80087a8:	08008949 	.word	0x08008949
 80087ac:	08008949 	.word	0x08008949
 80087b0:	08008949 	.word	0x08008949
 80087b4:	08008949 	.word	0x08008949
 80087b8:	08008949 	.word	0x08008949
 80087bc:	08008949 	.word	0x08008949
 80087c0:	08008949 	.word	0x08008949
 80087c4:	08008949 	.word	0x08008949
 80087c8:	08008949 	.word	0x08008949
 80087cc:	08008949 	.word	0x08008949
 80087d0:	08008949 	.word	0x08008949
 80087d4:	08008949 	.word	0x08008949
 80087d8:	08008949 	.word	0x08008949
 80087dc:	08008949 	.word	0x08008949
 80087e0:	08008949 	.word	0x08008949
 80087e4:	08008949 	.word	0x08008949
 80087e8:	08008949 	.word	0x08008949
 80087ec:	08008949 	.word	0x08008949
 80087f0:	08008949 	.word	0x08008949
 80087f4:	08008949 	.word	0x08008949
 80087f8:	08008949 	.word	0x08008949
 80087fc:	08008949 	.word	0x08008949
 8008800:	08008949 	.word	0x08008949
 8008804:	08008883 	.word	0x08008883
 8008808:	2baa      	cmp	r3, #170	@ 0xaa
 800880a:	f300 809d 	bgt.w	8008948 <SCSI_ProcessCmd+0x334>
 800880e:	2b9e      	cmp	r3, #158	@ 0x9e
 8008810:	f6bf af1d 	bge.w	800864e <SCSI_ProcessCmd+0x3a>
 8008814:	e098      	b.n	8008948 <SCSI_ProcessCmd+0x334>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	4619      	mov	r1, r3
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 f8a3 	bl	8008968 <SCSI_TestUnitReady>
 8008822:	4603      	mov	r3, r0
 8008824:	75fb      	strb	r3, [r7, #23]
      break;
 8008826:	e098      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	4619      	mov	r1, r3
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fbb4 	bl	8008f9c <SCSI_RequestSense>
 8008834:	4603      	mov	r3, r0
 8008836:	75fb      	strb	r3, [r7, #23]
      break;
 8008838:	e08f      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 800883a:	7afb      	ldrb	r3, [r7, #11]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	4619      	mov	r1, r3
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 f8eb 	bl	8008a1c <SCSI_Inquiry>
 8008846:	4603      	mov	r3, r0
 8008848:	75fb      	strb	r3, [r7, #23]
      break;
 800884a:	e086      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	4619      	mov	r1, r3
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 fc70 	bl	8009138 <SCSI_StartStopUnit>
 8008858:	4603      	mov	r3, r0
 800885a:	75fb      	strb	r3, [r7, #23]
      break;
 800885c:	e07d      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800885e:	7afb      	ldrb	r3, [r7, #11]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	4619      	mov	r1, r3
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fcbc 	bl	80091e2 <SCSI_AllowPreventRemovable>
 800886a:	4603      	mov	r3, r0
 800886c:	75fb      	strb	r3, [r7, #23]
      break;
 800886e:	e074      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	4619      	mov	r1, r3
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 faf2 	bl	8008e60 <SCSI_ModeSense6>
 800887c:	4603      	mov	r3, r0
 800887e:	75fb      	strb	r3, [r7, #23]
      break;
 8008880:	e06b      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8008882:	7afb      	ldrb	r3, [r7, #11]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	4619      	mov	r1, r3
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 fb39 	bl	8008f00 <SCSI_ModeSense10>
 800888e:	4603      	mov	r3, r0
 8008890:	75fb      	strb	r3, [r7, #23]
      break;
 8008892:	e062      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8008894:	7afb      	ldrb	r3, [r7, #11]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	4619      	mov	r1, r3
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fa64 	bl	8008d68 <SCSI_ReadFormatCapacity>
 80088a0:	4603      	mov	r3, r0
 80088a2:	75fb      	strb	r3, [r7, #23]
      break;
 80088a4:	e059      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80088a6:	7afb      	ldrb	r3, [r7, #11]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	4619      	mov	r1, r3
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f931 	bl	8008b14 <SCSI_ReadCapacity10>
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]
      break;
 80088b6:	e050      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80088b8:	7afb      	ldrb	r3, [r7, #11]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	4619      	mov	r1, r3
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 f9a2 	bl	8008c08 <SCSI_ReadCapacity16>
 80088c4:	4603      	mov	r3, r0
 80088c6:	75fb      	strb	r3, [r7, #23]
      break;
 80088c8:	e047      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80088ca:	7afb      	ldrb	r3, [r7, #11]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	4619      	mov	r1, r3
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 fcb3 	bl	800923c <SCSI_Read10>
 80088d6:	4603      	mov	r3, r0
 80088d8:	75fb      	strb	r3, [r7, #23]
      break;
 80088da:	e03e      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80088dc:	7afb      	ldrb	r3, [r7, #11]
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	4619      	mov	r1, r3
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fd54 	bl	8009390 <SCSI_Read12>
 80088e8:	4603      	mov	r3, r0
 80088ea:	75fb      	strb	r3, [r7, #23]
      break;
 80088ec:	e035      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	4619      	mov	r1, r3
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f000 fe01 	bl	80094fc <SCSI_Write10>
 80088fa:	4603      	mov	r3, r0
 80088fc:	75fb      	strb	r3, [r7, #23]
      break;
 80088fe:	e02c      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4619      	mov	r1, r3
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f000 fed0 	bl	80096ac <SCSI_Write12>
 800890c:	4603      	mov	r3, r0
 800890e:	75fb      	strb	r3, [r7, #23]
      break;
 8008910:	e023      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8008912:	7afb      	ldrb	r3, [r7, #11]
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	4619      	mov	r1, r3
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 ffaf 	bl	800987c <SCSI_Verify10>
 800891e:	4603      	mov	r3, r0
 8008920:	75fb      	strb	r3, [r7, #23]
      break;
 8008922:	e01a      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_REPORT_LUNS:
      ret = SCSI_ReportLuns(pdev, lun, cmd);
 8008924:	7afb      	ldrb	r3, [r7, #11]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	4619      	mov	r1, r3
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 ffe8 	bl	8009900 <SCSI_ReportLuns>
 8008930:	4603      	mov	r3, r0
 8008932:	75fb      	strb	r3, [r7, #23]
      break;
 8008934:	e011      	b.n	800895a <SCSI_ProcessCmd+0x346>

    case SCSI_RECEIVE_DIAGNOSTIC_RESULTS:
      ret = SCSI_ReceiveDiagnosticResults(pdev, lun, cmd);
 8008936:	7afb      	ldrb	r3, [r7, #11]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	4619      	mov	r1, r3
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f001 f835 	bl	80099ac <SCSI_ReceiveDiagnosticResults>
 8008942:	4603      	mov	r3, r0
 8008944:	75fb      	strb	r3, [r7, #23]
      break;
 8008946:	e008      	b.n	800895a <SCSI_ProcessCmd+0x346>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8008948:	7af9      	ldrb	r1, [r7, #11]
 800894a:	2320      	movs	r3, #32
 800894c:	2205      	movs	r2, #5
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 fba7 	bl	80090a2 <SCSI_SenseCode>
      ret = -1;
 8008954:	23ff      	movs	r3, #255	@ 0xff
 8008956:	75fb      	strb	r3, [r7, #23]
      break;
 8008958:	bf00      	nop
  }

  return ret;
 800895a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop

08008968 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b086      	sub	sp, #24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	460b      	mov	r3, r1
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	32b0      	adds	r2, #176	@ 0xb0
 8008980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008984:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d102      	bne.n	8008992 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 800898c:	f04f 33ff 	mov.w	r3, #4294967295
 8008990:	e03f      	b.n	8008a12 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80089a2:	2320      	movs	r3, #32
 80089a4:	2205      	movs	r2, #5
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 fb7b 	bl	80090a2 <SCSI_SenseCode>

    return -1;
 80089ac:	f04f 33ff 	mov.w	r3, #4294967295
 80089b0:	e02f      	b.n	8008a12 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d10b      	bne.n	80089d4 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80089bc:	7af9      	ldrb	r1, [r7, #11]
 80089be:	233a      	movs	r3, #58	@ 0x3a
 80089c0:	2202      	movs	r2, #2
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fb6d 	bl	80090a2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2205      	movs	r2, #5
 80089cc:	721a      	strb	r2, [r3, #8]
    return -1;
 80089ce:	f04f 33ff 	mov.w	r3, #4294967295
 80089d2:	e01e      	b.n	8008a12 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	33b0      	adds	r3, #176	@ 0xb0
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	7afa      	ldrb	r2, [r7, #11]
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80089f2:	7af9      	ldrb	r1, [r7, #11]
 80089f4:	233a      	movs	r3, #58	@ 0x3a
 80089f6:	2202      	movs	r2, #2
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f000 fb52 	bl	80090a2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2205      	movs	r2, #5
 8008a02:	721a      	strb	r2, [r3, #8]

    return -1;
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
 8008a08:	e003      	b.n	8008a12 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	60da      	str	r2, [r3, #12]

  return 0;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3718      	adds	r7, #24
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	460b      	mov	r3, r1
 8008a26:	607a      	str	r2, [r7, #4]
 8008a28:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	32b0      	adds	r2, #176	@ 0xb0
 8008a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a38:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8008a40:	f04f 33ff 	mov.w	r3, #4294967295
 8008a44:	e05e      	b.n	8008b04 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d10a      	bne.n	8008a66 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008a56:	2320      	movs	r3, #32
 8008a58:	2205      	movs	r2, #5
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fb21 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8008a60:	f04f 33ff 	mov.w	r3, #4294967295
 8008a64:	e04e      	b.n	8008b04 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d020      	beq.n	8008ab6 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	3302      	adds	r3, #2
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8008a7e:	2206      	movs	r2, #6
 8008a80:	4922      	ldr	r1, [pc, #136]	@ (8008b0c <SCSI_Inquiry+0xf0>)
 8008a82:	69b8      	ldr	r0, [r7, #24]
 8008a84:	f001 f908 	bl	8009c98 <SCSI_UpdateBotData>
 8008a88:	e03b      	b.n	8008b02 <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	3302      	adds	r3, #2
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b80      	cmp	r3, #128	@ 0x80
 8008a92:	d105      	bne.n	8008aa0 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8008a94:	2208      	movs	r2, #8
 8008a96:	491e      	ldr	r1, [pc, #120]	@ (8008b10 <SCSI_Inquiry+0xf4>)
 8008a98:	69b8      	ldr	r0, [r7, #24]
 8008a9a:	f001 f8fd 	bl	8009c98 <SCSI_UpdateBotData>
 8008a9e:	e030      	b.n	8008b02 <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008aa6:	2324      	movs	r3, #36	@ 0x24
 8008aa8:	2205      	movs	r2, #5
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 faf9 	bl	80090a2 <SCSI_SenseCode>
                     INVALID_FIELD_IN_COMMAND);

      return -1;
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	e026      	b.n	8008b04 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	33b0      	adds	r3, #176	@ 0xb0
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8008ac6:	69d9      	ldr	r1, [r3, #28]
 8008ac8:	7afa      	ldrb	r2, [r7, #11]
 8008aca:	4613      	mov	r3, r2
 8008acc:	00db      	lsls	r3, r3, #3
 8008ace:	4413      	add	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008ad2:	440b      	add	r3, r1
 8008ad4:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	3305      	adds	r3, #5
 8008ade:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	8bfb      	ldrh	r3, [r7, #30]
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d303      	bcc.n	8008af6 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3304      	adds	r3, #4
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8008af6:	8bfb      	ldrh	r3, [r7, #30]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6979      	ldr	r1, [r7, #20]
 8008afc:	69b8      	ldr	r0, [r7, #24]
 8008afe:	f001 f8cb 	bl	8009c98 <SCSI_UpdateBotData>
  }

  return 0;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3720      	adds	r7, #32
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20000088 	.word	0x20000088
 8008b10:	20000090 	.word	0x20000090

08008b14 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	32b0      	adds	r2, #176	@ 0xb0
 8008b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b30:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	3326      	adds	r3, #38	@ 0x26
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	3304      	adds	r3, #4
 8008b3e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d102      	bne.n	8008b4c <SCSI_ReadCapacity10+0x38>
  {
    return -1;
 8008b46:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4a:	e059      	b.n	8008c00 <SCSI_ReadCapacity10+0xec>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	33b0      	adds	r3, #176	@ 0xb0
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	1d11      	adds	r1, r2, #4
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	7af8      	ldrb	r0, [r7, #11]
 8008b66:	4798      	blx	r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75fb      	strb	r3, [r7, #23]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <SCSI_ReadCapacity10+0x6a>
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008b7a:	2b02      	cmp	r3, #2
 8008b7c:	d108      	bne.n	8008b90 <SCSI_ReadCapacity10+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008b7e:	7af9      	ldrb	r1, [r7, #11]
 8008b80:	233a      	movs	r3, #58	@ 0x3a
 8008b82:	2202      	movs	r2, #2
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fa8c 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8008b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8e:	e037      	b.n	8008c00 <SCSI_ReadCapacity10+0xec>
  }

  hmsc->bot_data[0] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	3b01      	subs	r3, #1
 8008b96:	0e1b      	lsrs	r3, r3, #24
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	0c1b      	lsrs	r3, r3, #16
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	0a1b      	lsrs	r3, r3, #8
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(p_scsi_blk->size >> 24);
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	161b      	asrs	r3, r3, #24
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(p_scsi_blk->size >> 16);
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	141b      	asrs	r3, r3, #16
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(p_scsi_blk->size >> 8);
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	0a1b      	lsrs	r3, r3, #8
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->size);
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	2208      	movs	r2, #8
 8008bfc:	60da      	str	r2, [r3, #12]

  return 0;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b088      	sub	sp, #32
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	460b      	mov	r3, r1
 8008c12:	607a      	str	r2, [r7, #4]
 8008c14:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	32b0      	adds	r2, #176	@ 0xb0
 8008c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c24:	61bb      	str	r3, [r7, #24]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008c26:	7afb      	ldrb	r3, [r7, #11]
 8008c28:	3326      	adds	r3, #38	@ 0x26
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4413      	add	r3, r2
 8008c30:	3304      	adds	r3, #4
 8008c32:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d102      	bne.n	8008c40 <SCSI_ReadCapacity16+0x38>
  {
    return -1;
 8008c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3e:	e08f      	b.n	8008d60 <SCSI_ReadCapacity16+0x158>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	33b0      	adds	r3, #176	@ 0xb0
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	1d11      	adds	r1, r2, #4
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	7af8      	ldrb	r0, [r7, #11]
 8008c5a:	4798      	blx	r3
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	74fb      	strb	r3, [r7, #19]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008c60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d104      	bne.n	8008c72 <SCSI_ReadCapacity16+0x6a>
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d108      	bne.n	8008c84 <SCSI_ReadCapacity16+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008c72:	7af9      	ldrb	r1, [r7, #11]
 8008c74:	233a      	movs	r3, #58	@ 0x3a
 8008c76:	2202      	movs	r2, #2
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fa12 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c82:	e06d      	b.n	8008d60 <SCSI_ReadCapacity16+0x158>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	330a      	adds	r3, #10
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	330b      	adds	r3, #11
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008c94:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	330c      	adds	r3, #12
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008c9e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	320d      	adds	r2, #13
 8008ca4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008ca6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008cac:	2300      	movs	r3, #0
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e008      	b.n	8008cc4 <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3310      	adds	r3, #16
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	61fb      	str	r3, [r7, #28]
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	69fa      	ldr	r2, [r7, #28]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d3f1      	bcc.n	8008cb2 <SCSI_ReadCapacity16+0xaa>
  }

  hmsc->bot_data[4] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	0e1b      	lsrs	r3, r3, #24
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	0c1b      	lsrs	r3, r3, #16
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	0a1b      	lsrs	r3, r3, #8
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	3b01      	subs	r3, #1
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(p_scsi_blk->size >>  24);
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	161b      	asrs	r3, r3, #24
 8008d0c:	b2da      	uxtb	r2, r3
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(p_scsi_blk->size >>  16);
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	141b      	asrs	r3, r3, #16
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(p_scsi_blk->size >>  8);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(p_scsi_blk->size);
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	881b      	ldrh	r3, [r3, #0]
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	330a      	adds	r3, #10
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	330b      	adds	r3, #11
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008d46:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	330c      	adds	r3, #12
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008d50:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	320d      	adds	r2, #13
 8008d56:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008d58:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	60da      	str	r2, [r3, #12]

  return 0;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3720      	adds	r7, #32
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	460b      	mov	r3, r1
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	32b0      	adds	r2, #176	@ 0xb0
 8008d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d84:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d102      	bne.n	8008d92 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8008d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008d90:	e061      	b.n	8008e56 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	33b0      	adds	r3, #176	@ 0xb0
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f107 0214 	add.w	r2, r7, #20
 8008da8:	f107 0110 	add.w	r1, r7, #16
 8008dac:	7af8      	ldrb	r0, [r7, #11]
 8008dae:	4798      	blx	r3
 8008db0:	4603      	mov	r3, r0
 8008db2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d104      	bne.n	8008dc6 <SCSI_ReadFormatCapacity+0x5e>
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d108      	bne.n	8008dd8 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008dc6:	7af9      	ldrb	r1, [r7, #11]
 8008dc8:	233a      	movs	r3, #58	@ 0x3a
 8008dca:	2202      	movs	r2, #2
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f000 f968 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd6:	e03e      	b.n	8008e56 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	83fb      	strh	r3, [r7, #30]
 8008ddc:	e007      	b.n	8008dee <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8008dde:	8bfb      	ldrh	r3, [r7, #30]
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	4413      	add	r3, r2
 8008de4:	2200      	movs	r2, #0
 8008de6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8008de8:	8bfb      	ldrh	r3, [r7, #30]
 8008dea:	3301      	adds	r3, #1
 8008dec:	83fb      	strh	r3, [r7, #30]
 8008dee:	8bfb      	ldrh	r3, [r7, #30]
 8008df0:	2b0b      	cmp	r3, #11
 8008df2:	d9f4      	bls.n	8008dde <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	2208      	movs	r2, #8
 8008df8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	0e1b      	lsrs	r3, r3, #24
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	0c1b      	lsrs	r3, r3, #16
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	0a1b      	lsrs	r3, r3, #8
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008e30:	8abb      	ldrh	r3, [r7, #20]
 8008e32:	141b      	asrs	r3, r3, #16
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008e3a:	8abb      	ldrh	r3, [r7, #20]
 8008e3c:	0a1b      	lsrs	r3, r3, #8
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8008e46:	8abb      	ldrh	r3, [r7, #20]
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	220c      	movs	r2, #12
 8008e52:	60da      	str	r2, [r3, #12]

  return 0;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3720      	adds	r7, #32
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	32b0      	adds	r2, #176	@ 0xb0
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8008e7e:	2304      	movs	r3, #4
 8008e80:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d102      	bne.n	8008e8e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8008e88:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8c:	e02f      	b.n	8008eee <SCSI_ModeSense6+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	33b0      	adds	r3, #176	@ 0xb0
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	7afa      	ldrb	r2, [r7, #11]
 8008ea2:	4610      	mov	r0, r2
 8008ea4:	4798      	blx	r3
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d007      	beq.n	8008ebc <SCSI_ModeSense6+0x5c>
  {
    MSC_Mode_Sense6_data[2] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8008eac:	4b12      	ldr	r3, [pc, #72]	@ (8008ef8 <SCSI_ModeSense6+0x98>)
 8008eae:	789b      	ldrb	r3, [r3, #2]
 8008eb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	4b10      	ldr	r3, [pc, #64]	@ (8008ef8 <SCSI_ModeSense6+0x98>)
 8008eb8:	709a      	strb	r2, [r3, #2]
 8008eba:	e006      	b.n	8008eca <SCSI_ModeSense6+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[2] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8008efc <SCSI_ModeSense6+0x9c>)
 8008ebe:	789b      	ldrb	r3, [r3, #2]
 8008ec0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8008efc <SCSI_ModeSense6+0x9c>)
 8008ec8:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	8afb      	ldrh	r3, [r7, #22]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d303      	bcc.n	8008ee0 <SCSI_ModeSense6+0x80>
  {
    len = params[4];
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	3304      	adds	r3, #4
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8008ee0:	8afb      	ldrh	r3, [r7, #22]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	4904      	ldr	r1, [pc, #16]	@ (8008ef8 <SCSI_ModeSense6+0x98>)
 8008ee6:	6938      	ldr	r0, [r7, #16]
 8008ee8:	f000 fed6 	bl	8009c98 <SCSI_UpdateBotData>

  return 0;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	20000098 	.word	0x20000098
 8008efc:	2000009c 	.word	0x2000009c

08008f00 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	32b0      	adds	r2, #176	@ 0xb0
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8008f1e:	2308      	movs	r3, #8
 8008f20:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2c:	e02f      	b.n	8008f8e <SCSI_ModeSense10+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f34:	68fa      	ldr	r2, [r7, #12]
 8008f36:	33b0      	adds	r3, #176	@ 0xb0
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	7afa      	ldrb	r2, [r7, #11]
 8008f42:	4610      	mov	r0, r2
 8008f44:	4798      	blx	r3
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d007      	beq.n	8008f5c <SCSI_ModeSense10+0x5c>
  {
    MSC_Mode_Sense10_data[3] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8008f4c:	4b12      	ldr	r3, [pc, #72]	@ (8008f98 <SCSI_ModeSense10+0x98>)
 8008f4e:	78db      	ldrb	r3, [r3, #3]
 8008f50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	4b10      	ldr	r3, [pc, #64]	@ (8008f98 <SCSI_ModeSense10+0x98>)
 8008f58:	70da      	strb	r2, [r3, #3]
 8008f5a:	e006      	b.n	8008f6a <SCSI_ModeSense10+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[3] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8008f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008f98 <SCSI_ModeSense10+0x98>)
 8008f5e:	78db      	ldrb	r3, [r3, #3]
 8008f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	4b0c      	ldr	r3, [pc, #48]	@ (8008f98 <SCSI_ModeSense10+0x98>)
 8008f68:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	461a      	mov	r2, r3
 8008f72:	8afb      	ldrh	r3, [r7, #22]
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d303      	bcc.n	8008f80 <SCSI_ModeSense10+0x80>
  {
    len = params[8];
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8008f80:	8afb      	ldrh	r3, [r7, #22]
 8008f82:	461a      	mov	r2, r3
 8008f84:	4904      	ldr	r1, [pc, #16]	@ (8008f98 <SCSI_ModeSense10+0x98>)
 8008f86:	6938      	ldr	r0, [r7, #16]
 8008f88:	f000 fe86 	bl	8009c98 <SCSI_UpdateBotData>

  return 0;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000009c 	.word	0x2000009c

08008f9c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	32b0      	adds	r2, #176	@ 0xb0
 8008fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <SCSI_RequestSense+0x2a>
  {
    return -1;
 8008fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc4:	e069      	b.n	800909a <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008fd6:	2320      	movs	r3, #32
 8008fd8:	2205      	movs	r2, #5
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f000 f861 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8008fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe4:	e059      	b.n	800909a <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	75fb      	strb	r3, [r7, #23]
 8008fea:	e007      	b.n	8008ffc <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	75fb      	strb	r3, [r7, #23]
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	2b11      	cmp	r3, #17
 8009000:	d9f4      	bls.n	8008fec <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	2270      	movs	r2, #112	@ 0x70
 8009006:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	220c      	movs	r2, #12
 800900c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800901a:	429a      	cmp	r2, r3
 800901c:	d02e      	beq.n	800907c <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8009024:	461a      	mov	r2, r3
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	3248      	adds	r2, #72	@ 0x48
 800902a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8009038:	693a      	ldr	r2, [r7, #16]
 800903a:	3348      	adds	r3, #72	@ 0x48
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	4413      	add	r3, r2
 8009040:	791a      	ldrb	r2, [r3, #4]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	3348      	adds	r3, #72	@ 0x48
 8009050:	00db      	lsls	r3, r3, #3
 8009052:	4413      	add	r3, r2
 8009054:	795a      	ldrb	r2, [r3, #5]
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8009060:	3301      	adds	r3, #1
 8009062:	b2da      	uxtb	r2, r3
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8009070:	2b04      	cmp	r3, #4
 8009072:	d103      	bne.n	800907c <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	2212      	movs	r2, #18
 8009080:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3304      	adds	r3, #4
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b12      	cmp	r3, #18
 800908a:	d805      	bhi.n	8009098 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3304      	adds	r3, #4
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b085      	sub	sp, #20
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	4608      	mov	r0, r1
 80090ac:	4611      	mov	r1, r2
 80090ae:	461a      	mov	r2, r3
 80090b0:	4603      	mov	r3, r0
 80090b2:	70fb      	strb	r3, [r7, #3]
 80090b4:	460b      	mov	r3, r1
 80090b6:	70bb      	strb	r3, [r7, #2]
 80090b8:	4613      	mov	r3, r2
 80090ba:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	32b0      	adds	r2, #176	@ 0xb0
 80090c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d02c      	beq.n	800912c <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80090d8:	461a      	mov	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3248      	adds	r2, #72	@ 0x48
 80090de:	78b9      	ldrb	r1, [r7, #2]
 80090e0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	3348      	adds	r3, #72	@ 0x48
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	4413      	add	r3, r2
 80090f2:	787a      	ldrb	r2, [r7, #1]
 80090f4:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	3348      	adds	r3, #72	@ 0x48
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	4413      	add	r3, r2
 8009104:	2200      	movs	r2, #0
 8009106:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800910e:	3301      	adds	r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800911e:	2b04      	cmp	r3, #4
 8009120:	d105      	bne.n	800912e <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 800912a:	e000      	b.n	800912e <SCSI_SenseCode+0x8c>
    return;
 800912c:	bf00      	nop
  }
}
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	460b      	mov	r3, r1
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	32b0      	adds	r2, #176	@ 0xb0
 8009150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009154:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 800915c:	f04f 33ff 	mov.w	r3, #4294967295
 8009160:	e03b      	b.n	80091da <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8009168:	2b01      	cmp	r3, #1
 800916a:	d10f      	bne.n	800918c <SCSI_StartStopUnit+0x54>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3304      	adds	r3, #4
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	f003 0303 	and.w	r3, r3, #3
 8009176:	2b02      	cmp	r3, #2
 8009178:	d108      	bne.n	800918c <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 800917a:	7af9      	ldrb	r1, [r7, #11]
 800917c:	2324      	movs	r3, #36	@ 0x24
 800917e:	2205      	movs	r2, #5
 8009180:	68f8      	ldr	r0, [r7, #12]
 8009182:	f7ff ff8e 	bl	80090a2 <SCSI_SenseCode>

    return -1;
 8009186:	f04f 33ff 	mov.w	r3, #4294967295
 800918a:	e026      	b.n	80091da <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	f003 0303 	and.w	r3, r3, #3
 8009196:	2b01      	cmp	r3, #1
 8009198:	d104      	bne.n	80091a4 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80091a2:	e016      	b.n	80091d2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	3304      	adds	r3, #4
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	f003 0303 	and.w	r3, r3, #3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d104      	bne.n	80091bc <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2202      	movs	r2, #2
 80091b6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80091ba:	e00a      	b.n	80091d2 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	3304      	adds	r3, #4
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0303 	and.w	r3, r3, #3
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d103      	bne.n	80091d2 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2200      	movs	r2, #0
 80091d6:	60da      	str	r2, [r3, #12]

  return 0;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b087      	sub	sp, #28
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	460b      	mov	r3, r1
 80091ec:	607a      	str	r2, [r7, #4]
 80091ee:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	32b0      	adds	r2, #176	@ 0xb0
 80091fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fe:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d102      	bne.n	800920c <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009206:	f04f 33ff 	mov.w	r3, #4294967295
 800920a:	e011      	b.n	8009230 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3304      	adds	r3, #4
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d104      	bne.n	8009220 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800921e:	e003      	b.n	8009228 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2200      	movs	r2, #0
 800922c:	60da      	str	r2, [r3, #12]

  return 0;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	460b      	mov	r3, r1
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	32b0      	adds	r2, #176	@ 0xb0
 8009254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009258:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	3326      	adds	r3, #38	@ 0x26
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4413      	add	r3, r2
 8009264:	3304      	adds	r3, #4
 8009266:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d102      	bne.n	8009274 <SCSI_Read10+0x38>
  {
    return -1;
 800926e:	f04f 33ff 	mov.w	r3, #4294967295
 8009272:	e089      	b.n	8009388 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	7a1b      	ldrb	r3, [r3, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d17b      	bne.n	8009374 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8009282:	b25b      	sxtb	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	db0a      	blt.n	800929e <SCSI_Read10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800928e:	2320      	movs	r3, #32
 8009290:	2205      	movs	r2, #5
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff ff05 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e074      	b.n	8009388 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d108      	bne.n	80092ba <SCSI_Read10+0x7e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80092a8:	7af9      	ldrb	r1, [r7, #11]
 80092aa:	233a      	movs	r3, #58	@ 0x3a
 80092ac:	2202      	movs	r2, #2
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f7ff fef7 	bl	80090a2 <SCSI_SenseCode>

      return -1;
 80092b4:	f04f 33ff 	mov.w	r3, #4294967295
 80092b8:	e066      	b.n	8009388 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	33b0      	adds	r3, #176	@ 0xb0
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4413      	add	r3, r2
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	7afa      	ldrb	r2, [r7, #11]
 80092ce:	4610      	mov	r0, r2
 80092d0:	4798      	blx	r3
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d008      	beq.n	80092ea <SCSI_Read10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80092d8:	7af9      	ldrb	r1, [r7, #11]
 80092da:	233a      	movs	r3, #58	@ 0x3a
 80092dc:	2202      	movs	r2, #2
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff fedf 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 80092e4:	f04f 33ff 	mov.w	r3, #4294967295
 80092e8:	e04e      	b.n	8009388 <SCSI_Read10+0x14c>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3302      	adds	r3, #2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	3303      	adds	r3, #3
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80092fa:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	3304      	adds	r3, #4
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8009304:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	3205      	adds	r2, #5
 800930a:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 800930c:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3307      	adds	r3, #7
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	3208      	adds	r2, #8
 800931e:	7812      	ldrb	r2, [r2, #0]
 8009320:	431a      	orrs	r2, r3
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	7af9      	ldrb	r1, [r7, #11]
 8009330:	68f8      	ldr	r0, [r7, #12]
 8009332:	f000 fb6d 	bl	8009a10 <SCSI_CheckAddressRange>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	da02      	bge.n	8009342 <SCSI_Read10+0x106>
    {
      return -1; /* error */
 800933c:	f04f 33ff 	mov.w	r3, #4294967295
 8009340:	e022      	b.n	8009388 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	6939      	ldr	r1, [r7, #16]
 800934e:	8809      	ldrh	r1, [r1, #0]
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	429a      	cmp	r2, r3
 8009356:	d00a      	beq.n	800936e <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800935e:	2320      	movs	r3, #32
 8009360:	2205      	movs	r2, #5
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f7ff fe9d 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 8009368:	f04f 33ff 	mov.w	r3, #4294967295
 800936c:	e00c      	b.n	8009388 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2202      	movs	r2, #2
 8009372:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800937a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	4619      	mov	r1, r3
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fb77 	bl	8009a74 <SCSI_ProcessRead>
 8009386:	4603      	mov	r3, r0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	460b      	mov	r3, r1
 800939a:	607a      	str	r2, [r7, #4]
 800939c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	32b0      	adds	r2, #176	@ 0xb0
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80093ae:	7afb      	ldrb	r3, [r7, #11]
 80093b0:	3326      	adds	r3, #38	@ 0x26
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	4413      	add	r3, r2
 80093b8:	3304      	adds	r3, #4
 80093ba:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d102      	bne.n	80093c8 <SCSI_Read12+0x38>
  {
    return -1;
 80093c2:	f04f 33ff 	mov.w	r3, #4294967295
 80093c6:	e094      	b.n	80094f2 <SCSI_Read12+0x162>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	7a1b      	ldrb	r3, [r3, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f040 8086 	bne.w	80094de <SCSI_Read12+0x14e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80093d8:	b25b      	sxtb	r3, r3
 80093da:	2b00      	cmp	r3, #0
 80093dc:	db0a      	blt.n	80093f4 <SCSI_Read12+0x64>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80093e4:	2320      	movs	r3, #32
 80093e6:	2205      	movs	r2, #5
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7ff fe5a 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 80093ee:	f04f 33ff 	mov.w	r3, #4294967295
 80093f2:	e07e      	b.n	80094f2 <SCSI_Read12+0x162>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d108      	bne.n	8009410 <SCSI_Read12+0x80>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80093fe:	7af9      	ldrb	r1, [r7, #11]
 8009400:	233a      	movs	r3, #58	@ 0x3a
 8009402:	2202      	movs	r2, #2
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff fe4c 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 800940a:	f04f 33ff 	mov.w	r3, #4294967295
 800940e:	e070      	b.n	80094f2 <SCSI_Read12+0x162>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	33b0      	adds	r3, #176	@ 0xb0
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	7afa      	ldrb	r2, [r7, #11]
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d008      	beq.n	8009440 <SCSI_Read12+0xb0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800942e:	7af9      	ldrb	r1, [r7, #11]
 8009430:	233a      	movs	r3, #58	@ 0x3a
 8009432:	2202      	movs	r2, #2
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff fe34 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 800943a:	f04f 33ff 	mov.w	r3, #4294967295
 800943e:	e058      	b.n	80094f2 <SCSI_Read12+0x162>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3302      	adds	r3, #2
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3303      	adds	r3, #3
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8009450:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3304      	adds	r3, #4
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 800945a:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	3205      	adds	r2, #5
 8009460:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 8009462:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	3306      	adds	r3, #6
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	3307      	adds	r3, #7
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8009478:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	3308      	adds	r3, #8
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 8009482:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	3209      	adds	r2, #9
 8009488:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 800948a:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	7af9      	ldrb	r1, [r7, #11]
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 fab8 	bl	8009a10 <SCSI_CheckAddressRange>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	da02      	bge.n	80094ac <SCSI_Read12+0x11c>
    {
      return -1; /* error */
 80094a6:	f04f 33ff 	mov.w	r3, #4294967295
 80094aa:	e022      	b.n	80094f2 <SCSI_Read12+0x162>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	6939      	ldr	r1, [r7, #16]
 80094b8:	8809      	ldrh	r1, [r1, #0]
 80094ba:	fb01 f303 	mul.w	r3, r1, r3
 80094be:	429a      	cmp	r2, r3
 80094c0:	d00a      	beq.n	80094d8 <SCSI_Read12+0x148>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80094c8:	2320      	movs	r3, #32
 80094ca:	2205      	movs	r2, #5
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fde8 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 80094d2:	f04f 33ff 	mov.w	r3, #4294967295
 80094d6:	e00c      	b.n	80094f2 <SCSI_Read12+0x162>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2202      	movs	r2, #2
 80094dc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094e4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	4619      	mov	r1, r3
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fac2 	bl	8009a74 <SCSI_ProcessRead>
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	460b      	mov	r3, r1
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	32b0      	adds	r2, #176	@ 0xb0
 8009514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009518:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	3326      	adds	r3, #38	@ 0x26
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	69fa      	ldr	r2, [r7, #28]
 8009522:	4413      	add	r3, r2
 8009524:	3304      	adds	r3, #4
 8009526:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8009528:	69fb      	ldr	r3, [r7, #28]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d102      	bne.n	8009534 <SCSI_Write10+0x38>
  {
    return -1;
 800952e:	f04f 33ff 	mov.w	r3, #4294967295
 8009532:	e0b4      	b.n	800969e <SCSI_Write10+0x1a2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	7a1b      	ldrb	r3, [r3, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f040 80aa 	bne.w	8009692 <SCSI_Write10+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800954e:	2320      	movs	r3, #32
 8009550:	2205      	movs	r2, #5
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f7ff fda5 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 8009558:	f04f 33ff 	mov.w	r3, #4294967295
 800955c:	e09f      	b.n	800969e <SCSI_Write10+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8009564:	b25b      	sxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	da0a      	bge.n	8009580 <SCSI_Write10+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009570:	2320      	movs	r3, #32
 8009572:	2205      	movs	r2, #5
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff fd94 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 800957a:	f04f 33ff 	mov.w	r3, #4294967295
 800957e:	e08e      	b.n	800969e <SCSI_Write10+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	33b0      	adds	r3, #176	@ 0xb0
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	7afa      	ldrb	r2, [r7, #11]
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d008      	beq.n	80095b0 <SCSI_Write10+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800959e:	7af9      	ldrb	r1, [r7, #11]
 80095a0:	233a      	movs	r3, #58	@ 0x3a
 80095a2:	2202      	movs	r2, #2
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7ff fd7c 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 80095aa:	f04f 33ff 	mov.w	r3, #4294967295
 80095ae:	e076      	b.n	800969e <SCSI_Write10+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	33b0      	adds	r3, #176	@ 0xb0
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	4413      	add	r3, r2
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	7afa      	ldrb	r2, [r7, #11]
 80095c4:	4610      	mov	r0, r2
 80095c6:	4798      	blx	r3
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d008      	beq.n	80095e0 <SCSI_Write10+0xe4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80095ce:	7af9      	ldrb	r1, [r7, #11]
 80095d0:	2327      	movs	r3, #39	@ 0x27
 80095d2:	2202      	movs	r2, #2
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff fd64 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 80095da:	f04f 33ff 	mov.w	r3, #4294967295
 80095de:	e05e      	b.n	800969e <SCSI_Write10+0x1a2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	3302      	adds	r3, #2
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3303      	adds	r3, #3
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80095f0:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	3304      	adds	r3, #4
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 80095fa:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	3205      	adds	r2, #5
 8009600:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 8009602:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3307      	adds	r3, #7
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	021b      	lsls	r3, r3, #8
                      (uint32_t)params[8];
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	3208      	adds	r2, #8
 8009614:	7812      	ldrb	r2, [r2, #0]
    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8009616:	431a      	orrs	r2, r3
 8009618:	69bb      	ldr	r3, [r7, #24]
 800961a:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	7af9      	ldrb	r1, [r7, #11]
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 f9f2 	bl	8009a10 <SCSI_CheckAddressRange>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	da02      	bge.n	8009638 <SCSI_Write10+0x13c>
    {
      return -1; /* error */
 8009632:	f04f 33ff 	mov.w	r3, #4294967295
 8009636:	e032      	b.n	800969e <SCSI_Write10+0x1a2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	8812      	ldrh	r2, [r2, #0]
 8009640:	fb02 f303 	mul.w	r3, r2, r3
 8009644:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	429a      	cmp	r2, r3
 8009650:	d00a      	beq.n	8009668 <SCSI_Write10+0x16c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009658:	2320      	movs	r3, #32
 800965a:	2205      	movs	r2, #5
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fd20 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 8009662:	f04f 33ff 	mov.w	r3, #4294967295
 8009666:	e01a      	b.n	800969e <SCSI_Write10+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800966e:	bf28      	it	cs
 8009670:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009674:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	2201      	movs	r2, #1
 800967a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800967c:	4b0a      	ldr	r3, [pc, #40]	@ (80096a8 <SCSI_Write10+0x1ac>)
 800967e:	7819      	ldrb	r1, [r3, #0]
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	f103 0210 	add.w	r2, r3, #16
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f006 f99c 	bl	800f9c6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800968e:	2300      	movs	r3, #0
 8009690:	e005      	b.n	800969e <SCSI_Write10+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8009692:	7afb      	ldrb	r3, [r7, #11]
 8009694:	4619      	mov	r1, r3
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fa6e 	bl	8009b78 <SCSI_ProcessWrite>
 800969c:	4603      	mov	r3, r0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3720      	adds	r7, #32
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000087 	.word	0x20000087

080096ac <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	460b      	mov	r3, r1
 80096b6:	607a      	str	r2, [r7, #4]
 80096b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	32b0      	adds	r2, #176	@ 0xb0
 80096c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c8:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80096ca:	7afb      	ldrb	r3, [r7, #11]
 80096cc:	3326      	adds	r3, #38	@ 0x26
 80096ce:	011b      	lsls	r3, r3, #4
 80096d0:	69fa      	ldr	r2, [r7, #28]
 80096d2:	4413      	add	r3, r2
 80096d4:	3304      	adds	r3, #4
 80096d6:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <SCSI_Write12+0x38>
  {
    return -1;
 80096de:	f04f 33ff 	mov.w	r3, #4294967295
 80096e2:	e0c4      	b.n	800986e <SCSI_Write12+0x1c2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	7a1b      	ldrb	r3, [r3, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f040 80ba 	bne.w	8009862 <SCSI_Write12+0x1b6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80096fe:	2320      	movs	r3, #32
 8009700:	2205      	movs	r2, #5
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff fccd 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 8009708:	f04f 33ff 	mov.w	r3, #4294967295
 800970c:	e0af      	b.n	800986e <SCSI_Write12+0x1c2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8009714:	b25b      	sxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	da0a      	bge.n	8009730 <SCSI_Write12+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009720:	2320      	movs	r3, #32
 8009722:	2205      	movs	r2, #5
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7ff fcbc 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 800972a:	f04f 33ff 	mov.w	r3, #4294967295
 800972e:	e09e      	b.n	800986e <SCSI_Write12+0x1c2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	33b0      	adds	r3, #176	@ 0xb0
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	7afa      	ldrb	r2, [r7, #11]
 8009744:	4610      	mov	r0, r2
 8009746:	4798      	blx	r3
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00b      	beq.n	8009766 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800974e:	7af9      	ldrb	r1, [r7, #11]
 8009750:	233a      	movs	r3, #58	@ 0x3a
 8009752:	2202      	movs	r2, #2
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7ff fca4 	bl	80090a2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	2205      	movs	r2, #5
 800975e:	721a      	strb	r2, [r3, #8]
      return -1;
 8009760:	f04f 33ff 	mov.w	r3, #4294967295
 8009764:	e083      	b.n	800986e <SCSI_Write12+0x1c2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	33b0      	adds	r3, #176	@ 0xb0
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	7afa      	ldrb	r2, [r7, #11]
 800977a:	4610      	mov	r0, r2
 800977c:	4798      	blx	r3
 800977e:	4603      	mov	r3, r0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00b      	beq.n	800979c <SCSI_Write12+0xf0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8009784:	7af9      	ldrb	r1, [r7, #11]
 8009786:	2327      	movs	r3, #39	@ 0x27
 8009788:	2202      	movs	r2, #2
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f7ff fc89 	bl	80090a2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	2205      	movs	r2, #5
 8009794:	721a      	strb	r2, [r3, #8]
      return -1;
 8009796:	f04f 33ff 	mov.w	r3, #4294967295
 800979a:	e068      	b.n	800986e <SCSI_Write12+0x1c2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3302      	adds	r3, #2
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	3303      	adds	r3, #3
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80097ac:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	3304      	adds	r3, #4
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 80097b6:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	3205      	adds	r2, #5
 80097bc:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 80097be:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3306      	adds	r3, #6
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3307      	adds	r3, #7
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80097d4:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3308      	adds	r3, #8
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 80097de:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	3209      	adds	r2, #9
 80097e4:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 80097e6:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	7af9      	ldrb	r1, [r7, #11]
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f90a 	bl	8009a10 <SCSI_CheckAddressRange>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da02      	bge.n	8009808 <SCSI_Write12+0x15c>
    {
      return -1; /* error */
 8009802:	f04f 33ff 	mov.w	r3, #4294967295
 8009806:	e032      	b.n	800986e <SCSI_Write12+0x1c2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	8812      	ldrh	r2, [r2, #0]
 8009810:	fb02 f303 	mul.w	r3, r2, r3
 8009814:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	429a      	cmp	r2, r3
 8009820:	d00a      	beq.n	8009838 <SCSI_Write12+0x18c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009828:	2320      	movs	r3, #32
 800982a:	2205      	movs	r2, #5
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff fc38 	bl	80090a2 <SCSI_SenseCode>
      return -1;
 8009832:	f04f 33ff 	mov.w	r3, #4294967295
 8009836:	e01a      	b.n	800986e <SCSI_Write12+0x1c2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800983e:	bf28      	it	cs
 8009840:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009844:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	2201      	movs	r2, #1
 800984a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 800984c:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <SCSI_Write12+0x1cc>)
 800984e:	7819      	ldrb	r1, [r3, #0]
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	f103 0210 	add.w	r2, r3, #16
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f006 f8b4 	bl	800f9c6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800985e:	2300      	movs	r3, #0
 8009860:	e005      	b.n	800986e <SCSI_Write12+0x1c2>
    return SCSI_ProcessWrite(pdev, lun);
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	4619      	mov	r1, r3
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 f986 	bl	8009b78 <SCSI_ProcessWrite>
 800986c:	4603      	mov	r3, r0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3720      	adds	r7, #32
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20000087 	.word	0x20000087

0800987c <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	460b      	mov	r3, r1
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	32b0      	adds	r2, #176	@ 0xb0
 8009894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009898:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 800989a:	7afb      	ldrb	r3, [r7, #11]
 800989c:	3326      	adds	r3, #38	@ 0x26
 800989e:	011b      	lsls	r3, r3, #4
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4413      	add	r3, r2
 80098a4:	3304      	adds	r3, #4
 80098a6:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d102      	bne.n	80098b4 <SCSI_Verify10+0x38>
  {
    return -1;
 80098ae:	f04f 33ff 	mov.w	r3, #4294967295
 80098b2:	e021      	b.n	80098f8 <SCSI_Verify10+0x7c>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	3301      	adds	r3, #1
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d008      	beq.n	80098d4 <SCSI_Verify10+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 80098c2:	7af9      	ldrb	r1, [r7, #11]
 80098c4:	2324      	movs	r3, #36	@ 0x24
 80098c6:	2205      	movs	r2, #5
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f7ff fbea 	bl	80090a2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295
 80098d2:	e011      	b.n	80098f8 <SCSI_Verify10+0x7c>
  }

  if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	689a      	ldr	r2, [r3, #8]
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	7af9      	ldrb	r1, [r7, #11]
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 f896 	bl	8009a10 <SCSI_CheckAddressRange>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da02      	bge.n	80098f0 <SCSI_Verify10+0x74>
  {
    return -1; /* error */
 80098ea:	f04f 33ff 	mov.w	r3, #4294967295
 80098ee:	e003      	b.n	80098f8 <SCSI_Verify10+0x7c>
  }

  hmsc->bot_data_length = 0U;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	2200      	movs	r2, #0
 80098f4:	60da      	str	r2, [r3, #12]

  return 0;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3718      	adds	r7, #24
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <SCSI_ReportLuns>:
  * @brief  SCSI_ReportLuns12
  *         Process ReportLuns command
  * @retval status
  */
static int8_t SCSI_ReportLuns(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
 8009906:	60f8      	str	r0, [r7, #12]
 8009908:	460b      	mov	r3, r1
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);

  /* Define the report LUNs buffer Each LUN entry is 8 bytes */
  static uint8_t lun_report[8U * (MSC_BOT_MAX_LUN + 1U)];

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	32b0      	adds	r2, #176	@ 0xb0
 8009918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d102      	bne.n	800992a <SCSI_ReportLuns+0x2a>
  {
    return -1;
 8009924:	f04f 33ff 	mov.w	r3, #4294967295
 8009928:	e039      	b.n	800999e <SCSI_ReportLuns+0x9e>
  }

  /* Initialize the report LUNs buffer */
  (void)USBD_memset(lun_report, 0, sizeof(lun_report));
 800992a:	2218      	movs	r2, #24
 800992c:	2100      	movs	r1, #0
 800992e:	481e      	ldr	r0, [pc, #120]	@ (80099a8 <SCSI_ReportLuns+0xa8>)
 8009930:	f006 f916 	bl	800fb60 <memset>

  /* Set the LUN list length in the first 4 bytes */
  lun_list_length = 8U * (hmsc->max_lun + 1U);
 8009934:	69bb      	ldr	r3, [r7, #24]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	3301      	adds	r3, #1
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	617b      	str	r3, [r7, #20]
  lun_report[0] = (uint8_t)(lun_list_length >> 24);
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	0e1b      	lsrs	r3, r3, #24
 8009942:	b2da      	uxtb	r2, r3
 8009944:	4b18      	ldr	r3, [pc, #96]	@ (80099a8 <SCSI_ReportLuns+0xa8>)
 8009946:	701a      	strb	r2, [r3, #0]
  lun_report[1] = (uint8_t)(lun_list_length >> 16);
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	0c1b      	lsrs	r3, r3, #16
 800994c:	b2da      	uxtb	r2, r3
 800994e:	4b16      	ldr	r3, [pc, #88]	@ (80099a8 <SCSI_ReportLuns+0xa8>)
 8009950:	705a      	strb	r2, [r3, #1]
  lun_report[2] = (uint8_t)(lun_list_length >> 8);
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	0a1b      	lsrs	r3, r3, #8
 8009956:	b2da      	uxtb	r2, r3
 8009958:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <SCSI_ReportLuns+0xa8>)
 800995a:	709a      	strb	r2, [r3, #2]
  lun_report[3] = (uint8_t)(lun_list_length & 0xFFU);
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	b2da      	uxtb	r2, r3
 8009960:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <SCSI_ReportLuns+0xa8>)
 8009962:	70da      	strb	r2, [r3, #3]

  /* Update the LUN list */
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8009964:	2300      	movs	r3, #0
 8009966:	77fb      	strb	r3, [r7, #31]
 8009968:	e009      	b.n	800997e <SCSI_ReportLuns+0x7e>
  {
    /* LUN identifier is placed at the second byte of each 8-byte entry */
    lun_report[(8U * (lun_idx + 1U)) + 1U] = lun_idx;
 800996a:	7ffb      	ldrb	r3, [r7, #31]
 800996c:	3301      	adds	r3, #1
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	3301      	adds	r3, #1
 8009972:	490d      	ldr	r1, [pc, #52]	@ (80099a8 <SCSI_ReportLuns+0xa8>)
 8009974:	7ffa      	ldrb	r2, [r7, #31]
 8009976:	54ca      	strb	r2, [r1, r3]
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8009978:	7ffb      	ldrb	r3, [r7, #31]
 800997a:	3301      	adds	r3, #1
 800997c:	77fb      	strb	r3, [r7, #31]
 800997e:	7ffa      	ldrb	r2, [r7, #31]
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	429a      	cmp	r2, r3
 8009986:	d9f0      	bls.n	800996a <SCSI_ReportLuns+0x6a>
  }

  /* Calculate the total length of the report LUNs buffer */
  total_length = lun_list_length + 8U;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	3308      	adds	r3, #8
 800998c:	613b      	str	r3, [r7, #16]

  /* Update the BOT data with the report LUNs buffer */
  (void)SCSI_UpdateBotData(hmsc, lun_report, (uint16_t)total_length);
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	b29b      	uxth	r3, r3
 8009992:	461a      	mov	r2, r3
 8009994:	4904      	ldr	r1, [pc, #16]	@ (80099a8 <SCSI_ReportLuns+0xa8>)
 8009996:	69b8      	ldr	r0, [r7, #24]
 8009998:	f000 f97e 	bl	8009c98 <SCSI_UpdateBotData>

  return 0;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3720      	adds	r7, #32
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20003ed4 	.word	0x20003ed4

080099ac <SCSI_ReceiveDiagnosticResults>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReceiveDiagnosticResults(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	460b      	mov	r3, r1
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	32b0      	adds	r2, #176	@ 0xb0
 80099c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c8:	613b      	str	r3, [r7, #16]
  uint16_t allocation_length;

  /* Extract the allocation length from the CDB */
  allocation_length = (((uint16_t)params[3] << 8) | (uint16_t)params[4]);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3303      	adds	r3, #3
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	021b      	lsls	r3, r3, #8
 80099d2:	b21a      	sxth	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3304      	adds	r3, #4
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	b21b      	sxth	r3, r3
 80099dc:	4313      	orrs	r3, r2
 80099de:	b21b      	sxth	r3, r3
 80099e0:	82fb      	strh	r3, [r7, #22]

  if (allocation_length == 0U)
 80099e2:	8afb      	ldrh	r3, [r7, #22]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d101      	bne.n	80099ec <SCSI_ReceiveDiagnosticResults+0x40>
  {
    return 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	e00b      	b.n	8009a04 <SCSI_ReceiveDiagnosticResults+0x58>
  }

  /* Ensure the allocation length does not exceed the diagnostic data length */
  if (allocation_length > DIAGNOSTIC_DATA_LEN)
 80099ec:	8afb      	ldrh	r3, [r7, #22]
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d901      	bls.n	80099f6 <SCSI_ReceiveDiagnosticResults+0x4a>
  {
    allocation_length = DIAGNOSTIC_DATA_LEN;
 80099f2:	2308      	movs	r3, #8
 80099f4:	82fb      	strh	r3, [r7, #22]
  }

  /* Send the diagnostic data to the host */
  (void)SCSI_UpdateBotData(hmsc, MSC_Diagnostic_Data, allocation_length);
 80099f6:	8afb      	ldrh	r3, [r7, #22]
 80099f8:	461a      	mov	r2, r3
 80099fa:	4904      	ldr	r1, [pc, #16]	@ (8009a0c <SCSI_ReceiveDiagnosticResults+0x60>)
 80099fc:	6938      	ldr	r0, [r7, #16]
 80099fe:	f000 f94b 	bl	8009c98 <SCSI_UpdateBotData>

  return 0;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	20003ecc 	.word	0x20003ecc

08009a10 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	32b0      	adds	r2, #176	@ 0xb0
 8009a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2e:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	3326      	adds	r3, #38	@ 0x26
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	3304      	adds	r3, #4
 8009a3c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <SCSI_CheckAddressRange+0x3a>
  {
    return -1;
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295
 8009a48:	e010      	b.n	8009a6c <SCSI_CheckAddressRange+0x5c>
  }

  if ((blk_offset + blk_nbr) > p_scsi_blk->nbr)
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	441a      	add	r2, r3
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d908      	bls.n	8009a6a <SCSI_CheckAddressRange+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8009a58:	7af9      	ldrb	r1, [r7, #11]
 8009a5a:	2321      	movs	r3, #33	@ 0x21
 8009a5c:	2205      	movs	r2, #5
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff fb1f 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8009a64:	f04f 33ff 	mov.w	r3, #4294967295
 8009a68:	e000      	b.n	8009a6c <SCSI_CheckAddressRange+0x5c>
  }

  return 0;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009a74:	b590      	push	{r4, r7, lr}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32b0      	adds	r2, #176	@ 0xb0
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	3326      	adds	r3, #38	@ 0x26
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4413      	add	r3, r2
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <SCSI_ProcessRead+0x36>
  {
    return -1;
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa8:	e05f      	b.n	8009b6a <SCSI_ProcessRead+0xf6>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	8812      	ldrh	r2, [r2, #0]
 8009ab2:	fb02 f303 	mul.w	r3, r2, r3
 8009ab6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009abe:	bf28      	it	cs
 8009ac0:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009ac4:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	33b0      	adds	r3, #176	@ 0xb0
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4413      	add	r3, r2
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	691c      	ldr	r4, [r3, #16]
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f103 0110 	add.w	r1, r3, #16
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	689a      	ldr	r2, [r3, #8]
                                                                    p_scsi_blk->addr,
                                                                    (len / p_scsi_blk->size)) < 0)
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	78f8      	ldrb	r0, [r7, #3]
 8009af2:	47a0      	blx	r4
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	da08      	bge.n	8009b0c <SCSI_ProcessRead+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009afa:	78f9      	ldrb	r1, [r7, #3]
 8009afc:	2311      	movs	r3, #17
 8009afe:	2204      	movs	r2, #4
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff face 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8009b06:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0a:	e02e      	b.n	8009b6a <SCSI_ProcessRead+0xf6>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8009b0c:	4b19      	ldr	r3, [pc, #100]	@ (8009b74 <SCSI_ProcessRead+0x100>)
 8009b0e:	7819      	ldrb	r1, [r3, #0]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f103 0210 	add.w	r2, r3, #16
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f005 ff33 	bl	800f984 <USBD_LL_Transmit>

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	689a      	ldr	r2, [r3, #8]
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	881b      	ldrh	r3, [r3, #0]
 8009b26:	4619      	mov	r1, r3
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b2e:	441a      	add	r2, r3
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	68da      	ldr	r2, [r3, #12]
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b44:	1ad2      	subs	r2, r2, r3
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	60da      	str	r2, [r3, #12]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	1ad2      	subs	r2, r2, r3
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d102      	bne.n	8009b68 <SCSI_ProcessRead+0xf4>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2203      	movs	r2, #3
 8009b66:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd90      	pop	{r4, r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000086 	.word	0x20000086

08009b78 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009b78:	b590      	push	{r4, r7, lr}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	460b      	mov	r3, r1
 8009b82:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	32b0      	adds	r2, #176	@ 0xb0
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009b94:	78fb      	ldrb	r3, [r7, #3]
 8009b96:	3326      	adds	r3, #38	@ 0x26
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3304      	adds	r3, #4
 8009ba0:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d102      	bne.n	8009bae <SCSI_ProcessWrite+0x36>
  {
    return -1;
 8009ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bac:	e06d      	b.n	8009c8a <SCSI_ProcessWrite+0x112>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	8812      	ldrh	r2, [r2, #0]
 8009bb6:	fb02 f303 	mul.w	r3, r2, r3
 8009bba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bc2:	bf28      	it	cs
 8009bc4:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009bc8:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	33b0      	adds	r3, #176	@ 0xb0
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	695c      	ldr	r4, [r3, #20]
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f103 0110 	add.w	r1, r3, #16
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	689a      	ldr	r2, [r3, #8]
                                                                     (len / p_scsi_blk->size)) < 0)
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	4618      	mov	r0, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	78f8      	ldrb	r0, [r7, #3]
 8009bf6:	47a0      	blx	r4
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	da08      	bge.n	8009c10 <SCSI_ProcessWrite+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009bfe:	78f9      	ldrb	r1, [r7, #3]
 8009c00:	2303      	movs	r3, #3
 8009c02:	2204      	movs	r2, #4
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fa4c 	bl	80090a2 <SCSI_SenseCode>
    return -1;
 8009c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c0e:	e03c      	b.n	8009c8a <SCSI_ProcessWrite+0x112>
  }

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	689a      	ldr	r2, [r3, #8]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c20:	441a      	add	r2, r3
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	68da      	ldr	r2, [r3, #12]
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c36:	1ad2      	subs	r2, r2, r3
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	60da      	str	r2, [r3, #12]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	1ad2      	subs	r2, r2, r3
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d104      	bne.n	8009c5e <SCSI_ProcessWrite+0xe6>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009c54:	2100      	movs	r1, #0
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7fe fc26 	bl	80084a8 <MSC_BOT_SendCSW>
 8009c5c:	e014      	b.n	8009c88 <SCSI_ProcessWrite+0x110>
  }
  else
  {
    len = MIN((p_scsi_blk->len * p_scsi_blk->size), MSC_MEDIA_PACKET);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	8812      	ldrh	r2, [r2, #0]
 8009c66:	fb02 f303 	mul.w	r3, r2, r3
 8009c6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c6e:	bf28      	it	cs
 8009c70:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009c74:	60fb      	str	r3, [r7, #12]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009c76:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <SCSI_ProcessWrite+0x11c>)
 8009c78:	7819      	ldrb	r1, [r3, #0]
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f103 0210 	add.w	r2, r3, #16
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f005 fe9f 	bl	800f9c6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd90      	pop	{r4, r7, pc}
 8009c92:	bf00      	nop
 8009c94:	20000087 	.word	0x20000087

08009c98 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8009cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb4:	e013      	b.n	8009cde <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8009cb6:	8afa      	ldrh	r2, [r7, #22]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8009cbc:	e00b      	b.n	8009cd6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8009cbe:	8afb      	ldrh	r3, [r7, #22]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8009cc4:	8afb      	ldrh	r3, [r7, #22]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	441a      	add	r2, r3
 8009cca:	8afb      	ldrh	r3, [r7, #22]
 8009ccc:	7811      	ldrb	r1, [r2, #0]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	460a      	mov	r2, r1
 8009cd4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8009cd6:	8afb      	ldrh	r3, [r7, #22]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f0      	bne.n	8009cbe <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b086      	sub	sp, #24
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	60f8      	str	r0, [r7, #12]
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d101      	bne.n	8009d02 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e01f      	b.n	8009d42 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	79fa      	ldrb	r2, [r7, #7]
 8009d34:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f005 fcd0 	bl	800f6dc <USBD_LL_Init>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b084      	sub	sp, #16
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e025      	b.n	8009dae <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	32ae      	adds	r2, #174	@ 0xae
 8009d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00f      	beq.n	8009d9e <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	32ae      	adds	r2, #174	@ 0xae
 8009d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d8e:	f107 020e 	add.w	r2, r7, #14
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
 8009d96:	4602      	mov	r2, r0
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}

08009db6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009db6:	b580      	push	{r7, lr}
 8009db8:	b082      	sub	sp, #8
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f005 fcd8 	bl	800f774 <USBD_LL_Start>
 8009dc4:	4603      	mov	r3, r0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}

08009dce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dd6:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d009      	beq.n	8009e12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	78fa      	ldrb	r2, [r7, #3]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	4798      	blx	r3
 8009e0e:	4603      	mov	r3, r0
 8009e10:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	78fa      	ldrb	r2, [r7, #3]
 8009e36:	4611      	mov	r1, r2
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	4798      	blx	r3
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e42:	2303      	movs	r3, #3
 8009e44:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e60:	6839      	ldr	r1, [r7, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f001 f921 	bl	800b0aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009e76:	461a      	mov	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e84:	f003 031f 	and.w	r3, r3, #31
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d01a      	beq.n	8009ec2 <USBD_LL_SetupStage+0x72>
 8009e8c:	2b02      	cmp	r3, #2
 8009e8e:	d822      	bhi.n	8009ed6 <USBD_LL_SetupStage+0x86>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d002      	beq.n	8009e9a <USBD_LL_SetupStage+0x4a>
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d00a      	beq.n	8009eae <USBD_LL_SetupStage+0x5e>
 8009e98:	e01d      	b.n	8009ed6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fb76 	bl	800a594 <USBD_StdDevReq>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	73fb      	strb	r3, [r7, #15]
      break;
 8009eac:	e020      	b.n	8009ef0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fbde 	bl	800a678 <USBD_StdItfReq>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec0:	e016      	b.n	8009ef0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 fc40 	bl	800a750 <USBD_StdEPReq>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed4:	e00c      	b.n	8009ef0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009edc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f005 fcc4 	bl	800f872 <USBD_LL_StallEP>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73fb      	strb	r3, [r7, #15]
      break;
 8009eee:	bf00      	nop
  }

  return ret;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b086      	sub	sp, #24
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	460b      	mov	r3, r1
 8009f04:	607a      	str	r2, [r7, #4]
 8009f06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009f0c:	7afb      	ldrb	r3, [r7, #11]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d177      	bne.n	800a002 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009f18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	f040 80a1 	bne.w	800a068 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	8992      	ldrh	r2, [r2, #12]
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d91c      	bls.n	8009f6c <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	8992      	ldrh	r2, [r2, #12]
 8009f3a:	1a9a      	subs	r2, r3, r2
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	8992      	ldrh	r2, [r2, #12]
 8009f48:	441a      	add	r2, r3
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	6919      	ldr	r1, [r3, #16]
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	899b      	ldrh	r3, [r3, #12]
 8009f56:	461a      	mov	r2, r3
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	bf38      	it	cc
 8009f60:	4613      	movcc	r3, r2
 8009f62:	461a      	mov	r2, r3
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f001 f986 	bl	800b276 <USBD_CtlContinueRx>
 8009f6a:	e07d      	b.n	800a068 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f72:	f003 031f 	and.w	r3, r3, #31
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	d014      	beq.n	8009fa4 <USBD_LL_DataOutStage+0xaa>
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d81d      	bhi.n	8009fba <USBD_LL_DataOutStage+0xc0>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <USBD_LL_DataOutStage+0x8e>
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d003      	beq.n	8009f8e <USBD_LL_DataOutStage+0x94>
 8009f86:	e018      	b.n	8009fba <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	75bb      	strb	r3, [r7, #22]
            break;
 8009f8c:	e018      	b.n	8009fc0 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	4619      	mov	r1, r3
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 fa6e 	bl	800a47a <USBD_CoreFindIF>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	75bb      	strb	r3, [r7, #22]
            break;
 8009fa2:	e00d      	b.n	8009fc0 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	4619      	mov	r1, r3
 8009fae:	68f8      	ldr	r0, [r7, #12]
 8009fb0:	f000 fa70 	bl	800a494 <USBD_CoreFindEP>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	75bb      	strb	r3, [r7, #22]
            break;
 8009fb8:	e002      	b.n	8009fc0 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75bb      	strb	r3, [r7, #22]
            break;
 8009fbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009fc0:	7dbb      	ldrb	r3, [r7, #22]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d119      	bne.n	8009ffa <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d113      	bne.n	8009ffa <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009fd2:	7dba      	ldrb	r2, [r7, #22]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	32ae      	adds	r2, #174	@ 0xae
 8009fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00b      	beq.n	8009ffa <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8009fe2:	7dba      	ldrb	r2, [r7, #22]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009fea:	7dba      	ldrb	r2, [r7, #22]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	32ae      	adds	r2, #174	@ 0xae
 8009ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f001 f94c 	bl	800b298 <USBD_CtlSendStatus>
 800a000:	e032      	b.n	800a068 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	4619      	mov	r1, r3
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 fa41 	bl	800a494 <USBD_CoreFindEP>
 800a012:	4603      	mov	r3, r0
 800a014:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a016:	7dbb      	ldrb	r3, [r7, #22]
 800a018:	2bff      	cmp	r3, #255	@ 0xff
 800a01a:	d025      	beq.n	800a068 <USBD_LL_DataOutStage+0x16e>
 800a01c:	7dbb      	ldrb	r3, [r7, #22]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d122      	bne.n	800a068 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	d117      	bne.n	800a05e <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a02e:	7dba      	ldrb	r2, [r7, #22]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	32ae      	adds	r2, #174	@ 0xae
 800a034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00f      	beq.n	800a05e <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a03e:	7dba      	ldrb	r2, [r7, #22]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a046:	7dba      	ldrb	r2, [r7, #22]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	32ae      	adds	r2, #174	@ 0xae
 800a04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	7afa      	ldrb	r2, [r7, #11]
 800a054:	4611      	mov	r1, r2
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	4798      	blx	r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a05e:	7dfb      	ldrb	r3, [r7, #23]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a064:	7dfb      	ldrb	r3, [r7, #23]
 800a066:	e000      	b.n	800a06a <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	460b      	mov	r3, r1
 800a07c:	607a      	str	r2, [r7, #4]
 800a07e:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a080:	7afb      	ldrb	r3, [r7, #11]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d178      	bne.n	800a178 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	3314      	adds	r3, #20
 800a08a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a092:	2b02      	cmp	r3, #2
 800a094:	d163      	bne.n	800a15e <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	8992      	ldrh	r2, [r2, #12]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d91c      	bls.n	800a0dc <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	8992      	ldrh	r2, [r2, #12]
 800a0aa:	1a9a      	subs	r2, r3, r2
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	8992      	ldrh	r2, [r2, #12]
 800a0b8:	441a      	add	r2, r3
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6919      	ldr	r1, [r3, #16]
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f001 f8c3 	bl	800b254 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f005 fc76 	bl	800f9c6 <USBD_LL_PrepareReceive>
 800a0da:	e040      	b.n	800a15e <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	899b      	ldrh	r3, [r3, #12]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d11c      	bne.n	800a124 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d316      	bcc.n	800a124 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a100:	429a      	cmp	r2, r3
 800a102:	d20f      	bcs.n	800a124 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f001 f8a3 	bl	800b254 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a116:	2300      	movs	r3, #0
 800a118:	2200      	movs	r2, #0
 800a11a:	2100      	movs	r1, #0
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f005 fc52 	bl	800f9c6 <USBD_LL_PrepareReceive>
 800a122:	e01c      	b.n	800a15e <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d10f      	bne.n	800a150 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d009      	beq.n	800a150 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a150:	2180      	movs	r1, #128	@ 0x80
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f005 fb8d 	bl	800f872 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f001 f8b0 	bl	800b2be <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d03a      	beq.n	800a1de <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f7ff fe30 	bl	8009dce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a176:	e032      	b.n	800a1de <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a178:	7afb      	ldrb	r3, [r7, #11]
 800a17a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	4619      	mov	r1, r3
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 f986 	bl	800a494 <USBD_CoreFindEP>
 800a188:	4603      	mov	r3, r0
 800a18a:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a18c:	7dfb      	ldrb	r3, [r7, #23]
 800a18e:	2bff      	cmp	r3, #255	@ 0xff
 800a190:	d025      	beq.n	800a1de <USBD_LL_DataInStage+0x16c>
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d122      	bne.n	800a1de <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d11c      	bne.n	800a1de <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1a4:	7dfa      	ldrb	r2, [r7, #23]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	32ae      	adds	r2, #174	@ 0xae
 800a1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d014      	beq.n	800a1de <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a1b4:	7dfa      	ldrb	r2, [r7, #23]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a1bc:	7dfa      	ldrb	r2, [r7, #23]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	32ae      	adds	r2, #174	@ 0xae
 800a1c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	7afa      	ldrb	r2, [r7, #11]
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	4798      	blx	r3
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a1d4:	7dbb      	ldrb	r3, [r7, #22]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a1da:	7dbb      	ldrb	r3, [r7, #22]
 800a1dc:	e000      	b.n	800a1e0 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3718      	adds	r7, #24
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a220:	2b00      	cmp	r3, #0
 800a222:	d014      	beq.n	800a24e <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00e      	beq.n	800a24e <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	6852      	ldr	r2, [r2, #4]
 800a23c:	b2d2      	uxtb	r2, r2
 800a23e:	4611      	mov	r1, r2
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	4798      	blx	r3
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a24a:	2303      	movs	r3, #3
 800a24c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a24e:	2340      	movs	r3, #64	@ 0x40
 800a250:	2200      	movs	r2, #0
 800a252:	2100      	movs	r1, #0
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f005 faa8 	bl	800f7aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2240      	movs	r2, #64	@ 0x40
 800a266:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a26a:	2340      	movs	r3, #64	@ 0x40
 800a26c:	2200      	movs	r2, #0
 800a26e:	2180      	movs	r1, #128	@ 0x80
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f005 fa9a 	bl	800f7aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2240      	movs	r2, #64	@ 0x40
 800a282:	841a      	strh	r2, [r3, #32]

  return ret;
 800a284:	7bfb      	ldrb	r3, [r7, #15]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	460b      	mov	r3, r1
 800a298:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	78fa      	ldrb	r2, [r7, #3]
 800a29e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	370c      	adds	r7, #12
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b083      	sub	sp, #12
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	d006      	beq.n	800a2d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2204      	movs	r2, #4
 800a2d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b04      	cmp	r3, #4
 800a2f8:	d106      	bne.n	800a308 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a300:	b2da      	uxtb	r2, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b082      	sub	sp, #8
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b03      	cmp	r3, #3
 800a328:	d110      	bne.n	800a34c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00b      	beq.n	800a34c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a33a:	69db      	ldr	r3, [r3, #28]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d005      	beq.n	800a34c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b082      	sub	sp, #8
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	32ae      	adds	r2, #174	@ 0xae
 800a36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a374:	2303      	movs	r3, #3
 800a376:	e01c      	b.n	800a3b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b03      	cmp	r3, #3
 800a382:	d115      	bne.n	800a3b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	32ae      	adds	r2, #174	@ 0xae
 800a38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00b      	beq.n	800a3b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	32ae      	adds	r2, #174	@ 0xae
 800a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	78fa      	ldrb	r2, [r7, #3]
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3b0:	2300      	movs	r3, #0
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	32ae      	adds	r2, #174	@ 0xae
 800a3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e01c      	b.n	800a416 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d115      	bne.n	800a414 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	32ae      	adds	r2, #174	@ 0xae
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	32ae      	adds	r2, #174	@ 0xae
 800a406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	78fa      	ldrb	r2, [r7, #3]
 800a40e:	4611      	mov	r1, r2
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a41e:	b480      	push	{r7}
 800a420:	b083      	sub	sp, #12
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00e      	beq.n	800a470 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	6852      	ldr	r2, [r2, #4]
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	4611      	mov	r1, r2
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	4798      	blx	r3
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d001      	beq.n	800a470 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a46c:	2303      	movs	r3, #3
 800a46e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a470:	7bfb      	ldrb	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	460b      	mov	r3, r1
 800a484:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a486:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a488:	4618      	mov	r0, r3
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr

0800a4ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b086      	sub	sp, #24
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	885b      	ldrh	r3, [r3, #2]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	7812      	ldrb	r2, [r2, #0]
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d91f      	bls.n	800a514 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a4da:	e013      	b.n	800a504 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a4dc:	f107 030a 	add.w	r3, r7, #10
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6978      	ldr	r0, [r7, #20]
 800a4e4:	f000 f81b 	bl	800a51e <USBD_GetNextDesc>
 800a4e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	785b      	ldrb	r3, [r3, #1]
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	d108      	bne.n	800a504 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	789b      	ldrb	r3, [r3, #2]
 800a4fa:	78fa      	ldrb	r2, [r7, #3]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d008      	beq.n	800a512 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a500:	2300      	movs	r3, #0
 800a502:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	885b      	ldrh	r3, [r3, #2]
 800a508:	b29a      	uxth	r2, r3
 800a50a:	897b      	ldrh	r3, [r7, #10]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d8e5      	bhi.n	800a4dc <USBD_GetEpDesc+0x2e>
 800a510:	e000      	b.n	800a514 <USBD_GetEpDesc+0x66>
          break;
 800a512:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a514:	693b      	ldr	r3, [r7, #16]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3718      	adds	r7, #24
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a51e:	b480      	push	{r7}
 800a520:	b085      	sub	sp, #20
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	7812      	ldrb	r2, [r2, #0]
 800a534:	4413      	add	r3, r2
 800a536:	b29a      	uxth	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4413      	add	r3, r2
 800a546:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a548:	68fb      	ldr	r3, [r7, #12]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a556:	b480      	push	{r7}
 800a558:	b087      	sub	sp, #28
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	3301      	adds	r3, #1
 800a56c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a574:	8a3b      	ldrh	r3, [r7, #16]
 800a576:	021b      	lsls	r3, r3, #8
 800a578:	b21a      	sxth	r2, r3
 800a57a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a57e:	4313      	orrs	r3, r2
 800a580:	b21b      	sxth	r3, r3
 800a582:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a584:	89fb      	ldrh	r3, [r7, #14]
}
 800a586:	4618      	mov	r0, r3
 800a588:	371c      	adds	r7, #28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
	...

0800a594 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5aa:	2b40      	cmp	r3, #64	@ 0x40
 800a5ac:	d005      	beq.n	800a5ba <USBD_StdDevReq+0x26>
 800a5ae:	2b40      	cmp	r3, #64	@ 0x40
 800a5b0:	d857      	bhi.n	800a662 <USBD_StdDevReq+0xce>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00f      	beq.n	800a5d6 <USBD_StdDevReq+0x42>
 800a5b6:	2b20      	cmp	r3, #32
 800a5b8:	d153      	bne.n	800a662 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	32ae      	adds	r2, #174	@ 0xae
 800a5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	6839      	ldr	r1, [r7, #0]
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	4798      	blx	r3
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d4:	e04a      	b.n	800a66c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	785b      	ldrb	r3, [r3, #1]
 800a5da:	2b09      	cmp	r3, #9
 800a5dc:	d83b      	bhi.n	800a656 <USBD_StdDevReq+0xc2>
 800a5de:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e4 <USBD_StdDevReq+0x50>)
 800a5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e4:	0800a639 	.word	0x0800a639
 800a5e8:	0800a64d 	.word	0x0800a64d
 800a5ec:	0800a657 	.word	0x0800a657
 800a5f0:	0800a643 	.word	0x0800a643
 800a5f4:	0800a657 	.word	0x0800a657
 800a5f8:	0800a617 	.word	0x0800a617
 800a5fc:	0800a60d 	.word	0x0800a60d
 800a600:	0800a657 	.word	0x0800a657
 800a604:	0800a62f 	.word	0x0800a62f
 800a608:	0800a621 	.word	0x0800a621
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fa3e 	bl	800aa90 <USBD_GetDescriptor>
          break;
 800a614:	e024      	b.n	800a660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fba3 	bl	800ad64 <USBD_SetAddress>
          break;
 800a61e:	e01f      	b.n	800a660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a620:	6839      	ldr	r1, [r7, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fbe2 	bl	800adec <USBD_SetConfig>
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
          break;
 800a62c:	e018      	b.n	800a660 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fc85 	bl	800af40 <USBD_GetConfig>
          break;
 800a636:	e013      	b.n	800a660 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fcb6 	bl	800afac <USBD_GetStatus>
          break;
 800a640:	e00e      	b.n	800a660 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fce5 	bl	800b014 <USBD_SetFeature>
          break;
 800a64a:	e009      	b.n	800a660 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fd09 	bl	800b066 <USBD_ClrFeature>
          break;
 800a654:	e004      	b.n	800a660 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fd60 	bl	800b11e <USBD_CtlError>
          break;
 800a65e:	bf00      	nop
      }
      break;
 800a660:	e004      	b.n	800a66c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fd5a 	bl	800b11e <USBD_CtlError>
      break;
 800a66a:	bf00      	nop
  }

  return ret;
 800a66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop

0800a678 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a68e:	2b40      	cmp	r3, #64	@ 0x40
 800a690:	d005      	beq.n	800a69e <USBD_StdItfReq+0x26>
 800a692:	2b40      	cmp	r3, #64	@ 0x40
 800a694:	d852      	bhi.n	800a73c <USBD_StdItfReq+0xc4>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <USBD_StdItfReq+0x26>
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	d14e      	bne.n	800a73c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d840      	bhi.n	800a72e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	889b      	ldrh	r3, [r3, #4]
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d836      	bhi.n	800a724 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	889b      	ldrh	r3, [r3, #4]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff fedb 	bl	800a47a <USBD_CoreFindIF>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6c8:	7bbb      	ldrb	r3, [r7, #14]
 800a6ca:	2bff      	cmp	r3, #255	@ 0xff
 800a6cc:	d01d      	beq.n	800a70a <USBD_StdItfReq+0x92>
 800a6ce:	7bbb      	ldrb	r3, [r7, #14]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d11a      	bne.n	800a70a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a6d4:	7bba      	ldrb	r2, [r7, #14]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	32ae      	adds	r2, #174	@ 0xae
 800a6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00f      	beq.n	800a704 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a6e4:	7bba      	ldrb	r2, [r7, #14]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a6ec:	7bba      	ldrb	r2, [r7, #14]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	32ae      	adds	r2, #174	@ 0xae
 800a6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	6839      	ldr	r1, [r7, #0]
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	4798      	blx	r3
 800a6fe:	4603      	mov	r3, r0
 800a700:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a702:	e004      	b.n	800a70e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a704:	2303      	movs	r3, #3
 800a706:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a708:	e001      	b.n	800a70e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a70a:	2303      	movs	r3, #3
 800a70c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	88db      	ldrh	r3, [r3, #6]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d110      	bne.n	800a738 <USBD_StdItfReq+0xc0>
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d10d      	bne.n	800a738 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f000 fdbb 	bl	800b298 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a722:	e009      	b.n	800a738 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 fcf9 	bl	800b11e <USBD_CtlError>
          break;
 800a72c:	e004      	b.n	800a738 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fcf4 	bl	800b11e <USBD_CtlError>
          break;
 800a736:	e000      	b.n	800a73a <USBD_StdItfReq+0xc2>
          break;
 800a738:	bf00      	nop
      }
      break;
 800a73a:	e004      	b.n	800a746 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a73c:	6839      	ldr	r1, [r7, #0]
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fced 	bl	800b11e <USBD_CtlError>
      break;
 800a744:	bf00      	nop
  }

  return ret;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	889b      	ldrh	r3, [r3, #4]
 800a762:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a76c:	2b40      	cmp	r3, #64	@ 0x40
 800a76e:	d007      	beq.n	800a780 <USBD_StdEPReq+0x30>
 800a770:	2b40      	cmp	r3, #64	@ 0x40
 800a772:	f200 8181 	bhi.w	800aa78 <USBD_StdEPReq+0x328>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d02a      	beq.n	800a7d0 <USBD_StdEPReq+0x80>
 800a77a:	2b20      	cmp	r3, #32
 800a77c:	f040 817c 	bne.w	800aa78 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a780:	7bbb      	ldrb	r3, [r7, #14]
 800a782:	4619      	mov	r1, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7ff fe85 	bl	800a494 <USBD_CoreFindEP>
 800a78a:	4603      	mov	r3, r0
 800a78c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a78e:	7b7b      	ldrb	r3, [r7, #13]
 800a790:	2bff      	cmp	r3, #255	@ 0xff
 800a792:	f000 8176 	beq.w	800aa82 <USBD_StdEPReq+0x332>
 800a796:	7b7b      	ldrb	r3, [r7, #13]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 8172 	bne.w	800aa82 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800a79e:	7b7a      	ldrb	r2, [r7, #13]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7a6:	7b7a      	ldrb	r2, [r7, #13]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	32ae      	adds	r2, #174	@ 0xae
 800a7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 8165 	beq.w	800aa82 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a7b8:	7b7a      	ldrb	r2, [r7, #13]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	32ae      	adds	r2, #174	@ 0xae
 800a7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	6839      	ldr	r1, [r7, #0]
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	4798      	blx	r3
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7ce:	e158      	b.n	800aa82 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d008      	beq.n	800a7ea <USBD_StdEPReq+0x9a>
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	f300 8147 	bgt.w	800aa6c <USBD_StdEPReq+0x31c>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	f000 809b 	beq.w	800a91a <USBD_StdEPReq+0x1ca>
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d03c      	beq.n	800a862 <USBD_StdEPReq+0x112>
 800a7e8:	e140      	b.n	800aa6c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	d002      	beq.n	800a7fc <USBD_StdEPReq+0xac>
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d016      	beq.n	800a828 <USBD_StdEPReq+0xd8>
 800a7fa:	e02c      	b.n	800a856 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00d      	beq.n	800a81e <USBD_StdEPReq+0xce>
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b80      	cmp	r3, #128	@ 0x80
 800a806:	d00a      	beq.n	800a81e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	4619      	mov	r1, r3
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f005 f830 	bl	800f872 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a812:	2180      	movs	r1, #128	@ 0x80
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f005 f82c 	bl	800f872 <USBD_LL_StallEP>
 800a81a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a81c:	e020      	b.n	800a860 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a81e:	6839      	ldr	r1, [r7, #0]
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fc7c 	bl	800b11e <USBD_CtlError>
              break;
 800a826:	e01b      	b.n	800a860 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	885b      	ldrh	r3, [r3, #2]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10e      	bne.n	800a84e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a830:	7bbb      	ldrb	r3, [r7, #14]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00b      	beq.n	800a84e <USBD_StdEPReq+0xfe>
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	2b80      	cmp	r3, #128	@ 0x80
 800a83a:	d008      	beq.n	800a84e <USBD_StdEPReq+0xfe>
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	88db      	ldrh	r3, [r3, #6]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d104      	bne.n	800a84e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a844:	7bbb      	ldrb	r3, [r7, #14]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f005 f812 	bl	800f872 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fd22 	bl	800b298 <USBD_CtlSendStatus>

              break;
 800a854:	e004      	b.n	800a860 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fc60 	bl	800b11e <USBD_CtlError>
              break;
 800a85e:	bf00      	nop
          }
          break;
 800a860:	e109      	b.n	800aa76 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d002      	beq.n	800a874 <USBD_StdEPReq+0x124>
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d016      	beq.n	800a8a0 <USBD_StdEPReq+0x150>
 800a872:	e04b      	b.n	800a90c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00d      	beq.n	800a896 <USBD_StdEPReq+0x146>
 800a87a:	7bbb      	ldrb	r3, [r7, #14]
 800a87c:	2b80      	cmp	r3, #128	@ 0x80
 800a87e:	d00a      	beq.n	800a896 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f004 fff4 	bl	800f872 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a88a:	2180      	movs	r1, #128	@ 0x80
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f004 fff0 	bl	800f872 <USBD_LL_StallEP>
 800a892:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a894:	e040      	b.n	800a918 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fc40 	bl	800b11e <USBD_CtlError>
              break;
 800a89e:	e03b      	b.n	800a918 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	885b      	ldrh	r3, [r3, #2]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d136      	bne.n	800a916 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d004      	beq.n	800a8bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f004 fffa 	bl	800f8b0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f000 fceb 	bl	800b298 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fde4 	bl	800a494 <USBD_CoreFindEP>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8d0:	7b7b      	ldrb	r3, [r7, #13]
 800a8d2:	2bff      	cmp	r3, #255	@ 0xff
 800a8d4:	d01f      	beq.n	800a916 <USBD_StdEPReq+0x1c6>
 800a8d6:	7b7b      	ldrb	r3, [r7, #13]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d11c      	bne.n	800a916 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a8dc:	7b7a      	ldrb	r2, [r7, #13]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a8e4:	7b7a      	ldrb	r2, [r7, #13]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	32ae      	adds	r2, #174	@ 0xae
 800a8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d010      	beq.n	800a916 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8f4:	7b7a      	ldrb	r2, [r7, #13]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32ae      	adds	r2, #174	@ 0xae
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a90a:	e004      	b.n	800a916 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a90c:	6839      	ldr	r1, [r7, #0]
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 fc05 	bl	800b11e <USBD_CtlError>
              break;
 800a914:	e000      	b.n	800a918 <USBD_StdEPReq+0x1c8>
              break;
 800a916:	bf00      	nop
          }
          break;
 800a918:	e0ad      	b.n	800aa76 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b02      	cmp	r3, #2
 800a924:	d002      	beq.n	800a92c <USBD_StdEPReq+0x1dc>
 800a926:	2b03      	cmp	r3, #3
 800a928:	d033      	beq.n	800a992 <USBD_StdEPReq+0x242>
 800a92a:	e099      	b.n	800aa60 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d007      	beq.n	800a942 <USBD_StdEPReq+0x1f2>
 800a932:	7bbb      	ldrb	r3, [r7, #14]
 800a934:	2b80      	cmp	r3, #128	@ 0x80
 800a936:	d004      	beq.n	800a942 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a938:	6839      	ldr	r1, [r7, #0]
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 fbef 	bl	800b11e <USBD_CtlError>
                break;
 800a940:	e093      	b.n	800aa6a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a942:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a946:	2b00      	cmp	r3, #0
 800a948:	da0b      	bge.n	800a962 <USBD_StdEPReq+0x212>
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	3310      	adds	r3, #16
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	4413      	add	r3, r2
 800a95e:	3304      	adds	r3, #4
 800a960:	e00b      	b.n	800a97a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a968:	4613      	mov	r3, r2
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	4413      	add	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	4413      	add	r3, r2
 800a978:	3304      	adds	r3, #4
 800a97a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2200      	movs	r2, #0
 800a980:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	330e      	adds	r3, #14
 800a986:	2202      	movs	r2, #2
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fc44 	bl	800b218 <USBD_CtlSendData>
              break;
 800a990:	e06b      	b.n	800aa6a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a992:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da11      	bge.n	800a9be <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	f003 020f 	and.w	r2, r3, #15
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3323      	adds	r3, #35	@ 0x23
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d117      	bne.n	800a9e4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fbb1 	bl	800b11e <USBD_CtlError>
                  break;
 800a9bc:	e055      	b.n	800aa6a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
 800a9c0:	f003 020f 	and.w	r2, r3, #15
 800a9c4:	6879      	ldr	r1, [r7, #4]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	440b      	add	r3, r1
 800a9d0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d104      	bne.n	800a9e4 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fb9e 	bl	800b11e <USBD_CtlError>
                  break;
 800a9e2:	e042      	b.n	800aa6a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	da0b      	bge.n	800aa04 <USBD_StdEPReq+0x2b4>
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	3310      	adds	r3, #16
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	4413      	add	r3, r2
 800aa00:	3304      	adds	r3, #4
 800aa02:	e00b      	b.n	800aa1c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa04:	7bbb      	ldrb	r3, [r7, #14]
 800aa06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	4413      	add	r3, r2
 800aa10:	009b      	lsls	r3, r3, #2
 800aa12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	4413      	add	r3, r2
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <USBD_StdEPReq+0x2da>
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b80      	cmp	r3, #128	@ 0x80
 800aa28:	d103      	bne.n	800aa32 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	739a      	strb	r2, [r3, #14]
 800aa30:	e00e      	b.n	800aa50 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	4619      	mov	r1, r3
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f004 ff59 	bl	800f8ee <USBD_LL_IsStallEP>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	2201      	movs	r2, #1
 800aa46:	739a      	strb	r2, [r3, #14]
 800aa48:	e002      	b.n	800aa50 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	330e      	adds	r3, #14
 800aa54:	2202      	movs	r2, #2
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f000 fbdd 	bl	800b218 <USBD_CtlSendData>
              break;
 800aa5e:	e004      	b.n	800aa6a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 fb5b 	bl	800b11e <USBD_CtlError>
              break;
 800aa68:	bf00      	nop
          }
          break;
 800aa6a:	e004      	b.n	800aa76 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fb55 	bl	800b11e <USBD_CtlError>
          break;
 800aa74:	bf00      	nop
      }
      break;
 800aa76:	e005      	b.n	800aa84 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fb4f 	bl	800b11e <USBD_CtlError>
      break;
 800aa80:	e000      	b.n	800aa84 <USBD_StdEPReq+0x334>
      break;
 800aa82:	bf00      	nop
  }

  return ret;
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
	...

0800aa90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	885b      	ldrh	r3, [r3, #2]
 800aaaa:	0a1b      	lsrs	r3, r3, #8
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	2b06      	cmp	r3, #6
 800aab2:	f200 8128 	bhi.w	800ad06 <USBD_GetDescriptor+0x276>
 800aab6:	a201      	add	r2, pc, #4	@ (adr r2, 800aabc <USBD_GetDescriptor+0x2c>)
 800aab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabc:	0800aad9 	.word	0x0800aad9
 800aac0:	0800aaf1 	.word	0x0800aaf1
 800aac4:	0800ab31 	.word	0x0800ab31
 800aac8:	0800ad07 	.word	0x0800ad07
 800aacc:	0800ad07 	.word	0x0800ad07
 800aad0:	0800aca7 	.word	0x0800aca7
 800aad4:	0800acd3 	.word	0x0800acd3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	7c12      	ldrb	r2, [r2, #16]
 800aae4:	f107 0108 	add.w	r1, r7, #8
 800aae8:	4610      	mov	r0, r2
 800aaea:	4798      	blx	r3
 800aaec:	60f8      	str	r0, [r7, #12]
      break;
 800aaee:	e112      	b.n	800ad16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	7c1b      	ldrb	r3, [r3, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10d      	bne.n	800ab14 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aafe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab00:	f107 0208 	add.w	r2, r7, #8
 800ab04:	4610      	mov	r0, r2
 800ab06:	4798      	blx	r3
 800ab08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	2202      	movs	r2, #2
 800ab10:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab12:	e100      	b.n	800ad16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1c:	f107 0208 	add.w	r2, r7, #8
 800ab20:	4610      	mov	r0, r2
 800ab22:	4798      	blx	r3
 800ab24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3301      	adds	r3, #1
 800ab2a:	2202      	movs	r2, #2
 800ab2c:	701a      	strb	r2, [r3, #0]
      break;
 800ab2e:	e0f2      	b.n	800ad16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	885b      	ldrh	r3, [r3, #2]
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b05      	cmp	r3, #5
 800ab38:	f200 80ac 	bhi.w	800ac94 <USBD_GetDescriptor+0x204>
 800ab3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab44 <USBD_GetDescriptor+0xb4>)
 800ab3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab42:	bf00      	nop
 800ab44:	0800ab5d 	.word	0x0800ab5d
 800ab48:	0800ab91 	.word	0x0800ab91
 800ab4c:	0800abc5 	.word	0x0800abc5
 800ab50:	0800abf9 	.word	0x0800abf9
 800ab54:	0800ac2d 	.word	0x0800ac2d
 800ab58:	0800ac61 	.word	0x0800ac61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00b      	beq.n	800ab80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	7c12      	ldrb	r2, [r2, #16]
 800ab74:	f107 0108 	add.w	r1, r7, #8
 800ab78:	4610      	mov	r0, r2
 800ab7a:	4798      	blx	r3
 800ab7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab7e:	e091      	b.n	800aca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 facb 	bl	800b11e <USBD_CtlError>
            err++;
 800ab88:	7afb      	ldrb	r3, [r7, #11]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab8e:	e089      	b.n	800aca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d00b      	beq.n	800abb4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aba2:	689b      	ldr	r3, [r3, #8]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	7c12      	ldrb	r2, [r2, #16]
 800aba8:	f107 0108 	add.w	r1, r7, #8
 800abac:	4610      	mov	r0, r2
 800abae:	4798      	blx	r3
 800abb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abb2:	e077      	b.n	800aca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fab1 	bl	800b11e <USBD_CtlError>
            err++;
 800abbc:	7afb      	ldrb	r3, [r7, #11]
 800abbe:	3301      	adds	r3, #1
 800abc0:	72fb      	strb	r3, [r7, #11]
          break;
 800abc2:	e06f      	b.n	800aca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d00b      	beq.n	800abe8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	7c12      	ldrb	r2, [r2, #16]
 800abdc:	f107 0108 	add.w	r1, r7, #8
 800abe0:	4610      	mov	r0, r2
 800abe2:	4798      	blx	r3
 800abe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abe6:	e05d      	b.n	800aca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fa97 	bl	800b11e <USBD_CtlError>
            err++;
 800abf0:	7afb      	ldrb	r3, [r7, #11]
 800abf2:	3301      	adds	r3, #1
 800abf4:	72fb      	strb	r3, [r7, #11]
          break;
 800abf6:	e055      	b.n	800aca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00b      	beq.n	800ac1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	7c12      	ldrb	r2, [r2, #16]
 800ac10:	f107 0108 	add.w	r1, r7, #8
 800ac14:	4610      	mov	r0, r2
 800ac16:	4798      	blx	r3
 800ac18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac1a:	e043      	b.n	800aca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 fa7d 	bl	800b11e <USBD_CtlError>
            err++;
 800ac24:	7afb      	ldrb	r3, [r7, #11]
 800ac26:	3301      	adds	r3, #1
 800ac28:	72fb      	strb	r3, [r7, #11]
          break;
 800ac2a:	e03b      	b.n	800aca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac3e:	695b      	ldr	r3, [r3, #20]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	7c12      	ldrb	r2, [r2, #16]
 800ac44:	f107 0108 	add.w	r1, r7, #8
 800ac48:	4610      	mov	r0, r2
 800ac4a:	4798      	blx	r3
 800ac4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac4e:	e029      	b.n	800aca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fa63 	bl	800b11e <USBD_CtlError>
            err++;
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac5e:	e021      	b.n	800aca4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00b      	beq.n	800ac84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac72:	699b      	ldr	r3, [r3, #24]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	7c12      	ldrb	r2, [r2, #16]
 800ac78:	f107 0108 	add.w	r1, r7, #8
 800ac7c:	4610      	mov	r0, r2
 800ac7e:	4798      	blx	r3
 800ac80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac82:	e00f      	b.n	800aca4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac84:	6839      	ldr	r1, [r7, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fa49 	bl	800b11e <USBD_CtlError>
            err++;
 800ac8c:	7afb      	ldrb	r3, [r7, #11]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	72fb      	strb	r3, [r7, #11]
          break;
 800ac92:	e007      	b.n	800aca4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac94:	6839      	ldr	r1, [r7, #0]
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 fa41 	bl	800b11e <USBD_CtlError>
          err++;
 800ac9c:	7afb      	ldrb	r3, [r7, #11]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aca2:	bf00      	nop
      }
      break;
 800aca4:	e037      	b.n	800ad16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	7c1b      	ldrb	r3, [r3, #16]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acb6:	f107 0208 	add.w	r2, r7, #8
 800acba:	4610      	mov	r0, r2
 800acbc:	4798      	blx	r3
 800acbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acc0:	e029      	b.n	800ad16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800acc2:	6839      	ldr	r1, [r7, #0]
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 fa2a 	bl	800b11e <USBD_CtlError>
        err++;
 800acca:	7afb      	ldrb	r3, [r7, #11]
 800accc:	3301      	adds	r3, #1
 800acce:	72fb      	strb	r3, [r7, #11]
      break;
 800acd0:	e021      	b.n	800ad16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7c1b      	ldrb	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d10d      	bne.n	800acf6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace2:	f107 0208 	add.w	r2, r7, #8
 800ace6:	4610      	mov	r0, r2
 800ace8:	4798      	blx	r3
 800acea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	3301      	adds	r3, #1
 800acf0:	2207      	movs	r2, #7
 800acf2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acf4:	e00f      	b.n	800ad16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fa10 	bl	800b11e <USBD_CtlError>
        err++;
 800acfe:	7afb      	ldrb	r3, [r7, #11]
 800ad00:	3301      	adds	r3, #1
 800ad02:	72fb      	strb	r3, [r7, #11]
      break;
 800ad04:	e007      	b.n	800ad16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fa08 	bl	800b11e <USBD_CtlError>
      err++;
 800ad0e:	7afb      	ldrb	r3, [r7, #11]
 800ad10:	3301      	adds	r3, #1
 800ad12:	72fb      	strb	r3, [r7, #11]
      break;
 800ad14:	bf00      	nop
  }

  if (err != 0U)
 800ad16:	7afb      	ldrb	r3, [r7, #11]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d11e      	bne.n	800ad5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	88db      	ldrh	r3, [r3, #6]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d016      	beq.n	800ad52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ad24:	893b      	ldrh	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00e      	beq.n	800ad48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	88da      	ldrh	r2, [r3, #6]
 800ad2e:	893b      	ldrh	r3, [r7, #8]
 800ad30:	4293      	cmp	r3, r2
 800ad32:	bf28      	it	cs
 800ad34:	4613      	movcs	r3, r2
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad3a:	893b      	ldrh	r3, [r7, #8]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	68f9      	ldr	r1, [r7, #12]
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fa69 	bl	800b218 <USBD_CtlSendData>
 800ad46:	e009      	b.n	800ad5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad48:	6839      	ldr	r1, [r7, #0]
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f9e7 	bl	800b11e <USBD_CtlError>
 800ad50:	e004      	b.n	800ad5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 faa0 	bl	800b298 <USBD_CtlSendStatus>
 800ad58:	e000      	b.n	800ad5c <USBD_GetDescriptor+0x2cc>
    return;
 800ad5a:	bf00      	nop
  }
}
 800ad5c:	3710      	adds	r7, #16
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop

0800ad64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	889b      	ldrh	r3, [r3, #4]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d131      	bne.n	800adda <USBD_SetAddress+0x76>
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	88db      	ldrh	r3, [r3, #6]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d12d      	bne.n	800adda <USBD_SetAddress+0x76>
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	885b      	ldrh	r3, [r3, #2]
 800ad82:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad84:	d829      	bhi.n	800adda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	885b      	ldrh	r3, [r3, #2]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d104      	bne.n	800ada8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f9bc 	bl	800b11e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	e01d      	b.n	800ade4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7bfa      	ldrb	r2, [r7, #15]
 800adac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800adb0:	7bfb      	ldrb	r3, [r7, #15]
 800adb2:	4619      	mov	r1, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f004 fdc6 	bl	800f946 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa6c 	bl	800b298 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800adc0:	7bfb      	ldrb	r3, [r7, #15]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2202      	movs	r2, #2
 800adca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adce:	e009      	b.n	800ade4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add8:	e004      	b.n	800ade4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adda:	6839      	ldr	r1, [r7, #0]
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f99e 	bl	800b11e <USBD_CtlError>
  }
}
 800ade2:	bf00      	nop
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	885b      	ldrh	r3, [r3, #2]
 800adfe:	b2da      	uxtb	r2, r3
 800ae00:	4b4e      	ldr	r3, [pc, #312]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae04:	4b4d      	ldr	r3, [pc, #308]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d905      	bls.n	800ae18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f985 	bl	800b11e <USBD_CtlError>
    return USBD_FAIL;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e08c      	b.n	800af32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d002      	beq.n	800ae2a <USBD_SetConfig+0x3e>
 800ae24:	2b03      	cmp	r3, #3
 800ae26:	d029      	beq.n	800ae7c <USBD_SetConfig+0x90>
 800ae28:	e075      	b.n	800af16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae2a:	4b44      	ldr	r3, [pc, #272]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d020      	beq.n	800ae74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae32:	4b42      	ldr	r3, [pc, #264]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae3c:	4b3f      	ldr	r3, [pc, #252]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7fe ffce 	bl	8009de4 <USBD_SetClassConfig>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d008      	beq.n	800ae64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f962 	bl	800b11e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2202      	movs	r2, #2
 800ae5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae62:	e065      	b.n	800af30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fa17 	bl	800b298 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2203      	movs	r2, #3
 800ae6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae72:	e05d      	b.n	800af30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fa0f 	bl	800b298 <USBD_CtlSendStatus>
      break;
 800ae7a:	e059      	b.n	800af30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae7c:	4b2f      	ldr	r3, [pc, #188]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d112      	bne.n	800aeaa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2202      	movs	r2, #2
 800ae88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ae8c:	4b2b      	ldr	r3, [pc, #172]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	461a      	mov	r2, r3
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae96:	4b29      	ldr	r3, [pc, #164]	@ (800af3c <USBD_SetConfig+0x150>)
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7fe ffbd 	bl	8009e1c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f9f8 	bl	800b298 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aea8:	e042      	b.n	800af30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aeaa:	4b24      	ldr	r3, [pc, #144]	@ (800af3c <USBD_SetConfig+0x150>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d02a      	beq.n	800af0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7fe ffab 	bl	8009e1c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aec6:	4b1d      	ldr	r3, [pc, #116]	@ (800af3c <USBD_SetConfig+0x150>)
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aed0:	4b1a      	ldr	r3, [pc, #104]	@ (800af3c <USBD_SetConfig+0x150>)
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7fe ff84 	bl	8009de4 <USBD_SetClassConfig>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00f      	beq.n	800af06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f918 	bl	800b11e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7fe ff90 	bl	8009e1c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2202      	movs	r2, #2
 800af00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af04:	e014      	b.n	800af30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f9c6 	bl	800b298 <USBD_CtlSendStatus>
      break;
 800af0c:	e010      	b.n	800af30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f9c2 	bl	800b298 <USBD_CtlSendStatus>
      break;
 800af14:	e00c      	b.n	800af30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f900 	bl	800b11e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af1e:	4b07      	ldr	r3, [pc, #28]	@ (800af3c <USBD_SetConfig+0x150>)
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	4619      	mov	r1, r3
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f7fe ff79 	bl	8009e1c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af2a:	2303      	movs	r3, #3
 800af2c:	73fb      	strb	r3, [r7, #15]
      break;
 800af2e:	bf00      	nop
  }

  return ret;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3710      	adds	r7, #16
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	20003eec 	.word	0x20003eec

0800af40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	88db      	ldrh	r3, [r3, #6]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d004      	beq.n	800af5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f8e2 	bl	800b11e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af5a:	e023      	b.n	800afa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b02      	cmp	r3, #2
 800af66:	dc02      	bgt.n	800af6e <USBD_GetConfig+0x2e>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	dc03      	bgt.n	800af74 <USBD_GetConfig+0x34>
 800af6c:	e015      	b.n	800af9a <USBD_GetConfig+0x5a>
 800af6e:	2b03      	cmp	r3, #3
 800af70:	d00b      	beq.n	800af8a <USBD_GetConfig+0x4a>
 800af72:	e012      	b.n	800af9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3308      	adds	r3, #8
 800af7e:	2201      	movs	r2, #1
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 f948 	bl	800b218 <USBD_CtlSendData>
        break;
 800af88:	e00c      	b.n	800afa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3304      	adds	r3, #4
 800af8e:	2201      	movs	r2, #1
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f940 	bl	800b218 <USBD_CtlSendData>
        break;
 800af98:	e004      	b.n	800afa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f8be 	bl	800b11e <USBD_CtlError>
        break;
 800afa2:	bf00      	nop
}
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	3b01      	subs	r3, #1
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d81e      	bhi.n	800b002 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	88db      	ldrh	r3, [r3, #6]
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d004      	beq.n	800afd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f8a5 	bl	800b11e <USBD_CtlError>
        break;
 800afd4:	e01a      	b.n	800b00c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d005      	beq.n	800aff2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	f043 0202 	orr.w	r2, r3, #2
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	330c      	adds	r3, #12
 800aff6:	2202      	movs	r2, #2
 800aff8:	4619      	mov	r1, r3
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f90c 	bl	800b218 <USBD_CtlSendData>
      break;
 800b000:	e004      	b.n	800b00c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f000 f88a 	bl	800b11e <USBD_CtlError>
      break;
 800b00a:	bf00      	nop
  }
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	885b      	ldrh	r3, [r3, #2]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d107      	bne.n	800b036 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f932 	bl	800b298 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b034:	e013      	b.n	800b05e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	885b      	ldrh	r3, [r3, #2]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d10b      	bne.n	800b056 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	889b      	ldrh	r3, [r3, #4]
 800b042:	0a1b      	lsrs	r3, r3, #8
 800b044:	b29b      	uxth	r3, r3
 800b046:	b2da      	uxtb	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f922 	bl	800b298 <USBD_CtlSendStatus>
}
 800b054:	e003      	b.n	800b05e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f860 	bl	800b11e <USBD_CtlError>
}
 800b05e:	bf00      	nop
 800b060:	3708      	adds	r7, #8
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b076:	b2db      	uxtb	r3, r3
 800b078:	3b01      	subs	r3, #1
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d80b      	bhi.n	800b096 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	885b      	ldrh	r3, [r3, #2]
 800b082:	2b01      	cmp	r3, #1
 800b084:	d10c      	bne.n	800b0a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f000 f902 	bl	800b298 <USBD_CtlSendStatus>
      }
      break;
 800b094:	e004      	b.n	800b0a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f840 	bl	800b11e <USBD_CtlError>
      break;
 800b09e:	e000      	b.n	800b0a2 <USBD_ClrFeature+0x3c>
      break;
 800b0a0:	bf00      	nop
  }
}
 800b0a2:	bf00      	nop
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	781a      	ldrb	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	781a      	ldrb	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f7ff fa3e 	bl	800a556 <SWAPBYTE>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	461a      	mov	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f7ff fa31 	bl	800a556 <SWAPBYTE>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	3301      	adds	r3, #1
 800b100:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3301      	adds	r3, #1
 800b106:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff fa24 	bl	800a556 <SWAPBYTE>
 800b10e:	4603      	mov	r3, r0
 800b110:	461a      	mov	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	80da      	strh	r2, [r3, #6]
}
 800b116:	bf00      	nop
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b128:	2180      	movs	r1, #128	@ 0x80
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f004 fba1 	bl	800f872 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b130:	2100      	movs	r1, #0
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f004 fb9d 	bl	800f872 <USBD_LL_StallEP>
}
 800b138:	bf00      	nop
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d042      	beq.n	800b1dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b15a:	6938      	ldr	r0, [r7, #16]
 800b15c:	f000 f842 	bl	800b1e4 <USBD_GetLen>
 800b160:	4603      	mov	r3, r0
 800b162:	3301      	adds	r3, #1
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b16a:	d808      	bhi.n	800b17e <USBD_GetString+0x3e>
 800b16c:	6938      	ldr	r0, [r7, #16]
 800b16e:	f000 f839 	bl	800b1e4 <USBD_GetLen>
 800b172:	4603      	mov	r3, r0
 800b174:	3301      	adds	r3, #1
 800b176:	b29b      	uxth	r3, r3
 800b178:	005b      	lsls	r3, r3, #1
 800b17a:	b29a      	uxth	r2, r3
 800b17c:	e001      	b.n	800b182 <USBD_GetString+0x42>
 800b17e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b186:	7dfb      	ldrb	r3, [r7, #23]
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	4413      	add	r3, r2
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	7812      	ldrb	r2, [r2, #0]
 800b190:	701a      	strb	r2, [r3, #0]
  idx++;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
 800b194:	3301      	adds	r3, #1
 800b196:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b198:	7dfb      	ldrb	r3, [r7, #23]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	4413      	add	r3, r2
 800b19e:	2203      	movs	r2, #3
 800b1a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b1a8:	e013      	b.n	800b1d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	7812      	ldrb	r2, [r2, #0]
 800b1b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	613b      	str	r3, [r7, #16]
    idx++;
 800b1bc:	7dfb      	ldrb	r3, [r7, #23]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800b1cc:	7dfb      	ldrb	r3, [r7, #23]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1e7      	bne.n	800b1aa <USBD_GetString+0x6a>
 800b1da:	e000      	b.n	800b1de <USBD_GetString+0x9e>
    return;
 800b1dc:	bf00      	nop
  }
}
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b1f4:	e005      	b.n	800b202 <USBD_GetLen+0x1e>
  {
    len++;
 800b1f6:	7bfb      	ldrb	r3, [r7, #15]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1f5      	bne.n	800b1f6 <USBD_GetLen+0x12>
  }

  return len;
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	3714      	adds	r7, #20
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	60b9      	str	r1, [r7, #8]
 800b222:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2202      	movs	r2, #2
 800b228:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	2100      	movs	r1, #0
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f004 fb9d 	bl	800f984 <USBD_LL_Transmit>

  return USBD_OK;
 800b24a:	2300      	movs	r3, #0
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3710      	adds	r7, #16
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	2100      	movs	r1, #0
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f004 fb8c 	bl	800f984 <USBD_LL_Transmit>

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	60f8      	str	r0, [r7, #12]
 800b27e:	60b9      	str	r1, [r7, #8]
 800b280:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	2100      	movs	r1, #0
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f004 fb9c 	bl	800f9c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2204      	movs	r2, #4
 800b2a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	6878      	ldr	r0, [r7, #4]
 800b2b0:	f004 fb68 	bl	800f984 <USBD_LL_Transmit>

  return USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b082      	sub	sp, #8
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2205      	movs	r2, #5
 800b2ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f004 fb76 	bl	800f9c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2da:	2300      	movs	r3, #0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3708      	adds	r7, #8
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b2f4:	89fb      	ldrh	r3, [r7, #14]
 800b2f6:	021b      	lsls	r3, r3, #8
 800b2f8:	b21a      	sxth	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	781b      	ldrb	r3, [r3, #0]
 800b2fe:	b21b      	sxth	r3, r3
 800b300:	4313      	orrs	r3, r2
 800b302:	b21b      	sxth	r3, r3
 800b304:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b306:	89fb      	ldrh	r3, [r7, #14]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3303      	adds	r3, #3
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	021b      	lsls	r3, r3, #8
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	3202      	adds	r2, #2
 800b32c:	7812      	ldrb	r2, [r2, #0]
 800b32e:	4313      	orrs	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	021b      	lsls	r3, r3, #8
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	3201      	adds	r2, #1
 800b33a:	7812      	ldrb	r2, [r2, #0]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	021b      	lsls	r3, r3, #8
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	4313      	orrs	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b34c:	68fb      	ldr	r3, [r7, #12]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	460b      	mov	r3, r1
 800b364:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	1c5a      	adds	r2, r3, #1
 800b36a:	607a      	str	r2, [r7, #4]
 800b36c:	887a      	ldrh	r2, [r7, #2]
 800b36e:	b2d2      	uxtb	r2, r2
 800b370:	701a      	strb	r2, [r3, #0]
 800b372:	887b      	ldrh	r3, [r7, #2]
 800b374:	0a1b      	lsrs	r3, r3, #8
 800b376:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	607a      	str	r2, [r7, #4]
 800b37e:	887a      	ldrh	r2, [r7, #2]
 800b380:	b2d2      	uxtb	r2, r2
 800b382:	701a      	strb	r2, [r3, #0]
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	1c5a      	adds	r2, r3, #1
 800b39e:	607a      	str	r2, [r7, #4]
 800b3a0:	683a      	ldr	r2, [r7, #0]
 800b3a2:	b2d2      	uxtb	r2, r2
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	0a1b      	lsrs	r3, r3, #8
 800b3aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	1c5a      	adds	r2, r3, #1
 800b3b0:	607a      	str	r2, [r7, #4]
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	b2d2      	uxtb	r2, r2
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	0a1b      	lsrs	r3, r3, #8
 800b3bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	1c5a      	adds	r2, r3, #1
 800b3c2:	607a      	str	r2, [r7, #4]
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	b2d2      	uxtb	r2, r2
 800b3c8:	701a      	strb	r2, [r3, #0]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	0a1b      	lsrs	r3, r3, #8
 800b3ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	607a      	str	r2, [r7, #4]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	b2d2      	uxtb	r2, r2
 800b3da:	701a      	strb	r2, [r3, #0]
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00d      	beq.n	800b41e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b402:	693a      	ldr	r2, [r7, #16]
 800b404:	1c53      	adds	r3, r2, #1
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	1c59      	adds	r1, r3, #1
 800b40c:	6179      	str	r1, [r7, #20]
 800b40e:	7812      	ldrb	r2, [r2, #0]
 800b410:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	3b01      	subs	r3, #1
 800b416:	607b      	str	r3, [r7, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1f1      	bne.n	800b402 <mem_cpy+0x1a>
	}
}
 800b41e:	bf00      	nop
 800b420:	371c      	adds	r7, #28
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b42a:	b480      	push	{r7}
 800b42c:	b087      	sub	sp, #28
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	1c5a      	adds	r2, r3, #1
 800b43e:	617a      	str	r2, [r7, #20]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3b01      	subs	r3, #1
 800b44a:	607b      	str	r3, [r7, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1f3      	bne.n	800b43a <mem_set+0x10>
}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	371c      	adds	r7, #28
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b460:	b480      	push	{r7}
 800b462:	b089      	sub	sp, #36	@ 0x24
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	61fb      	str	r3, [r7, #28]
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	1c5a      	adds	r2, r3, #1
 800b47c:	61fa      	str	r2, [r7, #28]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	4619      	mov	r1, r3
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	61ba      	str	r2, [r7, #24]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	1acb      	subs	r3, r1, r3
 800b48c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	3b01      	subs	r3, #1
 800b492:	607b      	str	r3, [r7, #4]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <mem_cmp+0x40>
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d0eb      	beq.n	800b478 <mem_cmp+0x18>

	return r;
 800b4a0:	697b      	ldr	r3, [r7, #20]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3724      	adds	r7, #36	@ 0x24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b4b8:	e002      	b.n	800b4c0 <chk_chr+0x12>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	3301      	adds	r3, #1
 800b4be:	607b      	str	r3, [r7, #4]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d005      	beq.n	800b4d4 <chk_chr+0x26>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d1f2      	bne.n	800b4ba <chk_chr+0xc>
	return *str;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b085      	sub	sp, #20
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60bb      	str	r3, [r7, #8]
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	e029      	b.n	800b54c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b4f8:	4a27      	ldr	r2, [pc, #156]	@ (800b598 <chk_lock+0xb4>)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	4413      	add	r3, r2
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d01d      	beq.n	800b542 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b506:	4a24      	ldr	r2, [pc, #144]	@ (800b598 <chk_lock+0xb4>)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	4413      	add	r3, r2
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d116      	bne.n	800b546 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b518:	4a1f      	ldr	r2, [pc, #124]	@ (800b598 <chk_lock+0xb4>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	4413      	add	r3, r2
 800b520:	3304      	adds	r3, #4
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b528:	429a      	cmp	r2, r3
 800b52a:	d10c      	bne.n	800b546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b52c:	4a1a      	ldr	r2, [pc, #104]	@ (800b598 <chk_lock+0xb4>)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	011b      	lsls	r3, r3, #4
 800b532:	4413      	add	r3, r2
 800b534:	3308      	adds	r3, #8
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d102      	bne.n	800b546 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b540:	e007      	b.n	800b552 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b542:	2301      	movs	r3, #1
 800b544:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3301      	adds	r3, #1
 800b54a:	60fb      	str	r3, [r7, #12]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d9d2      	bls.n	800b4f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2b02      	cmp	r3, #2
 800b556:	d109      	bne.n	800b56c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d102      	bne.n	800b564 <chk_lock+0x80>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b02      	cmp	r3, #2
 800b562:	d101      	bne.n	800b568 <chk_lock+0x84>
 800b564:	2300      	movs	r3, #0
 800b566:	e010      	b.n	800b58a <chk_lock+0xa6>
 800b568:	2312      	movs	r3, #18
 800b56a:	e00e      	b.n	800b58a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d108      	bne.n	800b584 <chk_lock+0xa0>
 800b572:	4a09      	ldr	r2, [pc, #36]	@ (800b598 <chk_lock+0xb4>)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	4413      	add	r3, r2
 800b57a:	330c      	adds	r3, #12
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b582:	d101      	bne.n	800b588 <chk_lock+0xa4>
 800b584:	2310      	movs	r3, #16
 800b586:	e000      	b.n	800b58a <chk_lock+0xa6>
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	20003ef8 	.word	0x20003ef8

0800b59c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	607b      	str	r3, [r7, #4]
 800b5a6:	e002      	b.n	800b5ae <enq_lock+0x12>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	607b      	str	r3, [r7, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d806      	bhi.n	800b5c2 <enq_lock+0x26>
 800b5b4:	4a09      	ldr	r2, [pc, #36]	@ (800b5dc <enq_lock+0x40>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	4413      	add	r3, r2
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d1f2      	bne.n	800b5a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b02      	cmp	r3, #2
 800b5c6:	bf14      	ite	ne
 800b5c8:	2301      	movne	r3, #1
 800b5ca:	2300      	moveq	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	370c      	adds	r7, #12
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20003ef8 	.word	0x20003ef8

0800b5e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	60fb      	str	r3, [r7, #12]
 800b5ee:	e01f      	b.n	800b630 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b5f0:	4a41      	ldr	r2, [pc, #260]	@ (800b6f8 <inc_lock+0x118>)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	011b      	lsls	r3, r3, #4
 800b5f6:	4413      	add	r3, r2
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d113      	bne.n	800b62a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b602:	4a3d      	ldr	r2, [pc, #244]	@ (800b6f8 <inc_lock+0x118>)
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	011b      	lsls	r3, r3, #4
 800b608:	4413      	add	r3, r2
 800b60a:	3304      	adds	r3, #4
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b612:	429a      	cmp	r2, r3
 800b614:	d109      	bne.n	800b62a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b616:	4a38      	ldr	r2, [pc, #224]	@ (800b6f8 <inc_lock+0x118>)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	4413      	add	r3, r2
 800b61e:	3308      	adds	r3, #8
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b626:	429a      	cmp	r2, r3
 800b628:	d006      	beq.n	800b638 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3301      	adds	r3, #1
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d9dc      	bls.n	800b5f0 <inc_lock+0x10>
 800b636:	e000      	b.n	800b63a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b638:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d132      	bne.n	800b6a6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b640:	2300      	movs	r3, #0
 800b642:	60fb      	str	r3, [r7, #12]
 800b644:	e002      	b.n	800b64c <inc_lock+0x6c>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3301      	adds	r3, #1
 800b64a:	60fb      	str	r3, [r7, #12]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d806      	bhi.n	800b660 <inc_lock+0x80>
 800b652:	4a29      	ldr	r2, [pc, #164]	@ (800b6f8 <inc_lock+0x118>)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	011b      	lsls	r3, r3, #4
 800b658:	4413      	add	r3, r2
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1f2      	bne.n	800b646 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d101      	bne.n	800b66a <inc_lock+0x8a>
 800b666:	2300      	movs	r3, #0
 800b668:	e040      	b.n	800b6ec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	4922      	ldr	r1, [pc, #136]	@ (800b6f8 <inc_lock+0x118>)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	440b      	add	r3, r1
 800b676:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689a      	ldr	r2, [r3, #8]
 800b67c:	491e      	ldr	r1, [pc, #120]	@ (800b6f8 <inc_lock+0x118>)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	440b      	add	r3, r1
 800b684:	3304      	adds	r3, #4
 800b686:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	695a      	ldr	r2, [r3, #20]
 800b68c:	491a      	ldr	r1, [pc, #104]	@ (800b6f8 <inc_lock+0x118>)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	011b      	lsls	r3, r3, #4
 800b692:	440b      	add	r3, r1
 800b694:	3308      	adds	r3, #8
 800b696:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b698:	4a17      	ldr	r2, [pc, #92]	@ (800b6f8 <inc_lock+0x118>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	011b      	lsls	r3, r3, #4
 800b69e:	4413      	add	r3, r2
 800b6a0:	330c      	adds	r3, #12
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <inc_lock+0xe0>
 800b6ac:	4a12      	ldr	r2, [pc, #72]	@ (800b6f8 <inc_lock+0x118>)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	011b      	lsls	r3, r3, #4
 800b6b2:	4413      	add	r3, r2
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	881b      	ldrh	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <inc_lock+0xe0>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	e015      	b.n	800b6ec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d108      	bne.n	800b6d8 <inc_lock+0xf8>
 800b6c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b6f8 <inc_lock+0x118>)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	011b      	lsls	r3, r3, #4
 800b6cc:	4413      	add	r3, r2
 800b6ce:	330c      	adds	r3, #12
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	e001      	b.n	800b6dc <inc_lock+0xfc>
 800b6d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b6dc:	4906      	ldr	r1, [pc, #24]	@ (800b6f8 <inc_lock+0x118>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	011b      	lsls	r3, r3, #4
 800b6e2:	440b      	add	r3, r1
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	3301      	adds	r3, #1
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	20003ef8 	.word	0x20003ef8

0800b6fc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3b01      	subs	r3, #1
 800b708:	607b      	str	r3, [r7, #4]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d825      	bhi.n	800b75c <dec_lock+0x60>
		n = Files[i].ctr;
 800b710:	4a17      	ldr	r2, [pc, #92]	@ (800b770 <dec_lock+0x74>)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	011b      	lsls	r3, r3, #4
 800b716:	4413      	add	r3, r2
 800b718:	330c      	adds	r3, #12
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b71e:	89fb      	ldrh	r3, [r7, #14]
 800b720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b724:	d101      	bne.n	800b72a <dec_lock+0x2e>
 800b726:	2300      	movs	r3, #0
 800b728:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b72a:	89fb      	ldrh	r3, [r7, #14]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d002      	beq.n	800b736 <dec_lock+0x3a>
 800b730:	89fb      	ldrh	r3, [r7, #14]
 800b732:	3b01      	subs	r3, #1
 800b734:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b736:	4a0e      	ldr	r2, [pc, #56]	@ (800b770 <dec_lock+0x74>)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	011b      	lsls	r3, r3, #4
 800b73c:	4413      	add	r3, r2
 800b73e:	330c      	adds	r3, #12
 800b740:	89fa      	ldrh	r2, [r7, #14]
 800b742:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b744:	89fb      	ldrh	r3, [r7, #14]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d105      	bne.n	800b756 <dec_lock+0x5a>
 800b74a:	4a09      	ldr	r2, [pc, #36]	@ (800b770 <dec_lock+0x74>)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	4413      	add	r3, r2
 800b752:	2200      	movs	r2, #0
 800b754:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	737b      	strb	r3, [r7, #13]
 800b75a:	e001      	b.n	800b760 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b75c:	2302      	movs	r3, #2
 800b75e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b760:	7b7b      	ldrb	r3, [r7, #13]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20003ef8 	.word	0x20003ef8

0800b774 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b77c:	2300      	movs	r3, #0
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e010      	b.n	800b7a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b782:	4a0d      	ldr	r2, [pc, #52]	@ (800b7b8 <clear_lock+0x44>)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	011b      	lsls	r3, r3, #4
 800b788:	4413      	add	r3, r2
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d105      	bne.n	800b79e <clear_lock+0x2a>
 800b792:	4a09      	ldr	r2, [pc, #36]	@ (800b7b8 <clear_lock+0x44>)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	011b      	lsls	r3, r3, #4
 800b798:	4413      	add	r3, r2
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	3301      	adds	r3, #1
 800b7a2:	60fb      	str	r3, [r7, #12]
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d9eb      	bls.n	800b782 <clear_lock+0xe>
	}
}
 800b7aa:	bf00      	nop
 800b7ac:	bf00      	nop
 800b7ae:	3714      	adds	r7, #20
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr
 800b7b8:	20003ef8 	.word	0x20003ef8

0800b7bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	78db      	ldrb	r3, [r3, #3]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d034      	beq.n	800b83a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	7858      	ldrb	r0, [r3, #1]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	697a      	ldr	r2, [r7, #20]
 800b7e4:	f7f5 fa3c 	bl	8000c60 <disk_write>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	73fb      	strb	r3, [r7, #15]
 800b7f2:	e022      	b.n	800b83a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	1ad2      	subs	r2, r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	429a      	cmp	r2, r3
 800b808:	d217      	bcs.n	800b83a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	789b      	ldrb	r3, [r3, #2]
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	e010      	b.n	800b834 <sync_window+0x78>
					wsect += fs->fsize;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	4413      	add	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	7858      	ldrb	r0, [r3, #1]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b826:	2301      	movs	r3, #1
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	f7f5 fa19 	bl	8000c60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	3b01      	subs	r3, #1
 800b832:	613b      	str	r3, [r7, #16]
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d8eb      	bhi.n	800b812 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b856:	683a      	ldr	r2, [r7, #0]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d01b      	beq.n	800b894 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7ff ffad 	bl	800b7bc <sync_window>
 800b862:	4603      	mov	r3, r0
 800b864:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b866:	7bfb      	ldrb	r3, [r7, #15]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d113      	bne.n	800b894 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	7858      	ldrb	r0, [r3, #1]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b876:	2301      	movs	r3, #1
 800b878:	683a      	ldr	r2, [r7, #0]
 800b87a:	f7f5 f9d1 	bl	8000c20 <disk_read>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b884:	f04f 33ff 	mov.w	r3, #4294967295
 800b888:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800b894:	7bfb      	ldrb	r3, [r7, #15]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff ff87 	bl	800b7bc <sync_window>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d159      	bne.n	800b96c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d149      	bne.n	800b954 <sync_fs+0xb4>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	791b      	ldrb	r3, [r3, #4]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d145      	bne.n	800b954 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	899b      	ldrh	r3, [r3, #12]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	f7ff fda8 	bl	800b42a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	3338      	adds	r3, #56	@ 0x38
 800b8de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b8e2:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7ff fd37 	bl	800b35a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	3338      	adds	r3, #56	@ 0x38
 800b8f0:	4921      	ldr	r1, [pc, #132]	@ (800b978 <sync_fs+0xd8>)
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fd4c 	bl	800b390 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	3338      	adds	r3, #56	@ 0x38
 800b8fc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b900:	491e      	ldr	r1, [pc, #120]	@ (800b97c <sync_fs+0xdc>)
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff fd44 	bl	800b390 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	3338      	adds	r3, #56	@ 0x38
 800b90c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	699b      	ldr	r3, [r3, #24]
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f7ff fd3a 	bl	800b390 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	3338      	adds	r3, #56	@ 0x38
 800b920:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f7ff fd30 	bl	800b390 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b934:	1c5a      	adds	r2, r3, #1
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	7858      	ldrb	r0, [r3, #1]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b948:	2301      	movs	r3, #1
 800b94a:	f7f5 f989 	bl	8000c60 <disk_write>
			fs->fsi_flag = 0;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	785b      	ldrb	r3, [r3, #1]
 800b958:	2200      	movs	r2, #0
 800b95a:	2100      	movs	r1, #0
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7f5 f99f 	bl	8000ca0 <disk_ioctl>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d001      	beq.n	800b96c <sync_fs+0xcc>
 800b968:	2301      	movs	r3, #1
 800b96a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	41615252 	.word	0x41615252
 800b97c:	61417272 	.word	0x61417272

0800b980 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	3b02      	subs	r3, #2
 800b98e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	3b02      	subs	r3, #2
 800b996:	683a      	ldr	r2, [r7, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d301      	bcc.n	800b9a0 <clust2sect+0x20>
 800b99c:	2300      	movs	r3, #0
 800b99e:	e008      	b.n	800b9b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	895b      	ldrh	r3, [r3, #10]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	fb03 f202 	mul.w	r2, r3, r2
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b0:	4413      	add	r3, r2
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	370c      	adds	r7, #12
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b086      	sub	sp, #24
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
 800b9c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d904      	bls.n	800b9de <get_fat+0x20>
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	69db      	ldr	r3, [r3, #28]
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d302      	bcc.n	800b9e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b9de:	2301      	movs	r3, #1
 800b9e0:	617b      	str	r3, [r7, #20]
 800b9e2:	e0ba      	b.n	800bb5a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	f000 8082 	beq.w	800baf8 <get_fat+0x13a>
 800b9f4:	2b03      	cmp	r3, #3
 800b9f6:	f300 80a6 	bgt.w	800bb46 <get_fat+0x188>
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d002      	beq.n	800ba04 <get_fat+0x46>
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d055      	beq.n	800baae <get_fat+0xf0>
 800ba02:	e0a0      	b.n	800bb46 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	085b      	lsrs	r3, r3, #1
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	4413      	add	r3, r2
 800ba10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	899b      	ldrh	r3, [r3, #12]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba22:	4413      	add	r3, r2
 800ba24:	4619      	mov	r1, r3
 800ba26:	6938      	ldr	r0, [r7, #16]
 800ba28:	f7ff ff0c 	bl	800b844 <move_window>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f040 808c 	bne.w	800bb4c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	60fa      	str	r2, [r7, #12]
 800ba3a:	693a      	ldr	r2, [r7, #16]
 800ba3c:	8992      	ldrh	r2, [r2, #12]
 800ba3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba42:	fb01 f202 	mul.w	r2, r1, r2
 800ba46:	1a9b      	subs	r3, r3, r2
 800ba48:	693a      	ldr	r2, [r7, #16]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	899b      	ldrh	r3, [r3, #12]
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba62:	4413      	add	r3, r2
 800ba64:	4619      	mov	r1, r3
 800ba66:	6938      	ldr	r0, [r7, #16]
 800ba68:	f7ff feec 	bl	800b844 <move_window>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d16e      	bne.n	800bb50 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	899b      	ldrh	r3, [r3, #12]
 800ba76:	461a      	mov	r2, r3
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba7e:	fb01 f202 	mul.w	r2, r1, r2
 800ba82:	1a9b      	subs	r3, r3, r2
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	4413      	add	r3, r2
 800ba88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba8c:	021b      	lsls	r3, r3, #8
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	4313      	orrs	r3, r2
 800ba92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	f003 0301 	and.w	r3, r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <get_fat+0xe6>
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	091b      	lsrs	r3, r3, #4
 800baa2:	e002      	b.n	800baaa <get_fat+0xec>
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800baaa:	617b      	str	r3, [r7, #20]
			break;
 800baac:	e055      	b.n	800bb5a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	899b      	ldrh	r3, [r3, #12]
 800bab6:	085b      	lsrs	r3, r3, #1
 800bab8:	b29b      	uxth	r3, r3
 800baba:	4619      	mov	r1, r3
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	fbb3 f3f1 	udiv	r3, r3, r1
 800bac2:	4413      	add	r3, r2
 800bac4:	4619      	mov	r1, r3
 800bac6:	6938      	ldr	r0, [r7, #16]
 800bac8:	f7ff febc 	bl	800b844 <move_window>
 800bacc:	4603      	mov	r3, r0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d140      	bne.n	800bb54 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	693a      	ldr	r2, [r7, #16]
 800bade:	8992      	ldrh	r2, [r2, #12]
 800bae0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bae4:	fb00 f202 	mul.w	r2, r0, r2
 800bae8:	1a9b      	subs	r3, r3, r2
 800baea:	440b      	add	r3, r1
 800baec:	4618      	mov	r0, r3
 800baee:	f7ff fbf9 	bl	800b2e4 <ld_word>
 800baf2:	4603      	mov	r3, r0
 800baf4:	617b      	str	r3, [r7, #20]
			break;
 800baf6:	e030      	b.n	800bb5a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	899b      	ldrh	r3, [r3, #12]
 800bb00:	089b      	lsrs	r3, r3, #2
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	4619      	mov	r1, r3
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb0c:	4413      	add	r3, r2
 800bb0e:	4619      	mov	r1, r3
 800bb10:	6938      	ldr	r0, [r7, #16]
 800bb12:	f7ff fe97 	bl	800b844 <move_window>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d11d      	bne.n	800bb58 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	8992      	ldrh	r2, [r2, #12]
 800bb2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb2e:	fb00 f202 	mul.w	r2, r0, r2
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	440b      	add	r3, r1
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7ff fbec 	bl	800b314 <ld_dword>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bb42:	617b      	str	r3, [r7, #20]
			break;
 800bb44:	e009      	b.n	800bb5a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bb46:	2301      	movs	r3, #1
 800bb48:	617b      	str	r3, [r7, #20]
 800bb4a:	e006      	b.n	800bb5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb4c:	bf00      	nop
 800bb4e:	e004      	b.n	800bb5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb50:	bf00      	nop
 800bb52:	e002      	b.n	800bb5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bb54:	bf00      	nop
 800bb56:	e000      	b.n	800bb5a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bb58:	bf00      	nop
		}
	}

	return val;
 800bb5a:	697b      	ldr	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bb64:	b590      	push	{r4, r7, lr}
 800bb66:	b089      	sub	sp, #36	@ 0x24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	60f8      	str	r0, [r7, #12]
 800bb6c:	60b9      	str	r1, [r7, #8]
 800bb6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bb70:	2302      	movs	r3, #2
 800bb72:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	f240 8109 	bls.w	800bd8e <put_fat+0x22a>
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	f080 8103 	bcs.w	800bd8e <put_fat+0x22a>
		switch (fs->fs_type) {
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	2b03      	cmp	r3, #3
 800bb8e:	f000 80b6 	beq.w	800bcfe <put_fat+0x19a>
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	f300 80fb 	bgt.w	800bd8e <put_fat+0x22a>
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d003      	beq.n	800bba4 <put_fat+0x40>
 800bb9c:	2b02      	cmp	r3, #2
 800bb9e:	f000 8083 	beq.w	800bca8 <put_fat+0x144>
 800bba2:	e0f4      	b.n	800bd8e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	61bb      	str	r3, [r7, #24]
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	085b      	lsrs	r3, r3, #1
 800bbac:	69ba      	ldr	r2, [r7, #24]
 800bbae:	4413      	add	r3, r2
 800bbb0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	899b      	ldrh	r3, [r3, #12]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbc2:	4413      	add	r3, r2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f7ff fe3c 	bl	800b844 <move_window>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bbd0:	7ffb      	ldrb	r3, [r7, #31]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f040 80d4 	bne.w	800bd80 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	1c5a      	adds	r2, r3, #1
 800bbe2:	61ba      	str	r2, [r7, #24]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	8992      	ldrh	r2, [r2, #12]
 800bbe8:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbec:	fb00 f202 	mul.w	r2, r0, r2
 800bbf0:	1a9b      	subs	r3, r3, r2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00d      	beq.n	800bc1c <put_fat+0xb8>
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	b25b      	sxtb	r3, r3
 800bc06:	f003 030f 	and.w	r3, r3, #15
 800bc0a:	b25a      	sxtb	r2, r3
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	011b      	lsls	r3, r3, #4
 800bc12:	b25b      	sxtb	r3, r3
 800bc14:	4313      	orrs	r3, r2
 800bc16:	b25b      	sxtb	r3, r3
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	e001      	b.n	800bc20 <put_fat+0xbc>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2201      	movs	r2, #1
 800bc28:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	899b      	ldrh	r3, [r3, #12]
 800bc32:	4619      	mov	r1, r3
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc3a:	4413      	add	r3, r2
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	f7ff fe00 	bl	800b844 <move_window>
 800bc44:	4603      	mov	r3, r0
 800bc46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc48:	7ffb      	ldrb	r3, [r7, #31]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	f040 809a 	bne.w	800bd84 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	899b      	ldrh	r3, [r3, #12]
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc62:	fb00 f202 	mul.w	r2, r0, r2
 800bc66:	1a9b      	subs	r3, r3, r2
 800bc68:	440b      	add	r3, r1
 800bc6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <put_fat+0x11a>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	091b      	lsrs	r3, r3, #4
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	e00e      	b.n	800bc9c <put_fat+0x138>
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	b25b      	sxtb	r3, r3
 800bc84:	f023 030f 	bic.w	r3, r3, #15
 800bc88:	b25a      	sxtb	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	0a1b      	lsrs	r3, r3, #8
 800bc8e:	b25b      	sxtb	r3, r3
 800bc90:	f003 030f 	and.w	r3, r3, #15
 800bc94:	b25b      	sxtb	r3, r3
 800bc96:	4313      	orrs	r3, r2
 800bc98:	b25b      	sxtb	r3, r3
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	697a      	ldr	r2, [r7, #20]
 800bc9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2201      	movs	r2, #1
 800bca4:	70da      	strb	r2, [r3, #3]
			break;
 800bca6:	e072      	b.n	800bd8e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	899b      	ldrh	r3, [r3, #12]
 800bcb0:	085b      	lsrs	r3, r3, #1
 800bcb2:	b29b      	uxth	r3, r3
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcbc:	4413      	add	r3, r2
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f7ff fdbf 	bl	800b844 <move_window>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcca:	7ffb      	ldrb	r3, [r7, #31]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d15b      	bne.n	800bd88 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	005b      	lsls	r3, r3, #1
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	8992      	ldrh	r2, [r2, #12]
 800bcde:	fbb3 f0f2 	udiv	r0, r3, r2
 800bce2:	fb00 f202 	mul.w	r2, r0, r2
 800bce6:	1a9b      	subs	r3, r3, r2
 800bce8:	440b      	add	r3, r1
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	b292      	uxth	r2, r2
 800bcee:	4611      	mov	r1, r2
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7ff fb32 	bl	800b35a <st_word>
			fs->wflag = 1;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	70da      	strb	r2, [r3, #3]
			break;
 800bcfc:	e047      	b.n	800bd8e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	899b      	ldrh	r3, [r3, #12]
 800bd06:	089b      	lsrs	r3, r3, #2
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd12:	4413      	add	r3, r2
 800bd14:	4619      	mov	r1, r3
 800bd16:	68f8      	ldr	r0, [r7, #12]
 800bd18:	f7ff fd94 	bl	800b844 <move_window>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd20:	7ffb      	ldrb	r3, [r7, #31]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d132      	bne.n	800bd8c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	8992      	ldrh	r2, [r2, #12]
 800bd3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd3e:	fb00 f202 	mul.w	r2, r0, r2
 800bd42:	1a9b      	subs	r3, r3, r2
 800bd44:	440b      	add	r3, r1
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7ff fae4 	bl	800b314 <ld_dword>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bd52:	4323      	orrs	r3, r4
 800bd54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	68fa      	ldr	r2, [r7, #12]
 800bd62:	8992      	ldrh	r2, [r2, #12]
 800bd64:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd68:	fb00 f202 	mul.w	r2, r0, r2
 800bd6c:	1a9b      	subs	r3, r3, r2
 800bd6e:	440b      	add	r3, r1
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4618      	mov	r0, r3
 800bd74:	f7ff fb0c 	bl	800b390 <st_dword>
			fs->wflag = 1;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	70da      	strb	r2, [r3, #3]
			break;
 800bd7e:	e006      	b.n	800bd8e <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd80:	bf00      	nop
 800bd82:	e004      	b.n	800bd8e <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd84:	bf00      	nop
 800bd86:	e002      	b.n	800bd8e <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd88:	bf00      	nop
 800bd8a:	e000      	b.n	800bd8e <put_fat+0x22a>
			if (res != FR_OK) break;
 800bd8c:	bf00      	nop
		}
	}
	return res;
 800bd8e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3724      	adds	r7, #36	@ 0x24
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd90      	pop	{r4, r7, pc}

0800bd98 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d904      	bls.n	800bdbe <remove_chain+0x26>
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	69db      	ldr	r3, [r3, #28]
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d301      	bcc.n	800bdc2 <remove_chain+0x2a>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	e04b      	b.n	800be5a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00c      	beq.n	800bde2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bdc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdcc:	6879      	ldr	r1, [r7, #4]
 800bdce:	69b8      	ldr	r0, [r7, #24]
 800bdd0:	f7ff fec8 	bl	800bb64 <put_fat>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bdd8:	7ffb      	ldrb	r3, [r7, #31]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <remove_chain+0x4a>
 800bdde:	7ffb      	ldrb	r3, [r7, #31]
 800bde0:	e03b      	b.n	800be5a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bde2:	68b9      	ldr	r1, [r7, #8]
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f7ff fdea 	bl	800b9be <get_fat>
 800bdea:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d031      	beq.n	800be56 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d101      	bne.n	800bdfc <remove_chain+0x64>
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	e02e      	b.n	800be5a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be02:	d101      	bne.n	800be08 <remove_chain+0x70>
 800be04:	2301      	movs	r3, #1
 800be06:	e028      	b.n	800be5a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be08:	2200      	movs	r2, #0
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	69b8      	ldr	r0, [r7, #24]
 800be0e:	f7ff fea9 	bl	800bb64 <put_fat>
 800be12:	4603      	mov	r3, r0
 800be14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800be16:	7ffb      	ldrb	r3, [r7, #31]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d001      	beq.n	800be20 <remove_chain+0x88>
 800be1c:	7ffb      	ldrb	r3, [r7, #31]
 800be1e:	e01c      	b.n	800be5a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	699a      	ldr	r2, [r3, #24]
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	69db      	ldr	r3, [r3, #28]
 800be28:	3b02      	subs	r3, #2
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d20b      	bcs.n	800be46 <remove_chain+0xae>
			fs->free_clst++;
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	791b      	ldrb	r3, [r3, #4]
 800be3c:	f043 0301 	orr.w	r3, r3, #1
 800be40:	b2da      	uxtb	r2, r3
 800be42:	69bb      	ldr	r3, [r7, #24]
 800be44:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	69db      	ldr	r3, [r3, #28]
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	429a      	cmp	r2, r3
 800be52:	d3c6      	bcc.n	800bde2 <remove_chain+0x4a>
 800be54:	e000      	b.n	800be58 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800be56:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3720      	adds	r7, #32
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b088      	sub	sp, #32
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10d      	bne.n	800be94 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d004      	beq.n	800be8e <create_chain+0x2c>
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	69db      	ldr	r3, [r3, #28]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d31b      	bcc.n	800bec6 <create_chain+0x64>
 800be8e:	2301      	movs	r3, #1
 800be90:	61bb      	str	r3, [r7, #24]
 800be92:	e018      	b.n	800bec6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fd91 	bl	800b9be <get_fat>
 800be9c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d801      	bhi.n	800bea8 <create_chain+0x46>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e070      	b.n	800bf8a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800beae:	d101      	bne.n	800beb4 <create_chain+0x52>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	e06a      	b.n	800bf8a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	69db      	ldr	r3, [r3, #28]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	429a      	cmp	r2, r3
 800bebc:	d201      	bcs.n	800bec2 <create_chain+0x60>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	e063      	b.n	800bf8a <create_chain+0x128>
		scl = clst;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	3301      	adds	r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	69fa      	ldr	r2, [r7, #28]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d307      	bcc.n	800beea <create_chain+0x88>
				ncl = 2;
 800beda:	2302      	movs	r3, #2
 800bedc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bede:	69fa      	ldr	r2, [r7, #28]
 800bee0:	69bb      	ldr	r3, [r7, #24]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d901      	bls.n	800beea <create_chain+0x88>
 800bee6:	2300      	movs	r3, #0
 800bee8:	e04f      	b.n	800bf8a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800beea:	69f9      	ldr	r1, [r7, #28]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f7ff fd66 	bl	800b9be <get_fat>
 800bef2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00e      	beq.n	800bf18 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d003      	beq.n	800bf08 <create_chain+0xa6>
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf06:	d101      	bne.n	800bf0c <create_chain+0xaa>
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	e03e      	b.n	800bf8a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	69bb      	ldr	r3, [r7, #24]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d1da      	bne.n	800beca <create_chain+0x68>
 800bf14:	2300      	movs	r3, #0
 800bf16:	e038      	b.n	800bf8a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bf18:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bf1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1e:	69f9      	ldr	r1, [r7, #28]
 800bf20:	6938      	ldr	r0, [r7, #16]
 800bf22:	f7ff fe1f 	bl	800bb64 <put_fat>
 800bf26:	4603      	mov	r3, r0
 800bf28:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bf2a:	7dfb      	ldrb	r3, [r7, #23]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d109      	bne.n	800bf44 <create_chain+0xe2>
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d006      	beq.n	800bf44 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bf36:	69fa      	ldr	r2, [r7, #28]
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	6938      	ldr	r0, [r7, #16]
 800bf3c:	f7ff fe12 	bl	800bb64 <put_fat>
 800bf40:	4603      	mov	r3, r0
 800bf42:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bf44:	7dfb      	ldrb	r3, [r7, #23]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d116      	bne.n	800bf78 <create_chain+0x116>
		fs->last_clst = ncl;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	69fa      	ldr	r2, [r7, #28]
 800bf4e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	699a      	ldr	r2, [r3, #24]
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	69db      	ldr	r3, [r3, #28]
 800bf58:	3b02      	subs	r3, #2
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d804      	bhi.n	800bf68 <create_chain+0x106>
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	1e5a      	subs	r2, r3, #1
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	791b      	ldrb	r3, [r3, #4]
 800bf6c:	f043 0301 	orr.w	r3, r3, #1
 800bf70:	b2da      	uxtb	r2, r3
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	711a      	strb	r2, [r3, #4]
 800bf76:	e007      	b.n	800bf88 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d102      	bne.n	800bf84 <create_chain+0x122>
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf82:	e000      	b.n	800bf86 <create_chain+0x124>
 800bf84:	2301      	movs	r3, #1
 800bf86:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bf88:	69fb      	ldr	r3, [r7, #28]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3720      	adds	r7, #32
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b087      	sub	sp, #28
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa6:	3304      	adds	r3, #4
 800bfa8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	899b      	ldrh	r3, [r3, #12]
 800bfae:	461a      	mov	r2, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	8952      	ldrh	r2, [r2, #10]
 800bfba:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfbe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	1d1a      	adds	r2, r3, #4
 800bfc4:	613a      	str	r2, [r7, #16]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <clmt_clust+0x42>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e010      	b.n	800bff6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d307      	bcc.n	800bfec <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	1ad3      	subs	r3, r2, r3
 800bfe2:	617b      	str	r3, [r7, #20]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	3304      	adds	r3, #4
 800bfe8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bfea:	e7e9      	b.n	800bfc0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800bfec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	4413      	add	r3, r2
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b086      	sub	sp, #24
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c018:	d204      	bcs.n	800c024 <dir_sdi+0x22>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	f003 031f 	and.w	r3, r3, #31
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c024:	2302      	movs	r3, #2
 800c026:	e071      	b.n	800c10c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	683a      	ldr	r2, [r7, #0]
 800c02c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d106      	bne.n	800c048 <dir_sdi+0x46>
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	2b02      	cmp	r3, #2
 800c040:	d902      	bls.n	800c048 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c046:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10c      	bne.n	800c068 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	095b      	lsrs	r3, r3, #5
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	8912      	ldrh	r2, [r2, #8]
 800c056:	4293      	cmp	r3, r2
 800c058:	d301      	bcc.n	800c05e <dir_sdi+0x5c>
 800c05a:	2302      	movs	r3, #2
 800c05c:	e056      	b.n	800c10c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	61da      	str	r2, [r3, #28]
 800c066:	e02d      	b.n	800c0c4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	895b      	ldrh	r3, [r3, #10]
 800c06c:	461a      	mov	r2, r3
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	899b      	ldrh	r3, [r3, #12]
 800c072:	fb02 f303 	mul.w	r3, r2, r3
 800c076:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c078:	e019      	b.n	800c0ae <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6979      	ldr	r1, [r7, #20]
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff fc9d 	bl	800b9be <get_fat>
 800c084:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c08c:	d101      	bne.n	800c092 <dir_sdi+0x90>
 800c08e:	2301      	movs	r3, #1
 800c090:	e03c      	b.n	800c10c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b01      	cmp	r3, #1
 800c096:	d904      	bls.n	800c0a2 <dir_sdi+0xa0>
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	69db      	ldr	r3, [r3, #28]
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d301      	bcc.n	800c0a6 <dir_sdi+0xa4>
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e032      	b.n	800c10c <dir_sdi+0x10a>
			ofs -= csz;
 800c0a6:	683a      	ldr	r2, [r7, #0]
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	1ad3      	subs	r3, r2, r3
 800c0ac:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d2e1      	bcs.n	800c07a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c0b6:	6979      	ldr	r1, [r7, #20]
 800c0b8:	6938      	ldr	r0, [r7, #16]
 800c0ba:	f7ff fc61 	bl	800b980 <clust2sect>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	69db      	ldr	r3, [r3, #28]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <dir_sdi+0xd4>
 800c0d2:	2302      	movs	r3, #2
 800c0d4:	e01a      	b.n	800c10c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	69da      	ldr	r2, [r3, #28]
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	899b      	ldrh	r3, [r3, #12]
 800c0de:	4619      	mov	r1, r3
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0e6:	441a      	add	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	899b      	ldrh	r3, [r3, #12]
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800c0fe:	fb00 f202 	mul.w	r2, r0, r2
 800c102:	1a9b      	subs	r3, r3, r2
 800c104:	18ca      	adds	r2, r1, r3
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3718      	adds	r7, #24
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b086      	sub	sp, #24
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	3320      	adds	r3, #32
 800c12a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	69db      	ldr	r3, [r3, #28]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d003      	beq.n	800c13c <dir_next+0x28>
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c13a:	d301      	bcc.n	800c140 <dir_next+0x2c>
 800c13c:	2304      	movs	r3, #4
 800c13e:	e0bb      	b.n	800c2b8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	899b      	ldrh	r3, [r3, #12]
 800c144:	461a      	mov	r2, r3
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	fbb3 f1f2 	udiv	r1, r3, r2
 800c14c:	fb01 f202 	mul.w	r2, r1, r2
 800c150:	1a9b      	subs	r3, r3, r2
 800c152:	2b00      	cmp	r3, #0
 800c154:	f040 809d 	bne.w	800c292 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	1c5a      	adds	r2, r3, #1
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d10b      	bne.n	800c182 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	095b      	lsrs	r3, r3, #5
 800c16e:	68fa      	ldr	r2, [r7, #12]
 800c170:	8912      	ldrh	r2, [r2, #8]
 800c172:	4293      	cmp	r3, r2
 800c174:	f0c0 808d 	bcc.w	800c292 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	61da      	str	r2, [r3, #28]
 800c17e:	2304      	movs	r3, #4
 800c180:	e09a      	b.n	800c2b8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	899b      	ldrh	r3, [r3, #12]
 800c186:	461a      	mov	r2, r3
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	8952      	ldrh	r2, [r2, #10]
 800c192:	3a01      	subs	r2, #1
 800c194:	4013      	ands	r3, r2
 800c196:	2b00      	cmp	r3, #0
 800c198:	d17b      	bne.n	800c292 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f7ff fc0b 	bl	800b9be <get_fat>
 800c1a8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	d801      	bhi.n	800c1b4 <dir_next+0xa0>
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	e081      	b.n	800c2b8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ba:	d101      	bne.n	800c1c0 <dir_next+0xac>
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e07b      	b.n	800c2b8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d359      	bcc.n	800c27e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d104      	bne.n	800c1da <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	61da      	str	r2, [r3, #28]
 800c1d6:	2304      	movs	r3, #4
 800c1d8:	e06e      	b.n	800c2b8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	699b      	ldr	r3, [r3, #24]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f7ff fe3d 	bl	800be62 <create_chain>
 800c1e8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <dir_next+0xe0>
 800c1f0:	2307      	movs	r3, #7
 800c1f2:	e061      	b.n	800c2b8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d101      	bne.n	800c1fe <dir_next+0xea>
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	e05c      	b.n	800c2b8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c204:	d101      	bne.n	800c20a <dir_next+0xf6>
 800c206:	2301      	movs	r3, #1
 800c208:	e056      	b.n	800c2b8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c20a:	68f8      	ldr	r0, [r7, #12]
 800c20c:	f7ff fad6 	bl	800b7bc <sync_window>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d001      	beq.n	800c21a <dir_next+0x106>
 800c216:	2301      	movs	r3, #1
 800c218:	e04e      	b.n	800c2b8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	899b      	ldrh	r3, [r3, #12]
 800c224:	461a      	mov	r2, r3
 800c226:	2100      	movs	r1, #0
 800c228:	f7ff f8ff 	bl	800b42a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c22c:	2300      	movs	r3, #0
 800c22e:	613b      	str	r3, [r7, #16]
 800c230:	6979      	ldr	r1, [r7, #20]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f7ff fba4 	bl	800b980 <clust2sect>
 800c238:	4602      	mov	r2, r0
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	635a      	str	r2, [r3, #52]	@ 0x34
 800c23e:	e012      	b.n	800c266 <dir_next+0x152>
						fs->wflag = 1;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2201      	movs	r2, #1
 800c244:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff fab8 	bl	800b7bc <sync_window>
 800c24c:	4603      	mov	r3, r0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d001      	beq.n	800c256 <dir_next+0x142>
 800c252:	2301      	movs	r3, #1
 800c254:	e030      	b.n	800c2b8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	3301      	adds	r3, #1
 800c25a:	613b      	str	r3, [r7, #16]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c260:	1c5a      	adds	r2, r3, #1
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	635a      	str	r2, [r3, #52]	@ 0x34
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	895b      	ldrh	r3, [r3, #10]
 800c26a:	461a      	mov	r2, r3
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	4293      	cmp	r3, r2
 800c270:	d3e6      	bcc.n	800c240 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	1ad2      	subs	r2, r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	697a      	ldr	r2, [r7, #20]
 800c282:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c284:	6979      	ldr	r1, [r7, #20]
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	f7ff fb7a 	bl	800b980 <clust2sect>
 800c28c:	4602      	mov	r2, r0
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	899b      	ldrh	r3, [r3, #12]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800c2aa:	fb00 f202 	mul.w	r2, r0, r2
 800c2ae:	1a9b      	subs	r3, r3, r2
 800c2b0:	18ca      	adds	r2, r1, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c2d0:	2100      	movs	r1, #0
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7ff fe95 	bl	800c002 <dir_sdi>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d12b      	bne.n	800c33a <dir_alloc+0x7a>
		n = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f7ff faa9 	bl	800b844 <move_window>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c2f6:	7dfb      	ldrb	r3, [r7, #23]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d11d      	bne.n	800c338 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a1b      	ldr	r3, [r3, #32]
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	2be5      	cmp	r3, #229	@ 0xe5
 800c304:	d004      	beq.n	800c310 <dir_alloc+0x50>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d107      	bne.n	800c320 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	3301      	adds	r3, #1
 800c314:	613b      	str	r3, [r7, #16]
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d102      	bne.n	800c324 <dir_alloc+0x64>
 800c31e:	e00c      	b.n	800c33a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c320:	2300      	movs	r3, #0
 800c322:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c324:	2101      	movs	r1, #1
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7ff fef4 	bl	800c114 <dir_next>
 800c32c:	4603      	mov	r3, r0
 800c32e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d0d7      	beq.n	800c2e6 <dir_alloc+0x26>
 800c336:	e000      	b.n	800c33a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c338:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	d101      	bne.n	800c344 <dir_alloc+0x84>
 800c340:	2307      	movs	r3, #7
 800c342:	75fb      	strb	r3, [r7, #23]
	return res;
 800c344:	7dfb      	ldrb	r3, [r7, #23]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	331a      	adds	r3, #26
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe ffc1 	bl	800b2e4 <ld_word>
 800c362:	4603      	mov	r3, r0
 800c364:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d109      	bne.n	800c382 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	3314      	adds	r3, #20
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe ffb6 	bl	800b2e4 <ld_word>
 800c378:	4603      	mov	r3, r0
 800c37a:	041b      	lsls	r3, r3, #16
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4313      	orrs	r3, r2
 800c380:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c382:	68fb      	ldr	r3, [r7, #12]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	331a      	adds	r3, #26
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	b292      	uxth	r2, r2
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fe ffd9 	bl	800b35a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b03      	cmp	r3, #3
 800c3ae:	d109      	bne.n	800c3c4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	f103 0214 	add.w	r2, r3, #20
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	0c1b      	lsrs	r3, r3, #16
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	4619      	mov	r1, r3
 800c3be:	4610      	mov	r0, r2
 800c3c0:	f7fe ffcb 	bl	800b35a <st_word>
	}
}
 800c3c4:	bf00      	nop
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c3cc:	b590      	push	{r4, r7, lr}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	331a      	adds	r3, #26
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fe ff82 	bl	800b2e4 <ld_word>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d001      	beq.n	800c3ea <cmp_lfn+0x1e>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e059      	b.n	800c49e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3f2:	1e5a      	subs	r2, r3, #1
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	4413      	add	r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c400:	2301      	movs	r3, #1
 800c402:	81fb      	strh	r3, [r7, #14]
 800c404:	2300      	movs	r3, #0
 800c406:	613b      	str	r3, [r7, #16]
 800c408:	e033      	b.n	800c472 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c40a:	4a27      	ldr	r2, [pc, #156]	@ (800c4a8 <cmp_lfn+0xdc>)
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	4413      	add	r3, r2
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	461a      	mov	r2, r3
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	4413      	add	r3, r2
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe ff63 	bl	800b2e4 <ld_word>
 800c41e:	4603      	mov	r3, r0
 800c420:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c422:	89fb      	ldrh	r3, [r7, #14]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d01a      	beq.n	800c45e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c42c:	d812      	bhi.n	800c454 <cmp_lfn+0x88>
 800c42e:	89bb      	ldrh	r3, [r7, #12]
 800c430:	4618      	mov	r0, r3
 800c432:	f002 fddf 	bl	800eff4 <ff_wtoupper>
 800c436:	4603      	mov	r3, r0
 800c438:	461c      	mov	r4, r3
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	1c5a      	adds	r2, r3, #1
 800c43e:	617a      	str	r2, [r7, #20]
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4413      	add	r3, r2
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	4618      	mov	r0, r3
 800c44a:	f002 fdd3 	bl	800eff4 <ff_wtoupper>
 800c44e:	4603      	mov	r3, r0
 800c450:	429c      	cmp	r4, r3
 800c452:	d001      	beq.n	800c458 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c454:	2300      	movs	r3, #0
 800c456:	e022      	b.n	800c49e <cmp_lfn+0xd2>
			}
			wc = uc;
 800c458:	89bb      	ldrh	r3, [r7, #12]
 800c45a:	81fb      	strh	r3, [r7, #14]
 800c45c:	e006      	b.n	800c46c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c45e:	89bb      	ldrh	r3, [r7, #12]
 800c460:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c464:	4293      	cmp	r3, r2
 800c466:	d001      	beq.n	800c46c <cmp_lfn+0xa0>
 800c468:	2300      	movs	r3, #0
 800c46a:	e018      	b.n	800c49e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	3301      	adds	r3, #1
 800c470:	613b      	str	r3, [r7, #16]
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	2b0c      	cmp	r3, #12
 800c476:	d9c8      	bls.n	800c40a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00b      	beq.n	800c49c <cmp_lfn+0xd0>
 800c484:	89fb      	ldrh	r3, [r7, #14]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d008      	beq.n	800c49c <cmp_lfn+0xd0>
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	005b      	lsls	r3, r3, #1
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	4413      	add	r3, r2
 800c492:	881b      	ldrh	r3, [r3, #0]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d001      	beq.n	800c49c <cmp_lfn+0xd0>
 800c498:	2300      	movs	r3, #0
 800c49a:	e000      	b.n	800c49e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c49c:	2301      	movs	r3, #1
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	371c      	adds	r7, #28
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd90      	pop	{r4, r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	080109ac 	.word	0x080109ac

0800c4ac <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	331a      	adds	r3, #26
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe ff12 	bl	800b2e4 <ld_word>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <pick_lfn+0x1e>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	e04d      	b.n	800c566 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4d2:	1e5a      	subs	r2, r3, #1
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	005b      	lsls	r3, r3, #1
 800c4d8:	4413      	add	r3, r2
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	4413      	add	r3, r2
 800c4de:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	81fb      	strh	r3, [r7, #14]
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	613b      	str	r3, [r7, #16]
 800c4e8:	e028      	b.n	800c53c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c4ea:	4a21      	ldr	r2, [pc, #132]	@ (800c570 <pick_lfn+0xc4>)
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe fef3 	bl	800b2e4 <ld_word>
 800c4fe:	4603      	mov	r3, r0
 800c500:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c502:	89fb      	ldrh	r3, [r7, #14]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d00f      	beq.n	800c528 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2bfe      	cmp	r3, #254	@ 0xfe
 800c50c:	d901      	bls.n	800c512 <pick_lfn+0x66>
 800c50e:	2300      	movs	r3, #0
 800c510:	e029      	b.n	800c566 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c512:	89bb      	ldrh	r3, [r7, #12]
 800c514:	81fb      	strh	r3, [r7, #14]
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	617a      	str	r2, [r7, #20]
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	4413      	add	r3, r2
 800c522:	89fa      	ldrh	r2, [r7, #14]
 800c524:	801a      	strh	r2, [r3, #0]
 800c526:	e006      	b.n	800c536 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c528:	89bb      	ldrh	r3, [r7, #12]
 800c52a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c52e:	4293      	cmp	r3, r2
 800c530:	d001      	beq.n	800c536 <pick_lfn+0x8a>
 800c532:	2300      	movs	r3, #0
 800c534:	e017      	b.n	800c566 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	3301      	adds	r3, #1
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	2b0c      	cmp	r3, #12
 800c540:	d9d3      	bls.n	800c4ea <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00a      	beq.n	800c564 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	2bfe      	cmp	r3, #254	@ 0xfe
 800c552:	d901      	bls.n	800c558 <pick_lfn+0xac>
 800c554:	2300      	movs	r3, #0
 800c556:	e006      	b.n	800c566 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	4413      	add	r3, r2
 800c560:	2200      	movs	r2, #0
 800c562:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c564:	2301      	movs	r3, #1
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	080109ac 	.word	0x080109ac

0800c574 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b088      	sub	sp, #32
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	4611      	mov	r1, r2
 800c580:	461a      	mov	r2, r3
 800c582:	460b      	mov	r3, r1
 800c584:	71fb      	strb	r3, [r7, #7]
 800c586:	4613      	mov	r3, r2
 800c588:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	330d      	adds	r3, #13
 800c58e:	79ba      	ldrb	r2, [r7, #6]
 800c590:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	330b      	adds	r3, #11
 800c596:	220f      	movs	r2, #15
 800c598:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	330c      	adds	r3, #12
 800c59e:	2200      	movs	r2, #0
 800c5a0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	331a      	adds	r3, #26
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7fe fed6 	bl	800b35a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	1e5a      	subs	r2, r3, #1
 800c5b2:	4613      	mov	r3, r2
 800c5b4:	005b      	lsls	r3, r3, #1
 800c5b6:	4413      	add	r3, r2
 800c5b8:	009b      	lsls	r3, r3, #2
 800c5ba:	4413      	add	r3, r2
 800c5bc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	82fb      	strh	r3, [r7, #22]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c5c6:	8afb      	ldrh	r3, [r7, #22]
 800c5c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d007      	beq.n	800c5e0 <put_lfn+0x6c>
 800c5d0:	69fb      	ldr	r3, [r7, #28]
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	61fa      	str	r2, [r7, #28]
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	4413      	add	r3, r2
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c5e0:	4a17      	ldr	r2, [pc, #92]	@ (800c640 <put_lfn+0xcc>)
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	4413      	add	r3, r2
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	8afa      	ldrh	r2, [r7, #22]
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f7fe feb1 	bl	800b35a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c5f8:	8afb      	ldrh	r3, [r7, #22]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d102      	bne.n	800c604 <put_lfn+0x90>
 800c5fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c602:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	3301      	adds	r3, #1
 800c608:	61bb      	str	r3, [r7, #24]
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	2b0c      	cmp	r3, #12
 800c60e:	d9da      	bls.n	800c5c6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c610:	8afb      	ldrh	r3, [r7, #22]
 800c612:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c616:	4293      	cmp	r3, r2
 800c618:	d006      	beq.n	800c628 <put_lfn+0xb4>
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	005b      	lsls	r3, r3, #1
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	4413      	add	r3, r2
 800c622:	881b      	ldrh	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d103      	bne.n	800c630 <put_lfn+0xbc>
 800c628:	79fb      	ldrb	r3, [r7, #7]
 800c62a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c62e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	79fa      	ldrb	r2, [r7, #7]
 800c634:	701a      	strb	r2, [r3, #0]
}
 800c636:	bf00      	nop
 800c638:	3720      	adds	r7, #32
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	080109ac 	.word	0x080109ac

0800c644 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b08c      	sub	sp, #48	@ 0x30
 800c648:	af00      	add	r7, sp, #0
 800c64a:	60f8      	str	r0, [r7, #12]
 800c64c:	60b9      	str	r1, [r7, #8]
 800c64e:	607a      	str	r2, [r7, #4]
 800c650:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c652:	220b      	movs	r2, #11
 800c654:	68b9      	ldr	r1, [r7, #8]
 800c656:	68f8      	ldr	r0, [r7, #12]
 800c658:	f7fe fec6 	bl	800b3e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b05      	cmp	r3, #5
 800c660:	d92b      	bls.n	800c6ba <gen_numname+0x76>
		sr = seq;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c666:	e022      	b.n	800c6ae <gen_numname+0x6a>
			wc = *lfn++;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	1c9a      	adds	r2, r3, #2
 800c66c:	607a      	str	r2, [r7, #4]
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c672:	2300      	movs	r3, #0
 800c674:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c676:	e017      	b.n	800c6a8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	005a      	lsls	r2, r3, #1
 800c67c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c67e:	f003 0301 	and.w	r3, r3, #1
 800c682:	4413      	add	r3, r2
 800c684:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c686:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c688:	085b      	lsrs	r3, r3, #1
 800c68a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c692:	2b00      	cmp	r3, #0
 800c694:	d005      	beq.n	800c6a2 <gen_numname+0x5e>
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800c69c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800c6a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a4:	3301      	adds	r3, #1
 800c6a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	2b0f      	cmp	r3, #15
 800c6ac:	d9e4      	bls.n	800c678 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	881b      	ldrh	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d1d8      	bne.n	800c668 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c6b6:	69fb      	ldr	r3, [r7, #28]
 800c6b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c6ba:	2307      	movs	r3, #7
 800c6bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f003 030f 	and.w	r3, r3, #15
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	3330      	adds	r3, #48	@ 0x30
 800c6ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c6ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6d2:	2b39      	cmp	r3, #57	@ 0x39
 800c6d4:	d904      	bls.n	800c6e0 <gen_numname+0x9c>
 800c6d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6da:	3307      	adds	r3, #7
 800c6dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e2:	1e5a      	subs	r2, r3, #1
 800c6e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c6e6:	3330      	adds	r3, #48	@ 0x30
 800c6e8:	443b      	add	r3, r7
 800c6ea:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c6ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	091b      	lsrs	r3, r3, #4
 800c6f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1df      	bne.n	800c6be <gen_numname+0x7a>
	ns[i] = '~';
 800c6fe:	f107 0214 	add.w	r2, r7, #20
 800c702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c704:	4413      	add	r3, r2
 800c706:	227e      	movs	r2, #126	@ 0x7e
 800c708:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c70a:	2300      	movs	r3, #0
 800c70c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c70e:	e002      	b.n	800c716 <gen_numname+0xd2>
 800c710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c712:	3301      	adds	r3, #1
 800c714:	627b      	str	r3, [r7, #36]	@ 0x24
 800c716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d205      	bcs.n	800c72a <gen_numname+0xe6>
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	4413      	add	r3, r2
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	2b20      	cmp	r3, #32
 800c728:	d1f2      	bne.n	800c710 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c72c:	2b07      	cmp	r3, #7
 800c72e:	d807      	bhi.n	800c740 <gen_numname+0xfc>
 800c730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c736:	3330      	adds	r3, #48	@ 0x30
 800c738:	443b      	add	r3, r7
 800c73a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c73e:	e000      	b.n	800c742 <gen_numname+0xfe>
 800c740:	2120      	movs	r1, #32
 800c742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c744:	1c5a      	adds	r2, r3, #1
 800c746:	627a      	str	r2, [r7, #36]	@ 0x24
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4413      	add	r3, r2
 800c74c:	460a      	mov	r2, r1
 800c74e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	2b07      	cmp	r3, #7
 800c754:	d9e9      	bls.n	800c72a <gen_numname+0xe6>
}
 800c756:	bf00      	nop
 800c758:	bf00      	nop
 800c75a:	3730      	adds	r7, #48	@ 0x30
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c768:	2300      	movs	r3, #0
 800c76a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c76c:	230b      	movs	r3, #11
 800c76e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c770:	7bfb      	ldrb	r3, [r7, #15]
 800c772:	b2da      	uxtb	r2, r3
 800c774:	0852      	lsrs	r2, r2, #1
 800c776:	01db      	lsls	r3, r3, #7
 800c778:	4313      	orrs	r3, r2
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	1c59      	adds	r1, r3, #1
 800c780:	6079      	str	r1, [r7, #4]
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	4413      	add	r3, r2
 800c786:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	60bb      	str	r3, [r7, #8]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d1ed      	bne.n	800c770 <sum_sfn+0x10>
	return sum;
 800c794:	7bfb      	ldrb	r3, [r7, #15]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b086      	sub	sp, #24
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c7ac:	2304      	movs	r3, #4
 800c7ae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c7b6:	23ff      	movs	r3, #255	@ 0xff
 800c7b8:	757b      	strb	r3, [r7, #21]
 800c7ba:	23ff      	movs	r3, #255	@ 0xff
 800c7bc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c7be:	e081      	b.n	800c8c4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	69db      	ldr	r3, [r3, #28]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6938      	ldr	r0, [r7, #16]
 800c7c8:	f7ff f83c 	bl	800b844 <move_window>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c7d0:	7dfb      	ldrb	r3, [r7, #23]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d17c      	bne.n	800c8d0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c7de:	7dbb      	ldrb	r3, [r7, #22]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d102      	bne.n	800c7ea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c7e4:	2304      	movs	r3, #4
 800c7e6:	75fb      	strb	r3, [r7, #23]
 800c7e8:	e077      	b.n	800c8da <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	330b      	adds	r3, #11
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c7f6:	73fb      	strb	r3, [r7, #15]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	7bfa      	ldrb	r2, [r7, #15]
 800c7fc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c7fe:	7dbb      	ldrb	r3, [r7, #22]
 800c800:	2be5      	cmp	r3, #229	@ 0xe5
 800c802:	d00e      	beq.n	800c822 <dir_read+0x80>
 800c804:	7dbb      	ldrb	r3, [r7, #22]
 800c806:	2b2e      	cmp	r3, #46	@ 0x2e
 800c808:	d00b      	beq.n	800c822 <dir_read+0x80>
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	f023 0320 	bic.w	r3, r3, #32
 800c810:	2b08      	cmp	r3, #8
 800c812:	bf0c      	ite	eq
 800c814:	2301      	moveq	r3, #1
 800c816:	2300      	movne	r3, #0
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	461a      	mov	r2, r3
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	4293      	cmp	r3, r2
 800c820:	d002      	beq.n	800c828 <dir_read+0x86>
				ord = 0xFF;
 800c822:	23ff      	movs	r3, #255	@ 0xff
 800c824:	757b      	strb	r3, [r7, #21]
 800c826:	e044      	b.n	800c8b2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c828:	7bfb      	ldrb	r3, [r7, #15]
 800c82a:	2b0f      	cmp	r3, #15
 800c82c:	d12f      	bne.n	800c88e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c82e:	7dbb      	ldrb	r3, [r7, #22]
 800c830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00d      	beq.n	800c854 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6a1b      	ldr	r3, [r3, #32]
 800c83c:	7b5b      	ldrb	r3, [r3, #13]
 800c83e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c840:	7dbb      	ldrb	r3, [r7, #22]
 800c842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c846:	75bb      	strb	r3, [r7, #22]
 800c848:	7dbb      	ldrb	r3, [r7, #22]
 800c84a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	695a      	ldr	r2, [r3, #20]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c854:	7dba      	ldrb	r2, [r7, #22]
 800c856:	7d7b      	ldrb	r3, [r7, #21]
 800c858:	429a      	cmp	r2, r3
 800c85a:	d115      	bne.n	800c888 <dir_read+0xe6>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	330d      	adds	r3, #13
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	7d3a      	ldrb	r2, [r7, #20]
 800c866:	429a      	cmp	r2, r3
 800c868:	d10e      	bne.n	800c888 <dir_read+0xe6>
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	691a      	ldr	r2, [r3, #16]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7ff fe19 	bl	800c4ac <pick_lfn>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d003      	beq.n	800c888 <dir_read+0xe6>
 800c880:	7d7b      	ldrb	r3, [r7, #21]
 800c882:	3b01      	subs	r3, #1
 800c884:	b2db      	uxtb	r3, r3
 800c886:	e000      	b.n	800c88a <dir_read+0xe8>
 800c888:	23ff      	movs	r3, #255	@ 0xff
 800c88a:	757b      	strb	r3, [r7, #21]
 800c88c:	e011      	b.n	800c8b2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c88e:	7d7b      	ldrb	r3, [r7, #21]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d109      	bne.n	800c8a8 <dir_read+0x106>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6a1b      	ldr	r3, [r3, #32]
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff ff61 	bl	800c760 <sum_sfn>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	7d3b      	ldrb	r3, [r7, #20]
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d015      	beq.n	800c8d4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ae:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800c8b0:	e010      	b.n	800c8d4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c8b2:	2100      	movs	r1, #0
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7ff fc2d 	bl	800c114 <dir_next>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d109      	bne.n	800c8d8 <dir_read+0x136>
	while (dp->sect) {
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	69db      	ldr	r3, [r3, #28]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	f47f af79 	bne.w	800c7c0 <dir_read+0x1e>
 800c8ce:	e004      	b.n	800c8da <dir_read+0x138>
		if (res != FR_OK) break;
 800c8d0:	bf00      	nop
 800c8d2:	e002      	b.n	800c8da <dir_read+0x138>
					break;
 800c8d4:	bf00      	nop
 800c8d6:	e000      	b.n	800c8da <dir_read+0x138>
		if (res != FR_OK) break;
 800c8d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d002      	beq.n	800c8e6 <dir_read+0x144>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	61da      	str	r2, [r3, #28]
	return res;
 800c8e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3718      	adds	r7, #24
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b086      	sub	sp, #24
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c8fe:	2100      	movs	r1, #0
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f7ff fb7e 	bl	800c002 <dir_sdi>
 800c906:	4603      	mov	r3, r0
 800c908:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <dir_find+0x24>
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	e0a9      	b.n	800ca68 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c914:	23ff      	movs	r3, #255	@ 0xff
 800c916:	753b      	strb	r3, [r7, #20]
 800c918:	7d3b      	ldrb	r3, [r7, #20]
 800c91a:	757b      	strb	r3, [r7, #21]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f04f 32ff 	mov.w	r2, #4294967295
 800c922:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	69db      	ldr	r3, [r3, #28]
 800c928:	4619      	mov	r1, r3
 800c92a:	6938      	ldr	r0, [r7, #16]
 800c92c:	f7fe ff8a 	bl	800b844 <move_window>
 800c930:	4603      	mov	r3, r0
 800c932:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	2b00      	cmp	r3, #0
 800c938:	f040 8090 	bne.w	800ca5c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a1b      	ldr	r3, [r3, #32]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c944:	7dbb      	ldrb	r3, [r7, #22]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d102      	bne.n	800c950 <dir_find+0x60>
 800c94a:	2304      	movs	r3, #4
 800c94c:	75fb      	strb	r3, [r7, #23]
 800c94e:	e08a      	b.n	800ca66 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a1b      	ldr	r3, [r3, #32]
 800c954:	330b      	adds	r3, #11
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c95c:	73fb      	strb	r3, [r7, #15]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7bfa      	ldrb	r2, [r7, #15]
 800c962:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c964:	7dbb      	ldrb	r3, [r7, #22]
 800c966:	2be5      	cmp	r3, #229	@ 0xe5
 800c968:	d007      	beq.n	800c97a <dir_find+0x8a>
 800c96a:	7bfb      	ldrb	r3, [r7, #15]
 800c96c:	f003 0308 	and.w	r3, r3, #8
 800c970:	2b00      	cmp	r3, #0
 800c972:	d009      	beq.n	800c988 <dir_find+0x98>
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	2b0f      	cmp	r3, #15
 800c978:	d006      	beq.n	800c988 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c97a:	23ff      	movs	r3, #255	@ 0xff
 800c97c:	757b      	strb	r3, [r7, #21]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f04f 32ff 	mov.w	r2, #4294967295
 800c984:	631a      	str	r2, [r3, #48]	@ 0x30
 800c986:	e05e      	b.n	800ca46 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c988:	7bfb      	ldrb	r3, [r7, #15]
 800c98a:	2b0f      	cmp	r3, #15
 800c98c:	d136      	bne.n	800c9fc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d154      	bne.n	800ca46 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c99c:	7dbb      	ldrb	r3, [r7, #22]
 800c99e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00d      	beq.n	800c9c2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a1b      	ldr	r3, [r3, #32]
 800c9aa:	7b5b      	ldrb	r3, [r3, #13]
 800c9ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c9ae:	7dbb      	ldrb	r3, [r7, #22]
 800c9b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9b4:	75bb      	strb	r3, [r7, #22]
 800c9b6:	7dbb      	ldrb	r3, [r7, #22]
 800c9b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	695a      	ldr	r2, [r3, #20]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c9c2:	7dba      	ldrb	r2, [r7, #22]
 800c9c4:	7d7b      	ldrb	r3, [r7, #21]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d115      	bne.n	800c9f6 <dir_find+0x106>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	330d      	adds	r3, #13
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	7d3a      	ldrb	r2, [r7, #20]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d10e      	bne.n	800c9f6 <dir_find+0x106>
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	691a      	ldr	r2, [r3, #16]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6a1b      	ldr	r3, [r3, #32]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	f7ff fcf2 	bl	800c3cc <cmp_lfn>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d003      	beq.n	800c9f6 <dir_find+0x106>
 800c9ee:	7d7b      	ldrb	r3, [r7, #21]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	e000      	b.n	800c9f8 <dir_find+0x108>
 800c9f6:	23ff      	movs	r3, #255	@ 0xff
 800c9f8:	757b      	strb	r3, [r7, #21]
 800c9fa:	e024      	b.n	800ca46 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c9fc:	7d7b      	ldrb	r3, [r7, #21]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d109      	bne.n	800ca16 <dir_find+0x126>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f7ff feaa 	bl	800c760 <sum_sfn>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	461a      	mov	r2, r3
 800ca10:	7d3b      	ldrb	r3, [r7, #20]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d024      	beq.n	800ca60 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10a      	bne.n	800ca3a <dir_find+0x14a>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a18      	ldr	r0, [r3, #32]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	3324      	adds	r3, #36	@ 0x24
 800ca2c:	220b      	movs	r2, #11
 800ca2e:	4619      	mov	r1, r3
 800ca30:	f7fe fd16 	bl	800b460 <mem_cmp>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d014      	beq.n	800ca64 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca3a:	23ff      	movs	r3, #255	@ 0xff
 800ca3c:	757b      	strb	r3, [r7, #21]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f04f 32ff 	mov.w	r2, #4294967295
 800ca44:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca46:	2100      	movs	r1, #0
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff fb63 	bl	800c114 <dir_next>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	f43f af65 	beq.w	800c924 <dir_find+0x34>
 800ca5a:	e004      	b.n	800ca66 <dir_find+0x176>
		if (res != FR_OK) break;
 800ca5c:	bf00      	nop
 800ca5e:	e002      	b.n	800ca66 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ca60:	bf00      	nop
 800ca62:	e000      	b.n	800ca66 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ca64:	bf00      	nop

	return res;
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3718      	adds	r7, #24
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b08c      	sub	sp, #48	@ 0x30
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ca84:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <dir_register+0x20>
 800ca8c:	2306      	movs	r3, #6
 800ca8e:	e0e0      	b.n	800cc52 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ca90:	2300      	movs	r3, #0
 800ca92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca94:	e002      	b.n	800ca9c <dir_register+0x2c>
 800ca96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca98:	3301      	adds	r3, #1
 800ca9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	691a      	ldr	r2, [r3, #16]
 800caa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	4413      	add	r3, r2
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1f4      	bne.n	800ca96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800cab2:	f107 030c 	add.w	r3, r7, #12
 800cab6:	220c      	movs	r2, #12
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe fc95 	bl	800b3e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cabe:	7dfb      	ldrb	r3, [r7, #23]
 800cac0:	f003 0301 	and.w	r3, r3, #1
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d032      	beq.n	800cb2e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2240      	movs	r2, #64	@ 0x40
 800cacc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800cad0:	2301      	movs	r3, #1
 800cad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cad4:	e016      	b.n	800cb04 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	691a      	ldr	r2, [r3, #16]
 800cae0:	f107 010c 	add.w	r1, r7, #12
 800cae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae6:	f7ff fdad 	bl	800c644 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff ff00 	bl	800c8f0 <dir_find>
 800caf0:	4603      	mov	r3, r0
 800caf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800caf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d106      	bne.n	800cb0c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb00:	3301      	adds	r3, #1
 800cb02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb06:	2b63      	cmp	r3, #99	@ 0x63
 800cb08:	d9e5      	bls.n	800cad6 <dir_register+0x66>
 800cb0a:	e000      	b.n	800cb0e <dir_register+0x9e>
			if (res != FR_OK) break;
 800cb0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb10:	2b64      	cmp	r3, #100	@ 0x64
 800cb12:	d101      	bne.n	800cb18 <dir_register+0xa8>
 800cb14:	2307      	movs	r3, #7
 800cb16:	e09c      	b.n	800cc52 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cb18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb1c:	2b04      	cmp	r3, #4
 800cb1e:	d002      	beq.n	800cb26 <dir_register+0xb6>
 800cb20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb24:	e095      	b.n	800cc52 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cb26:	7dfa      	ldrb	r2, [r7, #23]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cb2e:	7dfb      	ldrb	r3, [r7, #23]
 800cb30:	f003 0302 	and.w	r3, r3, #2
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d007      	beq.n	800cb48 <dir_register+0xd8>
 800cb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb3a:	330c      	adds	r3, #12
 800cb3c:	4a47      	ldr	r2, [pc, #284]	@ (800cc5c <dir_register+0x1ec>)
 800cb3e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb42:	089b      	lsrs	r3, r3, #2
 800cb44:	3301      	adds	r3, #1
 800cb46:	e000      	b.n	800cb4a <dir_register+0xda>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cb4c:	6a39      	ldr	r1, [r7, #32]
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fbb6 	bl	800c2c0 <dir_alloc>
 800cb54:	4603      	mov	r3, r0
 800cb56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cb5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d148      	bne.n	800cbf4 <dir_register+0x184>
 800cb62:	6a3b      	ldr	r3, [r7, #32]
 800cb64:	3b01      	subs	r3, #1
 800cb66:	623b      	str	r3, [r7, #32]
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d042      	beq.n	800cbf4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695a      	ldr	r2, [r3, #20]
 800cb72:	6a3b      	ldr	r3, [r7, #32]
 800cb74:	015b      	lsls	r3, r3, #5
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	4619      	mov	r1, r3
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff fa41 	bl	800c002 <dir_sdi>
 800cb80:	4603      	mov	r3, r0
 800cb82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800cb86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d132      	bne.n	800cbf4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3324      	adds	r3, #36	@ 0x24
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fde4 	bl	800c760 <sum_sfn>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	4619      	mov	r1, r3
 800cba2:	69f8      	ldr	r0, [r7, #28]
 800cba4:	f7fe fe4e 	bl	800b844 <move_window>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800cbae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d11d      	bne.n	800cbf2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	6918      	ldr	r0, [r3, #16]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6a19      	ldr	r1, [r3, #32]
 800cbbe:	6a3b      	ldr	r3, [r7, #32]
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	7efb      	ldrb	r3, [r7, #27]
 800cbc4:	f7ff fcd6 	bl	800c574 <put_lfn>
				fs->wflag = 1;
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cbce:	2100      	movs	r1, #0
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f7ff fa9f 	bl	800c114 <dir_next>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800cbdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d107      	bne.n	800cbf4 <dir_register+0x184>
 800cbe4:	6a3b      	ldr	r3, [r7, #32]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	623b      	str	r3, [r7, #32]
 800cbea:	6a3b      	ldr	r3, [r7, #32]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1d5      	bne.n	800cb9c <dir_register+0x12c>
 800cbf0:	e000      	b.n	800cbf4 <dir_register+0x184>
				if (res != FR_OK) break;
 800cbf2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cbf4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d128      	bne.n	800cc4e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	69db      	ldr	r3, [r3, #28]
 800cc00:	4619      	mov	r1, r3
 800cc02:	69f8      	ldr	r0, [r7, #28]
 800cc04:	f7fe fe1e 	bl	800b844 <move_window>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800cc0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d11b      	bne.n	800cc4e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a1b      	ldr	r3, [r3, #32]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	2100      	movs	r1, #0
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fe fc03 	bl	800b42a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a18      	ldr	r0, [r3, #32]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	3324      	adds	r3, #36	@ 0x24
 800cc2c:	220b      	movs	r2, #11
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f7fe fbda 	bl	800b3e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	330c      	adds	r3, #12
 800cc40:	f002 0218 	and.w	r2, r2, #24
 800cc44:	b2d2      	uxtb	r2, r2
 800cc46:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cc4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3730      	adds	r7, #48	@ 0x30
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	4ec4ec4f 	.word	0x4ec4ec4f

0800cc60 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc7c:	d007      	beq.n	800cc8e <dir_remove+0x2e>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff f9bc 	bl	800c002 <dir_sdi>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	e000      	b.n	800cc90 <dir_remove+0x30>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d128      	bne.n	800ccea <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	69db      	ldr	r3, [r3, #28]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6938      	ldr	r0, [r7, #16]
 800cca0:	f7fe fdd0 	bl	800b844 <move_window>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d115      	bne.n	800ccda <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a1b      	ldr	r3, [r3, #32]
 800ccb2:	22e5      	movs	r2, #229	@ 0xe5
 800ccb4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	2201      	movs	r2, #1
 800ccba:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	695b      	ldr	r3, [r3, #20]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d90b      	bls.n	800ccde <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7ff fa23 	bl	800c114 <dir_next>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0df      	beq.n	800cc98 <dir_remove+0x38>
 800ccd8:	e002      	b.n	800cce0 <dir_remove+0x80>
			if (res != FR_OK) break;
 800ccda:	bf00      	nop
 800ccdc:	e000      	b.n	800cce0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800ccde:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	2b04      	cmp	r3, #4
 800cce4:	d101      	bne.n	800ccea <dir_remove+0x8a>
 800cce6:	2302      	movs	r3, #2
 800cce8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800ccea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	2200      	movs	r2, #0
 800cd08:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	69db      	ldr	r3, [r3, #28]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 80ca 	beq.w	800cea8 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1c:	d032      	beq.n	800cd84 <get_fileinfo+0x90>
			i = j = 0;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61bb      	str	r3, [r7, #24]
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cd26:	e01b      	b.n	800cd60 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cd28:	89fb      	ldrh	r3, [r7, #14]
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f002 f925 	bl	800ef7c <ff_convert>
 800cd32:	4603      	mov	r3, r0
 800cd34:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cd36:	89fb      	ldrh	r3, [r7, #14]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d102      	bne.n	800cd42 <get_fileinfo+0x4e>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	61fb      	str	r3, [r7, #28]
 800cd40:	e01a      	b.n	800cd78 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	2bfe      	cmp	r3, #254	@ 0xfe
 800cd46:	d902      	bls.n	800cd4e <get_fileinfo+0x5a>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	61fb      	str	r3, [r7, #28]
 800cd4c:	e014      	b.n	800cd78 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	61fa      	str	r2, [r7, #28]
 800cd54:	89fa      	ldrh	r2, [r7, #14]
 800cd56:	b2d1      	uxtb	r1, r2
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	460a      	mov	r2, r1
 800cd5e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	691a      	ldr	r2, [r3, #16]
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	1c59      	adds	r1, r3, #1
 800cd68:	61b9      	str	r1, [r7, #24]
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	4413      	add	r3, r2
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	81fb      	strh	r3, [r7, #14]
 800cd72:	89fb      	ldrh	r3, [r7, #14]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1d7      	bne.n	800cd28 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	3316      	adds	r3, #22
 800cd80:	2200      	movs	r2, #0
 800cd82:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	61bb      	str	r3, [r7, #24]
 800cd88:	69bb      	ldr	r3, [r7, #24]
 800cd8a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cd8c:	683a      	ldr	r2, [r7, #0]
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	4413      	add	r3, r2
 800cd92:	3316      	adds	r3, #22
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cd98:	e04d      	b.n	800ce36 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a1a      	ldr	r2, [r3, #32]
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	1c59      	adds	r1, r3, #1
 800cda2:	61f9      	str	r1, [r7, #28]
 800cda4:	4413      	add	r3, r2
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cdaa:	7dfb      	ldrb	r3, [r7, #23]
 800cdac:	2b20      	cmp	r3, #32
 800cdae:	d041      	beq.n	800ce34 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
 800cdb2:	2b05      	cmp	r3, #5
 800cdb4:	d101      	bne.n	800cdba <get_fileinfo+0xc6>
 800cdb6:	23e5      	movs	r3, #229	@ 0xe5
 800cdb8:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cdba:	69fb      	ldr	r3, [r7, #28]
 800cdbc:	2b09      	cmp	r3, #9
 800cdbe:	d10f      	bne.n	800cde0 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800cdc0:	89bb      	ldrh	r3, [r7, #12]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d105      	bne.n	800cdd2 <get_fileinfo+0xde>
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	4413      	add	r3, r2
 800cdcc:	3316      	adds	r3, #22
 800cdce:	222e      	movs	r2, #46	@ 0x2e
 800cdd0:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	1c5a      	adds	r2, r3, #1
 800cdd6:	61ba      	str	r2, [r7, #24]
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	4413      	add	r3, r2
 800cddc:	222e      	movs	r2, #46	@ 0x2e
 800cdde:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	4413      	add	r3, r2
 800cde6:	3309      	adds	r3, #9
 800cde8:	7dfa      	ldrb	r2, [r7, #23]
 800cdea:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cdec:	89bb      	ldrh	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d11c      	bne.n	800ce2c <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cdf2:	7dfb      	ldrb	r3, [r7, #23]
 800cdf4:	2b40      	cmp	r3, #64	@ 0x40
 800cdf6:	d913      	bls.n	800ce20 <get_fileinfo+0x12c>
 800cdf8:	7dfb      	ldrb	r3, [r7, #23]
 800cdfa:	2b5a      	cmp	r3, #90	@ 0x5a
 800cdfc:	d810      	bhi.n	800ce20 <get_fileinfo+0x12c>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a1b      	ldr	r3, [r3, #32]
 800ce02:	330c      	adds	r3, #12
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	2b08      	cmp	r3, #8
 800ce0c:	d901      	bls.n	800ce12 <get_fileinfo+0x11e>
 800ce0e:	2310      	movs	r3, #16
 800ce10:	e000      	b.n	800ce14 <get_fileinfo+0x120>
 800ce12:	2308      	movs	r3, #8
 800ce14:	4013      	ands	r3, r2
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d002      	beq.n	800ce20 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	3320      	adds	r3, #32
 800ce1e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ce20:	683a      	ldr	r2, [r7, #0]
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	4413      	add	r3, r2
 800ce26:	3316      	adds	r3, #22
 800ce28:	7dfa      	ldrb	r2, [r7, #23]
 800ce2a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	61bb      	str	r3, [r7, #24]
 800ce32:	e000      	b.n	800ce36 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800ce34:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	2b0a      	cmp	r3, #10
 800ce3a:	d9ae      	bls.n	800cd9a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ce3c:	89bb      	ldrh	r3, [r7, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10d      	bne.n	800ce5e <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800ce42:	683a      	ldr	r2, [r7, #0]
 800ce44:	69bb      	ldr	r3, [r7, #24]
 800ce46:	4413      	add	r3, r2
 800ce48:	3316      	adds	r3, #22
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6a1b      	ldr	r3, [r3, #32]
 800ce52:	330c      	adds	r3, #12
 800ce54:	781b      	ldrb	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <get_fileinfo+0x16a>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	4413      	add	r3, r2
 800ce64:	3309      	adds	r3, #9
 800ce66:	2200      	movs	r2, #0
 800ce68:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6a1b      	ldr	r3, [r3, #32]
 800ce6e:	7ada      	ldrb	r2, [r3, #11]
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	331c      	adds	r3, #28
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe fa4a 	bl	800b314 <ld_dword>
 800ce80:	4602      	mov	r2, r0
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6a1b      	ldr	r3, [r3, #32]
 800ce8a:	3316      	adds	r3, #22
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7fe fa41 	bl	800b314 <ld_dword>
 800ce92:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	80da      	strh	r2, [r3, #6]
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	0c1b      	lsrs	r3, r3, #16
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	809a      	strh	r2, [r3, #4]
 800cea6:	e000      	b.n	800ceaa <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cea8:	bf00      	nop
}
 800ceaa:	3720      	adds	r7, #32
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b08a      	sub	sp, #40	@ 0x28
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	613b      	str	r3, [r7, #16]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	2300      	movs	r3, #0
 800ceca:	617b      	str	r3, [r7, #20]
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ced0:	69bb      	ldr	r3, [r7, #24]
 800ced2:	1c5a      	adds	r2, r3, #1
 800ced4:	61ba      	str	r2, [r7, #24]
 800ced6:	693a      	ldr	r2, [r7, #16]
 800ced8:	4413      	add	r3, r2
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800cede:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cee0:	2b1f      	cmp	r3, #31
 800cee2:	d940      	bls.n	800cf66 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800cee4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cee6:	2b2f      	cmp	r3, #47	@ 0x2f
 800cee8:	d006      	beq.n	800cef8 <create_name+0x48>
 800ceea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ceec:	2b5c      	cmp	r3, #92	@ 0x5c
 800ceee:	d110      	bne.n	800cf12 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cef0:	e002      	b.n	800cef8 <create_name+0x48>
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	3301      	adds	r3, #1
 800cef6:	61bb      	str	r3, [r7, #24]
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	69bb      	ldr	r3, [r7, #24]
 800cefc:	4413      	add	r3, r2
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	2b2f      	cmp	r3, #47	@ 0x2f
 800cf02:	d0f6      	beq.n	800cef2 <create_name+0x42>
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	4413      	add	r3, r2
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	2b5c      	cmp	r3, #92	@ 0x5c
 800cf0e:	d0f0      	beq.n	800cef2 <create_name+0x42>
			break;
 800cf10:	e02a      	b.n	800cf68 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2bfe      	cmp	r3, #254	@ 0xfe
 800cf16:	d901      	bls.n	800cf1c <create_name+0x6c>
 800cf18:	2306      	movs	r3, #6
 800cf1a:	e17d      	b.n	800d218 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cf1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cf22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf24:	2101      	movs	r1, #1
 800cf26:	4618      	mov	r0, r3
 800cf28:	f002 f828 	bl	800ef7c <ff_convert>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cf30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <create_name+0x8a>
 800cf36:	2306      	movs	r3, #6
 800cf38:	e16e      	b.n	800d218 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cf3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf3c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf3e:	d809      	bhi.n	800cf54 <create_name+0xa4>
 800cf40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf42:	4619      	mov	r1, r3
 800cf44:	488d      	ldr	r0, [pc, #564]	@ (800d17c <create_name+0x2cc>)
 800cf46:	f7fe fab2 	bl	800b4ae <chk_chr>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d001      	beq.n	800cf54 <create_name+0xa4>
 800cf50:	2306      	movs	r3, #6
 800cf52:	e161      	b.n	800d218 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	617a      	str	r2, [r7, #20]
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4413      	add	r3, r2
 800cf60:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cf62:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cf64:	e7b4      	b.n	800ced0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cf66:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cf68:	693a      	ldr	r2, [r7, #16]
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	441a      	add	r2, r3
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cf72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf74:	2b1f      	cmp	r3, #31
 800cf76:	d801      	bhi.n	800cf7c <create_name+0xcc>
 800cf78:	2304      	movs	r3, #4
 800cf7a:	e000      	b.n	800cf7e <create_name+0xce>
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cf82:	e011      	b.n	800cfa8 <create_name+0xf8>
		w = lfn[di - 1];
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	4413      	add	r3, r2
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800cf96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf98:	2b20      	cmp	r3, #32
 800cf9a:	d002      	beq.n	800cfa2 <create_name+0xf2>
 800cf9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfa0:	d106      	bne.n	800cfb0 <create_name+0x100>
		di--;
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	3b01      	subs	r3, #1
 800cfa6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1ea      	bne.n	800cf84 <create_name+0xd4>
 800cfae:	e000      	b.n	800cfb2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cfb0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	005b      	lsls	r3, r3, #1
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	4413      	add	r3, r2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d101      	bne.n	800cfc8 <create_name+0x118>
 800cfc4:	2306      	movs	r3, #6
 800cfc6:	e127      	b.n	800d218 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	3324      	adds	r3, #36	@ 0x24
 800cfcc:	220b      	movs	r2, #11
 800cfce:	2120      	movs	r1, #32
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fe fa2a 	bl	800b42a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	61bb      	str	r3, [r7, #24]
 800cfda:	e002      	b.n	800cfe2 <create_name+0x132>
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	61bb      	str	r3, [r7, #24]
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	005b      	lsls	r3, r3, #1
 800cfe6:	68fa      	ldr	r2, [r7, #12]
 800cfe8:	4413      	add	r3, r2
 800cfea:	881b      	ldrh	r3, [r3, #0]
 800cfec:	2b20      	cmp	r3, #32
 800cfee:	d0f5      	beq.n	800cfdc <create_name+0x12c>
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	005b      	lsls	r3, r3, #1
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	4413      	add	r3, r2
 800cff8:	881b      	ldrh	r3, [r3, #0]
 800cffa:	2b2e      	cmp	r3, #46	@ 0x2e
 800cffc:	d0ee      	beq.n	800cfdc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800cffe:	69bb      	ldr	r3, [r7, #24]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d009      	beq.n	800d018 <create_name+0x168>
 800d004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d008:	f043 0303 	orr.w	r3, r3, #3
 800d00c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d010:	e002      	b.n	800d018 <create_name+0x168>
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	3b01      	subs	r3, #1
 800d016:	617b      	str	r3, [r7, #20]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d009      	beq.n	800d032 <create_name+0x182>
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d024:	3b01      	subs	r3, #1
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	4413      	add	r3, r2
 800d02c:	881b      	ldrh	r3, [r3, #0]
 800d02e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d030:	d1ef      	bne.n	800d012 <create_name+0x162>

	i = b = 0; ni = 8;
 800d032:	2300      	movs	r3, #0
 800d034:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d038:	2300      	movs	r3, #0
 800d03a:	623b      	str	r3, [r7, #32]
 800d03c:	2308      	movs	r3, #8
 800d03e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d040:	69bb      	ldr	r3, [r7, #24]
 800d042:	1c5a      	adds	r2, r3, #1
 800d044:	61ba      	str	r2, [r7, #24]
 800d046:	005b      	lsls	r3, r3, #1
 800d048:	68fa      	ldr	r2, [r7, #12]
 800d04a:	4413      	add	r3, r2
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 8090 	beq.w	800d178 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d05a:	2b20      	cmp	r3, #32
 800d05c:	d006      	beq.n	800d06c <create_name+0x1bc>
 800d05e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d060:	2b2e      	cmp	r3, #46	@ 0x2e
 800d062:	d10a      	bne.n	800d07a <create_name+0x1ca>
 800d064:	69ba      	ldr	r2, [r7, #24]
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d006      	beq.n	800d07a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d06c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d070:	f043 0303 	orr.w	r3, r3, #3
 800d074:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d078:	e07d      	b.n	800d176 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d07a:	6a3a      	ldr	r2, [r7, #32]
 800d07c:	69fb      	ldr	r3, [r7, #28]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d203      	bcs.n	800d08a <create_name+0x1da>
 800d082:	69ba      	ldr	r2, [r7, #24]
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	429a      	cmp	r2, r3
 800d088:	d123      	bne.n	800d0d2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	2b0b      	cmp	r3, #11
 800d08e:	d106      	bne.n	800d09e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d094:	f043 0303 	orr.w	r3, r3, #3
 800d098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d09c:	e075      	b.n	800d18a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d005      	beq.n	800d0b2 <create_name+0x202>
 800d0a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0aa:	f043 0303 	orr.w	r3, r3, #3
 800d0ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d866      	bhi.n	800d188 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	61bb      	str	r3, [r7, #24]
 800d0be:	2308      	movs	r3, #8
 800d0c0:	623b      	str	r3, [r7, #32]
 800d0c2:	230b      	movs	r3, #11
 800d0c4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d0c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d0d0:	e051      	b.n	800d176 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d0d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0d6:	d914      	bls.n	800d102 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d0d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0da:	2100      	movs	r1, #0
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f001 ff4d 	bl	800ef7c <ff_convert>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d0e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d004      	beq.n	800d0f6 <create_name+0x246>
 800d0ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0ee:	3b80      	subs	r3, #128	@ 0x80
 800d0f0:	4a23      	ldr	r2, [pc, #140]	@ (800d180 <create_name+0x2d0>)
 800d0f2:	5cd3      	ldrb	r3, [r2, r3]
 800d0f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d0f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d0fa:	f043 0302 	orr.w	r3, r3, #2
 800d0fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d104:	2b00      	cmp	r3, #0
 800d106:	d007      	beq.n	800d118 <create_name+0x268>
 800d108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d10a:	4619      	mov	r1, r3
 800d10c:	481d      	ldr	r0, [pc, #116]	@ (800d184 <create_name+0x2d4>)
 800d10e:	f7fe f9ce 	bl	800b4ae <chk_chr>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d008      	beq.n	800d12a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d118:	235f      	movs	r3, #95	@ 0x5f
 800d11a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d11c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d120:	f043 0303 	orr.w	r3, r3, #3
 800d124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d128:	e01b      	b.n	800d162 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d12a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d12c:	2b40      	cmp	r3, #64	@ 0x40
 800d12e:	d909      	bls.n	800d144 <create_name+0x294>
 800d130:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d132:	2b5a      	cmp	r3, #90	@ 0x5a
 800d134:	d806      	bhi.n	800d144 <create_name+0x294>
					b |= 2;
 800d136:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d13a:	f043 0302 	orr.w	r3, r3, #2
 800d13e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d142:	e00e      	b.n	800d162 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d144:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d146:	2b60      	cmp	r3, #96	@ 0x60
 800d148:	d90b      	bls.n	800d162 <create_name+0x2b2>
 800d14a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d14c:	2b7a      	cmp	r3, #122	@ 0x7a
 800d14e:	d808      	bhi.n	800d162 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d150:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d154:	f043 0301 	orr.w	r3, r3, #1
 800d158:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d15c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d15e:	3b20      	subs	r3, #32
 800d160:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d162:	6a3b      	ldr	r3, [r7, #32]
 800d164:	1c5a      	adds	r2, r3, #1
 800d166:	623a      	str	r2, [r7, #32]
 800d168:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d16a:	b2d1      	uxtb	r1, r2
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	4413      	add	r3, r2
 800d170:	460a      	mov	r2, r1
 800d172:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d176:	e763      	b.n	800d040 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d178:	bf00      	nop
 800d17a:	e006      	b.n	800d18a <create_name+0x2da>
 800d17c:	08010888 	.word	0x08010888
 800d180:	0801092c 	.word	0x0801092c
 800d184:	08010894 	.word	0x08010894
			if (si > di) break;			/* No extension */
 800d188:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d190:	2be5      	cmp	r3, #229	@ 0xe5
 800d192:	d103      	bne.n	800d19c <create_name+0x2ec>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2205      	movs	r2, #5
 800d198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	2b08      	cmp	r3, #8
 800d1a0:	d104      	bne.n	800d1ac <create_name+0x2fc>
 800d1a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d1ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d1b0:	f003 030c 	and.w	r3, r3, #12
 800d1b4:	2b0c      	cmp	r3, #12
 800d1b6:	d005      	beq.n	800d1c4 <create_name+0x314>
 800d1b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d1bc:	f003 0303 	and.w	r3, r3, #3
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	d105      	bne.n	800d1d0 <create_name+0x320>
 800d1c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1c8:	f043 0302 	orr.w	r3, r3, #2
 800d1cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1d4:	f003 0302 	and.w	r3, r3, #2
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d117      	bne.n	800d20c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d1dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d1e0:	f003 0303 	and.w	r3, r3, #3
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d105      	bne.n	800d1f4 <create_name+0x344>
 800d1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1ec:	f043 0310 	orr.w	r3, r3, #16
 800d1f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d1f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d1f8:	f003 030c 	and.w	r3, r3, #12
 800d1fc:	2b04      	cmp	r3, #4
 800d1fe:	d105      	bne.n	800d20c <create_name+0x35c>
 800d200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d204:	f043 0308 	orr.w	r3, r3, #8
 800d208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d212:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800d216:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3728      	adds	r7, #40	@ 0x28
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d234:	e002      	b.n	800d23c <follow_path+0x1c>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b2f      	cmp	r3, #47	@ 0x2f
 800d242:	d0f8      	beq.n	800d236 <follow_path+0x16>
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	2b5c      	cmp	r3, #92	@ 0x5c
 800d24a:	d0f4      	beq.n	800d236 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2200      	movs	r2, #0
 800d250:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	2b1f      	cmp	r3, #31
 800d258:	d80a      	bhi.n	800d270 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2280      	movs	r2, #128	@ 0x80
 800d25e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d262:	2100      	movs	r1, #0
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7fe fecc 	bl	800c002 <dir_sdi>
 800d26a:	4603      	mov	r3, r0
 800d26c:	75fb      	strb	r3, [r7, #23]
 800d26e:	e048      	b.n	800d302 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d270:	463b      	mov	r3, r7
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7ff fe1b 	bl	800ceb0 <create_name>
 800d27a:	4603      	mov	r3, r0
 800d27c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d27e:	7dfb      	ldrb	r3, [r7, #23]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d139      	bne.n	800d2f8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7ff fb33 	bl	800c8f0 <dir_find>
 800d28a:	4603      	mov	r3, r0
 800d28c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d294:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d296:	7dfb      	ldrb	r3, [r7, #23]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00a      	beq.n	800d2b2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
 800d29e:	2b04      	cmp	r3, #4
 800d2a0:	d12c      	bne.n	800d2fc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d2a2:	7afb      	ldrb	r3, [r7, #11]
 800d2a4:	f003 0304 	and.w	r3, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d127      	bne.n	800d2fc <follow_path+0xdc>
 800d2ac:	2305      	movs	r3, #5
 800d2ae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d2b0:	e024      	b.n	800d2fc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d2b2:	7afb      	ldrb	r3, [r7, #11]
 800d2b4:	f003 0304 	and.w	r3, r3, #4
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d121      	bne.n	800d300 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	799b      	ldrb	r3, [r3, #6]
 800d2c0:	f003 0310 	and.w	r3, r3, #16
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d102      	bne.n	800d2ce <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d2c8:	2305      	movs	r3, #5
 800d2ca:	75fb      	strb	r3, [r7, #23]
 800d2cc:	e019      	b.n	800d302 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	695b      	ldr	r3, [r3, #20]
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	8992      	ldrh	r2, [r2, #12]
 800d2dc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d2e0:	fb00 f202 	mul.w	r2, r0, r2
 800d2e4:	1a9b      	subs	r3, r3, r2
 800d2e6:	440b      	add	r3, r1
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	68f8      	ldr	r0, [r7, #12]
 800d2ec:	f7ff f82f 	bl	800c34e <ld_clust>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d2f6:	e7bb      	b.n	800d270 <follow_path+0x50>
			if (res != FR_OK) break;
 800d2f8:	bf00      	nop
 800d2fa:	e002      	b.n	800d302 <follow_path+0xe2>
				break;
 800d2fc:	bf00      	nop
 800d2fe:	e000      	b.n	800d302 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d300:	bf00      	nop
			}
		}
	}

	return res;
 800d302:	7dfb      	ldrb	r3, [r7, #23]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3718      	adds	r7, #24
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b087      	sub	sp, #28
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d314:	f04f 33ff 	mov.w	r3, #4294967295
 800d318:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d031      	beq.n	800d386 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	617b      	str	r3, [r7, #20]
 800d328:	e002      	b.n	800d330 <get_ldnumber+0x24>
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	3301      	adds	r3, #1
 800d32e:	617b      	str	r3, [r7, #20]
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	2b1f      	cmp	r3, #31
 800d336:	d903      	bls.n	800d340 <get_ldnumber+0x34>
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	2b3a      	cmp	r3, #58	@ 0x3a
 800d33e:	d1f4      	bne.n	800d32a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	781b      	ldrb	r3, [r3, #0]
 800d344:	2b3a      	cmp	r3, #58	@ 0x3a
 800d346:	d11c      	bne.n	800d382 <get_ldnumber+0x76>
			tp = *path;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	1c5a      	adds	r2, r3, #1
 800d352:	60fa      	str	r2, [r7, #12]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	3b30      	subs	r3, #48	@ 0x30
 800d358:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	2b09      	cmp	r3, #9
 800d35e:	d80e      	bhi.n	800d37e <get_ldnumber+0x72>
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	429a      	cmp	r2, r3
 800d366:	d10a      	bne.n	800d37e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d107      	bne.n	800d37e <get_ldnumber+0x72>
					vol = (int)i;
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d372:	697b      	ldr	r3, [r7, #20]
 800d374:	3301      	adds	r3, #1
 800d376:	617b      	str	r3, [r7, #20]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	e002      	b.n	800d388 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d382:	2300      	movs	r3, #0
 800d384:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d386:	693b      	ldr	r3, [r7, #16]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	371c      	adds	r7, #28
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	70da      	strb	r2, [r3, #3]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3aa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f7fe fa48 	bl	800b844 <move_window>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <check_fs+0x2a>
 800d3ba:	2304      	movs	r3, #4
 800d3bc:	e038      	b.n	800d430 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	3338      	adds	r3, #56	@ 0x38
 800d3c2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fd ff8c 	bl	800b2e4 <ld_word>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d001      	beq.n	800d3dc <check_fs+0x48>
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e029      	b.n	800d430 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d3e2:	2be9      	cmp	r3, #233	@ 0xe9
 800d3e4:	d009      	beq.n	800d3fa <check_fs+0x66>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d3ec:	2beb      	cmp	r3, #235	@ 0xeb
 800d3ee:	d11e      	bne.n	800d42e <check_fs+0x9a>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d3f6:	2b90      	cmp	r3, #144	@ 0x90
 800d3f8:	d119      	bne.n	800d42e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	3338      	adds	r3, #56	@ 0x38
 800d3fe:	3336      	adds	r3, #54	@ 0x36
 800d400:	4618      	mov	r0, r3
 800d402:	f7fd ff87 	bl	800b314 <ld_dword>
 800d406:	4603      	mov	r3, r0
 800d408:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d40c:	4a0a      	ldr	r2, [pc, #40]	@ (800d438 <check_fs+0xa4>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d101      	bne.n	800d416 <check_fs+0x82>
 800d412:	2300      	movs	r3, #0
 800d414:	e00c      	b.n	800d430 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	3338      	adds	r3, #56	@ 0x38
 800d41a:	3352      	adds	r3, #82	@ 0x52
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fd ff79 	bl	800b314 <ld_dword>
 800d422:	4603      	mov	r3, r0
 800d424:	4a05      	ldr	r2, [pc, #20]	@ (800d43c <check_fs+0xa8>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d101      	bne.n	800d42e <check_fs+0x9a>
 800d42a:	2300      	movs	r3, #0
 800d42c:	e000      	b.n	800d430 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d42e:	2302      	movs	r3, #2
}
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	00544146 	.word	0x00544146
 800d43c:	33544146 	.word	0x33544146

0800d440 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b096      	sub	sp, #88	@ 0x58
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	4613      	mov	r3, r2
 800d44c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7ff ff59 	bl	800d30c <get_ldnumber>
 800d45a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da01      	bge.n	800d466 <find_volume+0x26>
 800d462:	230b      	movs	r3, #11
 800d464:	e265      	b.n	800d932 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d466:	4a9f      	ldr	r2, [pc, #636]	@ (800d6e4 <find_volume+0x2a4>)
 800d468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d46a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d46e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <find_volume+0x3a>
 800d476:	230c      	movs	r3, #12
 800d478:	e25b      	b.n	800d932 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d47e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d480:	79fb      	ldrb	r3, [r7, #7]
 800d482:	f023 0301 	bic.w	r3, r3, #1
 800d486:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01a      	beq.n	800d4c6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d492:	785b      	ldrb	r3, [r3, #1]
 800d494:	4618      	mov	r0, r3
 800d496:	f7f3 fb81 	bl	8000b9c <disk_status>
 800d49a:	4603      	mov	r3, r0
 800d49c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d4a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d4a4:	f003 0301 	and.w	r3, r3, #1
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10c      	bne.n	800d4c6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d4ac:	79fb      	ldrb	r3, [r7, #7]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d007      	beq.n	800d4c2 <find_volume+0x82>
 800d4b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d4b6:	f003 0304 	and.w	r3, r3, #4
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d001      	beq.n	800d4c2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d4be:	230a      	movs	r3, #10
 800d4c0:	e237      	b.n	800d932 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e235      	b.n	800d932 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d4d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4d6:	785b      	ldrb	r3, [r3, #1]
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7f3 fb79 	bl	8000bd0 <disk_initialize>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d4e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d4e8:	f003 0301 	and.w	r3, r3, #1
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d001      	beq.n	800d4f4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d4f0:	2303      	movs	r3, #3
 800d4f2:	e21e      	b.n	800d932 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d4f4:	79fb      	ldrb	r3, [r7, #7]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d007      	beq.n	800d50a <find_volume+0xca>
 800d4fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d4fe:	f003 0304 	and.w	r3, r3, #4
 800d502:	2b00      	cmp	r3, #0
 800d504:	d001      	beq.n	800d50a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d506:	230a      	movs	r3, #10
 800d508:	e213      	b.n	800d932 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d50c:	7858      	ldrb	r0, [r3, #1]
 800d50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d510:	330c      	adds	r3, #12
 800d512:	461a      	mov	r2, r3
 800d514:	2102      	movs	r1, #2
 800d516:	f7f3 fbc3 	bl	8000ca0 <disk_ioctl>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <find_volume+0xe4>
 800d520:	2301      	movs	r3, #1
 800d522:	e206      	b.n	800d932 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d526:	899b      	ldrh	r3, [r3, #12]
 800d528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d52c:	d80d      	bhi.n	800d54a <find_volume+0x10a>
 800d52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d530:	899b      	ldrh	r3, [r3, #12]
 800d532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d536:	d308      	bcc.n	800d54a <find_volume+0x10a>
 800d538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53a:	899b      	ldrh	r3, [r3, #12]
 800d53c:	461a      	mov	r2, r3
 800d53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d540:	899b      	ldrh	r3, [r3, #12]
 800d542:	3b01      	subs	r3, #1
 800d544:	4013      	ands	r3, r2
 800d546:	2b00      	cmp	r3, #0
 800d548:	d001      	beq.n	800d54e <find_volume+0x10e>
 800d54a:	2301      	movs	r3, #1
 800d54c:	e1f1      	b.n	800d932 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d552:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d554:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d556:	f7ff ff1d 	bl	800d394 <check_fs>
 800d55a:	4603      	mov	r3, r0
 800d55c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d560:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d564:	2b02      	cmp	r3, #2
 800d566:	d149      	bne.n	800d5fc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d568:	2300      	movs	r3, #0
 800d56a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d56c:	e01e      	b.n	800d5ac <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d570:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d576:	011b      	lsls	r3, r3, #4
 800d578:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d57c:	4413      	add	r3, r2
 800d57e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d582:	3304      	adds	r3, #4
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d006      	beq.n	800d598 <find_volume+0x158>
 800d58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58c:	3308      	adds	r3, #8
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fd fec0 	bl	800b314 <ld_dword>
 800d594:	4602      	mov	r2, r0
 800d596:	e000      	b.n	800d59a <find_volume+0x15a>
 800d598:	2200      	movs	r2, #0
 800d59a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	3358      	adds	r3, #88	@ 0x58
 800d5a0:	443b      	add	r3, r7
 800d5a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d5a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5ae:	2b03      	cmp	r3, #3
 800d5b0:	d9dd      	bls.n	800d56e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d5b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <find_volume+0x182>
 800d5bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d5c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5c4:	009b      	lsls	r3, r3, #2
 800d5c6:	3358      	adds	r3, #88	@ 0x58
 800d5c8:	443b      	add	r3, r7
 800d5ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d5ce:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d5d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d005      	beq.n	800d5e2 <find_volume+0x1a2>
 800d5d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d5d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d5da:	f7ff fedb 	bl	800d394 <check_fs>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	e000      	b.n	800d5e4 <find_volume+0x1a4>
 800d5e2:	2303      	movs	r3, #3
 800d5e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d5e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d905      	bls.n	800d5fc <find_volume+0x1bc>
 800d5f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d5f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5f8:	2b03      	cmp	r3, #3
 800d5fa:	d9e2      	bls.n	800d5c2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d5fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d600:	2b04      	cmp	r3, #4
 800d602:	d101      	bne.n	800d608 <find_volume+0x1c8>
 800d604:	2301      	movs	r3, #1
 800d606:	e194      	b.n	800d932 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d608:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d901      	bls.n	800d614 <find_volume+0x1d4>
 800d610:	230d      	movs	r3, #13
 800d612:	e18e      	b.n	800d932 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d616:	3338      	adds	r3, #56	@ 0x38
 800d618:	330b      	adds	r3, #11
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fd fe62 	bl	800b2e4 <ld_word>
 800d620:	4603      	mov	r3, r0
 800d622:	461a      	mov	r2, r3
 800d624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d626:	899b      	ldrh	r3, [r3, #12]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d001      	beq.n	800d630 <find_volume+0x1f0>
 800d62c:	230d      	movs	r3, #13
 800d62e:	e180      	b.n	800d932 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d632:	3338      	adds	r3, #56	@ 0x38
 800d634:	3316      	adds	r3, #22
 800d636:	4618      	mov	r0, r3
 800d638:	f7fd fe54 	bl	800b2e4 <ld_word>
 800d63c:	4603      	mov	r3, r0
 800d63e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d642:	2b00      	cmp	r3, #0
 800d644:	d106      	bne.n	800d654 <find_volume+0x214>
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	3338      	adds	r3, #56	@ 0x38
 800d64a:	3324      	adds	r3, #36	@ 0x24
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fd fe61 	bl	800b314 <ld_dword>
 800d652:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d656:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d658:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d662:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	789b      	ldrb	r3, [r3, #2]
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d005      	beq.n	800d678 <find_volume+0x238>
 800d66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66e:	789b      	ldrb	r3, [r3, #2]
 800d670:	2b02      	cmp	r3, #2
 800d672:	d001      	beq.n	800d678 <find_volume+0x238>
 800d674:	230d      	movs	r3, #13
 800d676:	e15c      	b.n	800d932 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67a:	789b      	ldrb	r3, [r3, #2]
 800d67c:	461a      	mov	r2, r3
 800d67e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d680:	fb02 f303 	mul.w	r3, r2, r3
 800d684:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d688:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d68c:	461a      	mov	r2, r3
 800d68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d690:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d694:	895b      	ldrh	r3, [r3, #10]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d008      	beq.n	800d6ac <find_volume+0x26c>
 800d69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69c:	895b      	ldrh	r3, [r3, #10]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a2:	895b      	ldrh	r3, [r3, #10]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	4013      	ands	r3, r2
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d001      	beq.n	800d6b0 <find_volume+0x270>
 800d6ac:	230d      	movs	r3, #13
 800d6ae:	e140      	b.n	800d932 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	3338      	adds	r3, #56	@ 0x38
 800d6b4:	3311      	adds	r3, #17
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fd fe14 	bl	800b2e4 <ld_word>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	461a      	mov	r2, r3
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c6:	891b      	ldrh	r3, [r3, #8]
 800d6c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6ca:	8992      	ldrh	r2, [r2, #12]
 800d6cc:	0952      	lsrs	r2, r2, #5
 800d6ce:	b292      	uxth	r2, r2
 800d6d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6d4:	fb01 f202 	mul.w	r2, r1, r2
 800d6d8:	1a9b      	subs	r3, r3, r2
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d003      	beq.n	800d6e8 <find_volume+0x2a8>
 800d6e0:	230d      	movs	r3, #13
 800d6e2:	e126      	b.n	800d932 <find_volume+0x4f2>
 800d6e4:	20003ef0 	.word	0x20003ef0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ea:	3338      	adds	r3, #56	@ 0x38
 800d6ec:	3313      	adds	r3, #19
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fd fdf8 	bl	800b2e4 <ld_word>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d6f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d106      	bne.n	800d70c <find_volume+0x2cc>
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d700:	3338      	adds	r3, #56	@ 0x38
 800d702:	3320      	adds	r3, #32
 800d704:	4618      	mov	r0, r3
 800d706:	f7fd fe05 	bl	800b314 <ld_dword>
 800d70a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70e:	3338      	adds	r3, #56	@ 0x38
 800d710:	330e      	adds	r3, #14
 800d712:	4618      	mov	r0, r3
 800d714:	f7fd fde6 	bl	800b2e4 <ld_word>
 800d718:	4603      	mov	r3, r0
 800d71a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d71c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <find_volume+0x2e6>
 800d722:	230d      	movs	r3, #13
 800d724:	e105      	b.n	800d932 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d726:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d72a:	4413      	add	r3, r2
 800d72c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d72e:	8911      	ldrh	r1, [r2, #8]
 800d730:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d732:	8992      	ldrh	r2, [r2, #12]
 800d734:	0952      	lsrs	r2, r2, #5
 800d736:	b292      	uxth	r2, r2
 800d738:	fbb1 f2f2 	udiv	r2, r1, r2
 800d73c:	b292      	uxth	r2, r2
 800d73e:	4413      	add	r3, r2
 800d740:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d742:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d746:	429a      	cmp	r2, r3
 800d748:	d201      	bcs.n	800d74e <find_volume+0x30e>
 800d74a:	230d      	movs	r3, #13
 800d74c:	e0f1      	b.n	800d932 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d74e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d752:	1ad3      	subs	r3, r2, r3
 800d754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d756:	8952      	ldrh	r2, [r2, #10]
 800d758:	fbb3 f3f2 	udiv	r3, r3, r2
 800d75c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	d101      	bne.n	800d768 <find_volume+0x328>
 800d764:	230d      	movs	r3, #13
 800d766:	e0e4      	b.n	800d932 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d768:	2303      	movs	r3, #3
 800d76a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d770:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d774:	4293      	cmp	r3, r2
 800d776:	d802      	bhi.n	800d77e <find_volume+0x33e>
 800d778:	2302      	movs	r3, #2
 800d77a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d780:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d784:	4293      	cmp	r3, r2
 800d786:	d802      	bhi.n	800d78e <find_volume+0x34e>
 800d788:	2301      	movs	r3, #1
 800d78a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d790:	1c9a      	adds	r2, r3, #2
 800d792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d794:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d79a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d79c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d79e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7a0:	441a      	add	r2, r3
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d7a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7aa:	441a      	add	r2, r3
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ae:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800d7b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d7b4:	2b03      	cmp	r3, #3
 800d7b6:	d11e      	bne.n	800d7f6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ba:	3338      	adds	r3, #56	@ 0x38
 800d7bc:	332a      	adds	r3, #42	@ 0x2a
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fd fd90 	bl	800b2e4 <ld_word>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d001      	beq.n	800d7ce <find_volume+0x38e>
 800d7ca:	230d      	movs	r3, #13
 800d7cc:	e0b1      	b.n	800d932 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	891b      	ldrh	r3, [r3, #8]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <find_volume+0x39a>
 800d7d6:	230d      	movs	r3, #13
 800d7d8:	e0ab      	b.n	800d932 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	3338      	adds	r3, #56	@ 0x38
 800d7de:	332c      	adds	r3, #44	@ 0x2c
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7fd fd97 	bl	800b314 <ld_dword>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ea:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ee:	69db      	ldr	r3, [r3, #28]
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7f4:	e01f      	b.n	800d836 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f8:	891b      	ldrh	r3, [r3, #8]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d101      	bne.n	800d802 <find_volume+0x3c2>
 800d7fe:	230d      	movs	r3, #13
 800d800:	e097      	b.n	800d932 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d808:	441a      	add	r2, r3
 800d80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d80c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d80e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d812:	2b02      	cmp	r3, #2
 800d814:	d103      	bne.n	800d81e <find_volume+0x3de>
 800d816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d818:	69db      	ldr	r3, [r3, #28]
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	e00a      	b.n	800d834 <find_volume+0x3f4>
 800d81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d820:	69da      	ldr	r2, [r3, #28]
 800d822:	4613      	mov	r3, r2
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	4413      	add	r3, r2
 800d828:	085a      	lsrs	r2, r3, #1
 800d82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82c:	69db      	ldr	r3, [r3, #28]
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d834:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d838:	6a1a      	ldr	r2, [r3, #32]
 800d83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83c:	899b      	ldrh	r3, [r3, #12]
 800d83e:	4619      	mov	r1, r3
 800d840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d842:	440b      	add	r3, r1
 800d844:	3b01      	subs	r3, #1
 800d846:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d848:	8989      	ldrh	r1, [r1, #12]
 800d84a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d84e:	429a      	cmp	r2, r3
 800d850:	d201      	bcs.n	800d856 <find_volume+0x416>
 800d852:	230d      	movs	r3, #13
 800d854:	e06d      	b.n	800d932 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d858:	f04f 32ff 	mov.w	r2, #4294967295
 800d85c:	619a      	str	r2, [r3, #24]
 800d85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d860:	699a      	ldr	r2, [r3, #24]
 800d862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d864:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d868:	2280      	movs	r2, #128	@ 0x80
 800d86a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d86c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d870:	2b03      	cmp	r3, #3
 800d872:	d149      	bne.n	800d908 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d876:	3338      	adds	r3, #56	@ 0x38
 800d878:	3330      	adds	r3, #48	@ 0x30
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7fd fd32 	bl	800b2e4 <ld_word>
 800d880:	4603      	mov	r3, r0
 800d882:	2b01      	cmp	r3, #1
 800d884:	d140      	bne.n	800d908 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d888:	3301      	adds	r3, #1
 800d88a:	4619      	mov	r1, r3
 800d88c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d88e:	f7fd ffd9 	bl	800b844 <move_window>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d137      	bne.n	800d908 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d89a:	2200      	movs	r2, #0
 800d89c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a0:	3338      	adds	r3, #56	@ 0x38
 800d8a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fd fd1c 	bl	800b2e4 <ld_word>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d127      	bne.n	800d908 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ba:	3338      	adds	r3, #56	@ 0x38
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7fd fd29 	bl	800b314 <ld_dword>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	4a1d      	ldr	r2, [pc, #116]	@ (800d93c <find_volume+0x4fc>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d11e      	bne.n	800d908 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8cc:	3338      	adds	r3, #56	@ 0x38
 800d8ce:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fd fd1e 	bl	800b314 <ld_dword>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	4a19      	ldr	r2, [pc, #100]	@ (800d940 <find_volume+0x500>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d113      	bne.n	800d908 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e2:	3338      	adds	r3, #56	@ 0x38
 800d8e4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7fd fd13 	bl	800b314 <ld_dword>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f6:	3338      	adds	r3, #56	@ 0x38
 800d8f8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fd fd09 	bl	800b314 <ld_dword>
 800d902:	4602      	mov	r2, r0
 800d904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d906:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d90a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d90e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d910:	4b0c      	ldr	r3, [pc, #48]	@ (800d944 <find_volume+0x504>)
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	3301      	adds	r3, #1
 800d916:	b29a      	uxth	r2, r3
 800d918:	4b0a      	ldr	r3, [pc, #40]	@ (800d944 <find_volume+0x504>)
 800d91a:	801a      	strh	r2, [r3, #0]
 800d91c:	4b09      	ldr	r3, [pc, #36]	@ (800d944 <find_volume+0x504>)
 800d91e:	881a      	ldrh	r2, [r3, #0]
 800d920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d922:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d926:	4a08      	ldr	r2, [pc, #32]	@ (800d948 <find_volume+0x508>)
 800d928:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d92a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d92c:	f7fd ff22 	bl	800b774 <clear_lock>
#endif
	return FR_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3758      	adds	r7, #88	@ 0x58
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	41615252 	.word	0x41615252
 800d940:	61417272 	.word	0x61417272
 800d944:	20003ef4 	.word	0x20003ef4
 800d948:	20003f18 	.word	0x20003f18

0800d94c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d956:	2309      	movs	r3, #9
 800d958:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d01c      	beq.n	800d99a <validate+0x4e>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d018      	beq.n	800d99a <validate+0x4e>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d013      	beq.n	800d99a <validate+0x4e>
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	889a      	ldrh	r2, [r3, #4]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	88db      	ldrh	r3, [r3, #6]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d10c      	bne.n	800d99a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	785b      	ldrb	r3, [r3, #1]
 800d986:	4618      	mov	r0, r3
 800d988:	f7f3 f908 	bl	8000b9c <disk_status>
 800d98c:	4603      	mov	r3, r0
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <validate+0x4e>
			res = FR_OK;
 800d996:	2300      	movs	r3, #0
 800d998:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d99a:	7bfb      	ldrb	r3, [r7, #15]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d102      	bne.n	800d9a6 <validate+0x5a>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	e000      	b.n	800d9a8 <validate+0x5c>
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	683a      	ldr	r2, [r7, #0]
 800d9aa:	6013      	str	r3, [r2, #0]
	return res;
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	3710      	adds	r7, #16
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
	...

0800d9b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b088      	sub	sp, #32
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	60b9      	str	r1, [r7, #8]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d9ca:	f107 0310 	add.w	r3, r7, #16
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7ff fc9c 	bl	800d30c <get_ldnumber>
 800d9d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	da01      	bge.n	800d9e0 <f_mount+0x28>
 800d9dc:	230b      	movs	r3, #11
 800d9de:	e02b      	b.n	800da38 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d9e0:	4a17      	ldr	r2, [pc, #92]	@ (800da40 <f_mount+0x88>)
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d005      	beq.n	800d9fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d9f0:	69b8      	ldr	r0, [r7, #24]
 800d9f2:	f7fd febf 	bl	800b774 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d002      	beq.n	800da08 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	490d      	ldr	r1, [pc, #52]	@ (800da40 <f_mount+0x88>)
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d002      	beq.n	800da1e <f_mount+0x66>
 800da18:	79fb      	ldrb	r3, [r7, #7]
 800da1a:	2b01      	cmp	r3, #1
 800da1c:	d001      	beq.n	800da22 <f_mount+0x6a>
 800da1e:	2300      	movs	r3, #0
 800da20:	e00a      	b.n	800da38 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800da22:	f107 010c 	add.w	r1, r7, #12
 800da26:	f107 0308 	add.w	r3, r7, #8
 800da2a:	2200      	movs	r2, #0
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff fd07 	bl	800d440 <find_volume>
 800da32:	4603      	mov	r3, r0
 800da34:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800da36:	7dfb      	ldrb	r3, [r7, #23]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3720      	adds	r7, #32
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	20003ef0 	.word	0x20003ef0

0800da44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b09a      	sub	sp, #104	@ 0x68
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	4613      	mov	r3, r2
 800da50:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d101      	bne.n	800da5c <f_open+0x18>
 800da58:	2309      	movs	r3, #9
 800da5a:	e1b7      	b.n	800ddcc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800da5c:	79fb      	ldrb	r3, [r7, #7]
 800da5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da62:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800da64:	79fa      	ldrb	r2, [r7, #7]
 800da66:	f107 0114 	add.w	r1, r7, #20
 800da6a:	f107 0308 	add.w	r3, r7, #8
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fce6 	bl	800d440 <find_volume>
 800da74:	4603      	mov	r3, r0
 800da76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800da7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f040 819b 	bne.w	800ddba <f_open+0x376>
		dj.obj.fs = fs;
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800da88:	68ba      	ldr	r2, [r7, #8]
 800da8a:	f107 0318 	add.w	r3, r7, #24
 800da8e:	4611      	mov	r1, r2
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fbc5 	bl	800d220 <follow_path>
 800da96:	4603      	mov	r3, r0
 800da98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800da9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d118      	bne.n	800dad6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800daa4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800daa8:	b25b      	sxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	da03      	bge.n	800dab6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800daae:	2306      	movs	r3, #6
 800dab0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dab4:	e00f      	b.n	800dad6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dab6:	79fb      	ldrb	r3, [r7, #7]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	bf8c      	ite	hi
 800dabc:	2301      	movhi	r3, #1
 800dabe:	2300      	movls	r3, #0
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	461a      	mov	r2, r3
 800dac4:	f107 0318 	add.w	r3, r7, #24
 800dac8:	4611      	mov	r1, r2
 800daca:	4618      	mov	r0, r3
 800dacc:	f7fd fd0a 	bl	800b4e4 <chk_lock>
 800dad0:	4603      	mov	r3, r0
 800dad2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dad6:	79fb      	ldrb	r3, [r7, #7]
 800dad8:	f003 031c 	and.w	r3, r3, #28
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d07f      	beq.n	800dbe0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800dae0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d017      	beq.n	800db18 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dae8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800daec:	2b04      	cmp	r3, #4
 800daee:	d10e      	bne.n	800db0e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800daf0:	f7fd fd54 	bl	800b59c <enq_lock>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d006      	beq.n	800db08 <f_open+0xc4>
 800dafa:	f107 0318 	add.w	r3, r7, #24
 800dafe:	4618      	mov	r0, r3
 800db00:	f7fe ffb6 	bl	800ca70 <dir_register>
 800db04:	4603      	mov	r3, r0
 800db06:	e000      	b.n	800db0a <f_open+0xc6>
 800db08:	2312      	movs	r3, #18
 800db0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800db0e:	79fb      	ldrb	r3, [r7, #7]
 800db10:	f043 0308 	orr.w	r3, r3, #8
 800db14:	71fb      	strb	r3, [r7, #7]
 800db16:	e010      	b.n	800db3a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800db18:	7fbb      	ldrb	r3, [r7, #30]
 800db1a:	f003 0311 	and.w	r3, r3, #17
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d003      	beq.n	800db2a <f_open+0xe6>
					res = FR_DENIED;
 800db22:	2307      	movs	r3, #7
 800db24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800db28:	e007      	b.n	800db3a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800db2a:	79fb      	ldrb	r3, [r7, #7]
 800db2c:	f003 0304 	and.w	r3, r3, #4
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <f_open+0xf6>
 800db34:	2308      	movs	r3, #8
 800db36:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800db3a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d168      	bne.n	800dc14 <f_open+0x1d0>
 800db42:	79fb      	ldrb	r3, [r7, #7]
 800db44:	f003 0308 	and.w	r3, r3, #8
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d063      	beq.n	800dc14 <f_open+0x1d0>
				dw = GET_FATTIME();
 800db4c:	f7f3 f8d8 	bl	8000d00 <get_fattime>
 800db50:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800db52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db54:	330e      	adds	r3, #14
 800db56:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fd fc19 	bl	800b390 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800db5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db60:	3316      	adds	r3, #22
 800db62:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db64:	4618      	mov	r0, r3
 800db66:	f7fd fc13 	bl	800b390 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6c:	330b      	adds	r3, #11
 800db6e:	2220      	movs	r2, #32
 800db70:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db76:	4611      	mov	r1, r2
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fe fbe8 	bl	800c34e <ld_clust>
 800db7e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800db84:	2200      	movs	r2, #0
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe fc00 	bl	800c38c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800db8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8e:	331c      	adds	r3, #28
 800db90:	2100      	movs	r1, #0
 800db92:	4618      	mov	r0, r3
 800db94:	f7fd fbfc 	bl	800b390 <st_dword>
					fs->wflag = 1;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2201      	movs	r2, #1
 800db9c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800db9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d037      	beq.n	800dc14 <f_open+0x1d0>
						dw = fs->winsect;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dba8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dbaa:	f107 0318 	add.w	r3, r7, #24
 800dbae:	2200      	movs	r2, #0
 800dbb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe f8f0 	bl	800bd98 <remove_chain>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800dbbe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d126      	bne.n	800dc14 <f_open+0x1d0>
							res = move_window(fs, dw);
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fd fe3a 	bl	800b844 <move_window>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dbda:	3a01      	subs	r2, #1
 800dbdc:	615a      	str	r2, [r3, #20]
 800dbde:	e019      	b.n	800dc14 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dbe0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d115      	bne.n	800dc14 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dbe8:	7fbb      	ldrb	r3, [r7, #30]
 800dbea:	f003 0310 	and.w	r3, r3, #16
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d003      	beq.n	800dbfa <f_open+0x1b6>
					res = FR_NO_FILE;
 800dbf2:	2304      	movs	r3, #4
 800dbf4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dbf8:	e00c      	b.n	800dc14 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dbfa:	79fb      	ldrb	r3, [r7, #7]
 800dbfc:	f003 0302 	and.w	r3, r3, #2
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d007      	beq.n	800dc14 <f_open+0x1d0>
 800dc04:	7fbb      	ldrb	r3, [r7, #30]
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d002      	beq.n	800dc14 <f_open+0x1d0>
						res = FR_DENIED;
 800dc0e:	2307      	movs	r3, #7
 800dc10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dc14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d126      	bne.n	800dc6a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	f003 0308 	and.w	r3, r3, #8
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d003      	beq.n	800dc2e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800dc26:	79fb      	ldrb	r3, [r7, #7]
 800dc28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dc2c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dc36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc3c:	79fb      	ldrb	r3, [r7, #7]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	bf8c      	ite	hi
 800dc42:	2301      	movhi	r3, #1
 800dc44:	2300      	movls	r3, #0
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	461a      	mov	r2, r3
 800dc4a:	f107 0318 	add.w	r3, r7, #24
 800dc4e:	4611      	mov	r1, r2
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fd fcc5 	bl	800b5e0 <inc_lock>
 800dc56:	4602      	mov	r2, r0
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d102      	bne.n	800dc6a <f_open+0x226>
 800dc64:	2302      	movs	r3, #2
 800dc66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f040 80a3 	bne.w	800ddba <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fb67 	bl	800c34e <ld_clust>
 800dc80:	4602      	mov	r2, r0
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc88:	331c      	adds	r3, #28
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7fd fb42 	bl	800b314 <ld_dword>
 800dc90:	4602      	mov	r2, r0
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2200      	movs	r2, #0
 800dc9a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc9c:	697a      	ldr	r2, [r7, #20]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	88da      	ldrh	r2, [r3, #6]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	79fa      	ldrb	r2, [r7, #7]
 800dcae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	3330      	adds	r3, #48	@ 0x30
 800dcc6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800dcca:	2100      	movs	r1, #0
 800dccc:	4618      	mov	r0, r3
 800dcce:	f7fd fbac 	bl	800b42a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dcd2:	79fb      	ldrb	r3, [r7, #7]
 800dcd4:	f003 0320 	and.w	r3, r3, #32
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d06e      	beq.n	800ddba <f_open+0x376>
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d06a      	beq.n	800ddba <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	68da      	ldr	r2, [r3, #12]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	895b      	ldrh	r3, [r3, #10]
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	899b      	ldrh	r3, [r3, #12]
 800dcf6:	fb02 f303 	mul.w	r3, r2, r3
 800dcfa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd08:	e016      	b.n	800dd38 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fd fe55 	bl	800b9be <get_fat>
 800dd14:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800dd16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d802      	bhi.n	800dd22 <f_open+0x2de>
 800dd1c:	2302      	movs	r3, #2
 800dd1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dd22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd28:	d102      	bne.n	800dd30 <f_open+0x2ec>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dd32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd34:	1ad3      	subs	r3, r2, r3
 800dd36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dd38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d103      	bne.n	800dd48 <f_open+0x304>
 800dd40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dd42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d8e0      	bhi.n	800dd0a <f_open+0x2c6>
				}
				fp->clust = clst;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dd4c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd4e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d131      	bne.n	800ddba <f_open+0x376>
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	899b      	ldrh	r3, [r3, #12]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd62:	fb01 f202 	mul.w	r2, r1, r2
 800dd66:	1a9b      	subs	r3, r3, r2
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d026      	beq.n	800ddba <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fd fe05 	bl	800b980 <clust2sect>
 800dd76:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800dd78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d103      	bne.n	800dd86 <f_open+0x342>
						res = FR_INT_ERR;
 800dd7e:	2302      	movs	r3, #2
 800dd80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dd84:	e019      	b.n	800ddba <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	899b      	ldrh	r3, [r3, #12]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dd8e:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd94:	441a      	add	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	7858      	ldrb	r0, [r3, #1]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6a1a      	ldr	r2, [r3, #32]
 800dda8:	2301      	movs	r3, #1
 800ddaa:	f7f2 ff39 	bl	8000c20 <disk_read>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d002      	beq.n	800ddba <f_open+0x376>
 800ddb4:	2301      	movs	r3, #1
 800ddb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ddba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <f_open+0x384>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ddc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3768      	adds	r7, #104	@ 0x68
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b08c      	sub	sp, #48	@ 0x30
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
 800dde0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f107 0210 	add.w	r2, r7, #16
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff fda9 	bl	800d94c <validate>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800de00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de04:	2b00      	cmp	r3, #0
 800de06:	d107      	bne.n	800de18 <f_write+0x44>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	7d5b      	ldrb	r3, [r3, #21]
 800de0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800de10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de14:	2b00      	cmp	r3, #0
 800de16:	d002      	beq.n	800de1e <f_write+0x4a>
 800de18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800de1c:	e16a      	b.n	800e0f4 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	7d1b      	ldrb	r3, [r3, #20]
 800de22:	f003 0302 	and.w	r3, r3, #2
 800de26:	2b00      	cmp	r3, #0
 800de28:	d101      	bne.n	800de2e <f_write+0x5a>
 800de2a:	2307      	movs	r3, #7
 800de2c:	e162      	b.n	800e0f4 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	699a      	ldr	r2, [r3, #24]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	441a      	add	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	f080 814c 	bcs.w	800e0d8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	699b      	ldr	r3, [r3, #24]
 800de44:	43db      	mvns	r3, r3
 800de46:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800de48:	e146      	b.n	800e0d8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	693a      	ldr	r2, [r7, #16]
 800de50:	8992      	ldrh	r2, [r2, #12]
 800de52:	fbb3 f1f2 	udiv	r1, r3, r2
 800de56:	fb01 f202 	mul.w	r2, r1, r2
 800de5a:	1a9b      	subs	r3, r3, r2
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f040 80f1 	bne.w	800e044 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	699b      	ldr	r3, [r3, #24]
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	8992      	ldrh	r2, [r2, #12]
 800de6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800de6e:	693a      	ldr	r2, [r7, #16]
 800de70:	8952      	ldrh	r2, [r2, #10]
 800de72:	3a01      	subs	r2, #1
 800de74:	4013      	ands	r3, r2
 800de76:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800de78:	69bb      	ldr	r3, [r7, #24]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d143      	bne.n	800df06 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	699b      	ldr	r3, [r3, #24]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d10c      	bne.n	800dea0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	689b      	ldr	r3, [r3, #8]
 800de8a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800de8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d11a      	bne.n	800dec8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2100      	movs	r1, #0
 800de96:	4618      	mov	r0, r3
 800de98:	f7fd ffe3 	bl	800be62 <create_chain>
 800de9c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800de9e:	e013      	b.n	800dec8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d007      	beq.n	800deb8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	699b      	ldr	r3, [r3, #24]
 800deac:	4619      	mov	r1, r3
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f7fe f86f 	bl	800bf92 <clmt_clust>
 800deb4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800deb6:	e007      	b.n	800dec8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	69db      	ldr	r3, [r3, #28]
 800debe:	4619      	mov	r1, r3
 800dec0:	4610      	mov	r0, r2
 800dec2:	f7fd ffce 	bl	800be62 <create_chain>
 800dec6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deca:	2b00      	cmp	r3, #0
 800decc:	f000 8109 	beq.w	800e0e2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ded0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d104      	bne.n	800dee0 <f_write+0x10c>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2202      	movs	r2, #2
 800deda:	755a      	strb	r2, [r3, #21]
 800dedc:	2302      	movs	r3, #2
 800dede:	e109      	b.n	800e0f4 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee6:	d104      	bne.n	800def2 <f_write+0x11e>
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2201      	movs	r2, #1
 800deec:	755a      	strb	r2, [r3, #21]
 800deee:	2301      	movs	r3, #1
 800def0:	e100      	b.n	800e0f4 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800def6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <f_write+0x132>
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800df04:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	7d1b      	ldrb	r3, [r3, #20]
 800df0a:	b25b      	sxtb	r3, r3
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	da18      	bge.n	800df42 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	7858      	ldrb	r0, [r3, #1]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6a1a      	ldr	r2, [r3, #32]
 800df1e:	2301      	movs	r3, #1
 800df20:	f7f2 fe9e 	bl	8000c60 <disk_write>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d004      	beq.n	800df34 <f_write+0x160>
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2201      	movs	r2, #1
 800df2e:	755a      	strb	r2, [r3, #21]
 800df30:	2301      	movs	r3, #1
 800df32:	e0df      	b.n	800e0f4 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	7d1b      	ldrb	r3, [r3, #20]
 800df38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800df42:	693a      	ldr	r2, [r7, #16]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	69db      	ldr	r3, [r3, #28]
 800df48:	4619      	mov	r1, r3
 800df4a:	4610      	mov	r0, r2
 800df4c:	f7fd fd18 	bl	800b980 <clust2sect>
 800df50:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d104      	bne.n	800df62 <f_write+0x18e>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2202      	movs	r2, #2
 800df5c:	755a      	strb	r2, [r3, #21]
 800df5e:	2302      	movs	r3, #2
 800df60:	e0c8      	b.n	800e0f4 <f_write+0x320>
			sect += csect;
 800df62:	697a      	ldr	r2, [r7, #20]
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	4413      	add	r3, r2
 800df68:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	461a      	mov	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	fbb3 f3f2 	udiv	r3, r3, r2
 800df76:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800df78:	6a3b      	ldr	r3, [r7, #32]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d043      	beq.n	800e006 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800df7e:	69ba      	ldr	r2, [r7, #24]
 800df80:	6a3b      	ldr	r3, [r7, #32]
 800df82:	4413      	add	r3, r2
 800df84:	693a      	ldr	r2, [r7, #16]
 800df86:	8952      	ldrh	r2, [r2, #10]
 800df88:	4293      	cmp	r3, r2
 800df8a:	d905      	bls.n	800df98 <f_write+0x1c4>
					cc = fs->csize - csect;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	895b      	ldrh	r3, [r3, #10]
 800df90:	461a      	mov	r2, r3
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	7858      	ldrb	r0, [r3, #1]
 800df9c:	6a3b      	ldr	r3, [r7, #32]
 800df9e:	697a      	ldr	r2, [r7, #20]
 800dfa0:	69f9      	ldr	r1, [r7, #28]
 800dfa2:	f7f2 fe5d 	bl	8000c60 <disk_write>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d004      	beq.n	800dfb6 <f_write+0x1e2>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	755a      	strb	r2, [r3, #21]
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e09e      	b.n	800e0f4 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6a1a      	ldr	r2, [r3, #32]
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	6a3a      	ldr	r2, [r7, #32]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d918      	bls.n	800dff6 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	6a1a      	ldr	r2, [r3, #32]
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	8992      	ldrh	r2, [r2, #12]
 800dfd6:	fb02 f303 	mul.w	r3, r2, r3
 800dfda:	69fa      	ldr	r2, [r7, #28]
 800dfdc:	18d1      	adds	r1, r2, r3
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	899b      	ldrh	r3, [r3, #12]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	f7fd fa00 	bl	800b3e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	7d1b      	ldrb	r3, [r3, #20]
 800dfec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	899b      	ldrh	r3, [r3, #12]
 800dffa:	461a      	mov	r2, r3
 800dffc:	6a3b      	ldr	r3, [r7, #32]
 800dffe:	fb02 f303 	mul.w	r3, r2, r3
 800e002:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e004:	e04b      	b.n	800e09e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	6a1b      	ldr	r3, [r3, #32]
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d016      	beq.n	800e03e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	699a      	ldr	r2, [r3, #24]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e018:	429a      	cmp	r2, r3
 800e01a:	d210      	bcs.n	800e03e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	7858      	ldrb	r0, [r3, #1]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e026:	2301      	movs	r3, #1
 800e028:	697a      	ldr	r2, [r7, #20]
 800e02a:	f7f2 fdf9 	bl	8000c20 <disk_read>
 800e02e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e030:	2b00      	cmp	r3, #0
 800e032:	d004      	beq.n	800e03e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2201      	movs	r2, #1
 800e038:	755a      	strb	r2, [r3, #21]
 800e03a:	2301      	movs	r3, #1
 800e03c:	e05a      	b.n	800e0f4 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	697a      	ldr	r2, [r7, #20]
 800e042:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	899b      	ldrh	r3, [r3, #12]
 800e048:	4618      	mov	r0, r3
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	699b      	ldr	r3, [r3, #24]
 800e04e:	693a      	ldr	r2, [r7, #16]
 800e050:	8992      	ldrh	r2, [r2, #12]
 800e052:	fbb3 f1f2 	udiv	r1, r3, r2
 800e056:	fb01 f202 	mul.w	r2, r1, r2
 800e05a:	1a9b      	subs	r3, r3, r2
 800e05c:	1ac3      	subs	r3, r0, r3
 800e05e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	429a      	cmp	r2, r3
 800e066:	d901      	bls.n	800e06c <f_write+0x298>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	693a      	ldr	r2, [r7, #16]
 800e078:	8992      	ldrh	r2, [r2, #12]
 800e07a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e07e:	fb00 f202 	mul.w	r2, r0, r2
 800e082:	1a9b      	subs	r3, r3, r2
 800e084:	440b      	add	r3, r1
 800e086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e088:	69f9      	ldr	r1, [r7, #28]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fd f9ac 	bl	800b3e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	7d1b      	ldrb	r3, [r3, #20]
 800e094:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e098:	b2da      	uxtb	r2, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e09e:	69fa      	ldr	r2, [r7, #28]
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a2:	4413      	add	r3, r2
 800e0a4:	61fb      	str	r3, [r7, #28]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	699a      	ldr	r2, [r3, #24]
 800e0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ac:	441a      	add	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	619a      	str	r2, [r3, #24]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	68da      	ldr	r2, [r3, #12]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	699b      	ldr	r3, [r3, #24]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	bf38      	it	cc
 800e0be:	461a      	movcc	r2, r3
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	60da      	str	r2, [r3, #12]
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ca:	441a      	add	r2, r3
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d4:	1ad3      	subs	r3, r2, r3
 800e0d6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	f47f aeb5 	bne.w	800de4a <f_write+0x76>
 800e0e0:	e000      	b.n	800e0e4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e0e2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	7d1b      	ldrb	r3, [r3, #20]
 800e0e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3730      	adds	r7, #48	@ 0x30
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f107 0208 	add.w	r2, r7, #8
 800e10a:	4611      	mov	r1, r2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7ff fc1d 	bl	800d94c <validate>
 800e112:	4603      	mov	r3, r0
 800e114:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e116:	7dfb      	ldrb	r3, [r7, #23]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d168      	bne.n	800e1ee <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	7d1b      	ldrb	r3, [r3, #20]
 800e120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e124:	2b00      	cmp	r3, #0
 800e126:	d062      	beq.n	800e1ee <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	7d1b      	ldrb	r3, [r3, #20]
 800e12c:	b25b      	sxtb	r3, r3
 800e12e:	2b00      	cmp	r3, #0
 800e130:	da15      	bge.n	800e15e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	7858      	ldrb	r0, [r3, #1]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6a1a      	ldr	r2, [r3, #32]
 800e140:	2301      	movs	r3, #1
 800e142:	f7f2 fd8d 	bl	8000c60 <disk_write>
 800e146:	4603      	mov	r3, r0
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d001      	beq.n	800e150 <f_sync+0x54>
 800e14c:	2301      	movs	r3, #1
 800e14e:	e04f      	b.n	800e1f0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	7d1b      	ldrb	r3, [r3, #20]
 800e154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e15e:	f7f2 fdcf 	bl	8000d00 <get_fattime>
 800e162:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e164:	68ba      	ldr	r2, [r7, #8]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e16a:	4619      	mov	r1, r3
 800e16c:	4610      	mov	r0, r2
 800e16e:	f7fd fb69 	bl	800b844 <move_window>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d138      	bne.n	800e1ee <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e180:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	330b      	adds	r3, #11
 800e186:	781a      	ldrb	r2, [r3, #0]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	330b      	adds	r3, #11
 800e18c:	f042 0220 	orr.w	r2, r2, #32
 800e190:	b2d2      	uxtb	r2, r2
 800e192:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6818      	ldr	r0, [r3, #0]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	689b      	ldr	r3, [r3, #8]
 800e19c:	461a      	mov	r2, r3
 800e19e:	68f9      	ldr	r1, [r7, #12]
 800e1a0:	f7fe f8f4 	bl	800c38c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f103 021c 	add.w	r2, r3, #28
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	4610      	mov	r0, r2
 800e1b2:	f7fd f8ed 	bl	800b390 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	3316      	adds	r3, #22
 800e1ba:	6939      	ldr	r1, [r7, #16]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fd f8e7 	bl	800b390 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	3312      	adds	r3, #18
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fd f8c6 	bl	800b35a <st_word>
					fs->wflag = 1;
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fd fb62 	bl	800b8a0 <sync_fs>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	7d1b      	ldrb	r3, [r3, #20]
 800e1e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7ff ff7b 	bl	800e0fc <f_sync>
 800e206:	4603      	mov	r3, r0
 800e208:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e20a:	7bfb      	ldrb	r3, [r7, #15]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d118      	bne.n	800e242 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f107 0208 	add.w	r2, r7, #8
 800e216:	4611      	mov	r1, r2
 800e218:	4618      	mov	r0, r3
 800e21a:	f7ff fb97 	bl	800d94c <validate>
 800e21e:	4603      	mov	r3, r0
 800e220:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e222:	7bfb      	ldrb	r3, [r7, #15]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10c      	bne.n	800e242 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	691b      	ldr	r3, [r3, #16]
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fd fa65 	bl	800b6fc <dec_lock>
 800e232:	4603      	mov	r3, r0
 800e234:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e236:	7bfb      	ldrb	r3, [r7, #15]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d102      	bne.n	800e242 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e242:	7bfb      	ldrb	r3, [r7, #15]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3710      	adds	r7, #16
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b090      	sub	sp, #64	@ 0x40
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f107 0208 	add.w	r2, r7, #8
 800e25c:	4611      	mov	r1, r2
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff fb74 	bl	800d94c <validate>
 800e264:	4603      	mov	r3, r0
 800e266:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e26a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d103      	bne.n	800e27a <f_lseek+0x2e>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	7d5b      	ldrb	r3, [r3, #21]
 800e276:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e27a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d002      	beq.n	800e288 <f_lseek+0x3c>
 800e282:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e286:	e201      	b.n	800e68c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 80d9 	beq.w	800e444 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e298:	d15a      	bne.n	800e350 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e29e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2a2:	1d1a      	adds	r2, r3, #4
 800e2a4:	627a      	str	r2, [r7, #36]	@ 0x24
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	617b      	str	r3, [r7, #20]
 800e2aa:	2302      	movs	r3, #2
 800e2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	689b      	ldr	r3, [r3, #8]
 800e2b2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d03a      	beq.n	800e330 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2bc:	613b      	str	r3, [r7, #16]
 800e2be:	2300      	movs	r3, #0
 800e2c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c4:	3302      	adds	r3, #2
 800e2c6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e2c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ca:	60fb      	str	r3, [r7, #12]
 800e2cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fd fb71 	bl	800b9be <get_fat>
 800e2dc:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d804      	bhi.n	800e2ee <f_lseek+0xa2>
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	755a      	strb	r2, [r3, #21]
 800e2ea:	2302      	movs	r3, #2
 800e2ec:	e1ce      	b.n	800e68c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f4:	d104      	bne.n	800e300 <f_lseek+0xb4>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	755a      	strb	r2, [r3, #21]
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e1c5      	b.n	800e68c <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	3301      	adds	r3, #1
 800e304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e306:	429a      	cmp	r2, r3
 800e308:	d0de      	beq.n	800e2c8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e30a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d809      	bhi.n	800e326 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e314:	1d1a      	adds	r2, r3, #4
 800e316:	627a      	str	r2, [r7, #36]	@ 0x24
 800e318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e31a:	601a      	str	r2, [r3, #0]
 800e31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e31e:	1d1a      	adds	r2, r3, #4
 800e320:	627a      	str	r2, [r7, #36]	@ 0x24
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	69db      	ldr	r3, [r3, #28]
 800e32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d3c4      	bcc.n	800e2ba <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e336:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e338:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d803      	bhi.n	800e348 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e342:	2200      	movs	r2, #0
 800e344:	601a      	str	r2, [r3, #0]
 800e346:	e19f      	b.n	800e688 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e348:	2311      	movs	r3, #17
 800e34a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e34e:	e19b      	b.n	800e688 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	683a      	ldr	r2, [r7, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d902      	bls.n	800e360 <f_lseek+0x114>
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f000 818d 	beq.w	800e688 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	3b01      	subs	r3, #1
 800e372:	4619      	mov	r1, r3
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f7fd fe0c 	bl	800bf92 <clmt_clust>
 800e37a:	4602      	mov	r2, r0
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	69db      	ldr	r3, [r3, #28]
 800e386:	4619      	mov	r1, r3
 800e388:	4610      	mov	r0, r2
 800e38a:	f7fd faf9 	bl	800b980 <clust2sect>
 800e38e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d104      	bne.n	800e3a0 <f_lseek+0x154>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2202      	movs	r2, #2
 800e39a:	755a      	strb	r2, [r3, #21]
 800e39c:	2302      	movs	r3, #2
 800e39e:	e175      	b.n	800e68c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	3b01      	subs	r3, #1
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	8992      	ldrh	r2, [r2, #12]
 800e3a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	8952      	ldrh	r2, [r2, #10]
 800e3b0:	3a01      	subs	r2, #1
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	69ba      	ldr	r2, [r7, #24]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	699b      	ldr	r3, [r3, #24]
 800e3be:	68ba      	ldr	r2, [r7, #8]
 800e3c0:	8992      	ldrh	r2, [r2, #12]
 800e3c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3c6:	fb01 f202 	mul.w	r2, r1, r2
 800e3ca:	1a9b      	subs	r3, r3, r2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 815b 	beq.w	800e688 <f_lseek+0x43c>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a1b      	ldr	r3, [r3, #32]
 800e3d6:	69ba      	ldr	r2, [r7, #24]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	f000 8155 	beq.w	800e688 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7d1b      	ldrb	r3, [r3, #20]
 800e3e2:	b25b      	sxtb	r3, r3
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	da18      	bge.n	800e41a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	7858      	ldrb	r0, [r3, #1]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6a1a      	ldr	r2, [r3, #32]
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f7f2 fc32 	bl	8000c60 <disk_write>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d004      	beq.n	800e40c <f_lseek+0x1c0>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2201      	movs	r2, #1
 800e406:	755a      	strb	r2, [r3, #21]
 800e408:	2301      	movs	r3, #1
 800e40a:	e13f      	b.n	800e68c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	7d1b      	ldrb	r3, [r3, #20]
 800e410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e414:	b2da      	uxtb	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	7858      	ldrb	r0, [r3, #1]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e424:	2301      	movs	r3, #1
 800e426:	69ba      	ldr	r2, [r7, #24]
 800e428:	f7f2 fbfa 	bl	8000c20 <disk_read>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d004      	beq.n	800e43c <f_lseek+0x1f0>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	755a      	strb	r2, [r3, #21]
 800e438:	2301      	movs	r3, #1
 800e43a:	e127      	b.n	800e68c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	621a      	str	r2, [r3, #32]
 800e442:	e121      	b.n	800e688 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	683a      	ldr	r2, [r7, #0]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d908      	bls.n	800e460 <f_lseek+0x214>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	7d1b      	ldrb	r3, [r3, #20]
 800e452:	f003 0302 	and.w	r3, r3, #2
 800e456:	2b00      	cmp	r3, #0
 800e458:	d102      	bne.n	800e460 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	68db      	ldr	r3, [r3, #12]
 800e45e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	699b      	ldr	r3, [r3, #24]
 800e464:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e466:	2300      	movs	r3, #0
 800e468:	637b      	str	r3, [r7, #52]	@ 0x34
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e46e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	f000 80b5 	beq.w	800e5e2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	895b      	ldrh	r3, [r3, #10]
 800e47c:	461a      	mov	r2, r3
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	899b      	ldrh	r3, [r3, #12]
 800e482:	fb02 f303 	mul.w	r3, r2, r3
 800e486:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e488:	6a3b      	ldr	r3, [r7, #32]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d01b      	beq.n	800e4c6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	1e5a      	subs	r2, r3, #1
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	fbb2 f2f3 	udiv	r2, r2, r3
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	1e59      	subs	r1, r3, #1
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d30f      	bcc.n	800e4c6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	1e5a      	subs	r2, r3, #1
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	425b      	negs	r3, r3
 800e4ae:	401a      	ands	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	683a      	ldr	r2, [r7, #0]
 800e4ba:	1ad3      	subs	r3, r2, r3
 800e4bc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	69db      	ldr	r3, [r3, #28]
 800e4c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e4c4:	e022      	b.n	800e50c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	689b      	ldr	r3, [r3, #8]
 800e4ca:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d119      	bne.n	800e506 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fd fcc3 	bl	800be62 <create_chain>
 800e4dc:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d104      	bne.n	800e4ee <f_lseek+0x2a2>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	755a      	strb	r2, [r3, #21]
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	e0ce      	b.n	800e68c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f4:	d104      	bne.n	800e500 <f_lseek+0x2b4>
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	755a      	strb	r2, [r3, #21]
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e0c5      	b.n	800e68c <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e504:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e50a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d067      	beq.n	800e5e2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e512:	e03a      	b.n	800e58a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	69fb      	ldr	r3, [r7, #28]
 800e518:	1ad3      	subs	r3, r2, r3
 800e51a:	603b      	str	r3, [r7, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	699a      	ldr	r2, [r3, #24]
 800e520:	69fb      	ldr	r3, [r7, #28]
 800e522:	441a      	add	r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	7d1b      	ldrb	r3, [r3, #20]
 800e52c:	f003 0302 	and.w	r3, r3, #2
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fd fc92 	bl	800be62 <create_chain>
 800e53e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e542:	2b00      	cmp	r3, #0
 800e544:	d108      	bne.n	800e558 <f_lseek+0x30c>
							ofs = 0; break;
 800e546:	2300      	movs	r3, #0
 800e548:	603b      	str	r3, [r7, #0]
 800e54a:	e022      	b.n	800e592 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e550:	4618      	mov	r0, r3
 800e552:	f7fd fa34 	bl	800b9be <get_fat>
 800e556:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e55e:	d104      	bne.n	800e56a <f_lseek+0x31e>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	755a      	strb	r2, [r3, #21]
 800e566:	2301      	movs	r3, #1
 800e568:	e090      	b.n	800e68c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d904      	bls.n	800e57a <f_lseek+0x32e>
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	69db      	ldr	r3, [r3, #28]
 800e574:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e576:	429a      	cmp	r2, r3
 800e578:	d304      	bcc.n	800e584 <f_lseek+0x338>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2202      	movs	r2, #2
 800e57e:	755a      	strb	r2, [r3, #21]
 800e580:	2302      	movs	r3, #2
 800e582:	e083      	b.n	800e68c <f_lseek+0x440>
					fp->clust = clst;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e588:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e58a:	683a      	ldr	r2, [r7, #0]
 800e58c:	69fb      	ldr	r3, [r7, #28]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d8c0      	bhi.n	800e514 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	699a      	ldr	r2, [r3, #24]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	441a      	add	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	899b      	ldrh	r3, [r3, #12]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5aa:	fb01 f202 	mul.w	r2, r1, r2
 800e5ae:	1a9b      	subs	r3, r3, r2
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d016      	beq.n	800e5e2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fd f9e1 	bl	800b980 <clust2sect>
 800e5be:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d104      	bne.n	800e5d0 <f_lseek+0x384>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2202      	movs	r2, #2
 800e5ca:	755a      	strb	r2, [r3, #21]
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	e05d      	b.n	800e68c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	899b      	ldrh	r3, [r3, #12]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5de:	4413      	add	r3, r2
 800e5e0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	699a      	ldr	r2, [r3, #24]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d90a      	bls.n	800e604 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	699a      	ldr	r2, [r3, #24]
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	7d1b      	ldrb	r3, [r3, #20]
 800e5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5fe:	b2da      	uxtb	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	699b      	ldr	r3, [r3, #24]
 800e608:	68ba      	ldr	r2, [r7, #8]
 800e60a:	8992      	ldrh	r2, [r2, #12]
 800e60c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e610:	fb01 f202 	mul.w	r2, r1, r2
 800e614:	1a9b      	subs	r3, r3, r2
 800e616:	2b00      	cmp	r3, #0
 800e618:	d036      	beq.n	800e688 <f_lseek+0x43c>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6a1b      	ldr	r3, [r3, #32]
 800e61e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e620:	429a      	cmp	r2, r3
 800e622:	d031      	beq.n	800e688 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	7d1b      	ldrb	r3, [r3, #20]
 800e628:	b25b      	sxtb	r3, r3
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	da18      	bge.n	800e660 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	7858      	ldrb	r0, [r3, #1]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a1a      	ldr	r2, [r3, #32]
 800e63c:	2301      	movs	r3, #1
 800e63e:	f7f2 fb0f 	bl	8000c60 <disk_write>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <f_lseek+0x406>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2201      	movs	r2, #1
 800e64c:	755a      	strb	r2, [r3, #21]
 800e64e:	2301      	movs	r3, #1
 800e650:	e01c      	b.n	800e68c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	7d1b      	ldrb	r3, [r3, #20]
 800e656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	7858      	ldrb	r0, [r3, #1]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e66a:	2301      	movs	r3, #1
 800e66c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e66e:	f7f2 fad7 	bl	8000c20 <disk_read>
 800e672:	4603      	mov	r3, r0
 800e674:	2b00      	cmp	r3, #0
 800e676:	d004      	beq.n	800e682 <f_lseek+0x436>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2201      	movs	r2, #1
 800e67c:	755a      	strb	r2, [r3, #21]
 800e67e:	2301      	movs	r3, #1
 800e680:	e004      	b.n	800e68c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e686:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e688:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3740      	adds	r7, #64	@ 0x40
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b086      	sub	sp, #24
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d101      	bne.n	800e6a8 <f_opendir+0x14>
 800e6a4:	2309      	movs	r3, #9
 800e6a6:	e064      	b.n	800e772 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e6ac:	f107 010c 	add.w	r1, r7, #12
 800e6b0:	463b      	mov	r3, r7
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7fe fec3 	bl	800d440 <find_volume>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e6be:	7dfb      	ldrb	r3, [r7, #23]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d14f      	bne.n	800e764 <f_opendir+0xd0>
		obj->fs = fs;
 800e6c4:	68fa      	ldr	r2, [r7, #12]
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f7fe fda6 	bl	800d220 <follow_path>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e6d8:	7dfb      	ldrb	r3, [r7, #23]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d13d      	bne.n	800e75a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e6e4:	b25b      	sxtb	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	db12      	blt.n	800e710 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	799b      	ldrb	r3, [r3, #6]
 800e6ee:	f003 0310 	and.w	r3, r3, #16
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d00a      	beq.n	800e70c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e6f6:	68fa      	ldr	r2, [r7, #12]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6a1b      	ldr	r3, [r3, #32]
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4610      	mov	r0, r2
 800e700:	f7fd fe25 	bl	800c34e <ld_clust>
 800e704:	4602      	mov	r2, r0
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	609a      	str	r2, [r3, #8]
 800e70a:	e001      	b.n	800e710 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e70c:	2305      	movs	r3, #5
 800e70e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e710:	7dfb      	ldrb	r3, [r7, #23]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d121      	bne.n	800e75a <f_opendir+0xc6>
				obj->id = fs->id;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	88da      	ldrh	r2, [r3, #6]
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e71e:	2100      	movs	r1, #0
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7fd fc6e 	bl	800c002 <dir_sdi>
 800e726:	4603      	mov	r3, r0
 800e728:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e72a:	7dfb      	ldrb	r3, [r7, #23]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d114      	bne.n	800e75a <f_opendir+0xc6>
					if (obj->sclust) {
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	689b      	ldr	r3, [r3, #8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d00d      	beq.n	800e754 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e738:	2100      	movs	r1, #0
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7fc ff50 	bl	800b5e0 <inc_lock>
 800e740:	4602      	mov	r2, r0
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	691b      	ldr	r3, [r3, #16]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d105      	bne.n	800e75a <f_opendir+0xc6>
 800e74e:	2312      	movs	r3, #18
 800e750:	75fb      	strb	r3, [r7, #23]
 800e752:	e002      	b.n	800e75a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	2200      	movs	r2, #0
 800e758:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e75a:	7dfb      	ldrb	r3, [r7, #23]
 800e75c:	2b04      	cmp	r3, #4
 800e75e:	d101      	bne.n	800e764 <f_opendir+0xd0>
 800e760:	2305      	movs	r3, #5
 800e762:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e764:	7dfb      	ldrb	r3, [r7, #23]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d002      	beq.n	800e770 <f_opendir+0xdc>
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	2200      	movs	r2, #0
 800e76e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e770:	7dfb      	ldrb	r3, [r7, #23]
}
 800e772:	4618      	mov	r0, r3
 800e774:	3718      	adds	r7, #24
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b084      	sub	sp, #16
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f107 0208 	add.w	r2, r7, #8
 800e788:	4611      	mov	r1, r2
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7ff f8de 	bl	800d94c <validate>
 800e790:	4603      	mov	r3, r0
 800e792:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e794:	7bfb      	ldrb	r3, [r7, #15]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d110      	bne.n	800e7bc <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	691b      	ldr	r3, [r3, #16]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d006      	beq.n	800e7b0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7fc ffa8 	bl	800b6fc <dec_lock>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e7b0:	7bfb      	ldrb	r3, [r7, #15]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d102      	bne.n	800e7bc <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3710      	adds	r7, #16
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f107 0208 	add.w	r2, r7, #8
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff f8b7 	bl	800d94c <validate>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e7e2:	7bfb      	ldrb	r3, [r7, #15]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d126      	bne.n	800e836 <f_readdir+0x70>
		if (!fno) {
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d106      	bne.n	800e7fc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f7fd fc06 	bl	800c002 <dir_sdi>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	73fb      	strb	r3, [r7, #15]
 800e7fa:	e01c      	b.n	800e836 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7fd ffcf 	bl	800c7a2 <dir_read>
 800e804:	4603      	mov	r3, r0
 800e806:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e808:	7bfb      	ldrb	r3, [r7, #15]
 800e80a:	2b04      	cmp	r3, #4
 800e80c:	d101      	bne.n	800e812 <f_readdir+0x4c>
 800e80e:	2300      	movs	r3, #0
 800e810:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e812:	7bfb      	ldrb	r3, [r7, #15]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d10e      	bne.n	800e836 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7fe fa6a 	bl	800ccf4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e820:	2100      	movs	r1, #0
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f7fd fc76 	bl	800c114 <dir_next>
 800e828:	4603      	mov	r3, r0
 800e82a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e82c:	7bfb      	ldrb	r3, [r7, #15]
 800e82e:	2b04      	cmp	r3, #4
 800e830:	d101      	bne.n	800e836 <f_readdir+0x70>
 800e832:	2300      	movs	r3, #0
 800e834:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e836:	7bfb      	ldrb	r3, [r7, #15]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b090      	sub	sp, #64	@ 0x40
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e84a:	f107 0108 	add.w	r1, r7, #8
 800e84e:	1d3b      	adds	r3, r7, #4
 800e850:	2200      	movs	r2, #0
 800e852:	4618      	mov	r0, r3
 800e854:	f7fe fdf4 	bl	800d440 <find_volume>
 800e858:	4603      	mov	r3, r0
 800e85a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800e85e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e862:	2b00      	cmp	r3, #0
 800e864:	d11f      	bne.n	800e8a6 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	f107 0308 	add.w	r3, r7, #8
 800e86c:	4611      	mov	r1, r2
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe fcd6 	bl	800d220 <follow_path>
 800e874:	4603      	mov	r3, r0
 800e876:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800e87a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d111      	bne.n	800e8a6 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e882:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e886:	b25b      	sxtb	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	da03      	bge.n	800e894 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e88c:	2306      	movs	r3, #6
 800e88e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e892:	e008      	b.n	800e8a6 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d005      	beq.n	800e8a6 <f_stat+0x66>
 800e89a:	f107 0308 	add.w	r3, r7, #8
 800e89e:	6839      	ldr	r1, [r7, #0]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fe fa27 	bl	800ccf4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e8a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3740      	adds	r7, #64	@ 0x40
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b092      	sub	sp, #72	@ 0x48
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	60f8      	str	r0, [r7, #12]
 800e8ba:	60b9      	str	r1, [r7, #8]
 800e8bc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e8be:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e8c2:	f107 030c 	add.w	r3, r7, #12
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7fe fdb9 	bl	800d440 <find_volume>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800e8d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f040 8099 	bne.w	800ea10 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e8de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e6:	699a      	ldr	r2, [r3, #24]
 800e8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ea:	69db      	ldr	r3, [r3, #28]
 800e8ec:	3b02      	subs	r3, #2
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d804      	bhi.n	800e8fc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e8f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8f4:	699a      	ldr	r2, [r3, #24]
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	e089      	b.n	800ea10 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b01      	cmp	r3, #1
 800e906:	d128      	bne.n	800e95a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e908:	2302      	movs	r3, #2
 800e90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e90e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800e910:	f107 0314 	add.w	r3, r7, #20
 800e914:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e916:	4618      	mov	r0, r3
 800e918:	f7fd f851 	bl	800b9be <get_fat>
 800e91c:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e924:	d103      	bne.n	800e92e <f_getfree+0x7c>
 800e926:	2301      	movs	r3, #1
 800e928:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e92c:	e063      	b.n	800e9f6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e930:	2b01      	cmp	r3, #1
 800e932:	d103      	bne.n	800e93c <f_getfree+0x8a>
 800e934:	2302      	movs	r3, #2
 800e936:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800e93a:	e05c      	b.n	800e9f6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800e93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d102      	bne.n	800e948 <f_getfree+0x96>
 800e942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e944:	3301      	adds	r3, #1
 800e946:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800e948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e94a:	3301      	adds	r3, #1
 800e94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e950:	69db      	ldr	r3, [r3, #28]
 800e952:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e954:	429a      	cmp	r2, r3
 800e956:	d3db      	bcc.n	800e910 <f_getfree+0x5e>
 800e958:	e04d      	b.n	800e9f6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800e95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95c:	69db      	ldr	r3, [r3, #28]
 800e95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e964:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800e966:	2300      	movs	r3, #0
 800e968:	637b      	str	r3, [r7, #52]	@ 0x34
 800e96a:	2300      	movs	r3, #0
 800e96c:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800e96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e970:	2b00      	cmp	r3, #0
 800e972:	d113      	bne.n	800e99c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800e974:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e978:	1c5a      	adds	r2, r3, #1
 800e97a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e97c:	4619      	mov	r1, r3
 800e97e:	f7fc ff61 	bl	800b844 <move_window>
 800e982:	4603      	mov	r3, r0
 800e984:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800e988:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d131      	bne.n	800e9f4 <f_getfree+0x142>
							p = fs->win;
 800e990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e992:	3338      	adds	r3, #56	@ 0x38
 800e994:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e998:	899b      	ldrh	r3, [r3, #12]
 800e99a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800e99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	2b02      	cmp	r3, #2
 800e9a2:	d10f      	bne.n	800e9c4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800e9a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9a6:	f7fc fc9d 	bl	800b2e4 <ld_word>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d102      	bne.n	800e9b6 <f_getfree+0x104>
 800e9b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800e9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b8:	3302      	adds	r3, #2
 800e9ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9be:	3b02      	subs	r3, #2
 800e9c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9c2:	e010      	b.n	800e9e6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800e9c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e9c6:	f7fc fca5 	bl	800b314 <ld_dword>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d102      	bne.n	800e9da <f_getfree+0x128>
 800e9d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800e9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9dc:	3304      	adds	r3, #4
 800e9de:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9e2:	3b04      	subs	r3, #4
 800e9e4:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800e9e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d1bd      	bne.n	800e96e <f_getfree+0xbc>
 800e9f2:	e000      	b.n	800e9f6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800e9f4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e9fa:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800e9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ea00:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ea02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea04:	791a      	ldrb	r2, [r3, #4]
 800ea06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea08:	f042 0201 	orr.w	r2, r2, #1
 800ea0c:	b2d2      	uxtb	r2, r2
 800ea0e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ea10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3748      	adds	r7, #72	@ 0x48
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b0a0      	sub	sp, #128	@ 0x80
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800ea24:	2300      	movs	r3, #0
 800ea26:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ea28:	f107 010c 	add.w	r1, r7, #12
 800ea2c:	1d3b      	adds	r3, r7, #4
 800ea2e:	2202      	movs	r2, #2
 800ea30:	4618      	mov	r0, r3
 800ea32:	f7fe fd05 	bl	800d440 <find_volume>
 800ea36:	4603      	mov	r3, r0
 800ea38:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 800ea40:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f040 808e 	bne.w	800eb66 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800ea4a:	687a      	ldr	r2, [r7, #4]
 800ea4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ea50:	4611      	mov	r1, r2
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fe fbe4 	bl	800d220 <follow_path>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800ea5e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d108      	bne.n	800ea78 <f_unlink+0x5c>
 800ea66:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ea6a:	2102      	movs	r1, #2
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7fc fd39 	bl	800b4e4 <chk_lock>
 800ea72:	4603      	mov	r3, r0
 800ea74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ea78:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d172      	bne.n	800eb66 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ea80:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ea84:	b25b      	sxtb	r3, r3
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	da03      	bge.n	800ea92 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ea8a:	2306      	movs	r3, #6
 800ea8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ea90:	e008      	b.n	800eaa4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ea92:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ea96:	f003 0301 	and.w	r3, r3, #1
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ea9e:	2307      	movs	r3, #7
 800eaa0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 800eaa4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d134      	bne.n	800eb16 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800eab0:	4611      	mov	r1, r2
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fd fc4b 	bl	800c34e <ld_clust>
 800eab8:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800eaba:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800eabe:	f003 0310 	and.w	r3, r3, #16
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d027      	beq.n	800eb16 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800eaca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eacc:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800eace:	f107 0310 	add.w	r3, r7, #16
 800ead2:	2100      	movs	r1, #0
 800ead4:	4618      	mov	r0, r3
 800ead6:	f7fd fa94 	bl	800c002 <dir_sdi>
 800eada:	4603      	mov	r3, r0
 800eadc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 800eae0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d116      	bne.n	800eb16 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800eae8:	f107 0310 	add.w	r3, r7, #16
 800eaec:	2100      	movs	r1, #0
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fd fe57 	bl	800c7a2 <dir_read>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800eafa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <f_unlink+0xec>
 800eb02:	2307      	movs	r3, #7
 800eb04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800eb08:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb0c:	2b04      	cmp	r3, #4
 800eb0e:	d102      	bne.n	800eb16 <f_unlink+0xfa>
 800eb10:	2300      	movs	r3, #0
 800eb12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800eb16:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d123      	bne.n	800eb66 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800eb1e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7fe f89c 	bl	800cc60 <dir_remove>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800eb2e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d10c      	bne.n	800eb50 <f_unlink+0x134>
 800eb36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d009      	beq.n	800eb50 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800eb3c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800eb40:	2200      	movs	r2, #0
 800eb42:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7fd f927 	bl	800bd98 <remove_chain>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800eb50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d106      	bne.n	800eb66 <f_unlink+0x14a>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	f7fc fea0 	bl	800b8a0 <sync_fs>
 800eb60:	4603      	mov	r3, r0
 800eb62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800eb66:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3780      	adds	r7, #128	@ 0x80
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}

0800eb72 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800eb72:	b580      	push	{r7, lr}
 800eb74:	b098      	sub	sp, #96	@ 0x60
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb7a:	f107 010c 	add.w	r1, r7, #12
 800eb7e:	1d3b      	adds	r3, r7, #4
 800eb80:	2202      	movs	r2, #2
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fe fc5c 	bl	800d440 <find_volume>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800eb92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f040 80f2 	bne.w	800ed80 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800eb9c:	687a      	ldr	r2, [r7, #4]
 800eb9e:	f107 0310 	add.w	r3, r7, #16
 800eba2:	4611      	mov	r1, r2
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fe fb3b 	bl	800d220 <follow_path>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ebb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d102      	bne.n	800ebbe <f_mkdir+0x4c>
 800ebb8:	2308      	movs	r3, #8
 800ebba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ebbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebc2:	2b04      	cmp	r3, #4
 800ebc4:	f040 80dc 	bne.w	800ed80 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ebc8:	f107 0310 	add.w	r3, r7, #16
 800ebcc:	2100      	movs	r1, #0
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fd f947 	bl	800be62 <create_chain>
 800ebd4:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	895b      	ldrh	r3, [r3, #10]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	899b      	ldrh	r3, [r3, #12]
 800ebe0:	fb02 f303 	mul.w	r3, r2, r3
 800ebe4:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ebec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d102      	bne.n	800ebf8 <f_mkdir+0x86>
 800ebf2:	2307      	movs	r3, #7
 800ebf4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800ebf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d102      	bne.n	800ec04 <f_mkdir+0x92>
 800ebfe:	2302      	movs	r3, #2
 800ec00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ec06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0a:	d102      	bne.n	800ec12 <f_mkdir+0xa0>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ec12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <f_mkdir+0xb6>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7fc fdcd 	bl	800b7bc <sync_window>
 800ec22:	4603      	mov	r3, r0
 800ec24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 800ec28:	f7f2 f86a 	bl	8000d00 <get_fattime>
 800ec2c:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ec2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d16c      	bne.n	800ed10 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fc fea0 	bl	800b980 <clust2sect>
 800ec40:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3338      	adds	r3, #56	@ 0x38
 800ec46:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	899b      	ldrh	r3, [r3, #12]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	2100      	movs	r1, #0
 800ec50:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ec52:	f7fc fbea 	bl	800b42a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ec56:	220b      	movs	r2, #11
 800ec58:	2120      	movs	r1, #32
 800ec5a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ec5c:	f7fc fbe5 	bl	800b42a <mem_set>
					dir[DIR_Name] = '.';
 800ec60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec62:	222e      	movs	r2, #46	@ 0x2e
 800ec64:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ec66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec68:	330b      	adds	r3, #11
 800ec6a:	2210      	movs	r2, #16
 800ec6c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800ec6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec70:	3316      	adds	r3, #22
 800ec72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ec74:	4618      	mov	r0, r3
 800ec76:	f7fc fb8b 	bl	800b390 <st_dword>
					st_clust(fs, dir, dcl);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ec7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fd fb83 	bl	800c38c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800ec86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec88:	3320      	adds	r3, #32
 800ec8a:	2220      	movs	r2, #32
 800ec8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fc fbaa 	bl	800b3e8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800ec94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec96:	3321      	adds	r3, #33	@ 0x21
 800ec98:	222e      	movs	r2, #46	@ 0x2e
 800ec9a:	701a      	strb	r2, [r3, #0]
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	2b03      	cmp	r3, #3
 800eca6:	d106      	bne.n	800ecb6 <f_mkdir+0x144>
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d101      	bne.n	800ecb6 <f_mkdir+0x144>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecba:	3320      	adds	r3, #32
 800ecbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	f7fd fb64 	bl	800c38c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	895b      	ldrh	r3, [r3, #10]
 800ecc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ecca:	e01c      	b.n	800ed06 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800eccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecce:	1c5a      	adds	r2, r3, #1
 800ecd0:	657a      	str	r2, [r7, #84]	@ 0x54
 800ecd2:	68fa      	ldr	r2, [r7, #12]
 800ecd4:	6353      	str	r3, [r2, #52]	@ 0x34
					fs->wflag = 1;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7fc fd6c 	bl	800b7bc <sync_window>
 800ece4:	4603      	mov	r3, r0
 800ece6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 800ecea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10d      	bne.n	800ed0e <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	899b      	ldrh	r3, [r3, #12]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	2100      	movs	r1, #0
 800ecfa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ecfc:	f7fc fb95 	bl	800b42a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ed00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed02:	3b01      	subs	r3, #1
 800ed04:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ed06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d1df      	bne.n	800eccc <f_mkdir+0x15a>
 800ed0c:	e000      	b.n	800ed10 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800ed0e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ed10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d107      	bne.n	800ed28 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ed18:	f107 0310 	add.w	r3, r7, #16
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fd fea7 	bl	800ca70 <dir_register>
 800ed22:	4603      	mov	r3, r0
 800ed24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 800ed28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d120      	bne.n	800ed72 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ed30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed32:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ed34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed36:	3316      	adds	r3, #22
 800ed38:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7fc fb28 	bl	800b390 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ed44:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fd fb20 	bl	800c38c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ed4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed4e:	330b      	adds	r3, #11
 800ed50:	2210      	movs	r2, #16
 800ed52:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2201      	movs	r2, #1
 800ed58:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ed5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d10e      	bne.n	800ed80 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fc fd9b 	bl	800b8a0 <sync_fs>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ed70:	e006      	b.n	800ed80 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ed72:	f107 0310 	add.w	r3, r7, #16
 800ed76:	2200      	movs	r2, #0
 800ed78:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7fd f80c 	bl	800bd98 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ed80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3760      	adds	r7, #96	@ 0x60
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	460b      	mov	r3, r1
 800ed96:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ed98:	78fb      	ldrb	r3, [r7, #3]
 800ed9a:	2b0a      	cmp	r3, #10
 800ed9c:	d103      	bne.n	800eda6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ed9e:	210d      	movs	r1, #13
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f7ff fff3 	bl	800ed8c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	db25      	blt.n	800edfe <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	1c5a      	adds	r2, r3, #1
 800edb6:	60fa      	str	r2, [r7, #12]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	4413      	add	r3, r2
 800edbc:	78fa      	ldrb	r2, [r7, #3]
 800edbe:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2b3c      	cmp	r3, #60	@ 0x3c
 800edc4:	dd12      	ble.n	800edec <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6818      	ldr	r0, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f103 010c 	add.w	r1, r3, #12
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	f107 0308 	add.w	r3, r7, #8
 800edd6:	f7fe fffd 	bl	800ddd4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800edda:	68ba      	ldr	r2, [r7, #8]
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d101      	bne.n	800ede6 <putc_bfd+0x5a>
 800ede2:	2300      	movs	r3, #0
 800ede4:	e001      	b.n	800edea <putc_bfd+0x5e>
 800ede6:	f04f 33ff 	mov.w	r3, #4294967295
 800edea:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	1c5a      	adds	r2, r3, #1
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	609a      	str	r2, [r3, #8]
 800edfc:	e000      	b.n	800ee00 <putc_bfd+0x74>
	if (i < 0) return;
 800edfe:	bf00      	nop
}
 800ee00:	3710      	adds	r7, #16
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	db16      	blt.n	800ee44 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6818      	ldr	r0, [r3, #0]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f103 010c 	add.w	r1, r3, #12
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	461a      	mov	r2, r3
 800ee26:	f107 030c 	add.w	r3, r7, #12
 800ee2a:	f7fe ffd3 	bl	800ddd4 <f_write>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d107      	bne.n	800ee44 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	68fa      	ldr	r2, [r7, #12]
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d102      	bne.n	800ee44 <putc_flush+0x3e>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	e001      	b.n	800ee48 <putc_flush+0x42>
	return EOF;
 800ee44:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3710      	adds	r7, #16
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	683a      	ldr	r2, [r7, #0]
 800ee5e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	605a      	str	r2, [r3, #4]
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	609a      	str	r2, [r3, #8]
}
 800ee6e:	bf00      	nop
 800ee70:	370c      	adds	r7, #12
 800ee72:	46bd      	mov	sp, r7
 800ee74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee78:	4770      	bx	lr

0800ee7a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ee7a:	b580      	push	{r7, lr}
 800ee7c:	b096      	sub	sp, #88	@ 0x58
 800ee7e:	af00      	add	r7, sp, #0
 800ee80:	6078      	str	r0, [r7, #4]
 800ee82:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ee84:	f107 030c 	add.w	r3, r7, #12
 800ee88:	6839      	ldr	r1, [r7, #0]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff ffe0 	bl	800ee50 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ee90:	e009      	b.n	800eea6 <f_puts+0x2c>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	1c5a      	adds	r2, r3, #1
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	781a      	ldrb	r2, [r3, #0]
 800ee9a:	f107 030c 	add.w	r3, r7, #12
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7ff ff73 	bl	800ed8c <putc_bfd>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1f1      	bne.n	800ee92 <f_puts+0x18>
	return putc_flush(&pb);
 800eeae:	f107 030c 	add.w	r3, r7, #12
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff ffa7 	bl	800ee06 <putc_flush>
 800eeb8:	4603      	mov	r3, r0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3758      	adds	r7, #88	@ 0x58
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
	...

0800eec4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b087      	sub	sp, #28
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	4613      	mov	r3, r2
 800eed0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eed2:	2301      	movs	r3, #1
 800eed4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eed6:	2300      	movs	r3, #0
 800eed8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eeda:	4b1f      	ldr	r3, [pc, #124]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eedc:	7a5b      	ldrb	r3, [r3, #9]
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d131      	bne.n	800ef48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eee4:	4b1c      	ldr	r3, [pc, #112]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eee6:	7a5b      	ldrb	r3, [r3, #9]
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	461a      	mov	r2, r3
 800eeec:	4b1a      	ldr	r3, [pc, #104]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eeee:	2100      	movs	r1, #0
 800eef0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eef2:	4b19      	ldr	r3, [pc, #100]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eef4:	7a5b      	ldrb	r3, [r3, #9]
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	4a17      	ldr	r2, [pc, #92]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	4413      	add	r3, r2
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ef02:	4b15      	ldr	r3, [pc, #84]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef04:	7a5b      	ldrb	r3, [r3, #9]
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	461a      	mov	r2, r3
 800ef0a:	4b13      	ldr	r3, [pc, #76]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef0c:	4413      	add	r3, r2
 800ef0e:	79fa      	ldrb	r2, [r7, #7]
 800ef10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ef12:	4b11      	ldr	r3, [pc, #68]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef14:	7a5b      	ldrb	r3, [r3, #9]
 800ef16:	b2db      	uxtb	r3, r3
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	b2d1      	uxtb	r1, r2
 800ef1c:	4a0e      	ldr	r2, [pc, #56]	@ (800ef58 <FATFS_LinkDriverEx+0x94>)
 800ef1e:	7251      	strb	r1, [r2, #9]
 800ef20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ef22:	7dbb      	ldrb	r3, [r7, #22]
 800ef24:	3330      	adds	r3, #48	@ 0x30
 800ef26:	b2da      	uxtb	r2, r3
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	3301      	adds	r3, #1
 800ef30:	223a      	movs	r2, #58	@ 0x3a
 800ef32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	3302      	adds	r3, #2
 800ef38:	222f      	movs	r2, #47	@ 0x2f
 800ef3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	3303      	adds	r3, #3
 800ef40:	2200      	movs	r2, #0
 800ef42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ef48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	371c      	adds	r7, #28
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr
 800ef56:	bf00      	nop
 800ef58:	20004118 	.word	0x20004118

0800ef5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ef66:	2200      	movs	r2, #0
 800ef68:	6839      	ldr	r1, [r7, #0]
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f7ff ffaa 	bl	800eec4 <FATFS_LinkDriverEx>
 800ef70:	4603      	mov	r3, r0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3708      	adds	r7, #8
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
	...

0800ef7c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b085      	sub	sp, #20
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	4603      	mov	r3, r0
 800ef84:	6039      	str	r1, [r7, #0]
 800ef86:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ef88:	88fb      	ldrh	r3, [r7, #6]
 800ef8a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ef8c:	d802      	bhi.n	800ef94 <ff_convert+0x18>
		c = chr;
 800ef8e:	88fb      	ldrh	r3, [r7, #6]
 800ef90:	81fb      	strh	r3, [r7, #14]
 800ef92:	e025      	b.n	800efe0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d00b      	beq.n	800efb2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ef9a:	88fb      	ldrh	r3, [r7, #6]
 800ef9c:	2bff      	cmp	r3, #255	@ 0xff
 800ef9e:	d805      	bhi.n	800efac <ff_convert+0x30>
 800efa0:	88fb      	ldrh	r3, [r7, #6]
 800efa2:	3b80      	subs	r3, #128	@ 0x80
 800efa4:	4a12      	ldr	r2, [pc, #72]	@ (800eff0 <ff_convert+0x74>)
 800efa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efaa:	e000      	b.n	800efae <ff_convert+0x32>
 800efac:	2300      	movs	r3, #0
 800efae:	81fb      	strh	r3, [r7, #14]
 800efb0:	e016      	b.n	800efe0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800efb2:	2300      	movs	r3, #0
 800efb4:	81fb      	strh	r3, [r7, #14]
 800efb6:	e009      	b.n	800efcc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800efb8:	89fb      	ldrh	r3, [r7, #14]
 800efba:	4a0d      	ldr	r2, [pc, #52]	@ (800eff0 <ff_convert+0x74>)
 800efbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efc0:	88fa      	ldrh	r2, [r7, #6]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d006      	beq.n	800efd4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800efc6:	89fb      	ldrh	r3, [r7, #14]
 800efc8:	3301      	adds	r3, #1
 800efca:	81fb      	strh	r3, [r7, #14]
 800efcc:	89fb      	ldrh	r3, [r7, #14]
 800efce:	2b7f      	cmp	r3, #127	@ 0x7f
 800efd0:	d9f2      	bls.n	800efb8 <ff_convert+0x3c>
 800efd2:	e000      	b.n	800efd6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800efd4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800efd6:	89fb      	ldrh	r3, [r7, #14]
 800efd8:	3380      	adds	r3, #128	@ 0x80
 800efda:	b29b      	uxth	r3, r3
 800efdc:	b2db      	uxtb	r3, r3
 800efde:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800efe0:	89fb      	ldrh	r3, [r7, #14]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3714      	adds	r7, #20
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop
 800eff0:	080109bc 	.word	0x080109bc

0800eff4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b087      	sub	sp, #28
 800eff8:	af00      	add	r7, sp, #0
 800effa:	4603      	mov	r3, r0
 800effc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800effe:	88fb      	ldrh	r3, [r7, #6]
 800f000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f004:	d201      	bcs.n	800f00a <ff_wtoupper+0x16>
 800f006:	4b3e      	ldr	r3, [pc, #248]	@ (800f100 <ff_wtoupper+0x10c>)
 800f008:	e000      	b.n	800f00c <ff_wtoupper+0x18>
 800f00a:	4b3e      	ldr	r3, [pc, #248]	@ (800f104 <ff_wtoupper+0x110>)
 800f00c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	1c9a      	adds	r2, r3, #2
 800f012:	617a      	str	r2, [r7, #20]
 800f014:	881b      	ldrh	r3, [r3, #0]
 800f016:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f018:	8a7b      	ldrh	r3, [r7, #18]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d068      	beq.n	800f0f0 <ff_wtoupper+0xfc>
 800f01e:	88fa      	ldrh	r2, [r7, #6]
 800f020:	8a7b      	ldrh	r3, [r7, #18]
 800f022:	429a      	cmp	r2, r3
 800f024:	d364      	bcc.n	800f0f0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	1c9a      	adds	r2, r3, #2
 800f02a:	617a      	str	r2, [r7, #20]
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	823b      	strh	r3, [r7, #16]
 800f030:	8a3b      	ldrh	r3, [r7, #16]
 800f032:	0a1b      	lsrs	r3, r3, #8
 800f034:	81fb      	strh	r3, [r7, #14]
 800f036:	8a3b      	ldrh	r3, [r7, #16]
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f03c:	88fa      	ldrh	r2, [r7, #6]
 800f03e:	8a79      	ldrh	r1, [r7, #18]
 800f040:	8a3b      	ldrh	r3, [r7, #16]
 800f042:	440b      	add	r3, r1
 800f044:	429a      	cmp	r2, r3
 800f046:	da49      	bge.n	800f0dc <ff_wtoupper+0xe8>
			switch (cmd) {
 800f048:	89fb      	ldrh	r3, [r7, #14]
 800f04a:	2b08      	cmp	r3, #8
 800f04c:	d84f      	bhi.n	800f0ee <ff_wtoupper+0xfa>
 800f04e:	a201      	add	r2, pc, #4	@ (adr r2, 800f054 <ff_wtoupper+0x60>)
 800f050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f054:	0800f079 	.word	0x0800f079
 800f058:	0800f08b 	.word	0x0800f08b
 800f05c:	0800f0a1 	.word	0x0800f0a1
 800f060:	0800f0a9 	.word	0x0800f0a9
 800f064:	0800f0b1 	.word	0x0800f0b1
 800f068:	0800f0b9 	.word	0x0800f0b9
 800f06c:	0800f0c1 	.word	0x0800f0c1
 800f070:	0800f0c9 	.word	0x0800f0c9
 800f074:	0800f0d1 	.word	0x0800f0d1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f078:	88fa      	ldrh	r2, [r7, #6]
 800f07a:	8a7b      	ldrh	r3, [r7, #18]
 800f07c:	1ad3      	subs	r3, r2, r3
 800f07e:	005b      	lsls	r3, r3, #1
 800f080:	697a      	ldr	r2, [r7, #20]
 800f082:	4413      	add	r3, r2
 800f084:	881b      	ldrh	r3, [r3, #0]
 800f086:	80fb      	strh	r3, [r7, #6]
 800f088:	e027      	b.n	800f0da <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f08a:	88fa      	ldrh	r2, [r7, #6]
 800f08c:	8a7b      	ldrh	r3, [r7, #18]
 800f08e:	1ad3      	subs	r3, r2, r3
 800f090:	b29b      	uxth	r3, r3
 800f092:	f003 0301 	and.w	r3, r3, #1
 800f096:	b29b      	uxth	r3, r3
 800f098:	88fa      	ldrh	r2, [r7, #6]
 800f09a:	1ad3      	subs	r3, r2, r3
 800f09c:	80fb      	strh	r3, [r7, #6]
 800f09e:	e01c      	b.n	800f0da <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f0a0:	88fb      	ldrh	r3, [r7, #6]
 800f0a2:	3b10      	subs	r3, #16
 800f0a4:	80fb      	strh	r3, [r7, #6]
 800f0a6:	e018      	b.n	800f0da <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f0a8:	88fb      	ldrh	r3, [r7, #6]
 800f0aa:	3b20      	subs	r3, #32
 800f0ac:	80fb      	strh	r3, [r7, #6]
 800f0ae:	e014      	b.n	800f0da <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f0b0:	88fb      	ldrh	r3, [r7, #6]
 800f0b2:	3b30      	subs	r3, #48	@ 0x30
 800f0b4:	80fb      	strh	r3, [r7, #6]
 800f0b6:	e010      	b.n	800f0da <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f0b8:	88fb      	ldrh	r3, [r7, #6]
 800f0ba:	3b1a      	subs	r3, #26
 800f0bc:	80fb      	strh	r3, [r7, #6]
 800f0be:	e00c      	b.n	800f0da <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f0c0:	88fb      	ldrh	r3, [r7, #6]
 800f0c2:	3308      	adds	r3, #8
 800f0c4:	80fb      	strh	r3, [r7, #6]
 800f0c6:	e008      	b.n	800f0da <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f0c8:	88fb      	ldrh	r3, [r7, #6]
 800f0ca:	3b50      	subs	r3, #80	@ 0x50
 800f0cc:	80fb      	strh	r3, [r7, #6]
 800f0ce:	e004      	b.n	800f0da <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f0d0:	88fb      	ldrh	r3, [r7, #6]
 800f0d2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f0d6:	80fb      	strh	r3, [r7, #6]
 800f0d8:	bf00      	nop
			}
			break;
 800f0da:	e008      	b.n	800f0ee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f0dc:	89fb      	ldrh	r3, [r7, #14]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d195      	bne.n	800f00e <ff_wtoupper+0x1a>
 800f0e2:	8a3b      	ldrh	r3, [r7, #16]
 800f0e4:	005b      	lsls	r3, r3, #1
 800f0e6:	697a      	ldr	r2, [r7, #20]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f0ec:	e78f      	b.n	800f00e <ff_wtoupper+0x1a>
			break;
 800f0ee:	bf00      	nop
	}

	return chr;
 800f0f0:	88fb      	ldrh	r3, [r7, #6]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	371c      	adds	r7, #28
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	08010abc 	.word	0x08010abc
 800f104:	08010cb0 	.word	0x08010cb0

0800f108 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f10c:	2200      	movs	r2, #0
 800f10e:	4912      	ldr	r1, [pc, #72]	@ (800f158 <MX_USB_DEVICE_Init+0x50>)
 800f110:	4812      	ldr	r0, [pc, #72]	@ (800f15c <MX_USB_DEVICE_Init+0x54>)
 800f112:	f7fa fdea 	bl	8009cea <USBD_Init>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d001      	beq.n	800f120 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f11c:	f7f2 ffc8 	bl	80020b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800f120:	490f      	ldr	r1, [pc, #60]	@ (800f160 <MX_USB_DEVICE_Init+0x58>)
 800f122:	480e      	ldr	r0, [pc, #56]	@ (800f15c <MX_USB_DEVICE_Init+0x54>)
 800f124:	f7fa fe11 	bl	8009d4a <USBD_RegisterClass>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d001      	beq.n	800f132 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f12e:	f7f2 ffbf 	bl	80020b0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800f132:	490c      	ldr	r1, [pc, #48]	@ (800f164 <MX_USB_DEVICE_Init+0x5c>)
 800f134:	4809      	ldr	r0, [pc, #36]	@ (800f15c <MX_USB_DEVICE_Init+0x54>)
 800f136:	f7f8 ffcd 	bl	80080d4 <USBD_MSC_RegisterStorage>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f140:	f7f2 ffb6 	bl	80020b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f144:	4805      	ldr	r0, [pc, #20]	@ (800f15c <MX_USB_DEVICE_Init+0x54>)
 800f146:	f7fa fe36 	bl	8009db6 <USBD_Start>
 800f14a:	4603      	mov	r3, r0
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d001      	beq.n	800f154 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f150:	f7f2 ffae 	bl	80020b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f154:	bf00      	nop
 800f156:	bd80      	pop	{r7, pc}
 800f158:	200000a4 	.word	0x200000a4
 800f15c:	20004124 	.word	0x20004124
 800f160:	20000024 	.word	0x20000024
 800f164:	200000f4 	.word	0x200000f4

0800f168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	6039      	str	r1, [r7, #0]
 800f172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	2212      	movs	r2, #18
 800f178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f17a:	4b03      	ldr	r3, [pc, #12]	@ (800f188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	200000c0 	.word	0x200000c0

0800f18c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	6039      	str	r1, [r7, #0]
 800f196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	2204      	movs	r2, #4
 800f19c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f19e:	4b03      	ldr	r3, [pc, #12]	@ (800f1ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr
 800f1ac:	200000d4 	.word	0x200000d4

0800f1b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	6039      	str	r1, [r7, #0]
 800f1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1bc:	79fb      	ldrb	r3, [r7, #7]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d105      	bne.n	800f1ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	4907      	ldr	r1, [pc, #28]	@ (800f1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f1c6:	4808      	ldr	r0, [pc, #32]	@ (800f1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f1c8:	f7fb ffba 	bl	800b140 <USBD_GetString>
 800f1cc:	e004      	b.n	800f1d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	4904      	ldr	r1, [pc, #16]	@ (800f1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800f1d2:	4805      	ldr	r0, [pc, #20]	@ (800f1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800f1d4:	f7fb ffb4 	bl	800b140 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1d8:	4b02      	ldr	r3, [pc, #8]	@ (800f1e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3708      	adds	r7, #8
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20004400 	.word	0x20004400
 800f1e8:	080108d0 	.word	0x080108d0

0800f1ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	4904      	ldr	r1, [pc, #16]	@ (800f20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f1fc:	4804      	ldr	r0, [pc, #16]	@ (800f210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f1fe:	f7fb ff9f 	bl	800b140 <USBD_GetString>
  return USBD_StrDesc;
 800f202:	4b02      	ldr	r3, [pc, #8]	@ (800f20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f204:	4618      	mov	r0, r3
 800f206:	3708      	adds	r7, #8
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20004400 	.word	0x20004400
 800f210:	080108e4 	.word	0x080108e4

0800f214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	6039      	str	r1, [r7, #0]
 800f21e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	221a      	movs	r2, #26
 800f224:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f226:	f000 f843 	bl	800f2b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f22a:	4b02      	ldr	r3, [pc, #8]	@ (800f234 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3708      	adds	r7, #8
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}
 800f234:	200000d8 	.word	0x200000d8

0800f238 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	4603      	mov	r3, r0
 800f240:	6039      	str	r1, [r7, #0]
 800f242:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f244:	79fb      	ldrb	r3, [r7, #7]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d105      	bne.n	800f256 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f24a:	683a      	ldr	r2, [r7, #0]
 800f24c:	4907      	ldr	r1, [pc, #28]	@ (800f26c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f24e:	4808      	ldr	r0, [pc, #32]	@ (800f270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f250:	f7fb ff76 	bl	800b140 <USBD_GetString>
 800f254:	e004      	b.n	800f260 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	4904      	ldr	r1, [pc, #16]	@ (800f26c <USBD_FS_ConfigStrDescriptor+0x34>)
 800f25a:	4805      	ldr	r0, [pc, #20]	@ (800f270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f25c:	f7fb ff70 	bl	800b140 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f260:	4b02      	ldr	r3, [pc, #8]	@ (800f26c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f262:	4618      	mov	r0, r3
 800f264:	3708      	adds	r7, #8
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	20004400 	.word	0x20004400
 800f270:	080108f8 	.word	0x080108f8

0800f274 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f274:	b580      	push	{r7, lr}
 800f276:	b082      	sub	sp, #8
 800f278:	af00      	add	r7, sp, #0
 800f27a:	4603      	mov	r3, r0
 800f27c:	6039      	str	r1, [r7, #0]
 800f27e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f280:	79fb      	ldrb	r3, [r7, #7]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d105      	bne.n	800f292 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f286:	683a      	ldr	r2, [r7, #0]
 800f288:	4907      	ldr	r1, [pc, #28]	@ (800f2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f28a:	4808      	ldr	r0, [pc, #32]	@ (800f2ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f28c:	f7fb ff58 	bl	800b140 <USBD_GetString>
 800f290:	e004      	b.n	800f29c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f292:	683a      	ldr	r2, [r7, #0]
 800f294:	4904      	ldr	r1, [pc, #16]	@ (800f2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f296:	4805      	ldr	r0, [pc, #20]	@ (800f2ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f298:	f7fb ff52 	bl	800b140 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f29c:	4b02      	ldr	r3, [pc, #8]	@ (800f2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3708      	adds	r7, #8
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	20004400 	.word	0x20004400
 800f2ac:	08010904 	.word	0x08010904

0800f2b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b084      	sub	sp, #16
 800f2b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f2b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f2f4 <Get_SerialNum+0x44>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f2bc:	4b0e      	ldr	r3, [pc, #56]	@ (800f2f8 <Get_SerialNum+0x48>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f2c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f2fc <Get_SerialNum+0x4c>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d009      	beq.n	800f2ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f2d6:	2208      	movs	r2, #8
 800f2d8:	4909      	ldr	r1, [pc, #36]	@ (800f300 <Get_SerialNum+0x50>)
 800f2da:	68f8      	ldr	r0, [r7, #12]
 800f2dc:	f000 f814 	bl	800f308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f2e0:	2204      	movs	r2, #4
 800f2e2:	4908      	ldr	r1, [pc, #32]	@ (800f304 <Get_SerialNum+0x54>)
 800f2e4:	68b8      	ldr	r0, [r7, #8]
 800f2e6:	f000 f80f 	bl	800f308 <IntToUnicode>
  }
}
 800f2ea:	bf00      	nop
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	1fff7a10 	.word	0x1fff7a10
 800f2f8:	1fff7a14 	.word	0x1fff7a14
 800f2fc:	1fff7a18 	.word	0x1fff7a18
 800f300:	200000da 	.word	0x200000da
 800f304:	200000ea 	.word	0x200000ea

0800f308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f308:	b480      	push	{r7}
 800f30a:	b087      	sub	sp, #28
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	60f8      	str	r0, [r7, #12]
 800f310:	60b9      	str	r1, [r7, #8]
 800f312:	4613      	mov	r3, r2
 800f314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f316:	2300      	movs	r3, #0
 800f318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f31a:	2300      	movs	r3, #0
 800f31c:	75fb      	strb	r3, [r7, #23]
 800f31e:	e027      	b.n	800f370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	0f1b      	lsrs	r3, r3, #28
 800f324:	2b09      	cmp	r3, #9
 800f326:	d80b      	bhi.n	800f340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	0f1b      	lsrs	r3, r3, #28
 800f32c:	b2da      	uxtb	r2, r3
 800f32e:	7dfb      	ldrb	r3, [r7, #23]
 800f330:	005b      	lsls	r3, r3, #1
 800f332:	4619      	mov	r1, r3
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	440b      	add	r3, r1
 800f338:	3230      	adds	r2, #48	@ 0x30
 800f33a:	b2d2      	uxtb	r2, r2
 800f33c:	701a      	strb	r2, [r3, #0]
 800f33e:	e00a      	b.n	800f356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	0f1b      	lsrs	r3, r3, #28
 800f344:	b2da      	uxtb	r2, r3
 800f346:	7dfb      	ldrb	r3, [r7, #23]
 800f348:	005b      	lsls	r3, r3, #1
 800f34a:	4619      	mov	r1, r3
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	440b      	add	r3, r1
 800f350:	3237      	adds	r2, #55	@ 0x37
 800f352:	b2d2      	uxtb	r2, r2
 800f354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	011b      	lsls	r3, r3, #4
 800f35a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f35c:	7dfb      	ldrb	r3, [r7, #23]
 800f35e:	005b      	lsls	r3, r3, #1
 800f360:	3301      	adds	r3, #1
 800f362:	68ba      	ldr	r2, [r7, #8]
 800f364:	4413      	add	r3, r2
 800f366:	2200      	movs	r2, #0
 800f368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f36a:	7dfb      	ldrb	r3, [r7, #23]
 800f36c:	3301      	adds	r3, #1
 800f36e:	75fb      	strb	r3, [r7, #23]
 800f370:	7dfa      	ldrb	r2, [r7, #23]
 800f372:	79fb      	ldrb	r3, [r7, #7]
 800f374:	429a      	cmp	r2, r3
 800f376:	d3d3      	bcc.n	800f320 <IntToUnicode+0x18>
  }
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	371c      	adds	r7, #28
 800f37e:	46bd      	mov	sp, r7
 800f380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f384:	4770      	bx	lr

0800f386 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800f386:	b480      	push	{r7}
 800f388:	b083      	sub	sp, #12
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	4603      	mov	r3, r0
 800f38e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800f390:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800f392:	4618      	mov	r0, r3
 800f394:	370c      	adds	r7, #12
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800f39e:	b480      	push	{r7}
 800f3a0:	b085      	sub	sp, #20
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	60b9      	str	r1, [r7, #8]
 800f3a8:	607a      	str	r2, [r7, #4]
 800f3aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f3b2:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f3ba:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800f3bc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3714      	adds	r7, #20
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800f3ca:	b480      	push	{r7}
 800f3cc:	b083      	sub	sp, #12
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800f3d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	370c      	adds	r7, #12
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr

0800f3e2 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800f3e2:	b480      	push	{r7}
 800f3e4:	b083      	sub	sp, #12
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800f3ec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b085      	sub	sp, #20
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	461a      	mov	r2, r3
 800f406:	4603      	mov	r3, r0
 800f408:	73fb      	strb	r3, [r7, #15]
 800f40a:	4613      	mov	r3, r2
 800f40c:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800f40e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f410:	4618      	mov	r0, r3
 800f412:	3714      	adds	r7, #20
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	60b9      	str	r1, [r7, #8]
 800f424:	607a      	str	r2, [r7, #4]
 800f426:	461a      	mov	r2, r3
 800f428:	4603      	mov	r3, r0
 800f42a:	73fb      	strb	r3, [r7, #15]
 800f42c:	4613      	mov	r3, r2
 800f42e:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800f430:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800f432:	4618      	mov	r0, r3
 800f434:	3714      	adds	r7, #20
 800f436:	46bd      	mov	sp, r7
 800f438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43c:	4770      	bx	lr

0800f43e <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800f43e:	b480      	push	{r7}
 800f440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800f442:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f444:	4618      	mov	r0, r3
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
	...

0800f450 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b08a      	sub	sp, #40	@ 0x28
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f458:	f107 0314 	add.w	r3, r7, #20
 800f45c:	2200      	movs	r2, #0
 800f45e:	601a      	str	r2, [r3, #0]
 800f460:	605a      	str	r2, [r3, #4]
 800f462:	609a      	str	r2, [r3, #8]
 800f464:	60da      	str	r2, [r3, #12]
 800f466:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f470:	d13a      	bne.n	800f4e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f472:	2300      	movs	r3, #0
 800f474:	613b      	str	r3, [r7, #16]
 800f476:	4b1e      	ldr	r3, [pc, #120]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f47a:	4a1d      	ldr	r2, [pc, #116]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f47c:	f043 0301 	orr.w	r3, r3, #1
 800f480:	6313      	str	r3, [r2, #48]	@ 0x30
 800f482:	4b1b      	ldr	r3, [pc, #108]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	613b      	str	r3, [r7, #16]
 800f48c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f48e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f494:	2302      	movs	r3, #2
 800f496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f498:	2300      	movs	r3, #0
 800f49a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f49c:	2303      	movs	r3, #3
 800f49e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f4a0:	230a      	movs	r3, #10
 800f4a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4a4:	f107 0314 	add.w	r3, r7, #20
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	4812      	ldr	r0, [pc, #72]	@ (800f4f4 <HAL_PCD_MspInit+0xa4>)
 800f4ac:	f7f3 fa0a 	bl	80028c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f4b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4b4:	4a0e      	ldr	r2, [pc, #56]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f4b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4ba:	6353      	str	r3, [r2, #52]	@ 0x34
 800f4bc:	2300      	movs	r3, #0
 800f4be:	60fb      	str	r3, [r7, #12]
 800f4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f4c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4c4:	4a0a      	ldr	r2, [pc, #40]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f4c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f4ca:	6453      	str	r3, [r2, #68]	@ 0x44
 800f4cc:	4b08      	ldr	r3, [pc, #32]	@ (800f4f0 <HAL_PCD_MspInit+0xa0>)
 800f4ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f4d4:	60fb      	str	r3, [r7, #12]
 800f4d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f4d8:	2200      	movs	r2, #0
 800f4da:	2100      	movs	r1, #0
 800f4dc:	2043      	movs	r0, #67	@ 0x43
 800f4de:	f7f3 f928 	bl	8002732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f4e2:	2043      	movs	r0, #67	@ 0x43
 800f4e4:	f7f3 f941 	bl	800276a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f4e8:	bf00      	nop
 800f4ea:	3728      	adds	r7, #40	@ 0x28
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	40023800 	.word	0x40023800
 800f4f4:	40020000 	.word	0x40020000

0800f4f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f50c:	4619      	mov	r1, r3
 800f50e:	4610      	mov	r0, r2
 800f510:	f7fa fc9e 	bl	8009e50 <USBD_LL_SetupStage>
}
 800f514:	bf00      	nop
 800f516:	3708      	adds	r7, #8
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	460b      	mov	r3, r1
 800f526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f52e:	78fa      	ldrb	r2, [r7, #3]
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	4613      	mov	r3, r2
 800f534:	00db      	lsls	r3, r3, #3
 800f536:	4413      	add	r3, r2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	440b      	add	r3, r1
 800f53c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	78fb      	ldrb	r3, [r7, #3]
 800f544:	4619      	mov	r1, r3
 800f546:	f7fa fcd8 	bl	8009efa <USBD_LL_DataOutStage>
}
 800f54a:	bf00      	nop
 800f54c:	3708      	adds	r7, #8
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b082      	sub	sp, #8
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f564:	78fa      	ldrb	r2, [r7, #3]
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	4613      	mov	r3, r2
 800f56a:	00db      	lsls	r3, r3, #3
 800f56c:	4413      	add	r3, r2
 800f56e:	009b      	lsls	r3, r3, #2
 800f570:	440b      	add	r3, r1
 800f572:	3320      	adds	r3, #32
 800f574:	681a      	ldr	r2, [r3, #0]
 800f576:	78fb      	ldrb	r3, [r7, #3]
 800f578:	4619      	mov	r1, r3
 800f57a:	f7fa fd7a 	bl	800a072 <USBD_LL_DataInStage>
}
 800f57e:	bf00      	nop
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f586:	b580      	push	{r7, lr}
 800f588:	b082      	sub	sp, #8
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f594:	4618      	mov	r0, r3
 800f596:	f7fa febe 	bl	800a316 <USBD_LL_SOF>
}
 800f59a:	bf00      	nop
 800f59c:	3708      	adds	r7, #8
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b084      	sub	sp, #16
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	79db      	ldrb	r3, [r3, #7]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d102      	bne.n	800f5bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	73fb      	strb	r3, [r7, #15]
 800f5ba:	e008      	b.n	800f5ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	79db      	ldrb	r3, [r3, #7]
 800f5c0:	2b02      	cmp	r3, #2
 800f5c2:	d102      	bne.n	800f5ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f5c4:	2301      	movs	r3, #1
 800f5c6:	73fb      	strb	r3, [r7, #15]
 800f5c8:	e001      	b.n	800f5ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f5ca:	f7f2 fd71 	bl	80020b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f5d4:	7bfa      	ldrb	r2, [r7, #15]
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	4618      	mov	r0, r3
 800f5da:	f7fa fe58 	bl	800a28e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fa fdff 	bl	800a1e8 <USBD_LL_Reset>
}
 800f5ea:	bf00      	nop
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
	...

0800f5f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b082      	sub	sp, #8
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f602:	4618      	mov	r0, r3
 800f604:	f7fa fe53 	bl	800a2ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	6812      	ldr	r2, [r2, #0]
 800f616:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f61a:	f043 0301 	orr.w	r3, r3, #1
 800f61e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	7adb      	ldrb	r3, [r3, #11]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f628:	4b04      	ldr	r3, [pc, #16]	@ (800f63c <HAL_PCD_SuspendCallback+0x48>)
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	4a03      	ldr	r2, [pc, #12]	@ (800f63c <HAL_PCD_SuspendCallback+0x48>)
 800f62e:	f043 0306 	orr.w	r3, r3, #6
 800f632:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f634:	bf00      	nop
 800f636:	3708      	adds	r7, #8
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	e000ed00 	.word	0xe000ed00

0800f640 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fa fe49 	bl	800a2e6 <USBD_LL_Resume>
}
 800f654:	bf00      	nop
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	460b      	mov	r3, r1
 800f666:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f66e:	78fa      	ldrb	r2, [r7, #3]
 800f670:	4611      	mov	r1, r2
 800f672:	4618      	mov	r0, r3
 800f674:	f7fa fea1 	bl	800a3ba <USBD_LL_IsoOUTIncomplete>
}
 800f678:	bf00      	nop
 800f67a:	3708      	adds	r7, #8
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	460b      	mov	r3, r1
 800f68a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f692:	78fa      	ldrb	r2, [r7, #3]
 800f694:	4611      	mov	r1, r2
 800f696:	4618      	mov	r0, r3
 800f698:	f7fa fe5d 	bl	800a356 <USBD_LL_IsoINIncomplete>
}
 800f69c:	bf00      	nop
 800f69e:	3708      	adds	r7, #8
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f7fa feb3 	bl	800a41e <USBD_LL_DevConnected>
}
 800f6b8:	bf00      	nop
 800f6ba:	3708      	adds	r7, #8
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fa feb0 	bl	800a434 <USBD_LL_DevDisconnected>
}
 800f6d4:	bf00      	nop
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d13c      	bne.n	800f766 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f6ec:	4a20      	ldr	r2, [pc, #128]	@ (800f770 <USBD_LL_Init+0x94>)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a1e      	ldr	r2, [pc, #120]	@ (800f770 <USBD_LL_Init+0x94>)
 800f6f8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f6fc:	4b1c      	ldr	r3, [pc, #112]	@ (800f770 <USBD_LL_Init+0x94>)
 800f6fe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f702:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f704:	4b1a      	ldr	r3, [pc, #104]	@ (800f770 <USBD_LL_Init+0x94>)
 800f706:	2204      	movs	r2, #4
 800f708:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f70a:	4b19      	ldr	r3, [pc, #100]	@ (800f770 <USBD_LL_Init+0x94>)
 800f70c:	2202      	movs	r2, #2
 800f70e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f710:	4b17      	ldr	r3, [pc, #92]	@ (800f770 <USBD_LL_Init+0x94>)
 800f712:	2200      	movs	r2, #0
 800f714:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f716:	4b16      	ldr	r3, [pc, #88]	@ (800f770 <USBD_LL_Init+0x94>)
 800f718:	2202      	movs	r2, #2
 800f71a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f71c:	4b14      	ldr	r3, [pc, #80]	@ (800f770 <USBD_LL_Init+0x94>)
 800f71e:	2200      	movs	r2, #0
 800f720:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f722:	4b13      	ldr	r3, [pc, #76]	@ (800f770 <USBD_LL_Init+0x94>)
 800f724:	2200      	movs	r2, #0
 800f726:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f728:	4b11      	ldr	r3, [pc, #68]	@ (800f770 <USBD_LL_Init+0x94>)
 800f72a:	2200      	movs	r2, #0
 800f72c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f72e:	4b10      	ldr	r3, [pc, #64]	@ (800f770 <USBD_LL_Init+0x94>)
 800f730:	2200      	movs	r2, #0
 800f732:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f734:	4b0e      	ldr	r3, [pc, #56]	@ (800f770 <USBD_LL_Init+0x94>)
 800f736:	2200      	movs	r2, #0
 800f738:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f73a:	480d      	ldr	r0, [pc, #52]	@ (800f770 <USBD_LL_Init+0x94>)
 800f73c:	f7f3 fa6e 	bl	8002c1c <HAL_PCD_Init>
 800f740:	4603      	mov	r3, r0
 800f742:	2b00      	cmp	r3, #0
 800f744:	d001      	beq.n	800f74a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f746:	f7f2 fcb3 	bl	80020b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f74a:	2180      	movs	r1, #128	@ 0x80
 800f74c:	4808      	ldr	r0, [pc, #32]	@ (800f770 <USBD_LL_Init+0x94>)
 800f74e:	f7f4 fcc8 	bl	80040e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f752:	2240      	movs	r2, #64	@ 0x40
 800f754:	2100      	movs	r1, #0
 800f756:	4806      	ldr	r0, [pc, #24]	@ (800f770 <USBD_LL_Init+0x94>)
 800f758:	f7f4 fc7c 	bl	8004054 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f75c:	2280      	movs	r2, #128	@ 0x80
 800f75e:	2101      	movs	r1, #1
 800f760:	4803      	ldr	r0, [pc, #12]	@ (800f770 <USBD_LL_Init+0x94>)
 800f762:	f7f4 fc77 	bl	8004054 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f766:	2300      	movs	r3, #0
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3708      	adds	r7, #8
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	20004600 	.word	0x20004600

0800f774 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f780:	2300      	movs	r3, #0
 800f782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7f3 fb55 	bl	8002e3a <HAL_PCD_Start>
 800f790:	4603      	mov	r3, r0
 800f792:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f794:	7bfb      	ldrb	r3, [r7, #15]
 800f796:	4618      	mov	r0, r3
 800f798:	f000 f962 	bl	800fa60 <USBD_Get_USB_Status>
 800f79c:	4603      	mov	r3, r0
 800f79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}

0800f7aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f7aa:	b580      	push	{r7, lr}
 800f7ac:	b084      	sub	sp, #16
 800f7ae:	af00      	add	r7, sp, #0
 800f7b0:	6078      	str	r0, [r7, #4]
 800f7b2:	4608      	mov	r0, r1
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	70fb      	strb	r3, [r7, #3]
 800f7bc:	460b      	mov	r3, r1
 800f7be:	70bb      	strb	r3, [r7, #2]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f7d2:	78bb      	ldrb	r3, [r7, #2]
 800f7d4:	883a      	ldrh	r2, [r7, #0]
 800f7d6:	78f9      	ldrb	r1, [r7, #3]
 800f7d8:	f7f4 f829 	bl	800382e <HAL_PCD_EP_Open>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7e0:	7bfb      	ldrb	r3, [r7, #15]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 f93c 	bl	800fa60 <USBD_Get_USB_Status>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b084      	sub	sp, #16
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	460b      	mov	r3, r1
 800f800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f802:	2300      	movs	r3, #0
 800f804:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f810:	78fa      	ldrb	r2, [r7, #3]
 800f812:	4611      	mov	r1, r2
 800f814:	4618      	mov	r0, r3
 800f816:	f7f4 f874 	bl	8003902 <HAL_PCD_EP_Close>
 800f81a:	4603      	mov	r3, r0
 800f81c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f81e:	7bfb      	ldrb	r3, [r7, #15]
 800f820:	4618      	mov	r0, r3
 800f822:	f000 f91d 	bl	800fa60 <USBD_Get_USB_Status>
 800f826:	4603      	mov	r3, r0
 800f828:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f82a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	460b      	mov	r3, r1
 800f83e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f840:	2300      	movs	r3, #0
 800f842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f844:	2300      	movs	r3, #0
 800f846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f84e:	78fa      	ldrb	r2, [r7, #3]
 800f850:	4611      	mov	r1, r2
 800f852:	4618      	mov	r0, r3
 800f854:	f7f4 fa16 	bl	8003c84 <HAL_PCD_EP_Flush>
 800f858:	4603      	mov	r3, r0
 800f85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f85c:	7bfb      	ldrb	r3, [r7, #15]
 800f85e:	4618      	mov	r0, r3
 800f860:	f000 f8fe 	bl	800fa60 <USBD_Get_USB_Status>
 800f864:	4603      	mov	r3, r0
 800f866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f868:	7bbb      	ldrb	r3, [r7, #14]
}
 800f86a:	4618      	mov	r0, r3
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b084      	sub	sp, #16
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
 800f87a:	460b      	mov	r3, r1
 800f87c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f87e:	2300      	movs	r3, #0
 800f880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f882:	2300      	movs	r3, #0
 800f884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f88c:	78fa      	ldrb	r2, [r7, #3]
 800f88e:	4611      	mov	r1, r2
 800f890:	4618      	mov	r0, r3
 800f892:	f7f4 f90d 	bl	8003ab0 <HAL_PCD_EP_SetStall>
 800f896:	4603      	mov	r3, r0
 800f898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f89a:	7bfb      	ldrb	r3, [r7, #15]
 800f89c:	4618      	mov	r0, r3
 800f89e:	f000 f8df 	bl	800fa60 <USBD_Get_USB_Status>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f8ca:	78fa      	ldrb	r2, [r7, #3]
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7f4 f951 	bl	8003b76 <HAL_PCD_EP_ClrStall>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8d8:	7bfb      	ldrb	r3, [r7, #15]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f000 f8c0 	bl	800fa60 <USBD_Get_USB_Status>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8ee:	b480      	push	{r7}
 800f8f0:	b085      	sub	sp, #20
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	6078      	str	r0, [r7, #4]
 800f8f6:	460b      	mov	r3, r1
 800f8f8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f900:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f906:	2b00      	cmp	r3, #0
 800f908:	da0b      	bge.n	800f922 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f90a:	78fb      	ldrb	r3, [r7, #3]
 800f90c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f910:	68f9      	ldr	r1, [r7, #12]
 800f912:	4613      	mov	r3, r2
 800f914:	00db      	lsls	r3, r3, #3
 800f916:	4413      	add	r3, r2
 800f918:	009b      	lsls	r3, r3, #2
 800f91a:	440b      	add	r3, r1
 800f91c:	3316      	adds	r3, #22
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	e00b      	b.n	800f93a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f922:	78fb      	ldrb	r3, [r7, #3]
 800f924:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f928:	68f9      	ldr	r1, [r7, #12]
 800f92a:	4613      	mov	r3, r2
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	4413      	add	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	440b      	add	r3, r1
 800f934:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f938:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr

0800f946 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f946:	b580      	push	{r7, lr}
 800f948:	b084      	sub	sp, #16
 800f94a:	af00      	add	r7, sp, #0
 800f94c:	6078      	str	r0, [r7, #4]
 800f94e:	460b      	mov	r3, r1
 800f950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f952:	2300      	movs	r3, #0
 800f954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f956:	2300      	movs	r3, #0
 800f958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f960:	78fa      	ldrb	r2, [r7, #3]
 800f962:	4611      	mov	r1, r2
 800f964:	4618      	mov	r0, r3
 800f966:	f7f3 ff3e 	bl	80037e6 <HAL_PCD_SetAddress>
 800f96a:	4603      	mov	r3, r0
 800f96c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f96e:	7bfb      	ldrb	r3, [r7, #15]
 800f970:	4618      	mov	r0, r3
 800f972:	f000 f875 	bl	800fa60 <USBD_Get_USB_Status>
 800f976:	4603      	mov	r3, r0
 800f978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f97a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b086      	sub	sp, #24
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	607a      	str	r2, [r7, #4]
 800f98e:	603b      	str	r3, [r7, #0]
 800f990:	460b      	mov	r3, r1
 800f992:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f994:	2300      	movs	r3, #0
 800f996:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f998:	2300      	movs	r3, #0
 800f99a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f9a2:	7af9      	ldrb	r1, [r7, #11]
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	f7f4 f848 	bl	8003a3c <HAL_PCD_EP_Transmit>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9b0:	7dfb      	ldrb	r3, [r7, #23]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f000 f854 	bl	800fa60 <USBD_Get_USB_Status>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3718      	adds	r7, #24
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}

0800f9c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f9c6:	b580      	push	{r7, lr}
 800f9c8:	b086      	sub	sp, #24
 800f9ca:	af00      	add	r7, sp, #0
 800f9cc:	60f8      	str	r0, [r7, #12]
 800f9ce:	607a      	str	r2, [r7, #4]
 800f9d0:	603b      	str	r3, [r7, #0]
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f9e4:	7af9      	ldrb	r1, [r7, #11]
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	687a      	ldr	r2, [r7, #4]
 800f9ea:	f7f3 ffd4 	bl	8003996 <HAL_PCD_EP_Receive>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9f2:	7dfb      	ldrb	r3, [r7, #23]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 f833 	bl	800fa60 <USBD_Get_USB_Status>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3718      	adds	r7, #24
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b082      	sub	sp, #8
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	460b      	mov	r3, r1
 800fa12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa1a:	78fa      	ldrb	r2, [r7, #3]
 800fa1c:	4611      	mov	r1, r2
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7f3 fff4 	bl	8003a0c <HAL_PCD_EP_GetRxCount>
 800fa24:	4603      	mov	r3, r0
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3708      	adds	r7, #8
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
	...

0800fa30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa38:	4b03      	ldr	r3, [pc, #12]	@ (800fa48 <USBD_static_malloc+0x18>)
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	370c      	adds	r7, #12
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop
 800fa48:	20004ae4 	.word	0x20004ae4

0800fa4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]

}
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b085      	sub	sp, #20
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	4603      	mov	r3, r0
 800fa68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa6e:	79fb      	ldrb	r3, [r7, #7]
 800fa70:	2b03      	cmp	r3, #3
 800fa72:	d817      	bhi.n	800faa4 <USBD_Get_USB_Status+0x44>
 800fa74:	a201      	add	r2, pc, #4	@ (adr r2, 800fa7c <USBD_Get_USB_Status+0x1c>)
 800fa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa7a:	bf00      	nop
 800fa7c:	0800fa8d 	.word	0x0800fa8d
 800fa80:	0800fa93 	.word	0x0800fa93
 800fa84:	0800fa99 	.word	0x0800fa99
 800fa88:	0800fa9f 	.word	0x0800fa9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa90:	e00b      	b.n	800faaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa92:	2303      	movs	r3, #3
 800fa94:	73fb      	strb	r3, [r7, #15]
    break;
 800fa96:	e008      	b.n	800faaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa9c:	e005      	b.n	800faaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa9e:	2303      	movs	r3, #3
 800faa0:	73fb      	strb	r3, [r7, #15]
    break;
 800faa2:	e002      	b.n	800faaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800faa4:	2303      	movs	r3, #3
 800faa6:	73fb      	strb	r3, [r7, #15]
    break;
 800faa8:	bf00      	nop
  }
  return usb_status;
 800faaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800faac:	4618      	mov	r0, r3
 800faae:	3714      	adds	r7, #20
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <sniprintf>:
 800fab8:	b40c      	push	{r2, r3}
 800faba:	b530      	push	{r4, r5, lr}
 800fabc:	4b17      	ldr	r3, [pc, #92]	@ (800fb1c <sniprintf+0x64>)
 800fabe:	1e0c      	subs	r4, r1, #0
 800fac0:	681d      	ldr	r5, [r3, #0]
 800fac2:	b09d      	sub	sp, #116	@ 0x74
 800fac4:	da08      	bge.n	800fad8 <sniprintf+0x20>
 800fac6:	238b      	movs	r3, #139	@ 0x8b
 800fac8:	602b      	str	r3, [r5, #0]
 800faca:	f04f 30ff 	mov.w	r0, #4294967295
 800face:	b01d      	add	sp, #116	@ 0x74
 800fad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fad4:	b002      	add	sp, #8
 800fad6:	4770      	bx	lr
 800fad8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fadc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fae0:	bf14      	ite	ne
 800fae2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fae6:	4623      	moveq	r3, r4
 800fae8:	9304      	str	r3, [sp, #16]
 800faea:	9307      	str	r3, [sp, #28]
 800faec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800faf0:	9002      	str	r0, [sp, #8]
 800faf2:	9006      	str	r0, [sp, #24]
 800faf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800faf8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fafa:	ab21      	add	r3, sp, #132	@ 0x84
 800fafc:	a902      	add	r1, sp, #8
 800fafe:	4628      	mov	r0, r5
 800fb00:	9301      	str	r3, [sp, #4]
 800fb02:	f000 f9cd 	bl	800fea0 <_svfiprintf_r>
 800fb06:	1c43      	adds	r3, r0, #1
 800fb08:	bfbc      	itt	lt
 800fb0a:	238b      	movlt	r3, #139	@ 0x8b
 800fb0c:	602b      	strlt	r3, [r5, #0]
 800fb0e:	2c00      	cmp	r4, #0
 800fb10:	d0dd      	beq.n	800face <sniprintf+0x16>
 800fb12:	9b02      	ldr	r3, [sp, #8]
 800fb14:	2200      	movs	r2, #0
 800fb16:	701a      	strb	r2, [r3, #0]
 800fb18:	e7d9      	b.n	800face <sniprintf+0x16>
 800fb1a:	bf00      	nop
 800fb1c:	20000114 	.word	0x20000114

0800fb20 <siprintf>:
 800fb20:	b40e      	push	{r1, r2, r3}
 800fb22:	b500      	push	{lr}
 800fb24:	b09c      	sub	sp, #112	@ 0x70
 800fb26:	ab1d      	add	r3, sp, #116	@ 0x74
 800fb28:	9002      	str	r0, [sp, #8]
 800fb2a:	9006      	str	r0, [sp, #24]
 800fb2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fb30:	4809      	ldr	r0, [pc, #36]	@ (800fb58 <siprintf+0x38>)
 800fb32:	9107      	str	r1, [sp, #28]
 800fb34:	9104      	str	r1, [sp, #16]
 800fb36:	4909      	ldr	r1, [pc, #36]	@ (800fb5c <siprintf+0x3c>)
 800fb38:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb3c:	9105      	str	r1, [sp, #20]
 800fb3e:	6800      	ldr	r0, [r0, #0]
 800fb40:	9301      	str	r3, [sp, #4]
 800fb42:	a902      	add	r1, sp, #8
 800fb44:	f000 f9ac 	bl	800fea0 <_svfiprintf_r>
 800fb48:	9b02      	ldr	r3, [sp, #8]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	701a      	strb	r2, [r3, #0]
 800fb4e:	b01c      	add	sp, #112	@ 0x70
 800fb50:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb54:	b003      	add	sp, #12
 800fb56:	4770      	bx	lr
 800fb58:	20000114 	.word	0x20000114
 800fb5c:	ffff0208 	.word	0xffff0208

0800fb60 <memset>:
 800fb60:	4402      	add	r2, r0
 800fb62:	4603      	mov	r3, r0
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d100      	bne.n	800fb6a <memset+0xa>
 800fb68:	4770      	bx	lr
 800fb6a:	f803 1b01 	strb.w	r1, [r3], #1
 800fb6e:	e7f9      	b.n	800fb64 <memset+0x4>

0800fb70 <strcat>:
 800fb70:	b510      	push	{r4, lr}
 800fb72:	4602      	mov	r2, r0
 800fb74:	7814      	ldrb	r4, [r2, #0]
 800fb76:	4613      	mov	r3, r2
 800fb78:	3201      	adds	r2, #1
 800fb7a:	2c00      	cmp	r4, #0
 800fb7c:	d1fa      	bne.n	800fb74 <strcat+0x4>
 800fb7e:	3b01      	subs	r3, #1
 800fb80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb84:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fb88:	2a00      	cmp	r2, #0
 800fb8a:	d1f9      	bne.n	800fb80 <strcat+0x10>
 800fb8c:	bd10      	pop	{r4, pc}
	...

0800fb90 <__errno>:
 800fb90:	4b01      	ldr	r3, [pc, #4]	@ (800fb98 <__errno+0x8>)
 800fb92:	6818      	ldr	r0, [r3, #0]
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	20000114 	.word	0x20000114

0800fb9c <__libc_init_array>:
 800fb9c:	b570      	push	{r4, r5, r6, lr}
 800fb9e:	4d0d      	ldr	r5, [pc, #52]	@ (800fbd4 <__libc_init_array+0x38>)
 800fba0:	4c0d      	ldr	r4, [pc, #52]	@ (800fbd8 <__libc_init_array+0x3c>)
 800fba2:	1b64      	subs	r4, r4, r5
 800fba4:	10a4      	asrs	r4, r4, #2
 800fba6:	2600      	movs	r6, #0
 800fba8:	42a6      	cmp	r6, r4
 800fbaa:	d109      	bne.n	800fbc0 <__libc_init_array+0x24>
 800fbac:	4d0b      	ldr	r5, [pc, #44]	@ (800fbdc <__libc_init_array+0x40>)
 800fbae:	4c0c      	ldr	r4, [pc, #48]	@ (800fbe0 <__libc_init_array+0x44>)
 800fbb0:	f000 fc6e 	bl	8010490 <_init>
 800fbb4:	1b64      	subs	r4, r4, r5
 800fbb6:	10a4      	asrs	r4, r4, #2
 800fbb8:	2600      	movs	r6, #0
 800fbba:	42a6      	cmp	r6, r4
 800fbbc:	d105      	bne.n	800fbca <__libc_init_array+0x2e>
 800fbbe:	bd70      	pop	{r4, r5, r6, pc}
 800fbc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbc4:	4798      	blx	r3
 800fbc6:	3601      	adds	r6, #1
 800fbc8:	e7ee      	b.n	800fba8 <__libc_init_array+0xc>
 800fbca:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbce:	4798      	blx	r3
 800fbd0:	3601      	adds	r6, #1
 800fbd2:	e7f2      	b.n	800fbba <__libc_init_array+0x1e>
 800fbd4:	08010dcc 	.word	0x08010dcc
 800fbd8:	08010dcc 	.word	0x08010dcc
 800fbdc:	08010dcc 	.word	0x08010dcc
 800fbe0:	08010dd0 	.word	0x08010dd0

0800fbe4 <__retarget_lock_acquire_recursive>:
 800fbe4:	4770      	bx	lr

0800fbe6 <__retarget_lock_release_recursive>:
 800fbe6:	4770      	bx	lr

0800fbe8 <strcpy>:
 800fbe8:	4603      	mov	r3, r0
 800fbea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbee:	f803 2b01 	strb.w	r2, [r3], #1
 800fbf2:	2a00      	cmp	r2, #0
 800fbf4:	d1f9      	bne.n	800fbea <strcpy+0x2>
 800fbf6:	4770      	bx	lr

0800fbf8 <_free_r>:
 800fbf8:	b538      	push	{r3, r4, r5, lr}
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	2900      	cmp	r1, #0
 800fbfe:	d041      	beq.n	800fc84 <_free_r+0x8c>
 800fc00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc04:	1f0c      	subs	r4, r1, #4
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	bfb8      	it	lt
 800fc0a:	18e4      	addlt	r4, r4, r3
 800fc0c:	f000 f8e0 	bl	800fdd0 <__malloc_lock>
 800fc10:	4a1d      	ldr	r2, [pc, #116]	@ (800fc88 <_free_r+0x90>)
 800fc12:	6813      	ldr	r3, [r2, #0]
 800fc14:	b933      	cbnz	r3, 800fc24 <_free_r+0x2c>
 800fc16:	6063      	str	r3, [r4, #4]
 800fc18:	6014      	str	r4, [r2, #0]
 800fc1a:	4628      	mov	r0, r5
 800fc1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc20:	f000 b8dc 	b.w	800fddc <__malloc_unlock>
 800fc24:	42a3      	cmp	r3, r4
 800fc26:	d908      	bls.n	800fc3a <_free_r+0x42>
 800fc28:	6820      	ldr	r0, [r4, #0]
 800fc2a:	1821      	adds	r1, r4, r0
 800fc2c:	428b      	cmp	r3, r1
 800fc2e:	bf01      	itttt	eq
 800fc30:	6819      	ldreq	r1, [r3, #0]
 800fc32:	685b      	ldreq	r3, [r3, #4]
 800fc34:	1809      	addeq	r1, r1, r0
 800fc36:	6021      	streq	r1, [r4, #0]
 800fc38:	e7ed      	b.n	800fc16 <_free_r+0x1e>
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	685b      	ldr	r3, [r3, #4]
 800fc3e:	b10b      	cbz	r3, 800fc44 <_free_r+0x4c>
 800fc40:	42a3      	cmp	r3, r4
 800fc42:	d9fa      	bls.n	800fc3a <_free_r+0x42>
 800fc44:	6811      	ldr	r1, [r2, #0]
 800fc46:	1850      	adds	r0, r2, r1
 800fc48:	42a0      	cmp	r0, r4
 800fc4a:	d10b      	bne.n	800fc64 <_free_r+0x6c>
 800fc4c:	6820      	ldr	r0, [r4, #0]
 800fc4e:	4401      	add	r1, r0
 800fc50:	1850      	adds	r0, r2, r1
 800fc52:	4283      	cmp	r3, r0
 800fc54:	6011      	str	r1, [r2, #0]
 800fc56:	d1e0      	bne.n	800fc1a <_free_r+0x22>
 800fc58:	6818      	ldr	r0, [r3, #0]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	6053      	str	r3, [r2, #4]
 800fc5e:	4408      	add	r0, r1
 800fc60:	6010      	str	r0, [r2, #0]
 800fc62:	e7da      	b.n	800fc1a <_free_r+0x22>
 800fc64:	d902      	bls.n	800fc6c <_free_r+0x74>
 800fc66:	230c      	movs	r3, #12
 800fc68:	602b      	str	r3, [r5, #0]
 800fc6a:	e7d6      	b.n	800fc1a <_free_r+0x22>
 800fc6c:	6820      	ldr	r0, [r4, #0]
 800fc6e:	1821      	adds	r1, r4, r0
 800fc70:	428b      	cmp	r3, r1
 800fc72:	bf04      	itt	eq
 800fc74:	6819      	ldreq	r1, [r3, #0]
 800fc76:	685b      	ldreq	r3, [r3, #4]
 800fc78:	6063      	str	r3, [r4, #4]
 800fc7a:	bf04      	itt	eq
 800fc7c:	1809      	addeq	r1, r1, r0
 800fc7e:	6021      	streq	r1, [r4, #0]
 800fc80:	6054      	str	r4, [r2, #4]
 800fc82:	e7ca      	b.n	800fc1a <_free_r+0x22>
 800fc84:	bd38      	pop	{r3, r4, r5, pc}
 800fc86:	bf00      	nop
 800fc88:	20004eb0 	.word	0x20004eb0

0800fc8c <sbrk_aligned>:
 800fc8c:	b570      	push	{r4, r5, r6, lr}
 800fc8e:	4e0f      	ldr	r6, [pc, #60]	@ (800fccc <sbrk_aligned+0x40>)
 800fc90:	460c      	mov	r4, r1
 800fc92:	6831      	ldr	r1, [r6, #0]
 800fc94:	4605      	mov	r5, r0
 800fc96:	b911      	cbnz	r1, 800fc9e <sbrk_aligned+0x12>
 800fc98:	f000 fba6 	bl	80103e8 <_sbrk_r>
 800fc9c:	6030      	str	r0, [r6, #0]
 800fc9e:	4621      	mov	r1, r4
 800fca0:	4628      	mov	r0, r5
 800fca2:	f000 fba1 	bl	80103e8 <_sbrk_r>
 800fca6:	1c43      	adds	r3, r0, #1
 800fca8:	d103      	bne.n	800fcb2 <sbrk_aligned+0x26>
 800fcaa:	f04f 34ff 	mov.w	r4, #4294967295
 800fcae:	4620      	mov	r0, r4
 800fcb0:	bd70      	pop	{r4, r5, r6, pc}
 800fcb2:	1cc4      	adds	r4, r0, #3
 800fcb4:	f024 0403 	bic.w	r4, r4, #3
 800fcb8:	42a0      	cmp	r0, r4
 800fcba:	d0f8      	beq.n	800fcae <sbrk_aligned+0x22>
 800fcbc:	1a21      	subs	r1, r4, r0
 800fcbe:	4628      	mov	r0, r5
 800fcc0:	f000 fb92 	bl	80103e8 <_sbrk_r>
 800fcc4:	3001      	adds	r0, #1
 800fcc6:	d1f2      	bne.n	800fcae <sbrk_aligned+0x22>
 800fcc8:	e7ef      	b.n	800fcaa <sbrk_aligned+0x1e>
 800fcca:	bf00      	nop
 800fccc:	20004eac 	.word	0x20004eac

0800fcd0 <_malloc_r>:
 800fcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcd4:	1ccd      	adds	r5, r1, #3
 800fcd6:	f025 0503 	bic.w	r5, r5, #3
 800fcda:	3508      	adds	r5, #8
 800fcdc:	2d0c      	cmp	r5, #12
 800fcde:	bf38      	it	cc
 800fce0:	250c      	movcc	r5, #12
 800fce2:	2d00      	cmp	r5, #0
 800fce4:	4606      	mov	r6, r0
 800fce6:	db01      	blt.n	800fcec <_malloc_r+0x1c>
 800fce8:	42a9      	cmp	r1, r5
 800fcea:	d904      	bls.n	800fcf6 <_malloc_r+0x26>
 800fcec:	230c      	movs	r3, #12
 800fcee:	6033      	str	r3, [r6, #0]
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fdcc <_malloc_r+0xfc>
 800fcfa:	f000 f869 	bl	800fdd0 <__malloc_lock>
 800fcfe:	f8d8 3000 	ldr.w	r3, [r8]
 800fd02:	461c      	mov	r4, r3
 800fd04:	bb44      	cbnz	r4, 800fd58 <_malloc_r+0x88>
 800fd06:	4629      	mov	r1, r5
 800fd08:	4630      	mov	r0, r6
 800fd0a:	f7ff ffbf 	bl	800fc8c <sbrk_aligned>
 800fd0e:	1c43      	adds	r3, r0, #1
 800fd10:	4604      	mov	r4, r0
 800fd12:	d158      	bne.n	800fdc6 <_malloc_r+0xf6>
 800fd14:	f8d8 4000 	ldr.w	r4, [r8]
 800fd18:	4627      	mov	r7, r4
 800fd1a:	2f00      	cmp	r7, #0
 800fd1c:	d143      	bne.n	800fda6 <_malloc_r+0xd6>
 800fd1e:	2c00      	cmp	r4, #0
 800fd20:	d04b      	beq.n	800fdba <_malloc_r+0xea>
 800fd22:	6823      	ldr	r3, [r4, #0]
 800fd24:	4639      	mov	r1, r7
 800fd26:	4630      	mov	r0, r6
 800fd28:	eb04 0903 	add.w	r9, r4, r3
 800fd2c:	f000 fb5c 	bl	80103e8 <_sbrk_r>
 800fd30:	4581      	cmp	r9, r0
 800fd32:	d142      	bne.n	800fdba <_malloc_r+0xea>
 800fd34:	6821      	ldr	r1, [r4, #0]
 800fd36:	1a6d      	subs	r5, r5, r1
 800fd38:	4629      	mov	r1, r5
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	f7ff ffa6 	bl	800fc8c <sbrk_aligned>
 800fd40:	3001      	adds	r0, #1
 800fd42:	d03a      	beq.n	800fdba <_malloc_r+0xea>
 800fd44:	6823      	ldr	r3, [r4, #0]
 800fd46:	442b      	add	r3, r5
 800fd48:	6023      	str	r3, [r4, #0]
 800fd4a:	f8d8 3000 	ldr.w	r3, [r8]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	bb62      	cbnz	r2, 800fdac <_malloc_r+0xdc>
 800fd52:	f8c8 7000 	str.w	r7, [r8]
 800fd56:	e00f      	b.n	800fd78 <_malloc_r+0xa8>
 800fd58:	6822      	ldr	r2, [r4, #0]
 800fd5a:	1b52      	subs	r2, r2, r5
 800fd5c:	d420      	bmi.n	800fda0 <_malloc_r+0xd0>
 800fd5e:	2a0b      	cmp	r2, #11
 800fd60:	d917      	bls.n	800fd92 <_malloc_r+0xc2>
 800fd62:	1961      	adds	r1, r4, r5
 800fd64:	42a3      	cmp	r3, r4
 800fd66:	6025      	str	r5, [r4, #0]
 800fd68:	bf18      	it	ne
 800fd6a:	6059      	strne	r1, [r3, #4]
 800fd6c:	6863      	ldr	r3, [r4, #4]
 800fd6e:	bf08      	it	eq
 800fd70:	f8c8 1000 	streq.w	r1, [r8]
 800fd74:	5162      	str	r2, [r4, r5]
 800fd76:	604b      	str	r3, [r1, #4]
 800fd78:	4630      	mov	r0, r6
 800fd7a:	f000 f82f 	bl	800fddc <__malloc_unlock>
 800fd7e:	f104 000b 	add.w	r0, r4, #11
 800fd82:	1d23      	adds	r3, r4, #4
 800fd84:	f020 0007 	bic.w	r0, r0, #7
 800fd88:	1ac2      	subs	r2, r0, r3
 800fd8a:	bf1c      	itt	ne
 800fd8c:	1a1b      	subne	r3, r3, r0
 800fd8e:	50a3      	strne	r3, [r4, r2]
 800fd90:	e7af      	b.n	800fcf2 <_malloc_r+0x22>
 800fd92:	6862      	ldr	r2, [r4, #4]
 800fd94:	42a3      	cmp	r3, r4
 800fd96:	bf0c      	ite	eq
 800fd98:	f8c8 2000 	streq.w	r2, [r8]
 800fd9c:	605a      	strne	r2, [r3, #4]
 800fd9e:	e7eb      	b.n	800fd78 <_malloc_r+0xa8>
 800fda0:	4623      	mov	r3, r4
 800fda2:	6864      	ldr	r4, [r4, #4]
 800fda4:	e7ae      	b.n	800fd04 <_malloc_r+0x34>
 800fda6:	463c      	mov	r4, r7
 800fda8:	687f      	ldr	r7, [r7, #4]
 800fdaa:	e7b6      	b.n	800fd1a <_malloc_r+0x4a>
 800fdac:	461a      	mov	r2, r3
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	42a3      	cmp	r3, r4
 800fdb2:	d1fb      	bne.n	800fdac <_malloc_r+0xdc>
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	6053      	str	r3, [r2, #4]
 800fdb8:	e7de      	b.n	800fd78 <_malloc_r+0xa8>
 800fdba:	230c      	movs	r3, #12
 800fdbc:	6033      	str	r3, [r6, #0]
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	f000 f80c 	bl	800fddc <__malloc_unlock>
 800fdc4:	e794      	b.n	800fcf0 <_malloc_r+0x20>
 800fdc6:	6005      	str	r5, [r0, #0]
 800fdc8:	e7d6      	b.n	800fd78 <_malloc_r+0xa8>
 800fdca:	bf00      	nop
 800fdcc:	20004eb0 	.word	0x20004eb0

0800fdd0 <__malloc_lock>:
 800fdd0:	4801      	ldr	r0, [pc, #4]	@ (800fdd8 <__malloc_lock+0x8>)
 800fdd2:	f7ff bf07 	b.w	800fbe4 <__retarget_lock_acquire_recursive>
 800fdd6:	bf00      	nop
 800fdd8:	20004ea8 	.word	0x20004ea8

0800fddc <__malloc_unlock>:
 800fddc:	4801      	ldr	r0, [pc, #4]	@ (800fde4 <__malloc_unlock+0x8>)
 800fdde:	f7ff bf02 	b.w	800fbe6 <__retarget_lock_release_recursive>
 800fde2:	bf00      	nop
 800fde4:	20004ea8 	.word	0x20004ea8

0800fde8 <__ssputs_r>:
 800fde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdec:	688e      	ldr	r6, [r1, #8]
 800fdee:	461f      	mov	r7, r3
 800fdf0:	42be      	cmp	r6, r7
 800fdf2:	680b      	ldr	r3, [r1, #0]
 800fdf4:	4682      	mov	sl, r0
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	4690      	mov	r8, r2
 800fdfa:	d82d      	bhi.n	800fe58 <__ssputs_r+0x70>
 800fdfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fe04:	d026      	beq.n	800fe54 <__ssputs_r+0x6c>
 800fe06:	6965      	ldr	r5, [r4, #20]
 800fe08:	6909      	ldr	r1, [r1, #16]
 800fe0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe0e:	eba3 0901 	sub.w	r9, r3, r1
 800fe12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe16:	1c7b      	adds	r3, r7, #1
 800fe18:	444b      	add	r3, r9
 800fe1a:	106d      	asrs	r5, r5, #1
 800fe1c:	429d      	cmp	r5, r3
 800fe1e:	bf38      	it	cc
 800fe20:	461d      	movcc	r5, r3
 800fe22:	0553      	lsls	r3, r2, #21
 800fe24:	d527      	bpl.n	800fe76 <__ssputs_r+0x8e>
 800fe26:	4629      	mov	r1, r5
 800fe28:	f7ff ff52 	bl	800fcd0 <_malloc_r>
 800fe2c:	4606      	mov	r6, r0
 800fe2e:	b360      	cbz	r0, 800fe8a <__ssputs_r+0xa2>
 800fe30:	6921      	ldr	r1, [r4, #16]
 800fe32:	464a      	mov	r2, r9
 800fe34:	f000 fae8 	bl	8010408 <memcpy>
 800fe38:	89a3      	ldrh	r3, [r4, #12]
 800fe3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe42:	81a3      	strh	r3, [r4, #12]
 800fe44:	6126      	str	r6, [r4, #16]
 800fe46:	6165      	str	r5, [r4, #20]
 800fe48:	444e      	add	r6, r9
 800fe4a:	eba5 0509 	sub.w	r5, r5, r9
 800fe4e:	6026      	str	r6, [r4, #0]
 800fe50:	60a5      	str	r5, [r4, #8]
 800fe52:	463e      	mov	r6, r7
 800fe54:	42be      	cmp	r6, r7
 800fe56:	d900      	bls.n	800fe5a <__ssputs_r+0x72>
 800fe58:	463e      	mov	r6, r7
 800fe5a:	6820      	ldr	r0, [r4, #0]
 800fe5c:	4632      	mov	r2, r6
 800fe5e:	4641      	mov	r1, r8
 800fe60:	f000 faa8 	bl	80103b4 <memmove>
 800fe64:	68a3      	ldr	r3, [r4, #8]
 800fe66:	1b9b      	subs	r3, r3, r6
 800fe68:	60a3      	str	r3, [r4, #8]
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	4433      	add	r3, r6
 800fe6e:	6023      	str	r3, [r4, #0]
 800fe70:	2000      	movs	r0, #0
 800fe72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe76:	462a      	mov	r2, r5
 800fe78:	f000 fad4 	bl	8010424 <_realloc_r>
 800fe7c:	4606      	mov	r6, r0
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d1e0      	bne.n	800fe44 <__ssputs_r+0x5c>
 800fe82:	6921      	ldr	r1, [r4, #16]
 800fe84:	4650      	mov	r0, sl
 800fe86:	f7ff feb7 	bl	800fbf8 <_free_r>
 800fe8a:	230c      	movs	r3, #12
 800fe8c:	f8ca 3000 	str.w	r3, [sl]
 800fe90:	89a3      	ldrh	r3, [r4, #12]
 800fe92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe96:	81a3      	strh	r3, [r4, #12]
 800fe98:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9c:	e7e9      	b.n	800fe72 <__ssputs_r+0x8a>
	...

0800fea0 <_svfiprintf_r>:
 800fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea4:	4698      	mov	r8, r3
 800fea6:	898b      	ldrh	r3, [r1, #12]
 800fea8:	061b      	lsls	r3, r3, #24
 800feaa:	b09d      	sub	sp, #116	@ 0x74
 800feac:	4607      	mov	r7, r0
 800feae:	460d      	mov	r5, r1
 800feb0:	4614      	mov	r4, r2
 800feb2:	d510      	bpl.n	800fed6 <_svfiprintf_r+0x36>
 800feb4:	690b      	ldr	r3, [r1, #16]
 800feb6:	b973      	cbnz	r3, 800fed6 <_svfiprintf_r+0x36>
 800feb8:	2140      	movs	r1, #64	@ 0x40
 800feba:	f7ff ff09 	bl	800fcd0 <_malloc_r>
 800febe:	6028      	str	r0, [r5, #0]
 800fec0:	6128      	str	r0, [r5, #16]
 800fec2:	b930      	cbnz	r0, 800fed2 <_svfiprintf_r+0x32>
 800fec4:	230c      	movs	r3, #12
 800fec6:	603b      	str	r3, [r7, #0]
 800fec8:	f04f 30ff 	mov.w	r0, #4294967295
 800fecc:	b01d      	add	sp, #116	@ 0x74
 800fece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed2:	2340      	movs	r3, #64	@ 0x40
 800fed4:	616b      	str	r3, [r5, #20]
 800fed6:	2300      	movs	r3, #0
 800fed8:	9309      	str	r3, [sp, #36]	@ 0x24
 800feda:	2320      	movs	r3, #32
 800fedc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fee0:	f8cd 800c 	str.w	r8, [sp, #12]
 800fee4:	2330      	movs	r3, #48	@ 0x30
 800fee6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010084 <_svfiprintf_r+0x1e4>
 800feea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800feee:	f04f 0901 	mov.w	r9, #1
 800fef2:	4623      	mov	r3, r4
 800fef4:	469a      	mov	sl, r3
 800fef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fefa:	b10a      	cbz	r2, 800ff00 <_svfiprintf_r+0x60>
 800fefc:	2a25      	cmp	r2, #37	@ 0x25
 800fefe:	d1f9      	bne.n	800fef4 <_svfiprintf_r+0x54>
 800ff00:	ebba 0b04 	subs.w	fp, sl, r4
 800ff04:	d00b      	beq.n	800ff1e <_svfiprintf_r+0x7e>
 800ff06:	465b      	mov	r3, fp
 800ff08:	4622      	mov	r2, r4
 800ff0a:	4629      	mov	r1, r5
 800ff0c:	4638      	mov	r0, r7
 800ff0e:	f7ff ff6b 	bl	800fde8 <__ssputs_r>
 800ff12:	3001      	adds	r0, #1
 800ff14:	f000 80a7 	beq.w	8010066 <_svfiprintf_r+0x1c6>
 800ff18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff1a:	445a      	add	r2, fp
 800ff1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f000 809f 	beq.w	8010066 <_svfiprintf_r+0x1c6>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ff2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff32:	f10a 0a01 	add.w	sl, sl, #1
 800ff36:	9304      	str	r3, [sp, #16]
 800ff38:	9307      	str	r3, [sp, #28]
 800ff3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff40:	4654      	mov	r4, sl
 800ff42:	2205      	movs	r2, #5
 800ff44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff48:	484e      	ldr	r0, [pc, #312]	@ (8010084 <_svfiprintf_r+0x1e4>)
 800ff4a:	f7f0 f959 	bl	8000200 <memchr>
 800ff4e:	9a04      	ldr	r2, [sp, #16]
 800ff50:	b9d8      	cbnz	r0, 800ff8a <_svfiprintf_r+0xea>
 800ff52:	06d0      	lsls	r0, r2, #27
 800ff54:	bf44      	itt	mi
 800ff56:	2320      	movmi	r3, #32
 800ff58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff5c:	0711      	lsls	r1, r2, #28
 800ff5e:	bf44      	itt	mi
 800ff60:	232b      	movmi	r3, #43	@ 0x2b
 800ff62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff66:	f89a 3000 	ldrb.w	r3, [sl]
 800ff6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff6c:	d015      	beq.n	800ff9a <_svfiprintf_r+0xfa>
 800ff6e:	9a07      	ldr	r2, [sp, #28]
 800ff70:	4654      	mov	r4, sl
 800ff72:	2000      	movs	r0, #0
 800ff74:	f04f 0c0a 	mov.w	ip, #10
 800ff78:	4621      	mov	r1, r4
 800ff7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff7e:	3b30      	subs	r3, #48	@ 0x30
 800ff80:	2b09      	cmp	r3, #9
 800ff82:	d94b      	bls.n	801001c <_svfiprintf_r+0x17c>
 800ff84:	b1b0      	cbz	r0, 800ffb4 <_svfiprintf_r+0x114>
 800ff86:	9207      	str	r2, [sp, #28]
 800ff88:	e014      	b.n	800ffb4 <_svfiprintf_r+0x114>
 800ff8a:	eba0 0308 	sub.w	r3, r0, r8
 800ff8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ff92:	4313      	orrs	r3, r2
 800ff94:	9304      	str	r3, [sp, #16]
 800ff96:	46a2      	mov	sl, r4
 800ff98:	e7d2      	b.n	800ff40 <_svfiprintf_r+0xa0>
 800ff9a:	9b03      	ldr	r3, [sp, #12]
 800ff9c:	1d19      	adds	r1, r3, #4
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	9103      	str	r1, [sp, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	bfbb      	ittet	lt
 800ffa6:	425b      	neglt	r3, r3
 800ffa8:	f042 0202 	orrlt.w	r2, r2, #2
 800ffac:	9307      	strge	r3, [sp, #28]
 800ffae:	9307      	strlt	r3, [sp, #28]
 800ffb0:	bfb8      	it	lt
 800ffb2:	9204      	strlt	r2, [sp, #16]
 800ffb4:	7823      	ldrb	r3, [r4, #0]
 800ffb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffb8:	d10a      	bne.n	800ffd0 <_svfiprintf_r+0x130>
 800ffba:	7863      	ldrb	r3, [r4, #1]
 800ffbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffbe:	d132      	bne.n	8010026 <_svfiprintf_r+0x186>
 800ffc0:	9b03      	ldr	r3, [sp, #12]
 800ffc2:	1d1a      	adds	r2, r3, #4
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	9203      	str	r2, [sp, #12]
 800ffc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffcc:	3402      	adds	r4, #2
 800ffce:	9305      	str	r3, [sp, #20]
 800ffd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010094 <_svfiprintf_r+0x1f4>
 800ffd4:	7821      	ldrb	r1, [r4, #0]
 800ffd6:	2203      	movs	r2, #3
 800ffd8:	4650      	mov	r0, sl
 800ffda:	f7f0 f911 	bl	8000200 <memchr>
 800ffde:	b138      	cbz	r0, 800fff0 <_svfiprintf_r+0x150>
 800ffe0:	9b04      	ldr	r3, [sp, #16]
 800ffe2:	eba0 000a 	sub.w	r0, r0, sl
 800ffe6:	2240      	movs	r2, #64	@ 0x40
 800ffe8:	4082      	lsls	r2, r0
 800ffea:	4313      	orrs	r3, r2
 800ffec:	3401      	adds	r4, #1
 800ffee:	9304      	str	r3, [sp, #16]
 800fff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fff4:	4824      	ldr	r0, [pc, #144]	@ (8010088 <_svfiprintf_r+0x1e8>)
 800fff6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fffa:	2206      	movs	r2, #6
 800fffc:	f7f0 f900 	bl	8000200 <memchr>
 8010000:	2800      	cmp	r0, #0
 8010002:	d036      	beq.n	8010072 <_svfiprintf_r+0x1d2>
 8010004:	4b21      	ldr	r3, [pc, #132]	@ (801008c <_svfiprintf_r+0x1ec>)
 8010006:	bb1b      	cbnz	r3, 8010050 <_svfiprintf_r+0x1b0>
 8010008:	9b03      	ldr	r3, [sp, #12]
 801000a:	3307      	adds	r3, #7
 801000c:	f023 0307 	bic.w	r3, r3, #7
 8010010:	3308      	adds	r3, #8
 8010012:	9303      	str	r3, [sp, #12]
 8010014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010016:	4433      	add	r3, r6
 8010018:	9309      	str	r3, [sp, #36]	@ 0x24
 801001a:	e76a      	b.n	800fef2 <_svfiprintf_r+0x52>
 801001c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010020:	460c      	mov	r4, r1
 8010022:	2001      	movs	r0, #1
 8010024:	e7a8      	b.n	800ff78 <_svfiprintf_r+0xd8>
 8010026:	2300      	movs	r3, #0
 8010028:	3401      	adds	r4, #1
 801002a:	9305      	str	r3, [sp, #20]
 801002c:	4619      	mov	r1, r3
 801002e:	f04f 0c0a 	mov.w	ip, #10
 8010032:	4620      	mov	r0, r4
 8010034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010038:	3a30      	subs	r2, #48	@ 0x30
 801003a:	2a09      	cmp	r2, #9
 801003c:	d903      	bls.n	8010046 <_svfiprintf_r+0x1a6>
 801003e:	2b00      	cmp	r3, #0
 8010040:	d0c6      	beq.n	800ffd0 <_svfiprintf_r+0x130>
 8010042:	9105      	str	r1, [sp, #20]
 8010044:	e7c4      	b.n	800ffd0 <_svfiprintf_r+0x130>
 8010046:	fb0c 2101 	mla	r1, ip, r1, r2
 801004a:	4604      	mov	r4, r0
 801004c:	2301      	movs	r3, #1
 801004e:	e7f0      	b.n	8010032 <_svfiprintf_r+0x192>
 8010050:	ab03      	add	r3, sp, #12
 8010052:	9300      	str	r3, [sp, #0]
 8010054:	462a      	mov	r2, r5
 8010056:	4b0e      	ldr	r3, [pc, #56]	@ (8010090 <_svfiprintf_r+0x1f0>)
 8010058:	a904      	add	r1, sp, #16
 801005a:	4638      	mov	r0, r7
 801005c:	f3af 8000 	nop.w
 8010060:	1c42      	adds	r2, r0, #1
 8010062:	4606      	mov	r6, r0
 8010064:	d1d6      	bne.n	8010014 <_svfiprintf_r+0x174>
 8010066:	89ab      	ldrh	r3, [r5, #12]
 8010068:	065b      	lsls	r3, r3, #25
 801006a:	f53f af2d 	bmi.w	800fec8 <_svfiprintf_r+0x28>
 801006e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010070:	e72c      	b.n	800fecc <_svfiprintf_r+0x2c>
 8010072:	ab03      	add	r3, sp, #12
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	462a      	mov	r2, r5
 8010078:	4b05      	ldr	r3, [pc, #20]	@ (8010090 <_svfiprintf_r+0x1f0>)
 801007a:	a904      	add	r1, sp, #16
 801007c:	4638      	mov	r0, r7
 801007e:	f000 f879 	bl	8010174 <_printf_i>
 8010082:	e7ed      	b.n	8010060 <_svfiprintf_r+0x1c0>
 8010084:	08010d90 	.word	0x08010d90
 8010088:	08010d9a 	.word	0x08010d9a
 801008c:	00000000 	.word	0x00000000
 8010090:	0800fde9 	.word	0x0800fde9
 8010094:	08010d96 	.word	0x08010d96

08010098 <_printf_common>:
 8010098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801009c:	4616      	mov	r6, r2
 801009e:	4698      	mov	r8, r3
 80100a0:	688a      	ldr	r2, [r1, #8]
 80100a2:	690b      	ldr	r3, [r1, #16]
 80100a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80100a8:	4293      	cmp	r3, r2
 80100aa:	bfb8      	it	lt
 80100ac:	4613      	movlt	r3, r2
 80100ae:	6033      	str	r3, [r6, #0]
 80100b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80100b4:	4607      	mov	r7, r0
 80100b6:	460c      	mov	r4, r1
 80100b8:	b10a      	cbz	r2, 80100be <_printf_common+0x26>
 80100ba:	3301      	adds	r3, #1
 80100bc:	6033      	str	r3, [r6, #0]
 80100be:	6823      	ldr	r3, [r4, #0]
 80100c0:	0699      	lsls	r1, r3, #26
 80100c2:	bf42      	ittt	mi
 80100c4:	6833      	ldrmi	r3, [r6, #0]
 80100c6:	3302      	addmi	r3, #2
 80100c8:	6033      	strmi	r3, [r6, #0]
 80100ca:	6825      	ldr	r5, [r4, #0]
 80100cc:	f015 0506 	ands.w	r5, r5, #6
 80100d0:	d106      	bne.n	80100e0 <_printf_common+0x48>
 80100d2:	f104 0a19 	add.w	sl, r4, #25
 80100d6:	68e3      	ldr	r3, [r4, #12]
 80100d8:	6832      	ldr	r2, [r6, #0]
 80100da:	1a9b      	subs	r3, r3, r2
 80100dc:	42ab      	cmp	r3, r5
 80100de:	dc26      	bgt.n	801012e <_printf_common+0x96>
 80100e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80100e4:	6822      	ldr	r2, [r4, #0]
 80100e6:	3b00      	subs	r3, #0
 80100e8:	bf18      	it	ne
 80100ea:	2301      	movne	r3, #1
 80100ec:	0692      	lsls	r2, r2, #26
 80100ee:	d42b      	bmi.n	8010148 <_printf_common+0xb0>
 80100f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100f4:	4641      	mov	r1, r8
 80100f6:	4638      	mov	r0, r7
 80100f8:	47c8      	blx	r9
 80100fa:	3001      	adds	r0, #1
 80100fc:	d01e      	beq.n	801013c <_printf_common+0xa4>
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	6922      	ldr	r2, [r4, #16]
 8010102:	f003 0306 	and.w	r3, r3, #6
 8010106:	2b04      	cmp	r3, #4
 8010108:	bf02      	ittt	eq
 801010a:	68e5      	ldreq	r5, [r4, #12]
 801010c:	6833      	ldreq	r3, [r6, #0]
 801010e:	1aed      	subeq	r5, r5, r3
 8010110:	68a3      	ldr	r3, [r4, #8]
 8010112:	bf0c      	ite	eq
 8010114:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010118:	2500      	movne	r5, #0
 801011a:	4293      	cmp	r3, r2
 801011c:	bfc4      	itt	gt
 801011e:	1a9b      	subgt	r3, r3, r2
 8010120:	18ed      	addgt	r5, r5, r3
 8010122:	2600      	movs	r6, #0
 8010124:	341a      	adds	r4, #26
 8010126:	42b5      	cmp	r5, r6
 8010128:	d11a      	bne.n	8010160 <_printf_common+0xc8>
 801012a:	2000      	movs	r0, #0
 801012c:	e008      	b.n	8010140 <_printf_common+0xa8>
 801012e:	2301      	movs	r3, #1
 8010130:	4652      	mov	r2, sl
 8010132:	4641      	mov	r1, r8
 8010134:	4638      	mov	r0, r7
 8010136:	47c8      	blx	r9
 8010138:	3001      	adds	r0, #1
 801013a:	d103      	bne.n	8010144 <_printf_common+0xac>
 801013c:	f04f 30ff 	mov.w	r0, #4294967295
 8010140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010144:	3501      	adds	r5, #1
 8010146:	e7c6      	b.n	80100d6 <_printf_common+0x3e>
 8010148:	18e1      	adds	r1, r4, r3
 801014a:	1c5a      	adds	r2, r3, #1
 801014c:	2030      	movs	r0, #48	@ 0x30
 801014e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010152:	4422      	add	r2, r4
 8010154:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010158:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801015c:	3302      	adds	r3, #2
 801015e:	e7c7      	b.n	80100f0 <_printf_common+0x58>
 8010160:	2301      	movs	r3, #1
 8010162:	4622      	mov	r2, r4
 8010164:	4641      	mov	r1, r8
 8010166:	4638      	mov	r0, r7
 8010168:	47c8      	blx	r9
 801016a:	3001      	adds	r0, #1
 801016c:	d0e6      	beq.n	801013c <_printf_common+0xa4>
 801016e:	3601      	adds	r6, #1
 8010170:	e7d9      	b.n	8010126 <_printf_common+0x8e>
	...

08010174 <_printf_i>:
 8010174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010178:	7e0f      	ldrb	r7, [r1, #24]
 801017a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801017c:	2f78      	cmp	r7, #120	@ 0x78
 801017e:	4691      	mov	r9, r2
 8010180:	4680      	mov	r8, r0
 8010182:	460c      	mov	r4, r1
 8010184:	469a      	mov	sl, r3
 8010186:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801018a:	d807      	bhi.n	801019c <_printf_i+0x28>
 801018c:	2f62      	cmp	r7, #98	@ 0x62
 801018e:	d80a      	bhi.n	80101a6 <_printf_i+0x32>
 8010190:	2f00      	cmp	r7, #0
 8010192:	f000 80d2 	beq.w	801033a <_printf_i+0x1c6>
 8010196:	2f58      	cmp	r7, #88	@ 0x58
 8010198:	f000 80b9 	beq.w	801030e <_printf_i+0x19a>
 801019c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80101a4:	e03a      	b.n	801021c <_printf_i+0xa8>
 80101a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80101aa:	2b15      	cmp	r3, #21
 80101ac:	d8f6      	bhi.n	801019c <_printf_i+0x28>
 80101ae:	a101      	add	r1, pc, #4	@ (adr r1, 80101b4 <_printf_i+0x40>)
 80101b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80101b4:	0801020d 	.word	0x0801020d
 80101b8:	08010221 	.word	0x08010221
 80101bc:	0801019d 	.word	0x0801019d
 80101c0:	0801019d 	.word	0x0801019d
 80101c4:	0801019d 	.word	0x0801019d
 80101c8:	0801019d 	.word	0x0801019d
 80101cc:	08010221 	.word	0x08010221
 80101d0:	0801019d 	.word	0x0801019d
 80101d4:	0801019d 	.word	0x0801019d
 80101d8:	0801019d 	.word	0x0801019d
 80101dc:	0801019d 	.word	0x0801019d
 80101e0:	08010321 	.word	0x08010321
 80101e4:	0801024b 	.word	0x0801024b
 80101e8:	080102db 	.word	0x080102db
 80101ec:	0801019d 	.word	0x0801019d
 80101f0:	0801019d 	.word	0x0801019d
 80101f4:	08010343 	.word	0x08010343
 80101f8:	0801019d 	.word	0x0801019d
 80101fc:	0801024b 	.word	0x0801024b
 8010200:	0801019d 	.word	0x0801019d
 8010204:	0801019d 	.word	0x0801019d
 8010208:	080102e3 	.word	0x080102e3
 801020c:	6833      	ldr	r3, [r6, #0]
 801020e:	1d1a      	adds	r2, r3, #4
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	6032      	str	r2, [r6, #0]
 8010214:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010218:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801021c:	2301      	movs	r3, #1
 801021e:	e09d      	b.n	801035c <_printf_i+0x1e8>
 8010220:	6833      	ldr	r3, [r6, #0]
 8010222:	6820      	ldr	r0, [r4, #0]
 8010224:	1d19      	adds	r1, r3, #4
 8010226:	6031      	str	r1, [r6, #0]
 8010228:	0606      	lsls	r6, r0, #24
 801022a:	d501      	bpl.n	8010230 <_printf_i+0xbc>
 801022c:	681d      	ldr	r5, [r3, #0]
 801022e:	e003      	b.n	8010238 <_printf_i+0xc4>
 8010230:	0645      	lsls	r5, r0, #25
 8010232:	d5fb      	bpl.n	801022c <_printf_i+0xb8>
 8010234:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010238:	2d00      	cmp	r5, #0
 801023a:	da03      	bge.n	8010244 <_printf_i+0xd0>
 801023c:	232d      	movs	r3, #45	@ 0x2d
 801023e:	426d      	negs	r5, r5
 8010240:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010244:	4859      	ldr	r0, [pc, #356]	@ (80103ac <_printf_i+0x238>)
 8010246:	230a      	movs	r3, #10
 8010248:	e011      	b.n	801026e <_printf_i+0xfa>
 801024a:	6821      	ldr	r1, [r4, #0]
 801024c:	6833      	ldr	r3, [r6, #0]
 801024e:	0608      	lsls	r0, r1, #24
 8010250:	f853 5b04 	ldr.w	r5, [r3], #4
 8010254:	d402      	bmi.n	801025c <_printf_i+0xe8>
 8010256:	0649      	lsls	r1, r1, #25
 8010258:	bf48      	it	mi
 801025a:	b2ad      	uxthmi	r5, r5
 801025c:	2f6f      	cmp	r7, #111	@ 0x6f
 801025e:	4853      	ldr	r0, [pc, #332]	@ (80103ac <_printf_i+0x238>)
 8010260:	6033      	str	r3, [r6, #0]
 8010262:	bf14      	ite	ne
 8010264:	230a      	movne	r3, #10
 8010266:	2308      	moveq	r3, #8
 8010268:	2100      	movs	r1, #0
 801026a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801026e:	6866      	ldr	r6, [r4, #4]
 8010270:	60a6      	str	r6, [r4, #8]
 8010272:	2e00      	cmp	r6, #0
 8010274:	bfa2      	ittt	ge
 8010276:	6821      	ldrge	r1, [r4, #0]
 8010278:	f021 0104 	bicge.w	r1, r1, #4
 801027c:	6021      	strge	r1, [r4, #0]
 801027e:	b90d      	cbnz	r5, 8010284 <_printf_i+0x110>
 8010280:	2e00      	cmp	r6, #0
 8010282:	d04b      	beq.n	801031c <_printf_i+0x1a8>
 8010284:	4616      	mov	r6, r2
 8010286:	fbb5 f1f3 	udiv	r1, r5, r3
 801028a:	fb03 5711 	mls	r7, r3, r1, r5
 801028e:	5dc7      	ldrb	r7, [r0, r7]
 8010290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010294:	462f      	mov	r7, r5
 8010296:	42bb      	cmp	r3, r7
 8010298:	460d      	mov	r5, r1
 801029a:	d9f4      	bls.n	8010286 <_printf_i+0x112>
 801029c:	2b08      	cmp	r3, #8
 801029e:	d10b      	bne.n	80102b8 <_printf_i+0x144>
 80102a0:	6823      	ldr	r3, [r4, #0]
 80102a2:	07df      	lsls	r7, r3, #31
 80102a4:	d508      	bpl.n	80102b8 <_printf_i+0x144>
 80102a6:	6923      	ldr	r3, [r4, #16]
 80102a8:	6861      	ldr	r1, [r4, #4]
 80102aa:	4299      	cmp	r1, r3
 80102ac:	bfde      	ittt	le
 80102ae:	2330      	movle	r3, #48	@ 0x30
 80102b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80102b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80102b8:	1b92      	subs	r2, r2, r6
 80102ba:	6122      	str	r2, [r4, #16]
 80102bc:	f8cd a000 	str.w	sl, [sp]
 80102c0:	464b      	mov	r3, r9
 80102c2:	aa03      	add	r2, sp, #12
 80102c4:	4621      	mov	r1, r4
 80102c6:	4640      	mov	r0, r8
 80102c8:	f7ff fee6 	bl	8010098 <_printf_common>
 80102cc:	3001      	adds	r0, #1
 80102ce:	d14a      	bne.n	8010366 <_printf_i+0x1f2>
 80102d0:	f04f 30ff 	mov.w	r0, #4294967295
 80102d4:	b004      	add	sp, #16
 80102d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102da:	6823      	ldr	r3, [r4, #0]
 80102dc:	f043 0320 	orr.w	r3, r3, #32
 80102e0:	6023      	str	r3, [r4, #0]
 80102e2:	4833      	ldr	r0, [pc, #204]	@ (80103b0 <_printf_i+0x23c>)
 80102e4:	2778      	movs	r7, #120	@ 0x78
 80102e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80102ea:	6823      	ldr	r3, [r4, #0]
 80102ec:	6831      	ldr	r1, [r6, #0]
 80102ee:	061f      	lsls	r7, r3, #24
 80102f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80102f4:	d402      	bmi.n	80102fc <_printf_i+0x188>
 80102f6:	065f      	lsls	r7, r3, #25
 80102f8:	bf48      	it	mi
 80102fa:	b2ad      	uxthmi	r5, r5
 80102fc:	6031      	str	r1, [r6, #0]
 80102fe:	07d9      	lsls	r1, r3, #31
 8010300:	bf44      	itt	mi
 8010302:	f043 0320 	orrmi.w	r3, r3, #32
 8010306:	6023      	strmi	r3, [r4, #0]
 8010308:	b11d      	cbz	r5, 8010312 <_printf_i+0x19e>
 801030a:	2310      	movs	r3, #16
 801030c:	e7ac      	b.n	8010268 <_printf_i+0xf4>
 801030e:	4827      	ldr	r0, [pc, #156]	@ (80103ac <_printf_i+0x238>)
 8010310:	e7e9      	b.n	80102e6 <_printf_i+0x172>
 8010312:	6823      	ldr	r3, [r4, #0]
 8010314:	f023 0320 	bic.w	r3, r3, #32
 8010318:	6023      	str	r3, [r4, #0]
 801031a:	e7f6      	b.n	801030a <_printf_i+0x196>
 801031c:	4616      	mov	r6, r2
 801031e:	e7bd      	b.n	801029c <_printf_i+0x128>
 8010320:	6833      	ldr	r3, [r6, #0]
 8010322:	6825      	ldr	r5, [r4, #0]
 8010324:	6961      	ldr	r1, [r4, #20]
 8010326:	1d18      	adds	r0, r3, #4
 8010328:	6030      	str	r0, [r6, #0]
 801032a:	062e      	lsls	r6, r5, #24
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	d501      	bpl.n	8010334 <_printf_i+0x1c0>
 8010330:	6019      	str	r1, [r3, #0]
 8010332:	e002      	b.n	801033a <_printf_i+0x1c6>
 8010334:	0668      	lsls	r0, r5, #25
 8010336:	d5fb      	bpl.n	8010330 <_printf_i+0x1bc>
 8010338:	8019      	strh	r1, [r3, #0]
 801033a:	2300      	movs	r3, #0
 801033c:	6123      	str	r3, [r4, #16]
 801033e:	4616      	mov	r6, r2
 8010340:	e7bc      	b.n	80102bc <_printf_i+0x148>
 8010342:	6833      	ldr	r3, [r6, #0]
 8010344:	1d1a      	adds	r2, r3, #4
 8010346:	6032      	str	r2, [r6, #0]
 8010348:	681e      	ldr	r6, [r3, #0]
 801034a:	6862      	ldr	r2, [r4, #4]
 801034c:	2100      	movs	r1, #0
 801034e:	4630      	mov	r0, r6
 8010350:	f7ef ff56 	bl	8000200 <memchr>
 8010354:	b108      	cbz	r0, 801035a <_printf_i+0x1e6>
 8010356:	1b80      	subs	r0, r0, r6
 8010358:	6060      	str	r0, [r4, #4]
 801035a:	6863      	ldr	r3, [r4, #4]
 801035c:	6123      	str	r3, [r4, #16]
 801035e:	2300      	movs	r3, #0
 8010360:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010364:	e7aa      	b.n	80102bc <_printf_i+0x148>
 8010366:	6923      	ldr	r3, [r4, #16]
 8010368:	4632      	mov	r2, r6
 801036a:	4649      	mov	r1, r9
 801036c:	4640      	mov	r0, r8
 801036e:	47d0      	blx	sl
 8010370:	3001      	adds	r0, #1
 8010372:	d0ad      	beq.n	80102d0 <_printf_i+0x15c>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	079b      	lsls	r3, r3, #30
 8010378:	d413      	bmi.n	80103a2 <_printf_i+0x22e>
 801037a:	68e0      	ldr	r0, [r4, #12]
 801037c:	9b03      	ldr	r3, [sp, #12]
 801037e:	4298      	cmp	r0, r3
 8010380:	bfb8      	it	lt
 8010382:	4618      	movlt	r0, r3
 8010384:	e7a6      	b.n	80102d4 <_printf_i+0x160>
 8010386:	2301      	movs	r3, #1
 8010388:	4632      	mov	r2, r6
 801038a:	4649      	mov	r1, r9
 801038c:	4640      	mov	r0, r8
 801038e:	47d0      	blx	sl
 8010390:	3001      	adds	r0, #1
 8010392:	d09d      	beq.n	80102d0 <_printf_i+0x15c>
 8010394:	3501      	adds	r5, #1
 8010396:	68e3      	ldr	r3, [r4, #12]
 8010398:	9903      	ldr	r1, [sp, #12]
 801039a:	1a5b      	subs	r3, r3, r1
 801039c:	42ab      	cmp	r3, r5
 801039e:	dcf2      	bgt.n	8010386 <_printf_i+0x212>
 80103a0:	e7eb      	b.n	801037a <_printf_i+0x206>
 80103a2:	2500      	movs	r5, #0
 80103a4:	f104 0619 	add.w	r6, r4, #25
 80103a8:	e7f5      	b.n	8010396 <_printf_i+0x222>
 80103aa:	bf00      	nop
 80103ac:	08010da1 	.word	0x08010da1
 80103b0:	08010db2 	.word	0x08010db2

080103b4 <memmove>:
 80103b4:	4288      	cmp	r0, r1
 80103b6:	b510      	push	{r4, lr}
 80103b8:	eb01 0402 	add.w	r4, r1, r2
 80103bc:	d902      	bls.n	80103c4 <memmove+0x10>
 80103be:	4284      	cmp	r4, r0
 80103c0:	4623      	mov	r3, r4
 80103c2:	d807      	bhi.n	80103d4 <memmove+0x20>
 80103c4:	1e43      	subs	r3, r0, #1
 80103c6:	42a1      	cmp	r1, r4
 80103c8:	d008      	beq.n	80103dc <memmove+0x28>
 80103ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103d2:	e7f8      	b.n	80103c6 <memmove+0x12>
 80103d4:	4402      	add	r2, r0
 80103d6:	4601      	mov	r1, r0
 80103d8:	428a      	cmp	r2, r1
 80103da:	d100      	bne.n	80103de <memmove+0x2a>
 80103dc:	bd10      	pop	{r4, pc}
 80103de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103e6:	e7f7      	b.n	80103d8 <memmove+0x24>

080103e8 <_sbrk_r>:
 80103e8:	b538      	push	{r3, r4, r5, lr}
 80103ea:	4d06      	ldr	r5, [pc, #24]	@ (8010404 <_sbrk_r+0x1c>)
 80103ec:	2300      	movs	r3, #0
 80103ee:	4604      	mov	r4, r0
 80103f0:	4608      	mov	r0, r1
 80103f2:	602b      	str	r3, [r5, #0]
 80103f4:	f7f1 ffba 	bl	800236c <_sbrk>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d102      	bne.n	8010402 <_sbrk_r+0x1a>
 80103fc:	682b      	ldr	r3, [r5, #0]
 80103fe:	b103      	cbz	r3, 8010402 <_sbrk_r+0x1a>
 8010400:	6023      	str	r3, [r4, #0]
 8010402:	bd38      	pop	{r3, r4, r5, pc}
 8010404:	20004ea4 	.word	0x20004ea4

08010408 <memcpy>:
 8010408:	440a      	add	r2, r1
 801040a:	4291      	cmp	r1, r2
 801040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010410:	d100      	bne.n	8010414 <memcpy+0xc>
 8010412:	4770      	bx	lr
 8010414:	b510      	push	{r4, lr}
 8010416:	f811 4b01 	ldrb.w	r4, [r1], #1
 801041a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801041e:	4291      	cmp	r1, r2
 8010420:	d1f9      	bne.n	8010416 <memcpy+0xe>
 8010422:	bd10      	pop	{r4, pc}

08010424 <_realloc_r>:
 8010424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010428:	4680      	mov	r8, r0
 801042a:	4615      	mov	r5, r2
 801042c:	460c      	mov	r4, r1
 801042e:	b921      	cbnz	r1, 801043a <_realloc_r+0x16>
 8010430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010434:	4611      	mov	r1, r2
 8010436:	f7ff bc4b 	b.w	800fcd0 <_malloc_r>
 801043a:	b92a      	cbnz	r2, 8010448 <_realloc_r+0x24>
 801043c:	f7ff fbdc 	bl	800fbf8 <_free_r>
 8010440:	2400      	movs	r4, #0
 8010442:	4620      	mov	r0, r4
 8010444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010448:	f000 f81a 	bl	8010480 <_malloc_usable_size_r>
 801044c:	4285      	cmp	r5, r0
 801044e:	4606      	mov	r6, r0
 8010450:	d802      	bhi.n	8010458 <_realloc_r+0x34>
 8010452:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010456:	d8f4      	bhi.n	8010442 <_realloc_r+0x1e>
 8010458:	4629      	mov	r1, r5
 801045a:	4640      	mov	r0, r8
 801045c:	f7ff fc38 	bl	800fcd0 <_malloc_r>
 8010460:	4607      	mov	r7, r0
 8010462:	2800      	cmp	r0, #0
 8010464:	d0ec      	beq.n	8010440 <_realloc_r+0x1c>
 8010466:	42b5      	cmp	r5, r6
 8010468:	462a      	mov	r2, r5
 801046a:	4621      	mov	r1, r4
 801046c:	bf28      	it	cs
 801046e:	4632      	movcs	r2, r6
 8010470:	f7ff ffca 	bl	8010408 <memcpy>
 8010474:	4621      	mov	r1, r4
 8010476:	4640      	mov	r0, r8
 8010478:	f7ff fbbe 	bl	800fbf8 <_free_r>
 801047c:	463c      	mov	r4, r7
 801047e:	e7e0      	b.n	8010442 <_realloc_r+0x1e>

08010480 <_malloc_usable_size_r>:
 8010480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010484:	1f18      	subs	r0, r3, #4
 8010486:	2b00      	cmp	r3, #0
 8010488:	bfbc      	itt	lt
 801048a:	580b      	ldrlt	r3, [r1, r0]
 801048c:	18c0      	addlt	r0, r0, r3
 801048e:	4770      	bx	lr

08010490 <_init>:
 8010490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010492:	bf00      	nop
 8010494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010496:	bc08      	pop	{r3}
 8010498:	469e      	mov	lr, r3
 801049a:	4770      	bx	lr

0801049c <_fini>:
 801049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801049e:	bf00      	nop
 80104a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104a2:	bc08      	pop	{r3}
 80104a4:	469e      	mov	lr, r3
 80104a6:	4770      	bx	lr
