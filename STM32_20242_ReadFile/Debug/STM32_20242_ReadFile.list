
STM32_20242_ReadFile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010434  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  080105e4  080105e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f00  08010f00  00012164  2**0
                  CONTENTS
  4 .ARM          00000008  08010f00  08010f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f08  08010f08  00012164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f08  08010f08  00011f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010f0c  08010f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08010f10  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012164  2**0
                  CONTENTS
 10 .bss          00004d50  20000164  20000164  00012164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004eb4  20004eb4  00012164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa22  00000000  00000000  00012194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004758  00000000  00000000  0002cbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001598  00000000  00000000  00031310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001071  00000000  00000000  000328a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ae5  00000000  00000000  00033919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002060d  00000000  00000000  0005c3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da5e2  00000000  00000000  0007ca0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00156fed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005eac  00000000  00000000  00157030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0015cedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080105cc 	.word	0x080105cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	080105cc 	.word	0x080105cc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96a 	b.w	8000b98 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	460c      	mov	r4, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14e      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008e8:	4694      	mov	ip, r2
 80008ea:	458c      	cmp	ip, r1
 80008ec:	4686      	mov	lr, r0
 80008ee:	fab2 f282 	clz	r2, r2
 80008f2:	d962      	bls.n	80009ba <__udivmoddi4+0xde>
 80008f4:	b14a      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f6:	f1c2 0320 	rsb	r3, r2, #32
 80008fa:	4091      	lsls	r1, r2
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	fa0c fc02 	lsl.w	ip, ip, r2
 8000904:	4319      	orrs	r1, r3
 8000906:	fa00 fe02 	lsl.w	lr, r0, r2
 800090a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090e:	fa1f f68c 	uxth.w	r6, ip
 8000912:	fbb1 f4f7 	udiv	r4, r1, r7
 8000916:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800091a:	fb07 1114 	mls	r1, r7, r4, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb04 f106 	mul.w	r1, r4, r6
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000932:	f080 8112 	bcs.w	8000b5a <__udivmoddi4+0x27e>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 810f 	bls.w	8000b5a <__udivmoddi4+0x27e>
 800093c:	3c02      	subs	r4, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a59      	subs	r1, r3, r1
 8000942:	fa1f f38e 	uxth.w	r3, lr
 8000946:	fbb1 f0f7 	udiv	r0, r1, r7
 800094a:	fb07 1110 	mls	r1, r7, r0, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb00 f606 	mul.w	r6, r0, r6
 8000956:	429e      	cmp	r6, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x94>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000962:	f080 80fc 	bcs.w	8000b5e <__udivmoddi4+0x282>
 8000966:	429e      	cmp	r6, r3
 8000968:	f240 80f9 	bls.w	8000b5e <__udivmoddi4+0x282>
 800096c:	4463      	add	r3, ip
 800096e:	3802      	subs	r0, #2
 8000970:	1b9b      	subs	r3, r3, r6
 8000972:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000976:	2100      	movs	r1, #0
 8000978:	b11d      	cbz	r5, 8000982 <__udivmoddi4+0xa6>
 800097a:	40d3      	lsrs	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	e9c5 3200 	strd	r3, r2, [r5]
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d905      	bls.n	8000996 <__udivmoddi4+0xba>
 800098a:	b10d      	cbz	r5, 8000990 <__udivmoddi4+0xb4>
 800098c:	e9c5 0100 	strd	r0, r1, [r5]
 8000990:	2100      	movs	r1, #0
 8000992:	4608      	mov	r0, r1
 8000994:	e7f5      	b.n	8000982 <__udivmoddi4+0xa6>
 8000996:	fab3 f183 	clz	r1, r3
 800099a:	2900      	cmp	r1, #0
 800099c:	d146      	bne.n	8000a2c <__udivmoddi4+0x150>
 800099e:	42a3      	cmp	r3, r4
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xcc>
 80009a2:	4290      	cmp	r0, r2
 80009a4:	f0c0 80f0 	bcc.w	8000b88 <__udivmoddi4+0x2ac>
 80009a8:	1a86      	subs	r6, r0, r2
 80009aa:	eb64 0303 	sbc.w	r3, r4, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0e6      	beq.n	8000982 <__udivmoddi4+0xa6>
 80009b4:	e9c5 6300 	strd	r6, r3, [r5]
 80009b8:	e7e3      	b.n	8000982 <__udivmoddi4+0xa6>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	f040 8090 	bne.w	8000ae0 <__udivmoddi4+0x204>
 80009c0:	eba1 040c 	sub.w	r4, r1, ip
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	2101      	movs	r1, #1
 80009ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80009d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d6:	fb08 4416 	mls	r4, r8, r6, r4
 80009da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009de:	fb07 f006 	mul.w	r0, r7, r6
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x11c>
 80009e6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x11a>
 80009f0:	4298      	cmp	r0, r3
 80009f2:	f200 80cd 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009f6:	4626      	mov	r6, r4
 80009f8:	1a1c      	subs	r4, r3, r0
 80009fa:	fa1f f38e 	uxth.w	r3, lr
 80009fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a02:	fb08 4410 	mls	r4, r8, r0, r4
 8000a06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0a:	fb00 f707 	mul.w	r7, r0, r7
 8000a0e:	429f      	cmp	r7, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x148>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x146>
 8000a1c:	429f      	cmp	r7, r3
 8000a1e:	f200 80b0 	bhi.w	8000b82 <__udivmoddi4+0x2a6>
 8000a22:	4620      	mov	r0, r4
 8000a24:	1bdb      	subs	r3, r3, r7
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	e7a5      	b.n	8000978 <__udivmoddi4+0x9c>
 8000a2c:	f1c1 0620 	rsb	r6, r1, #32
 8000a30:	408b      	lsls	r3, r1
 8000a32:	fa22 f706 	lsr.w	r7, r2, r6
 8000a36:	431f      	orrs	r7, r3
 8000a38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a40:	ea43 030c 	orr.w	r3, r3, ip
 8000a44:	40f4      	lsrs	r4, r6
 8000a46:	fa00 f801 	lsl.w	r8, r0, r1
 8000a4a:	0c38      	lsrs	r0, r7, #16
 8000a4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a50:	fbb4 fef0 	udiv	lr, r4, r0
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fb00 441e 	mls	r4, r0, lr, r4
 8000a5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a60:	fb0e f90c 	mul.w	r9, lr, ip
 8000a64:	45a1      	cmp	r9, r4
 8000a66:	fa02 f201 	lsl.w	r2, r2, r1
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x1a6>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a72:	f080 8084 	bcs.w	8000b7e <__udivmoddi4+0x2a2>
 8000a76:	45a1      	cmp	r9, r4
 8000a78:	f240 8081 	bls.w	8000b7e <__udivmoddi4+0x2a2>
 8000a7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	eba4 0409 	sub.w	r4, r4, r9
 8000a86:	fa1f f983 	uxth.w	r9, r3
 8000a8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a9a:	45a4      	cmp	ip, r4
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x1d2>
 8000a9e:	193c      	adds	r4, r7, r4
 8000aa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000aa4:	d267      	bcs.n	8000b76 <__udivmoddi4+0x29a>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0x29a>
 8000aaa:	3b02      	subs	r3, #2
 8000aac:	443c      	add	r4, r7
 8000aae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ab2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ab6:	eba4 040c 	sub.w	r4, r4, ip
 8000aba:	429c      	cmp	r4, r3
 8000abc:	46ce      	mov	lr, r9
 8000abe:	469c      	mov	ip, r3
 8000ac0:	d351      	bcc.n	8000b66 <__udivmoddi4+0x28a>
 8000ac2:	d04e      	beq.n	8000b62 <__udivmoddi4+0x286>
 8000ac4:	b155      	cbz	r5, 8000adc <__udivmoddi4+0x200>
 8000ac6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ace:	fa04 f606 	lsl.w	r6, r4, r6
 8000ad2:	40cb      	lsrs	r3, r1
 8000ad4:	431e      	orrs	r6, r3
 8000ad6:	40cc      	lsrs	r4, r1
 8000ad8:	e9c5 6400 	strd	r6, r4, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	e750      	b.n	8000982 <__udivmoddi4+0xa6>
 8000ae0:	f1c2 0320 	rsb	r3, r2, #32
 8000ae4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	fa24 f303 	lsr.w	r3, r4, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	430c      	orrs	r4, r1
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3110 	mls	r1, r8, r0, r3
 8000b08:	0c23      	lsrs	r3, r4, #16
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f107 	mul.w	r1, r0, r7
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x24c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b1e:	d22c      	bcs.n	8000b7a <__udivmoddi4+0x29e>
 8000b20:	4299      	cmp	r1, r3
 8000b22:	d92a      	bls.n	8000b7a <__udivmoddi4+0x29e>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b30:	fb08 3311 	mls	r3, r8, r1, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb01 f307 	mul.w	r3, r1, r7
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x276>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b48:	d213      	bcs.n	8000b72 <__udivmoddi4+0x296>
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	d911      	bls.n	8000b72 <__udivmoddi4+0x296>
 8000b4e:	3902      	subs	r1, #2
 8000b50:	4464      	add	r4, ip
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b58:	e739      	b.n	80009ce <__udivmoddi4+0xf2>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	e6f0      	b.n	8000940 <__udivmoddi4+0x64>
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e706      	b.n	8000970 <__udivmoddi4+0x94>
 8000b62:	45c8      	cmp	r8, r9
 8000b64:	d2ae      	bcs.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7a8      	b.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b72:	4631      	mov	r1, r6
 8000b74:	e7ed      	b.n	8000b52 <__udivmoddi4+0x276>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e799      	b.n	8000aae <__udivmoddi4+0x1d2>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e7d4      	b.n	8000b28 <__udivmoddi4+0x24c>
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1a6>
 8000b82:	4463      	add	r3, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	e74d      	b.n	8000a24 <__udivmoddi4+0x148>
 8000b88:	4606      	mov	r6, r0
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e70f      	b.n	80009b0 <__udivmoddi4+0xd4>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	e730      	b.n	80009f8 <__udivmoddi4+0x11c>
 8000b96:	bf00      	nop

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <disk_status+0x30>)
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	4905      	ldr	r1, [pc, #20]	@ (8000bcc <disk_status+0x30>)
 8000bb6:	440a      	add	r2, r1
 8000bb8:	7a12      	ldrb	r2, [r2, #8]
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4798      	blx	r3
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20004118 	.word	0x20004118

08000bd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <disk_initialize+0x4c>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d114      	bne.n	8000c12 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <disk_initialize+0x4c>)
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	79fa      	ldrb	r2, [r7, #7]
 8000bf6:	4909      	ldr	r1, [pc, #36]	@ (8000c1c <disk_initialize+0x4c>)
 8000bf8:	440a      	add	r2, r1
 8000bfa:	7a12      	ldrb	r2, [r2, #8]
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4798      	blx	r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a03      	ldr	r2, [pc, #12]	@ (8000c1c <disk_initialize+0x4c>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20004118 	.word	0x20004118

08000c20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <disk_read+0x3c>)
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	689c      	ldr	r4, [r3, #8]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <disk_read+0x3c>)
 8000c40:	4413      	add	r3, r2
 8000c42:	7a18      	ldrb	r0, [r3, #8]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	47a0      	blx	r4
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20004118 	.word	0x20004118

08000c60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <disk_write+0x3c>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	68dc      	ldr	r4, [r3, #12]
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <disk_write+0x3c>)
 8000c80:	4413      	add	r3, r2
 8000c82:	7a18      	ldrb	r0, [r3, #8]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	47a0      	blx	r4
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20004118 	.word	0x20004118

08000ca0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	603a      	str	r2, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	460b      	mov	r3, r1
 8000cae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a09      	ldr	r2, [pc, #36]	@ (8000cd8 <disk_ioctl+0x38>)
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	4906      	ldr	r1, [pc, #24]	@ (8000cd8 <disk_ioctl+0x38>)
 8000cc0:	440a      	add	r2, r1
 8000cc2:	7a10      	ldrb	r0, [r2, #8]
 8000cc4:	79b9      	ldrb	r1, [r7, #6]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4798      	blx	r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]
  return res;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20004118 	.word	0x20004118

08000cdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000ce0:	4904      	ldr	r1, [pc, #16]	@ (8000cf4 <MX_FATFS_Init+0x18>)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_FATFS_Init+0x1c>)
 8000ce4:	f00e f9d8 	bl	800f098 <FATFS_LinkDriver>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <MX_FATFS_Init+0x20>)
 8000cee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000184 	.word	0x20000184
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	20000180 	.word	0x20000180

08000d00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8000d04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);	// không cần thiết vì ở đây chỉ có 1 slave
	HAL_Delay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f001 fc93 	bl	8002640 <HAL_Delay>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
	HAL_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f001 fc8c 	bl	8002640 <HAL_Delay>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d36:	1df9      	adds	r1, r7, #7
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <SPI_TxByte+0x20>)
 8000d3e:	f003 ffac 	bl	8004c9a <HAL_SPI_Transmit>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000151c 	.word	0x2000151c

08000d50 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	2364      	movs	r3, #100	@ 0x64
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SPI_TxBuffer+0x20>)
 8000d64:	f003 ff99 	bl	8004c9a <HAL_SPI_Transmit>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000151c 	.word	0x2000151c

08000d74 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
	uint8_t dummy, data;	// dummy dùng để trigger SPI nhận dữ liệu, giải thích vì sao chọn 0xFF
	dummy = 0xFF;
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	71fb      	strb	r3, [r7, #7]

//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d7e:	1dba      	adds	r2, r7, #6
 8000d80:	1df9      	adds	r1, r7, #7
 8000d82:	2364      	movs	r3, #100	@ 0x64
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <SPI_RxByte+0x24>)
 8000d8a:	f004 f8ca 	bl	8004f22 <HAL_SPI_TransmitReceive>

	return data;
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000151c 	.word	0x2000151c

08000d9c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000da4:	f7ff ffe6 	bl	8000d74 <SPI_RxByte>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	701a      	strb	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 100;	// giải thích ý nghĩa của Timer2
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <SD_ReadyWait+0x30>)
 8000dc0:	2264      	movs	r2, #100	@ 0x64
 8000dc2:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000dc4:	f7ff ffd6 	bl	8000d74 <SPI_RxByte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2bff      	cmp	r3, #255	@ 0xff
 8000dd0:	d004      	beq.n	8000ddc <SD_ReadyWait+0x24>
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <SD_ReadyWait+0x30>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f3      	bne.n	8000dc4 <SD_ReadyWait+0xc>

	return res;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20003ebf 	.word	0x20003ebf

08000dec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000df2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000df6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000df8:	f7ff ff91 	bl	8000d1e <DESELECT>
	for(int i = 0; i < 10; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e005      	b.n	8000e0e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e02:	20ff      	movs	r0, #255	@ 0xff
 8000e04:	f7ff ff92 	bl	8000d2c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b09      	cmp	r3, #9
 8000e12:	ddf6      	ble.n	8000e02 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();	
 8000e14:	f7ff ff7c 	bl	8000d10 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000e2c:	2395      	movs	r3, #149	@ 0x95
 8000e2e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000e30:	463b      	mov	r3, r7
 8000e32:	2106      	movs	r1, #6
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff8b 	bl	8000d50 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e3a:	e002      	b.n	8000e42 <SD_PowerOn+0x56>
	{
		cnt--;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e42:	f7ff ff97 	bl	8000d74 <SPI_RxByte>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d002      	beq.n	8000e52 <SD_PowerOn+0x66>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f4      	bne.n	8000e3c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000e52:	f7ff ff64 	bl	8000d1e <DESELECT>
	SPI_TxByte(0XFF);
 8000e56:	20ff      	movs	r0, #255	@ 0xff
 8000e58:	f7ff ff68 	bl	8000d2c <SPI_TxByte>

	PowerFlag = 1;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <SD_PowerOn+0x80>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001519 	.word	0x20001519

08000e70 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e74:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <SD_PowerOff+0x14>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20001519 	.word	0x20001519

08000e88 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <SD_CheckPower+0x14>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20001519 	.word	0x20001519

08000ea0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 100;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <SD_RxDataBlock+0x5c>)
 8000eac:	2264      	movs	r2, #100	@ 0x64
 8000eae:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000eb0:	f7ff ff60 	bl	8000d74 <SPI_RxByte>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2bff      	cmp	r3, #255	@ 0xff
 8000ebc:	d104      	bne.n	8000ec8 <SD_RxDataBlock+0x28>
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <SD_RxDataBlock+0x5c>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f3      	bne.n	8000eb0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ecc:	d001      	beq.n	8000ed2 <SD_RxDataBlock+0x32>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e00f      	b.n	8000ef2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <SPI_RxBytePtr>
	} while(len--);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	1e5a      	subs	r2, r3, #1
 8000ee2:	603a      	str	r2, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ee8:	f7ff ff44 	bl	8000d74 <SPI_RxByte>
	SPI_RxByte();
 8000eec:	f7ff ff42 	bl	8000d74 <SPI_RxByte>

	return TRUE;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20003ebe 	.word	0x20003ebe

08000f00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f10:	f7ff ff52 	bl	8000db8 <SD_ReadyWait>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2bff      	cmp	r3, #255	@ 0xff
 8000f18:	d001      	beq.n	8000f1e <SD_TxDataBlock+0x1e>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e03f      	b.n	8000f9e <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff03 	bl	8000d2c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f2a:	d030      	beq.n	8000f8e <SD_TxDataBlock+0x8e>
	{	Timer3 = 200;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <SD_TxDataBlock+0xa8>)
 8000f2e:	22c8      	movs	r2, #200	@ 0xc8
 8000f30:	801a      	strh	r2, [r3, #0]
		Timer4 =200;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <SD_TxDataBlock+0xac>)
 8000f34:	22c8      	movs	r2, #200	@ 0xc8
 8000f36:	801a      	strh	r2, [r3, #0]
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff07 	bl	8000d50 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000f42:	f7ff ff17 	bl	8000d74 <SPI_RxByte>
		SPI_RxByte();
 8000f46:	f7ff ff15 	bl	8000d74 <SPI_RxByte>

		/* receive response */
		while (i <= 64 && Timer4)
 8000f4a:	e00b      	b.n	8000f64 <SD_TxDataBlock+0x64>
		{
			resp = SPI_RxByte();
 8000f4c:	f7ff ff12 	bl	8000d74 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	d00b      	beq.n	8000f76 <SD_TxDataBlock+0x76>
			i++;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	3301      	adds	r3, #1
 8000f62:	73bb      	strb	r3, [r7, #14]
		while (i <= 64 && Timer4)
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	2b40      	cmp	r3, #64	@ 0x40
 8000f68:	d806      	bhi.n	8000f78 <SD_TxDataBlock+0x78>
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <SD_TxDataBlock+0xac>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1eb      	bne.n	8000f4c <SD_TxDataBlock+0x4c>
 8000f74:	e000      	b.n	8000f78 <SD_TxDataBlock+0x78>
			if ((resp & 0x1F) == 0x05) break;
 8000f76:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0 && Timer3);
 8000f78:	bf00      	nop
 8000f7a:	f7ff fefb 	bl	8000d74 <SPI_RxByte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <SD_TxDataBlock+0x8e>
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <SD_TxDataBlock+0xa8>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f5      	bne.n	8000f7a <SD_TxDataBlock+0x7a>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d101      	bne.n	8000f9c <SD_TxDataBlock+0x9c>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <SD_TxDataBlock+0x9e>

	return FALSE;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20003ec0 	.word	0x20003ec0
 8000fac:	20003ec1 	.word	0x20003ec1

08000fb0 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000fbc:	f7ff fefc 	bl	8000db8 <SD_ReadyWait>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2bff      	cmp	r3, #255	@ 0xff
 8000fc4:	d001      	beq.n	8000fca <SD_SendCmd+0x1a>
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
 8000fc8:	e042      	b.n	8001050 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fead 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	0e1b      	lsrs	r3, r3, #24
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fea7 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fea1 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe9b 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe96 	bl	8000d2c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */		// giải thích các giá trị cho CRC
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b40      	cmp	r3, #64	@ 0x40
 8001004:	d102      	bne.n	800100c <SD_SendCmd+0x5c>
 8001006:	2395      	movs	r3, #149	@ 0x95
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e007      	b.n	800101c <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b48      	cmp	r3, #72	@ 0x48
 8001010:	d102      	bne.n	8001018 <SD_SendCmd+0x68>
 8001012:	2387      	movs	r3, #135	@ 0x87
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e001      	b.n	800101c <SD_SendCmd+0x6c>
	else crc = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe84 	bl	8000d2c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b4c      	cmp	r3, #76	@ 0x4c
 8001028:	d101      	bne.n	800102e <SD_SendCmd+0x7e>
 800102a:	f7ff fea3 	bl	8000d74 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800102e:	230a      	movs	r3, #10
 8001030:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001032:	f7ff fe9f 	bl	8000d74 <SPI_RxByte>
 8001036:	4603      	mov	r3, r0
 8001038:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800103a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da05      	bge.n	800104e <SD_SendCmd+0x9e>
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	3b01      	subs	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f1      	bne.n	8001032 <SD_SendCmd+0x82>

	return res;
 800104e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SD_disk_initialize+0x14>
 8001068:	2301      	movs	r3, #1
 800106a:	e0d5      	b.n	8001218 <SD_disk_initialize+0x1c0>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800106c:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <SD_disk_initialize+0x2a>
 800107a:	4b69      	ldr	r3, [pc, #420]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	e0ca      	b.n	8001218 <SD_disk_initialize+0x1c0>

	/* power on */
	SD_PowerOn();
 8001082:	f7ff feb3 	bl	8000dec <SD_PowerOn>

	/* slave select */
	SELECT();
 8001086:	f7ff fe43 	bl	8000d10 <SELECT>

	/* check disk type */
	type = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800108e:	2100      	movs	r1, #0
 8001090:	2040      	movs	r0, #64	@ 0x40
 8001092:	f7ff ff8d 	bl	8000fb0 <SD_SendCmd>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 80a5 	bne.w	80011e8 <SD_disk_initialize+0x190>
	{
		/* timeout 1 sec */
		Timer1 = 100;
 800109e:	4b61      	ldr	r3, [pc, #388]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80010a0:	2264      	movs	r2, #100	@ 0x64
 80010a2:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command*/
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010a4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80010a8:	2048      	movs	r0, #72	@ 0x48
 80010aa:	f7ff ff81 	bl	8000fb0 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d158      	bne.n	8001166 <SD_disk_initialize+0x10e>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e00c      	b.n	80010d4 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 80010ba:	7bfc      	ldrb	r4, [r7, #15]
 80010bc:	f7ff fe5a 	bl	8000d74 <SPI_RxByte>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	f104 0310 	add.w	r3, r4, #16
 80010c8:	443b      	add	r3, r7
 80010ca:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d9ef      	bls.n	80010ba <SD_disk_initialize+0x62>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010da:	7abb      	ldrb	r3, [r7, #10]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 8083 	bne.w	80011e8 <SD_disk_initialize+0x190>
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2baa      	cmp	r3, #170	@ 0xaa
 80010e6:	d17f      	bne.n	80011e8 <SD_disk_initialize+0x190>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010e8:	2100      	movs	r1, #0
 80010ea:	2077      	movs	r0, #119	@ 0x77
 80010ec:	f7ff ff60 	bl	8000fb0 <SD_SendCmd>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d807      	bhi.n	8001106 <SD_disk_initialize+0xae>
 80010f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010fa:	2069      	movs	r0, #105	@ 0x69
 80010fc:	f7ff ff58 	bl	8000fb0 <SD_SendCmd>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <SD_disk_initialize+0xba>
				} while (Timer1);
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <SD_disk_initialize+0x1cc>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1eb      	bne.n	80010e8 <SD_disk_initialize+0x90>
 8001110:	e000      	b.n	8001114 <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001112:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001114:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <SD_disk_initialize+0x1cc>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d064      	beq.n	80011e8 <SD_disk_initialize+0x190>
 800111e:	2100      	movs	r1, #0
 8001120:	207a      	movs	r0, #122	@ 0x7a
 8001122:	f7ff ff45 	bl	8000fb0 <SD_SendCmd>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d15d      	bne.n	80011e8 <SD_disk_initialize+0x190>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e00c      	b.n	800114c <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001132:	7bfc      	ldrb	r4, [r7, #15]
 8001134:	f7ff fe1e 	bl	8000d74 <SPI_RxByte>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	f104 0310 	add.w	r3, r4, #16
 8001140:	443b      	add	r3, r7
 8001142:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d9ef      	bls.n	8001132 <SD_disk_initialize+0xda>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001152:	7a3b      	ldrb	r3, [r7, #8]
 8001154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SD_disk_initialize+0x108>
 800115c:	230c      	movs	r3, #12
 800115e:	e000      	b.n	8001162 <SD_disk_initialize+0x10a>
 8001160:	2304      	movs	r3, #4
 8001162:	73bb      	strb	r3, [r7, #14]
 8001164:	e040      	b.n	80011e8 <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001166:	2100      	movs	r1, #0
 8001168:	2077      	movs	r0, #119	@ 0x77
 800116a:	f7ff ff21 	bl	8000fb0 <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b01      	cmp	r3, #1
 8001172:	d808      	bhi.n	8001186 <SD_disk_initialize+0x12e>
 8001174:	2100      	movs	r1, #0
 8001176:	2069      	movs	r0, #105	@ 0x69
 8001178:	f7ff ff1a 	bl	8000fb0 <SD_SendCmd>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d801      	bhi.n	8001186 <SD_disk_initialize+0x12e>
 8001182:	2302      	movs	r3, #2
 8001184:	e000      	b.n	8001188 <SD_disk_initialize+0x130>
 8001186:	2301      	movs	r3, #1
 8001188:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d10e      	bne.n	80011ae <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001190:	2100      	movs	r1, #0
 8001192:	2077      	movs	r0, #119	@ 0x77
 8001194:	f7ff ff0c 	bl	8000fb0 <SD_SendCmd>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d80e      	bhi.n	80011bc <SD_disk_initialize+0x164>
 800119e:	2100      	movs	r1, #0
 80011a0:	2069      	movs	r0, #105	@ 0x69
 80011a2:	f7ff ff05 	bl	8000fb0 <SD_SendCmd>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <SD_disk_initialize+0x164>
 80011ac:	e00d      	b.n	80011ca <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011ae:	2100      	movs	r1, #0
 80011b0:	2041      	movs	r0, #65	@ 0x41
 80011b2:	f7ff fefd 	bl	8000fb0 <SD_SendCmd>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <SD_disk_initialize+0x170>
				}

			} while (Timer1);
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1e1      	bne.n	800118a <SD_disk_initialize+0x132>
 80011c6:	e000      	b.n	80011ca <SD_disk_initialize+0x172>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011c8:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <SD_disk_initialize+0x18c>
 80011d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d8:	2050      	movs	r0, #80	@ 0x50
 80011da:	f7ff fee9 	bl	8000fb0 <SD_SendCmd>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SD_disk_initialize+0x190>
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <SD_disk_initialize+0x1d0>)
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80011ee:	f7ff fd96 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 80011f2:	f7ff fdbf 	bl	8000d74 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <SD_disk_initialize+0x1b6>
	{
		Stat &= ~STA_NOINIT;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <SD_disk_initialize+0x1c8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e001      	b.n	8001212 <SD_disk_initialize+0x1ba>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800120e:	f7ff fe2f 	bl	8000e70 <SD_PowerOff>
	}

	return Stat;
 8001212:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <SD_disk_initialize+0x1c8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	20003ebe 	.word	0x20003ebe
 8001228:	20001518 	.word	0x20001518

0800122c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SD_disk_status+0x14>
 800123c:	2301      	movs	r3, #1
 800123e:	e002      	b.n	8001246 <SD_disk_status+0x1a>
	return Stat;
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SD_disk_status+0x28>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000

08001258 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <SD_disk_read+0x1c>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <SD_disk_read+0x20>
 8001274:	2304      	movs	r3, #4
 8001276:	e051      	b.n	800131c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <SD_disk_read+0xcc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SD_disk_read+0x32>
 8001286:	2303      	movs	r3, #3
 8001288:	e048      	b.n	800131c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800128a:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <SD_disk_read+0xd0>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <SD_disk_read+0x44>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	607b      	str	r3, [r7, #4]

	SELECT();
 800129c:	f7ff fd38 	bl	8000d10 <SELECT>

	if (count == 1)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d111      	bne.n	80012ca <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2051      	movs	r0, #81	@ 0x51
 80012aa:	f7ff fe81 	bl	8000fb0 <SD_SendCmd>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d129      	bne.n	8001308 <SD_disk_read+0xb0>
 80012b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f7ff fdf1 	bl	8000ea0 <SD_RxDataBlock>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d021      	beq.n	8001308 <SD_disk_read+0xb0>
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	e01e      	b.n	8001308 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2052      	movs	r0, #82	@ 0x52
 80012ce:	f7ff fe6f 	bl	8000fb0 <SD_SendCmd>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d117      	bne.n	8001308 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80012d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012dc:	68b8      	ldr	r0, [r7, #8]
 80012de:	f7ff fddf 	bl	8000ea0 <SD_RxDataBlock>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00a      	beq.n	80012fe <SD_disk_read+0xa6>
				buff += 512;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012ee:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ed      	bne.n	80012d8 <SD_disk_read+0x80>
 80012fc:	e000      	b.n	8001300 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80012fe:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	204c      	movs	r0, #76	@ 0x4c
 8001304:	f7ff fe54 	bl	8000fb0 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001308:	f7ff fd09 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 800130c:	f7ff fd32 	bl	8000d74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	20001518 	.word	0x20001518

0800132c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <SD_disk_write+0x1c>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <SD_disk_write+0x20>
 8001348:	2304      	movs	r3, #4
 800134a:	e06b      	b.n	8001424 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800134c:	4b37      	ldr	r3, [pc, #220]	@ (800142c <SD_disk_write+0x100>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SD_disk_write+0x32>
 800135a:	2303      	movs	r3, #3
 800135c:	e062      	b.n	8001424 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800135e:	4b33      	ldr	r3, [pc, #204]	@ (800142c <SD_disk_write+0x100>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SD_disk_write+0x44>
 800136c:	2302      	movs	r3, #2
 800136e:	e059      	b.n	8001424 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001370:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <SD_disk_write+0x104>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <SD_disk_write+0x56>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	607b      	str	r3, [r7, #4]

	SELECT();
 8001382:	f7ff fcc5 	bl	8000d10 <SELECT>

	if (count == 1)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d110      	bne.n	80013ae <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	2058      	movs	r0, #88	@ 0x58
 8001390:	f7ff fe0e 	bl	8000fb0 <SD_SendCmd>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d13a      	bne.n	8001410 <SD_disk_write+0xe4>
 800139a:	21fe      	movs	r1, #254	@ 0xfe
 800139c:	68b8      	ldr	r0, [r7, #8]
 800139e:	f7ff fdaf 	bl	8000f00 <SD_TxDataBlock>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d033      	beq.n	8001410 <SD_disk_write+0xe4>
			count = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	e030      	b.n	8001410 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <SD_disk_write+0x104>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	2077      	movs	r0, #119	@ 0x77
 80013be:	f7ff fdf7 	bl	8000fb0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	2057      	movs	r0, #87	@ 0x57
 80013c6:	f7ff fdf3 	bl	8000fb0 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	2059      	movs	r0, #89	@ 0x59
 80013ce:	f7ff fdef 	bl	8000fb0 <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11b      	bne.n	8001410 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013d8:	21fc      	movs	r1, #252	@ 0xfc
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f7ff fd90 	bl	8000f00 <SD_TxDataBlock>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <SD_disk_write+0xd0>
				buff += 512;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80013ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ee      	bne.n	80013d8 <SD_disk_write+0xac>
 80013fa:	e000      	b.n	80013fe <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013fc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80013fe:	21fd      	movs	r1, #253	@ 0xfd
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fd7d 	bl	8000f00 <SD_TxDataBlock>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <SD_disk_write+0xe4>
			{
				count = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001410:	f7ff fc85 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 8001414:	f7ff fcae 	bl	8000d74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	bf14      	ite	ne
 800141e:	2301      	movne	r3, #1
 8001420:	2300      	moveq	r3, #0
 8001422:	b2db      	uxtb	r3, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20001518 	.word	0x20001518

08001434 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b08b      	sub	sp, #44	@ 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	603a      	str	r2, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	460b      	mov	r3, r1
 8001442:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SD_disk_ioctl+0x1e>
 800144e:	2304      	movs	r3, #4
 8001450:	e113      	b.n	800167a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d124      	bne.n	80014a8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d012      	beq.n	800148c <SD_disk_ioctl+0x58>
 8001466:	2b02      	cmp	r3, #2
 8001468:	dc1a      	bgt.n	80014a0 <SD_disk_ioctl+0x6c>
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <SD_disk_ioctl+0x40>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d006      	beq.n	8001480 <SD_disk_ioctl+0x4c>
 8001472:	e015      	b.n	80014a0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001474:	f7ff fcfc 	bl	8000e70 <SD_PowerOff>
			res = RES_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800147e:	e0fa      	b.n	8001676 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001480:	f7ff fcb4 	bl	8000dec <SD_PowerOn>
			res = RES_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800148a:	e0f4      	b.n	8001676 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	1c5c      	adds	r4, r3, #1
 8001490:	f7ff fcfa 	bl	8000e88 <SD_CheckPower>
 8001494:	4603      	mov	r3, r0
 8001496:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800149e:	e0ea      	b.n	8001676 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80014a0:	2304      	movs	r3, #4
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014a6:	e0e6      	b.n	8001676 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014a8:	4b76      	ldr	r3, [pc, #472]	@ (8001684 <SD_disk_ioctl+0x250>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SD_disk_ioctl+0x86>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0df      	b.n	800167a <SD_disk_ioctl+0x246>

		SELECT();
 80014ba:	f7ff fc29 	bl	8000d10 <SELECT>

		switch (ctrl)
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	2b0d      	cmp	r3, #13
 80014c2:	f200 80c9 	bhi.w	8001658 <SD_disk_ioctl+0x224>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <SD_disk_ioctl+0x98>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080015c3 	.word	0x080015c3
 80014d0:	08001505 	.word	0x08001505
 80014d4:	080015b3 	.word	0x080015b3
 80014d8:	08001659 	.word	0x08001659
 80014dc:	08001659 	.word	0x08001659
 80014e0:	08001659 	.word	0x08001659
 80014e4:	08001659 	.word	0x08001659
 80014e8:	08001659 	.word	0x08001659
 80014ec:	08001659 	.word	0x08001659
 80014f0:	08001659 	.word	0x08001659
 80014f4:	08001659 	.word	0x08001659
 80014f8:	080015d5 	.word	0x080015d5
 80014fc:	080015f9 	.word	0x080015f9
 8001500:	0800161d 	.word	0x0800161d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001504:	2100      	movs	r1, #0
 8001506:	2049      	movs	r0, #73	@ 0x49
 8001508:	f7ff fd52 	bl	8000fb0 <SD_SendCmd>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 80a6 	bne.w	8001660 <SD_disk_ioctl+0x22c>
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2110      	movs	r1, #16
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fcc0 	bl	8000ea0 <SD_RxDataBlock>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 809c 	beq.w	8001660 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	099b      	lsrs	r3, r3, #6
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10d      	bne.n	800154e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001532:	7d7b      	ldrb	r3, [r7, #21]
 8001534:	461a      	mov	r2, r3
 8001536:	7d3b      	ldrb	r3, [r7, #20]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001544:	8bfb      	ldrh	r3, [r7, #30]
 8001546:	029a      	lsls	r2, r3, #10
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e02d      	b.n	80015aa <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800154e:	7c7b      	ldrb	r3, [r7, #17]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	b2da      	uxtb	r2, r3
 8001556:	7dbb      	ldrb	r3, [r7, #22]
 8001558:	09db      	lsrs	r3, r3, #7
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	7d7b      	ldrb	r3, [r7, #21]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 0306 	and.w	r3, r3, #6
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3302      	adds	r3, #2
 8001572:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001576:	7d3b      	ldrb	r3, [r7, #20]
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	7cfb      	ldrb	r3, [r7, #19]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b29a      	uxth	r2, r3
 8001588:	7cbb      	ldrb	r3, [r7, #18]
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	b29b      	uxth	r3, r3
 800158e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800159c:	8bfa      	ldrh	r2, [r7, #30]
 800159e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015a2:	3b09      	subs	r3, #9
 80015a4:	409a      	lsls	r2, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80015b0:	e056      	b.n	8001660 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015c0:	e055      	b.n	800166e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80015c2:	f7ff fbf9 	bl	8000db8 <SD_ReadyWait>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2bff      	cmp	r3, #255	@ 0xff
 80015ca:	d14b      	bne.n	8001664 <SD_disk_ioctl+0x230>
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015d2:	e047      	b.n	8001664 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015d4:	2100      	movs	r1, #0
 80015d6:	2049      	movs	r0, #73	@ 0x49
 80015d8:	f7ff fcea 	bl	8000fb0 <SD_SendCmd>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d142      	bne.n	8001668 <SD_disk_ioctl+0x234>
 80015e2:	2110      	movs	r1, #16
 80015e4:	6a38      	ldr	r0, [r7, #32]
 80015e6:	f7ff fc5b 	bl	8000ea0 <SD_RxDataBlock>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03b      	beq.n	8001668 <SD_disk_ioctl+0x234>
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015f6:	e037      	b.n	8001668 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015f8:	2100      	movs	r1, #0
 80015fa:	204a      	movs	r0, #74	@ 0x4a
 80015fc:	f7ff fcd8 	bl	8000fb0 <SD_SendCmd>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d132      	bne.n	800166c <SD_disk_ioctl+0x238>
 8001606:	2110      	movs	r1, #16
 8001608:	6a38      	ldr	r0, [r7, #32]
 800160a:	f7ff fc49 	bl	8000ea0 <SD_RxDataBlock>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02b      	beq.n	800166c <SD_disk_ioctl+0x238>
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800161a:	e027      	b.n	800166c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800161c:	2100      	movs	r1, #0
 800161e:	207a      	movs	r0, #122	@ 0x7a
 8001620:	f7ff fcc6 	bl	8000fb0 <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d116      	bne.n	8001658 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001630:	e00b      	b.n	800164a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001632:	6a3c      	ldr	r4, [r7, #32]
 8001634:	1c63      	adds	r3, r4, #1
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	f7ff fb9c 	bl	8000d74 <SPI_RxByte>
 800163c:	4603      	mov	r3, r0
 800163e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001640:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001644:	3301      	adds	r3, #1
 8001646:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800164a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800164e:	2b03      	cmp	r3, #3
 8001650:	d9ef      	bls.n	8001632 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001658:	2304      	movs	r3, #4
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800165e:	e006      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 8001660:	bf00      	nop
 8001662:	e004      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 8001664:	bf00      	nop
 8001666:	e002      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 8001668:	bf00      	nop
 800166a:	e000      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 800166c:	bf00      	nop
		}

		DESELECT();
 800166e:	f7ff fb56 	bl	8000d1e <DESELECT>
		SPI_RxByte();
 8001672:	f7ff fb7f 	bl	8000d74 <SPI_RxByte>
	}

	return res;
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800167a:	4618      	mov	r0, r3
 800167c:	372c      	adds	r7, #44	@ 0x2c
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000

08001688 <SD_List_File>:

/* List- File Function */

void SD_List_File(void){
 8001688:	b598      	push	{r3, r4, r7, lr}
 800168a:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 800168c:	2200      	movs	r2, #0
 800168e:	4935      	ldr	r1, [pc, #212]	@ (8001764 <SD_List_File+0xdc>)
 8001690:	4835      	ldr	r0, [pc, #212]	@ (8001768 <SD_List_File+0xe0>)
 8001692:	f00c fa2f 	bl	800daf4 <f_mount>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <SD_List_File+0x1a>
	{
		Error_Handler();
 800169c:	f000 fd8e 	bl	80021bc <Error_Handler>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
			}
			f_closedir(&dir);
		}
	}
}
 80016a0:	e05e      	b.n	8001760 <SD_List_File+0xd8>
		strcpy(fileInfo.fname, (char*)sect);
 80016a2:	4932      	ldr	r1, [pc, #200]	@ (800176c <SD_List_File+0xe4>)
 80016a4:	4832      	ldr	r0, [pc, #200]	@ (8001770 <SD_List_File+0xe8>)
 80016a6:	f00e fb3d 	bl	800fd24 <strcpy>
		fileInfo.fsize = sizeof(sect);
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <SD_List_File+0xec>)
 80016ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b0:	601a      	str	r2, [r3, #0]
		result = f_opendir(&dir, "/");
 80016b2:	4931      	ldr	r1, [pc, #196]	@ (8001778 <SD_List_File+0xf0>)
 80016b4:	4831      	ldr	r0, [pc, #196]	@ (800177c <SD_List_File+0xf4>)
 80016b6:	f00d f88b 	bl	800e7d0 <f_opendir>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <SD_List_File+0xf8>)
 80016c0:	701a      	strb	r2, [r3, #0]
		if (result == FR_OK)
 80016c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <SD_List_File+0xf8>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d14a      	bne.n	8001760 <SD_List_File+0xd8>
				result = f_readdir(&dir, &fileInfo);
 80016ca:	492a      	ldr	r1, [pc, #168]	@ (8001774 <SD_List_File+0xec>)
 80016cc:	482b      	ldr	r0, [pc, #172]	@ (800177c <SD_List_File+0xf4>)
 80016ce:	f00d f918 	bl	800e902 <f_readdir>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <SD_List_File+0xf8>)
 80016d8:	701a      	strb	r2, [r3, #0]
				if (result==FR_OK && fileInfo.fname[0])
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <SD_List_File+0xf8>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d13b      	bne.n	800175a <SD_List_File+0xd2>
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <SD_List_File+0xec>)
 80016e4:	7d9b      	ldrb	r3, [r3, #22]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d037      	beq.n	800175a <SD_List_File+0xd2>
					fn = fileInfo.fname; // Pointer to the LFN buffer
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <SD_List_File+0xfc>)
 80016ec:	4a20      	ldr	r2, [pc, #128]	@ (8001770 <SD_List_File+0xe8>)
 80016ee:	601a      	str	r2, [r3, #0]
					if(strlen(fn)) HAL_UART_Transmit(&huart1,(uint8_t*)fn,strlen(fn),0x1000);
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <SD_List_File+0xfc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00f      	beq.n	800171a <SD_List_File+0x92>
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <SD_List_File+0xfc>)
 80016fc:	681c      	ldr	r4, [r3, #0]
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <SD_List_File+0xfc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fd74 	bl	80001f0 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001710:	4621      	mov	r1, r4
 8001712:	481d      	ldr	r0, [pc, #116]	@ (8001788 <SD_List_File+0x100>)
 8001714:	f003 feda 	bl	80054cc <HAL_UART_Transmit>
 8001718:	e00a      	b.n	8001730 <SD_List_File+0xa8>
					else HAL_UART_Transmit(&huart1,(uint8_t*)fileInfo.fname,strlen((char*)fileInfo.fname),0x1000);
 800171a:	4815      	ldr	r0, [pc, #84]	@ (8001770 <SD_List_File+0xe8>)
 800171c:	f7fe fd68 	bl	80001f0 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	4911      	ldr	r1, [pc, #68]	@ (8001770 <SD_List_File+0xe8>)
 800172a:	4817      	ldr	r0, [pc, #92]	@ (8001788 <SD_List_File+0x100>)
 800172c:	f003 fece 	bl	80054cc <HAL_UART_Transmit>
					if(fileInfo.fattrib&AM_DIR)
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <SD_List_File+0xec>)
 8001732:	7a1b      	ldrb	r3, [r3, #8]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <SD_List_File+0xc2>
						HAL_UART_Transmit(&huart1,(uint8_t*)"  [DIR]",7,0x1000);
 800173c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001740:	2207      	movs	r2, #7
 8001742:	4912      	ldr	r1, [pc, #72]	@ (800178c <SD_List_File+0x104>)
 8001744:	4810      	ldr	r0, [pc, #64]	@ (8001788 <SD_List_File+0x100>)
 8001746:	f003 fec1 	bl	80054cc <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	2202      	movs	r2, #2
 8001750:	490f      	ldr	r1, [pc, #60]	@ (8001790 <SD_List_File+0x108>)
 8001752:	480d      	ldr	r0, [pc, #52]	@ (8001788 <SD_List_File+0x100>)
 8001754:	f003 feba 	bl	80054cc <HAL_UART_Transmit>
				result = f_readdir(&dir, &fileInfo);
 8001758:	e7b7      	b.n	80016ca <SD_List_File+0x42>
			f_closedir(&dir);
 800175a:	4808      	ldr	r0, [pc, #32]	@ (800177c <SD_List_File+0xf4>)
 800175c:	f00d f8ab 	bl	800e8b6 <f_closedir>
}
 8001760:	bf00      	nop
 8001762:	bd98      	pop	{r3, r4, r7, pc}
 8001764:	20000188 	.word	0x20000188
 8001768:	2000018c 	.word	0x2000018c
 800176c:	200012dc 	.word	0x200012dc
 8001770:	200011da 	.word	0x200011da
 8001774:	200011c4 	.word	0x200011c4
 8001778:	080105e4 	.word	0x080105e4
 800177c:	200014e4 	.word	0x200014e4
 8001780:	200014dc 	.word	0x200014dc
 8001784:	200014e0 	.word	0x200014e0
 8001788:	20001574 	.word	0x20001574
 800178c:	080105e8 	.word	0x080105e8
 8001790:	080105f0 	.word	0x080105f0

08001794 <SD_creatSubDir>:
/* Hàm tạo thư mục */

void SD_creatSubDir(char* filename)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 800179c:	2200      	movs	r2, #0
 800179e:	4918      	ldr	r1, [pc, #96]	@ (8001800 <SD_creatSubDir+0x6c>)
 80017a0:	4818      	ldr	r0, [pc, #96]	@ (8001804 <SD_creatSubDir+0x70>)
 80017a2:	f00c f9a7 	bl	800daf4 <f_mount>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <SD_creatSubDir+0x1e>
	{
		Error_Handler();
 80017ac:	f000 fd06 	bl	80021bc <Error_Handler>
				break;
			default:
				Error_Handler();
		}
	}
}
 80017b0:	e021      	b.n	80017f6 <SD_creatSubDir+0x62>
		res = f_stat(filename,&fileInfo);
 80017b2:	4915      	ldr	r1, [pc, #84]	@ (8001808 <SD_creatSubDir+0x74>)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f00d f8e1 	bl	800e97c <f_stat>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <SD_creatSubDir+0x78>)
 80017c0:	701a      	strb	r2, [r3, #0]
		switch(res)
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <SD_creatSubDir+0x78>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d012      	beq.n	80017f0 <SD_creatSubDir+0x5c>
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d10d      	bne.n	80017ea <SD_creatSubDir+0x56>
				res = f_mkdir(filename);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f00d fa6d 	bl	800ecae <f_mkdir>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <SD_creatSubDir+0x78>)
 80017da:	701a      	strb	r2, [r3, #0]
				if(res != FR_OK) Error_Handler();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <SD_creatSubDir+0x78>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <SD_creatSubDir+0x60>
 80017e4:	f000 fcea 	bl	80021bc <Error_Handler>
				break;
 80017e8:	e004      	b.n	80017f4 <SD_creatSubDir+0x60>
				Error_Handler();
 80017ea:	f000 fce7 	bl	80021bc <Error_Handler>
}
 80017ee:	e002      	b.n	80017f6 <SD_creatSubDir+0x62>
				break;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <SD_creatSubDir+0x62>
				break;
 80017f4:	bf00      	nop
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000188 	.word	0x20000188
 8001804:	2000018c 	.word	0x2000018c
 8001808:	200011c4 	.word	0x200011c4
 800180c:	200014dd 	.word	0x200014dd

08001810 <delete_node>:
FRESULT delete_node (
    TCHAR* path,    /* Path name buffer with the sub-directory to delete */
    UINT sz_buff,   /* Size of path name buffer (items) */
    FILINFO* fno    /* Name read buffer */
)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b094      	sub	sp, #80	@ 0x50
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
    UINT i, j;
    FRESULT fr;
    DIR dir;


    fr = f_opendir(&dir, path); /* Open the directory */
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	68f9      	ldr	r1, [r7, #12]
 8001822:	4618      	mov	r0, r3
 8001824:	f00c ffd4 	bl	800e7d0 <f_opendir>
 8001828:	4603      	mov	r3, r0
 800182a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (fr != FR_OK) return fr;
 800182e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <delete_node+0x2c>
 8001836:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800183a:	e076      	b.n	800192a <delete_node+0x11a>

    for (i = 0; path[i]; i++) ; /* Get current path length */
 800183c:	2300      	movs	r3, #0
 800183e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001840:	e002      	b.n	8001848 <delete_node+0x38>
 8001842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001844:	3301      	adds	r3, #1
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f6      	bne.n	8001842 <delete_node+0x32>
    path[i++] = _T('/');
 8001854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	222f      	movs	r2, #47	@ 0x2f
 8001860:	701a      	strb	r2, [r3, #0]

    for (;;) {
        fr = f_readdir(&dir, fno);  /* Get a directory item */
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4618      	mov	r0, r3
 800186a:	f00d f84a 	bl	800e902 <f_readdir>
 800186e:	4603      	mov	r3, r0
 8001870:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (fr != FR_OK || !fno->fname[0]) break;   /* End of directory? */
 8001874:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001878:	2b00      	cmp	r3, #0
 800187a:	d13d      	bne.n	80018f8 <delete_node+0xe8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7d9b      	ldrb	r3, [r3, #22]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d039      	beq.n	80018f8 <delete_node+0xe8>
        j = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	@ 0x48
        do {    /* Make a path name */
            if (i + j >= sz_buff) { /* Buffer over flow? */
 8001888:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800188a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188c:	4413      	add	r3, r2
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	429a      	cmp	r2, r3
 8001892:	d803      	bhi.n	800189c <delete_node+0x8c>
                fr = 100; break;    /* Fails with 100 when buffer overflow */
 8001894:	2364      	movs	r3, #100	@ 0x64
 8001896:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800189a:	e012      	b.n	80018c2 <delete_node+0xb2>
            }
            path[i + j] = fno->fname[j];
 800189c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800189e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018a0:	4413      	add	r3, r2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4413      	add	r3, r2
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018aa:	440a      	add	r2, r1
 80018ac:	3216      	adds	r2, #22
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	701a      	strb	r2, [r3, #0]
        } while (fno->fname[j++]);
 80018b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	7d9b      	ldrb	r3, [r3, #22]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e2      	bne.n	8001888 <delete_node+0x78>
        if (fno->fattrib & AM_DIR) {    /* Item is a directory */
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	7a1b      	ldrb	r3, [r3, #8]
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d008      	beq.n	80018e0 <delete_node+0xd0>
            fr = delete_node(path, sz_buff, fno);
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff ff9c 	bl	8001810 <delete_node>
 80018d8:	4603      	mov	r3, r0
 80018da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80018de:	e005      	b.n	80018ec <delete_node+0xdc>
        } else {                        /* Item is a file */
            fr = f_unlink(path);
 80018e0:	68f8      	ldr	r0, [r7, #12]
 80018e2:	f00d f939 	bl	800eb58 <f_unlink>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
        if (fr != FR_OK) break;
 80018ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d100      	bne.n	80018f6 <delete_node+0xe6>
        fr = f_readdir(&dir, fno);  /* Get a directory item */
 80018f4:	e7b5      	b.n	8001862 <delete_node+0x52>
        if (fr != FR_OK) break;
 80018f6:	bf00      	nop
    }

    path[--i] = 0;  /* Restore the path name */
 80018f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018fa:	3b01      	subs	r3, #1
 80018fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001902:	4413      	add	r3, r2
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
    f_closedir(&dir);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4618      	mov	r0, r3
 800190e:	f00c ffd2 	bl	800e8b6 <f_closedir>

    if (fr == FR_OK) fr = f_unlink(path);  /* Delete the empty directory */
 8001912:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <delete_node+0x116>
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f00d f91c 	bl	800eb58 <f_unlink>
 8001920:	4603      	mov	r3, r0
 8001922:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    return fr;
 8001926:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800192a:	4618      	mov	r0, r3
 800192c:	3750      	adds	r7, #80	@ 0x50
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <SD_deleteFolder>:
//-------------------------------------------------- Ham xoa thu muc
void SD_deleteFolder(char* foldername)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0d0      	sub	sp, #320	@ 0x140
 8001938:	af00      	add	r7, sp, #0
 800193a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800193e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001942:	6018      	str	r0, [r3, #0]
	TCHAR buff[256];
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 8001944:	2200      	movs	r2, #0
 8001946:	492b      	ldr	r1, [pc, #172]	@ (80019f4 <SD_deleteFolder+0xc0>)
 8001948:	482b      	ldr	r0, [pc, #172]	@ (80019f8 <SD_deleteFolder+0xc4>)
 800194a:	f00c f8d3 	bl	800daf4 <f_mount>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <SD_deleteFolder+0x26>
	{
		Error_Handler();
 8001954:	f000 fc32 	bl	80021bc <Error_Handler>
			{
				send_uart("Failed to delete the directory\r\n");
			}
		}
	}
}
 8001958:	e046      	b.n	80019e8 <SD_deleteFolder+0xb4>
		char path[50] = {0};
 800195a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800195e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	3304      	adds	r3, #4
 8001968:	222e      	movs	r2, #46	@ 0x2e
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f00e f995 	bl	800fc9c <memset>
		strcpy(path,"0:");
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <SD_deleteFolder+0xc8>)
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	4611      	mov	r1, r2
 800197c:	8019      	strh	r1, [r3, #0]
 800197e:	3302      	adds	r3, #2
 8001980:	0c12      	lsrs	r2, r2, #16
 8001982:	701a      	strb	r2, [r3, #0]
		strcat(path,foldername);
 8001984:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001988:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800198c:	f107 020c 	add.w	r2, r7, #12
 8001990:	6819      	ldr	r1, [r3, #0]
 8001992:	4610      	mov	r0, r2
 8001994:	f00e f98a 	bl	800fcac <strcat>
		res = f_opendir(&dir, path);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	4818      	ldr	r0, [pc, #96]	@ (8001a00 <SD_deleteFolder+0xcc>)
 80019a0:	f00c ff16 	bl	800e7d0 <f_opendir>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <SD_deleteFolder+0xd0>)
 80019aa:	701a      	strb	r2, [r3, #0]
		if (res != FR_OK)
 80019ac:	4b15      	ldr	r3, [pc, #84]	@ (8001a04 <SD_deleteFolder+0xd0>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <SD_deleteFolder+0x86>
			Error_Handler();
 80019b4:	f000 fc02 	bl	80021bc <Error_Handler>
}
 80019b8:	e016      	b.n	80019e8 <SD_deleteFolder+0xb4>
			res = delete_node(path,sizeof(buff),&fileInfo);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4a12      	ldr	r2, [pc, #72]	@ (8001a08 <SD_deleteFolder+0xd4>)
 80019c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff23 	bl	8001810 <delete_node>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <SD_deleteFolder+0xd0>)
 80019d0:	701a      	strb	r2, [r3, #0]
			if(res == FR_OK)
 80019d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <SD_deleteFolder+0xd0>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <SD_deleteFolder+0xae>
				send_uart("The directory and its contents have successfully been deleted\r\n");
 80019da:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <SD_deleteFolder+0xd8>)
 80019dc:	f000 f81a 	bl	8001a14 <send_uart>
}
 80019e0:	e002      	b.n	80019e8 <SD_deleteFolder+0xb4>
				send_uart("Failed to delete the directory\r\n");
 80019e2:	480b      	ldr	r0, [pc, #44]	@ (8001a10 <SD_deleteFolder+0xdc>)
 80019e4:	f000 f816 	bl	8001a14 <send_uart>
}
 80019e8:	bf00      	nop
 80019ea:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000188 	.word	0x20000188
 80019f8:	2000018c 	.word	0x2000018c
 80019fc:	080105f4 	.word	0x080105f4
 8001a00:	200014e4 	.word	0x200014e4
 8001a04:	200014dd 	.word	0x200014dd
 8001a08:	200011c4 	.word	0x200011c4
 8001a0c:	080105f8 	.word	0x080105f8
 8001a10:	08010638 	.word	0x08010638

08001a14 <send_uart>:
char namebuf[128];
char filebuf[1024];
FRESULT fres;
// to send data to uart
void send_uart(char *string)
{
 8001a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	466b      	mov	r3, sp
 8001a20:	469a      	mov	sl, r3
	/*
	uint16_t len = strlen(string);  
	memset(buf2, 0, sizeof(buf2));
	HAL_UART_Transmit(&huart1, (uint8_t)* string, len, 2000);
	*/
	uint16_t len = strlen(string);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7fe fbe4 	bl	80001f0 <strlen>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	82fb      	strh	r3, [r7, #22]
  char buf1[len];
 8001a2c:	8afe      	ldrh	r6, [r7, #22]
 8001a2e:	4633      	mov	r3, r6
 8001a30:	3b01      	subs	r3, #1
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	b2b3      	uxth	r3, r6
 8001a36:	2200      	movs	r2, #0
 8001a38:	4698      	mov	r8, r3
 8001a3a:	4691      	mov	r9, r2
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a48:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a50:	b2b3      	uxth	r3, r6
 8001a52:	2200      	movs	r2, #0
 8001a54:	461c      	mov	r4, r3
 8001a56:	4615      	mov	r5, r2
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	00eb      	lsls	r3, r5, #3
 8001a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a66:	00e2      	lsls	r2, r4, #3
 8001a68:	4633      	mov	r3, r6
 8001a6a:	3307      	adds	r3, #7
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	ebad 0d03 	sub.w	sp, sp, r3
 8001a74:	466b      	mov	r3, sp
 8001a76:	3300      	adds	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
  memset(buf1, 0, sizeof(buf1));
 8001a7a:	4633      	mov	r3, r6
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	2100      	movs	r1, #0
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f00e f90b 	bl	800fc9c <memset>
  strcpy(buf1, string);
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f00e f94b 	bl	800fd24 <strcpy>
  HAL_UART_Transmit(&huart1,(char*) buf1, sizeof(buf1), 2000);
 8001a8e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001a92:	4632      	mov	r2, r6
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <send_uart+0x94>)
 8001a98:	f003 fd18 	bl	80054cc <HAL_UART_Transmit>
 8001a9c:	46d5      	mov	sp, sl

}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa8:	20001574 	.word	0x20001574

08001aac <bufsize>:

int bufsize(char *buf){
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	int i=0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0' )i++;
 8001ab8:	e002      	b.n	8001ac0 <bufsize+0x14>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	3301      	adds	r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d1f6      	bne.n	8001aba <bufsize+0xe>

	return i;
 8001acc:	68fb      	ldr	r3, [r7, #12]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <clear_buffer>:
	}
}


void clear_buffer (void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++) buffer[i] = '\0';
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	e007      	b.n	8001af8 <clear_buffer+0x1c>
 8001ae8:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <clear_buffer+0x34>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001afe:	dbf3      	blt.n	8001ae8 <clear_buffer+0xc>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20003628 	.word	0x20003628

08001b14 <uart_receive_string>:

// Hàm nhận chuỗi từ UART (blocking, kết thúc khi gặp '!' hoặc '\n')
void uart_receive_string(char* buf, uint16_t maxlen) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
    uint16_t i = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	81fb      	strh	r3, [r7, #14]
    char c;
    while (i < maxlen - 1) {
 8001b24:	e01c      	b.n	8001b60 <uart_receive_string+0x4c>
        HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8001b26:	f107 010d 	add.w	r1, r7, #13
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4817      	ldr	r0, [pc, #92]	@ (8001b90 <uart_receive_string+0x7c>)
 8001b32:	f003 fd56 	bl	80055e2 <HAL_UART_Receive>
        if (c == '!' || c == '\n') break;
 8001b36:	7b7b      	ldrb	r3, [r7, #13]
 8001b38:	2b21      	cmp	r3, #33	@ 0x21
 8001b3a:	d016      	beq.n	8001b6a <uart_receive_string+0x56>
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d013      	beq.n	8001b6a <uart_receive_string+0x56>
        buf[i++] = c;
 8001b42:	89fb      	ldrh	r3, [r7, #14]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	81fa      	strh	r2, [r7, #14]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	7b7a      	ldrb	r2, [r7, #13]
 8001b50:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 100); // Echo lại ký tự
 8001b52:	f107 010d 	add.w	r1, r7, #13
 8001b56:	2364      	movs	r3, #100	@ 0x64
 8001b58:	2201      	movs	r2, #1
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <uart_receive_string+0x7c>)
 8001b5c:	f003 fcb6 	bl	80054cc <HAL_UART_Transmit>
    while (i < maxlen - 1) {
 8001b60:	89fa      	ldrh	r2, [r7, #14]
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	429a      	cmp	r2, r3
 8001b68:	dbdd      	blt.n	8001b26 <uart_receive_string+0x12>
    }
    buf[i] = '\0';
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	4413      	add	r3, r2
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
    char crlf[2] = "\r\n";
 8001b74:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001b78:	813b      	strh	r3, [r7, #8]
    HAL_UART_Transmit(&huart1, (uint8_t*)crlf, 2, 100);
 8001b7a:	f107 0108 	add.w	r1, r7, #8
 8001b7e:	2364      	movs	r3, #100	@ 0x64
 8001b80:	2202      	movs	r2, #2
 8001b82:	4803      	ldr	r0, [pc, #12]	@ (8001b90 <uart_receive_string+0x7c>)
 8001b84:	f003 fca2 	bl	80054cc <HAL_UART_Transmit>
}
 8001b88:	bf00      	nop
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20001574 	.word	0x20001574

08001b94 <uart_receive_char>:

// Hàm nhận 1 ký tự từ UART (dùng cho chọn option)
char uart_receive_char(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
    char c;
    HAL_UART_Receive(&huart1, (uint8_t*)&c, 1, HAL_MAX_DELAY);
 8001b9a:	1df9      	adds	r1, r7, #7
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	480b      	ldr	r0, [pc, #44]	@ (8001bd0 <uart_receive_char+0x3c>)
 8001ba4:	f003 fd1d 	bl	80055e2 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 100); // Echo lại ký tự
 8001ba8:	1df9      	adds	r1, r7, #7
 8001baa:	2364      	movs	r3, #100	@ 0x64
 8001bac:	2201      	movs	r2, #1
 8001bae:	4808      	ldr	r0, [pc, #32]	@ (8001bd0 <uart_receive_char+0x3c>)
 8001bb0:	f003 fc8c 	bl	80054cc <HAL_UART_Transmit>
    char crlf[2] = "\r\n";
 8001bb4:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8001bb8:	80bb      	strh	r3, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)crlf, 2, 100);
 8001bba:	1d39      	adds	r1, r7, #4
 8001bbc:	2364      	movs	r3, #100	@ 0x64
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <uart_receive_char+0x3c>)
 8001bc2:	f003 fc83 	bl	80054cc <HAL_UART_Transmit>
    return c;
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20001574 	.word	0x20001574

08001bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b092      	sub	sp, #72	@ 0x48
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bda:	f000 fcbf 	bl	800255c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bde:	f000 f9d3 	bl	8001f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be2:	f000 fa9b 	bl	800211c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001be6:	f000 fa39 	bl	800205c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001bea:	f000 fa6d 	bl	80020c8 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001bee:	f7ff f875 	bl	8000cdc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001bf2:	f00d fb27 	bl	800f244 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001bf6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001bfa:	f000 fd21 	bl	8002640 <HAL_Delay>
//     	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
//     	*/
//     /****************CREATE A NEW SUB DIR************* */
    

    fresult = f_mount(&fs, "/", 1);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	49b2      	ldr	r1, [pc, #712]	@ (8001ecc <main+0x2f8>)
 8001c02:	48b3      	ldr	r0, [pc, #716]	@ (8001ed0 <main+0x2fc>)
 8001c04:	f00b ff76 	bl	800daf4 <f_mount>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001ed4 <main+0x300>)
 8001c0e:	701a      	strb	r2, [r3, #0]
      	if (fresult != FR_OK) send_uart ("ERROR in mounting SD CARD...\n\n");
 8001c10:	4bb0      	ldr	r3, [pc, #704]	@ (8001ed4 <main+0x300>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <main+0x4c>
 8001c18:	48af      	ldr	r0, [pc, #700]	@ (8001ed8 <main+0x304>)
 8001c1a:	f7ff fefb 	bl	8001a14 <send_uart>
 8001c1e:	e002      	b.n	8001c26 <main+0x52>
      	else send_uart("SD CARD mounted successfully...\n\n");
 8001c20:	48ae      	ldr	r0, [pc, #696]	@ (8001edc <main+0x308>)
 8001c22:	f7ff fef7 	bl	8001a14 <send_uart>


      	/*************** Card capacity details ********************/

      	/* Check free space */
      	f_getfree("", &fre_clust, &pfs);
 8001c26:	4aae      	ldr	r2, [pc, #696]	@ (8001ee0 <main+0x30c>)
 8001c28:	49ae      	ldr	r1, [pc, #696]	@ (8001ee4 <main+0x310>)
 8001c2a:	48af      	ldr	r0, [pc, #700]	@ (8001ee8 <main+0x314>)
 8001c2c:	f00c fedf 	bl	800e9ee <f_getfree>

      	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001c30:	4bab      	ldr	r3, [pc, #684]	@ (8001ee0 <main+0x30c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	3b02      	subs	r3, #2
 8001c38:	4aa9      	ldr	r2, [pc, #676]	@ (8001ee0 <main+0x30c>)
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	8952      	ldrh	r2, [r2, #10]
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fd98 	bl	8000778 <__aeabi_ui2d>
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4ba7      	ldr	r3, [pc, #668]	@ (8001eec <main+0x318>)
 8001c4e:	f7fe fb27 	bl	80002a0 <__aeabi_dmul>
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe fe07 	bl	800086c <__aeabi_d2uiz>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4aa3      	ldr	r2, [pc, #652]	@ (8001ef0 <main+0x31c>)
 8001c62:	6013      	str	r3, [r2, #0]
      	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 8001c64:	4ba2      	ldr	r3, [pc, #648]	@ (8001ef0 <main+0x31c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	49a2      	ldr	r1, [pc, #648]	@ (8001ef4 <main+0x320>)
 8001c6c:	48a2      	ldr	r0, [pc, #648]	@ (8001ef8 <main+0x324>)
 8001c6e:	f00d fff5 	bl	800fc5c <siprintf>
      	send_uart(buffer);
 8001c72:	48a1      	ldr	r0, [pc, #644]	@ (8001ef8 <main+0x324>)
 8001c74:	f7ff fece 	bl	8001a14 <send_uart>
      	clear_buffer();
 8001c78:	f7ff ff30 	bl	8001adc <clear_buffer>
      	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001c7c:	4b98      	ldr	r3, [pc, #608]	@ (8001ee0 <main+0x30c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	895b      	ldrh	r3, [r3, #10]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b97      	ldr	r3, [pc, #604]	@ (8001ee4 <main+0x310>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fd73 	bl	8000778 <__aeabi_ui2d>
 8001c92:	f04f 0200 	mov.w	r2, #0
 8001c96:	4b95      	ldr	r3, [pc, #596]	@ (8001eec <main+0x318>)
 8001c98:	f7fe fb02 	bl	80002a0 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f7fe fde2 	bl	800086c <__aeabi_d2uiz>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a94      	ldr	r2, [pc, #592]	@ (8001efc <main+0x328>)
 8001cac:	6013      	str	r3, [r2, #0]
      	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 8001cae:	4b93      	ldr	r3, [pc, #588]	@ (8001efc <main+0x328>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4992      	ldr	r1, [pc, #584]	@ (8001f00 <main+0x32c>)
 8001cb6:	4890      	ldr	r0, [pc, #576]	@ (8001ef8 <main+0x324>)
 8001cb8:	f00d ffd0 	bl	800fc5c <siprintf>
      	send_uart(buffer);
 8001cbc:	488e      	ldr	r0, [pc, #568]	@ (8001ef8 <main+0x324>)
 8001cbe:	f7ff fea9 	bl	8001a14 <send_uart>
      	clear_buffer();
 8001cc2:	f7ff ff0b 	bl	8001adc <clear_buffer>

  while (1)
  {
    /* USER CODE END WHILE */

	  send_uart("==== SD Card Menu ====\r\n");
 8001cc6:	488f      	ldr	r0, [pc, #572]	@ (8001f04 <main+0x330>)
 8001cc8:	f7ff fea4 	bl	8001a14 <send_uart>
	       send_uart("0. Stop program\r\n");
 8001ccc:	488e      	ldr	r0, [pc, #568]	@ (8001f08 <main+0x334>)
 8001cce:	f7ff fea1 	bl	8001a14 <send_uart>
	       send_uart("1. List files\r\n");
 8001cd2:	488e      	ldr	r0, [pc, #568]	@ (8001f0c <main+0x338>)
 8001cd4:	f7ff fe9e 	bl	8001a14 <send_uart>
	       send_uart("2. Create directory\r\n");
 8001cd8:	488d      	ldr	r0, [pc, #564]	@ (8001f10 <main+0x33c>)
 8001cda:	f7ff fe9b 	bl	8001a14 <send_uart>
	       send_uart("3. Delete directory\r\n");
 8001cde:	488d      	ldr	r0, [pc, #564]	@ (8001f14 <main+0x340>)
 8001ce0:	f7ff fe98 	bl	8001a14 <send_uart>
	       send_uart("4. Create file \r\n");
 8001ce4:	488c      	ldr	r0, [pc, #560]	@ (8001f18 <main+0x344>)
 8001ce6:	f7ff fe95 	bl	8001a14 <send_uart>
	       send_uart("5. Delete file\r\n");
 8001cea:	488c      	ldr	r0, [pc, #560]	@ (8001f1c <main+0x348>)
 8001cec:	f7ff fe92 	bl	8001a14 <send_uart>
	       send_uart("6. Update an existing file\r\n");
 8001cf0:	488b      	ldr	r0, [pc, #556]	@ (8001f20 <main+0x34c>)
 8001cf2:	f7ff fe8f 	bl	8001a14 <send_uart>
	       send_uart("Please enter option number: ");
 8001cf6:	488b      	ldr	r0, [pc, #556]	@ (8001f24 <main+0x350>)
 8001cf8:	f7ff fe8c 	bl	8001a14 <send_uart>

	       char opt = uart_receive_char();
 8001cfc:	f7ff ff4a 	bl	8001b94 <uart_receive_char>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	       switch (opt) {
 8001d06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001d0a:	3b30      	subs	r3, #48	@ 0x30
 8001d0c:	2b06      	cmp	r3, #6
 8001d0e:	f200 80d7 	bhi.w	8001ec0 <main+0x2ec>
 8001d12:	a201      	add	r2, pc, #4	@ (adr r2, 8001d18 <main+0x144>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d35 	.word	0x08001d35
 8001d1c:	08001d3f 	.word	0x08001d3f
 8001d20:	08001d4b 	.word	0x08001d4b
 8001d24:	08001d67 	.word	0x08001d67
 8001d28:	08001d83 	.word	0x08001d83
 8001d2c:	08001dfd 	.word	0x08001dfd
 8001d30:	08001e51 	.word	0x08001e51
	           case '0':
	               send_uart("Stopping program.\r\n");
 8001d34:	487c      	ldr	r0, [pc, #496]	@ (8001f28 <main+0x354>)
 8001d36:	f7ff fe6d 	bl	8001a14 <send_uart>
	               while(1); // Dừng chương trình
 8001d3a:	bf00      	nop
 8001d3c:	e7fd      	b.n	8001d3a <main+0x166>
	               break;
	           case '1':
	               send_uart("Files on SD card:\r\n");
 8001d3e:	487b      	ldr	r0, [pc, #492]	@ (8001f2c <main+0x358>)
 8001d40:	f7ff fe68 	bl	8001a14 <send_uart>
	               SD_List_File();
 8001d44:	f7ff fca0 	bl	8001688 <SD_List_File>
	               break;
 8001d48:	e0be      	b.n	8001ec8 <main+0x2f4>
	           case '2':
	               send_uart("Please enter directory name: ");
 8001d4a:	4879      	ldr	r0, [pc, #484]	@ (8001f30 <main+0x35c>)
 8001d4c:	f7ff fe62 	bl	8001a14 <send_uart>
	               uart_receive_string(namebuf, sizeof(namebuf));
 8001d50:	2180      	movs	r1, #128	@ 0x80
 8001d52:	4878      	ldr	r0, [pc, #480]	@ (8001f34 <main+0x360>)
 8001d54:	f7ff fede 	bl	8001b14 <uart_receive_string>
	               SD_creatSubDir(namebuf);
 8001d58:	4876      	ldr	r0, [pc, #472]	@ (8001f34 <main+0x360>)
 8001d5a:	f7ff fd1b 	bl	8001794 <SD_creatSubDir>
	               send_uart("Directory created!\r\n");
 8001d5e:	4876      	ldr	r0, [pc, #472]	@ (8001f38 <main+0x364>)
 8001d60:	f7ff fe58 	bl	8001a14 <send_uart>
	               break;
 8001d64:	e0b0      	b.n	8001ec8 <main+0x2f4>
	           case '3':
	               send_uart("Please enter directory name to delete: ");
 8001d66:	4875      	ldr	r0, [pc, #468]	@ (8001f3c <main+0x368>)
 8001d68:	f7ff fe54 	bl	8001a14 <send_uart>
	               uart_receive_string(namebuf, sizeof(namebuf));
 8001d6c:	2180      	movs	r1, #128	@ 0x80
 8001d6e:	4871      	ldr	r0, [pc, #452]	@ (8001f34 <main+0x360>)
 8001d70:	f7ff fed0 	bl	8001b14 <uart_receive_string>
	               SD_deleteFolder(namebuf);
 8001d74:	486f      	ldr	r0, [pc, #444]	@ (8001f34 <main+0x360>)
 8001d76:	f7ff fddd 	bl	8001934 <SD_deleteFolder>
	               send_uart("Directory deleted!\r\n");
 8001d7a:	4871      	ldr	r0, [pc, #452]	@ (8001f40 <main+0x36c>)
 8001d7c:	f7ff fe4a 	bl	8001a14 <send_uart>
	               break;
 8001d80:	e0a2      	b.n	8001ec8 <main+0x2f4>
	           case '4':
	               send_uart("Please enter file name to create: ");
 8001d82:	4870      	ldr	r0, [pc, #448]	@ (8001f44 <main+0x370>)
 8001d84:	f7ff fe46 	bl	8001a14 <send_uart>
	               uart_receive_string(namebuf, sizeof(namebuf));
 8001d88:	2180      	movs	r1, #128	@ 0x80
 8001d8a:	486a      	ldr	r0, [pc, #424]	@ (8001f34 <main+0x360>)
 8001d8c:	f7ff fec2 	bl	8001b14 <uart_receive_string>
	               fres = f_open(&fil, namebuf, FA_CREATE_ALWAYS | FA_WRITE);
 8001d90:	220a      	movs	r2, #10
 8001d92:	4968      	ldr	r1, [pc, #416]	@ (8001f34 <main+0x360>)
 8001d94:	486c      	ldr	r0, [pc, #432]	@ (8001f48 <main+0x374>)
 8001d96:	f00b fef3 	bl	800db80 <f_open>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b6b      	ldr	r3, [pc, #428]	@ (8001f4c <main+0x378>)
 8001da0:	701a      	strb	r2, [r3, #0]
	               if (fres == FR_OK) {
 8001da2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f4c <main+0x378>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d124      	bne.n	8001df4 <main+0x220>
	                   send_uart("Enter content (end with !):\r\n");
 8001daa:	4869      	ldr	r0, [pc, #420]	@ (8001f50 <main+0x37c>)
 8001dac:	f7ff fe32 	bl	8001a14 <send_uart>

	                   uart_receive_string(filebuf, sizeof(filebuf));
 8001db0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001db4:	4867      	ldr	r0, [pc, #412]	@ (8001f54 <main+0x380>)
 8001db6:	f7ff fead 	bl	8001b14 <uart_receive_string>
	                   fres = f_write(&fil, filebuf, bufsize(filebuf), &bw);
 8001dba:	4866      	ldr	r0, [pc, #408]	@ (8001f54 <main+0x380>)
 8001dbc:	f7ff fe76 	bl	8001aac <bufsize>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b64      	ldr	r3, [pc, #400]	@ (8001f58 <main+0x384>)
 8001dc6:	4963      	ldr	r1, [pc, #396]	@ (8001f54 <main+0x380>)
 8001dc8:	485f      	ldr	r0, [pc, #380]	@ (8001f48 <main+0x374>)
 8001dca:	f00c f8a1 	bl	800df10 <f_write>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f4c <main+0x378>)
 8001dd4:	701a      	strb	r2, [r3, #0]
	                   if (fres == FR_OK) send_uart("File created and written!\r\n");
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f4c <main+0x378>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <main+0x212>
 8001dde:	485f      	ldr	r0, [pc, #380]	@ (8001f5c <main+0x388>)
 8001de0:	f7ff fe18 	bl	8001a14 <send_uart>
 8001de4:	e002      	b.n	8001dec <main+0x218>
	                   else send_uart("Failed to write file!\r\n");
 8001de6:	485e      	ldr	r0, [pc, #376]	@ (8001f60 <main+0x38c>)
 8001de8:	f7ff fe14 	bl	8001a14 <send_uart>
	                   f_close(&fil);
 8001dec:	4856      	ldr	r0, [pc, #344]	@ (8001f48 <main+0x374>)
 8001dee:	f00c faa1 	bl	800e334 <f_close>
	               } else {
	                   send_uart("Failed to create file!\r\n");
	               }
	               break;
 8001df2:	e069      	b.n	8001ec8 <main+0x2f4>
	                   send_uart("Failed to create file!\r\n");
 8001df4:	485b      	ldr	r0, [pc, #364]	@ (8001f64 <main+0x390>)
 8001df6:	f7ff fe0d 	bl	8001a14 <send_uart>
	               break;
 8001dfa:	e065      	b.n	8001ec8 <main+0x2f4>
	           case '5':
	               send_uart("Please enter file name to delete: ");
 8001dfc:	485a      	ldr	r0, [pc, #360]	@ (8001f68 <main+0x394>)
 8001dfe:	f7ff fe09 	bl	8001a14 <send_uart>
	               uart_receive_string(namebuf, sizeof(namebuf));
 8001e02:	2180      	movs	r1, #128	@ 0x80
 8001e04:	484b      	ldr	r0, [pc, #300]	@ (8001f34 <main+0x360>)
 8001e06:	f7ff fe85 	bl	8001b14 <uart_receive_string>
	               char pathbuf[64] = {0};
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	223c      	movs	r2, #60	@ 0x3c
 8001e14:	2100      	movs	r1, #0
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00d ff40 	bl	800fc9c <memset>
                 snprintf(pathbuf, sizeof(pathbuf), "/%s", namebuf);
 8001e1c:	1d38      	adds	r0, r7, #4
 8001e1e:	4b45      	ldr	r3, [pc, #276]	@ (8001f34 <main+0x360>)
 8001e20:	4a52      	ldr	r2, [pc, #328]	@ (8001f6c <main+0x398>)
 8001e22:	2140      	movs	r1, #64	@ 0x40
 8001e24:	f00d fee6 	bl	800fbf4 <sniprintf>
	               fres = f_unlink(pathbuf);
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f00c fe94 	bl	800eb58 <f_unlink>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b45      	ldr	r3, [pc, #276]	@ (8001f4c <main+0x378>)
 8001e36:	701a      	strb	r2, [r3, #0]
	               if (fres == FR_OK) send_uart("File deleted!\r\n");
 8001e38:	4b44      	ldr	r3, [pc, #272]	@ (8001f4c <main+0x378>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d103      	bne.n	8001e48 <main+0x274>
 8001e40:	484b      	ldr	r0, [pc, #300]	@ (8001f70 <main+0x39c>)
 8001e42:	f7ff fde7 	bl	8001a14 <send_uart>
	               else send_uart("Failed to delete file!\r\n");
	               break;
 8001e46:	e03f      	b.n	8001ec8 <main+0x2f4>
	               else send_uart("Failed to delete file!\r\n");
 8001e48:	484a      	ldr	r0, [pc, #296]	@ (8001f74 <main+0x3a0>)
 8001e4a:	f7ff fde3 	bl	8001a14 <send_uart>
	               break;
 8001e4e:	e03b      	b.n	8001ec8 <main+0x2f4>


	           case '6':
	               send_uart("Please enter file name to update: ");
 8001e50:	4849      	ldr	r0, [pc, #292]	@ (8001f78 <main+0x3a4>)
 8001e52:	f7ff fddf 	bl	8001a14 <send_uart>
	               uart_receive_string(namebuf, sizeof(namebuf));
 8001e56:	2180      	movs	r1, #128	@ 0x80
 8001e58:	4836      	ldr	r0, [pc, #216]	@ (8001f34 <main+0x360>)
 8001e5a:	f7ff fe5b 	bl	8001b14 <uart_receive_string>
	               fres = f_open(&fil, namebuf, FA_OPEN_EXISTING | FA_WRITE | FA_READ);
 8001e5e:	2203      	movs	r2, #3
 8001e60:	4934      	ldr	r1, [pc, #208]	@ (8001f34 <main+0x360>)
 8001e62:	4839      	ldr	r0, [pc, #228]	@ (8001f48 <main+0x374>)
 8001e64:	f00b fe8c 	bl	800db80 <f_open>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <main+0x378>)
 8001e6e:	701a      	strb	r2, [r3, #0]
	               if (fres == FR_OK) {
 8001e70:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <main+0x378>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d11f      	bne.n	8001eb8 <main+0x2e4>
	                   f_lseek(&fil, f_size(&fil));
 8001e78:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <main+0x374>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4832      	ldr	r0, [pc, #200]	@ (8001f48 <main+0x374>)
 8001e80:	f00c fa82 	bl	800e388 <f_lseek>
	                   memset(filebuf, '0', sizeof(filebuf));
 8001e84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e88:	2130      	movs	r1, #48	@ 0x30
 8001e8a:	4832      	ldr	r0, [pc, #200]	@ (8001f54 <main+0x380>)
 8001e8c:	f00d ff06 	bl	800fc9c <memset>
	                   send_uart("Enter content to append (end with !):\r\n");
 8001e90:	483a      	ldr	r0, [pc, #232]	@ (8001f7c <main+0x3a8>)
 8001e92:	f7ff fdbf 	bl	8001a14 <send_uart>

	                   uart_receive_string(filebuf, sizeof(filebuf));
 8001e96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e9a:	482e      	ldr	r0, [pc, #184]	@ (8001f54 <main+0x380>)
 8001e9c:	f7ff fe3a 	bl	8001b14 <uart_receive_string>
	                   fres = f_puts(filebuf, &fil);
 8001ea0:	4929      	ldr	r1, [pc, #164]	@ (8001f48 <main+0x374>)
 8001ea2:	482c      	ldr	r0, [pc, #176]	@ (8001f54 <main+0x380>)
 8001ea4:	f00d f887 	bl	800efb6 <f_puts>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b27      	ldr	r3, [pc, #156]	@ (8001f4c <main+0x378>)
 8001eae:	701a      	strb	r2, [r3, #0]
	                   //f_close(&fil);
//	                   if (fres == FR_OK)
//	                   {send_uart("File updated!\r\n");}
//	                   else
//	                   {send_uart("Failed to update file!\r\n");}
	                   f_close(&fil);
 8001eb0:	4825      	ldr	r0, [pc, #148]	@ (8001f48 <main+0x374>)
 8001eb2:	f00c fa3f 	bl	800e334 <f_close>
	               } else {
	                   send_uart("Failed to open file for update!\r\n");
	               }
	               break;
 8001eb6:	e007      	b.n	8001ec8 <main+0x2f4>
	                   send_uart("Failed to open file for update!\r\n");
 8001eb8:	4831      	ldr	r0, [pc, #196]	@ (8001f80 <main+0x3ac>)
 8001eba:	f7ff fdab 	bl	8001a14 <send_uart>
	               break;
 8001ebe:	e003      	b.n	8001ec8 <main+0x2f4>
	           default:
	               send_uart("Invalid option!\r\n");
 8001ec0:	4830      	ldr	r0, [pc, #192]	@ (8001f84 <main+0x3b0>)
 8001ec2:	f7ff fda7 	bl	8001a14 <send_uart>
	               break;
 8001ec6:	bf00      	nop
  {
 8001ec8:	e6fd      	b.n	8001cc6 <main+0xf2>
 8001eca:	bf00      	nop
 8001ecc:	0801065c 	.word	0x0801065c
 8001ed0:	200015bc 	.word	0x200015bc
 8001ed4:	20003624 	.word	0x20003624
 8001ed8:	08010660 	.word	0x08010660
 8001edc:	08010680 	.word	0x08010680
 8001ee0:	20003a2c 	.word	0x20003a2c
 8001ee4:	20003a30 	.word	0x20003a30
 8001ee8:	080106a4 	.word	0x080106a4
 8001eec:	3fe00000 	.word	0x3fe00000
 8001ef0:	20003a34 	.word	0x20003a34
 8001ef4:	080106a8 	.word	0x080106a8
 8001ef8:	20003628 	.word	0x20003628
 8001efc:	20003a38 	.word	0x20003a38
 8001f00:	080106c4 	.word	0x080106c4
 8001f04:	080106e0 	.word	0x080106e0
 8001f08:	080106fc 	.word	0x080106fc
 8001f0c:	08010710 	.word	0x08010710
 8001f10:	08010720 	.word	0x08010720
 8001f14:	08010738 	.word	0x08010738
 8001f18:	08010750 	.word	0x08010750
 8001f1c:	08010764 	.word	0x08010764
 8001f20:	08010778 	.word	0x08010778
 8001f24:	08010798 	.word	0x08010798
 8001f28:	080107b8 	.word	0x080107b8
 8001f2c:	080107cc 	.word	0x080107cc
 8001f30:	080107e0 	.word	0x080107e0
 8001f34:	20003a3c 	.word	0x20003a3c
 8001f38:	08010800 	.word	0x08010800
 8001f3c:	08010818 	.word	0x08010818
 8001f40:	08010840 	.word	0x08010840
 8001f44:	08010858 	.word	0x08010858
 8001f48:	200025f4 	.word	0x200025f4
 8001f4c:	20003ebc 	.word	0x20003ebc
 8001f50:	0801087c 	.word	0x0801087c
 8001f54:	20003abc 	.word	0x20003abc
 8001f58:	20003a28 	.word	0x20003a28
 8001f5c:	0801089c 	.word	0x0801089c
 8001f60:	080108b8 	.word	0x080108b8
 8001f64:	080108d0 	.word	0x080108d0
 8001f68:	080108ec 	.word	0x080108ec
 8001f6c:	08010910 	.word	0x08010910
 8001f70:	08010914 	.word	0x08010914
 8001f74:	08010924 	.word	0x08010924
 8001f78:	08010940 	.word	0x08010940
 8001f7c:	08010964 	.word	0x08010964
 8001f80:	0801098c 	.word	0x0801098c
 8001f84:	080109b0 	.word	0x080109b0

08001f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	@ 0x50
 8001f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	2230      	movs	r2, #48	@ 0x30
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00d fe80 	bl	800fc9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <SystemClock_Config+0xcc>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	4a27      	ldr	r2, [pc, #156]	@ (8002054 <SystemClock_Config+0xcc>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <SystemClock_Config+0xcc>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <SystemClock_Config+0xd0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001fd4:	4a20      	ldr	r2, [pc, #128]	@ (8002058 <SystemClock_Config+0xd0>)
 8001fd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <SystemClock_Config+0xd0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002000:	2348      	movs	r3, #72	@ 0x48
 8002002:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002004:	2302      	movs	r3, #2
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002008:	2303      	movs	r3, #3
 800200a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200c:	f107 0320 	add.w	r3, r7, #32
 8002010:	4618      	mov	r0, r3
 8002012:	f002 f921 	bl	8004258 <HAL_RCC_OscConfig>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800201c:	f000 f8ce 	bl	80021bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002020:	230f      	movs	r3, #15
 8002022:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002024:	2302      	movs	r3, #2
 8002026:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800202c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002030:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002036:	f107 030c 	add.w	r3, r7, #12
 800203a:	2102      	movs	r1, #2
 800203c:	4618      	mov	r0, r3
 800203e:	f002 fb83 	bl	8004748 <HAL_RCC_ClockConfig>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002048:	f000 f8b8 	bl	80021bc <Error_Handler>
  }
}
 800204c:	bf00      	nop
 800204e:	3750      	adds	r7, #80	@ 0x50
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	40007000 	.word	0x40007000

0800205c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002060:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002062:	4a18      	ldr	r2, [pc, #96]	@ (80020c4 <MX_SPI1_Init+0x68>)
 8002064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002066:	4b16      	ldr	r3, [pc, #88]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002068:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800206c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800206e:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002074:	4b12      	ldr	r3, [pc, #72]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002076:	2200      	movs	r2, #0
 8002078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <MX_SPI1_Init+0x64>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800208c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002090:	2220      	movs	r2, #32
 8002092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002094:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <MX_SPI1_Init+0x64>)
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <MX_SPI1_Init+0x64>)
 800209c:	2200      	movs	r2, #0
 800209e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <MX_SPI1_Init+0x64>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <MX_SPI1_Init+0x64>)
 80020a8:	220a      	movs	r2, #10
 80020aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020ac:	4804      	ldr	r0, [pc, #16]	@ (80020c0 <MX_SPI1_Init+0x64>)
 80020ae:	f002 fd6b 	bl	8004b88 <HAL_SPI_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020b8:	f000 f880 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000151c 	.word	0x2000151c
 80020c4:	40013000 	.word	0x40013000

080020c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <MX_USART1_UART_Init+0x50>)
 80020d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020da:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020ec:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020ee:	220c      	movs	r2, #12
 80020f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020f8:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_USART1_UART_Init+0x4c>)
 8002100:	f003 f994 	bl	800542c <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800210a:	f000 f857 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20001574 	.word	0x20001574
 8002118:	40011000 	.word	0x40011000

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <MX_GPIO_Init+0x98>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <MX_GPIO_Init+0x98>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <MX_GPIO_Init+0x98>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <MX_GPIO_Init+0x98>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a17      	ldr	r2, [pc, #92]	@ (80021b4 <MX_GPIO_Init+0x98>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b15      	ldr	r3, [pc, #84]	@ (80021b4 <MX_GPIO_Init+0x98>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <MX_GPIO_Init+0x98>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <MX_GPIO_Init+0x98>)
 8002174:	f043 0304 	orr.w	r3, r3, #4
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <MX_GPIO_Init+0x98>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	2110      	movs	r1, #16
 800218a:	480b      	ldr	r0, [pc, #44]	@ (80021b8 <MX_GPIO_Init+0x9c>)
 800218c:	f000 fdcc 	bl	8002d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002190:	2310      	movs	r3, #16
 8002192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	2301      	movs	r3, #1
 8002196:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	4619      	mov	r1, r3
 80021a6:	4804      	ldr	r0, [pc, #16]	@ (80021b8 <MX_GPIO_Init+0x9c>)
 80021a8:	f000 fc12 	bl	80029d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ac:	bf00      	nop
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800

080021bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c0:	b672      	cpsid	i
}
 80021c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <Error_Handler+0x8>

080021c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <HAL_MspInit+0x4c>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021de:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	4a08      	ldr	r2, [pc, #32]	@ (8002214 <HAL_MspInit+0x4c>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08a      	sub	sp, #40	@ 0x28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a19      	ldr	r2, [pc, #100]	@ (800229c <HAL_SPI_MspInit+0x84>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d12b      	bne.n	8002292 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002242:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002244:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002248:	6453      	str	r3, [r2, #68]	@ 0x44
 800224a:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a10      	ldr	r2, [pc, #64]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_SPI_MspInit+0x88>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002272:	23e0      	movs	r3, #224	@ 0xe0
 8002274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002282:	2305      	movs	r3, #5
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <HAL_SPI_MspInit+0x8c>)
 800228e:	f000 fb9f 	bl	80029d0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002292:	bf00      	nop
 8002294:	3728      	adds	r7, #40	@ 0x28
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40013000 	.word	0x40013000
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40020000 	.word	0x40020000

080022a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	@ 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_UART_MspInit+0x94>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d134      	bne.n	8002334 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022d4:	f043 0310 	orr.w	r3, r3, #16
 80022d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002302:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002310:	2303      	movs	r3, #3
 8002312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002314:	2307      	movs	r3, #7
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	4619      	mov	r1, r3
 800231e:	4809      	ldr	r0, [pc, #36]	@ (8002344 <HAL_UART_MspInit+0x9c>)
 8002320:	f000 fb56 	bl	80029d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	2025      	movs	r0, #37	@ 0x25
 800232a:	f000 fa88 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800232e:	2025      	movs	r0, #37	@ 0x25
 8002330:	f000 faa1 	bl	8002876 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002334:	bf00      	nop
 8002336:	3728      	adds	r7, #40	@ 0x28
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40011000 	.word	0x40011000
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000

08002348 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2,Timer3,Timer4;

void SDTimer_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800234c:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <SDTimer_Handler+0x70>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <SDTimer_Handler+0x1c>
    Timer1--;
 8002356:	4b18      	ldr	r3, [pc, #96]	@ (80023b8 <SDTimer_Handler+0x70>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <SDTimer_Handler+0x70>)
 8002362:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002364:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <SDTimer_Handler+0x74>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <SDTimer_Handler+0x34>
    Timer2--;
 800236e:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <SDTimer_Handler+0x74>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b2da      	uxtb	r2, r3
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <SDTimer_Handler+0x74>)
 800237a:	701a      	strb	r2, [r3, #0]
  if(Timer3 > 0)
 800237c:	4b10      	ldr	r3, [pc, #64]	@ (80023c0 <SDTimer_Handler+0x78>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <SDTimer_Handler+0x4c>
      Timer1--;
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <SDTimer_Handler+0x70>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <SDTimer_Handler+0x70>)
 8002392:	701a      	strb	r2, [r3, #0]

  if(Timer4 > 0)
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <SDTimer_Handler+0x7c>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <SDTimer_Handler+0x64>
      Timer2--;
 800239e:	4b07      	ldr	r3, [pc, #28]	@ (80023bc <SDTimer_Handler+0x74>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <SDTimer_Handler+0x74>)
 80023aa:	701a      	strb	r2, [r3, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20003ebe 	.word	0x20003ebe
 80023bc:	20003ebf 	.word	0x20003ebf
 80023c0:	20003ec0 	.word	0x20003ec0
 80023c4:	20003ec1 	.word	0x20003ec1

080023c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <NMI_Handler+0x4>

080023d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <MemManage_Handler+0x4>

080023e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <BusFault_Handler+0x4>

080023e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <UsageFault_Handler+0x4>

080023f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <SysTick_Handler+0x30>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <SysTick_Handler+0x30>)
 800242c:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <SysTick_Handler+0x30>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b09      	cmp	r3, #9
 8002436:	d904      	bls.n	8002442 <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 8002438:	4b04      	ldr	r3, [pc, #16]	@ (800244c <SysTick_Handler+0x30>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800243e:	f7ff ff83 	bl	8002348 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002442:	f000 f8dd 	bl	8002600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20003ebd 	.word	0x20003ebd

08002450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002454:	4802      	ldr	r0, [pc, #8]	@ (8002460 <USART1_IRQHandler+0x10>)
 8002456:	f003 f95b 	bl	8005710 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20001574 	.word	0x20001574

08002464 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002468:	4802      	ldr	r0, [pc, #8]	@ (8002474 <OTG_FS_IRQHandler+0x10>)
 800246a:	f000 fdba 	bl	8002fe2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20004600 	.word	0x20004600

08002478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002480:	4a14      	ldr	r2, [pc, #80]	@ (80024d4 <_sbrk+0x5c>)
 8002482:	4b15      	ldr	r3, [pc, #84]	@ (80024d8 <_sbrk+0x60>)
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <_sbrk+0x64>)
 8002496:	4a12      	ldr	r2, [pc, #72]	@ (80024e0 <_sbrk+0x68>)
 8002498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d207      	bcs.n	80024b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a8:	f00d fc10 	bl	800fccc <__errno>
 80024ac:	4603      	mov	r3, r0
 80024ae:	220c      	movs	r2, #12
 80024b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b2:	f04f 33ff 	mov.w	r3, #4294967295
 80024b6:	e009      	b.n	80024cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024be:	4b07      	ldr	r3, [pc, #28]	@ (80024dc <_sbrk+0x64>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4413      	add	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <_sbrk+0x64>)
 80024c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20030000 	.word	0x20030000
 80024d8:	00000400 	.word	0x00000400
 80024dc:	20003ec4 	.word	0x20003ec4
 80024e0:	20004eb8 	.word	0x20004eb8

080024e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002540 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800250c:	f7ff ffea 	bl	80024e4 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002510:	480c      	ldr	r0, [pc, #48]	@ (8002544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002512:	490d      	ldr	r1, [pc, #52]	@ (8002548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002514:	4a0d      	ldr	r2, [pc, #52]	@ (800254c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002518:	e002      	b.n	8002520 <LoopCopyDataInit>

0800251a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800251a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800251c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251e:	3304      	adds	r3, #4

08002520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002524:	d3f9      	bcc.n	800251a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002526:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002528:	4c0a      	ldr	r4, [pc, #40]	@ (8002554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800252c:	e001      	b.n	8002532 <LoopFillZerobss>

0800252e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002530:	3204      	adds	r2, #4

08002532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002534:	d3fb      	bcc.n	800252e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002536:	f00d fbcf 	bl	800fcd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7ff fb4b 	bl	8001bd4 <main>
  bx  lr    
 800253e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002540:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800254c:	08010f10 	.word	0x08010f10
  ldr r2, =_sbss
 8002550:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8002554:	20004eb4 	.word	0x20004eb4

08002558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC_IRQHandler>
	...

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002560:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_Init+0x40>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0d      	ldr	r2, [pc, #52]	@ (800259c <HAL_Init+0x40>)
 8002566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800256a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_Init+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a0a      	ldr	r2, [pc, #40]	@ (800259c <HAL_Init+0x40>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_Init+0x40>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a07      	ldr	r2, [pc, #28]	@ (800259c <HAL_Init+0x40>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002584:	2003      	movs	r0, #3
 8002586:	f000 f94f 	bl	8002828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800258a:	200f      	movs	r0, #15
 800258c:	f000 f808 	bl	80025a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002590:	f7ff fe1a 	bl	80021c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023c00 	.word	0x40023c00

080025a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <HAL_InitTick+0x54>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_InitTick+0x58>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f967 	bl	8002892 <HAL_SYSTICK_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e00e      	b.n	80025ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b0f      	cmp	r3, #15
 80025d2:	d80a      	bhi.n	80025ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d4:	2200      	movs	r2, #0
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	f04f 30ff 	mov.w	r0, #4294967295
 80025dc:	f000 f92f 	bl	800283e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e0:	4a06      	ldr	r2, [pc, #24]	@ (80025fc <HAL_InitTick+0x5c>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000004 	.word	0x20000004
 80025f8:	2000000c 	.word	0x2000000c
 80025fc:	20000008 	.word	0x20000008

08002600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002604:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <HAL_IncTick+0x20>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_IncTick+0x24>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4413      	add	r3, r2
 8002610:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <HAL_IncTick+0x24>)
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	2000000c 	.word	0x2000000c
 8002624:	20003ec8 	.word	0x20003ec8

08002628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return uwTick;
 800262c:	4b03      	ldr	r3, [pc, #12]	@ (800263c <HAL_GetTick+0x14>)
 800262e:	681b      	ldr	r3, [r3, #0]
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20003ec8 	.word	0x20003ec8

08002640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff ffee 	bl	8002628 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d005      	beq.n	8002666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265a:	4b0a      	ldr	r3, [pc, #40]	@ (8002684 <HAL_Delay+0x44>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002666:	bf00      	nop
 8002668:	f7ff ffde 	bl	8002628 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	429a      	cmp	r2, r3
 8002676:	d8f7      	bhi.n	8002668 <HAL_Delay+0x28>
  {
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000000c 	.word	0x2000000c

08002688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ba:	4a04      	ldr	r2, [pc, #16]	@ (80026cc <__NVIC_SetPriorityGrouping+0x44>)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60d3      	str	r3, [r2, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <__NVIC_GetPriorityGrouping+0x18>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0307 	and.w	r3, r3, #7
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000ed00 	.word	0xe000ed00

080026ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db0b      	blt.n	8002716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	4907      	ldr	r1, [pc, #28]	@ (8002724 <__NVIC_EnableIRQ+0x38>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	@ (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	@ (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	@ 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	@ 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027f4:	d301      	bcc.n	80027fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f6:	2301      	movs	r3, #1
 80027f8:	e00f      	b.n	800281a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002824 <SysTick_Config+0x40>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3b01      	subs	r3, #1
 8002800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002802:	210f      	movs	r1, #15
 8002804:	f04f 30ff 	mov.w	r0, #4294967295
 8002808:	f7ff ff8e 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800280c:	4b05      	ldr	r3, [pc, #20]	@ (8002824 <SysTick_Config+0x40>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002812:	4b04      	ldr	r3, [pc, #16]	@ (8002824 <SysTick_Config+0x40>)
 8002814:	2207      	movs	r2, #7
 8002816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	e000e010 	.word	0xe000e010

08002828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff ff29 	bl	8002688 <__NVIC_SetPriorityGrouping>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002850:	f7ff ff3e 	bl	80026d0 <__NVIC_GetPriorityGrouping>
 8002854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	6978      	ldr	r0, [r7, #20]
 800285c:	f7ff ff8e 	bl	800277c <NVIC_EncodePriority>
 8002860:	4602      	mov	r2, r0
 8002862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff5d 	bl	8002728 <__NVIC_SetPriority>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff31 	bl	80026ec <__NVIC_EnableIRQ>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ffa2 	bl	80027e4 <SysTick_Config>
 80028a0:	4603      	mov	r3, r0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b084      	sub	sp, #16
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028b8:	f7ff feb6 	bl	8002628 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d008      	beq.n	80028dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2280      	movs	r2, #128	@ 0x80
 80028ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e052      	b.n	8002982 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0216 	bic.w	r2, r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <HAL_DMA_Abort+0x62>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002908:	2b00      	cmp	r3, #0
 800290a:	d007      	beq.n	800291c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0208 	bic.w	r2, r2, #8
 800291a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800292c:	e013      	b.n	8002956 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800292e:	f7ff fe7b 	bl	8002628 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b05      	cmp	r3, #5
 800293a:	d90c      	bls.n	8002956 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2220      	movs	r2, #32
 8002940:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e015      	b.n	8002982 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e4      	bne.n	800292e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002968:	223f      	movs	r2, #63	@ 0x3f
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d004      	beq.n	80029a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2280      	movs	r2, #128	@ 0x80
 80029a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e00c      	b.n	80029c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2205      	movs	r2, #5
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0201 	bic.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b089      	sub	sp, #36	@ 0x24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e177      	b.n	8002cdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029ec:	2201      	movs	r2, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	f040 8166 	bne.w	8002cd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d005      	beq.n	8002a22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d130      	bne.n	8002a84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 0201 	and.w	r2, r3, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d017      	beq.n	8002ac0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d123      	bne.n	8002b14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80c0 	beq.w	8002cd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b66      	ldr	r3, [pc, #408]	@ (8002cf4 <HAL_GPIO_Init+0x324>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <HAL_GPIO_Init+0x324>)
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b66:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <HAL_GPIO_Init+0x324>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b72:	4a61      	ldr	r2, [pc, #388]	@ (8002cf8 <HAL_GPIO_Init+0x328>)
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	220f      	movs	r2, #15
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a58      	ldr	r2, [pc, #352]	@ (8002cfc <HAL_GPIO_Init+0x32c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d037      	beq.n	8002c0e <HAL_GPIO_Init+0x23e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a57      	ldr	r2, [pc, #348]	@ (8002d00 <HAL_GPIO_Init+0x330>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d031      	beq.n	8002c0a <HAL_GPIO_Init+0x23a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a56      	ldr	r2, [pc, #344]	@ (8002d04 <HAL_GPIO_Init+0x334>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <HAL_GPIO_Init+0x236>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a55      	ldr	r2, [pc, #340]	@ (8002d08 <HAL_GPIO_Init+0x338>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d025      	beq.n	8002c02 <HAL_GPIO_Init+0x232>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a54      	ldr	r2, [pc, #336]	@ (8002d0c <HAL_GPIO_Init+0x33c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d01f      	beq.n	8002bfe <HAL_GPIO_Init+0x22e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a53      	ldr	r2, [pc, #332]	@ (8002d10 <HAL_GPIO_Init+0x340>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d019      	beq.n	8002bfa <HAL_GPIO_Init+0x22a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	@ (8002d14 <HAL_GPIO_Init+0x344>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <HAL_GPIO_Init+0x226>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a51      	ldr	r2, [pc, #324]	@ (8002d18 <HAL_GPIO_Init+0x348>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00d      	beq.n	8002bf2 <HAL_GPIO_Init+0x222>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a50      	ldr	r2, [pc, #320]	@ (8002d1c <HAL_GPIO_Init+0x34c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <HAL_GPIO_Init+0x21e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4f      	ldr	r2, [pc, #316]	@ (8002d20 <HAL_GPIO_Init+0x350>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <HAL_GPIO_Init+0x21a>
 8002be6:	2309      	movs	r3, #9
 8002be8:	e012      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bea:	230a      	movs	r3, #10
 8002bec:	e010      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bee:	2308      	movs	r3, #8
 8002bf0:	e00e      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bf2:	2307      	movs	r3, #7
 8002bf4:	e00c      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e00a      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bfa:	2305      	movs	r3, #5
 8002bfc:	e008      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x240>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c20:	4935      	ldr	r1, [pc, #212]	@ (8002cf8 <HAL_GPIO_Init+0x328>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a34      	ldr	r2, [pc, #208]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b32      	ldr	r3, [pc, #200]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a29      	ldr	r2, [pc, #164]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c82:	4b28      	ldr	r3, [pc, #160]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <HAL_GPIO_Init+0x354>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	f67f ae84 	bls.w	80029ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3724      	adds	r7, #36	@ 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40021400 	.word	0x40021400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	40021c00 	.word	0x40021c00
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40022400 	.word	0x40022400
 8002d24:	40013c00 	.word	0x40013c00

08002d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]
 8002d34:	4613      	mov	r3, r2
 8002d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d38:	787b      	ldrb	r3, [r7, #1]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3e:	887a      	ldrh	r2, [r7, #2]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d44:	e003      	b.n	8002d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	041a      	lsls	r2, r3, #16
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	619a      	str	r2, [r3, #24]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af02      	add	r7, sp, #8
 8002d60:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e101      	b.n	8002f70 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f00c fc00 	bl	800f58c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2203      	movs	r2, #3
 8002d90:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d9a:	d102      	bne.n	8002da2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fd05 	bl	80067b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7c1a      	ldrb	r2, [r3, #16]
 8002db4:	f88d 2000 	strb.w	r2, [sp]
 8002db8:	3304      	adds	r3, #4
 8002dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dbc:	f003 fbe4 	bl	8006588 <USB_CoreInit>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0ce      	b.n	8002f70 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fcfd 	bl	80067d8 <USB_SetCurrentMode>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0bf      	b.n	8002f70 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e04a      	b.n	8002e8c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3315      	adds	r3, #21
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e0a:	7bfa      	ldrb	r2, [r7, #15]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3314      	adds	r3, #20
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	b298      	uxth	r0, r3
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	332e      	adds	r3, #46	@ 0x2e
 8002e32:	4602      	mov	r2, r0
 8002e34:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e36:	7bfa      	ldrb	r2, [r7, #15]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3318      	adds	r3, #24
 8002e46:	2200      	movs	r2, #0
 8002e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	331c      	adds	r3, #28
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3320      	adds	r3, #32
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3324      	adds	r3, #36	@ 0x24
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	791b      	ldrb	r3, [r3, #4]
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3af      	bcc.n	8002df6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
 8002e9a:	e044      	b.n	8002f26 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f0a:	7bfa      	ldrb	r2, [r7, #15]
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	3301      	adds	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	791b      	ldrb	r3, [r3, #4]
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3b5      	bcc.n	8002e9c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7c1a      	ldrb	r2, [r3, #16]
 8002f38:	f88d 2000 	strb.w	r2, [sp]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f40:	f003 fc96 	bl	8006870 <USB_DevInit>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00c      	b.n	8002f70 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fce0 	bl	800792e <USB_DevDisconnect>

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_PCD_Start+0x1c>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e022      	b.n	8002fda <HAL_PCD_Start+0x62>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d009      	beq.n	8002fbc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f003 fbe7 	bl	8006794 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 fc8e 	bl	80078ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fe2:	b590      	push	{r4, r7, lr}
 8002fe4:	b08d      	sub	sp, #52	@ 0x34
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f004 fd4c 	bl	8007a96 <USB_GetMode>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	f040 848c 	bne.w	800391e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fcb0 	bl	8007970 <USB_ReadInterrupts>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 8482 	beq.w	800391c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 fc9d 	bl	8007970 <USB_ReadInterrupts>
 8003036:	4603      	mov	r3, r0
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b02      	cmp	r3, #2
 800303e:	d107      	bne.n	8003050 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f002 0202 	and.w	r2, r2, #2
 800304e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fc8b 	bl	8007970 <USB_ReadInterrupts>
 800305a:	4603      	mov	r3, r0
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b10      	cmp	r3, #16
 8003062:	d161      	bne.n	8003128 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0210 	bic.w	r2, r2, #16
 8003072:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	3304      	adds	r3, #4
 8003092:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	0c5b      	lsrs	r3, r3, #17
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	2b02      	cmp	r3, #2
 800309e:	d124      	bne.n	80030ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d035      	beq.n	8003118 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6a38      	ldr	r0, [r7, #32]
 80030c0:	f004 fac2 	bl	8007648 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030d0:	441a      	add	r2, r3
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030e2:	441a      	add	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	e016      	b.n	8003118 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	0c5b      	lsrs	r3, r3, #17
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	2b06      	cmp	r3, #6
 80030f4:	d110      	bne.n	8003118 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030fc:	2208      	movs	r2, #8
 80030fe:	4619      	mov	r1, r3
 8003100:	6a38      	ldr	r0, [r7, #32]
 8003102:	f004 faa1 	bl	8007648 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003112:	441a      	add	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699a      	ldr	r2, [r3, #24]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0210 	orr.w	r2, r2, #16
 8003126:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fc1f 	bl	8007970 <USB_ReadInterrupts>
 8003132:	4603      	mov	r3, r0
 8003134:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003138:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800313c:	f040 80a7 	bne.w	800328e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f004 fc24 	bl	8007996 <USB_ReadDevAllOutEpInterrupt>
 800314e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003150:	e099      	b.n	8003286 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 808e 	beq.w	800327a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f004 fc48 	bl	80079fe <USB_ReadDevOutEPInterrupt>
 800316e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	2301      	movs	r3, #1
 800318a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800318c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fed0 	bl	8003f34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031aa:	461a      	mov	r2, r3
 80031ac:	2308      	movs	r3, #8
 80031ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 ffa6 	bl	8004104 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	2310      	movs	r3, #16
 80031d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d030      	beq.n	8003240 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e6:	2b80      	cmp	r3, #128	@ 0x80
 80031e8:	d109      	bne.n	80031fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	3304      	adds	r3, #4
 8003212:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	78db      	ldrb	r3, [r3, #3]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d108      	bne.n	800322e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2200      	movs	r2, #0
 8003220:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f00c fab5 	bl	800f798 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800323a:	461a      	mov	r2, r3
 800323c:	2302      	movs	r3, #2
 800323e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d008      	beq.n	800325c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	2320      	movs	r3, #32
 800325a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003272:	461a      	mov	r2, r3
 8003274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003278:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	3301      	adds	r3, #1
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003288:	2b00      	cmp	r3, #0
 800328a:	f47f af62 	bne.w	8003152 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fb6c 	bl	8007970 <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800329e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032a2:	f040 80db 	bne.w	800345c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 fb8d 	bl	80079ca <USB_ReadDevAllInEpInterrupt>
 80032b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80032b6:	e0cd      	b.n	8003454 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80c2 	beq.w	8003448 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fbb3 	bl	8007a3a <USB_ReadDevInEPInterrupt>
 80032d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d057      	beq.n	8003390 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	2201      	movs	r2, #1
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69f9      	ldr	r1, [r7, #28]
 80032fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003300:	4013      	ands	r3, r2
 8003302:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003310:	461a      	mov	r2, r3
 8003312:	2301      	movs	r3, #1
 8003314:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	799b      	ldrb	r3, [r3, #6]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d132      	bne.n	8003384 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3320      	adds	r3, #32
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003334:	4613      	mov	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4403      	add	r3, r0
 800333e:	331c      	adds	r3, #28
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4419      	add	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4403      	add	r3, r0
 8003352:	3320      	adds	r3, #32
 8003354:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	2b00      	cmp	r3, #0
 800335a:	d113      	bne.n	8003384 <HAL_PCD_IRQHandler+0x3a2>
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003360:	4613      	mov	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4413      	add	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	3324      	adds	r3, #36	@ 0x24
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d108      	bne.n	8003384 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800337c:	461a      	mov	r2, r3
 800337e:	2101      	movs	r1, #1
 8003380:	f004 fbba 	bl	8007af8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4619      	mov	r1, r3
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f00c f97f 	bl	800f68e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a6:	461a      	mov	r2, r3
 80033a8:	2308      	movs	r3, #8
 80033aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	015a      	lsls	r2, r3, #5
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	4413      	add	r3, r2
 80033be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033c2:	461a      	mov	r2, r3
 80033c4:	2310      	movs	r3, #16
 80033c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d008      	beq.n	80033e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033de:	461a      	mov	r2, r3
 80033e0:	2340      	movs	r3, #64	@ 0x40
 80033e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d023      	beq.n	8003436 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033f0:	6a38      	ldr	r0, [r7, #32]
 80033f2:	f003 fba1 	bl	8006b38 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f8:	4613      	mov	r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	3310      	adds	r3, #16
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	3304      	adds	r3, #4
 8003408:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	78db      	ldrb	r3, [r3, #3]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d108      	bne.n	8003424 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341a:	b2db      	uxtb	r3, r3
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f00c f9cc 	bl	800f7bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003430:	461a      	mov	r2, r3
 8003432:	2302      	movs	r3, #2
 8003434:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fcea 	bl	8003e1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	3301      	adds	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f af2e 	bne.w	80032b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f004 fa85 	bl	8007970 <USB_ReadInterrupts>
 8003466:	4603      	mov	r3, r0
 8003468:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800346c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003470:	d122      	bne.n	80034b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800348c:	2b01      	cmp	r3, #1
 800348e:	d108      	bne.n	80034a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003498:	2100      	movs	r1, #0
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fed0 	bl	8004240 <HAL_PCDEx_LPM_Callback>
 80034a0:	e002      	b.n	80034a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f00c f96a 	bl	800f77c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80034b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fa57 	bl	8007970 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034cc:	d112      	bne.n	80034f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d102      	bne.n	80034e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f00c f926 	bl	800f730 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80034f2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 fa39 	bl	8007970 <USB_ReadInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003508:	f040 80b7 	bne.w	800367a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2110      	movs	r1, #16
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fb06 	bl	8006b38 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352c:	2300      	movs	r3, #0
 800352e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003530:	e046      	b.n	80035c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800353e:	461a      	mov	r2, r3
 8003540:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003544:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003556:	0151      	lsls	r1, r2, #5
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	440a      	add	r2, r1
 800355c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003560:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003564:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003578:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800358a:	0151      	lsls	r1, r2, #5
 800358c:	69fa      	ldr	r2, [r7, #28]
 800358e:	440a      	add	r2, r1
 8003590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003594:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003598:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035aa:	0151      	lsls	r1, r2, #5
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	440a      	add	r2, r1
 80035b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035bc:	3301      	adds	r3, #1
 80035be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	791b      	ldrb	r3, [r3, #4]
 80035c4:	461a      	mov	r2, r3
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d3b2      	bcc.n	8003532 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035da:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80035de:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7bdb      	ldrb	r3, [r3, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d016      	beq.n	8003616 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035f8:	f043 030b 	orr.w	r3, r3, #11
 80035fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800360e:	f043 030b 	orr.w	r3, r3, #11
 8003612:	6453      	str	r3, [r2, #68]	@ 0x44
 8003614:	e015      	b.n	8003642 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003624:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003628:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800362c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	69fa      	ldr	r2, [r7, #28]
 8003638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800363c:	f043 030b 	orr.w	r3, r3, #11
 8003640:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003650:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003654:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003664:	461a      	mov	r2, r3
 8003666:	f004 fa47 	bl	8007af8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695a      	ldr	r2, [r3, #20]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f004 f976 	bl	8007970 <USB_ReadInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800368e:	d123      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f004 fa0c 	bl	8007ab2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fac3 	bl	8006c2a <USB_GetDevSpeed>
 80036a4:	4603      	mov	r3, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681c      	ldr	r4, [r3, #0]
 80036b0:	f001 fa36 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 80036b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036ba:	461a      	mov	r2, r3
 80036bc:	4620      	mov	r0, r4
 80036be:	f002 ffc7 	bl	8006650 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f00c f80b 	bl	800f6de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80036d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 f947 	bl	8007970 <USB_ReadInterrupts>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d10a      	bne.n	8003702 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f00b ffe8 	bl	800f6c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f002 0208 	and.w	r2, r2, #8
 8003700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f004 f932 	bl	8007970 <USB_ReadInterrupts>
 800370c:	4603      	mov	r3, r0
 800370e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003712:	2b80      	cmp	r3, #128	@ 0x80
 8003714:	d123      	bne.n	800375e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003722:	2301      	movs	r3, #1
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
 8003726:	e014      	b.n	8003752 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d105      	bne.n	800374c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	b2db      	uxtb	r3, r3
 8003744:	4619      	mov	r1, r3
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 fb0a 	bl	8003d60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	3301      	adds	r3, #1
 8003750:	627b      	str	r3, [r7, #36]	@ 0x24
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	791b      	ldrb	r3, [r3, #4]
 8003756:	461a      	mov	r2, r3
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	4293      	cmp	r3, r2
 800375c:	d3e4      	bcc.n	8003728 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f004 f904 	bl	8007970 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800376e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003772:	d13c      	bne.n	80037ee <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003774:	2301      	movs	r3, #1
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
 8003778:	e02b      	b.n	80037d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	3318      	adds	r3, #24
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d115      	bne.n	80037cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	da12      	bge.n	80037cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	3317      	adds	r3, #23
 80037b6:	2201      	movs	r2, #1
 80037b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 faca 	bl	8003d60 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	3301      	adds	r3, #1
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	791b      	ldrb	r3, [r3, #4]
 80037d6:	461a      	mov	r2, r3
 80037d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037da:	4293      	cmp	r3, r2
 80037dc:	d3cd      	bcc.n	800377a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80037ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f004 f8bc 	bl	8007970 <USB_ReadInterrupts>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003802:	d156      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003804:	2301      	movs	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	@ 0x24
 8003808:	e045      	b.n	8003896 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d12e      	bne.n	8003890 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003832:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003834:	2b00      	cmp	r3, #0
 8003836:	da2b      	bge.n	8003890 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	0c1a      	lsrs	r2, r3, #16
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003842:	4053      	eors	r3, r2
 8003844:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003848:	2b00      	cmp	r3, #0
 800384a:	d121      	bne.n	8003890 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10a      	bne.n	8003890 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003888:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800388c:	6053      	str	r3, [r2, #4]
            break;
 800388e:	e008      	b.n	80038a2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003892:	3301      	adds	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	@ 0x24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	791b      	ldrb	r3, [r3, #4]
 800389a:	461a      	mov	r2, r3
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	4293      	cmp	r3, r2
 80038a0:	d3b3      	bcc.n	800380a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80038b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 f85a 	bl	8007970 <USB_ReadInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038c6:	d10a      	bne.n	80038de <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f00b ff89 	bl	800f7e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80038dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f004 f844 	bl	8007970 <USB_ReadInterrupts>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d115      	bne.n	800391e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f00b ff79 	bl	800f7fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	e000      	b.n	800391e <HAL_PCD_IRQHandler+0x93c>
      return;
 800391c:	bf00      	nop
    }
  }
}
 800391e:	3734      	adds	r7, #52	@ 0x34
 8003920:	46bd      	mov	sp, r7
 8003922:	bd90      	pop	{r4, r7, pc}

08003924 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_PCD_SetAddress+0x1a>
 800393a:	2302      	movs	r3, #2
 800393c:	e012      	b.n	8003964 <HAL_PCD_SetAddress+0x40>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f003 ffa3 	bl	80078a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	4608      	mov	r0, r1
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	4603      	mov	r3, r0
 800397c:	70fb      	strb	r3, [r7, #3]
 800397e:	460b      	mov	r3, r1
 8003980:	803b      	strh	r3, [r7, #0]
 8003982:	4613      	mov	r3, r2
 8003984:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800398a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	da0f      	bge.n	80039b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	3310      	adds	r3, #16
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	705a      	strb	r2, [r3, #1]
 80039b0:	e00f      	b.n	80039d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b2:	78fb      	ldrb	r3, [r7, #3]
 80039b4:	f003 020f 	and.w	r2, r3, #15
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4413      	add	r3, r2
 80039c8:	3304      	adds	r3, #4
 80039ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	f003 030f 	and.w	r3, r3, #15
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80039de:	883b      	ldrh	r3, [r7, #0]
 80039e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	78ba      	ldrb	r2, [r7, #2]
 80039ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a00:	78bb      	ldrb	r3, [r7, #2]
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d102      	bne.n	8003a0c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_PCD_EP_Open+0xae>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e00e      	b.n	8003a38 <HAL_PCD_EP_Open+0xcc>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68f9      	ldr	r1, [r7, #12]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 f923 	bl	8006c74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a36:	7afb      	ldrb	r3, [r7, #11]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da0f      	bge.n	8003a74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 020f 	and.w	r2, r3, #15
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	3310      	adds	r3, #16
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3304      	adds	r3, #4
 8003a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	705a      	strb	r2, [r3, #1]
 8003a72:	e00f      	b.n	8003a94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 020f 	and.w	r2, r3, #15
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_PCD_EP_Close+0x6e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e00e      	b.n	8003acc <HAL_PCD_EP_Close+0x8c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f003 f961 	bl	8006d84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	4413      	add	r3, r2
 8003afa:	3304      	adds	r3, #4
 8003afc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2200      	movs	r2, #0
 8003b14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b16:	7afb      	ldrb	r3, [r7, #11]
 8003b18:	f003 030f 	and.w	r3, r3, #15
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	799b      	ldrb	r3, [r3, #6]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d102      	bne.n	8003b30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	799b      	ldrb	r3, [r3, #6]
 8003b38:	461a      	mov	r2, r3
 8003b3a:	6979      	ldr	r1, [r7, #20]
 8003b3c:	f003 f9fe 	bl	8006f3c <USB_EPStartXfer>

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	460b      	mov	r3, r1
 8003b54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003b6c:	681b      	ldr	r3, [r3, #0]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
 8003b86:	460b      	mov	r3, r1
 8003b88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	3310      	adds	r3, #16
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bba:	7afb      	ldrb	r3, [r7, #11]
 8003bbc:	f003 030f 	and.w	r3, r3, #15
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	799b      	ldrb	r3, [r3, #6]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d102      	bne.n	8003bd4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	799b      	ldrb	r3, [r3, #6]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6979      	ldr	r1, [r7, #20]
 8003be0:	f003 f9ac 	bl	8006f3c <USB_EPStartXfer>

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	7912      	ldrb	r2, [r2, #4]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d901      	bls.n	8003c0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e04f      	b.n	8003cac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	da0f      	bge.n	8003c34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	3310      	adds	r3, #16
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	705a      	strb	r2, [r3, #1]
 8003c32:	e00d      	b.n	8003c50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	4613      	mov	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	3304      	adds	r3, #4
 8003c48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_PCD_EP_SetStall+0x82>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e01d      	b.n	8003cac <HAL_PCD_EP_SetStall+0xbe>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68f9      	ldr	r1, [r7, #12]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f003 fd3a 	bl	80076f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	7999      	ldrb	r1, [r3, #6]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	f003 ff2b 	bl	8007af8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	7912      	ldrb	r2, [r2, #4]
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e042      	b.n	8003d58 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da0f      	bge.n	8003cfa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3310      	adds	r3, #16
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	705a      	strb	r2, [r3, #1]
 8003cf8:	e00f      	b.n	8003d1a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_PCD_EP_ClrStall+0x86>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e00e      	b.n	8003d58 <HAL_PCD_EP_ClrStall+0xa4>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 fd43 	bl	80077d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da0c      	bge.n	8003d8e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	f003 020f 	and.w	r2, r3, #15
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	3310      	adds	r3, #16
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e00c      	b.n	8003da8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 020f 	and.w	r2, r3, #15
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4413      	add	r3, r2
 8003da4:	3304      	adds	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fb62 	bl	8007478 <USB_EPStopXfer>
 8003db4:	4603      	mov	r3, r0
 8003db6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003db8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_PCD_EP_Flush+0x1a>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e01b      	b.n	8003e14 <HAL_PCD_EP_Flush+0x52>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da09      	bge.n	8003e00 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f002 fe9d 	bl	8006b38 <USB_FlushTxFifo>
 8003dfe:	e004      	b.n	8003e0a <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 fec9 	bl	8006b9c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	@ 0x28
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3310      	adds	r3, #16
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d901      	bls.n	8003e54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e06b      	b.n	8003f2c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d902      	bls.n	8003e70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3303      	adds	r3, #3
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e78:	e02a      	b.n	8003ed0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	69fa      	ldr	r2, [r7, #28]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d902      	bls.n	8003e96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3303      	adds	r3, #3
 8003e9a:	089b      	lsrs	r3, r3, #2
 8003e9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68d9      	ldr	r1, [r3, #12]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f003 fb8a 	bl	80075cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	441a      	add	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	441a      	add	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d809      	bhi.n	8003efa <PCD_WriteEmptyTxFifo+0xde>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d203      	bcs.n	8003efa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1bf      	bne.n	8003e7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d811      	bhi.n	8003f2a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	6939      	ldr	r1, [r7, #16]
 8003f22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f26:	4013      	ands	r3, r2
 8003f28:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	333c      	adds	r3, #60	@ 0x3c
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	799b      	ldrb	r3, [r3, #6]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d17b      	bne.n	8004062 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d015      	beq.n	8003fa0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4a61      	ldr	r2, [pc, #388]	@ (80040fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	f240 80b9 	bls.w	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80b3 	beq.w	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f96:	461a      	mov	r2, r3
 8003f98:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f9c:	6093      	str	r3, [r2, #8]
 8003f9e:	e0a7      	b.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2320      	movs	r3, #32
 8003fba:	6093      	str	r3, [r2, #8]
 8003fbc:	e098      	b.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f040 8093 	bne.w	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80040fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d90f      	bls.n	8003ff2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00a      	beq.n	8003ff2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fee:	6093      	str	r3, [r2, #8]
 8003ff0:	e07e      	b.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	3304      	adds	r3, #4
 8004006:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1a      	ldr	r2, [r3, #32]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	0159      	lsls	r1, r3, #5
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	440b      	add	r3, r1
 8004014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d114      	bne.n	8004054 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6818      	ldr	r0, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800403c:	461a      	mov	r2, r3
 800403e:	2101      	movs	r1, #1
 8004040:	f003 fd5a 	bl	8007af8 <USB_EP0_OutStart>
 8004044:	e006      	b.n	8004054 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f00b fafc 	bl	800f658 <HAL_PCD_DataOutStageCallback>
 8004060:	e046      	b.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	4a26      	ldr	r2, [pc, #152]	@ (8004100 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d124      	bne.n	80040b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004080:	461a      	mov	r2, r3
 8004082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004086:	6093      	str	r3, [r2, #8]
 8004088:	e032      	b.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	4413      	add	r3, r2
 800409c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a0:	461a      	mov	r2, r3
 80040a2:	2320      	movs	r3, #32
 80040a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4619      	mov	r1, r3
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f00b fad3 	bl	800f658 <HAL_PCD_DataOutStageCallback>
 80040b2:	e01d      	b.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d114      	bne.n	80040e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d108      	bne.n	80040e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040dc:	461a      	mov	r2, r3
 80040de:	2100      	movs	r1, #0
 80040e0:	f003 fd0a 	bl	8007af8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f00b fab4 	bl	800f658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	4f54300a 	.word	0x4f54300a
 8004100:	4f54310a 	.word	0x4f54310a

08004104 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	333c      	adds	r3, #60	@ 0x3c
 800411c:	3304      	adds	r3, #4
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4a15      	ldr	r2, [pc, #84]	@ (800418c <PCD_EP_OutSetupPacket_int+0x88>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d90e      	bls.n	8004158 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004140:	2b00      	cmp	r3, #0
 8004142:	d009      	beq.n	8004158 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004150:	461a      	mov	r2, r3
 8004152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004156:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f00b fa6b 	bl	800f634 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <PCD_EP_OutSetupPacket_int+0x88>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d90c      	bls.n	8004180 <PCD_EP_OutSetupPacket_int+0x7c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	799b      	ldrb	r3, [r3, #6]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d108      	bne.n	8004180 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004178:	461a      	mov	r2, r3
 800417a:	2101      	movs	r1, #1
 800417c:	f003 fcbc 	bl	8007af8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	4f54300a 	.word	0x4f54300a

08004190 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
 800419c:	4613      	mov	r3, r2
 800419e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d107      	bne.n	80041be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041ae:	883b      	ldrh	r3, [r7, #0]
 80041b0:	0419      	lsls	r1, r3, #16
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80041bc:	e028      	b.n	8004210 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e00d      	b.n	80041ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	7bfb      	ldrb	r3, [r7, #15]
 80041d8:	3340      	adds	r3, #64	@ 0x40
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4413      	add	r3, r2
 80041e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041e8:	7bfb      	ldrb	r3, [r7, #15]
 80041ea:	3301      	adds	r3, #1
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	7bfa      	ldrb	r2, [r7, #15]
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d3ec      	bcc.n	80041d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041f8:	883b      	ldrh	r3, [r7, #0]
 80041fa:	0418      	lsls	r0, r3, #16
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6819      	ldr	r1, [r3, #0]
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	3b01      	subs	r3, #1
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	4302      	orrs	r2, r0
 8004208:	3340      	adds	r3, #64	@ 0x40
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	460b      	mov	r3, r1
 8004228:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	887a      	ldrh	r2, [r7, #2]
 8004230:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e267      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d075      	beq.n	8004362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004276:	4b88      	ldr	r3, [pc, #544]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b04      	cmp	r3, #4
 8004280:	d00c      	beq.n	800429c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004282:	4b85      	ldr	r3, [pc, #532]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800428a:	2b08      	cmp	r3, #8
 800428c:	d112      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428e:	4b82      	ldr	r3, [pc, #520]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800429a:	d10b      	bne.n	80042b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	4b7e      	ldr	r3, [pc, #504]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d05b      	beq.n	8004360 <HAL_RCC_OscConfig+0x108>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d157      	bne.n	8004360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e242      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042bc:	d106      	bne.n	80042cc <HAL_RCC_OscConfig+0x74>
 80042be:	4b76      	ldr	r3, [pc, #472]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a75      	ldr	r2, [pc, #468]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	e01d      	b.n	8004308 <HAL_RCC_OscConfig+0xb0>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x98>
 80042d6:	4b70      	ldr	r3, [pc, #448]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a6f      	ldr	r2, [pc, #444]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e00b      	b.n	8004308 <HAL_RCC_OscConfig+0xb0>
 80042f0:	4b69      	ldr	r3, [pc, #420]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a68      	ldr	r2, [pc, #416]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b66      	ldr	r3, [pc, #408]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a65      	ldr	r2, [pc, #404]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fe f98a 	bl	8002628 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004318:	f7fe f986 	bl	8002628 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	@ 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e207      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432a:	4b5b      	ldr	r3, [pc, #364]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0xc0>
 8004336:	e014      	b.n	8004362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe f976 	bl	8002628 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004340:	f7fe f972 	bl	8002628 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b64      	cmp	r3, #100	@ 0x64
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e1f3      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004352:	4b51      	ldr	r3, [pc, #324]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0xe8>
 800435e:	e000      	b.n	8004362 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d063      	beq.n	8004436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800436e:	4b4a      	ldr	r3, [pc, #296]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00b      	beq.n	8004392 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800437a:	4b47      	ldr	r3, [pc, #284]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004382:	2b08      	cmp	r3, #8
 8004384:	d11c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	4b44      	ldr	r3, [pc, #272]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d116      	bne.n	80043c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004392:	4b41      	ldr	r3, [pc, #260]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d005      	beq.n	80043aa <HAL_RCC_OscConfig+0x152>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d001      	beq.n	80043aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e1c7      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	4937      	ldr	r1, [pc, #220]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	e03a      	b.n	8004436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d020      	beq.n	800440a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c8:	4b34      	ldr	r3, [pc, #208]	@ (800449c <HAL_RCC_OscConfig+0x244>)
 80043ca:	2201      	movs	r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ce:	f7fe f92b 	bl	8002628 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d6:	f7fe f927 	bl	8002628 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e1a8      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f4:	4b28      	ldr	r3, [pc, #160]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4925      	ldr	r1, [pc, #148]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]
 8004408:	e015      	b.n	8004436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440a:	4b24      	ldr	r3, [pc, #144]	@ (800449c <HAL_RCC_OscConfig+0x244>)
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fe f90a 	bl	8002628 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004418:	f7fe f906 	bl	8002628 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e187      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442a:	4b1b      	ldr	r3, [pc, #108]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d036      	beq.n	80044b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d016      	beq.n	8004478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800444a:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <HAL_RCC_OscConfig+0x248>)
 800444c:	2201      	movs	r2, #1
 800444e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fe f8ea 	bl	8002628 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004458:	f7fe f8e6 	bl	8002628 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e167      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446a:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <HAL_RCC_OscConfig+0x240>)
 800446c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0x200>
 8004476:	e01b      	b.n	80044b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004478:	4b09      	ldr	r3, [pc, #36]	@ (80044a0 <HAL_RCC_OscConfig+0x248>)
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800447e:	f7fe f8d3 	bl	8002628 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004484:	e00e      	b.n	80044a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004486:	f7fe f8cf 	bl	8002628 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d907      	bls.n	80044a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e150      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
 8004498:	40023800 	.word	0x40023800
 800449c:	42470000 	.word	0x42470000
 80044a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b88      	ldr	r3, [pc, #544]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80044a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1ea      	bne.n	8004486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8097 	beq.w	80045ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044be:	2300      	movs	r3, #0
 80044c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044c2:	4b81      	ldr	r3, [pc, #516]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10f      	bne.n	80044ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	4b7d      	ldr	r3, [pc, #500]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	4a7c      	ldr	r2, [pc, #496]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044de:	4b7a      	ldr	r3, [pc, #488]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ee:	4b77      	ldr	r3, [pc, #476]	@ (80046cc <HAL_RCC_OscConfig+0x474>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d118      	bne.n	800452c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044fa:	4b74      	ldr	r3, [pc, #464]	@ (80046cc <HAL_RCC_OscConfig+0x474>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a73      	ldr	r2, [pc, #460]	@ (80046cc <HAL_RCC_OscConfig+0x474>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004506:	f7fe f88f 	bl	8002628 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	e008      	b.n	8004520 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450e:	f7fe f88b 	bl	8002628 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e10c      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004520:	4b6a      	ldr	r3, [pc, #424]	@ (80046cc <HAL_RCC_OscConfig+0x474>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0f0      	beq.n	800450e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x2ea>
 8004534:	4b64      	ldr	r3, [pc, #400]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004538:	4a63      	ldr	r2, [pc, #396]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004540:	e01c      	b.n	800457c <HAL_RCC_OscConfig+0x324>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b05      	cmp	r3, #5
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x30c>
 800454a:	4b5f      	ldr	r3, [pc, #380]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454e:	4a5e      	ldr	r2, [pc, #376]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	6713      	str	r3, [r2, #112]	@ 0x70
 8004556:	4b5c      	ldr	r3, [pc, #368]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	4a5b      	ldr	r2, [pc, #364]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6713      	str	r3, [r2, #112]	@ 0x70
 8004562:	e00b      	b.n	800457c <HAL_RCC_OscConfig+0x324>
 8004564:	4b58      	ldr	r3, [pc, #352]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004568:	4a57      	ldr	r2, [pc, #348]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 800456a:	f023 0301 	bic.w	r3, r3, #1
 800456e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004570:	4b55      	ldr	r3, [pc, #340]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004574:	4a54      	ldr	r2, [pc, #336]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 8004576:	f023 0304 	bic.w	r3, r3, #4
 800457a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004584:	f7fe f850 	bl	8002628 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800458c:	f7fe f84c 	bl	8002628 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e0cb      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a2:	4b49      	ldr	r3, [pc, #292]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0ee      	beq.n	800458c <HAL_RCC_OscConfig+0x334>
 80045ae:	e014      	b.n	80045da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b0:	f7fe f83a 	bl	8002628 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b8:	f7fe f836 	bl	8002628 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e0b5      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ce:	4b3e      	ldr	r3, [pc, #248]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1ee      	bne.n	80045b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045da:	7dfb      	ldrb	r3, [r7, #23]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d105      	bne.n	80045ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e0:	4b39      	ldr	r3, [pc, #228]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	4a38      	ldr	r2, [pc, #224]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80045e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80a1 	beq.w	8004738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045f6:	4b34      	ldr	r3, [pc, #208]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d05c      	beq.n	80046bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	2b02      	cmp	r3, #2
 8004608:	d141      	bne.n	800468e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	4b31      	ldr	r3, [pc, #196]	@ (80046d0 <HAL_RCC_OscConfig+0x478>)
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fe f80a 	bl	8002628 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fe f806 	bl	8002628 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e087      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462a:	4b27      	ldr	r3, [pc, #156]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f0      	bne.n	8004618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	3b01      	subs	r3, #1
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	491b      	ldr	r1, [pc, #108]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004660:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x478>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fd ffdf 	bl	8002628 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466e:	f7fd ffdb 	bl	8002628 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e05c      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x416>
 800468c:	e054      	b.n	8004738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <HAL_RCC_OscConfig+0x478>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fd ffc8 	bl	8002628 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fd ffc4 	bl	8002628 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e045      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ae:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <HAL_RCC_OscConfig+0x470>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x444>
 80046ba:	e03d      	b.n	8004738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d107      	bne.n	80046d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e038      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40007000 	.word	0x40007000
 80046d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004744 <HAL_RCC_OscConfig+0x4ec>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d028      	beq.n	8004734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d121      	bne.n	8004734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d11a      	bne.n	8004734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004704:	4013      	ands	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800470a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800470c:	4293      	cmp	r3, r2
 800470e:	d111      	bne.n	8004734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	3b01      	subs	r3, #1
 800471e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d107      	bne.n	8004734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800

08004748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0cc      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800475c:	4b68      	ldr	r3, [pc, #416]	@ (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 030f 	and.w	r3, r3, #15
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d90c      	bls.n	8004784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476a:	4b65      	ldr	r3, [pc, #404]	@ (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	b2d2      	uxtb	r2, r2
 8004770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b63      	ldr	r3, [pc, #396]	@ (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0b8      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800479c:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a58      	ldr	r2, [pc, #352]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b4:	4b53      	ldr	r3, [pc, #332]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a52      	ldr	r2, [pc, #328]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b50      	ldr	r3, [pc, #320]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	494d      	ldr	r1, [pc, #308]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d044      	beq.n	8004868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b47      	ldr	r3, [pc, #284]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d119      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e07f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d003      	beq.n	8004806 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004802:	2b03      	cmp	r3, #3
 8004804:	d107      	bne.n	8004816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	4b3f      	ldr	r3, [pc, #252]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e06f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004816:	4b3b      	ldr	r3, [pc, #236]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d101      	bne.n	8004826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e067      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004826:	4b37      	ldr	r3, [pc, #220]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f023 0203 	bic.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4934      	ldr	r1, [pc, #208]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	4313      	orrs	r3, r2
 8004836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004838:	f7fd fef6 	bl	8002628 <HAL_GetTick>
 800483c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800483e:	e00a      	b.n	8004856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004840:	f7fd fef2 	bl	8002628 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484e:	4293      	cmp	r3, r2
 8004850:	d901      	bls.n	8004856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e04f      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004856:	4b2b      	ldr	r3, [pc, #172]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 020c 	and.w	r2, r3, #12
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	429a      	cmp	r2, r3
 8004866:	d1eb      	bne.n	8004840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004868:	4b25      	ldr	r3, [pc, #148]	@ (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 030f 	and.w	r3, r3, #15
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d20c      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b22      	ldr	r3, [pc, #136]	@ (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b20      	ldr	r3, [pc, #128]	@ (8004900 <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e032      	b.n	80048f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4916      	ldr	r1, [pc, #88]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ba:	4b12      	ldr	r3, [pc, #72]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	490e      	ldr	r1, [pc, #56]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ce:	f000 f821 	bl	8004914 <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	490a      	ldr	r1, [pc, #40]	@ (8004908 <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a09      	ldr	r2, [pc, #36]	@ (800490c <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048ea:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <HAL_RCC_ClockConfig+0x1c8>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fd fe56 	bl	80025a0 <HAL_InitTick>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	40023c00 	.word	0x40023c00
 8004904:	40023800 	.word	0x40023800
 8004908:	08010a50 	.word	0x08010a50
 800490c:	20000004 	.word	0x20000004
 8004910:	20000008 	.word	0x20000008

08004914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004918:	b094      	sub	sp, #80	@ 0x50
 800491a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800492c:	4b79      	ldr	r3, [pc, #484]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 030c 	and.w	r3, r3, #12
 8004934:	2b08      	cmp	r3, #8
 8004936:	d00d      	beq.n	8004954 <HAL_RCC_GetSysClockFreq+0x40>
 8004938:	2b08      	cmp	r3, #8
 800493a:	f200 80e1 	bhi.w	8004b00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0x34>
 8004942:	2b04      	cmp	r3, #4
 8004944:	d003      	beq.n	800494e <HAL_RCC_GetSysClockFreq+0x3a>
 8004946:	e0db      	b.n	8004b00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004948:	4b73      	ldr	r3, [pc, #460]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0x204>)
 800494a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800494c:	e0db      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800494e:	4b73      	ldr	r3, [pc, #460]	@ (8004b1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004950:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004952:	e0d8      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004954:	4b6f      	ldr	r3, [pc, #444]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800495c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800495e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d063      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	099b      	lsrs	r3, r3, #6
 8004970:	2200      	movs	r2, #0
 8004972:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004974:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497c:	633b      	str	r3, [r7, #48]	@ 0x30
 800497e:	2300      	movs	r3, #0
 8004980:	637b      	str	r3, [r7, #52]	@ 0x34
 8004982:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004986:	4622      	mov	r2, r4
 8004988:	462b      	mov	r3, r5
 800498a:	f04f 0000 	mov.w	r0, #0
 800498e:	f04f 0100 	mov.w	r1, #0
 8004992:	0159      	lsls	r1, r3, #5
 8004994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004998:	0150      	lsls	r0, r2, #5
 800499a:	4602      	mov	r2, r0
 800499c:	460b      	mov	r3, r1
 800499e:	4621      	mov	r1, r4
 80049a0:	1a51      	subs	r1, r2, r1
 80049a2:	6139      	str	r1, [r7, #16]
 80049a4:	4629      	mov	r1, r5
 80049a6:	eb63 0301 	sbc.w	r3, r3, r1
 80049aa:	617b      	str	r3, [r7, #20]
 80049ac:	f04f 0200 	mov.w	r2, #0
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049b8:	4659      	mov	r1, fp
 80049ba:	018b      	lsls	r3, r1, #6
 80049bc:	4651      	mov	r1, sl
 80049be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049c2:	4651      	mov	r1, sl
 80049c4:	018a      	lsls	r2, r1, #6
 80049c6:	4651      	mov	r1, sl
 80049c8:	ebb2 0801 	subs.w	r8, r2, r1
 80049cc:	4659      	mov	r1, fp
 80049ce:	eb63 0901 	sbc.w	r9, r3, r1
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049e6:	4690      	mov	r8, r2
 80049e8:	4699      	mov	r9, r3
 80049ea:	4623      	mov	r3, r4
 80049ec:	eb18 0303 	adds.w	r3, r8, r3
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	462b      	mov	r3, r5
 80049f4:	eb49 0303 	adc.w	r3, r9, r3
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	f04f 0300 	mov.w	r3, #0
 8004a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a06:	4629      	mov	r1, r5
 8004a08:	024b      	lsls	r3, r1, #9
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a10:	4621      	mov	r1, r4
 8004a12:	024a      	lsls	r2, r1, #9
 8004a14:	4610      	mov	r0, r2
 8004a16:	4619      	mov	r1, r3
 8004a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a24:	f7fb ff42 	bl	80008ac <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a30:	e058      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b38      	ldr	r3, [pc, #224]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	464b      	mov	r3, r9
 8004a50:	f04f 0000 	mov.w	r0, #0
 8004a54:	f04f 0100 	mov.w	r1, #0
 8004a58:	0159      	lsls	r1, r3, #5
 8004a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a5e:	0150      	lsls	r0, r2, #5
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4641      	mov	r1, r8
 8004a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a84:	ebb2 040a 	subs.w	r4, r2, sl
 8004a88:	eb63 050b 	sbc.w	r5, r3, fp
 8004a8c:	f04f 0200 	mov.w	r2, #0
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	00eb      	lsls	r3, r5, #3
 8004a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a9a:	00e2      	lsls	r2, r4, #3
 8004a9c:	4614      	mov	r4, r2
 8004a9e:	461d      	mov	r5, r3
 8004aa0:	4643      	mov	r3, r8
 8004aa2:	18e3      	adds	r3, r4, r3
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	eb45 0303 	adc.w	r3, r5, r3
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aba:	4629      	mov	r1, r5
 8004abc:	028b      	lsls	r3, r1, #10
 8004abe:	4621      	mov	r1, r4
 8004ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	028a      	lsls	r2, r1, #10
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ace:	2200      	movs	r2, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	61fa      	str	r2, [r7, #28]
 8004ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ad8:	f7fb fee8 	bl	80008ac <__aeabi_uldivmod>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	0c1b      	lsrs	r3, r3, #16
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	3301      	adds	r3, #1
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004af4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004af6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004afe:	e002      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3750      	adds	r7, #80	@ 0x50
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800
 8004b18:	00f42400 	.word	0x00f42400
 8004b1c:	007a1200 	.word	0x007a1200

08004b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b26:	681b      	ldr	r3, [r3, #0]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	20000004 	.word	0x20000004

08004b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b3c:	f7ff fff0 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	4b05      	ldr	r3, [pc, #20]	@ (8004b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	4903      	ldr	r1, [pc, #12]	@ (8004b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b4e:	5ccb      	ldrb	r3, [r1, r3]
 8004b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	08010a60 	.word	0x08010a60

08004b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b64:	f7ff ffdc 	bl	8004b20 <HAL_RCC_GetHCLKFreq>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	0b5b      	lsrs	r3, r3, #13
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	4903      	ldr	r1, [pc, #12]	@ (8004b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b76:	5ccb      	ldrb	r3, [r1, r3]
 8004b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40023800 	.word	0x40023800
 8004b84:	08010a60 	.word	0x08010a60

08004b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e07b      	b.n	8004c92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004baa:	d009      	beq.n	8004bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
 8004bb2:	e005      	b.n	8004bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fd fb1c 	bl	8002218 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c44:	ea42 0103 	orr.w	r1, r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0104 	and.w	r1, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c66:	f003 0210 	and.w	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69da      	ldr	r2, [r3, #28]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b088      	sub	sp, #32
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	603b      	str	r3, [r7, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004caa:	f7fd fcbd 	bl	8002628 <HAL_GetTick>
 8004cae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e12a      	b.n	8004f1a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Transmit+0x36>
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e122      	b.n	8004f1a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_SPI_Transmit+0x48>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e11b      	b.n	8004f1a <HAL_SPI_Transmit+0x280>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2203      	movs	r2, #3
 8004cee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	88fa      	ldrh	r2, [r7, #6]
 8004d08:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d30:	d10f      	bne.n	8004d52 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d007      	beq.n	8004d70 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d78:	d152      	bne.n	8004e20 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_SPI_Transmit+0xee>
 8004d82:	8b7b      	ldrh	r3, [r7, #26]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d145      	bne.n	8004e14 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8c:	881a      	ldrh	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d98:	1c9a      	adds	r2, r3, #2
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dac:	e032      	b.n	8004e14 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d112      	bne.n	8004de2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc0:	881a      	ldrh	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004de0:	e018      	b.n	8004e14 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004de2:	f7fd fc21 	bl	8002628 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d803      	bhi.n	8004dfa <HAL_SPI_Transmit+0x160>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df8:	d102      	bne.n	8004e00 <HAL_SPI_Transmit+0x166>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d109      	bne.n	8004e14 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e082      	b.n	8004f1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1c7      	bne.n	8004dae <HAL_SPI_Transmit+0x114>
 8004e1e:	e053      	b.n	8004ec8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_SPI_Transmit+0x194>
 8004e28:	8b7b      	ldrh	r3, [r7, #26]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d147      	bne.n	8004ebe <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	330c      	adds	r3, #12
 8004e38:	7812      	ldrb	r2, [r2, #0]
 8004e3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e54:	e033      	b.n	8004ebe <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d113      	bne.n	8004e8c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	330c      	adds	r3, #12
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e8a:	e018      	b.n	8004ebe <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8c:	f7fd fbcc 	bl	8002628 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d803      	bhi.n	8004ea4 <HAL_SPI_Transmit+0x20a>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d102      	bne.n	8004eaa <HAL_SPI_Transmit+0x210>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e02d      	b.n	8004f1a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1c6      	bne.n	8004e56 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f000 fa59 	bl	8005384 <SPI_EndRxTxTransaction>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10a      	bne.n	8004efc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004f18:	2300      	movs	r3, #0
  }
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b08a      	sub	sp, #40	@ 0x28
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f30:	2301      	movs	r3, #1
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f34:	f7fd fb78 	bl	8002628 <HAL_GetTick>
 8004f38:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f40:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004f48:	887b      	ldrh	r3, [r7, #2]
 8004f4a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f4c:	7ffb      	ldrb	r3, [r7, #31]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d00c      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x4a>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f58:	d106      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x46>
 8004f62:	7ffb      	ldrb	r3, [r7, #31]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d001      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e17f      	b.n	800526c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x5c>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_TransmitReceive+0x5c>
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e174      	b.n	800526c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_SPI_TransmitReceive+0x6e>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e16d      	b.n	800526c <HAL_SPI_TransmitReceive+0x34a>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d003      	beq.n	8004fac <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2205      	movs	r2, #5
 8004fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	887a      	ldrh	r2, [r7, #2]
 8004fbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	887a      	ldrh	r2, [r7, #2]
 8004fc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	887a      	ldrh	r2, [r7, #2]
 8004fce:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	887a      	ldrh	r2, [r7, #2]
 8004fd4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b40      	cmp	r3, #64	@ 0x40
 8004fee:	d007      	beq.n	8005000 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005008:	d17e      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_SPI_TransmitReceive+0xf6>
 8005012:	8afb      	ldrh	r3, [r7, #22]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d16c      	bne.n	80050f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501c:	881a      	ldrh	r2, [r3, #0]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005028:	1c9a      	adds	r2, r3, #2
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503c:	e059      	b.n	80050f2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d11b      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x162>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005050:	b29b      	uxth	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x162>
 8005056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005058:	2b01      	cmp	r3, #1
 800505a:	d113      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	881a      	ldrh	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506c:	1c9a      	adds	r2, r3, #2
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d119      	bne.n	80050c6 <HAL_SPI_TransmitReceive+0x1a4>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d014      	beq.n	80050c6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a6:	b292      	uxth	r2, r2
 80050a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050c2:	2301      	movs	r3, #1
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050c6:	f7fd faaf 	bl	8002628 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d80d      	bhi.n	80050f2 <HAL_SPI_TransmitReceive+0x1d0>
 80050d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050dc:	d009      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0bc      	b.n	800526c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1a0      	bne.n	800503e <HAL_SPI_TransmitReceive+0x11c>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d19b      	bne.n	800503e <HAL_SPI_TransmitReceive+0x11c>
 8005106:	e082      	b.n	800520e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_SPI_TransmitReceive+0x1f4>
 8005110:	8afb      	ldrh	r3, [r7, #22]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d171      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513c:	e05d      	b.n	80051fa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d11c      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x264>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d017      	beq.n	8005186 <HAL_SPI_TransmitReceive+0x264>
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	2b01      	cmp	r3, #1
 800515a:	d114      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d119      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x2a6>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051c4:	2301      	movs	r3, #1
 80051c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051c8:	f7fd fa2e 	bl	8002628 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d803      	bhi.n	80051e0 <HAL_SPI_TransmitReceive+0x2be>
 80051d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051de:	d102      	bne.n	80051e6 <HAL_SPI_TransmitReceive+0x2c4>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e038      	b.n	800526c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d19c      	bne.n	800513e <HAL_SPI_TransmitReceive+0x21c>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d197      	bne.n	800513e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f000 f8b6 	bl	8005384 <SPI_EndRxTxTransaction>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2220      	movs	r2, #32
 8005222:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e01d      	b.n	800526c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005238:	2300      	movs	r3, #0
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800526a:	2300      	movs	r3, #0
  }
}
 800526c:	4618      	mov	r0, r3
 800526e:	3728      	adds	r7, #40	@ 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	603b      	str	r3, [r7, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005284:	f7fd f9d0 	bl	8002628 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	4413      	add	r3, r2
 8005292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005294:	f7fd f9c8 	bl	8002628 <HAL_GetTick>
 8005298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800529a:	4b39      	ldr	r3, [pc, #228]	@ (8005380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	015b      	lsls	r3, r3, #5
 80052a0:	0d1b      	lsrs	r3, r3, #20
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052aa:	e055      	b.n	8005358 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d051      	beq.n	8005358 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052b4:	f7fd f9b8 	bl	8002628 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d902      	bls.n	80052ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d13d      	bne.n	8005346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80052d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052e2:	d111      	bne.n	8005308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052ec:	d004      	beq.n	80052f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052f6:	d107      	bne.n	8005308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005310:	d10f      	bne.n	8005332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e018      	b.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e002      	b.n	8005358 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	3b01      	subs	r3, #1
 8005356:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4013      	ands	r3, r2
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	429a      	cmp	r2, r3
 8005366:	bf0c      	ite	eq
 8005368:	2301      	moveq	r3, #1
 800536a:	2300      	movne	r3, #0
 800536c:	b2db      	uxtb	r3, r3
 800536e:	461a      	mov	r2, r3
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	429a      	cmp	r2, r3
 8005374:	d19a      	bne.n	80052ac <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3720      	adds	r7, #32
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	20000004 	.word	0x20000004

08005384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af02      	add	r7, sp, #8
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2201      	movs	r2, #1
 8005398:	2102      	movs	r1, #2
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff ff6a 	bl	8005274 <SPI_WaitFlagStateUntilTimeout>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053aa:	f043 0220 	orr.w	r2, r3, #32
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e032      	b.n	800541c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <SPI_EndRxTxTransaction+0xa0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005428 <SPI_EndRxTxTransaction+0xa4>)
 80053bc:	fba2 2303 	umull	r2, r3, r2, r3
 80053c0:	0d5b      	lsrs	r3, r3, #21
 80053c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053c6:	fb02 f303 	mul.w	r3, r2, r3
 80053ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053d4:	d112      	bne.n	80053fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2200      	movs	r2, #0
 80053de:	2180      	movs	r1, #128	@ 0x80
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f7ff ff47 	bl	8005274 <SPI_WaitFlagStateUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d016      	beq.n	800541a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e00f      	b.n	800541c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	3b01      	subs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005412:	2b80      	cmp	r3, #128	@ 0x80
 8005414:	d0f2      	beq.n	80053fc <SPI_EndRxTxTransaction+0x78>
 8005416:	e000      	b.n	800541a <SPI_EndRxTxTransaction+0x96>
        break;
 8005418:	bf00      	nop
  }

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	20000004 	.word	0x20000004
 8005428:	165e9f81 	.word	0x165e9f81

0800542c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e042      	b.n	80054c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc ff28 	bl	80022a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2224      	movs	r2, #36	@ 0x24
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800546e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 fe15 	bl	80060a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005484:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695a      	ldr	r2, [r3, #20]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005494:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08a      	sub	sp, #40	@ 0x28
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	4613      	mov	r3, r2
 80054da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d175      	bne.n	80055d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_UART_Transmit+0x2c>
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e06e      	b.n	80055da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2221      	movs	r2, #33	@ 0x21
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800550a:	f7fd f88d 	bl	8002628 <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	88fa      	ldrh	r2, [r7, #6]
 800551a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005524:	d108      	bne.n	8005538 <HAL_UART_Transmit+0x6c>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d104      	bne.n	8005538 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e003      	b.n	8005540 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005540:	e02e      	b.n	80055a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	2180      	movs	r1, #128	@ 0x80
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fbb3 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d005      	beq.n	8005564 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e03a      	b.n	80055da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10b      	bne.n	8005582 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005578:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	3302      	adds	r3, #2
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	e007      	b.n	8005592 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	781a      	ldrb	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	3301      	adds	r3, #1
 8005590:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1cb      	bne.n	8005542 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2200      	movs	r2, #0
 80055b2:	2140      	movs	r1, #64	@ 0x40
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fb7f 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e006      	b.n	80055da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e000      	b.n	80055da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
  }
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b08a      	sub	sp, #40	@ 0x28
 80055e6:	af02      	add	r7, sp, #8
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	603b      	str	r3, [r7, #0]
 80055ee:	4613      	mov	r3, r2
 80055f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055f2:	2300      	movs	r3, #0
 80055f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b20      	cmp	r3, #32
 8005600:	f040 8081 	bne.w	8005706 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_UART_Receive+0x2e>
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e079      	b.n	8005708 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2222      	movs	r2, #34	@ 0x22
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005628:	f7fc fffe 	bl	8002628 <HAL_GetTick>
 800562c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	88fa      	ldrh	r2, [r7, #6]
 8005632:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005642:	d108      	bne.n	8005656 <HAL_UART_Receive+0x74>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	e003      	b.n	800565e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800565e:	e047      	b.n	80056f0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2200      	movs	r2, #0
 8005668:	2120      	movs	r1, #32
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fb24 	bl	8005cb8 <UART_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e042      	b.n	8005708 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10c      	bne.n	80056a2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	b29a      	uxth	r2, r3
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e01f      	b.n	80056e2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056aa:	d007      	beq.n	80056bc <HAL_UART_Receive+0xda>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <HAL_UART_Receive+0xe8>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e008      	b.n	80056dc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3301      	adds	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1b2      	bne.n	8005660 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	e000      	b.n	8005708 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005706:	2302      	movs	r3, #2
  }
}
 8005708:	4618      	mov	r0, r3
 800570a:	3720      	adds	r7, #32
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b0ba      	sub	sp, #232	@ 0xe8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005736:	2300      	movs	r3, #0
 8005738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800573c:	2300      	movs	r3, #0
 800573e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800574e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10f      	bne.n	8005776 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d009      	beq.n	8005776 <HAL_UART_IRQHandler+0x66>
 8005762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fbd7 	bl	8005f22 <UART_Receive_IT>
      return;
 8005774:	e273      	b.n	8005c5e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005776:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80de 	beq.w	800593c <HAL_UART_IRQHandler+0x22c>
 8005780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d106      	bne.n	800579a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800578c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005790:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80d1 	beq.w	800593c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_UART_IRQHandler+0xae>
 80057a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b6:	f043 0201 	orr.w	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00b      	beq.n	80057e2 <HAL_UART_IRQHandler+0xd2>
 80057ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	f043 0202 	orr.w	r2, r3, #2
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00b      	beq.n	8005806 <HAL_UART_IRQHandler+0xf6>
 80057ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fe:	f043 0204 	orr.w	r2, r3, #4
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580a:	f003 0308 	and.w	r3, r3, #8
 800580e:	2b00      	cmp	r3, #0
 8005810:	d011      	beq.n	8005836 <HAL_UART_IRQHandler+0x126>
 8005812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d105      	bne.n	800582a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800581e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	f043 0208 	orr.w	r2, r3, #8
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 820a 	beq.w	8005c54 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d008      	beq.n	800585e <HAL_UART_IRQHandler+0x14e>
 800584c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 fb62 	bl	8005f22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	bf0c      	ite	eq
 800586c:	2301      	moveq	r3, #1
 800586e:	2300      	movne	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d103      	bne.n	800588a <HAL_UART_IRQHandler+0x17a>
 8005882:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005886:	2b00      	cmp	r3, #0
 8005888:	d04f      	beq.n	800592a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa6d 	bl	8005d6a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589a:	2b40      	cmp	r3, #64	@ 0x40
 800589c:	d141      	bne.n	8005922 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	3314      	adds	r3, #20
 80058a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058ac:	e853 3f00 	ldrex	r3, [r3]
 80058b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3314      	adds	r3, #20
 80058c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80058d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80058e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1d9      	bne.n	800589e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d013      	beq.n	800591a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f6:	4a8a      	ldr	r2, [pc, #552]	@ (8005b20 <HAL_UART_IRQHandler+0x410>)
 80058f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fd f843 	bl	800298a <HAL_DMA_Abort_IT>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005914:	4610      	mov	r0, r2
 8005916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	e00e      	b.n	8005938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9b6 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005920:	e00a      	b.n	8005938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f9b2 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	e006      	b.n	8005938 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f9ae 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005936:	e18d      	b.n	8005c54 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	bf00      	nop
    return;
 800593a:	e18b      	b.n	8005c54 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	2b01      	cmp	r3, #1
 8005942:	f040 8167 	bne.w	8005c14 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594a:	f003 0310 	and.w	r3, r3, #16
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8160 	beq.w	8005c14 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 8159 	beq.w	8005c14 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005962:	2300      	movs	r3, #0
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60bb      	str	r3, [r7, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	60bb      	str	r3, [r7, #8]
 8005976:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005982:	2b40      	cmp	r3, #64	@ 0x40
 8005984:	f040 80ce 	bne.w	8005b24 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005994:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80a9 	beq.w	8005af0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059a6:	429a      	cmp	r2, r3
 80059a8:	f080 80a2 	bcs.w	8005af0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059be:	f000 8088 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059d0:	e853 3f00 	ldrex	r3, [r3]
 80059d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80059d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80059dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	330c      	adds	r3, #12
 80059ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80059ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80059f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80059fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1d9      	bne.n	80059c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3314      	adds	r3, #20
 8005a14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3314      	adds	r3, #20
 8005a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e1      	bne.n	8005a0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a54:	e853 3f00 	ldrex	r3, [r3]
 8005a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3314      	adds	r3, #20
 8005a6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e3      	bne.n	8005a4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2220      	movs	r2, #32
 8005a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005aa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005aa2:	f023 0310 	bic.w	r3, r3, #16
 8005aa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	330c      	adds	r3, #12
 8005ab0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ab4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ab6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005abc:	e841 2300 	strex	r3, r2, [r1]
 8005ac0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005ac2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1e3      	bne.n	8005a90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fc feec 	bl	80028aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f8d9 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005aee:	e0b3      	b.n	8005c58 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005af4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005af8:	429a      	cmp	r2, r3
 8005afa:	f040 80ad 	bne.w	8005c58 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b08:	f040 80a6 	bne.w	8005c58 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8c1 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
      return;
 8005b1e:	e09b      	b.n	8005c58 <HAL_UART_IRQHandler+0x548>
 8005b20:	08005e31 	.word	0x08005e31
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 808e 	beq.w	8005c5c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8005b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8089 	beq.w	8005c5c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3314      	adds	r3, #20
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	623b      	str	r3, [r7, #32]
   return(result);
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e3      	bne.n	8005b82 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0310 	bic.w	r3, r3, #16
 8005bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e3      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f847 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c12:	e023      	b.n	8005c5c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <HAL_UART_IRQHandler+0x524>
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f910 	bl	8005e52 <UART_Transmit_IT>
    return;
 8005c32:	e014      	b.n	8005c5e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <HAL_UART_IRQHandler+0x54e>
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f950 	bl	8005ef2 <UART_EndTransmit_IT>
    return;
 8005c52:	e004      	b.n	8005c5e <HAL_UART_IRQHandler+0x54e>
    return;
 8005c54:	bf00      	nop
 8005c56:	e002      	b.n	8005c5e <HAL_UART_IRQHandler+0x54e>
      return;
 8005c58:	bf00      	nop
 8005c5a:	e000      	b.n	8005c5e <HAL_UART_IRQHandler+0x54e>
      return;
 8005c5c:	bf00      	nop
  }
}
 8005c5e:	37e8      	adds	r7, #232	@ 0xe8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc8:	e03b      	b.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd0:	d037      	beq.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd2:	f7fc fca9 	bl	8002628 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d302      	bcc.n	8005ce8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e03a      	b.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d023      	beq.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b80      	cmp	r3, #128	@ 0x80
 8005cfe:	d020      	beq.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	d01d      	beq.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b08      	cmp	r3, #8
 8005d12:	d116      	bne.n	8005d42 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d14:	2300      	movs	r3, #0
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	617b      	str	r3, [r7, #20]
 8005d28:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f81d 	bl	8005d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2208      	movs	r2, #8
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e00f      	b.n	8005d62 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	bf0c      	ite	eq
 8005d52:	2301      	moveq	r3, #1
 8005d54:	2300      	movne	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	79fb      	ldrb	r3, [r7, #7]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d0b4      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b095      	sub	sp, #84	@ 0x54
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	330c      	adds	r3, #12
 8005d78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d7c:	e853 3f00 	ldrex	r3, [r3]
 8005d80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	330c      	adds	r3, #12
 8005d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d92:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d9a:	e841 2300 	strex	r3, r2, [r1]
 8005d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1e5      	bne.n	8005d72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3314      	adds	r3, #20
 8005dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	f023 0301 	bic.w	r3, r3, #1
 8005dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3314      	adds	r3, #20
 8005dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e5      	bne.n	8005da6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d119      	bne.n	8005e16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 0310 	bic.w	r3, r3, #16
 8005df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e02:	61ba      	str	r2, [r7, #24]
 8005e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	6979      	ldr	r1, [r7, #20]
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e5      	bne.n	8005de2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e24:	bf00      	nop
 8005e26:	3754      	adds	r7, #84	@ 0x54
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff ff21 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b21      	cmp	r3, #33	@ 0x21
 8005e64:	d13e      	bne.n	8005ee4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e6e:	d114      	bne.n	8005e9a <UART_Transmit_IT+0x48>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	621a      	str	r2, [r3, #32]
 8005e98:	e008      	b.n	8005eac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6211      	str	r1, [r2, #32]
 8005ea4:	781a      	ldrb	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10f      	bne.n	8005ee0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ece:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ede:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fea6 	bl	8005c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f22:	b580      	push	{r7, lr}
 8005f24:	b08c      	sub	sp, #48	@ 0x30
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b22      	cmp	r3, #34	@ 0x22
 8005f3c:	f040 80aa 	bne.w	8006094 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f48:	d115      	bne.n	8005f76 <UART_Receive_IT+0x54>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d111      	bne.n	8005f76 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f56:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6e:	1c9a      	adds	r2, r3, #2
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f74:	e024      	b.n	8005fc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f84:	d007      	beq.n	8005f96 <UART_Receive_IT+0x74>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10a      	bne.n	8005fa4 <UART_Receive_IT+0x82>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d106      	bne.n	8005fa4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e008      	b.n	8005fb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	1c5a      	adds	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	4619      	mov	r1, r3
 8005fce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d15d      	bne.n	8006090 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0220 	bic.w	r2, r2, #32
 8005fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ff2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	2b01      	cmp	r3, #1
 8006018:	d135      	bne.n	8006086 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	330c      	adds	r3, #12
 8006026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	613b      	str	r3, [r7, #16]
   return(result);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f023 0310 	bic.w	r3, r3, #16
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006040:	623a      	str	r2, [r7, #32]
 8006042:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	69f9      	ldr	r1, [r7, #28]
 8006046:	6a3a      	ldr	r2, [r7, #32]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	61bb      	str	r3, [r7, #24]
   return(result);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e5      	bne.n	8006020 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b10      	cmp	r3, #16
 8006060:	d10a      	bne.n	8006078 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff fe0e 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
 8006084:	e002      	b.n	800608c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fdf6 	bl	8005c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e002      	b.n	8006096 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	e000      	b.n	8006096 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006094:	2302      	movs	r3, #2
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3730      	adds	r7, #48	@ 0x30
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a4:	b0c0      	sub	sp, #256	@ 0x100
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	68d9      	ldr	r1, [r3, #12]
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	ea40 0301 	orr.w	r3, r0, r1
 80060c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	431a      	orrs	r2, r3
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	431a      	orrs	r2, r3
 80060e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060f8:	f021 010c 	bic.w	r1, r1, #12
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006106:	430b      	orrs	r3, r1
 8006108:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	6999      	ldr	r1, [r3, #24]
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	ea40 0301 	orr.w	r3, r0, r1
 8006126:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	4b8f      	ldr	r3, [pc, #572]	@ (800636c <UART_SetConfig+0x2cc>)
 8006130:	429a      	cmp	r2, r3
 8006132:	d005      	beq.n	8006140 <UART_SetConfig+0xa0>
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	4b8d      	ldr	r3, [pc, #564]	@ (8006370 <UART_SetConfig+0x2d0>)
 800613c:	429a      	cmp	r2, r3
 800613e:	d104      	bne.n	800614a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006140:	f7fe fd0e 	bl	8004b60 <HAL_RCC_GetPCLK2Freq>
 8006144:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006148:	e003      	b.n	8006152 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800614a:	f7fe fcf5 	bl	8004b38 <HAL_RCC_GetPCLK1Freq>
 800614e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800615c:	f040 810c 	bne.w	8006378 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006164:	2200      	movs	r2, #0
 8006166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800616a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800616e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006172:	4622      	mov	r2, r4
 8006174:	462b      	mov	r3, r5
 8006176:	1891      	adds	r1, r2, r2
 8006178:	65b9      	str	r1, [r7, #88]	@ 0x58
 800617a:	415b      	adcs	r3, r3
 800617c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800617e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006182:	4621      	mov	r1, r4
 8006184:	eb12 0801 	adds.w	r8, r2, r1
 8006188:	4629      	mov	r1, r5
 800618a:	eb43 0901 	adc.w	r9, r3, r1
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800619a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800619e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061a2:	4690      	mov	r8, r2
 80061a4:	4699      	mov	r9, r3
 80061a6:	4623      	mov	r3, r4
 80061a8:	eb18 0303 	adds.w	r3, r8, r3
 80061ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80061b0:	462b      	mov	r3, r5
 80061b2:	eb49 0303 	adc.w	r3, r9, r3
 80061b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80061c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061ce:	460b      	mov	r3, r1
 80061d0:	18db      	adds	r3, r3, r3
 80061d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80061d4:	4613      	mov	r3, r2
 80061d6:	eb42 0303 	adc.w	r3, r2, r3
 80061da:	657b      	str	r3, [r7, #84]	@ 0x54
 80061dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061e4:	f7fa fb62 	bl	80008ac <__aeabi_uldivmod>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	4b61      	ldr	r3, [pc, #388]	@ (8006374 <UART_SetConfig+0x2d4>)
 80061ee:	fba3 2302 	umull	r2, r3, r3, r2
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	011c      	lsls	r4, r3, #4
 80061f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006200:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006208:	4642      	mov	r2, r8
 800620a:	464b      	mov	r3, r9
 800620c:	1891      	adds	r1, r2, r2
 800620e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006210:	415b      	adcs	r3, r3
 8006212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006218:	4641      	mov	r1, r8
 800621a:	eb12 0a01 	adds.w	sl, r2, r1
 800621e:	4649      	mov	r1, r9
 8006220:	eb43 0b01 	adc.w	fp, r3, r1
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006230:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006234:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006238:	4692      	mov	sl, r2
 800623a:	469b      	mov	fp, r3
 800623c:	4643      	mov	r3, r8
 800623e:	eb1a 0303 	adds.w	r3, sl, r3
 8006242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006246:	464b      	mov	r3, r9
 8006248:	eb4b 0303 	adc.w	r3, fp, r3
 800624c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800625c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006260:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006264:	460b      	mov	r3, r1
 8006266:	18db      	adds	r3, r3, r3
 8006268:	643b      	str	r3, [r7, #64]	@ 0x40
 800626a:	4613      	mov	r3, r2
 800626c:	eb42 0303 	adc.w	r3, r2, r3
 8006270:	647b      	str	r3, [r7, #68]	@ 0x44
 8006272:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006276:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800627a:	f7fa fb17 	bl	80008ac <__aeabi_uldivmod>
 800627e:	4602      	mov	r2, r0
 8006280:	460b      	mov	r3, r1
 8006282:	4611      	mov	r1, r2
 8006284:	4b3b      	ldr	r3, [pc, #236]	@ (8006374 <UART_SetConfig+0x2d4>)
 8006286:	fba3 2301 	umull	r2, r3, r3, r1
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	2264      	movs	r2, #100	@ 0x64
 800628e:	fb02 f303 	mul.w	r3, r2, r3
 8006292:	1acb      	subs	r3, r1, r3
 8006294:	00db      	lsls	r3, r3, #3
 8006296:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800629a:	4b36      	ldr	r3, [pc, #216]	@ (8006374 <UART_SetConfig+0x2d4>)
 800629c:	fba3 2302 	umull	r2, r3, r3, r2
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80062a8:	441c      	add	r4, r3
 80062aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80062b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80062bc:	4642      	mov	r2, r8
 80062be:	464b      	mov	r3, r9
 80062c0:	1891      	adds	r1, r2, r2
 80062c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062c4:	415b      	adcs	r3, r3
 80062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062cc:	4641      	mov	r1, r8
 80062ce:	1851      	adds	r1, r2, r1
 80062d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80062d2:	4649      	mov	r1, r9
 80062d4:	414b      	adcs	r3, r1
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062e4:	4659      	mov	r1, fp
 80062e6:	00cb      	lsls	r3, r1, #3
 80062e8:	4651      	mov	r1, sl
 80062ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ee:	4651      	mov	r1, sl
 80062f0:	00ca      	lsls	r2, r1, #3
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	4642      	mov	r2, r8
 80062fa:	189b      	adds	r3, r3, r2
 80062fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006300:	464b      	mov	r3, r9
 8006302:	460a      	mov	r2, r1
 8006304:	eb42 0303 	adc.w	r3, r2, r3
 8006308:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006318:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800631c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006320:	460b      	mov	r3, r1
 8006322:	18db      	adds	r3, r3, r3
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006326:	4613      	mov	r3, r2
 8006328:	eb42 0303 	adc.w	r3, r2, r3
 800632c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800632e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006332:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006336:	f7fa fab9 	bl	80008ac <__aeabi_uldivmod>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <UART_SetConfig+0x2d4>)
 8006340:	fba3 1302 	umull	r1, r3, r3, r2
 8006344:	095b      	lsrs	r3, r3, #5
 8006346:	2164      	movs	r1, #100	@ 0x64
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	3332      	adds	r3, #50	@ 0x32
 8006352:	4a08      	ldr	r2, [pc, #32]	@ (8006374 <UART_SetConfig+0x2d4>)
 8006354:	fba2 2303 	umull	r2, r3, r2, r3
 8006358:	095b      	lsrs	r3, r3, #5
 800635a:	f003 0207 	and.w	r2, r3, #7
 800635e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4422      	add	r2, r4
 8006366:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006368:	e106      	b.n	8006578 <UART_SetConfig+0x4d8>
 800636a:	bf00      	nop
 800636c:	40011000 	.word	0x40011000
 8006370:	40011400 	.word	0x40011400
 8006374:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006378:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800637c:	2200      	movs	r2, #0
 800637e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006382:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006386:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800638a:	4642      	mov	r2, r8
 800638c:	464b      	mov	r3, r9
 800638e:	1891      	adds	r1, r2, r2
 8006390:	6239      	str	r1, [r7, #32]
 8006392:	415b      	adcs	r3, r3
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
 8006396:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800639a:	4641      	mov	r1, r8
 800639c:	1854      	adds	r4, r2, r1
 800639e:	4649      	mov	r1, r9
 80063a0:	eb43 0501 	adc.w	r5, r3, r1
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	00eb      	lsls	r3, r5, #3
 80063ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063b2:	00e2      	lsls	r2, r4, #3
 80063b4:	4614      	mov	r4, r2
 80063b6:	461d      	mov	r5, r3
 80063b8:	4643      	mov	r3, r8
 80063ba:	18e3      	adds	r3, r4, r3
 80063bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063c0:	464b      	mov	r3, r9
 80063c2:	eb45 0303 	adc.w	r3, r5, r3
 80063c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063e6:	4629      	mov	r1, r5
 80063e8:	008b      	lsls	r3, r1, #2
 80063ea:	4621      	mov	r1, r4
 80063ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063f0:	4621      	mov	r1, r4
 80063f2:	008a      	lsls	r2, r1, #2
 80063f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063f8:	f7fa fa58 	bl	80008ac <__aeabi_uldivmod>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4b60      	ldr	r3, [pc, #384]	@ (8006584 <UART_SetConfig+0x4e4>)
 8006402:	fba3 2302 	umull	r2, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	011c      	lsls	r4, r3, #4
 800640a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800640e:	2200      	movs	r2, #0
 8006410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006414:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006418:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800641c:	4642      	mov	r2, r8
 800641e:	464b      	mov	r3, r9
 8006420:	1891      	adds	r1, r2, r2
 8006422:	61b9      	str	r1, [r7, #24]
 8006424:	415b      	adcs	r3, r3
 8006426:	61fb      	str	r3, [r7, #28]
 8006428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800642c:	4641      	mov	r1, r8
 800642e:	1851      	adds	r1, r2, r1
 8006430:	6139      	str	r1, [r7, #16]
 8006432:	4649      	mov	r1, r9
 8006434:	414b      	adcs	r3, r1
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006444:	4659      	mov	r1, fp
 8006446:	00cb      	lsls	r3, r1, #3
 8006448:	4651      	mov	r1, sl
 800644a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644e:	4651      	mov	r1, sl
 8006450:	00ca      	lsls	r2, r1, #3
 8006452:	4610      	mov	r0, r2
 8006454:	4619      	mov	r1, r3
 8006456:	4603      	mov	r3, r0
 8006458:	4642      	mov	r2, r8
 800645a:	189b      	adds	r3, r3, r2
 800645c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006460:	464b      	mov	r3, r9
 8006462:	460a      	mov	r2, r1
 8006464:	eb42 0303 	adc.w	r3, r2, r3
 8006468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006476:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006478:	f04f 0200 	mov.w	r2, #0
 800647c:	f04f 0300 	mov.w	r3, #0
 8006480:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006484:	4649      	mov	r1, r9
 8006486:	008b      	lsls	r3, r1, #2
 8006488:	4641      	mov	r1, r8
 800648a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800648e:	4641      	mov	r1, r8
 8006490:	008a      	lsls	r2, r1, #2
 8006492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006496:	f7fa fa09 	bl	80008ac <__aeabi_uldivmod>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	4b38      	ldr	r3, [pc, #224]	@ (8006584 <UART_SetConfig+0x4e4>)
 80064a2:	fba3 2301 	umull	r2, r3, r3, r1
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	2264      	movs	r2, #100	@ 0x64
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
 80064ae:	1acb      	subs	r3, r1, r3
 80064b0:	011b      	lsls	r3, r3, #4
 80064b2:	3332      	adds	r3, #50	@ 0x32
 80064b4:	4a33      	ldr	r2, [pc, #204]	@ (8006584 <UART_SetConfig+0x4e4>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064c0:	441c      	add	r4, r3
 80064c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064c6:	2200      	movs	r2, #0
 80064c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80064ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80064cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	1891      	adds	r1, r2, r2
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	415b      	adcs	r3, r3
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064e0:	4641      	mov	r1, r8
 80064e2:	1851      	adds	r1, r2, r1
 80064e4:	6039      	str	r1, [r7, #0]
 80064e6:	4649      	mov	r1, r9
 80064e8:	414b      	adcs	r3, r1
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064f8:	4659      	mov	r1, fp
 80064fa:	00cb      	lsls	r3, r1, #3
 80064fc:	4651      	mov	r1, sl
 80064fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006502:	4651      	mov	r1, sl
 8006504:	00ca      	lsls	r2, r1, #3
 8006506:	4610      	mov	r0, r2
 8006508:	4619      	mov	r1, r3
 800650a:	4603      	mov	r3, r0
 800650c:	4642      	mov	r2, r8
 800650e:	189b      	adds	r3, r3, r2
 8006510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006512:	464b      	mov	r3, r9
 8006514:	460a      	mov	r2, r1
 8006516:	eb42 0303 	adc.w	r3, r2, r3
 800651a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	663b      	str	r3, [r7, #96]	@ 0x60
 8006526:	667a      	str	r2, [r7, #100]	@ 0x64
 8006528:	f04f 0200 	mov.w	r2, #0
 800652c:	f04f 0300 	mov.w	r3, #0
 8006530:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006534:	4649      	mov	r1, r9
 8006536:	008b      	lsls	r3, r1, #2
 8006538:	4641      	mov	r1, r8
 800653a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800653e:	4641      	mov	r1, r8
 8006540:	008a      	lsls	r2, r1, #2
 8006542:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006546:	f7fa f9b1 	bl	80008ac <__aeabi_uldivmod>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	4b0d      	ldr	r3, [pc, #52]	@ (8006584 <UART_SetConfig+0x4e4>)
 8006550:	fba3 1302 	umull	r1, r3, r3, r2
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	2164      	movs	r1, #100	@ 0x64
 8006558:	fb01 f303 	mul.w	r3, r1, r3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	3332      	adds	r3, #50	@ 0x32
 8006562:	4a08      	ldr	r2, [pc, #32]	@ (8006584 <UART_SetConfig+0x4e4>)
 8006564:	fba2 2303 	umull	r2, r3, r2, r3
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4422      	add	r2, r4
 8006576:	609a      	str	r2, [r3, #8]
}
 8006578:	bf00      	nop
 800657a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800657e:	46bd      	mov	sp, r7
 8006580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006584:	51eb851f 	.word	0x51eb851f

08006588 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006588:	b084      	sub	sp, #16
 800658a:	b580      	push	{r7, lr}
 800658c:	b084      	sub	sp, #16
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	f107 001c 	add.w	r0, r7, #28
 8006596:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800659a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d123      	bne.n	80065ea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80065b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d105      	bne.n	80065de <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fae8 	bl	8007bb4 <USB_CoreReset>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
 80065e8:	e01b      	b.n	8006622 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fadc 	bl	8007bb4 <USB_CoreReset>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006600:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006604:	2b00      	cmp	r3, #0
 8006606:	d106      	bne.n	8006616 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	@ 0x38
 8006614:	e005      	b.n	8006622 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006622:	7fbb      	ldrb	r3, [r7, #30]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d10b      	bne.n	8006640 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f043 0206 	orr.w	r2, r3, #6
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f043 0220 	orr.w	r2, r3, #32
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006640:	7bfb      	ldrb	r3, [r7, #15]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800664c:	b004      	add	sp, #16
 800664e:	4770      	bx	lr

08006650 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	4613      	mov	r3, r2
 800665c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d165      	bne.n	8006730 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	4a41      	ldr	r2, [pc, #260]	@ (800676c <USB_SetTurnaroundTime+0x11c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d906      	bls.n	800667a <USB_SetTurnaroundTime+0x2a>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4a40      	ldr	r2, [pc, #256]	@ (8006770 <USB_SetTurnaroundTime+0x120>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d202      	bcs.n	800667a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006674:	230f      	movs	r3, #15
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e062      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4a3c      	ldr	r2, [pc, #240]	@ (8006770 <USB_SetTurnaroundTime+0x120>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d306      	bcc.n	8006690 <USB_SetTurnaroundTime+0x40>
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4a3b      	ldr	r2, [pc, #236]	@ (8006774 <USB_SetTurnaroundTime+0x124>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d202      	bcs.n	8006690 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800668a:	230e      	movs	r3, #14
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	e057      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	4a38      	ldr	r2, [pc, #224]	@ (8006774 <USB_SetTurnaroundTime+0x124>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d306      	bcc.n	80066a6 <USB_SetTurnaroundTime+0x56>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4a37      	ldr	r2, [pc, #220]	@ (8006778 <USB_SetTurnaroundTime+0x128>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d202      	bcs.n	80066a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066a0:	230d      	movs	r3, #13
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	e04c      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4a33      	ldr	r2, [pc, #204]	@ (8006778 <USB_SetTurnaroundTime+0x128>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d306      	bcc.n	80066bc <USB_SetTurnaroundTime+0x6c>
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	4a32      	ldr	r2, [pc, #200]	@ (800677c <USB_SetTurnaroundTime+0x12c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d802      	bhi.n	80066bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066b6:	230c      	movs	r3, #12
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e041      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4a2f      	ldr	r2, [pc, #188]	@ (800677c <USB_SetTurnaroundTime+0x12c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d906      	bls.n	80066d2 <USB_SetTurnaroundTime+0x82>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	4a2e      	ldr	r2, [pc, #184]	@ (8006780 <USB_SetTurnaroundTime+0x130>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d802      	bhi.n	80066d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80066cc:	230b      	movs	r3, #11
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e036      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006780 <USB_SetTurnaroundTime+0x130>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d906      	bls.n	80066e8 <USB_SetTurnaroundTime+0x98>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	4a29      	ldr	r2, [pc, #164]	@ (8006784 <USB_SetTurnaroundTime+0x134>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d802      	bhi.n	80066e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80066e2:	230a      	movs	r3, #10
 80066e4:	617b      	str	r3, [r7, #20]
 80066e6:	e02b      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a26      	ldr	r2, [pc, #152]	@ (8006784 <USB_SetTurnaroundTime+0x134>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d906      	bls.n	80066fe <USB_SetTurnaroundTime+0xae>
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4a25      	ldr	r2, [pc, #148]	@ (8006788 <USB_SetTurnaroundTime+0x138>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d202      	bcs.n	80066fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80066f8:	2309      	movs	r3, #9
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	e020      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a21      	ldr	r2, [pc, #132]	@ (8006788 <USB_SetTurnaroundTime+0x138>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d306      	bcc.n	8006714 <USB_SetTurnaroundTime+0xc4>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	4a20      	ldr	r2, [pc, #128]	@ (800678c <USB_SetTurnaroundTime+0x13c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d802      	bhi.n	8006714 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800670e:	2308      	movs	r3, #8
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e015      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a1d      	ldr	r2, [pc, #116]	@ (800678c <USB_SetTurnaroundTime+0x13c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d906      	bls.n	800672a <USB_SetTurnaroundTime+0xda>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <USB_SetTurnaroundTime+0x140>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d202      	bcs.n	800672a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006724:	2307      	movs	r3, #7
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e00a      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800672a:	2306      	movs	r3, #6
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e007      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006736:	2309      	movs	r3, #9
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	e001      	b.n	8006740 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800673c:	2309      	movs	r3, #9
 800673e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	029b      	lsls	r3, r3, #10
 8006754:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006758:	431a      	orrs	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	00d8acbf 	.word	0x00d8acbf
 8006770:	00e4e1c0 	.word	0x00e4e1c0
 8006774:	00f42400 	.word	0x00f42400
 8006778:	01067380 	.word	0x01067380
 800677c:	011a499f 	.word	0x011a499f
 8006780:	01312cff 	.word	0x01312cff
 8006784:	014ca43f 	.word	0x014ca43f
 8006788:	016e3600 	.word	0x016e3600
 800678c:	01a6ab1f 	.word	0x01a6ab1f
 8006790:	01e84800 	.word	0x01e84800

08006794 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f043 0201 	orr.w	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f023 0201 	bic.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d115      	bne.n	8006826 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006806:	200a      	movs	r0, #10
 8006808:	f7fb ff1a 	bl	8002640 <HAL_Delay>
      ms += 10U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	330a      	adds	r3, #10
 8006810:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 f93f 	bl	8007a96 <USB_GetMode>
 8006818:	4603      	mov	r3, r0
 800681a:	2b01      	cmp	r3, #1
 800681c:	d01e      	beq.n	800685c <USB_SetCurrentMode+0x84>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2bc7      	cmp	r3, #199	@ 0xc7
 8006822:	d9f0      	bls.n	8006806 <USB_SetCurrentMode+0x2e>
 8006824:	e01a      	b.n	800685c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d115      	bne.n	8006858 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006838:	200a      	movs	r0, #10
 800683a:	f7fb ff01 	bl	8002640 <HAL_Delay>
      ms += 10U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	330a      	adds	r3, #10
 8006842:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f001 f926 	bl	8007a96 <USB_GetMode>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <USB_SetCurrentMode+0x84>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2bc7      	cmp	r3, #199	@ 0xc7
 8006854:	d9f0      	bls.n	8006838 <USB_SetCurrentMode+0x60>
 8006856:	e001      	b.n	800685c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e005      	b.n	8006868 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006860:	d101      	bne.n	8006866 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006870:	b084      	sub	sp, #16
 8006872:	b580      	push	{r7, lr}
 8006874:	b086      	sub	sp, #24
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800687e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	e009      	b.n	80068a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	3340      	adds	r3, #64	@ 0x40
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	2200      	movs	r2, #0
 800689c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	3301      	adds	r3, #1
 80068a2:	613b      	str	r3, [r7, #16]
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	2b0e      	cmp	r3, #14
 80068a8:	d9f2      	bls.n	8006890 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d11c      	bne.n	80068ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068c0:	f043 0302 	orr.w	r3, r3, #2
 80068c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80068ea:	e00b      	b.n	8006904 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800690a:	461a      	mov	r2, r3
 800690c:	2300      	movs	r3, #0
 800690e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006910:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006914:	2b01      	cmp	r3, #1
 8006916:	d10d      	bne.n	8006934 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006920:	2100      	movs	r1, #0
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f968 	bl	8006bf8 <USB_SetDevSpeed>
 8006928:	e008      	b.n	800693c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800692a:	2101      	movs	r1, #1
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f963 	bl	8006bf8 <USB_SetDevSpeed>
 8006932:	e003      	b.n	800693c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006934:	2103      	movs	r1, #3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f95e 	bl	8006bf8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800693c:	2110      	movs	r1, #16
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f8fa 	bl	8006b38 <USB_FlushTxFifo>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f924 	bl	8006b9c <USB_FlushRxFifo>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006964:	461a      	mov	r2, r3
 8006966:	2300      	movs	r3, #0
 8006968:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006970:	461a      	mov	r2, r3
 8006972:	2300      	movs	r3, #0
 8006974:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697c:	461a      	mov	r2, r3
 800697e:	2300      	movs	r3, #0
 8006980:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006982:	2300      	movs	r3, #0
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	e043      	b.n	8006a10 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800699a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800699e:	d118      	bne.n	80069d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b2:	461a      	mov	r2, r3
 80069b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e013      	b.n	80069e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c8:	461a      	mov	r2, r3
 80069ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	e008      	b.n	80069e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069de:	461a      	mov	r2, r3
 80069e0:	2300      	movs	r3, #0
 80069e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	015a      	lsls	r2, r3, #5
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	4413      	add	r3, r2
 80069ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f0:	461a      	mov	r2, r3
 80069f2:	2300      	movs	r3, #0
 80069f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a02:	461a      	mov	r2, r3
 8006a04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a14:	461a      	mov	r2, r3
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d3b5      	bcc.n	8006988 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	e043      	b.n	8006aaa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a38:	d118      	bne.n	8006a6c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	e013      	b.n	8006a7e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a62:	461a      	mov	r2, r3
 8006a64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e008      	b.n	8006a7e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006aa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006aae:	461a      	mov	r2, r3
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d3b5      	bcc.n	8006a22 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006ad6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d105      	bne.n	8006aec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	f043 0210 	orr.w	r2, r3, #16
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <USB_DevInit+0x2c4>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006af8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d005      	beq.n	8006b0c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	f043 0208 	orr.w	r2, r3, #8
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b0c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d107      	bne.n	8006b24 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b1c:	f043 0304 	orr.w	r3, r3, #4
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3718      	adds	r7, #24
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b30:	b004      	add	sp, #16
 8006b32:	4770      	bx	lr
 8006b34:	803c3800 	.word	0x803c3800

08006b38 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b52:	d901      	bls.n	8006b58 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e01b      	b.n	8006b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	daf2      	bge.n	8006b46 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b60:	2300      	movs	r3, #0
 8006b62:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	019b      	lsls	r3, r3, #6
 8006b68:	f043 0220 	orr.w	r2, r3, #32
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b7c:	d901      	bls.n	8006b82 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e006      	b.n	8006b90 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d0f0      	beq.n	8006b70 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3714      	adds	r7, #20
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3301      	adds	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bb4:	d901      	bls.n	8006bba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e018      	b.n	8006bec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	daf2      	bge.n	8006ba8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2210      	movs	r2, #16
 8006bca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bd8:	d901      	bls.n	8006bde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e006      	b.n	8006bec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0310 	and.w	r3, r3, #16
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d0f0      	beq.n	8006bcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	78fb      	ldrb	r3, [r7, #3]
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0306 	and.w	r3, r3, #6
 8006c42:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	75fb      	strb	r3, [r7, #23]
 8006c4e:	e00a      	b.n	8006c66 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d002      	beq.n	8006c5c <USB_GetDevSpeed+0x32>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b06      	cmp	r3, #6
 8006c5a:	d102      	bne.n	8006c62 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	75fb      	strb	r3, [r7, #23]
 8006c60:	e001      	b.n	8006c66 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006c62:	230f      	movs	r3, #15
 8006c64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	371c      	adds	r7, #28
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	785b      	ldrb	r3, [r3, #1]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d13a      	bne.n	8006d06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d155      	bne.n	8006d74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	791b      	ldrb	r3, [r3, #4]
 8006ce2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ce4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	059b      	lsls	r3, r3, #22
 8006cea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006cec:	4313      	orrs	r3, r2
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	0151      	lsls	r1, r2, #5
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	440a      	add	r2, r1
 8006cf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e036      	b.n	8006d74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d0c:	69da      	ldr	r2, [r3, #28]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	2101      	movs	r1, #1
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	041b      	lsls	r3, r3, #16
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d24:	4313      	orrs	r3, r2
 8006d26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d11a      	bne.n	8006d74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	791b      	ldrb	r3, [r3, #4]
 8006d58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
	...

08006d84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b085      	sub	sp, #20
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d161      	bne.n	8006e64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006db2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db6:	d11f      	bne.n	8006df8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006df6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	2101      	movs	r1, #1
 8006e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	43db      	mvns	r3, r3
 8006e12:	68f9      	ldr	r1, [r7, #12]
 8006e14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e18:	4013      	ands	r3, r2
 8006e1a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	43db      	mvns	r3, r3
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	0159      	lsls	r1, r3, #5
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	440b      	add	r3, r1
 8006e56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4b35      	ldr	r3, [pc, #212]	@ (8006f34 <USB_DeactivateEndpoint+0x1b0>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	600b      	str	r3, [r1, #0]
 8006e62:	e060      	b.n	8006f26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e7a:	d11f      	bne.n	8006ebc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006eba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 030f 	and.w	r3, r3, #15
 8006ecc:	2101      	movs	r1, #1
 8006ece:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed2:	041b      	lsls	r3, r3, #16
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006edc:	4013      	ands	r3, r2
 8006ede:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee6:	69da      	ldr	r2, [r3, #28]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f00:	4013      	ands	r3, r2
 8006f02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	0159      	lsls	r1, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	440b      	add	r3, r1
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4b05      	ldr	r3, [pc, #20]	@ (8006f38 <USB_DeactivateEndpoint+0x1b4>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	ec337800 	.word	0xec337800
 8006f38:	eff37800 	.word	0xeff37800

08006f3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b08a      	sub	sp, #40	@ 0x28
 8006f40:	af02      	add	r7, sp, #8
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	f040 817f 	bne.w	800725c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d132      	bne.n	8006fcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	69fa      	ldr	r2, [r7, #28]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f80:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006f84:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fa4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc4:	0cdb      	lsrs	r3, r3, #19
 8006fc6:	04db      	lsls	r3, r3, #19
 8006fc8:	6113      	str	r3, [r2, #16]
 8006fca:	e097      	b.n	80070fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fe6:	0cdb      	lsrs	r3, r3, #19
 8006fe8:	04db      	lsls	r3, r3, #19
 8006fea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007006:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800700a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800700e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d11a      	bne.n	800704c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007048:	6113      	str	r3, [r2, #16]
 800704a:	e044      	b.n	80070d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691a      	ldr	r2, [r3, #16]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	4413      	add	r3, r2
 8007056:	1e5a      	subs	r2, r3, #1
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706e:	691a      	ldr	r2, [r3, #16]
 8007070:	8afb      	ldrh	r3, [r7, #22]
 8007072:	04d9      	lsls	r1, r3, #19
 8007074:	4ba4      	ldr	r3, [pc, #656]	@ (8007308 <USB_EPStartXfer+0x3cc>)
 8007076:	400b      	ands	r3, r1
 8007078:	69b9      	ldr	r1, [r7, #24]
 800707a:	0148      	lsls	r0, r1, #5
 800707c:	69f9      	ldr	r1, [r7, #28]
 800707e:	4401      	add	r1, r0
 8007080:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007084:	4313      	orrs	r3, r2
 8007086:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	791b      	ldrb	r3, [r3, #4]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d122      	bne.n	80070d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80070ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	8afb      	ldrh	r3, [r7, #22]
 80070c0:	075b      	lsls	r3, r3, #29
 80070c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80070c6:	69b9      	ldr	r1, [r7, #24]
 80070c8:	0148      	lsls	r0, r1, #5
 80070ca:	69f9      	ldr	r1, [r7, #28]
 80070cc:	4401      	add	r1, r0
 80070ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070d2:	4313      	orrs	r3, r2
 80070d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ec:	69b9      	ldr	r1, [r7, #24]
 80070ee:	0148      	lsls	r0, r1, #5
 80070f0:	69f9      	ldr	r1, [r7, #28]
 80070f2:	4401      	add	r1, r0
 80070f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80070f8:	4313      	orrs	r3, r2
 80070fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d14b      	bne.n	800719a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	4413      	add	r3, r2
 8007112:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007116:	461a      	mov	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	791b      	ldrb	r3, [r3, #4]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d128      	bne.n	8007178 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007132:	2b00      	cmp	r3, #0
 8007134:	d110      	bne.n	8007158 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	0151      	lsls	r1, r2, #5
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	440a      	add	r2, r1
 800714c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007150:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e00f      	b.n	8007178 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007176:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69ba      	ldr	r2, [r7, #24]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	69fa      	ldr	r2, [r7, #28]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007192:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	e166      	b.n	8007468 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	0151      	lsls	r1, r2, #5
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	440a      	add	r2, r1
 80071b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071b8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	791b      	ldrb	r3, [r3, #4]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d015      	beq.n	80071ee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 814e 	beq.w	8007468 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	2101      	movs	r1, #1
 80071de:	fa01 f303 	lsl.w	r3, r1, r3
 80071e2:	69f9      	ldr	r1, [r7, #28]
 80071e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071e8:	4313      	orrs	r3, r2
 80071ea:	634b      	str	r3, [r1, #52]	@ 0x34
 80071ec:	e13c      	b.n	8007468 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d110      	bne.n	8007220 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	015a      	lsls	r2, r3, #5
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4413      	add	r3, r2
 8007206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	0151      	lsls	r1, r2, #5
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	440a      	add	r2, r1
 8007214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007218:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	e00f      	b.n	8007240 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	440a      	add	r2, r1
 8007236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800723a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800723e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	68d9      	ldr	r1, [r3, #12]
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781a      	ldrb	r2, [r3, #0]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	b298      	uxth	r0, r3
 800724e:	79fb      	ldrb	r3, [r7, #7]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4603      	mov	r3, r0
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f9b9 	bl	80075cc <USB_WritePacket>
 800725a:	e105      	b.n	8007468 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007276:	0cdb      	lsrs	r3, r3, #19
 8007278:	04db      	lsls	r3, r3, #19
 800727a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	0151      	lsls	r1, r2, #5
 800728e:	69fa      	ldr	r2, [r7, #28]
 8007290:	440a      	add	r2, r1
 8007292:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007296:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800729a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800729e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d132      	bne.n	800730c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d003      	beq.n	80072b6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	689a      	ldr	r2, [r3, #8]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	6a1b      	ldr	r3, [r3, #32]
 80072d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d4:	69b9      	ldr	r1, [r7, #24]
 80072d6:	0148      	lsls	r0, r1, #5
 80072d8:	69f9      	ldr	r1, [r7, #28]
 80072da:	4401      	add	r1, r0
 80072dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80072e0:	4313      	orrs	r3, r2
 80072e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007302:	6113      	str	r3, [r2, #16]
 8007304:	e062      	b.n	80073cc <USB_EPStartXfer+0x490>
 8007306:	bf00      	nop
 8007308:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d123      	bne.n	800735c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007320:	691a      	ldr	r2, [r3, #16]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800732a:	69b9      	ldr	r1, [r7, #24]
 800732c:	0148      	lsls	r0, r1, #5
 800732e:	69f9      	ldr	r1, [r7, #28]
 8007330:	4401      	add	r1, r0
 8007332:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007336:	4313      	orrs	r3, r2
 8007338:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007354:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007358:	6113      	str	r3, [r2, #16]
 800735a:	e037      	b.n	80073cc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	4413      	add	r3, r2
 8007366:	1e5a      	subs	r2, r3, #1
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	8afa      	ldrh	r2, [r7, #22]
 8007378:	fb03 f202 	mul.w	r2, r3, r2
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	8afb      	ldrh	r3, [r7, #22]
 8007390:	04d9      	lsls	r1, r3, #19
 8007392:	4b38      	ldr	r3, [pc, #224]	@ (8007474 <USB_EPStartXfer+0x538>)
 8007394:	400b      	ands	r3, r1
 8007396:	69b9      	ldr	r1, [r7, #24]
 8007398:	0148      	lsls	r0, r1, #5
 800739a:	69f9      	ldr	r1, [r7, #28]
 800739c:	4401      	add	r1, r0
 800739e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073a2:	4313      	orrs	r3, r2
 80073a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	015a      	lsls	r2, r3, #5
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	4413      	add	r3, r2
 80073ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073bc:	69b9      	ldr	r1, [r7, #24]
 80073be:	0148      	lsls	r0, r1, #5
 80073c0:	69f9      	ldr	r1, [r7, #28]
 80073c2:	4401      	add	r1, r0
 80073c4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80073c8:	4313      	orrs	r3, r2
 80073ca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80073cc:	79fb      	ldrb	r3, [r7, #7]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d10d      	bne.n	80073ee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d009      	beq.n	80073ee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	68d9      	ldr	r1, [r3, #12]
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ea:	460a      	mov	r2, r1
 80073ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	791b      	ldrb	r3, [r3, #4]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d128      	bne.n	8007448 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d110      	bne.n	8007428 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007420:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007424:	6013      	str	r3, [r2, #0]
 8007426:	e00f      	b.n	8007448 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	69ba      	ldr	r2, [r7, #24]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	69fa      	ldr	r2, [r7, #28]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007442:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	0151      	lsls	r1, r2, #5
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	440a      	add	r2, r1
 800745e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007462:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3720      	adds	r7, #32
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	1ff80000 	.word	0x1ff80000

08007478 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d14a      	bne.n	800752c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80074aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80074ae:	f040 8086 	bne.w	80075be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	7812      	ldrb	r2, [r2, #0]
 80074c6:	0151      	lsls	r1, r2, #5
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	440a      	add	r2, r1
 80074cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80074d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	7812      	ldrb	r2, [r2, #0]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007506:	4293      	cmp	r3, r2
 8007508:	d902      	bls.n	8007510 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	75fb      	strb	r3, [r7, #23]
          break;
 800750e:	e056      	b.n	80075be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007528:	d0e7      	beq.n	80074fa <USB_EPStopXfer+0x82>
 800752a:	e048      	b.n	80075be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	015a      	lsls	r2, r3, #5
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	4413      	add	r3, r2
 8007536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007540:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007544:	d13b      	bne.n	80075be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	7812      	ldrb	r2, [r2, #0]
 800755a:	0151      	lsls	r1, r2, #5
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	440a      	add	r2, r1
 8007560:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007564:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007568:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	7812      	ldrb	r2, [r2, #0]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800758c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3301      	adds	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f242 7210 	movw	r2, #10000	@ 0x2710
 800759a:	4293      	cmp	r3, r2
 800759c:	d902      	bls.n	80075a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	75fb      	strb	r3, [r7, #23]
          break;
 80075a2:	e00c      	b.n	80075be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	781b      	ldrb	r3, [r3, #0]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075bc:	d0e7      	beq.n	800758e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80075be:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b089      	sub	sp, #36	@ 0x24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4611      	mov	r1, r2
 80075d8:	461a      	mov	r2, r3
 80075da:	460b      	mov	r3, r1
 80075dc:	71fb      	strb	r3, [r7, #7]
 80075de:	4613      	mov	r3, r2
 80075e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80075ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d123      	bne.n	800763a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80075f2:	88bb      	ldrh	r3, [r7, #4]
 80075f4:	3303      	adds	r3, #3
 80075f6:	089b      	lsrs	r3, r3, #2
 80075f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80075fa:	2300      	movs	r3, #0
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	e018      	b.n	8007632 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	031a      	lsls	r2, r3, #12
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4413      	add	r3, r2
 8007608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800760c:	461a      	mov	r2, r3
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3301      	adds	r3, #1
 8007618:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	3301      	adds	r3, #1
 800761e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	3301      	adds	r3, #1
 8007624:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	3301      	adds	r3, #1
 800762a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	3301      	adds	r3, #1
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	429a      	cmp	r2, r3
 8007638:	d3e2      	bcc.n	8007600 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3724      	adds	r7, #36	@ 0x24
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007648:	b480      	push	{r7}
 800764a:	b08b      	sub	sp, #44	@ 0x2c
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	4613      	mov	r3, r2
 8007654:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800765e:	88fb      	ldrh	r3, [r7, #6]
 8007660:	089b      	lsrs	r3, r3, #2
 8007662:	b29b      	uxth	r3, r3
 8007664:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	f003 0303 	and.w	r3, r3, #3
 800766c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800766e:	2300      	movs	r3, #0
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	e014      	b.n	800769e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	3301      	adds	r3, #1
 8007684:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	3301      	adds	r3, #1
 800768a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	3301      	adds	r3, #1
 8007690:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	3301      	adds	r3, #1
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	3301      	adds	r3, #1
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	6a3a      	ldr	r2, [r7, #32]
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d3e6      	bcc.n	8007674 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076a6:	8bfb      	ldrh	r3, [r7, #30]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01e      	beq.n	80076ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076b6:	461a      	mov	r2, r3
 80076b8:	f107 0310 	add.w	r3, r7, #16
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	701a      	strb	r2, [r3, #0]
      i++;
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	3301      	adds	r3, #1
 80076d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076da:	3301      	adds	r3, #1
 80076dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80076de:	8bfb      	ldrh	r3, [r7, #30]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80076e4:	8bfb      	ldrh	r3, [r7, #30]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1ea      	bne.n	80076c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	372c      	adds	r7, #44	@ 0x2c
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b085      	sub	sp, #20
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d12c      	bne.n	800776e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	db12      	blt.n	800774c <USB_EPSetStall+0x54>
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00f      	beq.n	800774c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007746:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800774a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	015a      	lsls	r2, r3, #5
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4413      	add	r3, r2
 8007754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	0151      	lsls	r1, r2, #5
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	440a      	add	r2, r1
 8007762:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007766:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	e02b      	b.n	80077c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	db12      	blt.n	80077a6 <USB_EPSetStall+0xae>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00f      	beq.n	80077a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4413      	add	r3, r2
 800778e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80077c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d128      	bne.n	8007842 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800780a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800780e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	791b      	ldrb	r3, [r3, #4]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d003      	beq.n	8007820 <USB_EPClearStall+0x4c>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	791b      	ldrb	r3, [r3, #4]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d138      	bne.n	8007892 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	0151      	lsls	r1, r2, #5
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	440a      	add	r2, r1
 8007836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800783a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e027      	b.n	8007892 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800785c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007860:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	791b      	ldrb	r3, [r3, #4]
 8007866:	2b03      	cmp	r3, #3
 8007868:	d003      	beq.n	8007872 <USB_EPClearStall+0x9e>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	791b      	ldrb	r3, [r3, #4]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d10f      	bne.n	8007892 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800788c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007890:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80078c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	011b      	lsls	r3, r3, #4
 80078d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80078d4:	68f9      	ldr	r1, [r7, #12]
 80078d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078da:	4313      	orrs	r3, r2
 80078dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007906:	f023 0303 	bic.w	r3, r3, #3
 800790a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800791a:	f023 0302 	bic.w	r3, r3, #2
 800791e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800792e:	b480      	push	{r7}
 8007930:	b085      	sub	sp, #20
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007948:	f023 0303 	bic.w	r3, r3, #3
 800794c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800795c:	f043 0302 	orr.w	r3, r3, #2
 8007960:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4013      	ands	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007988:	68fb      	ldr	r3, [r7, #12]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007996:	b480      	push	{r7}
 8007998:	b085      	sub	sp, #20
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	4013      	ands	r3, r2
 80079b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	0c1b      	lsrs	r3, r3, #16
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80079ca:	b480      	push	{r7}
 80079cc:	b085      	sub	sp, #20
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	4013      	ands	r3, r2
 80079ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	b29b      	uxth	r3, r3
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b085      	sub	sp, #20
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a0e:	78fb      	ldrb	r3, [r7, #3]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	4013      	ands	r3, r2
 8007a2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b087      	sub	sp, #28
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6a:	01db      	lsls	r3, r3, #7
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007a74:	78fb      	ldrb	r3, [r7, #3]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4013      	ands	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a88:	68bb      	ldr	r3, [r7, #8]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	f003 0301 	and.w	r3, r3, #1
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b085      	sub	sp, #20
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007acc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007ad0:	f023 0307 	bic.w	r3, r3, #7
 8007ad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3714      	adds	r7, #20
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b087      	sub	sp, #28
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	460b      	mov	r3, r1
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	333c      	adds	r3, #60	@ 0x3c
 8007b0e:	3304      	adds	r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	4a26      	ldr	r2, [pc, #152]	@ (8007bb0 <USB_EP0_OutStart+0xb8>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d90a      	bls.n	8007b32 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b2c:	d101      	bne.n	8007b32 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e037      	b.n	8007ba2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b38:	461a      	mov	r2, r3
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b4c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b60:	f043 0318 	orr.w	r3, r3, #24
 8007b64:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b74:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007b78:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10f      	bne.n	8007ba0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b86:	461a      	mov	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b9a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007b9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	4f54300a 	.word	0x4f54300a

08007bb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bcc:	d901      	bls.n	8007bd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e022      	b.n	8007c18 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	daf2      	bge.n	8007bc0 <USB_CoreReset+0xc>

  count = 10U;
 8007bda:	230a      	movs	r3, #10
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007bde:	e002      	b.n	8007be6 <USB_CoreReset+0x32>
  {
    count--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3b01      	subs	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1f9      	bne.n	8007be0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	f043 0201 	orr.w	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c04:	d901      	bls.n	8007c0a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e006      	b.n	8007c18 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d0f0      	beq.n	8007bf8 <USB_CoreReset+0x44>

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7f9 fa11 	bl	8001058 <SD_disk_initialize>
 8007c36:	4603      	mov	r3, r0
 8007c38:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	4603      	mov	r3, r0
 8007c4a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7f9 faec 	bl	800122c <SD_disk_status>
 8007c54:	4603      	mov	r3, r0
 8007c56:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60b9      	str	r1, [r7, #8]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8007c70:	7bf8      	ldrb	r0, [r7, #15]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	68b9      	ldr	r1, [r7, #8]
 8007c78:	f7f9 faee 	bl	8001258 <SD_disk_read>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	603b      	str	r3, [r7, #0]
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8007c98:	7bf8      	ldrb	r0, [r7, #15]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	f7f9 fb44 	bl	800132c <SD_disk_write>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	603a      	str	r2, [r7, #0]
 8007cba:	71fb      	strb	r3, [r7, #7]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   return SD_disk_ioctl(pdrv,cmd, buff);
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	79b9      	ldrb	r1, [r7, #6]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7f9 fbb4 	bl	8001434 <SD_disk_ioctl>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8007ce4:	f44f 7021 	mov.w	r0, #644	@ 0x284
 8007ce8:	f007 ff40 	bl	800fb6c <USBD_static_malloc>
 8007cec:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d109      	bne.n	8007d08 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	32b0      	adds	r2, #176	@ 0xb0
 8007cfe:	2100      	movs	r1, #0
 8007d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007d04:	2302      	movs	r3, #2
 8007d06:	e06e      	b.n	8007de6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	32b0      	adds	r2, #176	@ 0xb0
 8007d12:	68f9      	ldr	r1, [r7, #12]
 8007d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	32b0      	adds	r2, #176	@ 0xb0
 8007d22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	7c1b      	ldrb	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d12b      	bne.n	8007d8c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007d34:	4b2e      	ldr	r3, [pc, #184]	@ (8007df0 <USBD_MSC_Init+0x118>)
 8007d36:	7819      	ldrb	r1, [r3, #0]
 8007d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f007 fdd1 	bl	800f8e6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007d44:	4b2a      	ldr	r3, [pc, #168]	@ (8007df0 <USBD_MSC_Init+0x118>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 020f 	and.w	r2, r3, #15
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007d60:	4b24      	ldr	r3, [pc, #144]	@ (8007df4 <USBD_MSC_Init+0x11c>)
 8007d62:	7819      	ldrb	r1, [r3, #0]
 8007d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d68:	2202      	movs	r2, #2
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f007 fdbb 	bl	800f8e6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007d70:	4b20      	ldr	r3, [pc, #128]	@ (8007df4 <USBD_MSC_Init+0x11c>)
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	f003 020f 	and.w	r2, r3, #15
 8007d78:	6879      	ldr	r1, [r7, #4]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	440b      	add	r3, r1
 8007d84:	3323      	adds	r3, #35	@ 0x23
 8007d86:	2201      	movs	r2, #1
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	e028      	b.n	8007dde <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007d8c:	4b18      	ldr	r3, [pc, #96]	@ (8007df0 <USBD_MSC_Init+0x118>)
 8007d8e:	7819      	ldrb	r1, [r3, #0]
 8007d90:	2340      	movs	r3, #64	@ 0x40
 8007d92:	2202      	movs	r2, #2
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f007 fda6 	bl	800f8e6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8007d9a:	4b15      	ldr	r3, [pc, #84]	@ (8007df0 <USBD_MSC_Init+0x118>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f003 020f 	and.w	r2, r3, #15
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4613      	mov	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	440b      	add	r3, r1
 8007dae:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007db2:	2201      	movs	r2, #1
 8007db4:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007db6:	4b0f      	ldr	r3, [pc, #60]	@ (8007df4 <USBD_MSC_Init+0x11c>)
 8007db8:	7819      	ldrb	r1, [r3, #0]
 8007dba:	2340      	movs	r3, #64	@ 0x40
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f007 fd91 	bl	800f8e6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <USBD_MSC_Init+0x11c>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 020f 	and.w	r2, r3, #15
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	440b      	add	r3, r1
 8007dd8:	3323      	adds	r3, #35	@ 0x23
 8007dda:	2201      	movs	r2, #1
 8007ddc:	701a      	strb	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa30 	bl	8008244 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	20000087 	.word	0x20000087
 8007df4:	20000086 	.word	0x20000086

08007df8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	460b      	mov	r3, r1
 8007e02:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8007e04:	4b26      	ldr	r3, [pc, #152]	@ (8007ea0 <USBD_MSC_DeInit+0xa8>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f007 fd91 	bl	800f932 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8007e10:	4b23      	ldr	r3, [pc, #140]	@ (8007ea0 <USBD_MSC_DeInit+0xa8>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	f003 020f 	and.w	r2, r3, #15
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	440b      	add	r3, r1
 8007e24:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007e28:	2200      	movs	r2, #0
 8007e2a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8007e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ea4 <USBD_MSC_DeInit+0xac>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f007 fd7d 	bl	800f932 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8007e38:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea4 <USBD_MSC_DeInit+0xac>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	f003 020f 	and.w	r2, r3, #15
 8007e40:	6879      	ldr	r1, [r7, #4]
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3323      	adds	r3, #35	@ 0x23
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	32b0      	adds	r2, #176	@ 0xb0
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d018      	beq.n	8007e96 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fa6b 	bl	8008340 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	32b0      	adds	r2, #176	@ 0xb0
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f007 fe85 	bl	800fb88 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	32b0      	adds	r2, #176	@ 0xb0
 8007e88:	2100      	movs	r1, #0
 8007e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}
 8007ea0:	20000087 	.word	0x20000087
 8007ea4:	20000086 	.word	0x20000086

08007ea8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	32b0      	adds	r2, #176	@ 0xb0
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75fb      	strb	r3, [r7, #23]
  uint32_t max_lun;
  uint16_t status_info = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	817b      	strh	r3, [r7, #10]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e0e5      	b.n	80080a0 <USBD_MSC_Setup+0x1f8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d058      	beq.n	8007f92 <USBD_MSC_Setup+0xea>
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	f040 80d5 	bne.w	8008090 <USBD_MSC_Setup+0x1e8>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	2bfe      	cmp	r3, #254	@ 0xfe
 8007eec:	d002      	beq.n	8007ef4 <USBD_MSC_Setup+0x4c>
 8007eee:	2bff      	cmp	r3, #255	@ 0xff
 8007ef0:	d02f      	beq.n	8007f52 <USBD_MSC_Setup+0xaa>
 8007ef2:	e046      	b.n	8007f82 <USBD_MSC_Setup+0xda>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	885b      	ldrh	r3, [r3, #2]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d123      	bne.n	8007f44 <USBD_MSC_Setup+0x9c>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	88db      	ldrh	r3, [r3, #6]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d11f      	bne.n	8007f44 <USBD_MSC_Setup+0x9c>
              ((req->bmRequest & 0x80U) == 0x80U))
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da1a      	bge.n	8007f44 <USBD_MSC_Setup+0x9c>
          {
            max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	33b0      	adds	r3, #176	@ 0xb0
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	4798      	blx	r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	60fb      	str	r3, [r7, #12]
            hmsc->max_lun = (max_lun > MSC_BOT_MAX_LUN) ? MSC_BOT_MAX_LUN : max_lun;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	bf28      	it	cs
 8007f2c:	2302      	movcs	r3, #2
 8007f2e:	461a      	mov	r2, r3
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2201      	movs	r2, #1
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f003 fa0a 	bl	800b354 <USBD_CtlSendData>
 8007f40:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f42:	e025      	b.n	8007f90 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f003 f987 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f50:	e01e      	b.n	8007f90 <USBD_MSC_Setup+0xe8>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	885b      	ldrh	r3, [r3, #2]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d10c      	bne.n	8007f74 <USBD_MSC_Setup+0xcc>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	88db      	ldrh	r3, [r3, #6]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d108      	bne.n	8007f74 <USBD_MSC_Setup+0xcc>
              ((req->bmRequest & 0x80U) != 0x80U))
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	db03      	blt.n	8007f74 <USBD_MSC_Setup+0xcc>
          {
            MSC_BOT_Reset(pdev);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f9b3 	bl	80082d8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f72:	e00d      	b.n	8007f90 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f003 f96f 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	75fb      	strb	r3, [r7, #23]
          break;
 8007f80:	e006      	b.n	8007f90 <USBD_MSC_Setup+0xe8>

        default:
          USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f003 f968 	bl	800b25a <USBD_CtlError>
          ret = USBD_FAIL;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f8e:	bf00      	nop
      }
      break;
 8007f90:	e085      	b.n	800809e <USBD_MSC_Setup+0x1f6>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	785b      	ldrb	r3, [r3, #1]
 8007f96:	2b0b      	cmp	r3, #11
 8007f98:	d871      	bhi.n	800807e <USBD_MSC_Setup+0x1d6>
 8007f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa0 <USBD_MSC_Setup+0xf8>)
 8007f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa0:	08007fd1 	.word	0x08007fd1
 8007fa4:	0800804d 	.word	0x0800804d
 8007fa8:	0800807f 	.word	0x0800807f
 8007fac:	0800807f 	.word	0x0800807f
 8007fb0:	0800807f 	.word	0x0800807f
 8007fb4:	0800807f 	.word	0x0800807f
 8007fb8:	0800807f 	.word	0x0800807f
 8007fbc:	0800807f 	.word	0x0800807f
 8007fc0:	0800807f 	.word	0x0800807f
 8007fc4:	0800807f 	.word	0x0800807f
 8007fc8:	08007ffb 	.word	0x08007ffb
 8007fcc:	08008025 	.word	0x08008025
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d107      	bne.n	8007fec <USBD_MSC_Setup+0x144>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007fdc:	f107 030a 	add.w	r3, r7, #10
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f003 f9b5 	bl	800b354 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007fea:	e050      	b.n	800808e <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8007fec:	6839      	ldr	r1, [r7, #0]
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f003 f933 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	75fb      	strb	r3, [r7, #23]
          break;
 8007ff8:	e049      	b.n	800808e <USBD_MSC_Setup+0x1e6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b03      	cmp	r3, #3
 8008004:	d107      	bne.n	8008016 <USBD_MSC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	3304      	adds	r3, #4
 800800a:	2201      	movs	r2, #1
 800800c:	4619      	mov	r1, r3
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f003 f9a0 	bl	800b354 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008014:	e03b      	b.n	800808e <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f003 f91e 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 800801e:	2303      	movs	r3, #3
 8008020:	75fb      	strb	r3, [r7, #23]
          break;
 8008022:	e034      	b.n	800808e <USBD_MSC_Setup+0x1e6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b03      	cmp	r3, #3
 800802e:	d106      	bne.n	800803e <USBD_MSC_Setup+0x196>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	885b      	ldrh	r3, [r3, #2]
 8008034:	b2db      	uxtb	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800803c:	e027      	b.n	800808e <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f003 f90a 	bl	800b25a <USBD_CtlError>
            ret = USBD_FAIL;
 8008046:	2303      	movs	r3, #3
 8008048:	75fb      	strb	r3, [r7, #23]
          break;
 800804a:	e020      	b.n	800808e <USBD_MSC_Setup+0x1e6>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b03      	cmp	r3, #3
 8008056:	d119      	bne.n	800808c <USBD_MSC_Setup+0x1e4>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	885b      	ldrh	r3, [r3, #2]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d115      	bne.n	800808c <USBD_MSC_Setup+0x1e4>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	889b      	ldrh	r3, [r3, #4]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f007 fc81 	bl	800f970 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	889b      	ldrh	r3, [r3, #4]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	4619      	mov	r1, r3
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fb30 	bl	80086dc <MSC_BOT_CplClrFeature>
            }
          }
          break;
 800807c:	e006      	b.n	800808c <USBD_MSC_Setup+0x1e4>

        default:
          USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f003 f8ea 	bl	800b25a <USBD_CtlError>
          ret = USBD_FAIL;
 8008086:	2303      	movs	r3, #3
 8008088:	75fb      	strb	r3, [r7, #23]
          break;
 800808a:	e000      	b.n	800808e <USBD_MSC_Setup+0x1e6>
          break;
 800808c:	bf00      	nop
      }
      break;
 800808e:	e006      	b.n	800809e <USBD_MSC_Setup+0x1f6>

    default:
      USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f003 f8e1 	bl	800b25a <USBD_CtlError>
      ret = USBD_FAIL;
 8008098:	2303      	movs	r3, #3
 800809a:	75fb      	strb	r3, [r7, #23]
      break;
 800809c:	bf00      	nop
  }

  return (uint8_t)ret;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f959 	bl	8008370 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f983 	bl	80083e4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80080f0:	2181      	movs	r1, #129	@ 0x81
 80080f2:	4812      	ldr	r0, [pc, #72]	@ (800813c <USBD_MSC_GetHSCfgDesc+0x54>)
 80080f4:	f002 fa79 	bl	800a5ea <USBD_GetEpDesc>
 80080f8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80080fa:	2101      	movs	r1, #1
 80080fc:	480f      	ldr	r0, [pc, #60]	@ (800813c <USBD_MSC_GetHSCfgDesc+0x54>)
 80080fe:	f002 fa74 	bl	800a5ea <USBD_GetEpDesc>
 8008102:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d006      	beq.n	8008118 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2200      	movs	r2, #0
 800810e:	711a      	strb	r2, [r3, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f042 0202 	orr.w	r2, r2, #2
 8008116:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d006      	beq.n	800812c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	711a      	strb	r2, [r3, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f042 0202 	orr.w	r2, r2, #2
 800812a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2220      	movs	r2, #32
 8008130:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8008132:	4b02      	ldr	r3, [pc, #8]	@ (800813c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	2000005c 	.word	0x2000005c

08008140 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8008148:	2181      	movs	r1, #129	@ 0x81
 800814a:	4812      	ldr	r0, [pc, #72]	@ (8008194 <USBD_MSC_GetFSCfgDesc+0x54>)
 800814c:	f002 fa4d 	bl	800a5ea <USBD_GetEpDesc>
 8008150:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8008152:	2101      	movs	r1, #1
 8008154:	480f      	ldr	r0, [pc, #60]	@ (8008194 <USBD_MSC_GetFSCfgDesc+0x54>)
 8008156:	f002 fa48 	bl	800a5ea <USBD_GetEpDesc>
 800815a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d006      	beq.n	8008170 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800816a:	711a      	strb	r2, [r3, #4]
 800816c:	2200      	movs	r2, #0
 800816e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	2200      	movs	r2, #0
 800817a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800817e:	711a      	strb	r2, [r3, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2220      	movs	r2, #32
 8008188:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800818a:	4b02      	ldr	r3, [pc, #8]	@ (8008194 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	2000005c 	.word	0x2000005c

08008198 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80081a0:	2181      	movs	r1, #129	@ 0x81
 80081a2:	4812      	ldr	r0, [pc, #72]	@ (80081ec <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80081a4:	f002 fa21 	bl	800a5ea <USBD_GetEpDesc>
 80081a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80081aa:	2101      	movs	r1, #1
 80081ac:	480f      	ldr	r0, [pc, #60]	@ (80081ec <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80081ae:	f002 fa1c 	bl	800a5ea <USBD_GetEpDesc>
 80081b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d006      	beq.n	80081c8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081c2:	711a      	strb	r2, [r3, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d006      	beq.n	80081dc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081d6:	711a      	strb	r2, [r3, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2220      	movs	r2, #32
 80081e0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80081e2:	4b02      	ldr	r3, [pc, #8]	@ (80081ec <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	2000005c 	.word	0x2000005c

080081f0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	220a      	movs	r2, #10
 80081fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80081fe:	4b03      	ldr	r3, [pc, #12]	@ (800820c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	2000007c 	.word	0x2000007c

08008210 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008220:	2303      	movs	r3, #3
 8008222:	e009      	b.n	8008238 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	33b0      	adds	r3, #176	@ 0xb0
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	32b0      	adds	r2, #176	@ 0xb0
 8008256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d032      	beq.n	80082c8 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	33b0      	adds	r3, #176	@ 0xb0
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2000      	movs	r0, #0
 800829a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 800829c:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <MSC_BOT_Init+0x8c>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f007 fb64 	bl	800f970 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <MSC_BOT_Init+0x90>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f007 fb5e 	bl	800f970 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80082b4:	4b06      	ldr	r3, [pc, #24]	@ (80082d0 <MSC_BOT_Init+0x8c>)
 80082b6:	7819      	ldrb	r1, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80082be:	231f      	movs	r3, #31
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f007 fc1e 	bl	800fb02 <USBD_LL_PrepareReceive>
 80082c6:	e000      	b.n	80082ca <MSC_BOT_Init+0x86>
    return;
 80082c8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000087 	.word	0x20000087
 80082d4:	20000086 	.word	0x20000086

080082d8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	32b0      	adds	r2, #176	@ 0xb0
 80082ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d01b      	beq.n	800832e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8008302:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <MSC_BOT_Reset+0x60>)
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f007 fb6f 	bl	800f9ec <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800830e:	4b0b      	ldr	r3, [pc, #44]	@ (800833c <MSC_BOT_Reset+0x64>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f007 fb69 	bl	800f9ec <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800831a:	4b08      	ldr	r3, [pc, #32]	@ (800833c <MSC_BOT_Reset+0x64>)
 800831c:	7819      	ldrb	r1, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8008324:	231f      	movs	r3, #31
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f007 fbeb 	bl	800fb02 <USBD_LL_PrepareReceive>
 800832c:	e000      	b.n	8008330 <MSC_BOT_Reset+0x58>
    return;
 800832e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000086 	.word	0x20000086
 800833c:	20000087 	.word	0x20000087

08008340 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	32b0      	adds	r2, #176	@ 0xb0
 8008352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008356:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2200      	movs	r2, #0
 8008362:	721a      	strb	r2, [r3, #8]
  }
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	32b0      	adds	r2, #176	@ 0xb0
 8008386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d020      	beq.n	80083d4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	7a1b      	ldrb	r3, [r3, #8]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d005      	beq.n	80083a6 <MSC_BOT_DataIn+0x36>
 800839a:	2b02      	cmp	r3, #2
 800839c:	db1c      	blt.n	80083d8 <MSC_BOT_DataIn+0x68>
 800839e:	3b03      	subs	r3, #3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d819      	bhi.n	80083d8 <MSC_BOT_DataIn+0x68>
 80083a4:	e011      	b.n	80083ca <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80083b2:	461a      	mov	r2, r3
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f9cb 	bl	8008750 <SCSI_ProcessCmd>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	da0d      	bge.n	80083dc <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80083c0:	2101      	movs	r1, #1
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f90e 	bl	80085e4 <MSC_BOT_SendCSW>
      }
      break;
 80083c8:	e008      	b.n	80083dc <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80083ca:	2100      	movs	r1, #0
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f909 	bl	80085e4 <MSC_BOT_SendCSW>
      break;
 80083d2:	e004      	b.n	80083de <MSC_BOT_DataIn+0x6e>
    return;
 80083d4:	bf00      	nop
 80083d6:	e002      	b.n	80083de <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80083d8:	bf00      	nop
 80083da:	e000      	b.n	80083de <MSC_BOT_DataIn+0x6e>
      break;
 80083dc:	bf00      	nop
  }
}
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	460b      	mov	r3, r1
 80083ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	32b0      	adds	r2, #176	@ 0xb0
 80083fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d01c      	beq.n	8008440 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	7a1b      	ldrb	r3, [r3, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <MSC_BOT_DataOut+0x30>
 800840e:	2b01      	cmp	r3, #1
 8008410:	d004      	beq.n	800841c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8008412:	e018      	b.n	8008446 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f819 	bl	800844c <MSC_BOT_CBW_Decode>
      break;
 800841a:	e014      	b.n	8008446 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8008428:	461a      	mov	r2, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f990 	bl	8008750 <SCSI_ProcessCmd>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	da06      	bge.n	8008444 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008436:	2101      	movs	r1, #1
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f8d3 	bl	80085e4 <MSC_BOT_SendCSW>
      break;
 800843e:	e001      	b.n	8008444 <MSC_BOT_DataOut+0x60>
    return;
 8008440:	bf00      	nop
 8008442:	e000      	b.n	8008446 <MSC_BOT_DataOut+0x62>
      break;
 8008444:	bf00      	nop
  }
}
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	32b0      	adds	r2, #176	@ 0xb0
 800845e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008462:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d07c      	beq.n	8008564 <MSC_BOT_CBW_Decode+0x118>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8008482:	4b3b      	ldr	r3, [pc, #236]	@ (8008570 <MSC_BOT_CBW_Decode+0x124>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f007 fb5b 	bl	800fb44 <USBD_LL_GetRxDataSize>
 800848e:	4603      	mov	r3, r0
 8008490:	2b1f      	cmp	r3, #31
 8008492:	d117      	bne.n	80084c4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800849a:	4a36      	ldr	r2, [pc, #216]	@ (8008574 <MSC_BOT_CBW_Decode+0x128>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d111      	bne.n	80084c4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 80084a6:	461a      	mov	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d809      	bhi.n	80084c4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	d90e      	bls.n	80084e2 <MSC_BOT_CBW_Decode+0x96>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80084ca:	2320      	movs	r3, #32
 80084cc:	2205      	movs	r2, #5
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fe85 	bl	80091de <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2202      	movs	r2, #2
 80084d8:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 f8bc 	bl	8008658 <MSC_BOT_Abort>
 80084e0:	e043      	b.n	800856a <MSC_BOT_CBW_Decode+0x11e>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80084ee:	461a      	mov	r2, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f92d 	bl	8008750 <SCSI_ProcessCmd>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	da0c      	bge.n	8008516 <MSC_BOT_CBW_Decode+0xca>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	7a1b      	ldrb	r3, [r3, #8]
 8008500:	2b05      	cmp	r3, #5
 8008502:	d104      	bne.n	800850e <MSC_BOT_CBW_Decode+0xc2>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008504:	2101      	movs	r1, #1
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f86c 	bl	80085e4 <MSC_BOT_SendCSW>
 800850c:	e02d      	b.n	800856a <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8a2 	bl	8008658 <MSC_BOT_Abort>
 8008514:	e029      	b.n	800856a <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	7a1b      	ldrb	r3, [r3, #8]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d024      	beq.n	8008568 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8008522:	2b01      	cmp	r3, #1
 8008524:	d020      	beq.n	8008568 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800852a:	2b03      	cmp	r3, #3
 800852c:	d01c      	beq.n	8008568 <MSC_BOT_CBW_Decode+0x11c>
    {
      if (hmsc->bot_data_length > 0U)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d009      	beq.n	800854a <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f103 0110 	add.w	r1, r3, #16
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	461a      	mov	r2, r3
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f818 	bl	8008578 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8008548:	e00f      	b.n	800856a <MSC_BOT_CBW_Decode+0x11e>
      }
      else if (hmsc->bot_data_length == 0U)
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d104      	bne.n	800855c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008552:	2100      	movs	r1, #0
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 f845 	bl	80085e4 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800855a:	e006      	b.n	800856a <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 f87b 	bl	8008658 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8008562:	e002      	b.n	800856a <MSC_BOT_CBW_Decode+0x11e>
    return;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    else
    {
      return;
 8008568:	bf00      	nop
    }
  }
}
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000087 	.word	0x20000087
 8008574:	43425355 	.word	0x43425355

08008578 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	32b0      	adds	r2, #176	@ 0xb0
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d01e      	beq.n	80085d8 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4293      	cmp	r3, r2
 80085a4:	bf28      	it	cs
 80085a6:	4613      	movcs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	1ad2      	subs	r2, r2, r3
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2204      	movs	r2, #4
 80085c6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 80085c8:	4b05      	ldr	r3, [pc, #20]	@ (80085e0 <MSC_BOT_SendData+0x68>)
 80085ca:	7819      	ldrb	r1, [r3, #0]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f007 fa75 	bl	800fac0 <USBD_LL_Transmit>
 80085d6:	e000      	b.n	80085da <MSC_BOT_SendData+0x62>
    return;
 80085d8:	bf00      	nop
}
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000086 	.word	0x20000086

080085e4 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	460b      	mov	r3, r1
 80085ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	32b0      	adds	r2, #176	@ 0xb0
 80085fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01d      	beq.n	8008642 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a10      	ldr	r2, [pc, #64]	@ (800864c <MSC_BOT_SendCSW+0x68>)
 800860a:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800861c:	4b0c      	ldr	r3, [pc, #48]	@ (8008650 <MSC_BOT_SendCSW+0x6c>)
 800861e:	7819      	ldrb	r1, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8008626:	230d      	movs	r3, #13
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f007 fa49 	bl	800fac0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <MSC_BOT_SendCSW+0x70>)
 8008630:	7819      	ldrb	r1, [r3, #0]
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8008638:	231f      	movs	r3, #31
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f007 fa61 	bl	800fb02 <USBD_LL_PrepareReceive>
 8008640:	e000      	b.n	8008644 <MSC_BOT_SendCSW+0x60>
    return;
 8008642:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	53425355 	.word	0x53425355
 8008650:	20000086 	.word	0x20000086
 8008654:	20000087 	.word	0x20000087

08008658 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	32b0      	adds	r2, #176	@ 0xb0
 800866a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d02a      	beq.n	80086cc <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10e      	bne.n	800869e <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800868e:	2b00      	cmp	r3, #0
 8008690:	d105      	bne.n	800869e <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008692:	4b10      	ldr	r3, [pc, #64]	@ (80086d4 <MSC_BOT_Abort+0x7c>)
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f007 f988 	bl	800f9ae <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800869e:	4b0e      	ldr	r3, [pc, #56]	@ (80086d8 <MSC_BOT_Abort+0x80>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f007 f982 	bl	800f9ae <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	7a5b      	ldrb	r3, [r3, #9]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d10d      	bne.n	80086ce <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80086b2:	4b09      	ldr	r3, [pc, #36]	@ (80086d8 <MSC_BOT_Abort+0x80>)
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f007 f978 	bl	800f9ae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80086be:	4b05      	ldr	r3, [pc, #20]	@ (80086d4 <MSC_BOT_Abort+0x7c>)
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f007 f972 	bl	800f9ae <USBD_LL_StallEP>
 80086ca:	e000      	b.n	80086ce <MSC_BOT_Abort+0x76>
    return;
 80086cc:	bf00      	nop
  }
}
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000087 	.word	0x20000087
 80086d8:	20000086 	.word	0x20000086

080086dc <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	32b0      	adds	r2, #176	@ 0xb0
 80086f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d01d      	beq.n	800873a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	7a5b      	ldrb	r3, [r3, #9]
 8008702:	2b02      	cmp	r3, #2
 8008704:	d10c      	bne.n	8008720 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8008706:	4b10      	ldr	r3, [pc, #64]	@ (8008748 <MSC_BOT_CplClrFeature+0x6c>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f007 f94e 	bl	800f9ae <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8008712:	4b0e      	ldr	r3, [pc, #56]	@ (800874c <MSC_BOT_CplClrFeature+0x70>)
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f007 f948 	bl	800f9ae <USBD_LL_StallEP>
 800871e:	e00f      	b.n	8008740 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8008720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008724:	2b00      	cmp	r3, #0
 8008726:	da0a      	bge.n	800873e <MSC_BOT_CplClrFeature+0x62>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7a5b      	ldrb	r3, [r3, #9]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d006      	beq.n	800873e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8008730:	2101      	movs	r1, #1
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff ff56 	bl	80085e4 <MSC_BOT_SendCSW>
 8008738:	e002      	b.n	8008740 <MSC_BOT_CplClrFeature+0x64>
    return;
 800873a:	bf00      	nop
 800873c:	e000      	b.n	8008740 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800873e:	bf00      	nop
  }
}
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000086 	.word	0x20000086
 800874c:	20000087 	.word	0x20000087

08008750 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	460b      	mov	r3, r1
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	32b0      	adds	r2, #176	@ 0xb0
 8008768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8008774:	f04f 33ff 	mov.w	r3, #4294967295
 8008778:	e18f      	b.n	8008a9a <SCSI_ProcessCmd+0x34a>
  }

  switch (cmd[0])
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008780:	f300 80e0 	bgt.w	8008944 <SCSI_ProcessCmd+0x1f4>
 8008784:	2b00      	cmp	r3, #0
 8008786:	da21      	bge.n	80087cc <SCSI_ProcessCmd+0x7c>
 8008788:	e17c      	b.n	8008a84 <SCSI_ProcessCmd+0x334>
 800878a:	3b9e      	subs	r3, #158	@ 0x9e
 800878c:	2b0c      	cmp	r3, #12
 800878e:	f200 8179 	bhi.w	8008a84 <SCSI_ProcessCmd+0x334>
 8008792:	a201      	add	r2, pc, #4	@ (adr r2, 8008798 <SCSI_ProcessCmd+0x48>)
 8008794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008798:	080089f5 	.word	0x080089f5
 800879c:	08008a85 	.word	0x08008a85
 80087a0:	08008a61 	.word	0x08008a61
 80087a4:	08008a85 	.word	0x08008a85
 80087a8:	08008a85 	.word	0x08008a85
 80087ac:	08008a85 	.word	0x08008a85
 80087b0:	08008a85 	.word	0x08008a85
 80087b4:	08008a85 	.word	0x08008a85
 80087b8:	08008a85 	.word	0x08008a85
 80087bc:	08008a85 	.word	0x08008a85
 80087c0:	08008a19 	.word	0x08008a19
 80087c4:	08008a85 	.word	0x08008a85
 80087c8:	08008a3d 	.word	0x08008a3d
 80087cc:	2b5a      	cmp	r3, #90	@ 0x5a
 80087ce:	f200 8159 	bhi.w	8008a84 <SCSI_ProcessCmd+0x334>
 80087d2:	a201      	add	r2, pc, #4	@ (adr r2, 80087d8 <SCSI_ProcessCmd+0x88>)
 80087d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d8:	08008953 	.word	0x08008953
 80087dc:	08008a85 	.word	0x08008a85
 80087e0:	08008a85 	.word	0x08008a85
 80087e4:	08008965 	.word	0x08008965
 80087e8:	08008a85 	.word	0x08008a85
 80087ec:	08008a85 	.word	0x08008a85
 80087f0:	08008a85 	.word	0x08008a85
 80087f4:	08008a85 	.word	0x08008a85
 80087f8:	08008a85 	.word	0x08008a85
 80087fc:	08008a85 	.word	0x08008a85
 8008800:	08008a85 	.word	0x08008a85
 8008804:	08008a85 	.word	0x08008a85
 8008808:	08008a85 	.word	0x08008a85
 800880c:	08008a85 	.word	0x08008a85
 8008810:	08008a85 	.word	0x08008a85
 8008814:	08008a85 	.word	0x08008a85
 8008818:	08008a85 	.word	0x08008a85
 800881c:	08008a85 	.word	0x08008a85
 8008820:	08008977 	.word	0x08008977
 8008824:	08008a85 	.word	0x08008a85
 8008828:	08008a85 	.word	0x08008a85
 800882c:	08008a85 	.word	0x08008a85
 8008830:	08008a85 	.word	0x08008a85
 8008834:	08008a85 	.word	0x08008a85
 8008838:	08008a85 	.word	0x08008a85
 800883c:	08008a85 	.word	0x08008a85
 8008840:	080089ad 	.word	0x080089ad
 8008844:	08008989 	.word	0x08008989
 8008848:	08008a73 	.word	0x08008a73
 800884c:	08008a85 	.word	0x08008a85
 8008850:	0800899b 	.word	0x0800899b
 8008854:	08008a85 	.word	0x08008a85
 8008858:	08008a85 	.word	0x08008a85
 800885c:	08008a85 	.word	0x08008a85
 8008860:	08008a85 	.word	0x08008a85
 8008864:	080089d1 	.word	0x080089d1
 8008868:	08008a85 	.word	0x08008a85
 800886c:	080089e3 	.word	0x080089e3
 8008870:	08008a85 	.word	0x08008a85
 8008874:	08008a85 	.word	0x08008a85
 8008878:	08008a07 	.word	0x08008a07
 800887c:	08008a85 	.word	0x08008a85
 8008880:	08008a2b 	.word	0x08008a2b
 8008884:	08008a85 	.word	0x08008a85
 8008888:	08008a85 	.word	0x08008a85
 800888c:	08008a85 	.word	0x08008a85
 8008890:	08008a85 	.word	0x08008a85
 8008894:	08008a4f 	.word	0x08008a4f
 8008898:	08008a85 	.word	0x08008a85
 800889c:	08008a85 	.word	0x08008a85
 80088a0:	08008a85 	.word	0x08008a85
 80088a4:	08008a85 	.word	0x08008a85
 80088a8:	08008a85 	.word	0x08008a85
 80088ac:	08008a85 	.word	0x08008a85
 80088b0:	08008a85 	.word	0x08008a85
 80088b4:	08008a85 	.word	0x08008a85
 80088b8:	08008a85 	.word	0x08008a85
 80088bc:	08008a85 	.word	0x08008a85
 80088c0:	08008a85 	.word	0x08008a85
 80088c4:	08008a85 	.word	0x08008a85
 80088c8:	08008a85 	.word	0x08008a85
 80088cc:	08008a85 	.word	0x08008a85
 80088d0:	08008a85 	.word	0x08008a85
 80088d4:	08008a85 	.word	0x08008a85
 80088d8:	08008a85 	.word	0x08008a85
 80088dc:	08008a85 	.word	0x08008a85
 80088e0:	08008a85 	.word	0x08008a85
 80088e4:	08008a85 	.word	0x08008a85
 80088e8:	08008a85 	.word	0x08008a85
 80088ec:	08008a85 	.word	0x08008a85
 80088f0:	08008a85 	.word	0x08008a85
 80088f4:	08008a85 	.word	0x08008a85
 80088f8:	08008a85 	.word	0x08008a85
 80088fc:	08008a85 	.word	0x08008a85
 8008900:	08008a85 	.word	0x08008a85
 8008904:	08008a85 	.word	0x08008a85
 8008908:	08008a85 	.word	0x08008a85
 800890c:	08008a85 	.word	0x08008a85
 8008910:	08008a85 	.word	0x08008a85
 8008914:	08008a85 	.word	0x08008a85
 8008918:	08008a85 	.word	0x08008a85
 800891c:	08008a85 	.word	0x08008a85
 8008920:	08008a85 	.word	0x08008a85
 8008924:	08008a85 	.word	0x08008a85
 8008928:	08008a85 	.word	0x08008a85
 800892c:	08008a85 	.word	0x08008a85
 8008930:	08008a85 	.word	0x08008a85
 8008934:	08008a85 	.word	0x08008a85
 8008938:	08008a85 	.word	0x08008a85
 800893c:	08008a85 	.word	0x08008a85
 8008940:	080089bf 	.word	0x080089bf
 8008944:	2baa      	cmp	r3, #170	@ 0xaa
 8008946:	f300 809d 	bgt.w	8008a84 <SCSI_ProcessCmd+0x334>
 800894a:	2b9e      	cmp	r3, #158	@ 0x9e
 800894c:	f6bf af1d 	bge.w	800878a <SCSI_ProcessCmd+0x3a>
 8008950:	e098      	b.n	8008a84 <SCSI_ProcessCmd+0x334>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	4619      	mov	r1, r3
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 f8a3 	bl	8008aa4 <SCSI_TestUnitReady>
 800895e:	4603      	mov	r3, r0
 8008960:	75fb      	strb	r3, [r7, #23]
      break;
 8008962:	e098      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8008964:	7afb      	ldrb	r3, [r7, #11]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	4619      	mov	r1, r3
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fbb4 	bl	80090d8 <SCSI_RequestSense>
 8008970:	4603      	mov	r3, r0
 8008972:	75fb      	strb	r3, [r7, #23]
      break;
 8008974:	e08f      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8008976:	7afb      	ldrb	r3, [r7, #11]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	4619      	mov	r1, r3
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 f8eb 	bl	8008b58 <SCSI_Inquiry>
 8008982:	4603      	mov	r3, r0
 8008984:	75fb      	strb	r3, [r7, #23]
      break;
 8008986:	e086      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4619      	mov	r1, r3
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f000 fc70 	bl	8009274 <SCSI_StartStopUnit>
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]
      break;
 8008998:	e07d      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800899a:	7afb      	ldrb	r3, [r7, #11]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	4619      	mov	r1, r3
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 fcbc 	bl	800931e <SCSI_AllowPreventRemovable>
 80089a6:	4603      	mov	r3, r0
 80089a8:	75fb      	strb	r3, [r7, #23]
      break;
 80089aa:	e074      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	4619      	mov	r1, r3
 80089b2:	68f8      	ldr	r0, [r7, #12]
 80089b4:	f000 faf2 	bl	8008f9c <SCSI_ModeSense6>
 80089b8:	4603      	mov	r3, r0
 80089ba:	75fb      	strb	r3, [r7, #23]
      break;
 80089bc:	e06b      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	4619      	mov	r1, r3
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fb39 	bl	800903c <SCSI_ModeSense10>
 80089ca:	4603      	mov	r3, r0
 80089cc:	75fb      	strb	r3, [r7, #23]
      break;
 80089ce:	e062      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	4619      	mov	r1, r3
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f000 fa64 	bl	8008ea4 <SCSI_ReadFormatCapacity>
 80089dc:	4603      	mov	r3, r0
 80089de:	75fb      	strb	r3, [r7, #23]
      break;
 80089e0:	e059      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80089e2:	7afb      	ldrb	r3, [r7, #11]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 f931 	bl	8008c50 <SCSI_ReadCapacity10>
 80089ee:	4603      	mov	r3, r0
 80089f0:	75fb      	strb	r3, [r7, #23]
      break;
 80089f2:	e050      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80089f4:	7afb      	ldrb	r3, [r7, #11]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	4619      	mov	r1, r3
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 f9a2 	bl	8008d44 <SCSI_ReadCapacity16>
 8008a00:	4603      	mov	r3, r0
 8008a02:	75fb      	strb	r3, [r7, #23]
      break;
 8008a04:	e047      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8008a06:	7afb      	ldrb	r3, [r7, #11]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 fcb3 	bl	8009378 <SCSI_Read10>
 8008a12:	4603      	mov	r3, r0
 8008a14:	75fb      	strb	r3, [r7, #23]
      break;
 8008a16:	e03e      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fd54 	bl	80094cc <SCSI_Read12>
 8008a24:	4603      	mov	r3, r0
 8008a26:	75fb      	strb	r3, [r7, #23]
      break;
 8008a28:	e035      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	68f8      	ldr	r0, [r7, #12]
 8008a32:	f000 fe01 	bl	8009638 <SCSI_Write10>
 8008a36:	4603      	mov	r3, r0
 8008a38:	75fb      	strb	r3, [r7, #23]
      break;
 8008a3a:	e02c      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8008a3c:	7afb      	ldrb	r3, [r7, #11]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	4619      	mov	r1, r3
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f000 fed0 	bl	80097e8 <SCSI_Write12>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a4c:	e023      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8008a4e:	7afb      	ldrb	r3, [r7, #11]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	4619      	mov	r1, r3
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 ffaf 	bl	80099b8 <SCSI_Verify10>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a5e:	e01a      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_REPORT_LUNS:
      ret = SCSI_ReportLuns(pdev, lun, cmd);
 8008a60:	7afb      	ldrb	r3, [r7, #11]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	4619      	mov	r1, r3
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	f000 ffe8 	bl	8009a3c <SCSI_ReportLuns>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8008a70:	e011      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    case SCSI_RECEIVE_DIAGNOSTIC_RESULTS:
      ret = SCSI_ReceiveDiagnosticResults(pdev, lun, cmd);
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	4619      	mov	r1, r3
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f001 f835 	bl	8009ae8 <SCSI_ReceiveDiagnosticResults>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	75fb      	strb	r3, [r7, #23]
      break;
 8008a82:	e008      	b.n	8008a96 <SCSI_ProcessCmd+0x346>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8008a84:	7af9      	ldrb	r1, [r7, #11]
 8008a86:	2320      	movs	r3, #32
 8008a88:	2205      	movs	r2, #5
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	f000 fba7 	bl	80091de <SCSI_SenseCode>
      ret = -1;
 8008a90:	23ff      	movs	r3, #255	@ 0xff
 8008a92:	75fb      	strb	r3, [r7, #23]
      break;
 8008a94:	bf00      	nop
  }

  return ret;
 8008a96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop

08008aa4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	460b      	mov	r3, r1
 8008aae:	607a      	str	r2, [r7, #4]
 8008ab0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	32b0      	adds	r2, #176	@ 0xb0
 8008abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8008ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8008acc:	e03f      	b.n	8008b4e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00a      	beq.n	8008aee <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008ade:	2320      	movs	r3, #32
 8008ae0:	2205      	movs	r2, #5
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 fb7b 	bl	80091de <SCSI_SenseCode>

    return -1;
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aec:	e02f      	b.n	8008b4e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d10b      	bne.n	8008b10 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008af8:	7af9      	ldrb	r1, [r7, #11]
 8008afa:	233a      	movs	r3, #58	@ 0x3a
 8008afc:	2202      	movs	r2, #2
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fb6d 	bl	80091de <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2205      	movs	r2, #5
 8008b08:	721a      	strb	r2, [r3, #8]
    return -1;
 8008b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0e:	e01e      	b.n	8008b4e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	33b0      	adds	r3, #176	@ 0xb0
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	7afa      	ldrb	r2, [r7, #11]
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008b2e:	7af9      	ldrb	r1, [r7, #11]
 8008b30:	233a      	movs	r3, #58	@ 0x3a
 8008b32:	2202      	movs	r2, #2
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fb52 	bl	80091de <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2205      	movs	r2, #5
 8008b3e:	721a      	strb	r2, [r3, #8]

    return -1;
 8008b40:	f04f 33ff 	mov.w	r3, #4294967295
 8008b44:	e003      	b.n	8008b4e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	60da      	str	r2, [r3, #12]

  return 0;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b088      	sub	sp, #32
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60f8      	str	r0, [r7, #12]
 8008b60:	460b      	mov	r3, r1
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	32b0      	adds	r2, #176	@ 0xb0
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	e05e      	b.n	8008c40 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10a      	bne.n	8008ba2 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008b92:	2320      	movs	r3, #32
 8008b94:	2205      	movs	r2, #5
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 fb21 	bl	80091de <SCSI_SenseCode>
    return -1;
 8008b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba0:	e04e      	b.n	8008c40 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f003 0301 	and.w	r3, r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d020      	beq.n	8008bf2 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d105      	bne.n	8008bc6 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8008bba:	2206      	movs	r2, #6
 8008bbc:	4922      	ldr	r1, [pc, #136]	@ (8008c48 <SCSI_Inquiry+0xf0>)
 8008bbe:	69b8      	ldr	r0, [r7, #24]
 8008bc0:	f001 f908 	bl	8009dd4 <SCSI_UpdateBotData>
 8008bc4:	e03b      	b.n	8008c3e <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	3302      	adds	r3, #2
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b80      	cmp	r3, #128	@ 0x80
 8008bce:	d105      	bne.n	8008bdc <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8008bd0:	2208      	movs	r2, #8
 8008bd2:	491e      	ldr	r1, [pc, #120]	@ (8008c4c <SCSI_Inquiry+0xf4>)
 8008bd4:	69b8      	ldr	r0, [r7, #24]
 8008bd6:	f001 f8fd 	bl	8009dd4 <SCSI_UpdateBotData>
 8008bda:	e030      	b.n	8008c3e <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008be2:	2324      	movs	r3, #36	@ 0x24
 8008be4:	2205      	movs	r2, #5
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 faf9 	bl	80091de <SCSI_SenseCode>
                     INVALID_FIELD_IN_COMMAND);

      return -1;
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf0:	e026      	b.n	8008c40 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	33b0      	adds	r3, #176	@ 0xb0
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8008c02:	69d9      	ldr	r1, [r3, #28]
 8008c04:	7afa      	ldrb	r2, [r7, #11]
 8008c06:	4613      	mov	r3, r2
 8008c08:	00db      	lsls	r3, r3, #3
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8008c0e:	440b      	add	r3, r1
 8008c10:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	3304      	adds	r3, #4
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	3305      	adds	r3, #5
 8008c1a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	461a      	mov	r2, r3
 8008c24:	8bfb      	ldrh	r3, [r7, #30]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d303      	bcc.n	8008c32 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8008c32:	8bfb      	ldrh	r3, [r7, #30]
 8008c34:	461a      	mov	r2, r3
 8008c36:	6979      	ldr	r1, [r7, #20]
 8008c38:	69b8      	ldr	r0, [r7, #24]
 8008c3a:	f001 f8cb 	bl	8009dd4 <SCSI_UpdateBotData>
  }

  return 0;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	20000088 	.word	0x20000088
 8008c4c:	20000090 	.word	0x20000090

08008c50 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b088      	sub	sp, #32
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	32b0      	adds	r2, #176	@ 0xb0
 8008c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6c:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008c6e:	7afb      	ldrb	r3, [r7, #11]
 8008c70:	3326      	adds	r3, #38	@ 0x26
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	4413      	add	r3, r2
 8008c78:	3304      	adds	r3, #4
 8008c7a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <SCSI_ReadCapacity10+0x38>
  {
    return -1;
 8008c82:	f04f 33ff 	mov.w	r3, #4294967295
 8008c86:	e059      	b.n	8008d3c <SCSI_ReadCapacity10+0xec>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	33b0      	adds	r3, #176	@ 0xb0
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	1d11      	adds	r1, r2, #4
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	7af8      	ldrb	r0, [r7, #11]
 8008ca2:	4798      	blx	r3
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d104      	bne.n	8008cba <SCSI_ReadCapacity10+0x6a>
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d108      	bne.n	8008ccc <SCSI_ReadCapacity10+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008cba:	7af9      	ldrb	r1, [r7, #11]
 8008cbc:	233a      	movs	r3, #58	@ 0x3a
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f000 fa8c 	bl	80091de <SCSI_SenseCode>
    return -1;
 8008cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cca:	e037      	b.n	8008d3c <SCSI_ReadCapacity10+0xec>
  }

  hmsc->bot_data[0] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	0e1b      	lsrs	r3, r3, #24
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	0a1b      	lsrs	r3, r3, #8
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(p_scsi_blk->size >> 24);
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	881b      	ldrh	r3, [r3, #0]
 8008d08:	161b      	asrs	r3, r3, #24
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(p_scsi_blk->size >> 16);
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	141b      	asrs	r3, r3, #16
 8008d16:	b2da      	uxtb	r2, r3
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(p_scsi_blk->size >> 8);
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->size);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	881b      	ldrh	r3, [r3, #0]
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	2208      	movs	r2, #8
 8008d38:	60da      	str	r2, [r3, #12]

  return 0;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3720      	adds	r7, #32
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	607a      	str	r2, [r7, #4]
 8008d50:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	32b0      	adds	r2, #176	@ 0xb0
 8008d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d60:	61bb      	str	r3, [r7, #24]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008d62:	7afb      	ldrb	r3, [r7, #11]
 8008d64:	3326      	adds	r3, #38	@ 0x26
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <SCSI_ReadCapacity16+0x38>
  {
    return -1;
 8008d76:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7a:	e08f      	b.n	8008e9c <SCSI_ReadCapacity16+0x158>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	33b0      	adds	r3, #176	@ 0xb0
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	1d11      	adds	r1, r2, #4
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	7af8      	ldrb	r0, [r7, #11]
 8008d96:	4798      	blx	r3
 8008d98:	4603      	mov	r3, r0
 8008d9a:	74fb      	strb	r3, [r7, #19]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008d9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <SCSI_ReadCapacity16+0x6a>
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d108      	bne.n	8008dc0 <SCSI_ReadCapacity16+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008dae:	7af9      	ldrb	r1, [r7, #11]
 8008db0:	233a      	movs	r3, #58	@ 0x3a
 8008db2:	2202      	movs	r2, #2
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 fa12 	bl	80091de <SCSI_SenseCode>
    return -1;
 8008dba:	f04f 33ff 	mov.w	r3, #4294967295
 8008dbe:	e06d      	b.n	8008e9c <SCSI_ReadCapacity16+0x158>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	330a      	adds	r3, #10
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	330b      	adds	r3, #11
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008dd0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	330c      	adds	r3, #12
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008dda:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	320d      	adds	r2, #13
 8008de0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008de2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
 8008dec:	e008      	b.n	8008e00 <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	4413      	add	r3, r2
 8008df4:	3310      	adds	r3, #16
 8008df6:	2200      	movs	r2, #0
 8008df8:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	61fb      	str	r3, [r7, #28]
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	69fa      	ldr	r2, [r7, #28]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d3f1      	bcc.n	8008dee <SCSI_ReadCapacity16+0xaa>
  }

  hmsc->bot_data[4] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	0e1b      	lsrs	r3, r3, #24
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	0c1b      	lsrs	r3, r3, #16
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	0a1b      	lsrs	r3, r3, #8
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	69bb      	ldr	r3, [r7, #24]
 8008e40:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(p_scsi_blk->size >>  24);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	881b      	ldrh	r3, [r3, #0]
 8008e46:	161b      	asrs	r3, r3, #24
 8008e48:	b2da      	uxtb	r2, r3
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(p_scsi_blk->size >>  16);
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	141b      	asrs	r3, r3, #16
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(p_scsi_blk->size >>  8);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	0a1b      	lsrs	r3, r3, #8
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(p_scsi_blk->size);
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	330a      	adds	r3, #10
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	330b      	adds	r3, #11
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008e82:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	330c      	adds	r3, #12
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008e8c:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	320d      	adds	r2, #13
 8008e92:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008e94:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	60da      	str	r2, [r3, #12]

  return 0;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3720      	adds	r7, #32
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	460b      	mov	r3, r1
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	32b0      	adds	r2, #176	@ 0xb0
 8008ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	e061      	b.n	8008f92 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	33b0      	adds	r3, #176	@ 0xb0
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4413      	add	r3, r2
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f107 0214 	add.w	r2, r7, #20
 8008ee4:	f107 0110 	add.w	r1, r7, #16
 8008ee8:	7af8      	ldrb	r0, [r7, #11]
 8008eea:	4798      	blx	r3
 8008eec:	4603      	mov	r3, r0
 8008eee:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <SCSI_ReadFormatCapacity+0x5e>
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d108      	bne.n	8008f14 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008f02:	7af9      	ldrb	r1, [r7, #11]
 8008f04:	233a      	movs	r3, #58	@ 0x3a
 8008f06:	2202      	movs	r2, #2
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f968 	bl	80091de <SCSI_SenseCode>
    return -1;
 8008f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f12:	e03e      	b.n	8008f92 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8008f14:	2300      	movs	r3, #0
 8008f16:	83fb      	strh	r3, [r7, #30]
 8008f18:	e007      	b.n	8008f2a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8008f1a:	8bfb      	ldrh	r3, [r7, #30]
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	4413      	add	r3, r2
 8008f20:	2200      	movs	r2, #0
 8008f22:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8008f24:	8bfb      	ldrh	r3, [r7, #30]
 8008f26:	3301      	adds	r3, #1
 8008f28:	83fb      	strh	r3, [r7, #30]
 8008f2a:	8bfb      	ldrh	r3, [r7, #30]
 8008f2c:	2b0b      	cmp	r3, #11
 8008f2e:	d9f4      	bls.n	8008f1a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	2208      	movs	r2, #8
 8008f34:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	0e1b      	lsrs	r3, r3, #24
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	0c1b      	lsrs	r3, r3, #16
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	0a1b      	lsrs	r3, r3, #8
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8008f66:	69bb      	ldr	r3, [r7, #24]
 8008f68:	2202      	movs	r2, #2
 8008f6a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008f6c:	8abb      	ldrh	r3, [r7, #20]
 8008f6e:	141b      	asrs	r3, r3, #16
 8008f70:	b2da      	uxtb	r2, r3
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008f76:	8abb      	ldrh	r3, [r7, #20]
 8008f78:	0a1b      	lsrs	r3, r3, #8
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8008f82:	8abb      	ldrh	r3, [r7, #20]
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	220c      	movs	r2, #12
 8008f8e:	60da      	str	r2, [r3, #12]

  return 0;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3720      	adds	r7, #32
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	32b0      	adds	r2, #176	@ 0xb0
 8008fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8008fba:	2304      	movs	r3, #4
 8008fbc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d102      	bne.n	8008fca <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8008fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc8:	e02f      	b.n	800902a <SCSI_ModeSense6+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	33b0      	adds	r3, #176	@ 0xb0
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	7afa      	ldrb	r2, [r7, #11]
 8008fde:	4610      	mov	r0, r2
 8008fe0:	4798      	blx	r3
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <SCSI_ModeSense6+0x5c>
  {
    MSC_Mode_Sense6_data[2] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8008fe8:	4b12      	ldr	r3, [pc, #72]	@ (8009034 <SCSI_ModeSense6+0x98>)
 8008fea:	789b      	ldrb	r3, [r3, #2]
 8008fec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	4b10      	ldr	r3, [pc, #64]	@ (8009034 <SCSI_ModeSense6+0x98>)
 8008ff4:	709a      	strb	r2, [r3, #2]
 8008ff6:	e006      	b.n	8009006 <SCSI_ModeSense6+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[2] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8009038 <SCSI_ModeSense6+0x9c>)
 8008ffa:	789b      	ldrb	r3, [r3, #2]
 8008ffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009000:	b2da      	uxtb	r2, r3
 8009002:	4b0d      	ldr	r3, [pc, #52]	@ (8009038 <SCSI_ModeSense6+0x9c>)
 8009004:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3304      	adds	r3, #4
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	8afb      	ldrh	r3, [r7, #22]
 8009010:	4293      	cmp	r3, r2
 8009012:	d303      	bcc.n	800901c <SCSI_ModeSense6+0x80>
  {
    len = params[4];
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	3304      	adds	r3, #4
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800901c:	8afb      	ldrh	r3, [r7, #22]
 800901e:	461a      	mov	r2, r3
 8009020:	4904      	ldr	r1, [pc, #16]	@ (8009034 <SCSI_ModeSense6+0x98>)
 8009022:	6938      	ldr	r0, [r7, #16]
 8009024:	f000 fed6 	bl	8009dd4 <SCSI_UpdateBotData>

  return 0;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000098 	.word	0x20000098
 8009038:	2000009c 	.word	0x2000009c

0800903c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	460b      	mov	r3, r1
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	32b0      	adds	r2, #176	@ 0xb0
 8009054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009058:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800905a:	2308      	movs	r3, #8
 800905c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d102      	bne.n	800906a <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	e02f      	b.n	80090ca <SCSI_ModeSense10+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	33b0      	adds	r3, #176	@ 0xb0
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	7afa      	ldrb	r2, [r7, #11]
 800907e:	4610      	mov	r0, r2
 8009080:	4798      	blx	r3
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d007      	beq.n	8009098 <SCSI_ModeSense10+0x5c>
  {
    MSC_Mode_Sense10_data[3] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8009088:	4b12      	ldr	r3, [pc, #72]	@ (80090d4 <SCSI_ModeSense10+0x98>)
 800908a:	78db      	ldrb	r3, [r3, #3]
 800908c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009090:	b2da      	uxtb	r2, r3
 8009092:	4b10      	ldr	r3, [pc, #64]	@ (80090d4 <SCSI_ModeSense10+0x98>)
 8009094:	70da      	strb	r2, [r3, #3]
 8009096:	e006      	b.n	80090a6 <SCSI_ModeSense10+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[3] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8009098:	4b0e      	ldr	r3, [pc, #56]	@ (80090d4 <SCSI_ModeSense10+0x98>)
 800909a:	78db      	ldrb	r3, [r3, #3]
 800909c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	4b0c      	ldr	r3, [pc, #48]	@ (80090d4 <SCSI_ModeSense10+0x98>)
 80090a4:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3308      	adds	r3, #8
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	8afb      	ldrh	r3, [r7, #22]
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d303      	bcc.n	80090bc <SCSI_ModeSense10+0x80>
  {
    len = params[8];
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3308      	adds	r3, #8
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80090bc:	8afb      	ldrh	r3, [r7, #22]
 80090be:	461a      	mov	r2, r3
 80090c0:	4904      	ldr	r1, [pc, #16]	@ (80090d4 <SCSI_ModeSense10+0x98>)
 80090c2:	6938      	ldr	r0, [r7, #16]
 80090c4:	f000 fe86 	bl	8009dd4 <SCSI_UpdateBotData>

  return 0;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3718      	adds	r7, #24
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	2000009c 	.word	0x2000009c

080090d8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	460b      	mov	r3, r1
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	32b0      	adds	r2, #176	@ 0xb0
 80090f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d102      	bne.n	8009102 <SCSI_RequestSense+0x2a>
  {
    return -1;
 80090fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009100:	e069      	b.n	80091d6 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10a      	bne.n	8009122 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009112:	2320      	movs	r3, #32
 8009114:	2205      	movs	r2, #5
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 f861 	bl	80091de <SCSI_SenseCode>
    return -1;
 800911c:	f04f 33ff 	mov.w	r3, #4294967295
 8009120:	e059      	b.n	80091d6 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009122:	2300      	movs	r3, #0
 8009124:	75fb      	strb	r3, [r7, #23]
 8009126:	e007      	b.n	8009138 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8009128:	7dfb      	ldrb	r3, [r7, #23]
 800912a:	693a      	ldr	r2, [r7, #16]
 800912c:	4413      	add	r3, r2
 800912e:	2200      	movs	r2, #0
 8009130:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8009132:	7dfb      	ldrb	r3, [r7, #23]
 8009134:	3301      	adds	r3, #1
 8009136:	75fb      	strb	r3, [r7, #23]
 8009138:	7dfb      	ldrb	r3, [r7, #23]
 800913a:	2b11      	cmp	r3, #17
 800913c:	d9f4      	bls.n	8009128 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	2270      	movs	r2, #112	@ 0x70
 8009142:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	220c      	movs	r2, #12
 8009148:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8009156:	429a      	cmp	r2, r3
 8009158:	d02e      	beq.n	80091b8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8009160:	461a      	mov	r2, r3
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	3248      	adds	r2, #72	@ 0x48
 8009166:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8009174:	693a      	ldr	r2, [r7, #16]
 8009176:	3348      	adds	r3, #72	@ 0x48
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	4413      	add	r3, r2
 800917c:	791a      	ldrb	r2, [r3, #4]
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8009188:	693a      	ldr	r2, [r7, #16]
 800918a:	3348      	adds	r3, #72	@ 0x48
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	4413      	add	r3, r2
 8009190:	795a      	ldrb	r2, [r3, #5]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 800919c:	3301      	adds	r3, #1
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80091ac:	2b04      	cmp	r3, #4
 80091ae:	d103      	bne.n	80091b8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	2212      	movs	r2, #18
 80091bc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	3304      	adds	r3, #4
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b12      	cmp	r3, #18
 80091c6:	d805      	bhi.n	80091d4 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	3304      	adds	r3, #4
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	4608      	mov	r0, r1
 80091e8:	4611      	mov	r1, r2
 80091ea:	461a      	mov	r2, r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	70fb      	strb	r3, [r7, #3]
 80091f0:	460b      	mov	r3, r1
 80091f2:	70bb      	strb	r3, [r7, #2]
 80091f4:	4613      	mov	r3, r2
 80091f6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	32b0      	adds	r2, #176	@ 0xb0
 8009202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009206:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d02c      	beq.n	8009268 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8009214:	461a      	mov	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	3248      	adds	r2, #72	@ 0x48
 800921a:	78b9      	ldrb	r1, [r7, #2]
 800921c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	3348      	adds	r3, #72	@ 0x48
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	4413      	add	r3, r2
 800922e:	787a      	ldrb	r2, [r7, #1]
 8009230:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	3348      	adds	r3, #72	@ 0x48
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4413      	add	r3, r2
 8009240:	2200      	movs	r2, #0
 8009242:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800924a:	3301      	adds	r3, #1
 800924c:	b2da      	uxtb	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800925a:	2b04      	cmp	r3, #4
 800925c:	d105      	bne.n	800926a <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8009266:	e000      	b.n	800926a <SCSI_SenseCode+0x8c>
    return;
 8009268:	bf00      	nop
  }
}
 800926a:	3714      	adds	r7, #20
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	460b      	mov	r3, r1
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	32b0      	adds	r2, #176	@ 0xb0
 800928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009290:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8009298:	f04f 33ff 	mov.w	r3, #4294967295
 800929c:	e03b      	b.n	8009316 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d10f      	bne.n	80092c8 <SCSI_StartStopUnit+0x54>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	3304      	adds	r3, #4
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	f003 0303 	and.w	r3, r3, #3
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d108      	bne.n	80092c8 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 80092b6:	7af9      	ldrb	r1, [r7, #11]
 80092b8:	2324      	movs	r3, #36	@ 0x24
 80092ba:	2205      	movs	r2, #5
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f7ff ff8e 	bl	80091de <SCSI_SenseCode>

    return -1;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295
 80092c6:	e026      	b.n	8009316 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3304      	adds	r3, #4
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 0303 	and.w	r3, r3, #3
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d104      	bne.n	80092e0 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80092de:	e016      	b.n	800930e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3304      	adds	r3, #4
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 0303 	and.w	r3, r3, #3
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d104      	bne.n	80092f8 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2202      	movs	r2, #2
 80092f2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80092f6:	e00a      	b.n	800930e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	3304      	adds	r3, #4
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f003 0303 	and.w	r3, r3, #3
 8009302:	2b03      	cmp	r3, #3
 8009304:	d103      	bne.n	800930e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2200      	movs	r2, #0
 8009312:	60da      	str	r2, [r3, #12]

  return 0;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800931e:	b480      	push	{r7}
 8009320:	b087      	sub	sp, #28
 8009322:	af00      	add	r7, sp, #0
 8009324:	60f8      	str	r0, [r7, #12]
 8009326:	460b      	mov	r3, r1
 8009328:	607a      	str	r2, [r7, #4]
 800932a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	32b0      	adds	r2, #176	@ 0xb0
 8009336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d102      	bne.n	8009348 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8009342:	f04f 33ff 	mov.w	r3, #4294967295
 8009346:	e011      	b.n	800936c <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3304      	adds	r3, #4
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d104      	bne.n	800935c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800935a:	e003      	b.n	8009364 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2200      	movs	r2, #0
 8009368:	60da      	str	r2, [r3, #12]

  return 0;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	371c      	adds	r7, #28
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	32b0      	adds	r2, #176	@ 0xb0
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009396:	7afb      	ldrb	r3, [r7, #11]
 8009398:	3326      	adds	r3, #38	@ 0x26
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	4413      	add	r3, r2
 80093a0:	3304      	adds	r3, #4
 80093a2:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d102      	bne.n	80093b0 <SCSI_Read10+0x38>
  {
    return -1;
 80093aa:	f04f 33ff 	mov.w	r3, #4294967295
 80093ae:	e089      	b.n	80094c4 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	7a1b      	ldrb	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d17b      	bne.n	80094b0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80093be:	b25b      	sxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db0a      	blt.n	80093da <SCSI_Read10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80093ca:	2320      	movs	r3, #32
 80093cc:	2205      	movs	r2, #5
 80093ce:	68f8      	ldr	r0, [r7, #12]
 80093d0:	f7ff ff05 	bl	80091de <SCSI_SenseCode>
      return -1;
 80093d4:	f04f 33ff 	mov.w	r3, #4294967295
 80093d8:	e074      	b.n	80094c4 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d108      	bne.n	80093f6 <SCSI_Read10+0x7e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80093e4:	7af9      	ldrb	r1, [r7, #11]
 80093e6:	233a      	movs	r3, #58	@ 0x3a
 80093e8:	2202      	movs	r2, #2
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f7ff fef7 	bl	80091de <SCSI_SenseCode>

      return -1;
 80093f0:	f04f 33ff 	mov.w	r3, #4294967295
 80093f4:	e066      	b.n	80094c4 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	33b0      	adds	r3, #176	@ 0xb0
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	7afa      	ldrb	r2, [r7, #11]
 800940a:	4610      	mov	r0, r2
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d008      	beq.n	8009426 <SCSI_Read10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8009414:	7af9      	ldrb	r1, [r7, #11]
 8009416:	233a      	movs	r3, #58	@ 0x3a
 8009418:	2202      	movs	r2, #2
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f7ff fedf 	bl	80091de <SCSI_SenseCode>
      return -1;
 8009420:	f04f 33ff 	mov.w	r3, #4294967295
 8009424:	e04e      	b.n	80094c4 <SCSI_Read10+0x14c>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3302      	adds	r3, #2
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	3303      	adds	r3, #3
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8009436:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3304      	adds	r3, #4
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8009440:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	3205      	adds	r2, #5
 8009446:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 8009448:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	3307      	adds	r3, #7
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	3208      	adds	r2, #8
 800945a:	7812      	ldrb	r2, [r2, #0]
 800945c:	431a      	orrs	r2, r3
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	7af9      	ldrb	r1, [r7, #11]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fb6d 	bl	8009b4c <SCSI_CheckAddressRange>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	da02      	bge.n	800947e <SCSI_Read10+0x106>
    {
      return -1; /* error */
 8009478:	f04f 33ff 	mov.w	r3, #4294967295
 800947c:	e022      	b.n	80094c4 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	6939      	ldr	r1, [r7, #16]
 800948a:	8809      	ldrh	r1, [r1, #0]
 800948c:	fb01 f303 	mul.w	r3, r1, r3
 8009490:	429a      	cmp	r2, r3
 8009492:	d00a      	beq.n	80094aa <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800949a:	2320      	movs	r3, #32
 800949c:	2205      	movs	r2, #5
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff fe9d 	bl	80091de <SCSI_SenseCode>
      return -1;
 80094a4:	f04f 33ff 	mov.w	r3, #4294967295
 80094a8:	e00c      	b.n	80094c4 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2202      	movs	r2, #2
 80094ae:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094b6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	4619      	mov	r1, r3
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f000 fb77 	bl	8009bb0 <SCSI_ProcessRead>
 80094c2:	4603      	mov	r3, r0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	460b      	mov	r3, r1
 80094d6:	607a      	str	r2, [r7, #4]
 80094d8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	32b0      	adds	r2, #176	@ 0xb0
 80094e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e8:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80094ea:	7afb      	ldrb	r3, [r7, #11]
 80094ec:	3326      	adds	r3, #38	@ 0x26
 80094ee:	011b      	lsls	r3, r3, #4
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	4413      	add	r3, r2
 80094f4:	3304      	adds	r3, #4
 80094f6:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d102      	bne.n	8009504 <SCSI_Read12+0x38>
  {
    return -1;
 80094fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009502:	e094      	b.n	800962e <SCSI_Read12+0x162>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	7a1b      	ldrb	r3, [r3, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	f040 8086 	bne.w	800961a <SCSI_Read12+0x14e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8009514:	b25b      	sxtb	r3, r3
 8009516:	2b00      	cmp	r3, #0
 8009518:	db0a      	blt.n	8009530 <SCSI_Read12+0x64>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009520:	2320      	movs	r3, #32
 8009522:	2205      	movs	r2, #5
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f7ff fe5a 	bl	80091de <SCSI_SenseCode>
      return -1;
 800952a:	f04f 33ff 	mov.w	r3, #4294967295
 800952e:	e07e      	b.n	800962e <SCSI_Read12+0x162>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8009536:	2b02      	cmp	r3, #2
 8009538:	d108      	bne.n	800954c <SCSI_Read12+0x80>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800953a:	7af9      	ldrb	r1, [r7, #11]
 800953c:	233a      	movs	r3, #58	@ 0x3a
 800953e:	2202      	movs	r2, #2
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff fe4c 	bl	80091de <SCSI_SenseCode>
      return -1;
 8009546:	f04f 33ff 	mov.w	r3, #4294967295
 800954a:	e070      	b.n	800962e <SCSI_Read12+0x162>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	33b0      	adds	r3, #176	@ 0xb0
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	7afa      	ldrb	r2, [r7, #11]
 8009560:	4610      	mov	r0, r2
 8009562:	4798      	blx	r3
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d008      	beq.n	800957c <SCSI_Read12+0xb0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800956a:	7af9      	ldrb	r1, [r7, #11]
 800956c:	233a      	movs	r3, #58	@ 0x3a
 800956e:	2202      	movs	r2, #2
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fe34 	bl	80091de <SCSI_SenseCode>
      return -1;
 8009576:	f04f 33ff 	mov.w	r3, #4294967295
 800957a:	e058      	b.n	800962e <SCSI_Read12+0x162>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3302      	adds	r3, #2
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3303      	adds	r3, #3
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800958c:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3304      	adds	r3, #4
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8009596:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	3205      	adds	r2, #5
 800959c:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 800959e:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	3306      	adds	r3, #6
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3307      	adds	r3, #7
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80095b4:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3308      	adds	r3, #8
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 80095be:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	3209      	adds	r2, #9
 80095c4:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 80095c6:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	689a      	ldr	r2, [r3, #8]
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	7af9      	ldrb	r1, [r7, #11]
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f000 fab8 	bl	8009b4c <SCSI_CheckAddressRange>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	da02      	bge.n	80095e8 <SCSI_Read12+0x11c>
    {
      return -1; /* error */
 80095e2:	f04f 33ff 	mov.w	r3, #4294967295
 80095e6:	e022      	b.n	800962e <SCSI_Read12+0x162>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	6939      	ldr	r1, [r7, #16]
 80095f4:	8809      	ldrh	r1, [r1, #0]
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d00a      	beq.n	8009614 <SCSI_Read12+0x148>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009604:	2320      	movs	r3, #32
 8009606:	2205      	movs	r2, #5
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f7ff fde8 	bl	80091de <SCSI_SenseCode>
      return -1;
 800960e:	f04f 33ff 	mov.w	r3, #4294967295
 8009612:	e00c      	b.n	800962e <SCSI_Read12+0x162>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2202      	movs	r2, #2
 8009618:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009620:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	4619      	mov	r1, r3
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	f000 fac2 	bl	8009bb0 <SCSI_ProcessRead>
 800962c:	4603      	mov	r3, r0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}
	...

08009638 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	460b      	mov	r3, r1
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	32b0      	adds	r2, #176	@ 0xb0
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009656:	7afb      	ldrb	r3, [r7, #11]
 8009658:	3326      	adds	r3, #38	@ 0x26
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	4413      	add	r3, r2
 8009660:	3304      	adds	r3, #4
 8009662:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <SCSI_Write10+0x38>
  {
    return -1;
 800966a:	f04f 33ff 	mov.w	r3, #4294967295
 800966e:	e0b4      	b.n	80097da <SCSI_Write10+0x1a2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	7a1b      	ldrb	r3, [r3, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f040 80aa 	bne.w	80097ce <SCSI_Write10+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800968a:	2320      	movs	r3, #32
 800968c:	2205      	movs	r2, #5
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7ff fda5 	bl	80091de <SCSI_SenseCode>
      return -1;
 8009694:	f04f 33ff 	mov.w	r3, #4294967295
 8009698:	e09f      	b.n	80097da <SCSI_Write10+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80096a0:	b25b      	sxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	da0a      	bge.n	80096bc <SCSI_Write10+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80096ac:	2320      	movs	r3, #32
 80096ae:	2205      	movs	r2, #5
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff fd94 	bl	80091de <SCSI_SenseCode>
      return -1;
 80096b6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ba:	e08e      	b.n	80097da <SCSI_Write10+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	33b0      	adds	r3, #176	@ 0xb0
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	7afa      	ldrb	r2, [r7, #11]
 80096d0:	4610      	mov	r0, r2
 80096d2:	4798      	blx	r3
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <SCSI_Write10+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80096da:	7af9      	ldrb	r1, [r7, #11]
 80096dc:	233a      	movs	r3, #58	@ 0x3a
 80096de:	2202      	movs	r2, #2
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f7ff fd7c 	bl	80091de <SCSI_SenseCode>
      return -1;
 80096e6:	f04f 33ff 	mov.w	r3, #4294967295
 80096ea:	e076      	b.n	80097da <SCSI_Write10+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	33b0      	adds	r3, #176	@ 0xb0
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	4413      	add	r3, r2
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	7afa      	ldrb	r2, [r7, #11]
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d008      	beq.n	800971c <SCSI_Write10+0xe4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800970a:	7af9      	ldrb	r1, [r7, #11]
 800970c:	2327      	movs	r3, #39	@ 0x27
 800970e:	2202      	movs	r2, #2
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff fd64 	bl	80091de <SCSI_SenseCode>
      return -1;
 8009716:	f04f 33ff 	mov.w	r3, #4294967295
 800971a:	e05e      	b.n	80097da <SCSI_Write10+0x1a2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3302      	adds	r3, #2
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3303      	adds	r3, #3
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800972c:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3304      	adds	r3, #4
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8009736:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	3205      	adds	r2, #5
 800973c:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 800973e:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3307      	adds	r3, #7
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	021b      	lsls	r3, r3, #8
                      (uint32_t)params[8];
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	3208      	adds	r2, #8
 8009750:	7812      	ldrb	r2, [r2, #0]
    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8009752:	431a      	orrs	r2, r3
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	7af9      	ldrb	r1, [r7, #11]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f9f2 	bl	8009b4c <SCSI_CheckAddressRange>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	da02      	bge.n	8009774 <SCSI_Write10+0x13c>
    {
      return -1; /* error */
 800976e:	f04f 33ff 	mov.w	r3, #4294967295
 8009772:	e032      	b.n	80097da <SCSI_Write10+0x1a2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	69ba      	ldr	r2, [r7, #24]
 800977a:	8812      	ldrh	r2, [r2, #0]
 800977c:	fb02 f303 	mul.w	r3, r2, r3
 8009780:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	429a      	cmp	r2, r3
 800978c:	d00a      	beq.n	80097a4 <SCSI_Write10+0x16c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009794:	2320      	movs	r3, #32
 8009796:	2205      	movs	r2, #5
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff fd20 	bl	80091de <SCSI_SenseCode>
      return -1;
 800979e:	f04f 33ff 	mov.w	r3, #4294967295
 80097a2:	e01a      	b.n	80097da <SCSI_Write10+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097aa:	bf28      	it	cs
 80097ac:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80097b0:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	2201      	movs	r2, #1
 80097b6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80097b8:	4b0a      	ldr	r3, [pc, #40]	@ (80097e4 <SCSI_Write10+0x1ac>)
 80097ba:	7819      	ldrb	r1, [r3, #0]
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	f103 0210 	add.w	r2, r3, #16
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f006 f99c 	bl	800fb02 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e005      	b.n	80097da <SCSI_Write10+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80097ce:	7afb      	ldrb	r3, [r7, #11]
 80097d0:	4619      	mov	r1, r3
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fa6e 	bl	8009cb4 <SCSI_ProcessWrite>
 80097d8:	4603      	mov	r3, r0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000087 	.word	0x20000087

080097e8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b088      	sub	sp, #32
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	460b      	mov	r3, r1
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	32b0      	adds	r2, #176	@ 0xb0
 8009800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009804:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	3326      	adds	r3, #38	@ 0x26
 800980a:	011b      	lsls	r3, r3, #4
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	4413      	add	r3, r2
 8009810:	3304      	adds	r3, #4
 8009812:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <SCSI_Write12+0x38>
  {
    return -1;
 800981a:	f04f 33ff 	mov.w	r3, #4294967295
 800981e:	e0c4      	b.n	80099aa <SCSI_Write12+0x1c2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	7a1b      	ldrb	r3, [r3, #8]
 8009824:	2b00      	cmp	r3, #0
 8009826:	f040 80ba 	bne.w	800999e <SCSI_Write12+0x1b6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10a      	bne.n	800984a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800983a:	2320      	movs	r3, #32
 800983c:	2205      	movs	r2, #5
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff fccd 	bl	80091de <SCSI_SenseCode>
      return -1;
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	e0af      	b.n	80099aa <SCSI_Write12+0x1c2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8009850:	b25b      	sxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	da0a      	bge.n	800986c <SCSI_Write12+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800985c:	2320      	movs	r3, #32
 800985e:	2205      	movs	r2, #5
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f7ff fcbc 	bl	80091de <SCSI_SenseCode>
      return -1;
 8009866:	f04f 33ff 	mov.w	r3, #4294967295
 800986a:	e09e      	b.n	80099aa <SCSI_Write12+0x1c2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	33b0      	adds	r3, #176	@ 0xb0
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	7afa      	ldrb	r2, [r7, #11]
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00b      	beq.n	80098a2 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800988a:	7af9      	ldrb	r1, [r7, #11]
 800988c:	233a      	movs	r3, #58	@ 0x3a
 800988e:	2202      	movs	r2, #2
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff fca4 	bl	80091de <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2205      	movs	r2, #5
 800989a:	721a      	strb	r2, [r3, #8]
      return -1;
 800989c:	f04f 33ff 	mov.w	r3, #4294967295
 80098a0:	e083      	b.n	80099aa <SCSI_Write12+0x1c2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	33b0      	adds	r3, #176	@ 0xb0
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	7afa      	ldrb	r2, [r7, #11]
 80098b6:	4610      	mov	r0, r2
 80098b8:	4798      	blx	r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <SCSI_Write12+0xf0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80098c0:	7af9      	ldrb	r1, [r7, #11]
 80098c2:	2327      	movs	r3, #39	@ 0x27
 80098c4:	2202      	movs	r2, #2
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7ff fc89 	bl	80091de <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	2205      	movs	r2, #5
 80098d0:	721a      	strb	r2, [r3, #8]
      return -1;
 80098d2:	f04f 33ff 	mov.w	r3, #4294967295
 80098d6:	e068      	b.n	80099aa <SCSI_Write12+0x1c2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3302      	adds	r3, #2
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	3303      	adds	r3, #3
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80098e8:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3304      	adds	r3, #4
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 80098f2:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	3205      	adds	r2, #5
 80098f8:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 80098fa:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3306      	adds	r3, #6
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3307      	adds	r3, #7
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8009910:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	3308      	adds	r3, #8
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 800991a:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	3209      	adds	r2, #9
 8009920:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 8009922:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	689a      	ldr	r2, [r3, #8]
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	7af9      	ldrb	r1, [r7, #11]
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 f90a 	bl	8009b4c <SCSI_CheckAddressRange>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	da02      	bge.n	8009944 <SCSI_Write12+0x15c>
    {
      return -1; /* error */
 800993e:	f04f 33ff 	mov.w	r3, #4294967295
 8009942:	e032      	b.n	80099aa <SCSI_Write12+0x1c2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	8812      	ldrh	r2, [r2, #0]
 800994c:	fb02 f303 	mul.w	r3, r2, r3
 8009950:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8009958:	697a      	ldr	r2, [r7, #20]
 800995a:	429a      	cmp	r2, r3
 800995c:	d00a      	beq.n	8009974 <SCSI_Write12+0x18c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8009964:	2320      	movs	r3, #32
 8009966:	2205      	movs	r2, #5
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fc38 	bl	80091de <SCSI_SenseCode>
      return -1;
 800996e:	f04f 33ff 	mov.w	r3, #4294967295
 8009972:	e01a      	b.n	80099aa <SCSI_Write12+0x1c2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800997a:	bf28      	it	cs
 800997c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009980:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	2201      	movs	r2, #1
 8009986:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009988:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <SCSI_Write12+0x1cc>)
 800998a:	7819      	ldrb	r1, [r3, #0]
 800998c:	69fb      	ldr	r3, [r7, #28]
 800998e:	f103 0210 	add.w	r2, r3, #16
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f006 f8b4 	bl	800fb02 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800999a:	2300      	movs	r3, #0
 800999c:	e005      	b.n	80099aa <SCSI_Write12+0x1c2>
    return SCSI_ProcessWrite(pdev, lun);
 800999e:	7afb      	ldrb	r3, [r7, #11]
 80099a0:	4619      	mov	r1, r3
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 f986 	bl	8009cb4 <SCSI_ProcessWrite>
 80099a8:	4603      	mov	r3, r0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3720      	adds	r7, #32
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000087 	.word	0x20000087

080099b8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	460b      	mov	r3, r1
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	32b0      	adds	r2, #176	@ 0xb0
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80099d6:	7afb      	ldrb	r3, [r7, #11]
 80099d8:	3326      	adds	r3, #38	@ 0x26
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4413      	add	r3, r2
 80099e0:	3304      	adds	r3, #4
 80099e2:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d102      	bne.n	80099f0 <SCSI_Verify10+0x38>
  {
    return -1;
 80099ea:	f04f 33ff 	mov.w	r3, #4294967295
 80099ee:	e021      	b.n	8009a34 <SCSI_Verify10+0x7c>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3301      	adds	r3, #1
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <SCSI_Verify10+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 80099fe:	7af9      	ldrb	r1, [r7, #11]
 8009a00:	2324      	movs	r3, #36	@ 0x24
 8009a02:	2205      	movs	r2, #5
 8009a04:	68f8      	ldr	r0, [r7, #12]
 8009a06:	f7ff fbea 	bl	80091de <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8009a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a0e:	e011      	b.n	8009a34 <SCSI_Verify10+0x7c>
  }

  if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	689a      	ldr	r2, [r3, #8]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	7af9      	ldrb	r1, [r7, #11]
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 f896 	bl	8009b4c <SCSI_CheckAddressRange>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	da02      	bge.n	8009a2c <SCSI_Verify10+0x74>
  {
    return -1; /* error */
 8009a26:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2a:	e003      	b.n	8009a34 <SCSI_Verify10+0x7c>
  }

  hmsc->bot_data_length = 0U;
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	60da      	str	r2, [r3, #12]

  return 0;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <SCSI_ReportLuns>:
  * @brief  SCSI_ReportLuns12
  *         Process ReportLuns command
  * @retval status
  */
static int8_t SCSI_ReportLuns(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	460b      	mov	r3, r1
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);

  /* Define the report LUNs buffer Each LUN entry is 8 bytes */
  static uint8_t lun_report[8U * (MSC_BOT_MAX_LUN + 1U)];

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	32b0      	adds	r2, #176	@ 0xb0
 8009a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a58:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d102      	bne.n	8009a66 <SCSI_ReportLuns+0x2a>
  {
    return -1;
 8009a60:	f04f 33ff 	mov.w	r3, #4294967295
 8009a64:	e039      	b.n	8009ada <SCSI_ReportLuns+0x9e>
  }

  /* Initialize the report LUNs buffer */
  (void)USBD_memset(lun_report, 0, sizeof(lun_report));
 8009a66:	2218      	movs	r2, #24
 8009a68:	2100      	movs	r1, #0
 8009a6a:	481e      	ldr	r0, [pc, #120]	@ (8009ae4 <SCSI_ReportLuns+0xa8>)
 8009a6c:	f006 f916 	bl	800fc9c <memset>

  /* Set the LUN list length in the first 4 bytes */
  lun_list_length = 8U * (hmsc->max_lun + 1U);
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3301      	adds	r3, #1
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	617b      	str	r3, [r7, #20]
  lun_report[0] = (uint8_t)(lun_list_length >> 24);
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	0e1b      	lsrs	r3, r3, #24
 8009a7e:	b2da      	uxtb	r2, r3
 8009a80:	4b18      	ldr	r3, [pc, #96]	@ (8009ae4 <SCSI_ReportLuns+0xa8>)
 8009a82:	701a      	strb	r2, [r3, #0]
  lun_report[1] = (uint8_t)(lun_list_length >> 16);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	0c1b      	lsrs	r3, r3, #16
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	4b16      	ldr	r3, [pc, #88]	@ (8009ae4 <SCSI_ReportLuns+0xa8>)
 8009a8c:	705a      	strb	r2, [r3, #1]
  lun_report[2] = (uint8_t)(lun_list_length >> 8);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	0a1b      	lsrs	r3, r3, #8
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	4b13      	ldr	r3, [pc, #76]	@ (8009ae4 <SCSI_ReportLuns+0xa8>)
 8009a96:	709a      	strb	r2, [r3, #2]
  lun_report[3] = (uint8_t)(lun_list_length & 0xFFU);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ae4 <SCSI_ReportLuns+0xa8>)
 8009a9e:	70da      	strb	r2, [r3, #3]

  /* Update the LUN list */
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e009      	b.n	8009aba <SCSI_ReportLuns+0x7e>
  {
    /* LUN identifier is placed at the second byte of each 8-byte entry */
    lun_report[(8U * (lun_idx + 1U)) + 1U] = lun_idx;
 8009aa6:	7ffb      	ldrb	r3, [r7, #31]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	3301      	adds	r3, #1
 8009aae:	490d      	ldr	r1, [pc, #52]	@ (8009ae4 <SCSI_ReportLuns+0xa8>)
 8009ab0:	7ffa      	ldrb	r2, [r7, #31]
 8009ab2:	54ca      	strb	r2, [r1, r3]
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8009ab4:	7ffb      	ldrb	r3, [r7, #31]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	77fb      	strb	r3, [r7, #31]
 8009aba:	7ffa      	ldrb	r2, [r7, #31]
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d9f0      	bls.n	8009aa6 <SCSI_ReportLuns+0x6a>
  }

  /* Calculate the total length of the report LUNs buffer */
  total_length = lun_list_length + 8U;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	3308      	adds	r3, #8
 8009ac8:	613b      	str	r3, [r7, #16]

  /* Update the BOT data with the report LUNs buffer */
  (void)SCSI_UpdateBotData(hmsc, lun_report, (uint16_t)total_length);
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	4904      	ldr	r1, [pc, #16]	@ (8009ae4 <SCSI_ReportLuns+0xa8>)
 8009ad2:	69b8      	ldr	r0, [r7, #24]
 8009ad4:	f000 f97e 	bl	8009dd4 <SCSI_UpdateBotData>

  return 0;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3720      	adds	r7, #32
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20003ed4 	.word	0x20003ed4

08009ae8 <SCSI_ReceiveDiagnosticResults>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReceiveDiagnosticResults(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	460b      	mov	r3, r1
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	32b0      	adds	r2, #176	@ 0xb0
 8009b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b04:	613b      	str	r3, [r7, #16]
  uint16_t allocation_length;

  /* Extract the allocation length from the CDB */
  allocation_length = (((uint16_t)params[3] << 8) | (uint16_t)params[4]);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3303      	adds	r3, #3
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	021b      	lsls	r3, r3, #8
 8009b0e:	b21a      	sxth	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	3304      	adds	r3, #4
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	b21b      	sxth	r3, r3
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	b21b      	sxth	r3, r3
 8009b1c:	82fb      	strh	r3, [r7, #22]

  if (allocation_length == 0U)
 8009b1e:	8afb      	ldrh	r3, [r7, #22]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d101      	bne.n	8009b28 <SCSI_ReceiveDiagnosticResults+0x40>
  {
    return 0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	e00b      	b.n	8009b40 <SCSI_ReceiveDiagnosticResults+0x58>
  }

  /* Ensure the allocation length does not exceed the diagnostic data length */
  if (allocation_length > DIAGNOSTIC_DATA_LEN)
 8009b28:	8afb      	ldrh	r3, [r7, #22]
 8009b2a:	2b08      	cmp	r3, #8
 8009b2c:	d901      	bls.n	8009b32 <SCSI_ReceiveDiagnosticResults+0x4a>
  {
    allocation_length = DIAGNOSTIC_DATA_LEN;
 8009b2e:	2308      	movs	r3, #8
 8009b30:	82fb      	strh	r3, [r7, #22]
  }

  /* Send the diagnostic data to the host */
  (void)SCSI_UpdateBotData(hmsc, MSC_Diagnostic_Data, allocation_length);
 8009b32:	8afb      	ldrh	r3, [r7, #22]
 8009b34:	461a      	mov	r2, r3
 8009b36:	4904      	ldr	r1, [pc, #16]	@ (8009b48 <SCSI_ReceiveDiagnosticResults+0x60>)
 8009b38:	6938      	ldr	r0, [r7, #16]
 8009b3a:	f000 f94b 	bl	8009dd4 <SCSI_UpdateBotData>

  return 0;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	20003ecc 	.word	0x20003ecc

08009b4c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b086      	sub	sp, #24
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	607a      	str	r2, [r7, #4]
 8009b56:	603b      	str	r3, [r7, #0]
 8009b58:	460b      	mov	r3, r1
 8009b5a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	32b0      	adds	r2, #176	@ 0xb0
 8009b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6a:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	3326      	adds	r3, #38	@ 0x26
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	4413      	add	r3, r2
 8009b76:	3304      	adds	r3, #4
 8009b78:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d102      	bne.n	8009b86 <SCSI_CheckAddressRange+0x3a>
  {
    return -1;
 8009b80:	f04f 33ff 	mov.w	r3, #4294967295
 8009b84:	e010      	b.n	8009ba8 <SCSI_CheckAddressRange+0x5c>
  }

  if ((blk_offset + blk_nbr) > p_scsi_blk->nbr)
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	441a      	add	r2, r3
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d908      	bls.n	8009ba6 <SCSI_CheckAddressRange+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8009b94:	7af9      	ldrb	r1, [r7, #11]
 8009b96:	2321      	movs	r3, #33	@ 0x21
 8009b98:	2205      	movs	r2, #5
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f7ff fb1f 	bl	80091de <SCSI_SenseCode>
    return -1;
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	e000      	b.n	8009ba8 <SCSI_CheckAddressRange+0x5c>
  }

  return 0;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009bb0:	b590      	push	{r4, r7, lr}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	32b0      	adds	r2, #176	@ 0xb0
 8009bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bca:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	3326      	adds	r3, #38	@ 0x26
 8009bd0:	011b      	lsls	r3, r3, #4
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d102      	bne.n	8009be6 <SCSI_ProcessRead+0x36>
  {
    return -1;
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	e05f      	b.n	8009ca6 <SCSI_ProcessRead+0xf6>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	693a      	ldr	r2, [r7, #16]
 8009bec:	8812      	ldrh	r2, [r2, #0]
 8009bee:	fb02 f303 	mul.w	r3, r2, r3
 8009bf2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bfa:	bf28      	it	cs
 8009bfc:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009c00:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	33b0      	adds	r3, #176	@ 0xb0
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	691c      	ldr	r4, [r3, #16]
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f103 0110 	add.w	r1, r3, #16
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	689a      	ldr	r2, [r3, #8]
                                                                    p_scsi_blk->addr,
                                                                    (len / p_scsi_blk->size)) < 0)
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	881b      	ldrh	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	78f8      	ldrb	r0, [r7, #3]
 8009c2e:	47a0      	blx	r4
 8009c30:	4603      	mov	r3, r0
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da08      	bge.n	8009c48 <SCSI_ProcessRead+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8009c36:	78f9      	ldrb	r1, [r7, #3]
 8009c38:	2311      	movs	r3, #17
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7ff face 	bl	80091de <SCSI_SenseCode>
    return -1;
 8009c42:	f04f 33ff 	mov.w	r3, #4294967295
 8009c46:	e02e      	b.n	8009ca6 <SCSI_ProcessRead+0xf6>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8009c48:	4b19      	ldr	r3, [pc, #100]	@ (8009cb0 <SCSI_ProcessRead+0x100>)
 8009c4a:	7819      	ldrb	r1, [r3, #0]
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f103 0210 	add.w	r2, r3, #16
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f005 ff33 	bl	800fac0 <USBD_LL_Transmit>

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	881b      	ldrh	r3, [r3, #0]
 8009c62:	4619      	mov	r1, r3
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c6a:	441a      	add	r2, r3
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c80:	1ad2      	subs	r2, r2, r3
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	60da      	str	r2, [r3, #12]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	1ad2      	subs	r2, r2, r3
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d102      	bne.n	8009ca4 <SCSI_ProcessRead+0xf4>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2203      	movs	r2, #3
 8009ca2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd90      	pop	{r4, r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000086 	.word	0x20000086

08009cb4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009cb4:	b590      	push	{r4, r7, lr}
 8009cb6:	b087      	sub	sp, #28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	32b0      	adds	r2, #176	@ 0xb0
 8009cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cce:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	3326      	adds	r3, #38	@ 0x26
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4413      	add	r3, r2
 8009cda:	3304      	adds	r3, #4
 8009cdc:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <SCSI_ProcessWrite+0x36>
  {
    return -1;
 8009ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce8:	e06d      	b.n	8009dc6 <SCSI_ProcessWrite+0x112>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	8812      	ldrh	r2, [r2, #0]
 8009cf2:	fb02 f303 	mul.w	r3, r2, r3
 8009cf6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfe:	bf28      	it	cs
 8009d00:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009d04:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	33b0      	adds	r3, #176	@ 0xb0
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	695c      	ldr	r4, [r3, #20]
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	f103 0110 	add.w	r1, r3, #16
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	689a      	ldr	r2, [r3, #8]
                                                                     (len / p_scsi_blk->size)) < 0)
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	4618      	mov	r0, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	78f8      	ldrb	r0, [r7, #3]
 8009d32:	47a0      	blx	r4
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	da08      	bge.n	8009d4c <SCSI_ProcessWrite+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8009d3a:	78f9      	ldrb	r1, [r7, #3]
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	2204      	movs	r2, #4
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff fa4c 	bl	80091de <SCSI_SenseCode>
    return -1;
 8009d46:	f04f 33ff 	mov.w	r3, #4294967295
 8009d4a:	e03c      	b.n	8009dc6 <SCSI_ProcessWrite+0x112>
  }

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	689a      	ldr	r2, [r3, #8]
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	881b      	ldrh	r3, [r3, #0]
 8009d54:	4619      	mov	r1, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d5c:	441a      	add	r2, r3
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	881b      	ldrh	r3, [r3, #0]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d72:	1ad2      	subs	r2, r2, r3
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	60da      	str	r2, [r3, #12]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	1ad2      	subs	r2, r2, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d104      	bne.n	8009d9a <SCSI_ProcessWrite+0xe6>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009d90:	2100      	movs	r1, #0
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f7fe fc26 	bl	80085e4 <MSC_BOT_SendCSW>
 8009d98:	e014      	b.n	8009dc4 <SCSI_ProcessWrite+0x110>
  }
  else
  {
    len = MIN((p_scsi_blk->len * p_scsi_blk->size), MSC_MEDIA_PACKET);
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	693a      	ldr	r2, [r7, #16]
 8009da0:	8812      	ldrh	r2, [r2, #0]
 8009da2:	fb02 f303 	mul.w	r3, r2, r3
 8009da6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009daa:	bf28      	it	cs
 8009dac:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8009db0:	60fb      	str	r3, [r7, #12]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8009db2:	4b07      	ldr	r3, [pc, #28]	@ (8009dd0 <SCSI_ProcessWrite+0x11c>)
 8009db4:	7819      	ldrb	r1, [r3, #0]
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f103 0210 	add.w	r2, r3, #16
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f005 fe9f 	bl	800fb02 <USBD_LL_PrepareReceive>
  }

  return 0;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	371c      	adds	r7, #28
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd90      	pop	{r4, r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	20000087 	.word	0x20000087

08009dd4 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b087      	sub	sp, #28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8009de2:	88fb      	ldrh	r3, [r7, #6]
 8009de4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d102      	bne.n	8009df2 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8009dec:	f04f 33ff 	mov.w	r3, #4294967295
 8009df0:	e013      	b.n	8009e1a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8009df2:	8afa      	ldrh	r2, [r7, #22]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8009df8:	e00b      	b.n	8009e12 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8009dfa:	8afb      	ldrh	r3, [r7, #22]
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8009e00:	8afb      	ldrh	r3, [r7, #22]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	441a      	add	r2, r3
 8009e06:	8afb      	ldrh	r3, [r7, #22]
 8009e08:	7811      	ldrb	r1, [r2, #0]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	460a      	mov	r2, r1
 8009e10:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8009e12:	8afb      	ldrh	r3, [r7, #22]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1f0      	bne.n	8009dfa <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr

08009e26 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b086      	sub	sp, #24
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	4613      	mov	r3, r2
 8009e32:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e01f      	b.n	8009e7e <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	79fa      	ldrb	r2, [r7, #7]
 8009e70:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f005 fcd0 	bl	800f818 <USBD_LL_Init>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e025      	b.n	8009eea <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	32ae      	adds	r2, #174	@ 0xae
 8009eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00f      	beq.n	8009eda <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	32ae      	adds	r2, #174	@ 0xae
 8009ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eca:	f107 020e 	add.w	r2, r7, #14
 8009ece:	4610      	mov	r0, r2
 8009ed0:	4798      	blx	r3
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009ee8:	2300      	movs	r3, #0
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b082      	sub	sp, #8
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f005 fcd8 	bl	800f8b0 <USBD_LL_Start>
 8009f00:	4603      	mov	r3, r0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f12:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d009      	beq.n	8009f4e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	78fa      	ldrb	r2, [r7, #3]
 8009f44:	4611      	mov	r1, r2
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	4798      	blx	r3
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	78fa      	ldrb	r2, [r7, #3]
 8009f72:	4611      	mov	r1, r2
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	4798      	blx	r3
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 f921 	bl	800b1e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fc0:	f003 031f 	and.w	r3, r3, #31
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d01a      	beq.n	8009ffe <USBD_LL_SetupStage+0x72>
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d822      	bhi.n	800a012 <USBD_LL_SetupStage+0x86>
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <USBD_LL_SetupStage+0x4a>
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d00a      	beq.n	8009fea <USBD_LL_SetupStage+0x5e>
 8009fd4:	e01d      	b.n	800a012 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 fb76 	bl	800a6d0 <USBD_StdDevReq>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe8:	e020      	b.n	800a02c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 fbde 	bl	800a7b4 <USBD_StdItfReq>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8009ffc:	e016      	b.n	800a02c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fc40 	bl	800a88c <USBD_StdEPReq>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]
      break;
 800a010:	e00c      	b.n	800a02c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a018:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	4619      	mov	r1, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f005 fcc4 	bl	800f9ae <USBD_LL_StallEP>
 800a026:	4603      	mov	r3, r0
 800a028:	73fb      	strb	r3, [r7, #15]
      break;
 800a02a:	bf00      	nop
  }

  return ret;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b086      	sub	sp, #24
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	460b      	mov	r3, r1
 800a040:	607a      	str	r2, [r7, #4]
 800a042:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a048:	7afb      	ldrb	r3, [r7, #11]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d177      	bne.n	800a13e <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a054:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	f040 80a1 	bne.w	800a1a4 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	8992      	ldrh	r2, [r2, #12]
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d91c      	bls.n	800a0a8 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	8992      	ldrh	r2, [r2, #12]
 800a076:	1a9a      	subs	r2, r3, r2
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	8992      	ldrh	r2, [r2, #12]
 800a084:	441a      	add	r2, r3
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	6919      	ldr	r1, [r3, #16]
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	899b      	ldrh	r3, [r3, #12]
 800a092:	461a      	mov	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	4293      	cmp	r3, r2
 800a09a:	bf38      	it	cc
 800a09c:	4613      	movcc	r3, r2
 800a09e:	461a      	mov	r2, r3
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f001 f986 	bl	800b3b2 <USBD_CtlContinueRx>
 800a0a6:	e07d      	b.n	800a1a4 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0ae:	f003 031f 	and.w	r3, r3, #31
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d014      	beq.n	800a0e0 <USBD_LL_DataOutStage+0xaa>
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d81d      	bhi.n	800a0f6 <USBD_LL_DataOutStage+0xc0>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <USBD_LL_DataOutStage+0x8e>
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	d003      	beq.n	800a0ca <USBD_LL_DataOutStage+0x94>
 800a0c2:	e018      	b.n	800a0f6 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	75bb      	strb	r3, [r7, #22]
            break;
 800a0c8:	e018      	b.n	800a0fc <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fa6e 	bl	800a5b6 <USBD_CoreFindIF>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	75bb      	strb	r3, [r7, #22]
            break;
 800a0de:	e00d      	b.n	800a0fc <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 fa70 	bl	800a5d0 <USBD_CoreFindEP>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	75bb      	strb	r3, [r7, #22]
            break;
 800a0f4:	e002      	b.n	800a0fc <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	75bb      	strb	r3, [r7, #22]
            break;
 800a0fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a0fc:	7dbb      	ldrb	r3, [r7, #22]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d119      	bne.n	800a136 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d113      	bne.n	800a136 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a10e:	7dba      	ldrb	r2, [r7, #22]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	32ae      	adds	r2, #174	@ 0xae
 800a114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a11e:	7dba      	ldrb	r2, [r7, #22]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a126:	7dba      	ldrb	r2, [r7, #22]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	32ae      	adds	r2, #174	@ 0xae
 800a12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f001 f94c 	bl	800b3d4 <USBD_CtlSendStatus>
 800a13c:	e032      	b.n	800a1a4 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a144:	b2db      	uxtb	r3, r3
 800a146:	4619      	mov	r1, r3
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 fa41 	bl	800a5d0 <USBD_CoreFindEP>
 800a14e:	4603      	mov	r3, r0
 800a150:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a152:	7dbb      	ldrb	r3, [r7, #22]
 800a154:	2bff      	cmp	r3, #255	@ 0xff
 800a156:	d025      	beq.n	800a1a4 <USBD_LL_DataOutStage+0x16e>
 800a158:	7dbb      	ldrb	r3, [r7, #22]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d122      	bne.n	800a1a4 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b03      	cmp	r3, #3
 800a168:	d117      	bne.n	800a19a <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a16a:	7dba      	ldrb	r2, [r7, #22]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	32ae      	adds	r2, #174	@ 0xae
 800a170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00f      	beq.n	800a19a <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a17a:	7dba      	ldrb	r2, [r7, #22]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a182:	7dba      	ldrb	r2, [r7, #22]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	32ae      	adds	r2, #174	@ 0xae
 800a188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	7afa      	ldrb	r2, [r7, #11]
 800a190:	4611      	mov	r1, r2
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	4798      	blx	r3
 800a196:	4603      	mov	r3, r0
 800a198:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	e000      	b.n	800a1a6 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3718      	adds	r7, #24
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b086      	sub	sp, #24
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	607a      	str	r2, [r7, #4]
 800a1ba:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d178      	bne.n	800a2b4 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	3314      	adds	r3, #20
 800a1c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d163      	bne.n	800a29a <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	8992      	ldrh	r2, [r2, #12]
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d91c      	bls.n	800a218 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	8992      	ldrh	r2, [r2, #12]
 800a1e6:	1a9a      	subs	r2, r3, r2
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	8992      	ldrh	r2, [r2, #12]
 800a1f4:	441a      	add	r2, r3
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	6919      	ldr	r1, [r3, #16]
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	461a      	mov	r2, r3
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f001 f8c3 	bl	800b390 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a20a:	2300      	movs	r3, #0
 800a20c:	2200      	movs	r2, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f005 fc76 	bl	800fb02 <USBD_LL_PrepareReceive>
 800a216:	e040      	b.n	800a29a <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	899b      	ldrh	r3, [r3, #12]
 800a21c:	461a      	mov	r2, r3
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d11c      	bne.n	800a260 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	693a      	ldr	r2, [r7, #16]
 800a22c:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a22e:	4293      	cmp	r3, r2
 800a230:	d316      	bcc.n	800a260 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	681a      	ldr	r2, [r3, #0]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d20f      	bcs.n	800a260 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a240:	2200      	movs	r2, #0
 800a242:	2100      	movs	r1, #0
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	f001 f8a3 	bl	800b390 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a252:	2300      	movs	r3, #0
 800a254:	2200      	movs	r2, #0
 800a256:	2100      	movs	r1, #0
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f005 fc52 	bl	800fb02 <USBD_LL_PrepareReceive>
 800a25e:	e01c      	b.n	800a29a <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a266:	b2db      	uxtb	r3, r3
 800a268:	2b03      	cmp	r3, #3
 800a26a:	d10f      	bne.n	800a28c <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d009      	beq.n	800a28c <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a28c:	2180      	movs	r1, #128	@ 0x80
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f005 fb8d 	bl	800f9ae <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a294:	68f8      	ldr	r0, [r7, #12]
 800a296:	f001 f8b0 	bl	800b3fa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d03a      	beq.n	800a31a <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f7ff fe30 	bl	8009f0a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a2b2:	e032      	b.n	800a31a <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a2b4:	7afb      	ldrb	r3, [r7, #11]
 800a2b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	4619      	mov	r1, r3
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 f986 	bl	800a5d0 <USBD_CoreFindEP>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	2bff      	cmp	r3, #255	@ 0xff
 800a2cc:	d025      	beq.n	800a31a <USBD_LL_DataInStage+0x16c>
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d122      	bne.n	800a31a <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d11c      	bne.n	800a31a <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a2e0:	7dfa      	ldrb	r2, [r7, #23]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	32ae      	adds	r2, #174	@ 0xae
 800a2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d014      	beq.n	800a31a <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a2f0:	7dfa      	ldrb	r2, [r7, #23]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a2f8:	7dfa      	ldrb	r2, [r7, #23]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	32ae      	adds	r2, #174	@ 0xae
 800a2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a302:	695b      	ldr	r3, [r3, #20]
 800a304:	7afa      	ldrb	r2, [r7, #11]
 800a306:	4611      	mov	r1, r2
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	4798      	blx	r3
 800a30c:	4603      	mov	r3, r0
 800a30e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a310:	7dbb      	ldrb	r3, [r7, #22]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a316:	7dbb      	ldrb	r3, [r7, #22]
 800a318:	e000      	b.n	800a31c <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3718      	adds	r7, #24
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a32c:	2300      	movs	r3, #0
 800a32e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d014      	beq.n	800a38a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d00e      	beq.n	800a38a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6852      	ldr	r2, [r2, #4]
 800a378:	b2d2      	uxtb	r2, r2
 800a37a:	4611      	mov	r1, r2
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	4798      	blx	r3
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a386:	2303      	movs	r3, #3
 800a388:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a38a:	2340      	movs	r3, #64	@ 0x40
 800a38c:	2200      	movs	r2, #0
 800a38e:	2100      	movs	r1, #0
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f005 faa8 	bl	800f8e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2240      	movs	r2, #64	@ 0x40
 800a3a2:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3a6:	2340      	movs	r3, #64	@ 0x40
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2180      	movs	r1, #128	@ 0x80
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f005 fa9a 	bl	800f8e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2240      	movs	r2, #64	@ 0x40
 800a3be:	841a      	strh	r2, [r3, #32]

  return ret;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	78fa      	ldrb	r2, [r7, #3]
 800a3da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	d006      	beq.n	800a40c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a404:	b2da      	uxtb	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2204      	movs	r2, #4
 800a410:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b04      	cmp	r3, #4
 800a434:	d106      	bne.n	800a444 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b03      	cmp	r3, #3
 800a464:	d110      	bne.n	800a488 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00b      	beq.n	800a488 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a482:	69db      	ldr	r3, [r3, #28]
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
 800a49a:	460b      	mov	r3, r1
 800a49c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	32ae      	adds	r2, #174	@ 0xae
 800a4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a4b0:	2303      	movs	r3, #3
 800a4b2:	e01c      	b.n	800a4ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b03      	cmp	r3, #3
 800a4be:	d115      	bne.n	800a4ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	32ae      	adds	r2, #174	@ 0xae
 800a4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	32ae      	adds	r2, #174	@ 0xae
 800a4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e2:	6a1b      	ldr	r3, [r3, #32]
 800a4e4:	78fa      	ldrb	r2, [r7, #3]
 800a4e6:	4611      	mov	r1, r2
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	460b      	mov	r3, r1
 800a500:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	32ae      	adds	r2, #174	@ 0xae
 800a50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a514:	2303      	movs	r3, #3
 800a516:	e01c      	b.n	800a552 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b03      	cmp	r3, #3
 800a522:	d115      	bne.n	800a550 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	32ae      	adds	r2, #174	@ 0xae
 800a52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00b      	beq.n	800a550 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	32ae      	adds	r2, #174	@ 0xae
 800a542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	4611      	mov	r1, r2
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b083      	sub	sp, #12
 800a55e:	af00      	add	r7, sp, #0
 800a560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00e      	beq.n	800a5ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	6852      	ldr	r2, [r2, #4]
 800a59a:	b2d2      	uxtb	r2, r2
 800a59c:	4611      	mov	r1, r2
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	370c      	adds	r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a5dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b086      	sub	sp, #24
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a5fe:	2300      	movs	r3, #0
 800a600:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	885b      	ldrh	r3, [r3, #2]
 800a606:	b29b      	uxth	r3, r3
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d91f      	bls.n	800a650 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a616:	e013      	b.n	800a640 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a618:	f107 030a 	add.w	r3, r7, #10
 800a61c:	4619      	mov	r1, r3
 800a61e:	6978      	ldr	r0, [r7, #20]
 800a620:	f000 f81b 	bl	800a65a <USBD_GetNextDesc>
 800a624:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	785b      	ldrb	r3, [r3, #1]
 800a62a:	2b05      	cmp	r3, #5
 800a62c:	d108      	bne.n	800a640 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	789b      	ldrb	r3, [r3, #2]
 800a636:	78fa      	ldrb	r2, [r7, #3]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d008      	beq.n	800a64e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a63c:	2300      	movs	r3, #0
 800a63e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	885b      	ldrh	r3, [r3, #2]
 800a644:	b29a      	uxth	r2, r3
 800a646:	897b      	ldrh	r3, [r7, #10]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d8e5      	bhi.n	800a618 <USBD_GetEpDesc+0x2e>
 800a64c:	e000      	b.n	800a650 <USBD_GetEpDesc+0x66>
          break;
 800a64e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a650:	693b      	ldr	r3, [r7, #16]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3718      	adds	r7, #24
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a65a:	b480      	push	{r7}
 800a65c:	b085      	sub	sp, #20
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
 800a662:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	881b      	ldrh	r3, [r3, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	7812      	ldrb	r2, [r2, #0]
 800a670:	4413      	add	r3, r2
 800a672:	b29a      	uxth	r2, r3
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4413      	add	r3, r2
 800a682:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a684:	68fb      	ldr	r3, [r7, #12]
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a692:	b480      	push	{r7}
 800a694:	b087      	sub	sp, #28
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	781b      	ldrb	r3, [r3, #0]
 800a6a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a6b0:	8a3b      	ldrh	r3, [r7, #16]
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	b21a      	sxth	r2, r3
 800a6b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	b21b      	sxth	r3, r3
 800a6be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a6c0:	89fb      	ldrh	r3, [r7, #14]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	371c      	adds	r7, #28
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
	...

0800a6d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6e6:	2b40      	cmp	r3, #64	@ 0x40
 800a6e8:	d005      	beq.n	800a6f6 <USBD_StdDevReq+0x26>
 800a6ea:	2b40      	cmp	r3, #64	@ 0x40
 800a6ec:	d857      	bhi.n	800a79e <USBD_StdDevReq+0xce>
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00f      	beq.n	800a712 <USBD_StdDevReq+0x42>
 800a6f2:	2b20      	cmp	r3, #32
 800a6f4:	d153      	bne.n	800a79e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	32ae      	adds	r2, #174	@ 0xae
 800a700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]
      break;
 800a710:	e04a      	b.n	800a7a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	785b      	ldrb	r3, [r3, #1]
 800a716:	2b09      	cmp	r3, #9
 800a718:	d83b      	bhi.n	800a792 <USBD_StdDevReq+0xc2>
 800a71a:	a201      	add	r2, pc, #4	@ (adr r2, 800a720 <USBD_StdDevReq+0x50>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a775 	.word	0x0800a775
 800a724:	0800a789 	.word	0x0800a789
 800a728:	0800a793 	.word	0x0800a793
 800a72c:	0800a77f 	.word	0x0800a77f
 800a730:	0800a793 	.word	0x0800a793
 800a734:	0800a753 	.word	0x0800a753
 800a738:	0800a749 	.word	0x0800a749
 800a73c:	0800a793 	.word	0x0800a793
 800a740:	0800a76b 	.word	0x0800a76b
 800a744:	0800a75d 	.word	0x0800a75d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a748:	6839      	ldr	r1, [r7, #0]
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f000 fa3e 	bl	800abcc <USBD_GetDescriptor>
          break;
 800a750:	e024      	b.n	800a79c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a752:	6839      	ldr	r1, [r7, #0]
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 fba3 	bl	800aea0 <USBD_SetAddress>
          break;
 800a75a:	e01f      	b.n	800a79c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a75c:	6839      	ldr	r1, [r7, #0]
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 fbe2 	bl	800af28 <USBD_SetConfig>
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]
          break;
 800a768:	e018      	b.n	800a79c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fc85 	bl	800b07c <USBD_GetConfig>
          break;
 800a772:	e013      	b.n	800a79c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a774:	6839      	ldr	r1, [r7, #0]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 fcb6 	bl	800b0e8 <USBD_GetStatus>
          break;
 800a77c:	e00e      	b.n	800a79c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f000 fce5 	bl	800b150 <USBD_SetFeature>
          break;
 800a786:	e009      	b.n	800a79c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fd09 	bl	800b1a2 <USBD_ClrFeature>
          break;
 800a790:	e004      	b.n	800a79c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fd60 	bl	800b25a <USBD_CtlError>
          break;
 800a79a:	bf00      	nop
      }
      break;
 800a79c:	e004      	b.n	800a7a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fd5a 	bl	800b25a <USBD_CtlError>
      break;
 800a7a6:	bf00      	nop
  }

  return ret;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop

0800a7b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7ca:	2b40      	cmp	r3, #64	@ 0x40
 800a7cc:	d005      	beq.n	800a7da <USBD_StdItfReq+0x26>
 800a7ce:	2b40      	cmp	r3, #64	@ 0x40
 800a7d0:	d852      	bhi.n	800a878 <USBD_StdItfReq+0xc4>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d001      	beq.n	800a7da <USBD_StdItfReq+0x26>
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d14e      	bne.n	800a878 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	3b01      	subs	r3, #1
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	d840      	bhi.n	800a86a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	889b      	ldrh	r3, [r3, #4]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d836      	bhi.n	800a860 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	889b      	ldrh	r3, [r3, #4]
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	4619      	mov	r1, r3
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f7ff fedb 	bl	800a5b6 <USBD_CoreFindIF>
 800a800:	4603      	mov	r3, r0
 800a802:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a804:	7bbb      	ldrb	r3, [r7, #14]
 800a806:	2bff      	cmp	r3, #255	@ 0xff
 800a808:	d01d      	beq.n	800a846 <USBD_StdItfReq+0x92>
 800a80a:	7bbb      	ldrb	r3, [r7, #14]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d11a      	bne.n	800a846 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a810:	7bba      	ldrb	r2, [r7, #14]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	32ae      	adds	r2, #174	@ 0xae
 800a816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d00f      	beq.n	800a840 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a820:	7bba      	ldrb	r2, [r7, #14]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a828:	7bba      	ldrb	r2, [r7, #14]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	32ae      	adds	r2, #174	@ 0xae
 800a82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	4798      	blx	r3
 800a83a:	4603      	mov	r3, r0
 800a83c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a83e:	e004      	b.n	800a84a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a844:	e001      	b.n	800a84a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a846:	2303      	movs	r3, #3
 800a848:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	88db      	ldrh	r3, [r3, #6]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d110      	bne.n	800a874 <USBD_StdItfReq+0xc0>
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10d      	bne.n	800a874 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fdbb 	bl	800b3d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a85e:	e009      	b.n	800a874 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fcf9 	bl	800b25a <USBD_CtlError>
          break;
 800a868:	e004      	b.n	800a874 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fcf4 	bl	800b25a <USBD_CtlError>
          break;
 800a872:	e000      	b.n	800a876 <USBD_StdItfReq+0xc2>
          break;
 800a874:	bf00      	nop
      }
      break;
 800a876:	e004      	b.n	800a882 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 fced 	bl	800b25a <USBD_CtlError>
      break;
 800a880:	bf00      	nop
  }

  return ret;
 800a882:	7bfb      	ldrb	r3, [r7, #15]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	889b      	ldrh	r3, [r3, #4]
 800a89e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8a8:	2b40      	cmp	r3, #64	@ 0x40
 800a8aa:	d007      	beq.n	800a8bc <USBD_StdEPReq+0x30>
 800a8ac:	2b40      	cmp	r3, #64	@ 0x40
 800a8ae:	f200 8181 	bhi.w	800abb4 <USBD_StdEPReq+0x328>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d02a      	beq.n	800a90c <USBD_StdEPReq+0x80>
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	f040 817c 	bne.w	800abb4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7ff fe85 	bl	800a5d0 <USBD_CoreFindEP>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ca:	7b7b      	ldrb	r3, [r7, #13]
 800a8cc:	2bff      	cmp	r3, #255	@ 0xff
 800a8ce:	f000 8176 	beq.w	800abbe <USBD_StdEPReq+0x332>
 800a8d2:	7b7b      	ldrb	r3, [r7, #13]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f040 8172 	bne.w	800abbe <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800a8da:	7b7a      	ldrb	r2, [r7, #13]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a8e2:	7b7a      	ldrb	r2, [r7, #13]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	32ae      	adds	r2, #174	@ 0xae
 800a8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 8165 	beq.w	800abbe <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a8f4:	7b7a      	ldrb	r2, [r7, #13]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	32ae      	adds	r2, #174	@ 0xae
 800a8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a90a:	e158      	b.n	800abbe <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	785b      	ldrb	r3, [r3, #1]
 800a910:	2b03      	cmp	r3, #3
 800a912:	d008      	beq.n	800a926 <USBD_StdEPReq+0x9a>
 800a914:	2b03      	cmp	r3, #3
 800a916:	f300 8147 	bgt.w	800aba8 <USBD_StdEPReq+0x31c>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	f000 809b 	beq.w	800aa56 <USBD_StdEPReq+0x1ca>
 800a920:	2b01      	cmp	r3, #1
 800a922:	d03c      	beq.n	800a99e <USBD_StdEPReq+0x112>
 800a924:	e140      	b.n	800aba8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d002      	beq.n	800a938 <USBD_StdEPReq+0xac>
 800a932:	2b03      	cmp	r3, #3
 800a934:	d016      	beq.n	800a964 <USBD_StdEPReq+0xd8>
 800a936:	e02c      	b.n	800a992 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00d      	beq.n	800a95a <USBD_StdEPReq+0xce>
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	2b80      	cmp	r3, #128	@ 0x80
 800a942:	d00a      	beq.n	800a95a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a944:	7bbb      	ldrb	r3, [r7, #14]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f005 f830 	bl	800f9ae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a94e:	2180      	movs	r1, #128	@ 0x80
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f005 f82c 	bl	800f9ae <USBD_LL_StallEP>
 800a956:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a958:	e020      	b.n	800a99c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fc7c 	bl	800b25a <USBD_CtlError>
              break;
 800a962:	e01b      	b.n	800a99c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	885b      	ldrh	r3, [r3, #2]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10e      	bne.n	800a98a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a96c:	7bbb      	ldrb	r3, [r7, #14]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <USBD_StdEPReq+0xfe>
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	2b80      	cmp	r3, #128	@ 0x80
 800a976:	d008      	beq.n	800a98a <USBD_StdEPReq+0xfe>
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	88db      	ldrh	r3, [r3, #6]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	4619      	mov	r1, r3
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f005 f812 	bl	800f9ae <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fd22 	bl	800b3d4 <USBD_CtlSendStatus>

              break;
 800a990:	e004      	b.n	800a99c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a992:	6839      	ldr	r1, [r7, #0]
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 fc60 	bl	800b25a <USBD_CtlError>
              break;
 800a99a:	bf00      	nop
          }
          break;
 800a99c:	e109      	b.n	800abb2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d002      	beq.n	800a9b0 <USBD_StdEPReq+0x124>
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d016      	beq.n	800a9dc <USBD_StdEPReq+0x150>
 800a9ae:	e04b      	b.n	800aa48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00d      	beq.n	800a9d2 <USBD_StdEPReq+0x146>
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	2b80      	cmp	r3, #128	@ 0x80
 800a9ba:	d00a      	beq.n	800a9d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f004 fff4 	bl	800f9ae <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9c6:	2180      	movs	r1, #128	@ 0x80
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f004 fff0 	bl	800f9ae <USBD_LL_StallEP>
 800a9ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a9d0:	e040      	b.n	800aa54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 fc40 	bl	800b25a <USBD_CtlError>
              break;
 800a9da:	e03b      	b.n	800aa54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	885b      	ldrh	r3, [r3, #2]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d136      	bne.n	800aa52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d004      	beq.n	800a9f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f004 fffa 	bl	800f9ec <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f000 fceb 	bl	800b3d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff fde4 	bl	800a5d0 <USBD_CoreFindEP>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa0c:	7b7b      	ldrb	r3, [r7, #13]
 800aa0e:	2bff      	cmp	r3, #255	@ 0xff
 800aa10:	d01f      	beq.n	800aa52 <USBD_StdEPReq+0x1c6>
 800aa12:	7b7b      	ldrb	r3, [r7, #13]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d11c      	bne.n	800aa52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aa18:	7b7a      	ldrb	r2, [r7, #13]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aa20:	7b7a      	ldrb	r2, [r7, #13]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	32ae      	adds	r2, #174	@ 0xae
 800aa26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d010      	beq.n	800aa52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aa30:	7b7a      	ldrb	r2, [r7, #13]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	32ae      	adds	r2, #174	@ 0xae
 800aa36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aa46:	e004      	b.n	800aa52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fc05 	bl	800b25a <USBD_CtlError>
              break;
 800aa50:	e000      	b.n	800aa54 <USBD_StdEPReq+0x1c8>
              break;
 800aa52:	bf00      	nop
          }
          break;
 800aa54:	e0ad      	b.n	800abb2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d002      	beq.n	800aa68 <USBD_StdEPReq+0x1dc>
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d033      	beq.n	800aace <USBD_StdEPReq+0x242>
 800aa66:	e099      	b.n	800ab9c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d007      	beq.n	800aa7e <USBD_StdEPReq+0x1f2>
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b80      	cmp	r3, #128	@ 0x80
 800aa72:	d004      	beq.n	800aa7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f000 fbef 	bl	800b25a <USBD_CtlError>
                break;
 800aa7c:	e093      	b.n	800aba6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	da0b      	bge.n	800aa9e <USBD_StdEPReq+0x212>
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	3310      	adds	r3, #16
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	4413      	add	r3, r2
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	e00b      	b.n	800aab6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	4413      	add	r3, r2
 800aab4:	3304      	adds	r3, #4
 800aab6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2200      	movs	r2, #0
 800aabc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	330e      	adds	r3, #14
 800aac2:	2202      	movs	r2, #2
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f000 fc44 	bl	800b354 <USBD_CtlSendData>
              break;
 800aacc:	e06b      	b.n	800aba6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	da11      	bge.n	800aafa <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	f003 020f 	and.w	r2, r3, #15
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	3323      	adds	r3, #35	@ 0x23
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d117      	bne.n	800ab20 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800aaf0:	6839      	ldr	r1, [r7, #0]
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fbb1 	bl	800b25a <USBD_CtlError>
                  break;
 800aaf8:	e055      	b.n	800aba6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aafa:	7bbb      	ldrb	r3, [r7, #14]
 800aafc:	f003 020f 	and.w	r2, r3, #15
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4613      	mov	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d104      	bne.n	800ab20 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fb9e 	bl	800b25a <USBD_CtlError>
                  break;
 800ab1e:	e042      	b.n	800aba6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	da0b      	bge.n	800ab40 <USBD_StdEPReq+0x2b4>
 800ab28:	7bbb      	ldrb	r3, [r7, #14]
 800ab2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	3310      	adds	r3, #16
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	e00b      	b.n	800ab58 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab46:	4613      	mov	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	4413      	add	r3, r2
 800ab56:	3304      	adds	r3, #4
 800ab58:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <USBD_StdEPReq+0x2da>
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	2b80      	cmp	r3, #128	@ 0x80
 800ab64:	d103      	bne.n	800ab6e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	739a      	strb	r2, [r3, #14]
 800ab6c:	e00e      	b.n	800ab8c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f004 ff59 	bl	800fa2a <USBD_LL_IsStallEP>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2201      	movs	r2, #1
 800ab82:	739a      	strb	r2, [r3, #14]
 800ab84:	e002      	b.n	800ab8c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	330e      	adds	r3, #14
 800ab90:	2202      	movs	r2, #2
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fbdd 	bl	800b354 <USBD_CtlSendData>
              break;
 800ab9a:	e004      	b.n	800aba6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fb5b 	bl	800b25a <USBD_CtlError>
              break;
 800aba4:	bf00      	nop
          }
          break;
 800aba6:	e004      	b.n	800abb2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800aba8:	6839      	ldr	r1, [r7, #0]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fb55 	bl	800b25a <USBD_CtlError>
          break;
 800abb0:	bf00      	nop
      }
      break;
 800abb2:	e005      	b.n	800abc0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800abb4:	6839      	ldr	r1, [r7, #0]
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 fb4f 	bl	800b25a <USBD_CtlError>
      break;
 800abbc:	e000      	b.n	800abc0 <USBD_StdEPReq+0x334>
      break;
 800abbe:	bf00      	nop
  }

  return ret;
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800abd6:	2300      	movs	r3, #0
 800abd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800abda:	2300      	movs	r3, #0
 800abdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800abde:	2300      	movs	r3, #0
 800abe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	885b      	ldrh	r3, [r3, #2]
 800abe6:	0a1b      	lsrs	r3, r3, #8
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b01      	subs	r3, #1
 800abec:	2b06      	cmp	r3, #6
 800abee:	f200 8128 	bhi.w	800ae42 <USBD_GetDescriptor+0x276>
 800abf2:	a201      	add	r2, pc, #4	@ (adr r2, 800abf8 <USBD_GetDescriptor+0x2c>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac15 	.word	0x0800ac15
 800abfc:	0800ac2d 	.word	0x0800ac2d
 800ac00:	0800ac6d 	.word	0x0800ac6d
 800ac04:	0800ae43 	.word	0x0800ae43
 800ac08:	0800ae43 	.word	0x0800ae43
 800ac0c:	0800ade3 	.word	0x0800ade3
 800ac10:	0800ae0f 	.word	0x0800ae0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	7c12      	ldrb	r2, [r2, #16]
 800ac20:	f107 0108 	add.w	r1, r7, #8
 800ac24:	4610      	mov	r0, r2
 800ac26:	4798      	blx	r3
 800ac28:	60f8      	str	r0, [r7, #12]
      break;
 800ac2a:	e112      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7c1b      	ldrb	r3, [r3, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10d      	bne.n	800ac50 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac3c:	f107 0208 	add.w	r2, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ac4e:	e100      	b.n	800ae52 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac58:	f107 0208 	add.w	r2, r7, #8
 800ac5c:	4610      	mov	r0, r2
 800ac5e:	4798      	blx	r3
 800ac60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	3301      	adds	r3, #1
 800ac66:	2202      	movs	r2, #2
 800ac68:	701a      	strb	r2, [r3, #0]
      break;
 800ac6a:	e0f2      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	885b      	ldrh	r3, [r3, #2]
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b05      	cmp	r3, #5
 800ac74:	f200 80ac 	bhi.w	800add0 <USBD_GetDescriptor+0x204>
 800ac78:	a201      	add	r2, pc, #4	@ (adr r2, 800ac80 <USBD_GetDescriptor+0xb4>)
 800ac7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7e:	bf00      	nop
 800ac80:	0800ac99 	.word	0x0800ac99
 800ac84:	0800accd 	.word	0x0800accd
 800ac88:	0800ad01 	.word	0x0800ad01
 800ac8c:	0800ad35 	.word	0x0800ad35
 800ac90:	0800ad69 	.word	0x0800ad69
 800ac94:	0800ad9d 	.word	0x0800ad9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	7c12      	ldrb	r2, [r2, #16]
 800acb0:	f107 0108 	add.w	r1, r7, #8
 800acb4:	4610      	mov	r0, r2
 800acb6:	4798      	blx	r3
 800acb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acba:	e091      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 facb 	bl	800b25a <USBD_CtlError>
            err++;
 800acc4:	7afb      	ldrb	r3, [r7, #11]
 800acc6:	3301      	adds	r3, #1
 800acc8:	72fb      	strb	r3, [r7, #11]
          break;
 800acca:	e089      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00b      	beq.n	800acf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	7c12      	ldrb	r2, [r2, #16]
 800ace4:	f107 0108 	add.w	r1, r7, #8
 800ace8:	4610      	mov	r0, r2
 800acea:	4798      	blx	r3
 800acec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acee:	e077      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fab1 	bl	800b25a <USBD_CtlError>
            err++;
 800acf8:	7afb      	ldrb	r3, [r7, #11]
 800acfa:	3301      	adds	r3, #1
 800acfc:	72fb      	strb	r3, [r7, #11]
          break;
 800acfe:	e06f      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00b      	beq.n	800ad24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	7c12      	ldrb	r2, [r2, #16]
 800ad18:	f107 0108 	add.w	r1, r7, #8
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad22:	e05d      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad24:	6839      	ldr	r1, [r7, #0]
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 fa97 	bl	800b25a <USBD_CtlError>
            err++;
 800ad2c:	7afb      	ldrb	r3, [r7, #11]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	72fb      	strb	r3, [r7, #11]
          break;
 800ad32:	e055      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	7c12      	ldrb	r2, [r2, #16]
 800ad4c:	f107 0108 	add.w	r1, r7, #8
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad56:	e043      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fa7d 	bl	800b25a <USBD_CtlError>
            err++;
 800ad60:	7afb      	ldrb	r3, [r7, #11]
 800ad62:	3301      	adds	r3, #1
 800ad64:	72fb      	strb	r3, [r7, #11]
          break;
 800ad66:	e03b      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad7a:	695b      	ldr	r3, [r3, #20]
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	7c12      	ldrb	r2, [r2, #16]
 800ad80:	f107 0108 	add.w	r1, r7, #8
 800ad84:	4610      	mov	r0, r2
 800ad86:	4798      	blx	r3
 800ad88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad8a:	e029      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fa63 	bl	800b25a <USBD_CtlError>
            err++;
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	3301      	adds	r3, #1
 800ad98:	72fb      	strb	r3, [r7, #11]
          break;
 800ad9a:	e021      	b.n	800ade0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adae:	699b      	ldr	r3, [r3, #24]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	7c12      	ldrb	r2, [r2, #16]
 800adb4:	f107 0108 	add.w	r1, r7, #8
 800adb8:	4610      	mov	r0, r2
 800adba:	4798      	blx	r3
 800adbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adbe:	e00f      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adc0:	6839      	ldr	r1, [r7, #0]
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa49 	bl	800b25a <USBD_CtlError>
            err++;
 800adc8:	7afb      	ldrb	r3, [r7, #11]
 800adca:	3301      	adds	r3, #1
 800adcc:	72fb      	strb	r3, [r7, #11]
          break;
 800adce:	e007      	b.n	800ade0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fa41 	bl	800b25a <USBD_CtlError>
          err++;
 800add8:	7afb      	ldrb	r3, [r7, #11]
 800adda:	3301      	adds	r3, #1
 800addc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800adde:	bf00      	nop
      }
      break;
 800ade0:	e037      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	7c1b      	ldrb	r3, [r3, #16]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800adf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adf2:	f107 0208 	add.w	r2, r7, #8
 800adf6:	4610      	mov	r0, r2
 800adf8:	4798      	blx	r3
 800adfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800adfc:	e029      	b.n	800ae52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fa2a 	bl	800b25a <USBD_CtlError>
        err++;
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	72fb      	strb	r3, [r7, #11]
      break;
 800ae0c:	e021      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	7c1b      	ldrb	r3, [r3, #16]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10d      	bne.n	800ae32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae1e:	f107 0208 	add.w	r2, r7, #8
 800ae22:	4610      	mov	r0, r2
 800ae24:	4798      	blx	r3
 800ae26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	2207      	movs	r2, #7
 800ae2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae30:	e00f      	b.n	800ae52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fa10 	bl	800b25a <USBD_CtlError>
        err++;
 800ae3a:	7afb      	ldrb	r3, [r7, #11]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae40:	e007      	b.n	800ae52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 fa08 	bl	800b25a <USBD_CtlError>
      err++;
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ae50:	bf00      	nop
  }

  if (err != 0U)
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d11e      	bne.n	800ae96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	88db      	ldrh	r3, [r3, #6]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d016      	beq.n	800ae8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ae60:	893b      	ldrh	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00e      	beq.n	800ae84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	88da      	ldrh	r2, [r3, #6]
 800ae6a:	893b      	ldrh	r3, [r7, #8]
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	bf28      	it	cs
 800ae70:	4613      	movcs	r3, r2
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ae76:	893b      	ldrh	r3, [r7, #8]
 800ae78:	461a      	mov	r2, r3
 800ae7a:	68f9      	ldr	r1, [r7, #12]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 fa69 	bl	800b354 <USBD_CtlSendData>
 800ae82:	e009      	b.n	800ae98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f9e7 	bl	800b25a <USBD_CtlError>
 800ae8c:	e004      	b.n	800ae98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 faa0 	bl	800b3d4 <USBD_CtlSendStatus>
 800ae94:	e000      	b.n	800ae98 <USBD_GetDescriptor+0x2cc>
    return;
 800ae96:	bf00      	nop
  }
}
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop

0800aea0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	889b      	ldrh	r3, [r3, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d131      	bne.n	800af16 <USBD_SetAddress+0x76>
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	88db      	ldrh	r3, [r3, #6]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d12d      	bne.n	800af16 <USBD_SetAddress+0x76>
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	885b      	ldrh	r3, [r3, #2]
 800aebe:	2b7f      	cmp	r3, #127	@ 0x7f
 800aec0:	d829      	bhi.n	800af16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	885b      	ldrh	r3, [r3, #2]
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aecc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b03      	cmp	r3, #3
 800aed8:	d104      	bne.n	800aee4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f9bc 	bl	800b25a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aee2:	e01d      	b.n	800af20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	7bfa      	ldrb	r2, [r7, #15]
 800aee8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	4619      	mov	r1, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f004 fdc6 	bl	800fa82 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fa6c 	bl	800b3d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d004      	beq.n	800af0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2202      	movs	r2, #2
 800af06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af0a:	e009      	b.n	800af20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2201      	movs	r2, #1
 800af10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af14:	e004      	b.n	800af20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f99e 	bl	800b25a <USBD_CtlError>
  }
}
 800af1e:	bf00      	nop
 800af20:	bf00      	nop
 800af22:	3710      	adds	r7, #16
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af32:	2300      	movs	r3, #0
 800af34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	885b      	ldrh	r3, [r3, #2]
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	4b4e      	ldr	r3, [pc, #312]	@ (800b078 <USBD_SetConfig+0x150>)
 800af3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800af40:	4b4d      	ldr	r3, [pc, #308]	@ (800b078 <USBD_SetConfig+0x150>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d905      	bls.n	800af54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f985 	bl	800b25a <USBD_CtlError>
    return USBD_FAIL;
 800af50:	2303      	movs	r3, #3
 800af52:	e08c      	b.n	800b06e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d002      	beq.n	800af66 <USBD_SetConfig+0x3e>
 800af60:	2b03      	cmp	r3, #3
 800af62:	d029      	beq.n	800afb8 <USBD_SetConfig+0x90>
 800af64:	e075      	b.n	800b052 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800af66:	4b44      	ldr	r3, [pc, #272]	@ (800b078 <USBD_SetConfig+0x150>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d020      	beq.n	800afb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800af6e:	4b42      	ldr	r3, [pc, #264]	@ (800b078 <USBD_SetConfig+0x150>)
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	461a      	mov	r2, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af78:	4b3f      	ldr	r3, [pc, #252]	@ (800b078 <USBD_SetConfig+0x150>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	4619      	mov	r1, r3
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7fe ffce 	bl	8009f20 <USBD_SetClassConfig>
 800af84:	4603      	mov	r3, r0
 800af86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800af88:	7bfb      	ldrb	r3, [r7, #15]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d008      	beq.n	800afa0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f962 	bl	800b25a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2202      	movs	r2, #2
 800af9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af9e:	e065      	b.n	800b06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fa17 	bl	800b3d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2203      	movs	r2, #3
 800afaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800afae:	e05d      	b.n	800b06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fa0f 	bl	800b3d4 <USBD_CtlSendStatus>
      break;
 800afb6:	e059      	b.n	800b06c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800afb8:	4b2f      	ldr	r3, [pc, #188]	@ (800b078 <USBD_SetConfig+0x150>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d112      	bne.n	800afe6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800afc8:	4b2b      	ldr	r3, [pc, #172]	@ (800b078 <USBD_SetConfig+0x150>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	461a      	mov	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afd2:	4b29      	ldr	r3, [pc, #164]	@ (800b078 <USBD_SetConfig+0x150>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f7fe ffbd 	bl	8009f58 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f9f8 	bl	800b3d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800afe4:	e042      	b.n	800b06c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800afe6:	4b24      	ldr	r3, [pc, #144]	@ (800b078 <USBD_SetConfig+0x150>)
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	461a      	mov	r2, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d02a      	beq.n	800b04a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	4619      	mov	r1, r3
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7fe ffab 	bl	8009f58 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b002:	4b1d      	ldr	r3, [pc, #116]	@ (800b078 <USBD_SetConfig+0x150>)
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b00c:	4b1a      	ldr	r3, [pc, #104]	@ (800b078 <USBD_SetConfig+0x150>)
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	4619      	mov	r1, r3
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7fe ff84 	bl	8009f20 <USBD_SetClassConfig>
 800b018:	4603      	mov	r3, r0
 800b01a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00f      	beq.n	800b042 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f918 	bl	800b25a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fe ff90 	bl	8009f58 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2202      	movs	r2, #2
 800b03c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b040:	e014      	b.n	800b06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f9c6 	bl	800b3d4 <USBD_CtlSendStatus>
      break;
 800b048:	e010      	b.n	800b06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9c2 	bl	800b3d4 <USBD_CtlSendStatus>
      break;
 800b050:	e00c      	b.n	800b06c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f900 	bl	800b25a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b05a:	4b07      	ldr	r3, [pc, #28]	@ (800b078 <USBD_SetConfig+0x150>)
 800b05c:	781b      	ldrb	r3, [r3, #0]
 800b05e:	4619      	mov	r1, r3
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7fe ff79 	bl	8009f58 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b066:	2303      	movs	r3, #3
 800b068:	73fb      	strb	r3, [r7, #15]
      break;
 800b06a:	bf00      	nop
  }

  return ret;
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20003eec 	.word	0x20003eec

0800b07c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	88db      	ldrh	r3, [r3, #6]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d004      	beq.n	800b098 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f8e2 	bl	800b25a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b096:	e023      	b.n	800b0e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	dc02      	bgt.n	800b0aa <USBD_GetConfig+0x2e>
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dc03      	bgt.n	800b0b0 <USBD_GetConfig+0x34>
 800b0a8:	e015      	b.n	800b0d6 <USBD_GetConfig+0x5a>
 800b0aa:	2b03      	cmp	r3, #3
 800b0ac:	d00b      	beq.n	800b0c6 <USBD_GetConfig+0x4a>
 800b0ae:	e012      	b.n	800b0d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 f948 	bl	800b354 <USBD_CtlSendData>
        break;
 800b0c4:	e00c      	b.n	800b0e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f940 	bl	800b354 <USBD_CtlSendData>
        break;
 800b0d4:	e004      	b.n	800b0e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f8be 	bl	800b25a <USBD_CtlError>
        break;
 800b0de:	bf00      	nop
}
 800b0e0:	bf00      	nop
 800b0e2:	3708      	adds	r7, #8
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d81e      	bhi.n	800b13e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	88db      	ldrh	r3, [r3, #6]
 800b104:	2b02      	cmp	r3, #2
 800b106:	d004      	beq.n	800b112 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f8a5 	bl	800b25a <USBD_CtlError>
        break;
 800b110:	e01a      	b.n	800b148 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f043 0202 	orr.w	r2, r3, #2
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	330c      	adds	r3, #12
 800b132:	2202      	movs	r2, #2
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f90c 	bl	800b354 <USBD_CtlSendData>
      break;
 800b13c:	e004      	b.n	800b148 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f88a 	bl	800b25a <USBD_CtlError>
      break;
 800b146:	bf00      	nop
  }
}
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	885b      	ldrh	r3, [r3, #2]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d107      	bne.n	800b172 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 f932 	bl	800b3d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b170:	e013      	b.n	800b19a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	885b      	ldrh	r3, [r3, #2]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d10b      	bne.n	800b192 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	889b      	ldrh	r3, [r3, #4]
 800b17e:	0a1b      	lsrs	r3, r3, #8
 800b180:	b29b      	uxth	r3, r3
 800b182:	b2da      	uxtb	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f922 	bl	800b3d4 <USBD_CtlSendStatus>
}
 800b190:	e003      	b.n	800b19a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f860 	bl	800b25a <USBD_CtlError>
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}

0800b1a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d80b      	bhi.n	800b1d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	885b      	ldrh	r3, [r3, #2]
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d10c      	bne.n	800b1dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f902 	bl	800b3d4 <USBD_CtlSendStatus>
      }
      break;
 800b1d0:	e004      	b.n	800b1dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b1d2:	6839      	ldr	r1, [r7, #0]
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f840 	bl	800b25a <USBD_CtlError>
      break;
 800b1da:	e000      	b.n	800b1de <USBD_ClrFeature+0x3c>
      break;
 800b1dc:	bf00      	nop
  }
}
 800b1de:	bf00      	nop
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b084      	sub	sp, #16
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
 800b1ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	781a      	ldrb	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3301      	adds	r3, #1
 800b200:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	781a      	ldrb	r2, [r3, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f7ff fa3e 	bl	800a692 <SWAPBYTE>
 800b216:	4603      	mov	r3, r0
 800b218:	461a      	mov	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	3301      	adds	r3, #1
 800b228:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b22a:	68f8      	ldr	r0, [r7, #12]
 800b22c:	f7ff fa31 	bl	800a692 <SWAPBYTE>
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	3301      	adds	r3, #1
 800b23c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3301      	adds	r3, #1
 800b242:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fa24 	bl	800a692 <SWAPBYTE>
 800b24a:	4603      	mov	r3, r0
 800b24c:	461a      	mov	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	80da      	strh	r2, [r3, #6]
}
 800b252:	bf00      	nop
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b082      	sub	sp, #8
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
 800b262:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b264:	2180      	movs	r1, #128	@ 0x80
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f004 fba1 	bl	800f9ae <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b26c:	2100      	movs	r1, #0
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f004 fb9d 	bl	800f9ae <USBD_LL_StallEP>
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b288:	2300      	movs	r3, #0
 800b28a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d042      	beq.n	800b318 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b296:	6938      	ldr	r0, [r7, #16]
 800b298:	f000 f842 	bl	800b320 <USBD_GetLen>
 800b29c:	4603      	mov	r3, r0
 800b29e:	3301      	adds	r3, #1
 800b2a0:	005b      	lsls	r3, r3, #1
 800b2a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2a6:	d808      	bhi.n	800b2ba <USBD_GetString+0x3e>
 800b2a8:	6938      	ldr	r0, [r7, #16]
 800b2aa:	f000 f839 	bl	800b320 <USBD_GetLen>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	005b      	lsls	r3, r3, #1
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	e001      	b.n	800b2be <USBD_GetString+0x42>
 800b2ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b2c2:	7dfb      	ldrb	r3, [r7, #23]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7812      	ldrb	r2, [r2, #0]
 800b2cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2ce:	7dfb      	ldrb	r3, [r7, #23]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	4413      	add	r3, r2
 800b2da:	2203      	movs	r2, #3
 800b2dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b2e4:	e013      	b.n	800b30e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	7812      	ldrb	r2, [r2, #0]
 800b2f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	613b      	str	r3, [r7, #16]
    idx++;
 800b2f8:	7dfb      	ldrb	r3, [r7, #23]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b2fe:	7dfb      	ldrb	r3, [r7, #23]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	4413      	add	r3, r2
 800b304:	2200      	movs	r2, #0
 800b306:	701a      	strb	r2, [r3, #0]
    idx++;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	3301      	adds	r3, #1
 800b30c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e7      	bne.n	800b2e6 <USBD_GetString+0x6a>
 800b316:	e000      	b.n	800b31a <USBD_GetString+0x9e>
    return;
 800b318:	bf00      	nop
  }
}
 800b31a:	3718      	adds	r7, #24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b330:	e005      	b.n	800b33e <USBD_GetLen+0x1e>
  {
    len++;
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	3301      	adds	r3, #1
 800b336:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	3301      	adds	r3, #1
 800b33c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d1f5      	bne.n	800b332 <USBD_GetLen+0x12>
  }

  return len;
 800b346:	7bfb      	ldrb	r3, [r7, #15]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2202      	movs	r2, #2
 800b364:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	2100      	movs	r1, #0
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f004 fb9d 	bl	800fac0 <USBD_LL_Transmit>

  return USBD_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f004 fb8c 	bl	800fac0 <USBD_LL_Transmit>

  return USBD_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b084      	sub	sp, #16
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	60f8      	str	r0, [r7, #12]
 800b3ba:	60b9      	str	r1, [r7, #8]
 800b3bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f004 fb9c 	bl	800fb02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2204      	movs	r2, #4
 800b3e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f004 fb68 	bl	800fac0 <USBD_LL_Transmit>

  return USBD_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3708      	adds	r7, #8
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2205      	movs	r2, #5
 800b406:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b40a:	2300      	movs	r3, #0
 800b40c:	2200      	movs	r2, #0
 800b40e:	2100      	movs	r1, #0
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f004 fb76 	bl	800fb02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	3301      	adds	r3, #1
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b430:	89fb      	ldrh	r3, [r7, #14]
 800b432:	021b      	lsls	r3, r3, #8
 800b434:	b21a      	sxth	r2, r3
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	b21b      	sxth	r3, r3
 800b43c:	4313      	orrs	r3, r2
 800b43e:	b21b      	sxth	r3, r3
 800b440:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b442:	89fb      	ldrh	r3, [r7, #14]
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	3303      	adds	r3, #3
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	021b      	lsls	r3, r3, #8
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	3202      	adds	r2, #2
 800b468:	7812      	ldrb	r2, [r2, #0]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	021b      	lsls	r3, r3, #8
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	3201      	adds	r2, #1
 800b476:	7812      	ldrb	r2, [r2, #0]
 800b478:	4313      	orrs	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	021b      	lsls	r3, r3, #8
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	7812      	ldrb	r2, [r2, #0]
 800b484:	4313      	orrs	r3, r2
 800b486:	60fb      	str	r3, [r7, #12]
	return rv;
 800b488:	68fb      	ldr	r3, [r7, #12]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b496:	b480      	push	{r7}
 800b498:	b083      	sub	sp, #12
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	887a      	ldrh	r2, [r7, #2]
 800b4aa:	b2d2      	uxtb	r2, r2
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	887b      	ldrh	r3, [r7, #2]
 800b4b0:	0a1b      	lsrs	r3, r3, #8
 800b4b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	607a      	str	r2, [r7, #4]
 800b4ba:	887a      	ldrh	r2, [r7, #2]
 800b4bc:	b2d2      	uxtb	r2, r2
 800b4be:	701a      	strb	r2, [r3, #0]
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	607a      	str	r2, [r7, #4]
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	b2d2      	uxtb	r2, r2
 800b4e0:	701a      	strb	r2, [r3, #0]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	0a1b      	lsrs	r3, r3, #8
 800b4e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	607a      	str	r2, [r7, #4]
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	b2d2      	uxtb	r2, r2
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	0a1b      	lsrs	r3, r3, #8
 800b4f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	683a      	ldr	r2, [r7, #0]
 800b502:	b2d2      	uxtb	r2, r2
 800b504:	701a      	strb	r2, [r3, #0]
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	0a1b      	lsrs	r3, r3, #8
 800b50a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	607a      	str	r2, [r7, #4]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b524:	b480      	push	{r7}
 800b526:	b087      	sub	sp, #28
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00d      	beq.n	800b55a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b53e:	693a      	ldr	r2, [r7, #16]
 800b540:	1c53      	adds	r3, r2, #1
 800b542:	613b      	str	r3, [r7, #16]
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	1c59      	adds	r1, r3, #1
 800b548:	6179      	str	r1, [r7, #20]
 800b54a:	7812      	ldrb	r2, [r2, #0]
 800b54c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	3b01      	subs	r3, #1
 800b552:	607b      	str	r3, [r7, #4]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1f1      	bne.n	800b53e <mem_cpy+0x1a>
	}
}
 800b55a:	bf00      	nop
 800b55c:	371c      	adds	r7, #28
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b566:	b480      	push	{r7}
 800b568:	b087      	sub	sp, #28
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	617a      	str	r2, [r7, #20]
 800b57c:	68ba      	ldr	r2, [r7, #8]
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3b01      	subs	r3, #1
 800b586:	607b      	str	r3, [r7, #4]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1f3      	bne.n	800b576 <mem_set+0x10>
}
 800b58e:	bf00      	nop
 800b590:	bf00      	nop
 800b592:	371c      	adds	r7, #28
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b59c:	b480      	push	{r7}
 800b59e:	b089      	sub	sp, #36	@ 0x24
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	61fb      	str	r3, [r7, #28]
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	61fa      	str	r2, [r7, #28]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	4619      	mov	r1, r3
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	61ba      	str	r2, [r7, #24]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	1acb      	subs	r3, r1, r3
 800b5c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	607b      	str	r3, [r7, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <mem_cmp+0x40>
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0eb      	beq.n	800b5b4 <mem_cmp+0x18>

	return r;
 800b5dc:	697b      	ldr	r3, [r7, #20]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3724      	adds	r7, #36	@ 0x24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5ea:	b480      	push	{r7}
 800b5ec:	b083      	sub	sp, #12
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b5f4:	e002      	b.n	800b5fc <chk_chr+0x12>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	607b      	str	r3, [r7, #4]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d005      	beq.n	800b610 <chk_chr+0x26>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d1f2      	bne.n	800b5f6 <chk_chr+0xc>
	return *str;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	781b      	ldrb	r3, [r3, #0]
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b62a:	2300      	movs	r3, #0
 800b62c:	60bb      	str	r3, [r7, #8]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	e029      	b.n	800b688 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b634:	4a27      	ldr	r2, [pc, #156]	@ (800b6d4 <chk_lock+0xb4>)
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	011b      	lsls	r3, r3, #4
 800b63a:	4413      	add	r3, r2
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d01d      	beq.n	800b67e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b642:	4a24      	ldr	r2, [pc, #144]	@ (800b6d4 <chk_lock+0xb4>)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	011b      	lsls	r3, r3, #4
 800b648:	4413      	add	r3, r2
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	429a      	cmp	r2, r3
 800b652:	d116      	bne.n	800b682 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b654:	4a1f      	ldr	r2, [pc, #124]	@ (800b6d4 <chk_lock+0xb4>)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	011b      	lsls	r3, r3, #4
 800b65a:	4413      	add	r3, r2
 800b65c:	3304      	adds	r3, #4
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b664:	429a      	cmp	r2, r3
 800b666:	d10c      	bne.n	800b682 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b668:	4a1a      	ldr	r2, [pc, #104]	@ (800b6d4 <chk_lock+0xb4>)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	4413      	add	r3, r2
 800b670:	3308      	adds	r3, #8
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b678:	429a      	cmp	r2, r3
 800b67a:	d102      	bne.n	800b682 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b67c:	e007      	b.n	800b68e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b67e:	2301      	movs	r3, #1
 800b680:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3301      	adds	r3, #1
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d9d2      	bls.n	800b634 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2b02      	cmp	r3, #2
 800b692:	d109      	bne.n	800b6a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d102      	bne.n	800b6a0 <chk_lock+0x80>
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d101      	bne.n	800b6a4 <chk_lock+0x84>
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e010      	b.n	800b6c6 <chk_lock+0xa6>
 800b6a4:	2312      	movs	r3, #18
 800b6a6:	e00e      	b.n	800b6c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d108      	bne.n	800b6c0 <chk_lock+0xa0>
 800b6ae:	4a09      	ldr	r2, [pc, #36]	@ (800b6d4 <chk_lock+0xb4>)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	011b      	lsls	r3, r3, #4
 800b6b4:	4413      	add	r3, r2
 800b6b6:	330c      	adds	r3, #12
 800b6b8:	881b      	ldrh	r3, [r3, #0]
 800b6ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6be:	d101      	bne.n	800b6c4 <chk_lock+0xa4>
 800b6c0:	2310      	movs	r3, #16
 800b6c2:	e000      	b.n	800b6c6 <chk_lock+0xa6>
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3714      	adds	r7, #20
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20003ef8 	.word	0x20003ef8

0800b6d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	607b      	str	r3, [r7, #4]
 800b6e2:	e002      	b.n	800b6ea <enq_lock+0x12>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	607b      	str	r3, [r7, #4]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d806      	bhi.n	800b6fe <enq_lock+0x26>
 800b6f0:	4a09      	ldr	r2, [pc, #36]	@ (800b718 <enq_lock+0x40>)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	011b      	lsls	r3, r3, #4
 800b6f6:	4413      	add	r3, r2
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1f2      	bne.n	800b6e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b02      	cmp	r3, #2
 800b702:	bf14      	ite	ne
 800b704:	2301      	movne	r3, #1
 800b706:	2300      	moveq	r3, #0
 800b708:	b2db      	uxtb	r3, r3
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	370c      	adds	r7, #12
 800b70e:	46bd      	mov	sp, r7
 800b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b714:	4770      	bx	lr
 800b716:	bf00      	nop
 800b718:	20003ef8 	.word	0x20003ef8

0800b71c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b085      	sub	sp, #20
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b726:	2300      	movs	r3, #0
 800b728:	60fb      	str	r3, [r7, #12]
 800b72a:	e01f      	b.n	800b76c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b72c:	4a41      	ldr	r2, [pc, #260]	@ (800b834 <inc_lock+0x118>)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	011b      	lsls	r3, r3, #4
 800b732:	4413      	add	r3, r2
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d113      	bne.n	800b766 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b73e:	4a3d      	ldr	r2, [pc, #244]	@ (800b834 <inc_lock+0x118>)
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	011b      	lsls	r3, r3, #4
 800b744:	4413      	add	r3, r2
 800b746:	3304      	adds	r3, #4
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b74e:	429a      	cmp	r2, r3
 800b750:	d109      	bne.n	800b766 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b752:	4a38      	ldr	r2, [pc, #224]	@ (800b834 <inc_lock+0x118>)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	4413      	add	r3, r2
 800b75a:	3308      	adds	r3, #8
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b762:	429a      	cmp	r2, r3
 800b764:	d006      	beq.n	800b774 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3301      	adds	r3, #1
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d9dc      	bls.n	800b72c <inc_lock+0x10>
 800b772:	e000      	b.n	800b776 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b774:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d132      	bne.n	800b7e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b77c:	2300      	movs	r3, #0
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	e002      	b.n	800b788 <inc_lock+0x6c>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3301      	adds	r3, #1
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d806      	bhi.n	800b79c <inc_lock+0x80>
 800b78e:	4a29      	ldr	r2, [pc, #164]	@ (800b834 <inc_lock+0x118>)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	011b      	lsls	r3, r3, #4
 800b794:	4413      	add	r3, r2
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1f2      	bne.n	800b782 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	d101      	bne.n	800b7a6 <inc_lock+0x8a>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e040      	b.n	800b828 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	4922      	ldr	r1, [pc, #136]	@ (800b834 <inc_lock+0x118>)
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	011b      	lsls	r3, r3, #4
 800b7b0:	440b      	add	r3, r1
 800b7b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	689a      	ldr	r2, [r3, #8]
 800b7b8:	491e      	ldr	r1, [pc, #120]	@ (800b834 <inc_lock+0x118>)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	011b      	lsls	r3, r3, #4
 800b7be:	440b      	add	r3, r1
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	695a      	ldr	r2, [r3, #20]
 800b7c8:	491a      	ldr	r1, [pc, #104]	@ (800b834 <inc_lock+0x118>)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	011b      	lsls	r3, r3, #4
 800b7ce:	440b      	add	r3, r1
 800b7d0:	3308      	adds	r3, #8
 800b7d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b7d4:	4a17      	ldr	r2, [pc, #92]	@ (800b834 <inc_lock+0x118>)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	011b      	lsls	r3, r3, #4
 800b7da:	4413      	add	r3, r2
 800b7dc:	330c      	adds	r3, #12
 800b7de:	2200      	movs	r2, #0
 800b7e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <inc_lock+0xe0>
 800b7e8:	4a12      	ldr	r2, [pc, #72]	@ (800b834 <inc_lock+0x118>)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	011b      	lsls	r3, r3, #4
 800b7ee:	4413      	add	r3, r2
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d001      	beq.n	800b7fc <inc_lock+0xe0>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	e015      	b.n	800b828 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d108      	bne.n	800b814 <inc_lock+0xf8>
 800b802:	4a0c      	ldr	r2, [pc, #48]	@ (800b834 <inc_lock+0x118>)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	011b      	lsls	r3, r3, #4
 800b808:	4413      	add	r3, r2
 800b80a:	330c      	adds	r3, #12
 800b80c:	881b      	ldrh	r3, [r3, #0]
 800b80e:	3301      	adds	r3, #1
 800b810:	b29a      	uxth	r2, r3
 800b812:	e001      	b.n	800b818 <inc_lock+0xfc>
 800b814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b818:	4906      	ldr	r1, [pc, #24]	@ (800b834 <inc_lock+0x118>)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	011b      	lsls	r3, r3, #4
 800b81e:	440b      	add	r3, r1
 800b820:	330c      	adds	r3, #12
 800b822:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3301      	adds	r3, #1
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3714      	adds	r7, #20
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	20003ef8 	.word	0x20003ef8

0800b838 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3b01      	subs	r3, #1
 800b844:	607b      	str	r3, [r7, #4]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d825      	bhi.n	800b898 <dec_lock+0x60>
		n = Files[i].ctr;
 800b84c:	4a17      	ldr	r2, [pc, #92]	@ (800b8ac <dec_lock+0x74>)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	011b      	lsls	r3, r3, #4
 800b852:	4413      	add	r3, r2
 800b854:	330c      	adds	r3, #12
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b85a:	89fb      	ldrh	r3, [r7, #14]
 800b85c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b860:	d101      	bne.n	800b866 <dec_lock+0x2e>
 800b862:	2300      	movs	r3, #0
 800b864:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b866:	89fb      	ldrh	r3, [r7, #14]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <dec_lock+0x3a>
 800b86c:	89fb      	ldrh	r3, [r7, #14]
 800b86e:	3b01      	subs	r3, #1
 800b870:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b872:	4a0e      	ldr	r2, [pc, #56]	@ (800b8ac <dec_lock+0x74>)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	011b      	lsls	r3, r3, #4
 800b878:	4413      	add	r3, r2
 800b87a:	330c      	adds	r3, #12
 800b87c:	89fa      	ldrh	r2, [r7, #14]
 800b87e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b880:	89fb      	ldrh	r3, [r7, #14]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d105      	bne.n	800b892 <dec_lock+0x5a>
 800b886:	4a09      	ldr	r2, [pc, #36]	@ (800b8ac <dec_lock+0x74>)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	4413      	add	r3, r2
 800b88e:	2200      	movs	r2, #0
 800b890:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	737b      	strb	r3, [r7, #13]
 800b896:	e001      	b.n	800b89c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b898:	2302      	movs	r3, #2
 800b89a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b89c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop
 800b8ac:	20003ef8 	.word	0x20003ef8

0800b8b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	e010      	b.n	800b8e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8be:	4a0d      	ldr	r2, [pc, #52]	@ (800b8f4 <clear_lock+0x44>)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	011b      	lsls	r3, r3, #4
 800b8c4:	4413      	add	r3, r2
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d105      	bne.n	800b8da <clear_lock+0x2a>
 800b8ce:	4a09      	ldr	r2, [pc, #36]	@ (800b8f4 <clear_lock+0x44>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	011b      	lsls	r3, r3, #4
 800b8d4:	4413      	add	r3, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	60fb      	str	r3, [r7, #12]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d9eb      	bls.n	800b8be <clear_lock+0xe>
	}
}
 800b8e6:	bf00      	nop
 800b8e8:	bf00      	nop
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	20003ef8 	.word	0x20003ef8

0800b8f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	78db      	ldrb	r3, [r3, #3]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d034      	beq.n	800b976 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b910:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	7858      	ldrb	r0, [r3, #1]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b91c:	2301      	movs	r3, #1
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	f7f5 f99e 	bl	8000c60 <disk_write>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	73fb      	strb	r3, [r7, #15]
 800b92e:	e022      	b.n	800b976 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b93a:	697a      	ldr	r2, [r7, #20]
 800b93c:	1ad2      	subs	r2, r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	429a      	cmp	r2, r3
 800b944:	d217      	bcs.n	800b976 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	789b      	ldrb	r3, [r3, #2]
 800b94a:	613b      	str	r3, [r7, #16]
 800b94c:	e010      	b.n	800b970 <sync_window+0x78>
					wsect += fs->fsize;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a1b      	ldr	r3, [r3, #32]
 800b952:	697a      	ldr	r2, [r7, #20]
 800b954:	4413      	add	r3, r2
 800b956:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	7858      	ldrb	r0, [r3, #1]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b962:	2301      	movs	r3, #1
 800b964:	697a      	ldr	r2, [r7, #20]
 800b966:	f7f5 f97b 	bl	8000c60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	3b01      	subs	r3, #1
 800b96e:	613b      	str	r3, [r7, #16]
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d8eb      	bhi.n	800b94e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b976:	7bfb      	ldrb	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d01b      	beq.n	800b9d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff ffad 	bl	800b8f8 <sync_window>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b9a2:	7bfb      	ldrb	r3, [r7, #15]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d113      	bne.n	800b9d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	7858      	ldrb	r0, [r3, #1]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	f7f5 f933 	bl	8000c20 <disk_read>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d004      	beq.n	800b9ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	683a      	ldr	r2, [r7, #0]
 800b9ce:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800b9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f7ff ff87 	bl	800b8f8 <sync_window>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d159      	bne.n	800baa8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b03      	cmp	r3, #3
 800b9fa:	d149      	bne.n	800ba90 <sync_fs+0xb4>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	791b      	ldrb	r3, [r3, #4]
 800ba00:	2b01      	cmp	r3, #1
 800ba02:	d145      	bne.n	800ba90 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	899b      	ldrh	r3, [r3, #12]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	2100      	movs	r1, #0
 800ba12:	f7ff fda8 	bl	800b566 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	3338      	adds	r3, #56	@ 0x38
 800ba1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ba1e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff fd37 	bl	800b496 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3338      	adds	r3, #56	@ 0x38
 800ba2c:	4921      	ldr	r1, [pc, #132]	@ (800bab4 <sync_fs+0xd8>)
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fd4c 	bl	800b4cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3338      	adds	r3, #56	@ 0x38
 800ba38:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ba3c:	491e      	ldr	r1, [pc, #120]	@ (800bab8 <sync_fs+0xdc>)
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f7ff fd44 	bl	800b4cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3338      	adds	r3, #56	@ 0x38
 800ba48:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	699b      	ldr	r3, [r3, #24]
 800ba50:	4619      	mov	r1, r3
 800ba52:	4610      	mov	r0, r2
 800ba54:	f7ff fd3a 	bl	800b4cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3338      	adds	r3, #56	@ 0x38
 800ba5c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	4619      	mov	r1, r3
 800ba66:	4610      	mov	r0, r2
 800ba68:	f7ff fd30 	bl	800b4cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	7858      	ldrb	r0, [r3, #1]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba84:	2301      	movs	r3, #1
 800ba86:	f7f5 f8eb 	bl	8000c60 <disk_write>
			fs->fsi_flag = 0;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	2200      	movs	r2, #0
 800ba96:	2100      	movs	r1, #0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7f5 f901 	bl	8000ca0 <disk_ioctl>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <sync_fs+0xcc>
 800baa4:	2301      	movs	r3, #1
 800baa6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	41615252 	.word	0x41615252
 800bab8:	61417272 	.word	0x61417272

0800babc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	3b02      	subs	r3, #2
 800baca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	69db      	ldr	r3, [r3, #28]
 800bad0:	3b02      	subs	r3, #2
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d301      	bcc.n	800badc <clust2sect+0x20>
 800bad8:	2300      	movs	r3, #0
 800bada:	e008      	b.n	800baee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	895b      	ldrh	r3, [r3, #10]
 800bae0:	461a      	mov	r2, r3
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	fb03 f202 	mul.w	r2, r3, r2
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baec:	4413      	add	r3, r2
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b086      	sub	sp, #24
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
 800bb02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d904      	bls.n	800bb1a <get_fat+0x20>
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	69db      	ldr	r3, [r3, #28]
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d302      	bcc.n	800bb20 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	617b      	str	r3, [r7, #20]
 800bb1e:	e0ba      	b.n	800bc96 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb20:	f04f 33ff 	mov.w	r3, #4294967295
 800bb24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	2b03      	cmp	r3, #3
 800bb2c:	f000 8082 	beq.w	800bc34 <get_fat+0x13a>
 800bb30:	2b03      	cmp	r3, #3
 800bb32:	f300 80a6 	bgt.w	800bc82 <get_fat+0x188>
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d002      	beq.n	800bb40 <get_fat+0x46>
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d055      	beq.n	800bbea <get_fat+0xf0>
 800bb3e:	e0a0      	b.n	800bc82 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	60fb      	str	r3, [r7, #12]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	899b      	ldrh	r3, [r3, #12]
 800bb56:	4619      	mov	r1, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb5e:	4413      	add	r3, r2
 800bb60:	4619      	mov	r1, r3
 800bb62:	6938      	ldr	r0, [r7, #16]
 800bb64:	f7ff ff0c 	bl	800b980 <move_window>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f040 808c 	bne.w	800bc88 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	60fa      	str	r2, [r7, #12]
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	8992      	ldrh	r2, [r2, #12]
 800bb7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb7e:	fb01 f202 	mul.w	r2, r1, r2
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	4413      	add	r3, r2
 800bb88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bb8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	899b      	ldrh	r3, [r3, #12]
 800bb96:	4619      	mov	r1, r3
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb9e:	4413      	add	r3, r2
 800bba0:	4619      	mov	r1, r3
 800bba2:	6938      	ldr	r0, [r7, #16]
 800bba4:	f7ff feec 	bl	800b980 <move_window>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d16e      	bne.n	800bc8c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	899b      	ldrh	r3, [r3, #12]
 800bbb2:	461a      	mov	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800bbba:	fb01 f202 	mul.w	r2, r1, r2
 800bbbe:	1a9b      	subs	r3, r3, r2
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <get_fat+0xe6>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	091b      	lsrs	r3, r3, #4
 800bbde:	e002      	b.n	800bbe6 <get_fat+0xec>
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbe6:	617b      	str	r3, [r7, #20]
			break;
 800bbe8:	e055      	b.n	800bc96 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	899b      	ldrh	r3, [r3, #12]
 800bbf2:	085b      	lsrs	r3, r3, #1
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbfe:	4413      	add	r3, r2
 800bc00:	4619      	mov	r1, r3
 800bc02:	6938      	ldr	r0, [r7, #16]
 800bc04:	f7ff febc 	bl	800b980 <move_window>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d140      	bne.n	800bc90 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	8992      	ldrh	r2, [r2, #12]
 800bc1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc20:	fb00 f202 	mul.w	r2, r0, r2
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	440b      	add	r3, r1
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff fbf9 	bl	800b420 <ld_word>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	617b      	str	r3, [r7, #20]
			break;
 800bc32:	e030      	b.n	800bc96 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	899b      	ldrh	r3, [r3, #12]
 800bc3c:	089b      	lsrs	r3, r3, #2
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	4619      	mov	r1, r3
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc48:	4413      	add	r3, r2
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6938      	ldr	r0, [r7, #16]
 800bc4e:	f7ff fe97 	bl	800b980 <move_window>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d11d      	bne.n	800bc94 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	8992      	ldrh	r2, [r2, #12]
 800bc66:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc6a:	fb00 f202 	mul.w	r2, r0, r2
 800bc6e:	1a9b      	subs	r3, r3, r2
 800bc70:	440b      	add	r3, r1
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fbec 	bl	800b450 <ld_dword>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800bc7e:	617b      	str	r3, [r7, #20]
			break;
 800bc80:	e009      	b.n	800bc96 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc82:	2301      	movs	r3, #1
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	e006      	b.n	800bc96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc88:	bf00      	nop
 800bc8a:	e004      	b.n	800bc96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc8c:	bf00      	nop
 800bc8e:	e002      	b.n	800bc96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc90:	bf00      	nop
 800bc92:	e000      	b.n	800bc96 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc94:	bf00      	nop
		}
	}

	return val;
 800bc96:	697b      	ldr	r3, [r7, #20]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3718      	adds	r7, #24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b089      	sub	sp, #36	@ 0x24
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bcac:	2302      	movs	r3, #2
 800bcae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	f240 8109 	bls.w	800beca <put_fat+0x22a>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	68ba      	ldr	r2, [r7, #8]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	f080 8103 	bcs.w	800beca <put_fat+0x22a>
		switch (fs->fs_type) {
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	2b03      	cmp	r3, #3
 800bcca:	f000 80b6 	beq.w	800be3a <put_fat+0x19a>
 800bcce:	2b03      	cmp	r3, #3
 800bcd0:	f300 80fb 	bgt.w	800beca <put_fat+0x22a>
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d003      	beq.n	800bce0 <put_fat+0x40>
 800bcd8:	2b02      	cmp	r3, #2
 800bcda:	f000 8083 	beq.w	800bde4 <put_fat+0x144>
 800bcde:	e0f4      	b.n	800beca <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	61bb      	str	r3, [r7, #24]
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	085b      	lsrs	r3, r3, #1
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	4413      	add	r3, r2
 800bcec:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	899b      	ldrh	r3, [r3, #12]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	fbb3 f3f1 	udiv	r3, r3, r1
 800bcfe:	4413      	add	r3, r2
 800bd00:	4619      	mov	r1, r3
 800bd02:	68f8      	ldr	r0, [r7, #12]
 800bd04:	f7ff fe3c 	bl	800b980 <move_window>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd0c:	7ffb      	ldrb	r3, [r7, #31]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f040 80d4 	bne.w	800bebc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	1c5a      	adds	r2, r3, #1
 800bd1e:	61ba      	str	r2, [r7, #24]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	8992      	ldrh	r2, [r2, #12]
 800bd24:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd28:	fb00 f202 	mul.w	r2, r0, r2
 800bd2c:	1a9b      	subs	r3, r3, r2
 800bd2e:	440b      	add	r3, r1
 800bd30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d00d      	beq.n	800bd58 <put_fat+0xb8>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	b25b      	sxtb	r3, r3
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	b25a      	sxtb	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	011b      	lsls	r3, r3, #4
 800bd4e:	b25b      	sxtb	r3, r3
 800bd50:	4313      	orrs	r3, r2
 800bd52:	b25b      	sxtb	r3, r3
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	e001      	b.n	800bd5c <put_fat+0xbc>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2201      	movs	r2, #1
 800bd64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	899b      	ldrh	r3, [r3, #12]
 800bd6e:	4619      	mov	r1, r3
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd76:	4413      	add	r3, r2
 800bd78:	4619      	mov	r1, r3
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f7ff fe00 	bl	800b980 <move_window>
 800bd80:	4603      	mov	r3, r0
 800bd82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd84:	7ffb      	ldrb	r3, [r7, #31]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f040 809a 	bne.w	800bec0 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	899b      	ldrh	r3, [r3, #12]
 800bd96:	461a      	mov	r2, r3
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800bd9e:	fb00 f202 	mul.w	r2, r0, r2
 800bda2:	1a9b      	subs	r3, r3, r2
 800bda4:	440b      	add	r3, r1
 800bda6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <put_fat+0x11a>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	091b      	lsrs	r3, r3, #4
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	e00e      	b.n	800bdd8 <put_fat+0x138>
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	b25b      	sxtb	r3, r3
 800bdc0:	f023 030f 	bic.w	r3, r3, #15
 800bdc4:	b25a      	sxtb	r2, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	0a1b      	lsrs	r3, r3, #8
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	f003 030f 	and.w	r3, r3, #15
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	b25b      	sxtb	r3, r3
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2201      	movs	r2, #1
 800bde0:	70da      	strb	r2, [r3, #3]
			break;
 800bde2:	e072      	b.n	800beca <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	899b      	ldrh	r3, [r3, #12]
 800bdec:	085b      	lsrs	r3, r3, #1
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800bdf8:	4413      	add	r3, r2
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	68f8      	ldr	r0, [r7, #12]
 800bdfe:	f7ff fdbf 	bl	800b980 <move_window>
 800be02:	4603      	mov	r3, r0
 800be04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be06:	7ffb      	ldrb	r3, [r7, #31]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d15b      	bne.n	800bec4 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	8992      	ldrh	r2, [r2, #12]
 800be1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800be1e:	fb00 f202 	mul.w	r2, r0, r2
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	440b      	add	r3, r1
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	b292      	uxth	r2, r2
 800be2a:	4611      	mov	r1, r2
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7ff fb32 	bl	800b496 <st_word>
			fs->wflag = 1;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	70da      	strb	r2, [r3, #3]
			break;
 800be38:	e047      	b.n	800beca <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	899b      	ldrh	r3, [r3, #12]
 800be42:	089b      	lsrs	r3, r3, #2
 800be44:	b29b      	uxth	r3, r3
 800be46:	4619      	mov	r1, r3
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800be4e:	4413      	add	r3, r2
 800be50:	4619      	mov	r1, r3
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f7ff fd94 	bl	800b980 <move_window>
 800be58:	4603      	mov	r3, r0
 800be5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be5c:	7ffb      	ldrb	r3, [r7, #31]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d132      	bne.n	800bec8 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	8992      	ldrh	r2, [r2, #12]
 800be76:	fbb3 f0f2 	udiv	r0, r3, r2
 800be7a:	fb00 f202 	mul.w	r2, r0, r2
 800be7e:	1a9b      	subs	r3, r3, r2
 800be80:	440b      	add	r3, r1
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff fae4 	bl	800b450 <ld_dword>
 800be88:	4603      	mov	r3, r0
 800be8a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800be8e:	4323      	orrs	r3, r4
 800be90:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	68fa      	ldr	r2, [r7, #12]
 800be9e:	8992      	ldrh	r2, [r2, #12]
 800bea0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bea4:	fb00 f202 	mul.w	r2, r0, r2
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	440b      	add	r3, r1
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fb0c 	bl	800b4cc <st_dword>
			fs->wflag = 1;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2201      	movs	r2, #1
 800beb8:	70da      	strb	r2, [r3, #3]
			break;
 800beba:	e006      	b.n	800beca <put_fat+0x22a>
			if (res != FR_OK) break;
 800bebc:	bf00      	nop
 800bebe:	e004      	b.n	800beca <put_fat+0x22a>
			if (res != FR_OK) break;
 800bec0:	bf00      	nop
 800bec2:	e002      	b.n	800beca <put_fat+0x22a>
			if (res != FR_OK) break;
 800bec4:	bf00      	nop
 800bec6:	e000      	b.n	800beca <put_fat+0x22a>
			if (res != FR_OK) break;
 800bec8:	bf00      	nop
		}
	}
	return res;
 800beca:	7ffb      	ldrb	r3, [r7, #31]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3724      	adds	r7, #36	@ 0x24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd90      	pop	{r4, r7, pc}

0800bed4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d904      	bls.n	800befa <remove_chain+0x26>
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	68ba      	ldr	r2, [r7, #8]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d301      	bcc.n	800befe <remove_chain+0x2a>
 800befa:	2302      	movs	r3, #2
 800befc:	e04b      	b.n	800bf96 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00c      	beq.n	800bf1e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bf04:	f04f 32ff 	mov.w	r2, #4294967295
 800bf08:	6879      	ldr	r1, [r7, #4]
 800bf0a:	69b8      	ldr	r0, [r7, #24]
 800bf0c:	f7ff fec8 	bl	800bca0 <put_fat>
 800bf10:	4603      	mov	r3, r0
 800bf12:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bf14:	7ffb      	ldrb	r3, [r7, #31]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <remove_chain+0x4a>
 800bf1a:	7ffb      	ldrb	r3, [r7, #31]
 800bf1c:	e03b      	b.n	800bf96 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bf1e:	68b9      	ldr	r1, [r7, #8]
 800bf20:	68f8      	ldr	r0, [r7, #12]
 800bf22:	f7ff fdea 	bl	800bafa <get_fat>
 800bf26:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d031      	beq.n	800bf92 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d101      	bne.n	800bf38 <remove_chain+0x64>
 800bf34:	2302      	movs	r3, #2
 800bf36:	e02e      	b.n	800bf96 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3e:	d101      	bne.n	800bf44 <remove_chain+0x70>
 800bf40:	2301      	movs	r3, #1
 800bf42:	e028      	b.n	800bf96 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bf44:	2200      	movs	r2, #0
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	69b8      	ldr	r0, [r7, #24]
 800bf4a:	f7ff fea9 	bl	800bca0 <put_fat>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf52:	7ffb      	ldrb	r3, [r7, #31]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d001      	beq.n	800bf5c <remove_chain+0x88>
 800bf58:	7ffb      	ldrb	r3, [r7, #31]
 800bf5a:	e01c      	b.n	800bf96 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	699a      	ldr	r2, [r3, #24]
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	69db      	ldr	r3, [r3, #28]
 800bf64:	3b02      	subs	r3, #2
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d20b      	bcs.n	800bf82 <remove_chain+0xae>
			fs->free_clst++;
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	791b      	ldrb	r3, [r3, #4]
 800bf78:	f043 0301 	orr.w	r3, r3, #1
 800bf7c:	b2da      	uxtb	r2, r3
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d3c6      	bcc.n	800bf1e <remove_chain+0x4a>
 800bf90:	e000      	b.n	800bf94 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bf92:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3720      	adds	r7, #32
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b088      	sub	sp, #32
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10d      	bne.n	800bfd0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <create_chain+0x2c>
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	69db      	ldr	r3, [r3, #28]
 800bfc4:	69ba      	ldr	r2, [r7, #24]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d31b      	bcc.n	800c002 <create_chain+0x64>
 800bfca:	2301      	movs	r3, #1
 800bfcc:	61bb      	str	r3, [r7, #24]
 800bfce:	e018      	b.n	800c002 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7ff fd91 	bl	800bafa <get_fat>
 800bfd8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d801      	bhi.n	800bfe4 <create_chain+0x46>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e070      	b.n	800c0c6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfea:	d101      	bne.n	800bff0 <create_chain+0x52>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	e06a      	b.n	800c0c6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bff0:	693b      	ldr	r3, [r7, #16]
 800bff2:	69db      	ldr	r3, [r3, #28]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d201      	bcs.n	800bffe <create_chain+0x60>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	e063      	b.n	800c0c6 <create_chain+0x128>
		scl = clst;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	3301      	adds	r3, #1
 800c00a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	69db      	ldr	r3, [r3, #28]
 800c010:	69fa      	ldr	r2, [r7, #28]
 800c012:	429a      	cmp	r2, r3
 800c014:	d307      	bcc.n	800c026 <create_chain+0x88>
				ncl = 2;
 800c016:	2302      	movs	r3, #2
 800c018:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c01a:	69fa      	ldr	r2, [r7, #28]
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d901      	bls.n	800c026 <create_chain+0x88>
 800c022:	2300      	movs	r3, #0
 800c024:	e04f      	b.n	800c0c6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c026:	69f9      	ldr	r1, [r7, #28]
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f7ff fd66 	bl	800bafa <get_fat>
 800c02e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00e      	beq.n	800c054 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d003      	beq.n	800c044 <create_chain+0xa6>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c042:	d101      	bne.n	800c048 <create_chain+0xaa>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	e03e      	b.n	800c0c6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c048:	69fa      	ldr	r2, [r7, #28]
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d1da      	bne.n	800c006 <create_chain+0x68>
 800c050:	2300      	movs	r3, #0
 800c052:	e038      	b.n	800c0c6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c054:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c056:	f04f 32ff 	mov.w	r2, #4294967295
 800c05a:	69f9      	ldr	r1, [r7, #28]
 800c05c:	6938      	ldr	r0, [r7, #16]
 800c05e:	f7ff fe1f 	bl	800bca0 <put_fat>
 800c062:	4603      	mov	r3, r0
 800c064:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c066:	7dfb      	ldrb	r3, [r7, #23]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d109      	bne.n	800c080 <create_chain+0xe2>
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d006      	beq.n	800c080 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c072:	69fa      	ldr	r2, [r7, #28]
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6938      	ldr	r0, [r7, #16]
 800c078:	f7ff fe12 	bl	800bca0 <put_fat>
 800c07c:	4603      	mov	r3, r0
 800c07e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d116      	bne.n	800c0b4 <create_chain+0x116>
		fs->last_clst = ncl;
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	69fa      	ldr	r2, [r7, #28]
 800c08a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	699a      	ldr	r2, [r3, #24]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	3b02      	subs	r3, #2
 800c096:	429a      	cmp	r2, r3
 800c098:	d804      	bhi.n	800c0a4 <create_chain+0x106>
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	1e5a      	subs	r2, r3, #1
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	791b      	ldrb	r3, [r3, #4]
 800c0a8:	f043 0301 	orr.w	r3, r3, #1
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	711a      	strb	r2, [r3, #4]
 800c0b2:	e007      	b.n	800c0c4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c0b4:	7dfb      	ldrb	r3, [r7, #23]
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d102      	bne.n	800c0c0 <create_chain+0x122>
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c0be:	e000      	b.n	800c0c2 <create_chain+0x124>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c0c4:	69fb      	ldr	r3, [r7, #28]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3720      	adds	r7, #32
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b087      	sub	sp, #28
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	6078      	str	r0, [r7, #4]
 800c0d6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	899b      	ldrh	r3, [r3, #12]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	8952      	ldrh	r2, [r2, #10]
 800c0f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0fa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	1d1a      	adds	r2, r3, #4
 800c100:	613a      	str	r2, [r7, #16]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d101      	bne.n	800c110 <clmt_clust+0x42>
 800c10c:	2300      	movs	r3, #0
 800c10e:	e010      	b.n	800c132 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	429a      	cmp	r2, r3
 800c116:	d307      	bcc.n	800c128 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	617b      	str	r3, [r7, #20]
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	3304      	adds	r3, #4
 800c124:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c126:	e7e9      	b.n	800c0fc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c128:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	4413      	add	r3, r2
}
 800c132:	4618      	mov	r0, r3
 800c134:	371c      	adds	r7, #28
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b086      	sub	sp, #24
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
 800c146:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c154:	d204      	bcs.n	800c160 <dir_sdi+0x22>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	f003 031f 	and.w	r3, r3, #31
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d001      	beq.n	800c164 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c160:	2302      	movs	r3, #2
 800c162:	e071      	b.n	800c248 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <dir_sdi+0x46>
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d902      	bls.n	800c184 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c182:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10c      	bne.n	800c1a4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	095b      	lsrs	r3, r3, #5
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	8912      	ldrh	r2, [r2, #8]
 800c192:	4293      	cmp	r3, r2
 800c194:	d301      	bcc.n	800c19a <dir_sdi+0x5c>
 800c196:	2302      	movs	r3, #2
 800c198:	e056      	b.n	800c248 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	61da      	str	r2, [r3, #28]
 800c1a2:	e02d      	b.n	800c200 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	895b      	ldrh	r3, [r3, #10]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	899b      	ldrh	r3, [r3, #12]
 800c1ae:	fb02 f303 	mul.w	r3, r2, r3
 800c1b2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1b4:	e019      	b.n	800c1ea <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6979      	ldr	r1, [r7, #20]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7ff fc9d 	bl	800bafa <get_fat>
 800c1c0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d101      	bne.n	800c1ce <dir_sdi+0x90>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e03c      	b.n	800c248 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d904      	bls.n	800c1de <dir_sdi+0xa0>
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	69db      	ldr	r3, [r3, #28]
 800c1d8:	697a      	ldr	r2, [r7, #20]
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d301      	bcc.n	800c1e2 <dir_sdi+0xa4>
 800c1de:	2302      	movs	r3, #2
 800c1e0:	e032      	b.n	800c248 <dir_sdi+0x10a>
			ofs -= csz;
 800c1e2:	683a      	ldr	r2, [r7, #0]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	1ad3      	subs	r3, r2, r3
 800c1e8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d2e1      	bcs.n	800c1b6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c1f2:	6979      	ldr	r1, [r7, #20]
 800c1f4:	6938      	ldr	r0, [r7, #16]
 800c1f6:	f7ff fc61 	bl	800babc <clust2sect>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <dir_sdi+0xd4>
 800c20e:	2302      	movs	r3, #2
 800c210:	e01a      	b.n	800c248 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	69da      	ldr	r2, [r3, #28]
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	899b      	ldrh	r3, [r3, #12]
 800c21a:	4619      	mov	r1, r3
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c222:	441a      	add	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	899b      	ldrh	r3, [r3, #12]
 800c232:	461a      	mov	r2, r3
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	fbb3 f0f2 	udiv	r0, r3, r2
 800c23a:	fb00 f202 	mul.w	r2, r0, r2
 800c23e:	1a9b      	subs	r3, r3, r2
 800c240:	18ca      	adds	r2, r1, r3
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	695b      	ldr	r3, [r3, #20]
 800c264:	3320      	adds	r3, #32
 800c266:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	69db      	ldr	r3, [r3, #28]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d003      	beq.n	800c278 <dir_next+0x28>
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c276:	d301      	bcc.n	800c27c <dir_next+0x2c>
 800c278:	2304      	movs	r3, #4
 800c27a:	e0bb      	b.n	800c3f4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	899b      	ldrh	r3, [r3, #12]
 800c280:	461a      	mov	r2, r3
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	fbb3 f1f2 	udiv	r1, r3, r2
 800c288:	fb01 f202 	mul.w	r2, r1, r2
 800c28c:	1a9b      	subs	r3, r3, r2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f040 809d 	bne.w	800c3ce <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	69db      	ldr	r3, [r3, #28]
 800c298:	1c5a      	adds	r2, r3, #1
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	095b      	lsrs	r3, r3, #5
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	8912      	ldrh	r2, [r2, #8]
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	f0c0 808d 	bcc.w	800c3ce <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	61da      	str	r2, [r3, #28]
 800c2ba:	2304      	movs	r3, #4
 800c2bc:	e09a      	b.n	800c3f4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	899b      	ldrh	r3, [r3, #12]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2ca:	68fa      	ldr	r2, [r7, #12]
 800c2cc:	8952      	ldrh	r2, [r2, #10]
 800c2ce:	3a01      	subs	r2, #1
 800c2d0:	4013      	ands	r3, r2
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d17b      	bne.n	800c3ce <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	f7ff fc0b 	bl	800bafa <get_fat>
 800c2e4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d801      	bhi.n	800c2f0 <dir_next+0xa0>
 800c2ec:	2302      	movs	r3, #2
 800c2ee:	e081      	b.n	800c3f4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f6:	d101      	bne.n	800c2fc <dir_next+0xac>
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	e07b      	b.n	800c3f4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	69db      	ldr	r3, [r3, #28]
 800c300:	697a      	ldr	r2, [r7, #20]
 800c302:	429a      	cmp	r2, r3
 800c304:	d359      	bcc.n	800c3ba <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d104      	bne.n	800c316 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2200      	movs	r2, #0
 800c310:	61da      	str	r2, [r3, #28]
 800c312:	2304      	movs	r3, #4
 800c314:	e06e      	b.n	800c3f4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	4619      	mov	r1, r3
 800c31e:	4610      	mov	r0, r2
 800c320:	f7ff fe3d 	bl	800bf9e <create_chain>
 800c324:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d101      	bne.n	800c330 <dir_next+0xe0>
 800c32c:	2307      	movs	r3, #7
 800c32e:	e061      	b.n	800c3f4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	2b01      	cmp	r3, #1
 800c334:	d101      	bne.n	800c33a <dir_next+0xea>
 800c336:	2302      	movs	r3, #2
 800c338:	e05c      	b.n	800c3f4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c340:	d101      	bne.n	800c346 <dir_next+0xf6>
 800c342:	2301      	movs	r3, #1
 800c344:	e056      	b.n	800c3f4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7ff fad6 	bl	800b8f8 <sync_window>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <dir_next+0x106>
 800c352:	2301      	movs	r3, #1
 800c354:	e04e      	b.n	800c3f4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	899b      	ldrh	r3, [r3, #12]
 800c360:	461a      	mov	r2, r3
 800c362:	2100      	movs	r1, #0
 800c364:	f7ff f8ff 	bl	800b566 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c368:	2300      	movs	r3, #0
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	6979      	ldr	r1, [r7, #20]
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f7ff fba4 	bl	800babc <clust2sect>
 800c374:	4602      	mov	r2, r0
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	635a      	str	r2, [r3, #52]	@ 0x34
 800c37a:	e012      	b.n	800c3a2 <dir_next+0x152>
						fs->wflag = 1;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2201      	movs	r2, #1
 800c380:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f7ff fab8 	bl	800b8f8 <sync_window>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d001      	beq.n	800c392 <dir_next+0x142>
 800c38e:	2301      	movs	r3, #1
 800c390:	e030      	b.n	800c3f4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	3301      	adds	r3, #1
 800c396:	613b      	str	r3, [r7, #16]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	635a      	str	r2, [r3, #52]	@ 0x34
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	895b      	ldrh	r3, [r3, #10]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d3e6      	bcc.n	800c37c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	1ad2      	subs	r2, r2, r3
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c3c0:	6979      	ldr	r1, [r7, #20]
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f7ff fb7a 	bl	800babc <clust2sect>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	899b      	ldrh	r3, [r3, #12]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c3e6:	fb00 f202 	mul.w	r2, r0, r2
 800c3ea:	1a9b      	subs	r3, r3, r2
 800c3ec:	18ca      	adds	r2, r1, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3718      	adds	r7, #24
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c40c:	2100      	movs	r1, #0
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff fe95 	bl	800c13e <dir_sdi>
 800c414:	4603      	mov	r3, r0
 800c416:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d12b      	bne.n	800c476 <dir_alloc+0x7a>
		n = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	69db      	ldr	r3, [r3, #28]
 800c426:	4619      	mov	r1, r3
 800c428:	68f8      	ldr	r0, [r7, #12]
 800c42a:	f7ff faa9 	bl	800b980 <move_window>
 800c42e:	4603      	mov	r3, r0
 800c430:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c432:	7dfb      	ldrb	r3, [r7, #23]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d11d      	bne.n	800c474 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6a1b      	ldr	r3, [r3, #32]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2be5      	cmp	r3, #229	@ 0xe5
 800c440:	d004      	beq.n	800c44c <dir_alloc+0x50>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d107      	bne.n	800c45c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	3301      	adds	r3, #1
 800c450:	613b      	str	r3, [r7, #16]
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	429a      	cmp	r2, r3
 800c458:	d102      	bne.n	800c460 <dir_alloc+0x64>
 800c45a:	e00c      	b.n	800c476 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c460:	2101      	movs	r1, #1
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7ff fef4 	bl	800c250 <dir_next>
 800c468:	4603      	mov	r3, r0
 800c46a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d0d7      	beq.n	800c422 <dir_alloc+0x26>
 800c472:	e000      	b.n	800c476 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c474:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	2b04      	cmp	r3, #4
 800c47a:	d101      	bne.n	800c480 <dir_alloc+0x84>
 800c47c:	2307      	movs	r3, #7
 800c47e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c480:	7dfb      	ldrb	r3, [r7, #23]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	331a      	adds	r3, #26
 800c498:	4618      	mov	r0, r3
 800c49a:	f7fe ffc1 	bl	800b420 <ld_word>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d109      	bne.n	800c4be <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	3314      	adds	r3, #20
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7fe ffb6 	bl	800b420 <ld_word>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	041b      	lsls	r3, r3, #16
 800c4b8:	68fa      	ldr	r2, [r7, #12]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c4be:	68fb      	ldr	r3, [r7, #12]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	331a      	adds	r3, #26
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	b292      	uxth	r2, r2
 800c4dc:	4611      	mov	r1, r2
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f7fe ffd9 	bl	800b496 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d109      	bne.n	800c500 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	f103 0214 	add.w	r2, r3, #20
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	0c1b      	lsrs	r3, r3, #16
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4610      	mov	r0, r2
 800c4fc:	f7fe ffcb 	bl	800b496 <st_word>
	}
}
 800c500:	bf00      	nop
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b087      	sub	sp, #28
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	331a      	adds	r3, #26
 800c516:	4618      	mov	r0, r3
 800c518:	f7fe ff82 	bl	800b420 <ld_word>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d001      	beq.n	800c526 <cmp_lfn+0x1e>
 800c522:	2300      	movs	r3, #0
 800c524:	e059      	b.n	800c5da <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c52e:	1e5a      	subs	r2, r3, #1
 800c530:	4613      	mov	r3, r2
 800c532:	005b      	lsls	r3, r3, #1
 800c534:	4413      	add	r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4413      	add	r3, r2
 800c53a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c53c:	2301      	movs	r3, #1
 800c53e:	81fb      	strh	r3, [r7, #14]
 800c540:	2300      	movs	r3, #0
 800c542:	613b      	str	r3, [r7, #16]
 800c544:	e033      	b.n	800c5ae <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c546:	4a27      	ldr	r2, [pc, #156]	@ (800c5e4 <cmp_lfn+0xdc>)
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	4413      	add	r3, r2
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	461a      	mov	r2, r3
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	4413      	add	r3, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7fe ff63 	bl	800b420 <ld_word>
 800c55a:	4603      	mov	r3, r0
 800c55c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c55e:	89fb      	ldrh	r3, [r7, #14]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d01a      	beq.n	800c59a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c564:	697b      	ldr	r3, [r7, #20]
 800c566:	2bfe      	cmp	r3, #254	@ 0xfe
 800c568:	d812      	bhi.n	800c590 <cmp_lfn+0x88>
 800c56a:	89bb      	ldrh	r3, [r7, #12]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f002 fddf 	bl	800f130 <ff_wtoupper>
 800c572:	4603      	mov	r3, r0
 800c574:	461c      	mov	r4, r3
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	617a      	str	r2, [r7, #20]
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	4413      	add	r3, r2
 800c582:	881b      	ldrh	r3, [r3, #0]
 800c584:	4618      	mov	r0, r3
 800c586:	f002 fdd3 	bl	800f130 <ff_wtoupper>
 800c58a:	4603      	mov	r3, r0
 800c58c:	429c      	cmp	r4, r3
 800c58e:	d001      	beq.n	800c594 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c590:	2300      	movs	r3, #0
 800c592:	e022      	b.n	800c5da <cmp_lfn+0xd2>
			}
			wc = uc;
 800c594:	89bb      	ldrh	r3, [r7, #12]
 800c596:	81fb      	strh	r3, [r7, #14]
 800c598:	e006      	b.n	800c5a8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c59a:	89bb      	ldrh	r3, [r7, #12]
 800c59c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d001      	beq.n	800c5a8 <cmp_lfn+0xa0>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e018      	b.n	800c5da <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	613b      	str	r3, [r7, #16]
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b0c      	cmp	r3, #12
 800c5b2:	d9c8      	bls.n	800c546 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00b      	beq.n	800c5d8 <cmp_lfn+0xd0>
 800c5c0:	89fb      	ldrh	r3, [r7, #14]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d008      	beq.n	800c5d8 <cmp_lfn+0xd0>
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	005b      	lsls	r3, r3, #1
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <cmp_lfn+0xd0>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e000      	b.n	800c5da <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c5d8:	2301      	movs	r3, #1
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd90      	pop	{r4, r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	08010ae8 	.word	0x08010ae8

0800c5e8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	331a      	adds	r3, #26
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fe ff12 	bl	800b420 <ld_word>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <pick_lfn+0x1e>
 800c602:	2300      	movs	r3, #0
 800c604:	e04d      	b.n	800c6a2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c60e:	1e5a      	subs	r2, r3, #1
 800c610:	4613      	mov	r3, r2
 800c612:	005b      	lsls	r3, r3, #1
 800c614:	4413      	add	r3, r2
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c61c:	2301      	movs	r3, #1
 800c61e:	81fb      	strh	r3, [r7, #14]
 800c620:	2300      	movs	r3, #0
 800c622:	613b      	str	r3, [r7, #16]
 800c624:	e028      	b.n	800c678 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c626:	4a21      	ldr	r2, [pc, #132]	@ (800c6ac <pick_lfn+0xc4>)
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	4413      	add	r3, r2
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	4413      	add	r3, r2
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe fef3 	bl	800b420 <ld_word>
 800c63a:	4603      	mov	r3, r0
 800c63c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c63e:	89fb      	ldrh	r3, [r7, #14]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00f      	beq.n	800c664 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	2bfe      	cmp	r3, #254	@ 0xfe
 800c648:	d901      	bls.n	800c64e <pick_lfn+0x66>
 800c64a:	2300      	movs	r3, #0
 800c64c:	e029      	b.n	800c6a2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c64e:	89bb      	ldrh	r3, [r7, #12]
 800c650:	81fb      	strh	r3, [r7, #14]
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	617a      	str	r2, [r7, #20]
 800c658:	005b      	lsls	r3, r3, #1
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	4413      	add	r3, r2
 800c65e:	89fa      	ldrh	r2, [r7, #14]
 800c660:	801a      	strh	r2, [r3, #0]
 800c662:	e006      	b.n	800c672 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c664:	89bb      	ldrh	r3, [r7, #12]
 800c666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d001      	beq.n	800c672 <pick_lfn+0x8a>
 800c66e:	2300      	movs	r3, #0
 800c670:	e017      	b.n	800c6a2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	3301      	adds	r3, #1
 800c676:	613b      	str	r3, [r7, #16]
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	2b0c      	cmp	r3, #12
 800c67c:	d9d3      	bls.n	800c626 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00a      	beq.n	800c6a0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	2bfe      	cmp	r3, #254	@ 0xfe
 800c68e:	d901      	bls.n	800c694 <pick_lfn+0xac>
 800c690:	2300      	movs	r3, #0
 800c692:	e006      	b.n	800c6a2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	4413      	add	r3, r2
 800c69c:	2200      	movs	r2, #0
 800c69e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c6a0:	2301      	movs	r3, #1
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3718      	adds	r7, #24
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	08010ae8 	.word	0x08010ae8

0800c6b0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	461a      	mov	r2, r3
 800c6be:	460b      	mov	r3, r1
 800c6c0:	71fb      	strb	r3, [r7, #7]
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	330d      	adds	r3, #13
 800c6ca:	79ba      	ldrb	r2, [r7, #6]
 800c6cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	330b      	adds	r3, #11
 800c6d2:	220f      	movs	r2, #15
 800c6d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	330c      	adds	r3, #12
 800c6da:	2200      	movs	r2, #0
 800c6dc:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	331a      	adds	r3, #26
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fe fed6 	bl	800b496 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c6ea:	79fb      	ldrb	r3, [r7, #7]
 800c6ec:	1e5a      	subs	r2, r3, #1
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	4413      	add	r3, r2
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	82fb      	strh	r3, [r7, #22]
 800c6fe:	2300      	movs	r3, #0
 800c700:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c702:	8afb      	ldrh	r3, [r7, #22]
 800c704:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c708:	4293      	cmp	r3, r2
 800c70a:	d007      	beq.n	800c71c <put_lfn+0x6c>
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	61fa      	str	r2, [r7, #28]
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	4413      	add	r3, r2
 800c718:	881b      	ldrh	r3, [r3, #0]
 800c71a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c71c:	4a17      	ldr	r2, [pc, #92]	@ (800c77c <put_lfn+0xcc>)
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	4413      	add	r3, r2
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	461a      	mov	r2, r3
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	4413      	add	r3, r2
 800c72a:	8afa      	ldrh	r2, [r7, #22]
 800c72c:	4611      	mov	r1, r2
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fe feb1 	bl	800b496 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c734:	8afb      	ldrh	r3, [r7, #22]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d102      	bne.n	800c740 <put_lfn+0x90>
 800c73a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c73e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	3301      	adds	r3, #1
 800c744:	61bb      	str	r3, [r7, #24]
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	2b0c      	cmp	r3, #12
 800c74a:	d9da      	bls.n	800c702 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c74c:	8afb      	ldrh	r3, [r7, #22]
 800c74e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c752:	4293      	cmp	r3, r2
 800c754:	d006      	beq.n	800c764 <put_lfn+0xb4>
 800c756:	69fb      	ldr	r3, [r7, #28]
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	68fa      	ldr	r2, [r7, #12]
 800c75c:	4413      	add	r3, r2
 800c75e:	881b      	ldrh	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d103      	bne.n	800c76c <put_lfn+0xbc>
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c76a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	79fa      	ldrb	r2, [r7, #7]
 800c770:	701a      	strb	r2, [r3, #0]
}
 800c772:	bf00      	nop
 800c774:	3720      	adds	r7, #32
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	08010ae8 	.word	0x08010ae8

0800c780 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b08c      	sub	sp, #48	@ 0x30
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c78e:	220b      	movs	r2, #11
 800c790:	68b9      	ldr	r1, [r7, #8]
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7fe fec6 	bl	800b524 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b05      	cmp	r3, #5
 800c79c:	d92b      	bls.n	800c7f6 <gen_numname+0x76>
		sr = seq;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c7a2:	e022      	b.n	800c7ea <gen_numname+0x6a>
			wc = *lfn++;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	1c9a      	adds	r2, r3, #2
 800c7a8:	607a      	str	r2, [r7, #4]
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7b2:	e017      	b.n	800c7e4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	005a      	lsls	r2, r3, #1
 800c7b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7ba:	f003 0301 	and.w	r3, r3, #1
 800c7be:	4413      	add	r3, r2
 800c7c0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c7c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c7c4:	085b      	lsrs	r3, r3, #1
 800c7c6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d005      	beq.n	800c7de <gen_numname+0x5e>
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800c7d8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800c7dc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c7de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e6:	2b0f      	cmp	r3, #15
 800c7e8:	d9e4      	bls.n	800c7b4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1d8      	bne.n	800c7a4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c7f6:	2307      	movs	r3, #7
 800c7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	f003 030f 	and.w	r3, r3, #15
 800c802:	b2db      	uxtb	r3, r3
 800c804:	3330      	adds	r3, #48	@ 0x30
 800c806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c80a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c80e:	2b39      	cmp	r3, #57	@ 0x39
 800c810:	d904      	bls.n	800c81c <gen_numname+0x9c>
 800c812:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c816:	3307      	adds	r3, #7
 800c818:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c81c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81e:	1e5a      	subs	r2, r3, #1
 800c820:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c822:	3330      	adds	r3, #48	@ 0x30
 800c824:	443b      	add	r3, r7
 800c826:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c82a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	091b      	lsrs	r3, r3, #4
 800c832:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d1df      	bne.n	800c7fa <gen_numname+0x7a>
	ns[i] = '~';
 800c83a:	f107 0214 	add.w	r2, r7, #20
 800c83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c840:	4413      	add	r3, r2
 800c842:	227e      	movs	r2, #126	@ 0x7e
 800c844:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c846:	2300      	movs	r3, #0
 800c848:	627b      	str	r3, [r7, #36]	@ 0x24
 800c84a:	e002      	b.n	800c852 <gen_numname+0xd2>
 800c84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84e:	3301      	adds	r3, #1
 800c850:	627b      	str	r3, [r7, #36]	@ 0x24
 800c852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	429a      	cmp	r2, r3
 800c858:	d205      	bcs.n	800c866 <gen_numname+0xe6>
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85e:	4413      	add	r3, r2
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	2b20      	cmp	r3, #32
 800c864:	d1f2      	bne.n	800c84c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c868:	2b07      	cmp	r3, #7
 800c86a:	d807      	bhi.n	800c87c <gen_numname+0xfc>
 800c86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c86e:	1c5a      	adds	r2, r3, #1
 800c870:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c872:	3330      	adds	r3, #48	@ 0x30
 800c874:	443b      	add	r3, r7
 800c876:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c87a:	e000      	b.n	800c87e <gen_numname+0xfe>
 800c87c:	2120      	movs	r1, #32
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	1c5a      	adds	r2, r3, #1
 800c882:	627a      	str	r2, [r7, #36]	@ 0x24
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	4413      	add	r3, r2
 800c888:	460a      	mov	r2, r1
 800c88a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	2b07      	cmp	r3, #7
 800c890:	d9e9      	bls.n	800c866 <gen_numname+0xe6>
}
 800c892:	bf00      	nop
 800c894:	bf00      	nop
 800c896:	3730      	adds	r7, #48	@ 0x30
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b085      	sub	sp, #20
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c8a8:	230b      	movs	r3, #11
 800c8aa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	0852      	lsrs	r2, r2, #1
 800c8b2:	01db      	lsls	r3, r3, #7
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	1c59      	adds	r1, r3, #1
 800c8bc:	6079      	str	r1, [r7, #4]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	60bb      	str	r3, [r7, #8]
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1ed      	bne.n	800c8ac <sum_sfn+0x10>
	return sum;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3714      	adds	r7, #20
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr

0800c8de <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b086      	sub	sp, #24
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c8e8:	2304      	movs	r3, #4
 800c8ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c8f2:	23ff      	movs	r3, #255	@ 0xff
 800c8f4:	757b      	strb	r3, [r7, #21]
 800c8f6:	23ff      	movs	r3, #255	@ 0xff
 800c8f8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c8fa:	e081      	b.n	800ca00 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	69db      	ldr	r3, [r3, #28]
 800c900:	4619      	mov	r1, r3
 800c902:	6938      	ldr	r0, [r7, #16]
 800c904:	f7ff f83c 	bl	800b980 <move_window>
 800c908:	4603      	mov	r3, r0
 800c90a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c90c:	7dfb      	ldrb	r3, [r7, #23]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d17c      	bne.n	800ca0c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a1b      	ldr	r3, [r3, #32]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c91a:	7dbb      	ldrb	r3, [r7, #22]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d102      	bne.n	800c926 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c920:	2304      	movs	r3, #4
 800c922:	75fb      	strb	r3, [r7, #23]
 800c924:	e077      	b.n	800ca16 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	330b      	adds	r3, #11
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c932:	73fb      	strb	r3, [r7, #15]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	7bfa      	ldrb	r2, [r7, #15]
 800c938:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c93a:	7dbb      	ldrb	r3, [r7, #22]
 800c93c:	2be5      	cmp	r3, #229	@ 0xe5
 800c93e:	d00e      	beq.n	800c95e <dir_read+0x80>
 800c940:	7dbb      	ldrb	r3, [r7, #22]
 800c942:	2b2e      	cmp	r3, #46	@ 0x2e
 800c944:	d00b      	beq.n	800c95e <dir_read+0x80>
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	f023 0320 	bic.w	r3, r3, #32
 800c94c:	2b08      	cmp	r3, #8
 800c94e:	bf0c      	ite	eq
 800c950:	2301      	moveq	r3, #1
 800c952:	2300      	movne	r3, #0
 800c954:	b2db      	uxtb	r3, r3
 800c956:	461a      	mov	r2, r3
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d002      	beq.n	800c964 <dir_read+0x86>
				ord = 0xFF;
 800c95e:	23ff      	movs	r3, #255	@ 0xff
 800c960:	757b      	strb	r3, [r7, #21]
 800c962:	e044      	b.n	800c9ee <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	2b0f      	cmp	r3, #15
 800c968:	d12f      	bne.n	800c9ca <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c96a:	7dbb      	ldrb	r3, [r7, #22]
 800c96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00d      	beq.n	800c990 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6a1b      	ldr	r3, [r3, #32]
 800c978:	7b5b      	ldrb	r3, [r3, #13]
 800c97a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c97c:	7dbb      	ldrb	r3, [r7, #22]
 800c97e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c982:	75bb      	strb	r3, [r7, #22]
 800c984:	7dbb      	ldrb	r3, [r7, #22]
 800c986:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	695a      	ldr	r2, [r3, #20]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c990:	7dba      	ldrb	r2, [r7, #22]
 800c992:	7d7b      	ldrb	r3, [r7, #21]
 800c994:	429a      	cmp	r2, r3
 800c996:	d115      	bne.n	800c9c4 <dir_read+0xe6>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	330d      	adds	r3, #13
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	7d3a      	ldrb	r2, [r7, #20]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d10e      	bne.n	800c9c4 <dir_read+0xe6>
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	691a      	ldr	r2, [r3, #16]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	f7ff fe19 	bl	800c5e8 <pick_lfn>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <dir_read+0xe6>
 800c9bc:	7d7b      	ldrb	r3, [r7, #21]
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	e000      	b.n	800c9c6 <dir_read+0xe8>
 800c9c4:	23ff      	movs	r3, #255	@ 0xff
 800c9c6:	757b      	strb	r3, [r7, #21]
 800c9c8:	e011      	b.n	800c9ee <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c9ca:	7d7b      	ldrb	r3, [r7, #21]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d109      	bne.n	800c9e4 <dir_read+0x106>
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6a1b      	ldr	r3, [r3, #32]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff ff61 	bl	800c89c <sum_sfn>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	461a      	mov	r2, r3
 800c9de:	7d3b      	ldrb	r3, [r7, #20]
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d015      	beq.n	800ca10 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ea:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800c9ec:	e010      	b.n	800ca10 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff fc2d 	bl	800c250 <dir_next>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c9fa:	7dfb      	ldrb	r3, [r7, #23]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d109      	bne.n	800ca14 <dir_read+0x136>
	while (dp->sect) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f47f af79 	bne.w	800c8fc <dir_read+0x1e>
 800ca0a:	e004      	b.n	800ca16 <dir_read+0x138>
		if (res != FR_OK) break;
 800ca0c:	bf00      	nop
 800ca0e:	e002      	b.n	800ca16 <dir_read+0x138>
					break;
 800ca10:	bf00      	nop
 800ca12:	e000      	b.n	800ca16 <dir_read+0x138>
		if (res != FR_OK) break;
 800ca14:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <dir_read+0x144>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	61da      	str	r2, [r3, #28]
	return res;
 800ca22:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3718      	adds	r7, #24
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b086      	sub	sp, #24
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7ff fb7e 	bl	800c13e <dir_sdi>
 800ca42:	4603      	mov	r3, r0
 800ca44:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d001      	beq.n	800ca50 <dir_find+0x24>
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	e0a9      	b.n	800cba4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ca50:	23ff      	movs	r3, #255	@ 0xff
 800ca52:	753b      	strb	r3, [r7, #20]
 800ca54:	7d3b      	ldrb	r3, [r7, #20]
 800ca56:	757b      	strb	r3, [r7, #21]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	69db      	ldr	r3, [r3, #28]
 800ca64:	4619      	mov	r1, r3
 800ca66:	6938      	ldr	r0, [r7, #16]
 800ca68:	f7fe ff8a 	bl	800b980 <move_window>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f040 8090 	bne.w	800cb98 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a1b      	ldr	r3, [r3, #32]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca80:	7dbb      	ldrb	r3, [r7, #22]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d102      	bne.n	800ca8c <dir_find+0x60>
 800ca86:	2304      	movs	r3, #4
 800ca88:	75fb      	strb	r3, [r7, #23]
 800ca8a:	e08a      	b.n	800cba2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6a1b      	ldr	r3, [r3, #32]
 800ca90:	330b      	adds	r3, #11
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca98:	73fb      	strb	r3, [r7, #15]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	7bfa      	ldrb	r2, [r7, #15]
 800ca9e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800caa0:	7dbb      	ldrb	r3, [r7, #22]
 800caa2:	2be5      	cmp	r3, #229	@ 0xe5
 800caa4:	d007      	beq.n	800cab6 <dir_find+0x8a>
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	f003 0308 	and.w	r3, r3, #8
 800caac:	2b00      	cmp	r3, #0
 800caae:	d009      	beq.n	800cac4 <dir_find+0x98>
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	2b0f      	cmp	r3, #15
 800cab4:	d006      	beq.n	800cac4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cab6:	23ff      	movs	r3, #255	@ 0xff
 800cab8:	757b      	strb	r3, [r7, #21]
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f04f 32ff 	mov.w	r2, #4294967295
 800cac0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cac2:	e05e      	b.n	800cb82 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	2b0f      	cmp	r3, #15
 800cac8:	d136      	bne.n	800cb38 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d154      	bne.n	800cb82 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cad8:	7dbb      	ldrb	r3, [r7, #22]
 800cada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00d      	beq.n	800cafe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6a1b      	ldr	r3, [r3, #32]
 800cae6:	7b5b      	ldrb	r3, [r3, #13]
 800cae8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800caea:	7dbb      	ldrb	r3, [r7, #22]
 800caec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caf0:	75bb      	strb	r3, [r7, #22]
 800caf2:	7dbb      	ldrb	r3, [r7, #22]
 800caf4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	695a      	ldr	r2, [r3, #20]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cafe:	7dba      	ldrb	r2, [r7, #22]
 800cb00:	7d7b      	ldrb	r3, [r7, #21]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d115      	bne.n	800cb32 <dir_find+0x106>
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6a1b      	ldr	r3, [r3, #32]
 800cb0a:	330d      	adds	r3, #13
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	7d3a      	ldrb	r2, [r7, #20]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d10e      	bne.n	800cb32 <dir_find+0x106>
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	691a      	ldr	r2, [r3, #16]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a1b      	ldr	r3, [r3, #32]
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	4610      	mov	r0, r2
 800cb20:	f7ff fcf2 	bl	800c508 <cmp_lfn>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d003      	beq.n	800cb32 <dir_find+0x106>
 800cb2a:	7d7b      	ldrb	r3, [r7, #21]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	b2db      	uxtb	r3, r3
 800cb30:	e000      	b.n	800cb34 <dir_find+0x108>
 800cb32:	23ff      	movs	r3, #255	@ 0xff
 800cb34:	757b      	strb	r3, [r7, #21]
 800cb36:	e024      	b.n	800cb82 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb38:	7d7b      	ldrb	r3, [r7, #21]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d109      	bne.n	800cb52 <dir_find+0x126>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a1b      	ldr	r3, [r3, #32]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7ff feaa 	bl	800c89c <sum_sfn>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	7d3b      	ldrb	r3, [r7, #20]
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d024      	beq.n	800cb9c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cb58:	f003 0301 	and.w	r3, r3, #1
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10a      	bne.n	800cb76 <dir_find+0x14a>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a18      	ldr	r0, [r3, #32]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3324      	adds	r3, #36	@ 0x24
 800cb68:	220b      	movs	r2, #11
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	f7fe fd16 	bl	800b59c <mem_cmp>
 800cb70:	4603      	mov	r3, r0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d014      	beq.n	800cba0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cb76:	23ff      	movs	r3, #255	@ 0xff
 800cb78:	757b      	strb	r3, [r7, #21]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb80:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cb82:	2100      	movs	r1, #0
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff fb63 	bl	800c250 <dir_next>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cb8e:	7dfb      	ldrb	r3, [r7, #23]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f43f af65 	beq.w	800ca60 <dir_find+0x34>
 800cb96:	e004      	b.n	800cba2 <dir_find+0x176>
		if (res != FR_OK) break;
 800cb98:	bf00      	nop
 800cb9a:	e002      	b.n	800cba2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cb9c:	bf00      	nop
 800cb9e:	e000      	b.n	800cba2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cba0:	bf00      	nop

	return res;
 800cba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08c      	sub	sp, #48	@ 0x30
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cbc0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <dir_register+0x20>
 800cbc8:	2306      	movs	r3, #6
 800cbca:	e0e0      	b.n	800cd8e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cbcc:	2300      	movs	r3, #0
 800cbce:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbd0:	e002      	b.n	800cbd8 <dir_register+0x2c>
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	691a      	ldr	r2, [r3, #16]
 800cbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	4413      	add	r3, r2
 800cbe2:	881b      	ldrh	r3, [r3, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1f4      	bne.n	800cbd2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800cbee:	f107 030c 	add.w	r3, r7, #12
 800cbf2:	220c      	movs	r2, #12
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fc95 	bl	800b524 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cbfa:	7dfb      	ldrb	r3, [r7, #23]
 800cbfc:	f003 0301 	and.w	r3, r3, #1
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d032      	beq.n	800cc6a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2240      	movs	r2, #64	@ 0x40
 800cc08:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc10:	e016      	b.n	800cc40 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	691a      	ldr	r2, [r3, #16]
 800cc1c:	f107 010c 	add.w	r1, r7, #12
 800cc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc22:	f7ff fdad 	bl	800c780 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f7ff ff00 	bl	800ca2c <dir_find>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800cc32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d106      	bne.n	800cc48 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800cc3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc42:	2b63      	cmp	r3, #99	@ 0x63
 800cc44:	d9e5      	bls.n	800cc12 <dir_register+0x66>
 800cc46:	e000      	b.n	800cc4a <dir_register+0x9e>
			if (res != FR_OK) break;
 800cc48:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4c:	2b64      	cmp	r3, #100	@ 0x64
 800cc4e:	d101      	bne.n	800cc54 <dir_register+0xa8>
 800cc50:	2307      	movs	r3, #7
 800cc52:	e09c      	b.n	800cd8e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cc54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	d002      	beq.n	800cc62 <dir_register+0xb6>
 800cc5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cc60:	e095      	b.n	800cd8e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cc62:	7dfa      	ldrb	r2, [r7, #23]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
 800cc6c:	f003 0302 	and.w	r3, r3, #2
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d007      	beq.n	800cc84 <dir_register+0xd8>
 800cc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc76:	330c      	adds	r3, #12
 800cc78:	4a47      	ldr	r2, [pc, #284]	@ (800cd98 <dir_register+0x1ec>)
 800cc7a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7e:	089b      	lsrs	r3, r3, #2
 800cc80:	3301      	adds	r3, #1
 800cc82:	e000      	b.n	800cc86 <dir_register+0xda>
 800cc84:	2301      	movs	r3, #1
 800cc86:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cc88:	6a39      	ldr	r1, [r7, #32]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff fbb6 	bl	800c3fc <dir_alloc>
 800cc90:	4603      	mov	r3, r0
 800cc92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cc96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d148      	bne.n	800cd30 <dir_register+0x184>
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	623b      	str	r3, [r7, #32]
 800cca4:	6a3b      	ldr	r3, [r7, #32]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d042      	beq.n	800cd30 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	695a      	ldr	r2, [r3, #20]
 800ccae:	6a3b      	ldr	r3, [r7, #32]
 800ccb0:	015b      	lsls	r3, r3, #5
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fa41 	bl	800c13e <dir_sdi>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ccc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d132      	bne.n	800cd30 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	3324      	adds	r3, #36	@ 0x24
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff fde4 	bl	800c89c <sum_sfn>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	69db      	ldr	r3, [r3, #28]
 800ccdc:	4619      	mov	r1, r3
 800ccde:	69f8      	ldr	r0, [r7, #28]
 800cce0:	f7fe fe4e 	bl	800b980 <move_window>
 800cce4:	4603      	mov	r3, r0
 800cce6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ccea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d11d      	bne.n	800cd2e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	6918      	ldr	r0, [r3, #16]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6a19      	ldr	r1, [r3, #32]
 800ccfa:	6a3b      	ldr	r3, [r7, #32]
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	7efb      	ldrb	r3, [r7, #27]
 800cd00:	f7ff fcd6 	bl	800c6b0 <put_lfn>
				fs->wflag = 1;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	2201      	movs	r2, #1
 800cd08:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7ff fa9f 	bl	800c250 <dir_next>
 800cd12:	4603      	mov	r3, r0
 800cd14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800cd18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d107      	bne.n	800cd30 <dir_register+0x184>
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	623b      	str	r3, [r7, #32]
 800cd26:	6a3b      	ldr	r3, [r7, #32]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1d5      	bne.n	800ccd8 <dir_register+0x12c>
 800cd2c:	e000      	b.n	800cd30 <dir_register+0x184>
				if (res != FR_OK) break;
 800cd2e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cd30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d128      	bne.n	800cd8a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	69db      	ldr	r3, [r3, #28]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	69f8      	ldr	r0, [r7, #28]
 800cd40:	f7fe fe1e 	bl	800b980 <move_window>
 800cd44:	4603      	mov	r3, r0
 800cd46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800cd4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d11b      	bne.n	800cd8a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a1b      	ldr	r3, [r3, #32]
 800cd56:	2220      	movs	r2, #32
 800cd58:	2100      	movs	r1, #0
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fc03 	bl	800b566 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6a18      	ldr	r0, [r3, #32]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	3324      	adds	r3, #36	@ 0x24
 800cd68:	220b      	movs	r2, #11
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	f7fe fbda 	bl	800b524 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a1b      	ldr	r3, [r3, #32]
 800cd7a:	330c      	adds	r3, #12
 800cd7c:	f002 0218 	and.w	r2, r2, #24
 800cd80:	b2d2      	uxtb	r2, r2
 800cd82:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	2201      	movs	r2, #1
 800cd88:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cd8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3730      	adds	r7, #48	@ 0x30
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	4ec4ec4f 	.word	0x4ec4ec4f

0800cd9c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	695b      	ldr	r3, [r3, #20]
 800cdae:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb8:	d007      	beq.n	800cdca <dir_remove+0x2e>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f7ff f9bc 	bl	800c13e <dir_sdi>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	e000      	b.n	800cdcc <dir_remove+0x30>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cdce:	7dfb      	ldrb	r3, [r7, #23]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d128      	bne.n	800ce26 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	69db      	ldr	r3, [r3, #28]
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6938      	ldr	r0, [r7, #16]
 800cddc:	f7fe fdd0 	bl	800b980 <move_window>
 800cde0:	4603      	mov	r3, r0
 800cde2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cde4:	7dfb      	ldrb	r3, [r7, #23]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d115      	bne.n	800ce16 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6a1b      	ldr	r3, [r3, #32]
 800cdee:	22e5      	movs	r2, #229	@ 0xe5
 800cdf0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	695b      	ldr	r3, [r3, #20]
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d90b      	bls.n	800ce1a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800ce02:	2100      	movs	r1, #0
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7ff fa23 	bl	800c250 <dir_next>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800ce0e:	7dfb      	ldrb	r3, [r7, #23]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0df      	beq.n	800cdd4 <dir_remove+0x38>
 800ce14:	e002      	b.n	800ce1c <dir_remove+0x80>
			if (res != FR_OK) break;
 800ce16:	bf00      	nop
 800ce18:	e000      	b.n	800ce1c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800ce1a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
 800ce1e:	2b04      	cmp	r3, #4
 800ce20:	d101      	bne.n	800ce26 <dir_remove+0x8a>
 800ce22:	2302      	movs	r3, #2
 800ce24:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800ce26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	2200      	movs	r2, #0
 800ce44:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	69db      	ldr	r3, [r3, #28]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 80ca 	beq.w	800cfe4 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce58:	d032      	beq.n	800cec0 <get_fileinfo+0x90>
			i = j = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	61bb      	str	r3, [r7, #24]
 800ce5e:	69bb      	ldr	r3, [r7, #24]
 800ce60:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ce62:	e01b      	b.n	800ce9c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ce64:	89fb      	ldrh	r3, [r7, #14]
 800ce66:	2100      	movs	r1, #0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f002 f925 	bl	800f0b8 <ff_convert>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ce72:	89fb      	ldrh	r3, [r7, #14]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d102      	bne.n	800ce7e <get_fileinfo+0x4e>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	61fb      	str	r3, [r7, #28]
 800ce7c:	e01a      	b.n	800ceb4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800ce7e:	69fb      	ldr	r3, [r7, #28]
 800ce80:	2bfe      	cmp	r3, #254	@ 0xfe
 800ce82:	d902      	bls.n	800ce8a <get_fileinfo+0x5a>
 800ce84:	2300      	movs	r3, #0
 800ce86:	61fb      	str	r3, [r7, #28]
 800ce88:	e014      	b.n	800ceb4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800ce8a:	69fb      	ldr	r3, [r7, #28]
 800ce8c:	1c5a      	adds	r2, r3, #1
 800ce8e:	61fa      	str	r2, [r7, #28]
 800ce90:	89fa      	ldrh	r2, [r7, #14]
 800ce92:	b2d1      	uxtb	r1, r2
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	4413      	add	r3, r2
 800ce98:	460a      	mov	r2, r1
 800ce9a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	691a      	ldr	r2, [r3, #16]
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	1c59      	adds	r1, r3, #1
 800cea4:	61b9      	str	r1, [r7, #24]
 800cea6:	005b      	lsls	r3, r3, #1
 800cea8:	4413      	add	r3, r2
 800ceaa:	881b      	ldrh	r3, [r3, #0]
 800ceac:	81fb      	strh	r3, [r7, #14]
 800ceae:	89fb      	ldrh	r3, [r7, #14]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1d7      	bne.n	800ce64 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	4413      	add	r3, r2
 800ceba:	3316      	adds	r3, #22
 800cebc:	2200      	movs	r2, #0
 800cebe:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cec0:	2300      	movs	r3, #0
 800cec2:	61bb      	str	r3, [r7, #24]
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cec8:	683a      	ldr	r2, [r7, #0]
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	4413      	add	r3, r2
 800cece:	3316      	adds	r3, #22
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800ced4:	e04d      	b.n	800cf72 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a1a      	ldr	r2, [r3, #32]
 800ceda:	69fb      	ldr	r3, [r7, #28]
 800cedc:	1c59      	adds	r1, r3, #1
 800cede:	61f9      	str	r1, [r7, #28]
 800cee0:	4413      	add	r3, r2
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	2b20      	cmp	r3, #32
 800ceea:	d041      	beq.n	800cf70 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	2b05      	cmp	r3, #5
 800cef0:	d101      	bne.n	800cef6 <get_fileinfo+0xc6>
 800cef2:	23e5      	movs	r3, #229	@ 0xe5
 800cef4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	2b09      	cmp	r3, #9
 800cefa:	d10f      	bne.n	800cf1c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800cefc:	89bb      	ldrh	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d105      	bne.n	800cf0e <get_fileinfo+0xde>
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	4413      	add	r3, r2
 800cf08:	3316      	adds	r3, #22
 800cf0a:	222e      	movs	r2, #46	@ 0x2e
 800cf0c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	1c5a      	adds	r2, r3, #1
 800cf12:	61ba      	str	r2, [r7, #24]
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	4413      	add	r3, r2
 800cf18:	222e      	movs	r2, #46	@ 0x2e
 800cf1a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	4413      	add	r3, r2
 800cf22:	3309      	adds	r3, #9
 800cf24:	7dfa      	ldrb	r2, [r7, #23]
 800cf26:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cf28:	89bb      	ldrh	r3, [r7, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d11c      	bne.n	800cf68 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cf2e:	7dfb      	ldrb	r3, [r7, #23]
 800cf30:	2b40      	cmp	r3, #64	@ 0x40
 800cf32:	d913      	bls.n	800cf5c <get_fileinfo+0x12c>
 800cf34:	7dfb      	ldrb	r3, [r7, #23]
 800cf36:	2b5a      	cmp	r3, #90	@ 0x5a
 800cf38:	d810      	bhi.n	800cf5c <get_fileinfo+0x12c>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	330c      	adds	r3, #12
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	461a      	mov	r2, r3
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	2b08      	cmp	r3, #8
 800cf48:	d901      	bls.n	800cf4e <get_fileinfo+0x11e>
 800cf4a:	2310      	movs	r3, #16
 800cf4c:	e000      	b.n	800cf50 <get_fileinfo+0x120>
 800cf4e:	2308      	movs	r3, #8
 800cf50:	4013      	ands	r3, r2
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d002      	beq.n	800cf5c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
 800cf58:	3320      	adds	r3, #32
 800cf5a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cf5c:	683a      	ldr	r2, [r7, #0]
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	4413      	add	r3, r2
 800cf62:	3316      	adds	r3, #22
 800cf64:	7dfa      	ldrb	r2, [r7, #23]
 800cf66:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	61bb      	str	r3, [r7, #24]
 800cf6e:	e000      	b.n	800cf72 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf70:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	2b0a      	cmp	r3, #10
 800cf76:	d9ae      	bls.n	800ced6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800cf78:	89bb      	ldrh	r3, [r7, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d10d      	bne.n	800cf9a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800cf7e:	683a      	ldr	r2, [r7, #0]
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	4413      	add	r3, r2
 800cf84:	3316      	adds	r3, #22
 800cf86:	2200      	movs	r2, #0
 800cf88:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	330c      	adds	r3, #12
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <get_fileinfo+0x16a>
 800cf96:	2300      	movs	r3, #0
 800cf98:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	4413      	add	r3, r2
 800cfa0:	3309      	adds	r3, #9
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6a1b      	ldr	r3, [r3, #32]
 800cfaa:	7ada      	ldrb	r2, [r3, #11]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	331c      	adds	r3, #28
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7fe fa4a 	bl	800b450 <ld_dword>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6a1b      	ldr	r3, [r3, #32]
 800cfc6:	3316      	adds	r3, #22
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fe fa41 	bl	800b450 <ld_dword>
 800cfce:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	80da      	strh	r2, [r3, #6]
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	0c1b      	lsrs	r3, r3, #16
 800cfdc:	b29a      	uxth	r2, r3
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	809a      	strh	r2, [r3, #4]
 800cfe2:	e000      	b.n	800cfe6 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cfe4:	bf00      	nop
}
 800cfe6:	3720      	adds	r7, #32
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b08a      	sub	sp, #40	@ 0x28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	613b      	str	r3, [r7, #16]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	691b      	ldr	r3, [r3, #16]
 800d002:	60fb      	str	r3, [r7, #12]
 800d004:	2300      	movs	r3, #0
 800d006:	617b      	str	r3, [r7, #20]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	61ba      	str	r2, [r7, #24]
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	4413      	add	r3, r2
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d01a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d01c:	2b1f      	cmp	r3, #31
 800d01e:	d940      	bls.n	800d0a2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d020:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d022:	2b2f      	cmp	r3, #47	@ 0x2f
 800d024:	d006      	beq.n	800d034 <create_name+0x48>
 800d026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d028:	2b5c      	cmp	r3, #92	@ 0x5c
 800d02a:	d110      	bne.n	800d04e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d02c:	e002      	b.n	800d034 <create_name+0x48>
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	3301      	adds	r3, #1
 800d032:	61bb      	str	r3, [r7, #24]
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	4413      	add	r3, r2
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d03e:	d0f6      	beq.n	800d02e <create_name+0x42>
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	4413      	add	r3, r2
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b5c      	cmp	r3, #92	@ 0x5c
 800d04a:	d0f0      	beq.n	800d02e <create_name+0x42>
			break;
 800d04c:	e02a      	b.n	800d0a4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	2bfe      	cmp	r3, #254	@ 0xfe
 800d052:	d901      	bls.n	800d058 <create_name+0x6c>
 800d054:	2306      	movs	r3, #6
 800d056:	e17d      	b.n	800d354 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d058:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d05e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d060:	2101      	movs	r1, #1
 800d062:	4618      	mov	r0, r3
 800d064:	f002 f828 	bl	800f0b8 <ff_convert>
 800d068:	4603      	mov	r3, r0
 800d06a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d06c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <create_name+0x8a>
 800d072:	2306      	movs	r3, #6
 800d074:	e16e      	b.n	800d354 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d076:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d078:	2b7f      	cmp	r3, #127	@ 0x7f
 800d07a:	d809      	bhi.n	800d090 <create_name+0xa4>
 800d07c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d07e:	4619      	mov	r1, r3
 800d080:	488d      	ldr	r0, [pc, #564]	@ (800d2b8 <create_name+0x2cc>)
 800d082:	f7fe fab2 	bl	800b5ea <chk_chr>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <create_name+0xa4>
 800d08c:	2306      	movs	r3, #6
 800d08e:	e161      	b.n	800d354 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	617a      	str	r2, [r7, #20]
 800d096:	005b      	lsls	r3, r3, #1
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	4413      	add	r3, r2
 800d09c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d09e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d0a0:	e7b4      	b.n	800d00c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d0a2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d0a4:	693a      	ldr	r2, [r7, #16]
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	441a      	add	r2, r3
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d0ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0b0:	2b1f      	cmp	r3, #31
 800d0b2:	d801      	bhi.n	800d0b8 <create_name+0xcc>
 800d0b4:	2304      	movs	r3, #4
 800d0b6:	e000      	b.n	800d0ba <create_name+0xce>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d0be:	e011      	b.n	800d0e4 <create_name+0xf8>
		w = lfn[di - 1];
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	005b      	lsls	r3, r3, #1
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	881b      	ldrh	r3, [r3, #0]
 800d0d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800d0d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0d4:	2b20      	cmp	r3, #32
 800d0d6:	d002      	beq.n	800d0de <create_name+0xf2>
 800d0d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d0dc:	d106      	bne.n	800d0ec <create_name+0x100>
		di--;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d1ea      	bne.n	800d0c0 <create_name+0xd4>
 800d0ea:	e000      	b.n	800d0ee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d0ec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	005b      	lsls	r3, r3, #1
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <create_name+0x118>
 800d100:	2306      	movs	r3, #6
 800d102:	e127      	b.n	800d354 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	3324      	adds	r3, #36	@ 0x24
 800d108:	220b      	movs	r2, #11
 800d10a:	2120      	movs	r1, #32
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe fa2a 	bl	800b566 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d112:	2300      	movs	r3, #0
 800d114:	61bb      	str	r3, [r7, #24]
 800d116:	e002      	b.n	800d11e <create_name+0x132>
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	3301      	adds	r3, #1
 800d11c:	61bb      	str	r3, [r7, #24]
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	68fa      	ldr	r2, [r7, #12]
 800d124:	4413      	add	r3, r2
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	2b20      	cmp	r3, #32
 800d12a:	d0f5      	beq.n	800d118 <create_name+0x12c>
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	005b      	lsls	r3, r3, #1
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	4413      	add	r3, r2
 800d134:	881b      	ldrh	r3, [r3, #0]
 800d136:	2b2e      	cmp	r3, #46	@ 0x2e
 800d138:	d0ee      	beq.n	800d118 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d009      	beq.n	800d154 <create_name+0x168>
 800d140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d144:	f043 0303 	orr.w	r3, r3, #3
 800d148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d14c:	e002      	b.n	800d154 <create_name+0x168>
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	3b01      	subs	r3, #1
 800d152:	617b      	str	r3, [r7, #20]
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d009      	beq.n	800d16e <create_name+0x182>
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d160:	3b01      	subs	r3, #1
 800d162:	005b      	lsls	r3, r3, #1
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d16c:	d1ef      	bne.n	800d14e <create_name+0x162>

	i = b = 0; ni = 8;
 800d16e:	2300      	movs	r3, #0
 800d170:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d174:	2300      	movs	r3, #0
 800d176:	623b      	str	r3, [r7, #32]
 800d178:	2308      	movs	r3, #8
 800d17a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	61ba      	str	r2, [r7, #24]
 800d182:	005b      	lsls	r3, r3, #1
 800d184:	68fa      	ldr	r2, [r7, #12]
 800d186:	4413      	add	r3, r2
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d18c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 8090 	beq.w	800d2b4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d196:	2b20      	cmp	r3, #32
 800d198:	d006      	beq.n	800d1a8 <create_name+0x1bc>
 800d19a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d19c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d19e:	d10a      	bne.n	800d1b6 <create_name+0x1ca>
 800d1a0:	69ba      	ldr	r2, [r7, #24]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d006      	beq.n	800d1b6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1ac:	f043 0303 	orr.w	r3, r3, #3
 800d1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1b4:	e07d      	b.n	800d2b2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d1b6:	6a3a      	ldr	r2, [r7, #32]
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d203      	bcs.n	800d1c6 <create_name+0x1da>
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d123      	bne.n	800d20e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	2b0b      	cmp	r3, #11
 800d1ca:	d106      	bne.n	800d1da <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1d0:	f043 0303 	orr.w	r3, r3, #3
 800d1d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d1d8:	e075      	b.n	800d2c6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d1da:	69ba      	ldr	r2, [r7, #24]
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d005      	beq.n	800d1ee <create_name+0x202>
 800d1e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1e6:	f043 0303 	orr.w	r3, r3, #3
 800d1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800d1ee:	69ba      	ldr	r2, [r7, #24]
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d866      	bhi.n	800d2c4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	61bb      	str	r3, [r7, #24]
 800d1fa:	2308      	movs	r3, #8
 800d1fc:	623b      	str	r3, [r7, #32]
 800d1fe:	230b      	movs	r3, #11
 800d200:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d202:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d206:	009b      	lsls	r3, r3, #2
 800d208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d20c:	e051      	b.n	800d2b2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d20e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d210:	2b7f      	cmp	r3, #127	@ 0x7f
 800d212:	d914      	bls.n	800d23e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d214:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d216:	2100      	movs	r1, #0
 800d218:	4618      	mov	r0, r3
 800d21a:	f001 ff4d 	bl	800f0b8 <ff_convert>
 800d21e:	4603      	mov	r3, r0
 800d220:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d224:	2b00      	cmp	r3, #0
 800d226:	d004      	beq.n	800d232 <create_name+0x246>
 800d228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d22a:	3b80      	subs	r3, #128	@ 0x80
 800d22c:	4a23      	ldr	r2, [pc, #140]	@ (800d2bc <create_name+0x2d0>)
 800d22e:	5cd3      	ldrb	r3, [r2, r3]
 800d230:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d232:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d236:	f043 0302 	orr.w	r3, r3, #2
 800d23a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d23e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d007      	beq.n	800d254 <create_name+0x268>
 800d244:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d246:	4619      	mov	r1, r3
 800d248:	481d      	ldr	r0, [pc, #116]	@ (800d2c0 <create_name+0x2d4>)
 800d24a:	f7fe f9ce 	bl	800b5ea <chk_chr>
 800d24e:	4603      	mov	r3, r0
 800d250:	2b00      	cmp	r3, #0
 800d252:	d008      	beq.n	800d266 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d254:	235f      	movs	r3, #95	@ 0x5f
 800d256:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d25c:	f043 0303 	orr.w	r3, r3, #3
 800d260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d264:	e01b      	b.n	800d29e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d266:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d268:	2b40      	cmp	r3, #64	@ 0x40
 800d26a:	d909      	bls.n	800d280 <create_name+0x294>
 800d26c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d26e:	2b5a      	cmp	r3, #90	@ 0x5a
 800d270:	d806      	bhi.n	800d280 <create_name+0x294>
					b |= 2;
 800d272:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d276:	f043 0302 	orr.w	r3, r3, #2
 800d27a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d27e:	e00e      	b.n	800d29e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d280:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d282:	2b60      	cmp	r3, #96	@ 0x60
 800d284:	d90b      	bls.n	800d29e <create_name+0x2b2>
 800d286:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d288:	2b7a      	cmp	r3, #122	@ 0x7a
 800d28a:	d808      	bhi.n	800d29e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d28c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d290:	f043 0301 	orr.w	r3, r3, #1
 800d294:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d298:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d29a:	3b20      	subs	r3, #32
 800d29c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	623a      	str	r2, [r7, #32]
 800d2a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d2a6:	b2d1      	uxtb	r1, r2
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	460a      	mov	r2, r1
 800d2ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d2b2:	e763      	b.n	800d17c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d2b4:	bf00      	nop
 800d2b6:	e006      	b.n	800d2c6 <create_name+0x2da>
 800d2b8:	080109c4 	.word	0x080109c4
 800d2bc:	08010a68 	.word	0x08010a68
 800d2c0:	080109d0 	.word	0x080109d0
			if (si > di) break;			/* No extension */
 800d2c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800d2cc:	2be5      	cmp	r3, #229	@ 0xe5
 800d2ce:	d103      	bne.n	800d2d8 <create_name+0x2ec>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2205      	movs	r2, #5
 800d2d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	2b08      	cmp	r3, #8
 800d2dc:	d104      	bne.n	800d2e8 <create_name+0x2fc>
 800d2de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d2e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d2ec:	f003 030c 	and.w	r3, r3, #12
 800d2f0:	2b0c      	cmp	r3, #12
 800d2f2:	d005      	beq.n	800d300 <create_name+0x314>
 800d2f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d2f8:	f003 0303 	and.w	r3, r3, #3
 800d2fc:	2b03      	cmp	r3, #3
 800d2fe:	d105      	bne.n	800d30c <create_name+0x320>
 800d300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d304:	f043 0302 	orr.w	r3, r3, #2
 800d308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d30c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d310:	f003 0302 	and.w	r3, r3, #2
 800d314:	2b00      	cmp	r3, #0
 800d316:	d117      	bne.n	800d348 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d31c:	f003 0303 	and.w	r3, r3, #3
 800d320:	2b01      	cmp	r3, #1
 800d322:	d105      	bne.n	800d330 <create_name+0x344>
 800d324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d328:	f043 0310 	orr.w	r3, r3, #16
 800d32c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d330:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d334:	f003 030c 	and.w	r3, r3, #12
 800d338:	2b04      	cmp	r3, #4
 800d33a:	d105      	bne.n	800d348 <create_name+0x35c>
 800d33c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d340:	f043 0308 	orr.w	r3, r3, #8
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d34e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800d352:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d354:	4618      	mov	r0, r3
 800d356:	3728      	adds	r7, #40	@ 0x28
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d370:	e002      	b.n	800d378 <follow_path+0x1c>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	3301      	adds	r3, #1
 800d376:	603b      	str	r3, [r7, #0]
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d37e:	d0f8      	beq.n	800d372 <follow_path+0x16>
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b5c      	cmp	r3, #92	@ 0x5c
 800d386:	d0f4      	beq.n	800d372 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	2200      	movs	r2, #0
 800d38c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b1f      	cmp	r3, #31
 800d394:	d80a      	bhi.n	800d3ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2280      	movs	r2, #128	@ 0x80
 800d39a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d39e:	2100      	movs	r1, #0
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7fe fecc 	bl	800c13e <dir_sdi>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
 800d3aa:	e048      	b.n	800d43e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d3ac:	463b      	mov	r3, r7
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff fe1b 	bl	800cfec <create_name>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d139      	bne.n	800d434 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7ff fb33 	bl	800ca2c <dir_find>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d3d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d3d2:	7dfb      	ldrb	r3, [r7, #23]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d00a      	beq.n	800d3ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d3d8:	7dfb      	ldrb	r3, [r7, #23]
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	d12c      	bne.n	800d438 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d3de:	7afb      	ldrb	r3, [r7, #11]
 800d3e0:	f003 0304 	and.w	r3, r3, #4
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d127      	bne.n	800d438 <follow_path+0xdc>
 800d3e8:	2305      	movs	r3, #5
 800d3ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d3ec:	e024      	b.n	800d438 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3ee:	7afb      	ldrb	r3, [r7, #11]
 800d3f0:	f003 0304 	and.w	r3, r3, #4
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d121      	bne.n	800d43c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	799b      	ldrb	r3, [r3, #6]
 800d3fc:	f003 0310 	and.w	r3, r3, #16
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d404:	2305      	movs	r3, #5
 800d406:	75fb      	strb	r3, [r7, #23]
 800d408:	e019      	b.n	800d43e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	8992      	ldrh	r2, [r2, #12]
 800d418:	fbb3 f0f2 	udiv	r0, r3, r2
 800d41c:	fb00 f202 	mul.w	r2, r0, r2
 800d420:	1a9b      	subs	r3, r3, r2
 800d422:	440b      	add	r3, r1
 800d424:	4619      	mov	r1, r3
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff f82f 	bl	800c48a <ld_clust>
 800d42c:	4602      	mov	r2, r0
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d432:	e7bb      	b.n	800d3ac <follow_path+0x50>
			if (res != FR_OK) break;
 800d434:	bf00      	nop
 800d436:	e002      	b.n	800d43e <follow_path+0xe2>
				break;
 800d438:	bf00      	nop
 800d43a:	e000      	b.n	800d43e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d43c:	bf00      	nop
			}
		}
	}

	return res;
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d448:	b480      	push	{r7}
 800d44a:	b087      	sub	sp, #28
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d450:	f04f 33ff 	mov.w	r3, #4294967295
 800d454:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d031      	beq.n	800d4c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	e002      	b.n	800d46c <get_ldnumber+0x24>
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	3301      	adds	r3, #1
 800d46a:	617b      	str	r3, [r7, #20]
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	2b1f      	cmp	r3, #31
 800d472:	d903      	bls.n	800d47c <get_ldnumber+0x34>
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b3a      	cmp	r3, #58	@ 0x3a
 800d47a:	d1f4      	bne.n	800d466 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	2b3a      	cmp	r3, #58	@ 0x3a
 800d482:	d11c      	bne.n	800d4be <get_ldnumber+0x76>
			tp = *path;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	1c5a      	adds	r2, r3, #1
 800d48e:	60fa      	str	r2, [r7, #12]
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	3b30      	subs	r3, #48	@ 0x30
 800d494:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	2b09      	cmp	r3, #9
 800d49a:	d80e      	bhi.n	800d4ba <get_ldnumber+0x72>
 800d49c:	68fa      	ldr	r2, [r7, #12]
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d10a      	bne.n	800d4ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d107      	bne.n	800d4ba <get_ldnumber+0x72>
					vol = (int)i;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	617b      	str	r3, [r7, #20]
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	e002      	b.n	800d4c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d4be:	2300      	movs	r3, #0
 800d4c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d4c2:	693b      	ldr	r3, [r7, #16]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	371c      	adds	r7, #28
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	70da      	strb	r2, [r3, #3]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d4e8:	6839      	ldr	r1, [r7, #0]
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f7fe fa48 	bl	800b980 <move_window>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d001      	beq.n	800d4fa <check_fs+0x2a>
 800d4f6:	2304      	movs	r3, #4
 800d4f8:	e038      	b.n	800d56c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	3338      	adds	r3, #56	@ 0x38
 800d4fe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d502:	4618      	mov	r0, r3
 800d504:	f7fd ff8c 	bl	800b420 <ld_word>
 800d508:	4603      	mov	r3, r0
 800d50a:	461a      	mov	r2, r3
 800d50c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d510:	429a      	cmp	r2, r3
 800d512:	d001      	beq.n	800d518 <check_fs+0x48>
 800d514:	2303      	movs	r3, #3
 800d516:	e029      	b.n	800d56c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d51e:	2be9      	cmp	r3, #233	@ 0xe9
 800d520:	d009      	beq.n	800d536 <check_fs+0x66>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d528:	2beb      	cmp	r3, #235	@ 0xeb
 800d52a:	d11e      	bne.n	800d56a <check_fs+0x9a>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d532:	2b90      	cmp	r3, #144	@ 0x90
 800d534:	d119      	bne.n	800d56a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3338      	adds	r3, #56	@ 0x38
 800d53a:	3336      	adds	r3, #54	@ 0x36
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7fd ff87 	bl	800b450 <ld_dword>
 800d542:	4603      	mov	r3, r0
 800d544:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d548:	4a0a      	ldr	r2, [pc, #40]	@ (800d574 <check_fs+0xa4>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d101      	bne.n	800d552 <check_fs+0x82>
 800d54e:	2300      	movs	r3, #0
 800d550:	e00c      	b.n	800d56c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	3338      	adds	r3, #56	@ 0x38
 800d556:	3352      	adds	r3, #82	@ 0x52
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fd ff79 	bl	800b450 <ld_dword>
 800d55e:	4603      	mov	r3, r0
 800d560:	4a05      	ldr	r2, [pc, #20]	@ (800d578 <check_fs+0xa8>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d101      	bne.n	800d56a <check_fs+0x9a>
 800d566:	2300      	movs	r3, #0
 800d568:	e000      	b.n	800d56c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d56a:	2302      	movs	r3, #2
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3708      	adds	r7, #8
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	00544146 	.word	0x00544146
 800d578:	33544146 	.word	0x33544146

0800d57c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b096      	sub	sp, #88	@ 0x58
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	4613      	mov	r3, r2
 800d588:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2200      	movs	r2, #0
 800d58e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f7ff ff59 	bl	800d448 <get_ldnumber>
 800d596:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	da01      	bge.n	800d5a2 <find_volume+0x26>
 800d59e:	230b      	movs	r3, #11
 800d5a0:	e265      	b.n	800da6e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d5a2:	4a9f      	ldr	r2, [pc, #636]	@ (800d820 <find_volume+0x2a4>)
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5aa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <find_volume+0x3a>
 800d5b2:	230c      	movs	r3, #12
 800d5b4:	e25b      	b.n	800da6e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5ba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d5bc:	79fb      	ldrb	r3, [r7, #7]
 800d5be:	f023 0301 	bic.w	r3, r3, #1
 800d5c2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d01a      	beq.n	800d602 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ce:	785b      	ldrb	r3, [r3, #1]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7f3 fae3 	bl	8000b9c <disk_status>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d5dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5e0:	f003 0301 	and.w	r3, r3, #1
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10c      	bne.n	800d602 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d007      	beq.n	800d5fe <find_volume+0x82>
 800d5ee:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d5f2:	f003 0304 	and.w	r3, r3, #4
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d5fa:	230a      	movs	r3, #10
 800d5fc:	e237      	b.n	800da6e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d5fe:	2300      	movs	r3, #0
 800d600:	e235      	b.n	800da6e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d604:	2200      	movs	r2, #0
 800d606:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d612:	785b      	ldrb	r3, [r3, #1]
 800d614:	4618      	mov	r0, r3
 800d616:	f7f3 fadb 	bl	8000bd0 <disk_initialize>
 800d61a:	4603      	mov	r3, r0
 800d61c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d620:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d624:	f003 0301 	and.w	r3, r3, #1
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d001      	beq.n	800d630 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d62c:	2303      	movs	r3, #3
 800d62e:	e21e      	b.n	800da6e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d630:	79fb      	ldrb	r3, [r7, #7]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d007      	beq.n	800d646 <find_volume+0xca>
 800d636:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d63a:	f003 0304 	and.w	r3, r3, #4
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d642:	230a      	movs	r3, #10
 800d644:	e213      	b.n	800da6e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d648:	7858      	ldrb	r0, [r3, #1]
 800d64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64c:	330c      	adds	r3, #12
 800d64e:	461a      	mov	r2, r3
 800d650:	2102      	movs	r1, #2
 800d652:	f7f3 fb25 	bl	8000ca0 <disk_ioctl>
 800d656:	4603      	mov	r3, r0
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d001      	beq.n	800d660 <find_volume+0xe4>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e206      	b.n	800da6e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d662:	899b      	ldrh	r3, [r3, #12]
 800d664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d668:	d80d      	bhi.n	800d686 <find_volume+0x10a>
 800d66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d66c:	899b      	ldrh	r3, [r3, #12]
 800d66e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d672:	d308      	bcc.n	800d686 <find_volume+0x10a>
 800d674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d676:	899b      	ldrh	r3, [r3, #12]
 800d678:	461a      	mov	r2, r3
 800d67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d67c:	899b      	ldrh	r3, [r3, #12]
 800d67e:	3b01      	subs	r3, #1
 800d680:	4013      	ands	r3, r2
 800d682:	2b00      	cmp	r3, #0
 800d684:	d001      	beq.n	800d68a <find_volume+0x10e>
 800d686:	2301      	movs	r3, #1
 800d688:	e1f1      	b.n	800da6e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d68a:	2300      	movs	r3, #0
 800d68c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d68e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d690:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d692:	f7ff ff1d 	bl	800d4d0 <check_fs>
 800d696:	4603      	mov	r3, r0
 800d698:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d69c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d149      	bne.n	800d738 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6a8:	e01e      	b.n	800d6e8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800d6b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6b2:	011b      	lsls	r3, r3, #4
 800d6b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d6b8:	4413      	add	r3, r2
 800d6ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6be:	3304      	adds	r3, #4
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d006      	beq.n	800d6d4 <find_volume+0x158>
 800d6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c8:	3308      	adds	r3, #8
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fd fec0 	bl	800b450 <ld_dword>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	e000      	b.n	800d6d6 <find_volume+0x15a>
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	3358      	adds	r3, #88	@ 0x58
 800d6dc:	443b      	add	r3, r7
 800d6de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d6e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6ea:	2b03      	cmp	r3, #3
 800d6ec:	d9dd      	bls.n	800d6aa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d6f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d002      	beq.n	800d6fe <find_volume+0x182>
 800d6f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d6fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	3358      	adds	r3, #88	@ 0x58
 800d704:	443b      	add	r3, r7
 800d706:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d70a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d70c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d005      	beq.n	800d71e <find_volume+0x1a2>
 800d712:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d714:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d716:	f7ff fedb 	bl	800d4d0 <check_fs>
 800d71a:	4603      	mov	r3, r0
 800d71c:	e000      	b.n	800d720 <find_volume+0x1a4>
 800d71e:	2303      	movs	r3, #3
 800d720:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d724:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d905      	bls.n	800d738 <find_volume+0x1bc>
 800d72c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d72e:	3301      	adds	r3, #1
 800d730:	643b      	str	r3, [r7, #64]	@ 0x40
 800d732:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d734:	2b03      	cmp	r3, #3
 800d736:	d9e2      	bls.n	800d6fe <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d738:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d101      	bne.n	800d744 <find_volume+0x1c8>
 800d740:	2301      	movs	r3, #1
 800d742:	e194      	b.n	800da6e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d744:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d901      	bls.n	800d750 <find_volume+0x1d4>
 800d74c:	230d      	movs	r3, #13
 800d74e:	e18e      	b.n	800da6e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d752:	3338      	adds	r3, #56	@ 0x38
 800d754:	330b      	adds	r3, #11
 800d756:	4618      	mov	r0, r3
 800d758:	f7fd fe62 	bl	800b420 <ld_word>
 800d75c:	4603      	mov	r3, r0
 800d75e:	461a      	mov	r2, r3
 800d760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d762:	899b      	ldrh	r3, [r3, #12]
 800d764:	429a      	cmp	r2, r3
 800d766:	d001      	beq.n	800d76c <find_volume+0x1f0>
 800d768:	230d      	movs	r3, #13
 800d76a:	e180      	b.n	800da6e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d76e:	3338      	adds	r3, #56	@ 0x38
 800d770:	3316      	adds	r3, #22
 800d772:	4618      	mov	r0, r3
 800d774:	f7fd fe54 	bl	800b420 <ld_word>
 800d778:	4603      	mov	r3, r0
 800d77a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <find_volume+0x214>
 800d782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d784:	3338      	adds	r3, #56	@ 0x38
 800d786:	3324      	adds	r3, #36	@ 0x24
 800d788:	4618      	mov	r0, r3
 800d78a:	f7fd fe61 	bl	800b450 <ld_dword>
 800d78e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d794:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d798:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a2:	789b      	ldrb	r3, [r3, #2]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d005      	beq.n	800d7b4 <find_volume+0x238>
 800d7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7aa:	789b      	ldrb	r3, [r3, #2]
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	d001      	beq.n	800d7b4 <find_volume+0x238>
 800d7b0:	230d      	movs	r3, #13
 800d7b2:	e15c      	b.n	800da6e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b6:	789b      	ldrb	r3, [r3, #2]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7bc:	fb02 f303 	mul.w	r3, r2, r3
 800d7c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d0:	895b      	ldrh	r3, [r3, #10]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d008      	beq.n	800d7e8 <find_volume+0x26c>
 800d7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d8:	895b      	ldrh	r3, [r3, #10]
 800d7da:	461a      	mov	r2, r3
 800d7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7de:	895b      	ldrh	r3, [r3, #10]
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d001      	beq.n	800d7ec <find_volume+0x270>
 800d7e8:	230d      	movs	r3, #13
 800d7ea:	e140      	b.n	800da6e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ee:	3338      	adds	r3, #56	@ 0x38
 800d7f0:	3311      	adds	r3, #17
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7fd fe14 	bl	800b420 <ld_word>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d802:	891b      	ldrh	r3, [r3, #8]
 800d804:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d806:	8992      	ldrh	r2, [r2, #12]
 800d808:	0952      	lsrs	r2, r2, #5
 800d80a:	b292      	uxth	r2, r2
 800d80c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d810:	fb01 f202 	mul.w	r2, r1, r2
 800d814:	1a9b      	subs	r3, r3, r2
 800d816:	b29b      	uxth	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d003      	beq.n	800d824 <find_volume+0x2a8>
 800d81c:	230d      	movs	r3, #13
 800d81e:	e126      	b.n	800da6e <find_volume+0x4f2>
 800d820:	20003ef0 	.word	0x20003ef0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d826:	3338      	adds	r3, #56	@ 0x38
 800d828:	3313      	adds	r3, #19
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fd fdf8 	bl	800b420 <ld_word>
 800d830:	4603      	mov	r3, r0
 800d832:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d836:	2b00      	cmp	r3, #0
 800d838:	d106      	bne.n	800d848 <find_volume+0x2cc>
 800d83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83c:	3338      	adds	r3, #56	@ 0x38
 800d83e:	3320      	adds	r3, #32
 800d840:	4618      	mov	r0, r3
 800d842:	f7fd fe05 	bl	800b450 <ld_dword>
 800d846:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84a:	3338      	adds	r3, #56	@ 0x38
 800d84c:	330e      	adds	r3, #14
 800d84e:	4618      	mov	r0, r3
 800d850:	f7fd fde6 	bl	800b420 <ld_word>
 800d854:	4603      	mov	r3, r0
 800d856:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d858:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d101      	bne.n	800d862 <find_volume+0x2e6>
 800d85e:	230d      	movs	r3, #13
 800d860:	e105      	b.n	800da6e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d862:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d866:	4413      	add	r3, r2
 800d868:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d86a:	8911      	ldrh	r1, [r2, #8]
 800d86c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d86e:	8992      	ldrh	r2, [r2, #12]
 800d870:	0952      	lsrs	r2, r2, #5
 800d872:	b292      	uxth	r2, r2
 800d874:	fbb1 f2f2 	udiv	r2, r1, r2
 800d878:	b292      	uxth	r2, r2
 800d87a:	4413      	add	r3, r2
 800d87c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d87e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d882:	429a      	cmp	r2, r3
 800d884:	d201      	bcs.n	800d88a <find_volume+0x30e>
 800d886:	230d      	movs	r3, #13
 800d888:	e0f1      	b.n	800da6e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d88a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d88e:	1ad3      	subs	r3, r2, r3
 800d890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d892:	8952      	ldrh	r2, [r2, #10]
 800d894:	fbb3 f3f2 	udiv	r3, r3, r2
 800d898:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d101      	bne.n	800d8a4 <find_volume+0x328>
 800d8a0:	230d      	movs	r3, #13
 800d8a2:	e0e4      	b.n	800da6e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ac:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d802      	bhi.n	800d8ba <find_volume+0x33e>
 800d8b4:	2302      	movs	r3, #2
 800d8b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8bc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d802      	bhi.n	800d8ca <find_volume+0x34e>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8cc:	1c9a      	adds	r2, r3, #2
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800d8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8d6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d8d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d8da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8dc:	441a      	add	r2, r3
 800d8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800d8e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e6:	441a      	add	r2, r3
 800d8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8ea:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800d8ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d11e      	bne.n	800d932 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f6:	3338      	adds	r3, #56	@ 0x38
 800d8f8:	332a      	adds	r3, #42	@ 0x2a
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7fd fd90 	bl	800b420 <ld_word>
 800d900:	4603      	mov	r3, r0
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <find_volume+0x38e>
 800d906:	230d      	movs	r3, #13
 800d908:	e0b1      	b.n	800da6e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d90c:	891b      	ldrh	r3, [r3, #8]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d001      	beq.n	800d916 <find_volume+0x39a>
 800d912:	230d      	movs	r3, #13
 800d914:	e0ab      	b.n	800da6e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d918:	3338      	adds	r3, #56	@ 0x38
 800d91a:	332c      	adds	r3, #44	@ 0x2c
 800d91c:	4618      	mov	r0, r3
 800d91e:	f7fd fd97 	bl	800b450 <ld_dword>
 800d922:	4602      	mov	r2, r0
 800d924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d926:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d92a:	69db      	ldr	r3, [r3, #28]
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d930:	e01f      	b.n	800d972 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d934:	891b      	ldrh	r3, [r3, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <find_volume+0x3c2>
 800d93a:	230d      	movs	r3, #13
 800d93c:	e097      	b.n	800da6e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d940:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d944:	441a      	add	r2, r3
 800d946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d948:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d94a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d94e:	2b02      	cmp	r3, #2
 800d950:	d103      	bne.n	800d95a <find_volume+0x3de>
 800d952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	005b      	lsls	r3, r3, #1
 800d958:	e00a      	b.n	800d970 <find_volume+0x3f4>
 800d95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d95c:	69da      	ldr	r2, [r3, #28]
 800d95e:	4613      	mov	r3, r2
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	4413      	add	r3, r2
 800d964:	085a      	lsrs	r2, r3, #1
 800d966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	f003 0301 	and.w	r3, r3, #1
 800d96e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d970:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d974:	6a1a      	ldr	r2, [r3, #32]
 800d976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d978:	899b      	ldrh	r3, [r3, #12]
 800d97a:	4619      	mov	r1, r3
 800d97c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d97e:	440b      	add	r3, r1
 800d980:	3b01      	subs	r3, #1
 800d982:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d984:	8989      	ldrh	r1, [r1, #12]
 800d986:	fbb3 f3f1 	udiv	r3, r3, r1
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d201      	bcs.n	800d992 <find_volume+0x416>
 800d98e:	230d      	movs	r3, #13
 800d990:	e06d      	b.n	800da6e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d994:	f04f 32ff 	mov.w	r2, #4294967295
 800d998:	619a      	str	r2, [r3, #24]
 800d99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99c:	699a      	ldr	r2, [r3, #24]
 800d99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a4:	2280      	movs	r2, #128	@ 0x80
 800d9a6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d9a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d9ac:	2b03      	cmp	r3, #3
 800d9ae:	d149      	bne.n	800da44 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b2:	3338      	adds	r3, #56	@ 0x38
 800d9b4:	3330      	adds	r3, #48	@ 0x30
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fd fd32 	bl	800b420 <ld_word>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d140      	bne.n	800da44 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d9c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d9ca:	f7fd ffd9 	bl	800b980 <move_window>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d137      	bne.n	800da44 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9dc:	3338      	adds	r3, #56	@ 0x38
 800d9de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fd fd1c 	bl	800b420 <ld_word>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d127      	bne.n	800da44 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9f6:	3338      	adds	r3, #56	@ 0x38
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	f7fd fd29 	bl	800b450 <ld_dword>
 800d9fe:	4603      	mov	r3, r0
 800da00:	4a1d      	ldr	r2, [pc, #116]	@ (800da78 <find_volume+0x4fc>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d11e      	bne.n	800da44 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800da06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da08:	3338      	adds	r3, #56	@ 0x38
 800da0a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fd fd1e 	bl	800b450 <ld_dword>
 800da14:	4603      	mov	r3, r0
 800da16:	4a19      	ldr	r2, [pc, #100]	@ (800da7c <find_volume+0x500>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d113      	bne.n	800da44 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800da1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da1e:	3338      	adds	r3, #56	@ 0x38
 800da20:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800da24:	4618      	mov	r0, r3
 800da26:	f7fd fd13 	bl	800b450 <ld_dword>
 800da2a:	4602      	mov	r2, r0
 800da2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800da30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da32:	3338      	adds	r3, #56	@ 0x38
 800da34:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fd fd09 	bl	800b450 <ld_dword>
 800da3e:	4602      	mov	r2, r0
 800da40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da42:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800da44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da46:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800da4a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800da4c:	4b0c      	ldr	r3, [pc, #48]	@ (800da80 <find_volume+0x504>)
 800da4e:	881b      	ldrh	r3, [r3, #0]
 800da50:	3301      	adds	r3, #1
 800da52:	b29a      	uxth	r2, r3
 800da54:	4b0a      	ldr	r3, [pc, #40]	@ (800da80 <find_volume+0x504>)
 800da56:	801a      	strh	r2, [r3, #0]
 800da58:	4b09      	ldr	r3, [pc, #36]	@ (800da80 <find_volume+0x504>)
 800da5a:	881a      	ldrh	r2, [r3, #0]
 800da5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da5e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800da60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da62:	4a08      	ldr	r2, [pc, #32]	@ (800da84 <find_volume+0x508>)
 800da64:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800da66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800da68:	f7fd ff22 	bl	800b8b0 <clear_lock>
#endif
	return FR_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3758      	adds	r7, #88	@ 0x58
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	41615252 	.word	0x41615252
 800da7c:	61417272 	.word	0x61417272
 800da80:	20003ef4 	.word	0x20003ef4
 800da84:	20003f18 	.word	0x20003f18

0800da88 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800da92:	2309      	movs	r3, #9
 800da94:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01c      	beq.n	800dad6 <validate+0x4e>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d018      	beq.n	800dad6 <validate+0x4e>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d013      	beq.n	800dad6 <validate+0x4e>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	889a      	ldrh	r2, [r3, #4]
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	88db      	ldrh	r3, [r3, #6]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d10c      	bne.n	800dad6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	785b      	ldrb	r3, [r3, #1]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7f3 f86a 	bl	8000b9c <disk_status>
 800dac8:	4603      	mov	r3, r0
 800daca:	f003 0301 	and.w	r3, r3, #1
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d101      	bne.n	800dad6 <validate+0x4e>
			res = FR_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d102      	bne.n	800dae2 <validate+0x5a>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	e000      	b.n	800dae4 <validate+0x5c>
 800dae2:	2300      	movs	r3, #0
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	6013      	str	r3, [r2, #0]
	return res;
 800dae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daea:	4618      	mov	r0, r3
 800daec:	3710      	adds	r7, #16
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
	...

0800daf4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b088      	sub	sp, #32
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	4613      	mov	r3, r2
 800db00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800db06:	f107 0310 	add.w	r3, r7, #16
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7ff fc9c 	bl	800d448 <get_ldnumber>
 800db10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800db12:	69fb      	ldr	r3, [r7, #28]
 800db14:	2b00      	cmp	r3, #0
 800db16:	da01      	bge.n	800db1c <f_mount+0x28>
 800db18:	230b      	movs	r3, #11
 800db1a:	e02b      	b.n	800db74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800db1c:	4a17      	ldr	r2, [pc, #92]	@ (800db7c <f_mount+0x88>)
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d005      	beq.n	800db38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800db2c:	69b8      	ldr	r0, [r7, #24]
 800db2e:	f7fd febf 	bl	800b8b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	2200      	movs	r2, #0
 800db36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800db44:	68fa      	ldr	r2, [r7, #12]
 800db46:	490d      	ldr	r1, [pc, #52]	@ (800db7c <f_mount+0x88>)
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <f_mount+0x66>
 800db54:	79fb      	ldrb	r3, [r7, #7]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d001      	beq.n	800db5e <f_mount+0x6a>
 800db5a:	2300      	movs	r3, #0
 800db5c:	e00a      	b.n	800db74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800db5e:	f107 010c 	add.w	r1, r7, #12
 800db62:	f107 0308 	add.w	r3, r7, #8
 800db66:	2200      	movs	r2, #0
 800db68:	4618      	mov	r0, r3
 800db6a:	f7ff fd07 	bl	800d57c <find_volume>
 800db6e:	4603      	mov	r3, r0
 800db70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800db72:	7dfb      	ldrb	r3, [r7, #23]
}
 800db74:	4618      	mov	r0, r3
 800db76:	3720      	adds	r7, #32
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20003ef0 	.word	0x20003ef0

0800db80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b09a      	sub	sp, #104	@ 0x68
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	4613      	mov	r3, r2
 800db8c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <f_open+0x18>
 800db94:	2309      	movs	r3, #9
 800db96:	e1b7      	b.n	800df08 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db98:	79fb      	ldrb	r3, [r7, #7]
 800db9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db9e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800dba0:	79fa      	ldrb	r2, [r7, #7]
 800dba2:	f107 0114 	add.w	r1, r7, #20
 800dba6:	f107 0308 	add.w	r3, r7, #8
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f7ff fce6 	bl	800d57c <find_volume>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800dbb6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f040 819b 	bne.w	800def6 <f_open+0x376>
		dj.obj.fs = fs;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	f107 0318 	add.w	r3, r7, #24
 800dbca:	4611      	mov	r1, r2
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f7ff fbc5 	bl	800d35c <follow_path>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dbd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d118      	bne.n	800dc12 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dbe0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dbe4:	b25b      	sxtb	r3, r3
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	da03      	bge.n	800dbf2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800dbea:	2306      	movs	r3, #6
 800dbec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dbf0:	e00f      	b.n	800dc12 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dbf2:	79fb      	ldrb	r3, [r7, #7]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	bf8c      	ite	hi
 800dbf8:	2301      	movhi	r3, #1
 800dbfa:	2300      	movls	r3, #0
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	461a      	mov	r2, r3
 800dc00:	f107 0318 	add.w	r3, r7, #24
 800dc04:	4611      	mov	r1, r2
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fd fd0a 	bl	800b620 <chk_lock>
 800dc0c:	4603      	mov	r3, r0
 800dc0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	f003 031c 	and.w	r3, r3, #28
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d07f      	beq.n	800dd1c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800dc1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d017      	beq.n	800dc54 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dc24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc28:	2b04      	cmp	r3, #4
 800dc2a:	d10e      	bne.n	800dc4a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dc2c:	f7fd fd54 	bl	800b6d8 <enq_lock>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d006      	beq.n	800dc44 <f_open+0xc4>
 800dc36:	f107 0318 	add.w	r3, r7, #24
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fe ffb6 	bl	800cbac <dir_register>
 800dc40:	4603      	mov	r3, r0
 800dc42:	e000      	b.n	800dc46 <f_open+0xc6>
 800dc44:	2312      	movs	r3, #18
 800dc46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dc4a:	79fb      	ldrb	r3, [r7, #7]
 800dc4c:	f043 0308 	orr.w	r3, r3, #8
 800dc50:	71fb      	strb	r3, [r7, #7]
 800dc52:	e010      	b.n	800dc76 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dc54:	7fbb      	ldrb	r3, [r7, #30]
 800dc56:	f003 0311 	and.w	r3, r3, #17
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <f_open+0xe6>
					res = FR_DENIED;
 800dc5e:	2307      	movs	r3, #7
 800dc60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dc64:	e007      	b.n	800dc76 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dc66:	79fb      	ldrb	r3, [r7, #7]
 800dc68:	f003 0304 	and.w	r3, r3, #4
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d002      	beq.n	800dc76 <f_open+0xf6>
 800dc70:	2308      	movs	r3, #8
 800dc72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc76:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d168      	bne.n	800dd50 <f_open+0x1d0>
 800dc7e:	79fb      	ldrb	r3, [r7, #7]
 800dc80:	f003 0308 	and.w	r3, r3, #8
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d063      	beq.n	800dd50 <f_open+0x1d0>
				dw = GET_FATTIME();
 800dc88:	f7f3 f83a 	bl	8000d00 <get_fattime>
 800dc8c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dc8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc90:	330e      	adds	r3, #14
 800dc92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dc94:	4618      	mov	r0, r3
 800dc96:	f7fd fc19 	bl	800b4cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9c:	3316      	adds	r3, #22
 800dc9e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fd fc13 	bl	800b4cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dca8:	330b      	adds	r3, #11
 800dcaa:	2220      	movs	r2, #32
 800dcac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7fe fbe8 	bl	800c48a <ld_clust>
 800dcba:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fe fc00 	bl	800c4c8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dcc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcca:	331c      	adds	r3, #28
 800dccc:	2100      	movs	r1, #0
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fd fbfc 	bl	800b4cc <st_dword>
					fs->wflag = 1;
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dcda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d037      	beq.n	800dd50 <f_open+0x1d0>
						dw = fs->winsect;
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dce4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800dce6:	f107 0318 	add.w	r3, r7, #24
 800dcea:	2200      	movs	r2, #0
 800dcec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7fe f8f0 	bl	800bed4 <remove_chain>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800dcfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d126      	bne.n	800dd50 <f_open+0x1d0>
							res = move_window(fs, dw);
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7fd fe3a 	bl	800b980 <move_window>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd16:	3a01      	subs	r2, #1
 800dd18:	615a      	str	r2, [r3, #20]
 800dd1a:	e019      	b.n	800dd50 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dd1c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d115      	bne.n	800dd50 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dd24:	7fbb      	ldrb	r3, [r7, #30]
 800dd26:	f003 0310 	and.w	r3, r3, #16
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d003      	beq.n	800dd36 <f_open+0x1b6>
					res = FR_NO_FILE;
 800dd2e:	2304      	movs	r3, #4
 800dd30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dd34:	e00c      	b.n	800dd50 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dd36:	79fb      	ldrb	r3, [r7, #7]
 800dd38:	f003 0302 	and.w	r3, r3, #2
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d007      	beq.n	800dd50 <f_open+0x1d0>
 800dd40:	7fbb      	ldrb	r3, [r7, #30]
 800dd42:	f003 0301 	and.w	r3, r3, #1
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d002      	beq.n	800dd50 <f_open+0x1d0>
						res = FR_DENIED;
 800dd4a:	2307      	movs	r3, #7
 800dd4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800dd50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d126      	bne.n	800dda6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dd58:	79fb      	ldrb	r3, [r7, #7]
 800dd5a:	f003 0308 	and.w	r3, r3, #8
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800dd62:	79fb      	ldrb	r3, [r7, #7]
 800dd64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd68:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800dd72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dd78:	79fb      	ldrb	r3, [r7, #7]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	bf8c      	ite	hi
 800dd7e:	2301      	movhi	r3, #1
 800dd80:	2300      	movls	r3, #0
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	f107 0318 	add.w	r3, r7, #24
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f7fd fcc5 	bl	800b71c <inc_lock>
 800dd92:	4602      	mov	r2, r0
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d102      	bne.n	800dda6 <f_open+0x226>
 800dda0:	2302      	movs	r3, #2
 800dda2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dda6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f040 80a3 	bne.w	800def6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ddb0:	697b      	ldr	r3, [r7, #20]
 800ddb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fe fb67 	bl	800c48a <ld_clust>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ddc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc4:	331c      	adds	r3, #28
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fd fb42 	bl	800b450 <ld_dword>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ddd8:	697a      	ldr	r2, [r7, #20]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	88da      	ldrh	r2, [r3, #6]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	79fa      	ldrb	r2, [r7, #7]
 800ddea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	3330      	adds	r3, #48	@ 0x30
 800de02:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800de06:	2100      	movs	r1, #0
 800de08:	4618      	mov	r0, r3
 800de0a:	f7fd fbac 	bl	800b566 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800de0e:	79fb      	ldrb	r3, [r7, #7]
 800de10:	f003 0320 	and.w	r3, r3, #32
 800de14:	2b00      	cmp	r3, #0
 800de16:	d06e      	beq.n	800def6 <f_open+0x376>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d06a      	beq.n	800def6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	68da      	ldr	r2, [r3, #12]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	895b      	ldrh	r3, [r3, #10]
 800de2c:	461a      	mov	r2, r3
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	899b      	ldrh	r3, [r3, #12]
 800de32:	fb02 f303 	mul.w	r3, r2, r3
 800de36:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	68db      	ldr	r3, [r3, #12]
 800de42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de44:	e016      	b.n	800de74 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fd fe55 	bl	800bafa <get_fat>
 800de50:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800de52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de54:	2b01      	cmp	r3, #1
 800de56:	d802      	bhi.n	800de5e <f_open+0x2de>
 800de58:	2302      	movs	r3, #2
 800de5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800de5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de64:	d102      	bne.n	800de6c <f_open+0x2ec>
 800de66:	2301      	movs	r3, #1
 800de68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800de6c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800de74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d103      	bne.n	800de84 <f_open+0x304>
 800de7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de80:	429a      	cmp	r2, r3
 800de82:	d8e0      	bhi.n	800de46 <f_open+0x2c6>
				}
				fp->clust = clst;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800de88:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d131      	bne.n	800def6 <f_open+0x376>
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	899b      	ldrh	r3, [r3, #12]
 800de96:	461a      	mov	r2, r3
 800de98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de9e:	fb01 f202 	mul.w	r2, r1, r2
 800dea2:	1a9b      	subs	r3, r3, r2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d026      	beq.n	800def6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800deac:	4618      	mov	r0, r3
 800deae:	f7fd fe05 	bl	800babc <clust2sect>
 800deb2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800deb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d103      	bne.n	800dec2 <f_open+0x342>
						res = FR_INT_ERR;
 800deba:	2302      	movs	r3, #2
 800debc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800dec0:	e019      	b.n	800def6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	899b      	ldrh	r3, [r3, #12]
 800dec6:	461a      	mov	r2, r3
 800dec8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800deca:	fbb3 f2f2 	udiv	r2, r3, r2
 800dece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded0:	441a      	add	r2, r3
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	7858      	ldrb	r0, [r3, #1]
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	6a1a      	ldr	r2, [r3, #32]
 800dee4:	2301      	movs	r3, #1
 800dee6:	f7f2 fe9b 	bl	8000c20 <disk_read>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d002      	beq.n	800def6 <f_open+0x376>
 800def0:	2301      	movs	r3, #1
 800def2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800def6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800defa:	2b00      	cmp	r3, #0
 800defc:	d002      	beq.n	800df04 <f_open+0x384>
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800df04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3768      	adds	r7, #104	@ 0x68
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b08c      	sub	sp, #48	@ 0x30
 800df14:	af00      	add	r7, sp, #0
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
 800df1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	2200      	movs	r2, #0
 800df26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f107 0210 	add.w	r2, r7, #16
 800df2e:	4611      	mov	r1, r2
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff fda9 	bl	800da88 <validate>
 800df36:	4603      	mov	r3, r0
 800df38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800df40:	2b00      	cmp	r3, #0
 800df42:	d107      	bne.n	800df54 <f_write+0x44>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	7d5b      	ldrb	r3, [r3, #21]
 800df48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800df4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800df50:	2b00      	cmp	r3, #0
 800df52:	d002      	beq.n	800df5a <f_write+0x4a>
 800df54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800df58:	e16a      	b.n	800e230 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	7d1b      	ldrb	r3, [r3, #20]
 800df5e:	f003 0302 	and.w	r3, r3, #2
 800df62:	2b00      	cmp	r3, #0
 800df64:	d101      	bne.n	800df6a <f_write+0x5a>
 800df66:	2307      	movs	r3, #7
 800df68:	e162      	b.n	800e230 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	699a      	ldr	r2, [r3, #24]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	441a      	add	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	699b      	ldr	r3, [r3, #24]
 800df76:	429a      	cmp	r2, r3
 800df78:	f080 814c 	bcs.w	800e214 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	699b      	ldr	r3, [r3, #24]
 800df80:	43db      	mvns	r3, r3
 800df82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800df84:	e146      	b.n	800e214 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	699b      	ldr	r3, [r3, #24]
 800df8a:	693a      	ldr	r2, [r7, #16]
 800df8c:	8992      	ldrh	r2, [r2, #12]
 800df8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800df92:	fb01 f202 	mul.w	r2, r1, r2
 800df96:	1a9b      	subs	r3, r3, r2
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f040 80f1 	bne.w	800e180 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	699b      	ldr	r3, [r3, #24]
 800dfa2:	693a      	ldr	r2, [r7, #16]
 800dfa4:	8992      	ldrh	r2, [r2, #12]
 800dfa6:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfaa:	693a      	ldr	r2, [r7, #16]
 800dfac:	8952      	ldrh	r2, [r2, #10]
 800dfae:	3a01      	subs	r2, #1
 800dfb0:	4013      	ands	r3, r2
 800dfb2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dfb4:	69bb      	ldr	r3, [r7, #24]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d143      	bne.n	800e042 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	699b      	ldr	r3, [r3, #24]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10c      	bne.n	800dfdc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	689b      	ldr	r3, [r3, #8]
 800dfc6:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d11a      	bne.n	800e004 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fd ffe3 	bl	800bf9e <create_chain>
 800dfd8:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dfda:	e013      	b.n	800e004 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d007      	beq.n	800dff4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	4619      	mov	r1, r3
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f7fe f86f 	bl	800c0ce <clmt_clust>
 800dff0:	62b8      	str	r0, [r7, #40]	@ 0x28
 800dff2:	e007      	b.n	800e004 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	69db      	ldr	r3, [r3, #28]
 800dffa:	4619      	mov	r1, r3
 800dffc:	4610      	mov	r0, r2
 800dffe:	f7fd ffce 	bl	800bf9e <create_chain>
 800e002:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e006:	2b00      	cmp	r3, #0
 800e008:	f000 8109 	beq.w	800e21e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d104      	bne.n	800e01c <f_write+0x10c>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2202      	movs	r2, #2
 800e016:	755a      	strb	r2, [r3, #21]
 800e018:	2302      	movs	r3, #2
 800e01a:	e109      	b.n	800e230 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e022:	d104      	bne.n	800e02e <f_write+0x11e>
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	2201      	movs	r2, #1
 800e028:	755a      	strb	r2, [r3, #21]
 800e02a:	2301      	movs	r3, #1
 800e02c:	e100      	b.n	800e230 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e032:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d102      	bne.n	800e042 <f_write+0x132>
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e040:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	7d1b      	ldrb	r3, [r3, #20]
 800e046:	b25b      	sxtb	r3, r3
 800e048:	2b00      	cmp	r3, #0
 800e04a:	da18      	bge.n	800e07e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	7858      	ldrb	r0, [r3, #1]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	6a1a      	ldr	r2, [r3, #32]
 800e05a:	2301      	movs	r3, #1
 800e05c:	f7f2 fe00 	bl	8000c60 <disk_write>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <f_write+0x160>
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2201      	movs	r2, #1
 800e06a:	755a      	strb	r2, [r3, #21]
 800e06c:	2301      	movs	r3, #1
 800e06e:	e0df      	b.n	800e230 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	7d1b      	ldrb	r3, [r3, #20]
 800e074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e07e:	693a      	ldr	r2, [r7, #16]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	69db      	ldr	r3, [r3, #28]
 800e084:	4619      	mov	r1, r3
 800e086:	4610      	mov	r0, r2
 800e088:	f7fd fd18 	bl	800babc <clust2sect>
 800e08c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <f_write+0x18e>
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2202      	movs	r2, #2
 800e098:	755a      	strb	r2, [r3, #21]
 800e09a:	2302      	movs	r3, #2
 800e09c:	e0c8      	b.n	800e230 <f_write+0x320>
			sect += csect;
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	69bb      	ldr	r3, [r7, #24]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	899b      	ldrh	r3, [r3, #12]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0b2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d043      	beq.n	800e142 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e0ba:	69ba      	ldr	r2, [r7, #24]
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	4413      	add	r3, r2
 800e0c0:	693a      	ldr	r2, [r7, #16]
 800e0c2:	8952      	ldrh	r2, [r2, #10]
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d905      	bls.n	800e0d4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e0c8:	693b      	ldr	r3, [r7, #16]
 800e0ca:	895b      	ldrh	r3, [r3, #10]
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	69bb      	ldr	r3, [r7, #24]
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	7858      	ldrb	r0, [r3, #1]
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	69f9      	ldr	r1, [r7, #28]
 800e0de:	f7f2 fdbf 	bl	8000c60 <disk_write>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d004      	beq.n	800e0f2 <f_write+0x1e2>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	755a      	strb	r2, [r3, #21]
 800e0ee:	2301      	movs	r3, #1
 800e0f0:	e09e      	b.n	800e230 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6a1a      	ldr	r2, [r3, #32]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	6a3a      	ldr	r2, [r7, #32]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d918      	bls.n	800e132 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6a1a      	ldr	r2, [r3, #32]
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	8992      	ldrh	r2, [r2, #12]
 800e112:	fb02 f303 	mul.w	r3, r2, r3
 800e116:	69fa      	ldr	r2, [r7, #28]
 800e118:	18d1      	adds	r1, r2, r3
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	899b      	ldrh	r3, [r3, #12]
 800e11e:	461a      	mov	r2, r3
 800e120:	f7fd fa00 	bl	800b524 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	7d1b      	ldrb	r3, [r3, #20]
 800e128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e12c:	b2da      	uxtb	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	899b      	ldrh	r3, [r3, #12]
 800e136:	461a      	mov	r2, r3
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	fb02 f303 	mul.w	r3, r2, r3
 800e13e:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800e140:	e04b      	b.n	800e1da <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6a1b      	ldr	r3, [r3, #32]
 800e146:	697a      	ldr	r2, [r7, #20]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d016      	beq.n	800e17a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	699a      	ldr	r2, [r3, #24]
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e154:	429a      	cmp	r2, r3
 800e156:	d210      	bcs.n	800e17a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	7858      	ldrb	r0, [r3, #1]
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e162:	2301      	movs	r3, #1
 800e164:	697a      	ldr	r2, [r7, #20]
 800e166:	f7f2 fd5b 	bl	8000c20 <disk_read>
 800e16a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d004      	beq.n	800e17a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2201      	movs	r2, #1
 800e174:	755a      	strb	r2, [r3, #21]
 800e176:	2301      	movs	r3, #1
 800e178:	e05a      	b.n	800e230 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	697a      	ldr	r2, [r7, #20]
 800e17e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e180:	693b      	ldr	r3, [r7, #16]
 800e182:	899b      	ldrh	r3, [r3, #12]
 800e184:	4618      	mov	r0, r3
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	699b      	ldr	r3, [r3, #24]
 800e18a:	693a      	ldr	r2, [r7, #16]
 800e18c:	8992      	ldrh	r2, [r2, #12]
 800e18e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e192:	fb01 f202 	mul.w	r2, r1, r2
 800e196:	1a9b      	subs	r3, r3, r2
 800e198:	1ac3      	subs	r3, r0, r3
 800e19a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e19c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d901      	bls.n	800e1a8 <f_write+0x298>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	699b      	ldr	r3, [r3, #24]
 800e1b2:	693a      	ldr	r2, [r7, #16]
 800e1b4:	8992      	ldrh	r2, [r2, #12]
 800e1b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1ba:	fb00 f202 	mul.w	r2, r0, r2
 800e1be:	1a9b      	subs	r3, r3, r2
 800e1c0:	440b      	add	r3, r1
 800e1c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1c4:	69f9      	ldr	r1, [r7, #28]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fd f9ac 	bl	800b524 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	7d1b      	ldrb	r3, [r3, #20]
 800e1d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e1d4:	b2da      	uxtb	r2, r3
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e1da:	69fa      	ldr	r2, [r7, #28]
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1de:	4413      	add	r3, r2
 800e1e0:	61fb      	str	r3, [r7, #28]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	699a      	ldr	r2, [r3, #24]
 800e1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e8:	441a      	add	r2, r3
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	619a      	str	r2, [r3, #24]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	68da      	ldr	r2, [r3, #12]
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	699b      	ldr	r3, [r3, #24]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	bf38      	it	cc
 800e1fa:	461a      	movcc	r2, r3
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	60da      	str	r2, [r3, #12]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e206:	441a      	add	r2, r3
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	687a      	ldr	r2, [r7, #4]
 800e20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	f47f aeb5 	bne.w	800df86 <f_write+0x76>
 800e21c:	e000      	b.n	800e220 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e21e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	7d1b      	ldrb	r3, [r3, #20]
 800e224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3730      	adds	r7, #48	@ 0x30
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b086      	sub	sp, #24
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f107 0208 	add.w	r2, r7, #8
 800e246:	4611      	mov	r1, r2
 800e248:	4618      	mov	r0, r3
 800e24a:	f7ff fc1d 	bl	800da88 <validate>
 800e24e:	4603      	mov	r3, r0
 800e250:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e252:	7dfb      	ldrb	r3, [r7, #23]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d168      	bne.n	800e32a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	7d1b      	ldrb	r3, [r3, #20]
 800e25c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e260:	2b00      	cmp	r3, #0
 800e262:	d062      	beq.n	800e32a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7d1b      	ldrb	r3, [r3, #20]
 800e268:	b25b      	sxtb	r3, r3
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	da15      	bge.n	800e29a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	7858      	ldrb	r0, [r3, #1]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a1a      	ldr	r2, [r3, #32]
 800e27c:	2301      	movs	r3, #1
 800e27e:	f7f2 fcef 	bl	8000c60 <disk_write>
 800e282:	4603      	mov	r3, r0
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <f_sync+0x54>
 800e288:	2301      	movs	r3, #1
 800e28a:	e04f      	b.n	800e32c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	7d1b      	ldrb	r3, [r3, #20]
 800e290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e294:	b2da      	uxtb	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e29a:	f7f2 fd31 	bl	8000d00 <get_fattime>
 800e29e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	f7fd fb69 	bl	800b980 <move_window>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e2b2:	7dfb      	ldrb	r3, [r7, #23]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d138      	bne.n	800e32a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	330b      	adds	r3, #11
 800e2c2:	781a      	ldrb	r2, [r3, #0]
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	330b      	adds	r3, #11
 800e2c8:	f042 0220 	orr.w	r2, r2, #32
 800e2cc:	b2d2      	uxtb	r2, r2
 800e2ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6818      	ldr	r0, [r3, #0]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	68f9      	ldr	r1, [r7, #12]
 800e2dc:	f7fe f8f4 	bl	800c4c8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f103 021c 	add.w	r2, r3, #28
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	68db      	ldr	r3, [r3, #12]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	f7fd f8ed 	bl	800b4cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3316      	adds	r3, #22
 800e2f6:	6939      	ldr	r1, [r7, #16]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7fd f8e7 	bl	800b4cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	3312      	adds	r3, #18
 800e302:	2100      	movs	r1, #0
 800e304:	4618      	mov	r0, r3
 800e306:	f7fd f8c6 	bl	800b496 <st_word>
					fs->wflag = 1;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2201      	movs	r2, #1
 800e30e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	4618      	mov	r0, r3
 800e314:	f7fd fb62 	bl	800b9dc <sync_fs>
 800e318:	4603      	mov	r3, r0
 800e31a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7d1b      	ldrb	r3, [r3, #20]
 800e320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e324:	b2da      	uxtb	r2, r3
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e32a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3718      	adds	r7, #24
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}

0800e334 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff ff7b 	bl	800e238 <f_sync>
 800e342:	4603      	mov	r3, r0
 800e344:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d118      	bne.n	800e37e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f107 0208 	add.w	r2, r7, #8
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7ff fb97 	bl	800da88 <validate>
 800e35a:	4603      	mov	r3, r0
 800e35c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e35e:	7bfb      	ldrb	r3, [r7, #15]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d10c      	bne.n	800e37e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	4618      	mov	r0, r3
 800e36a:	f7fd fa65 	bl	800b838 <dec_lock>
 800e36e:	4603      	mov	r3, r0
 800e370:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e372:	7bfb      	ldrb	r3, [r7, #15]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d102      	bne.n	800e37e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b090      	sub	sp, #64	@ 0x40
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f107 0208 	add.w	r2, r7, #8
 800e398:	4611      	mov	r1, r2
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7ff fb74 	bl	800da88 <validate>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e3a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d103      	bne.n	800e3b6 <f_lseek+0x2e>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7d5b      	ldrb	r3, [r3, #21]
 800e3b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e3b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d002      	beq.n	800e3c4 <f_lseek+0x3c>
 800e3be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e3c2:	e201      	b.n	800e7c8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f000 80d9 	beq.w	800e580 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3d4:	d15a      	bne.n	800e48c <f_lseek+0x104>
			tbl = fp->cltbl;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3da:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3de:	1d1a      	adds	r2, r3, #4
 800e3e0:	627a      	str	r2, [r7, #36]	@ 0x24
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800e3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d03a      	beq.n	800e46c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3f8:	613b      	str	r3, [r7, #16]
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e400:	3302      	adds	r3, #2
 800e402:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800e404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e40a:	3301      	adds	r3, #1
 800e40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e412:	4618      	mov	r0, r3
 800e414:	f7fd fb71 	bl	800bafa <get_fat>
 800e418:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d804      	bhi.n	800e42a <f_lseek+0xa2>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2202      	movs	r2, #2
 800e424:	755a      	strb	r2, [r3, #21]
 800e426:	2302      	movs	r3, #2
 800e428:	e1ce      	b.n	800e7c8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e430:	d104      	bne.n	800e43c <f_lseek+0xb4>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	755a      	strb	r2, [r3, #21]
 800e438:	2301      	movs	r3, #1
 800e43a:	e1c5      	b.n	800e7c8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	3301      	adds	r3, #1
 800e440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e442:	429a      	cmp	r2, r3
 800e444:	d0de      	beq.n	800e404 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d809      	bhi.n	800e462 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e450:	1d1a      	adds	r2, r3, #4
 800e452:	627a      	str	r2, [r7, #36]	@ 0x24
 800e454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e456:	601a      	str	r2, [r3, #0]
 800e458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e45a:	1d1a      	adds	r2, r3, #4
 800e45c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e45e:	693a      	ldr	r2, [r7, #16]
 800e460:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e468:	429a      	cmp	r2, r3
 800e46a:	d3c4      	bcc.n	800e3f6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e472:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	429a      	cmp	r2, r3
 800e47a:	d803      	bhi.n	800e484 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47e:	2200      	movs	r2, #0
 800e480:	601a      	str	r2, [r3, #0]
 800e482:	e19f      	b.n	800e7c4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e484:	2311      	movs	r3, #17
 800e486:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e48a:	e19b      	b.n	800e7c4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	683a      	ldr	r2, [r7, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	d902      	bls.n	800e49c <f_lseek+0x114>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	683a      	ldr	r2, [r7, #0]
 800e4a0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 818d 	beq.w	800e7c4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fd fe0c 	bl	800c0ce <clmt_clust>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	69db      	ldr	r3, [r3, #28]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4610      	mov	r0, r2
 800e4c6:	f7fd faf9 	bl	800babc <clust2sect>
 800e4ca:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e4cc:	69bb      	ldr	r3, [r7, #24]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d104      	bne.n	800e4dc <f_lseek+0x154>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2202      	movs	r2, #2
 800e4d6:	755a      	strb	r2, [r3, #21]
 800e4d8:	2302      	movs	r3, #2
 800e4da:	e175      	b.n	800e7c8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	8992      	ldrh	r2, [r2, #12]
 800e4e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	8952      	ldrh	r2, [r2, #10]
 800e4ec:	3a01      	subs	r2, #1
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	69ba      	ldr	r2, [r7, #24]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	699b      	ldr	r3, [r3, #24]
 800e4fa:	68ba      	ldr	r2, [r7, #8]
 800e4fc:	8992      	ldrh	r2, [r2, #12]
 800e4fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800e502:	fb01 f202 	mul.w	r2, r1, r2
 800e506:	1a9b      	subs	r3, r3, r2
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f000 815b 	beq.w	800e7c4 <f_lseek+0x43c>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6a1b      	ldr	r3, [r3, #32]
 800e512:	69ba      	ldr	r2, [r7, #24]
 800e514:	429a      	cmp	r2, r3
 800e516:	f000 8155 	beq.w	800e7c4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
 800e51e:	b25b      	sxtb	r3, r3
 800e520:	2b00      	cmp	r3, #0
 800e522:	da18      	bge.n	800e556 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	7858      	ldrb	r0, [r3, #1]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a1a      	ldr	r2, [r3, #32]
 800e532:	2301      	movs	r3, #1
 800e534:	f7f2 fb94 	bl	8000c60 <disk_write>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d004      	beq.n	800e548 <f_lseek+0x1c0>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2201      	movs	r2, #1
 800e542:	755a      	strb	r2, [r3, #21]
 800e544:	2301      	movs	r3, #1
 800e546:	e13f      	b.n	800e7c8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	7d1b      	ldrb	r3, [r3, #20]
 800e54c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e550:	b2da      	uxtb	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	7858      	ldrb	r0, [r3, #1]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e560:	2301      	movs	r3, #1
 800e562:	69ba      	ldr	r2, [r7, #24]
 800e564:	f7f2 fb5c 	bl	8000c20 <disk_read>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d004      	beq.n	800e578 <f_lseek+0x1f0>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	755a      	strb	r2, [r3, #21]
 800e574:	2301      	movs	r3, #1
 800e576:	e127      	b.n	800e7c8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	621a      	str	r2, [r3, #32]
 800e57e:	e121      	b.n	800e7c4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	429a      	cmp	r2, r3
 800e588:	d908      	bls.n	800e59c <f_lseek+0x214>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	7d1b      	ldrb	r3, [r3, #20]
 800e58e:	f003 0302 	and.w	r3, r3, #2
 800e592:	2b00      	cmp	r3, #0
 800e594:	d102      	bne.n	800e59c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	699b      	ldr	r3, [r3, #24]
 800e5a0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5aa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	f000 80b5 	beq.w	800e71e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	895b      	ldrh	r3, [r3, #10]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	899b      	ldrh	r3, [r3, #12]
 800e5be:	fb02 f303 	mul.w	r3, r2, r3
 800e5c2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d01b      	beq.n	800e602 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	1e5a      	subs	r2, r3, #1
 800e5ce:	69fb      	ldr	r3, [r7, #28]
 800e5d0:	fbb2 f2f3 	udiv	r2, r2, r3
 800e5d4:	6a3b      	ldr	r3, [r7, #32]
 800e5d6:	1e59      	subs	r1, r3, #1
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d30f      	bcc.n	800e602 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e5e2:	6a3b      	ldr	r3, [r7, #32]
 800e5e4:	1e5a      	subs	r2, r3, #1
 800e5e6:	69fb      	ldr	r3, [r7, #28]
 800e5e8:	425b      	negs	r3, r3
 800e5ea:	401a      	ands	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	699b      	ldr	r3, [r3, #24]
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	1ad3      	subs	r3, r2, r3
 800e5f8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	69db      	ldr	r3, [r3, #28]
 800e5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e600:	e022      	b.n	800e648 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	689b      	ldr	r3, [r3, #8]
 800e606:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d119      	bne.n	800e642 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2100      	movs	r1, #0
 800e612:	4618      	mov	r0, r3
 800e614:	f7fd fcc3 	bl	800bf9e <create_chain>
 800e618:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d104      	bne.n	800e62a <f_lseek+0x2a2>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2202      	movs	r2, #2
 800e624:	755a      	strb	r2, [r3, #21]
 800e626:	2302      	movs	r3, #2
 800e628:	e0ce      	b.n	800e7c8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e62c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e630:	d104      	bne.n	800e63c <f_lseek+0x2b4>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	755a      	strb	r2, [r3, #21]
 800e638:	2301      	movs	r3, #1
 800e63a:	e0c5      	b.n	800e7c8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e640:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e646:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d067      	beq.n	800e71e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800e64e:	e03a      	b.n	800e6c6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800e650:	683a      	ldr	r2, [r7, #0]
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	603b      	str	r3, [r7, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	699a      	ldr	r2, [r3, #24]
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	441a      	add	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	7d1b      	ldrb	r3, [r3, #20]
 800e668:	f003 0302 	and.w	r3, r3, #2
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00b      	beq.n	800e688 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e674:	4618      	mov	r0, r3
 800e676:	f7fd fc92 	bl	800bf9e <create_chain>
 800e67a:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e67c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d108      	bne.n	800e694 <f_lseek+0x30c>
							ofs = 0; break;
 800e682:	2300      	movs	r3, #0
 800e684:	603b      	str	r3, [r7, #0]
 800e686:	e022      	b.n	800e6ce <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e68c:	4618      	mov	r0, r3
 800e68e:	f7fd fa34 	bl	800bafa <get_fat>
 800e692:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69a:	d104      	bne.n	800e6a6 <f_lseek+0x31e>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2201      	movs	r2, #1
 800e6a0:	755a      	strb	r2, [r3, #21]
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e090      	b.n	800e7c8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6a8:	2b01      	cmp	r3, #1
 800e6aa:	d904      	bls.n	800e6b6 <f_lseek+0x32e>
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	69db      	ldr	r3, [r3, #28]
 800e6b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d304      	bcc.n	800e6c0 <f_lseek+0x338>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2202      	movs	r2, #2
 800e6ba:	755a      	strb	r2, [r3, #21]
 800e6bc:	2302      	movs	r3, #2
 800e6be:	e083      	b.n	800e7c8 <f_lseek+0x440>
					fp->clust = clst;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e6c4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d8c0      	bhi.n	800e650 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	699a      	ldr	r2, [r3, #24]
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	441a      	add	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	899b      	ldrh	r3, [r3, #12]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6e6:	fb01 f202 	mul.w	r2, r1, r2
 800e6ea:	1a9b      	subs	r3, r3, r2
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d016      	beq.n	800e71e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7fd f9e1 	bl	800babc <clust2sect>
 800e6fa:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d104      	bne.n	800e70c <f_lseek+0x384>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2202      	movs	r2, #2
 800e706:	755a      	strb	r2, [r3, #21]
 800e708:	2302      	movs	r3, #2
 800e70a:	e05d      	b.n	800e7c8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	899b      	ldrh	r3, [r3, #12]
 800e710:	461a      	mov	r2, r3
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	fbb3 f3f2 	udiv	r3, r3, r2
 800e718:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e71a:	4413      	add	r3, r2
 800e71c:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	699a      	ldr	r2, [r3, #24]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	68db      	ldr	r3, [r3, #12]
 800e726:	429a      	cmp	r2, r3
 800e728:	d90a      	bls.n	800e740 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	699a      	ldr	r2, [r3, #24]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	7d1b      	ldrb	r3, [r3, #20]
 800e736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	699b      	ldr	r3, [r3, #24]
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	8992      	ldrh	r2, [r2, #12]
 800e748:	fbb3 f1f2 	udiv	r1, r3, r2
 800e74c:	fb01 f202 	mul.w	r2, r1, r2
 800e750:	1a9b      	subs	r3, r3, r2
 800e752:	2b00      	cmp	r3, #0
 800e754:	d036      	beq.n	800e7c4 <f_lseek+0x43c>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d031      	beq.n	800e7c4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	b25b      	sxtb	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	da18      	bge.n	800e79c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	7858      	ldrb	r0, [r3, #1]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6a1a      	ldr	r2, [r3, #32]
 800e778:	2301      	movs	r3, #1
 800e77a:	f7f2 fa71 	bl	8000c60 <disk_write>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d004      	beq.n	800e78e <f_lseek+0x406>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2201      	movs	r2, #1
 800e788:	755a      	strb	r2, [r3, #21]
 800e78a:	2301      	movs	r3, #1
 800e78c:	e01c      	b.n	800e7c8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e796:	b2da      	uxtb	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	7858      	ldrb	r0, [r3, #1]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7aa:	f7f2 fa39 	bl	8000c20 <disk_read>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d004      	beq.n	800e7be <f_lseek+0x436>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	755a      	strb	r2, [r3, #21]
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e004      	b.n	800e7c8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7c2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e7c4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3740      	adds	r7, #64	@ 0x40
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b086      	sub	sp, #24
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d101      	bne.n	800e7e4 <f_opendir+0x14>
 800e7e0:	2309      	movs	r3, #9
 800e7e2:	e064      	b.n	800e8ae <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e7e8:	f107 010c 	add.w	r1, r7, #12
 800e7ec:	463b      	mov	r3, r7
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7fe fec3 	bl	800d57c <find_volume>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d14f      	bne.n	800e8a0 <f_opendir+0xd0>
		obj->fs = fs;
 800e800:	68fa      	ldr	r2, [r7, #12]
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	4619      	mov	r1, r3
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f7fe fda6 	bl	800d35c <follow_path>
 800e810:	4603      	mov	r3, r0
 800e812:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e814:	7dfb      	ldrb	r3, [r7, #23]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d13d      	bne.n	800e896 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e820:	b25b      	sxtb	r3, r3
 800e822:	2b00      	cmp	r3, #0
 800e824:	db12      	blt.n	800e84c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	799b      	ldrb	r3, [r3, #6]
 800e82a:	f003 0310 	and.w	r3, r3, #16
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00a      	beq.n	800e848 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e832:	68fa      	ldr	r2, [r7, #12]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6a1b      	ldr	r3, [r3, #32]
 800e838:	4619      	mov	r1, r3
 800e83a:	4610      	mov	r0, r2
 800e83c:	f7fd fe25 	bl	800c48a <ld_clust>
 800e840:	4602      	mov	r2, r0
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	609a      	str	r2, [r3, #8]
 800e846:	e001      	b.n	800e84c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e848:	2305      	movs	r3, #5
 800e84a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d121      	bne.n	800e896 <f_opendir+0xc6>
				obj->id = fs->id;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	88da      	ldrh	r2, [r3, #6]
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e85a:	2100      	movs	r1, #0
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7fd fc6e 	bl	800c13e <dir_sdi>
 800e862:	4603      	mov	r3, r0
 800e864:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e866:	7dfb      	ldrb	r3, [r7, #23]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d114      	bne.n	800e896 <f_opendir+0xc6>
					if (obj->sclust) {
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00d      	beq.n	800e890 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e874:	2100      	movs	r1, #0
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7fc ff50 	bl	800b71c <inc_lock>
 800e87c:	4602      	mov	r2, r0
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d105      	bne.n	800e896 <f_opendir+0xc6>
 800e88a:	2312      	movs	r3, #18
 800e88c:	75fb      	strb	r3, [r7, #23]
 800e88e:	e002      	b.n	800e896 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	2200      	movs	r2, #0
 800e894:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e896:	7dfb      	ldrb	r3, [r7, #23]
 800e898:	2b04      	cmp	r3, #4
 800e89a:	d101      	bne.n	800e8a0 <f_opendir+0xd0>
 800e89c:	2305      	movs	r3, #5
 800e89e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e8a0:	7dfb      	ldrb	r3, [r7, #23]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d002      	beq.n	800e8ac <f_opendir+0xdc>
 800e8a6:	693b      	ldr	r3, [r7, #16]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e8ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3718      	adds	r7, #24
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b084      	sub	sp, #16
 800e8ba:	af00      	add	r7, sp, #0
 800e8bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f107 0208 	add.w	r2, r7, #8
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7ff f8de 	bl	800da88 <validate>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8d0:	7bfb      	ldrb	r3, [r7, #15]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d110      	bne.n	800e8f8 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	691b      	ldr	r3, [r3, #16]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d006      	beq.n	800e8ec <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fc ffa8 	bl	800b838 <dec_lock>
 800e8e8:	4603      	mov	r3, r0
 800e8ea:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d102      	bne.n	800e8f8 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3710      	adds	r7, #16
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b084      	sub	sp, #16
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f107 0208 	add.w	r2, r7, #8
 800e912:	4611      	mov	r1, r2
 800e914:	4618      	mov	r0, r3
 800e916:	f7ff f8b7 	bl	800da88 <validate>
 800e91a:	4603      	mov	r3, r0
 800e91c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e91e:	7bfb      	ldrb	r3, [r7, #15]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d126      	bne.n	800e972 <f_readdir+0x70>
		if (!fno) {
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e92a:	2100      	movs	r1, #0
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f7fd fc06 	bl	800c13e <dir_sdi>
 800e932:	4603      	mov	r3, r0
 800e934:	73fb      	strb	r3, [r7, #15]
 800e936:	e01c      	b.n	800e972 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e938:	2100      	movs	r1, #0
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7fd ffcf 	bl	800c8de <dir_read>
 800e940:	4603      	mov	r3, r0
 800e942:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	2b04      	cmp	r3, #4
 800e948:	d101      	bne.n	800e94e <f_readdir+0x4c>
 800e94a:	2300      	movs	r3, #0
 800e94c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e94e:	7bfb      	ldrb	r3, [r7, #15]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d10e      	bne.n	800e972 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e954:	6839      	ldr	r1, [r7, #0]
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7fe fa6a 	bl	800ce30 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e95c:	2100      	movs	r1, #0
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7fd fc76 	bl	800c250 <dir_next>
 800e964:	4603      	mov	r3, r0
 800e966:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	2b04      	cmp	r3, #4
 800e96c:	d101      	bne.n	800e972 <f_readdir+0x70>
 800e96e:	2300      	movs	r3, #0
 800e970:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e972:	7bfb      	ldrb	r3, [r7, #15]
}
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b090      	sub	sp, #64	@ 0x40
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e986:	f107 0108 	add.w	r1, r7, #8
 800e98a:	1d3b      	adds	r3, r7, #4
 800e98c:	2200      	movs	r2, #0
 800e98e:	4618      	mov	r0, r3
 800e990:	f7fe fdf4 	bl	800d57c <find_volume>
 800e994:	4603      	mov	r3, r0
 800e996:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800e99a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d11f      	bne.n	800e9e2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	f107 0308 	add.w	r3, r7, #8
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7fe fcd6 	bl	800d35c <follow_path>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800e9b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d111      	bne.n	800e9e2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e9be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e9c2:	b25b      	sxtb	r3, r3
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	da03      	bge.n	800e9d0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e9c8:	2306      	movs	r3, #6
 800e9ca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e9ce:	e008      	b.n	800e9e2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d005      	beq.n	800e9e2 <f_stat+0x66>
 800e9d6:	f107 0308 	add.w	r3, r7, #8
 800e9da:	6839      	ldr	r1, [r7, #0]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fe fa27 	bl	800ce30 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e9e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3740      	adds	r7, #64	@ 0x40
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b092      	sub	sp, #72	@ 0x48
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	60f8      	str	r0, [r7, #12]
 800e9f6:	60b9      	str	r1, [r7, #8]
 800e9f8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e9fa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800e9fe:	f107 030c 	add.w	r3, r7, #12
 800ea02:	2200      	movs	r2, #0
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fe fdb9 	bl	800d57c <find_volume>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800ea10:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f040 8099 	bne.w	800eb4c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800ea1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea22:	699a      	ldr	r2, [r3, #24]
 800ea24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea26:	69db      	ldr	r3, [r3, #28]
 800ea28:	3b02      	subs	r3, #2
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d804      	bhi.n	800ea38 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800ea2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea30:	699a      	ldr	r2, [r3, #24]
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	e089      	b.n	800eb4c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800ea3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea3e:	781b      	ldrb	r3, [r3, #0]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d128      	bne.n	800ea96 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800ea44:	2302      	movs	r3, #2
 800ea46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800ea4c:	f107 0314 	add.w	r3, r7, #20
 800ea50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fd f851 	bl	800bafa <get_fat>
 800ea58:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800ea5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea60:	d103      	bne.n	800ea6a <f_getfree+0x7c>
 800ea62:	2301      	movs	r3, #1
 800ea64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ea68:	e063      	b.n	800eb32 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ea6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	d103      	bne.n	800ea78 <f_getfree+0x8a>
 800ea70:	2302      	movs	r3, #2
 800ea72:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ea76:	e05c      	b.n	800eb32 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800ea78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d102      	bne.n	800ea84 <f_getfree+0x96>
 800ea7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ea80:	3301      	adds	r3, #1
 800ea82:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800ea84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea86:	3301      	adds	r3, #1
 800ea88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea8c:	69db      	ldr	r3, [r3, #28]
 800ea8e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d3db      	bcc.n	800ea4c <f_getfree+0x5e>
 800ea94:	e04d      	b.n	800eb32 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ea96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea98:	69db      	ldr	r3, [r3, #28]
 800ea9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eaa0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800eaaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d113      	bne.n	800ead8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800eab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eab4:	1c5a      	adds	r2, r3, #1
 800eab6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800eab8:	4619      	mov	r1, r3
 800eaba:	f7fc ff61 	bl	800b980 <move_window>
 800eabe:	4603      	mov	r3, r0
 800eac0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800eac4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d131      	bne.n	800eb30 <f_getfree+0x142>
							p = fs->win;
 800eacc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eace:	3338      	adds	r3, #56	@ 0x38
 800ead0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800ead2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ead4:	899b      	ldrh	r3, [r3, #12]
 800ead6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800ead8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d10f      	bne.n	800eb00 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800eae0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eae2:	f7fc fc9d 	bl	800b420 <ld_word>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d102      	bne.n	800eaf2 <f_getfree+0x104>
 800eaec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eaee:	3301      	adds	r3, #1
 800eaf0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf4:	3302      	adds	r3, #2
 800eaf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800eaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eafa:	3b02      	subs	r3, #2
 800eafc:	637b      	str	r3, [r7, #52]	@ 0x34
 800eafe:	e010      	b.n	800eb22 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800eb00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800eb02:	f7fc fca5 	bl	800b450 <ld_dword>
 800eb06:	4603      	mov	r3, r0
 800eb08:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d102      	bne.n	800eb16 <f_getfree+0x128>
 800eb10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb12:	3301      	adds	r3, #1
 800eb14:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	3304      	adds	r3, #4
 800eb1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb1e:	3b04      	subs	r3, #4
 800eb20:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800eb22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb24:	3b01      	subs	r3, #1
 800eb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1bd      	bne.n	800eaaa <f_getfree+0xbc>
 800eb2e:	e000      	b.n	800eb32 <f_getfree+0x144>
							if (res != FR_OK) break;
 800eb30:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb36:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800eb38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb3c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800eb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb40:	791a      	ldrb	r2, [r3, #4]
 800eb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb44:	f042 0201 	orr.w	r2, r2, #1
 800eb48:	b2d2      	uxtb	r2, r2
 800eb4a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800eb4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3748      	adds	r7, #72	@ 0x48
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b0a0      	sub	sp, #128	@ 0x80
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800eb60:	2300      	movs	r3, #0
 800eb62:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb64:	f107 010c 	add.w	r1, r7, #12
 800eb68:	1d3b      	adds	r3, r7, #4
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7fe fd05 	bl	800d57c <find_volume>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 800eb7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	f040 808e 	bne.w	800eca2 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fe fbe4 	bl	800d35c <follow_path>
 800eb94:	4603      	mov	r3, r0
 800eb96:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800eb9a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d108      	bne.n	800ebb4 <f_unlink+0x5c>
 800eba2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800eba6:	2102      	movs	r1, #2
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7fc fd39 	bl	800b620 <chk_lock>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ebb4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d172      	bne.n	800eca2 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ebbc:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800ebc0:	b25b      	sxtb	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	da03      	bge.n	800ebce <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ebc6:	2306      	movs	r3, #6
 800ebc8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800ebcc:	e008      	b.n	800ebe0 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ebce:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ebda:	2307      	movs	r3, #7
 800ebdc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 800ebe0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d134      	bne.n	800ec52 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ebec:	4611      	mov	r1, r2
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f7fd fc4b 	bl	800c48a <ld_clust>
 800ebf4:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ebf6:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800ebfa:	f003 0310 	and.w	r3, r3, #16
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d027      	beq.n	800ec52 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ec06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec08:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ec0a:	f107 0310 	add.w	r3, r7, #16
 800ec0e:	2100      	movs	r1, #0
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fd fa94 	bl	800c13e <dir_sdi>
 800ec16:	4603      	mov	r3, r0
 800ec18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 800ec1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d116      	bne.n	800ec52 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ec24:	f107 0310 	add.w	r3, r7, #16
 800ec28:	2100      	movs	r1, #0
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f7fd fe57 	bl	800c8de <dir_read>
 800ec30:	4603      	mov	r3, r0
 800ec32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ec36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d102      	bne.n	800ec44 <f_unlink+0xec>
 800ec3e:	2307      	movs	r3, #7
 800ec40:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ec44:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec48:	2b04      	cmp	r3, #4
 800ec4a:	d102      	bne.n	800ec52 <f_unlink+0xfa>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800ec52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d123      	bne.n	800eca2 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ec5a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7fe f89c 	bl	800cd9c <dir_remove>
 800ec64:	4603      	mov	r3, r0
 800ec66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ec6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10c      	bne.n	800ec8c <f_unlink+0x134>
 800ec72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d009      	beq.n	800ec8c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ec78:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fd f927 	bl	800bed4 <remove_chain>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ec8c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <f_unlink+0x14a>
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fc fea0 	bl	800b9dc <sync_fs>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800eca2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3780      	adds	r7, #128	@ 0x80
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}

0800ecae <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b098      	sub	sp, #96	@ 0x60
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ecb6:	f107 010c 	add.w	r1, r7, #12
 800ecba:	1d3b      	adds	r3, r7, #4
 800ecbc:	2202      	movs	r2, #2
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe fc5c 	bl	800d57c <find_volume>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800ecce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f040 80f2 	bne.w	800eebc <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	f107 0310 	add.w	r3, r7, #16
 800ecde:	4611      	mov	r1, r2
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fe fb3b 	bl	800d35c <follow_path>
 800ece6:	4603      	mov	r3, r0
 800ece8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ecec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d102      	bne.n	800ecfa <f_mkdir+0x4c>
 800ecf4:	2308      	movs	r3, #8
 800ecf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ecfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ecfe:	2b04      	cmp	r3, #4
 800ed00:	f040 80dc 	bne.w	800eebc <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ed04:	f107 0310 	add.w	r3, r7, #16
 800ed08:	2100      	movs	r1, #0
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fd f947 	bl	800bf9e <create_chain>
 800ed10:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	895b      	ldrh	r3, [r3, #10]
 800ed16:	461a      	mov	r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	899b      	ldrh	r3, [r3, #12]
 800ed1c:	fb02 f303 	mul.w	r3, r2, r3
 800ed20:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800ed22:	2300      	movs	r3, #0
 800ed24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ed28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d102      	bne.n	800ed34 <f_mkdir+0x86>
 800ed2e:	2307      	movs	r3, #7
 800ed30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800ed34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d102      	bne.n	800ed40 <f_mkdir+0x92>
 800ed3a:	2302      	movs	r3, #2
 800ed3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ed40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ed42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed46:	d102      	bne.n	800ed4e <f_mkdir+0xa0>
 800ed48:	2301      	movs	r3, #1
 800ed4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ed4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <f_mkdir+0xb6>
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fc fdcd 	bl	800b8f8 <sync_window>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 800ed64:	f7f1 ffcc 	bl	8000d00 <get_fattime>
 800ed68:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ed6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d16c      	bne.n	800ee4c <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ed76:	4618      	mov	r0, r3
 800ed78:	f7fc fea0 	bl	800babc <clust2sect>
 800ed7c:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	3338      	adds	r3, #56	@ 0x38
 800ed82:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	899b      	ldrh	r3, [r3, #12]
 800ed88:	461a      	mov	r2, r3
 800ed8a:	2100      	movs	r1, #0
 800ed8c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ed8e:	f7fc fbea 	bl	800b566 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ed92:	220b      	movs	r2, #11
 800ed94:	2120      	movs	r1, #32
 800ed96:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ed98:	f7fc fbe5 	bl	800b566 <mem_set>
					dir[DIR_Name] = '.';
 800ed9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ed9e:	222e      	movs	r2, #46	@ 0x2e
 800eda0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800eda2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eda4:	330b      	adds	r3, #11
 800eda6:	2210      	movs	r2, #16
 800eda8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800edaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edac:	3316      	adds	r3, #22
 800edae:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800edb0:	4618      	mov	r0, r3
 800edb2:	f7fc fb8b 	bl	800b4cc <st_dword>
					st_clust(fs, dir, dcl);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800edba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7fd fb83 	bl	800c4c8 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800edc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edc4:	3320      	adds	r3, #32
 800edc6:	2220      	movs	r2, #32
 800edc8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fc fbaa 	bl	800b524 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800edd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edd2:	3321      	adds	r3, #33	@ 0x21
 800edd4:	222e      	movs	r2, #46	@ 0x2e
 800edd6:	701a      	strb	r2, [r3, #0]
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	2b03      	cmp	r3, #3
 800ede2:	d106      	bne.n	800edf2 <f_mkdir+0x144>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ede8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edea:	429a      	cmp	r2, r3
 800edec:	d101      	bne.n	800edf2 <f_mkdir+0x144>
 800edee:	2300      	movs	r3, #0
 800edf0:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800edf6:	3320      	adds	r3, #32
 800edf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edfa:	4619      	mov	r1, r3
 800edfc:	f7fd fb64 	bl	800c4c8 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	895b      	ldrh	r3, [r3, #10]
 800ee04:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee06:	e01c      	b.n	800ee42 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800ee08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee0a:	1c5a      	adds	r2, r3, #1
 800ee0c:	657a      	str	r2, [r7, #84]	@ 0x54
 800ee0e:	68fa      	ldr	r2, [r7, #12]
 800ee10:	6353      	str	r3, [r2, #52]	@ 0x34
					fs->wflag = 1;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2201      	movs	r2, #1
 800ee16:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fc fd6c 	bl	800b8f8 <sync_window>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 800ee26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d10d      	bne.n	800ee4a <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	899b      	ldrh	r3, [r3, #12]
 800ee32:	461a      	mov	r2, r3
 800ee34:	2100      	movs	r1, #0
 800ee36:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ee38:	f7fc fb95 	bl	800b566 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ee3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ee42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d1df      	bne.n	800ee08 <f_mkdir+0x15a>
 800ee48:	e000      	b.n	800ee4c <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800ee4a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ee4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d107      	bne.n	800ee64 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ee54:	f107 0310 	add.w	r3, r7, #16
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fd fea7 	bl	800cbac <dir_register>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 800ee64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d120      	bne.n	800eeae <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800ee6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6e:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800ee70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee72:	3316      	adds	r3, #22
 800ee74:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fc fb28 	bl	800b4cc <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ee80:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fd fb20 	bl	800c4c8 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ee88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee8a:	330b      	adds	r3, #11
 800ee8c:	2210      	movs	r2, #16
 800ee8e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2201      	movs	r2, #1
 800ee94:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800ee96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d10e      	bne.n	800eebc <f_mkdir+0x20e>
					res = sync_fs(fs);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fc fd9b 	bl	800b9dc <sync_fs>
 800eea6:	4603      	mov	r3, r0
 800eea8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eeac:	e006      	b.n	800eebc <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800eeae:	f107 0310 	add.w	r3, r7, #16
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fd f80c 	bl	800bed4 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800eebc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3760      	adds	r7, #96	@ 0x60
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800eed4:	78fb      	ldrb	r3, [r7, #3]
 800eed6:	2b0a      	cmp	r3, #10
 800eed8:	d103      	bne.n	800eee2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800eeda:	210d      	movs	r1, #13
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7ff fff3 	bl	800eec8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	db25      	blt.n	800ef3a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	1c5a      	adds	r2, r3, #1
 800eef2:	60fa      	str	r2, [r7, #12]
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	4413      	add	r3, r2
 800eef8:	78fa      	ldrb	r2, [r7, #3]
 800eefa:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2b3c      	cmp	r3, #60	@ 0x3c
 800ef00:	dd12      	ble.n	800ef28 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6818      	ldr	r0, [r3, #0]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	f103 010c 	add.w	r1, r3, #12
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	f107 0308 	add.w	r3, r7, #8
 800ef12:	f7fe fffd 	bl	800df10 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ef16:	68ba      	ldr	r2, [r7, #8]
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d101      	bne.n	800ef22 <putc_bfd+0x5a>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e001      	b.n	800ef26 <putc_bfd+0x5e>
 800ef22:	f04f 33ff 	mov.w	r3, #4294967295
 800ef26:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	689b      	ldr	r3, [r3, #8]
 800ef32:	1c5a      	adds	r2, r3, #1
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	609a      	str	r2, [r3, #8]
 800ef38:	e000      	b.n	800ef3c <putc_bfd+0x74>
	if (i < 0) return;
 800ef3a:	bf00      	nop
}
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b084      	sub	sp, #16
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	db16      	blt.n	800ef80 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6818      	ldr	r0, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f103 010c 	add.w	r1, r3, #12
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	685b      	ldr	r3, [r3, #4]
 800ef60:	461a      	mov	r2, r3
 800ef62:	f107 030c 	add.w	r3, r7, #12
 800ef66:	f7fe ffd3 	bl	800df10 <f_write>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d107      	bne.n	800ef80 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	68fa      	ldr	r2, [r7, #12]
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d102      	bne.n	800ef80 <putc_flush+0x3e>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	689b      	ldr	r3, [r3, #8]
 800ef7e:	e001      	b.n	800ef84 <putc_flush+0x42>
	return EOF;
 800ef80:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	605a      	str	r2, [r3, #4]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	685a      	ldr	r2, [r3, #4]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	609a      	str	r2, [r3, #8]
}
 800efaa:	bf00      	nop
 800efac:	370c      	adds	r7, #12
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr

0800efb6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b096      	sub	sp, #88	@ 0x58
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800efc0:	f107 030c 	add.w	r3, r7, #12
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	4618      	mov	r0, r3
 800efc8:	f7ff ffe0 	bl	800ef8c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800efcc:	e009      	b.n	800efe2 <f_puts+0x2c>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	1c5a      	adds	r2, r3, #1
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	781a      	ldrb	r2, [r3, #0]
 800efd6:	f107 030c 	add.w	r3, r7, #12
 800efda:	4611      	mov	r1, r2
 800efdc:	4618      	mov	r0, r3
 800efde:	f7ff ff73 	bl	800eec8 <putc_bfd>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1f1      	bne.n	800efce <f_puts+0x18>
	return putc_flush(&pb);
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	4618      	mov	r0, r3
 800eff0:	f7ff ffa7 	bl	800ef42 <putc_flush>
 800eff4:	4603      	mov	r3, r0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3758      	adds	r7, #88	@ 0x58
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
	...

0800f000 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f000:	b480      	push	{r7}
 800f002:	b087      	sub	sp, #28
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	4613      	mov	r3, r2
 800f00c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f00e:	2301      	movs	r3, #1
 800f010:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f012:	2300      	movs	r3, #0
 800f014:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f016:	4b1f      	ldr	r3, [pc, #124]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f018:	7a5b      	ldrb	r3, [r3, #9]
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d131      	bne.n	800f084 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f020:	4b1c      	ldr	r3, [pc, #112]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f022:	7a5b      	ldrb	r3, [r3, #9]
 800f024:	b2db      	uxtb	r3, r3
 800f026:	461a      	mov	r2, r3
 800f028:	4b1a      	ldr	r3, [pc, #104]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f02a:	2100      	movs	r1, #0
 800f02c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f02e:	4b19      	ldr	r3, [pc, #100]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f030:	7a5b      	ldrb	r3, [r3, #9]
 800f032:	b2db      	uxtb	r3, r3
 800f034:	4a17      	ldr	r2, [pc, #92]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	4413      	add	r3, r2
 800f03a:	68fa      	ldr	r2, [r7, #12]
 800f03c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f03e:	4b15      	ldr	r3, [pc, #84]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f040:	7a5b      	ldrb	r3, [r3, #9]
 800f042:	b2db      	uxtb	r3, r3
 800f044:	461a      	mov	r2, r3
 800f046:	4b13      	ldr	r3, [pc, #76]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f048:	4413      	add	r3, r2
 800f04a:	79fa      	ldrb	r2, [r7, #7]
 800f04c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f04e:	4b11      	ldr	r3, [pc, #68]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f050:	7a5b      	ldrb	r3, [r3, #9]
 800f052:	b2db      	uxtb	r3, r3
 800f054:	1c5a      	adds	r2, r3, #1
 800f056:	b2d1      	uxtb	r1, r2
 800f058:	4a0e      	ldr	r2, [pc, #56]	@ (800f094 <FATFS_LinkDriverEx+0x94>)
 800f05a:	7251      	strb	r1, [r2, #9]
 800f05c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f05e:	7dbb      	ldrb	r3, [r7, #22]
 800f060:	3330      	adds	r3, #48	@ 0x30
 800f062:	b2da      	uxtb	r2, r3
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	3301      	adds	r3, #1
 800f06c:	223a      	movs	r2, #58	@ 0x3a
 800f06e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	3302      	adds	r3, #2
 800f074:	222f      	movs	r2, #47	@ 0x2f
 800f076:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	3303      	adds	r3, #3
 800f07c:	2200      	movs	r2, #0
 800f07e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f084:	7dfb      	ldrb	r3, [r7, #23]
}
 800f086:	4618      	mov	r0, r3
 800f088:	371c      	adds	r7, #28
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	20004118 	.word	0x20004118

0800f098 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	6839      	ldr	r1, [r7, #0]
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7ff ffaa 	bl	800f000 <FATFS_LinkDriverEx>
 800f0ac:	4603      	mov	r3, r0
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
	...

0800f0b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b085      	sub	sp, #20
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	4603      	mov	r3, r0
 800f0c0:	6039      	str	r1, [r7, #0]
 800f0c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f0c4:	88fb      	ldrh	r3, [r7, #6]
 800f0c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0c8:	d802      	bhi.n	800f0d0 <ff_convert+0x18>
		c = chr;
 800f0ca:	88fb      	ldrh	r3, [r7, #6]
 800f0cc:	81fb      	strh	r3, [r7, #14]
 800f0ce:	e025      	b.n	800f11c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d00b      	beq.n	800f0ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f0d6:	88fb      	ldrh	r3, [r7, #6]
 800f0d8:	2bff      	cmp	r3, #255	@ 0xff
 800f0da:	d805      	bhi.n	800f0e8 <ff_convert+0x30>
 800f0dc:	88fb      	ldrh	r3, [r7, #6]
 800f0de:	3b80      	subs	r3, #128	@ 0x80
 800f0e0:	4a12      	ldr	r2, [pc, #72]	@ (800f12c <ff_convert+0x74>)
 800f0e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0e6:	e000      	b.n	800f0ea <ff_convert+0x32>
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	81fb      	strh	r3, [r7, #14]
 800f0ec:	e016      	b.n	800f11c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	81fb      	strh	r3, [r7, #14]
 800f0f2:	e009      	b.n	800f108 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f0f4:	89fb      	ldrh	r3, [r7, #14]
 800f0f6:	4a0d      	ldr	r2, [pc, #52]	@ (800f12c <ff_convert+0x74>)
 800f0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f0fc:	88fa      	ldrh	r2, [r7, #6]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d006      	beq.n	800f110 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f102:	89fb      	ldrh	r3, [r7, #14]
 800f104:	3301      	adds	r3, #1
 800f106:	81fb      	strh	r3, [r7, #14]
 800f108:	89fb      	ldrh	r3, [r7, #14]
 800f10a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f10c:	d9f2      	bls.n	800f0f4 <ff_convert+0x3c>
 800f10e:	e000      	b.n	800f112 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f110:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f112:	89fb      	ldrh	r3, [r7, #14]
 800f114:	3380      	adds	r3, #128	@ 0x80
 800f116:	b29b      	uxth	r3, r3
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f11c:	89fb      	ldrh	r3, [r7, #14]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	08010af8 	.word	0x08010af8

0800f130 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f130:	b480      	push	{r7}
 800f132:	b087      	sub	sp, #28
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f13a:	88fb      	ldrh	r3, [r7, #6]
 800f13c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f140:	d201      	bcs.n	800f146 <ff_wtoupper+0x16>
 800f142:	4b3e      	ldr	r3, [pc, #248]	@ (800f23c <ff_wtoupper+0x10c>)
 800f144:	e000      	b.n	800f148 <ff_wtoupper+0x18>
 800f146:	4b3e      	ldr	r3, [pc, #248]	@ (800f240 <ff_wtoupper+0x110>)
 800f148:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	1c9a      	adds	r2, r3, #2
 800f14e:	617a      	str	r2, [r7, #20]
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f154:	8a7b      	ldrh	r3, [r7, #18]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d068      	beq.n	800f22c <ff_wtoupper+0xfc>
 800f15a:	88fa      	ldrh	r2, [r7, #6]
 800f15c:	8a7b      	ldrh	r3, [r7, #18]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d364      	bcc.n	800f22c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	1c9a      	adds	r2, r3, #2
 800f166:	617a      	str	r2, [r7, #20]
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	823b      	strh	r3, [r7, #16]
 800f16c:	8a3b      	ldrh	r3, [r7, #16]
 800f16e:	0a1b      	lsrs	r3, r3, #8
 800f170:	81fb      	strh	r3, [r7, #14]
 800f172:	8a3b      	ldrh	r3, [r7, #16]
 800f174:	b2db      	uxtb	r3, r3
 800f176:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f178:	88fa      	ldrh	r2, [r7, #6]
 800f17a:	8a79      	ldrh	r1, [r7, #18]
 800f17c:	8a3b      	ldrh	r3, [r7, #16]
 800f17e:	440b      	add	r3, r1
 800f180:	429a      	cmp	r2, r3
 800f182:	da49      	bge.n	800f218 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f184:	89fb      	ldrh	r3, [r7, #14]
 800f186:	2b08      	cmp	r3, #8
 800f188:	d84f      	bhi.n	800f22a <ff_wtoupper+0xfa>
 800f18a:	a201      	add	r2, pc, #4	@ (adr r2, 800f190 <ff_wtoupper+0x60>)
 800f18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f190:	0800f1b5 	.word	0x0800f1b5
 800f194:	0800f1c7 	.word	0x0800f1c7
 800f198:	0800f1dd 	.word	0x0800f1dd
 800f19c:	0800f1e5 	.word	0x0800f1e5
 800f1a0:	0800f1ed 	.word	0x0800f1ed
 800f1a4:	0800f1f5 	.word	0x0800f1f5
 800f1a8:	0800f1fd 	.word	0x0800f1fd
 800f1ac:	0800f205 	.word	0x0800f205
 800f1b0:	0800f20d 	.word	0x0800f20d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f1b4:	88fa      	ldrh	r2, [r7, #6]
 800f1b6:	8a7b      	ldrh	r3, [r7, #18]
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	697a      	ldr	r2, [r7, #20]
 800f1be:	4413      	add	r3, r2
 800f1c0:	881b      	ldrh	r3, [r3, #0]
 800f1c2:	80fb      	strh	r3, [r7, #6]
 800f1c4:	e027      	b.n	800f216 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f1c6:	88fa      	ldrh	r2, [r7, #6]
 800f1c8:	8a7b      	ldrh	r3, [r7, #18]
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	f003 0301 	and.w	r3, r3, #1
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	88fa      	ldrh	r2, [r7, #6]
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	80fb      	strh	r3, [r7, #6]
 800f1da:	e01c      	b.n	800f216 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f1dc:	88fb      	ldrh	r3, [r7, #6]
 800f1de:	3b10      	subs	r3, #16
 800f1e0:	80fb      	strh	r3, [r7, #6]
 800f1e2:	e018      	b.n	800f216 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f1e4:	88fb      	ldrh	r3, [r7, #6]
 800f1e6:	3b20      	subs	r3, #32
 800f1e8:	80fb      	strh	r3, [r7, #6]
 800f1ea:	e014      	b.n	800f216 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f1ec:	88fb      	ldrh	r3, [r7, #6]
 800f1ee:	3b30      	subs	r3, #48	@ 0x30
 800f1f0:	80fb      	strh	r3, [r7, #6]
 800f1f2:	e010      	b.n	800f216 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f1f4:	88fb      	ldrh	r3, [r7, #6]
 800f1f6:	3b1a      	subs	r3, #26
 800f1f8:	80fb      	strh	r3, [r7, #6]
 800f1fa:	e00c      	b.n	800f216 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f1fc:	88fb      	ldrh	r3, [r7, #6]
 800f1fe:	3308      	adds	r3, #8
 800f200:	80fb      	strh	r3, [r7, #6]
 800f202:	e008      	b.n	800f216 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f204:	88fb      	ldrh	r3, [r7, #6]
 800f206:	3b50      	subs	r3, #80	@ 0x50
 800f208:	80fb      	strh	r3, [r7, #6]
 800f20a:	e004      	b.n	800f216 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f20c:	88fb      	ldrh	r3, [r7, #6]
 800f20e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f212:	80fb      	strh	r3, [r7, #6]
 800f214:	bf00      	nop
			}
			break;
 800f216:	e008      	b.n	800f22a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f218:	89fb      	ldrh	r3, [r7, #14]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d195      	bne.n	800f14a <ff_wtoupper+0x1a>
 800f21e:	8a3b      	ldrh	r3, [r7, #16]
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	697a      	ldr	r2, [r7, #20]
 800f224:	4413      	add	r3, r2
 800f226:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f228:	e78f      	b.n	800f14a <ff_wtoupper+0x1a>
			break;
 800f22a:	bf00      	nop
	}

	return chr;
 800f22c:	88fb      	ldrh	r3, [r7, #6]
}
 800f22e:	4618      	mov	r0, r3
 800f230:	371c      	adds	r7, #28
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
 800f23a:	bf00      	nop
 800f23c:	08010bf8 	.word	0x08010bf8
 800f240:	08010dec 	.word	0x08010dec

0800f244 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f248:	2200      	movs	r2, #0
 800f24a:	4912      	ldr	r1, [pc, #72]	@ (800f294 <MX_USB_DEVICE_Init+0x50>)
 800f24c:	4812      	ldr	r0, [pc, #72]	@ (800f298 <MX_USB_DEVICE_Init+0x54>)
 800f24e:	f7fa fdea 	bl	8009e26 <USBD_Init>
 800f252:	4603      	mov	r3, r0
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f258:	f7f2 ffb0 	bl	80021bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800f25c:	490f      	ldr	r1, [pc, #60]	@ (800f29c <MX_USB_DEVICE_Init+0x58>)
 800f25e:	480e      	ldr	r0, [pc, #56]	@ (800f298 <MX_USB_DEVICE_Init+0x54>)
 800f260:	f7fa fe11 	bl	8009e86 <USBD_RegisterClass>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f26a:	f7f2 ffa7 	bl	80021bc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800f26e:	490c      	ldr	r1, [pc, #48]	@ (800f2a0 <MX_USB_DEVICE_Init+0x5c>)
 800f270:	4809      	ldr	r0, [pc, #36]	@ (800f298 <MX_USB_DEVICE_Init+0x54>)
 800f272:	f7f8 ffcd 	bl	8008210 <USBD_MSC_RegisterStorage>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f27c:	f7f2 ff9e 	bl	80021bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f280:	4805      	ldr	r0, [pc, #20]	@ (800f298 <MX_USB_DEVICE_Init+0x54>)
 800f282:	f7fa fe36 	bl	8009ef2 <USBD_Start>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d001      	beq.n	800f290 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f28c:	f7f2 ff96 	bl	80021bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f290:	bf00      	nop
 800f292:	bd80      	pop	{r7, pc}
 800f294:	200000a4 	.word	0x200000a4
 800f298:	20004124 	.word	0x20004124
 800f29c:	20000024 	.word	0x20000024
 800f2a0:	200000f4 	.word	0x200000f4

0800f2a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b083      	sub	sp, #12
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	6039      	str	r1, [r7, #0]
 800f2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	2212      	movs	r2, #18
 800f2b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f2b6:	4b03      	ldr	r3, [pc, #12]	@ (800f2c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr
 800f2c4:	200000c0 	.word	0x200000c0

0800f2c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	6039      	str	r1, [r7, #0]
 800f2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2204      	movs	r2, #4
 800f2d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f2da:	4b03      	ldr	r3, [pc, #12]	@ (800f2e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	370c      	adds	r7, #12
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e6:	4770      	bx	lr
 800f2e8:	200000d4 	.word	0x200000d4

0800f2ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	6039      	str	r1, [r7, #0]
 800f2f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f2f8:	79fb      	ldrb	r3, [r7, #7]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d105      	bne.n	800f30a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	4907      	ldr	r1, [pc, #28]	@ (800f320 <USBD_FS_ProductStrDescriptor+0x34>)
 800f302:	4808      	ldr	r0, [pc, #32]	@ (800f324 <USBD_FS_ProductStrDescriptor+0x38>)
 800f304:	f7fb ffba 	bl	800b27c <USBD_GetString>
 800f308:	e004      	b.n	800f314 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f30a:	683a      	ldr	r2, [r7, #0]
 800f30c:	4904      	ldr	r1, [pc, #16]	@ (800f320 <USBD_FS_ProductStrDescriptor+0x34>)
 800f30e:	4805      	ldr	r0, [pc, #20]	@ (800f324 <USBD_FS_ProductStrDescriptor+0x38>)
 800f310:	f7fb ffb4 	bl	800b27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f314:	4b02      	ldr	r3, [pc, #8]	@ (800f320 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f316:	4618      	mov	r0, r3
 800f318:	3708      	adds	r7, #8
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	20004400 	.word	0x20004400
 800f324:	08010a0c 	.word	0x08010a0c

0800f328 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	4603      	mov	r3, r0
 800f330:	6039      	str	r1, [r7, #0]
 800f332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	4904      	ldr	r1, [pc, #16]	@ (800f348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f338:	4804      	ldr	r0, [pc, #16]	@ (800f34c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f33a:	f7fb ff9f 	bl	800b27c <USBD_GetString>
  return USBD_StrDesc;
 800f33e:	4b02      	ldr	r3, [pc, #8]	@ (800f348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	20004400 	.word	0x20004400
 800f34c:	08010a20 	.word	0x08010a20

0800f350 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	4603      	mov	r3, r0
 800f358:	6039      	str	r1, [r7, #0]
 800f35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	221a      	movs	r2, #26
 800f360:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f362:	f000 f843 	bl	800f3ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f366:	4b02      	ldr	r3, [pc, #8]	@ (800f370 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}
 800f370:	200000d8 	.word	0x200000d8

0800f374 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	4603      	mov	r3, r0
 800f37c:	6039      	str	r1, [r7, #0]
 800f37e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f380:	79fb      	ldrb	r3, [r7, #7]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d105      	bne.n	800f392 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	4907      	ldr	r1, [pc, #28]	@ (800f3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f38a:	4808      	ldr	r0, [pc, #32]	@ (800f3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800f38c:	f7fb ff76 	bl	800b27c <USBD_GetString>
 800f390:	e004      	b.n	800f39c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	4904      	ldr	r1, [pc, #16]	@ (800f3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f396:	4805      	ldr	r0, [pc, #20]	@ (800f3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800f398:	f7fb ff70 	bl	800b27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f39c:	4b02      	ldr	r3, [pc, #8]	@ (800f3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	20004400 	.word	0x20004400
 800f3ac:	08010a34 	.word	0x08010a34

0800f3b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	6039      	str	r1, [r7, #0]
 800f3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3bc:	79fb      	ldrb	r3, [r7, #7]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d105      	bne.n	800f3ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3c2:	683a      	ldr	r2, [r7, #0]
 800f3c4:	4907      	ldr	r1, [pc, #28]	@ (800f3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3c6:	4808      	ldr	r0, [pc, #32]	@ (800f3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3c8:	f7fb ff58 	bl	800b27c <USBD_GetString>
 800f3cc:	e004      	b.n	800f3d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	4904      	ldr	r1, [pc, #16]	@ (800f3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f3d2:	4805      	ldr	r0, [pc, #20]	@ (800f3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f3d4:	f7fb ff52 	bl	800b27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3d8:	4b02      	ldr	r3, [pc, #8]	@ (800f3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3708      	adds	r7, #8
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20004400 	.word	0x20004400
 800f3e8:	08010a40 	.word	0x08010a40

0800f3ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f3f2:	4b0f      	ldr	r3, [pc, #60]	@ (800f430 <Get_SerialNum+0x44>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f434 <Get_SerialNum+0x48>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f3fe:	4b0e      	ldr	r3, [pc, #56]	@ (800f438 <Get_SerialNum+0x4c>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4413      	add	r3, r2
 800f40a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d009      	beq.n	800f426 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f412:	2208      	movs	r2, #8
 800f414:	4909      	ldr	r1, [pc, #36]	@ (800f43c <Get_SerialNum+0x50>)
 800f416:	68f8      	ldr	r0, [r7, #12]
 800f418:	f000 f814 	bl	800f444 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f41c:	2204      	movs	r2, #4
 800f41e:	4908      	ldr	r1, [pc, #32]	@ (800f440 <Get_SerialNum+0x54>)
 800f420:	68b8      	ldr	r0, [r7, #8]
 800f422:	f000 f80f 	bl	800f444 <IntToUnicode>
  }
}
 800f426:	bf00      	nop
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	1fff7a10 	.word	0x1fff7a10
 800f434:	1fff7a14 	.word	0x1fff7a14
 800f438:	1fff7a18 	.word	0x1fff7a18
 800f43c:	200000da 	.word	0x200000da
 800f440:	200000ea 	.word	0x200000ea

0800f444 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	4613      	mov	r3, r2
 800f450:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f452:	2300      	movs	r3, #0
 800f454:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f456:	2300      	movs	r3, #0
 800f458:	75fb      	strb	r3, [r7, #23]
 800f45a:	e027      	b.n	800f4ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	0f1b      	lsrs	r3, r3, #28
 800f460:	2b09      	cmp	r3, #9
 800f462:	d80b      	bhi.n	800f47c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	0f1b      	lsrs	r3, r3, #28
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	7dfb      	ldrb	r3, [r7, #23]
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	4619      	mov	r1, r3
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	440b      	add	r3, r1
 800f474:	3230      	adds	r2, #48	@ 0x30
 800f476:	b2d2      	uxtb	r2, r2
 800f478:	701a      	strb	r2, [r3, #0]
 800f47a:	e00a      	b.n	800f492 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	0f1b      	lsrs	r3, r3, #28
 800f480:	b2da      	uxtb	r2, r3
 800f482:	7dfb      	ldrb	r3, [r7, #23]
 800f484:	005b      	lsls	r3, r3, #1
 800f486:	4619      	mov	r1, r3
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	440b      	add	r3, r1
 800f48c:	3237      	adds	r2, #55	@ 0x37
 800f48e:	b2d2      	uxtb	r2, r2
 800f490:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	011b      	lsls	r3, r3, #4
 800f496:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f498:	7dfb      	ldrb	r3, [r7, #23]
 800f49a:	005b      	lsls	r3, r3, #1
 800f49c:	3301      	adds	r3, #1
 800f49e:	68ba      	ldr	r2, [r7, #8]
 800f4a0:	4413      	add	r3, r2
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f4a6:	7dfb      	ldrb	r3, [r7, #23]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	75fb      	strb	r3, [r7, #23]
 800f4ac:	7dfa      	ldrb	r2, [r7, #23]
 800f4ae:	79fb      	ldrb	r3, [r7, #7]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d3d3      	bcc.n	800f45c <IntToUnicode+0x18>
  }
}
 800f4b4:	bf00      	nop
 800f4b6:	bf00      	nop
 800f4b8:	371c      	adds	r7, #28
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c0:	4770      	bx	lr

0800f4c2 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800f4c2:	b480      	push	{r7}
 800f4c4:	b083      	sub	sp, #12
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800f4cc:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	370c      	adds	r7, #12
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800f4da:	b480      	push	{r7}
 800f4dc:	b085      	sub	sp, #20
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	60b9      	str	r1, [r7, #8]
 800f4e4:	607a      	str	r2, [r7, #4]
 800f4e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800f4ee:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f4f6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800f4f8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3714      	adds	r7, #20
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr

0800f506 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800f506:	b480      	push	{r7}
 800f508:	b083      	sub	sp, #12
 800f50a:	af00      	add	r7, sp, #0
 800f50c:	4603      	mov	r3, r0
 800f50e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800f510:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f512:	4618      	mov	r0, r3
 800f514:	370c      	adds	r7, #12
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800f51e:	b480      	push	{r7}
 800f520:	b083      	sub	sp, #12
 800f522:	af00      	add	r7, sp, #0
 800f524:	4603      	mov	r3, r0
 800f526:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800f528:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f52a:	4618      	mov	r0, r3
 800f52c:	370c      	adds	r7, #12
 800f52e:	46bd      	mov	sp, r7
 800f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f534:	4770      	bx	lr

0800f536 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f536:	b480      	push	{r7}
 800f538:	b085      	sub	sp, #20
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	60b9      	str	r1, [r7, #8]
 800f53e:	607a      	str	r2, [r7, #4]
 800f540:	461a      	mov	r2, r3
 800f542:	4603      	mov	r3, r0
 800f544:	73fb      	strb	r3, [r7, #15]
 800f546:	4613      	mov	r3, r2
 800f548:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800f54a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3714      	adds	r7, #20
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800f558:	b480      	push	{r7}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60b9      	str	r1, [r7, #8]
 800f560:	607a      	str	r2, [r7, #4]
 800f562:	461a      	mov	r2, r3
 800f564:	4603      	mov	r3, r0
 800f566:	73fb      	strb	r3, [r7, #15]
 800f568:	4613      	mov	r3, r2
 800f56a:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800f56c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3714      	adds	r7, #20
 800f572:	46bd      	mov	sp, r7
 800f574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f578:	4770      	bx	lr

0800f57a <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800f57a:	b480      	push	{r7}
 800f57c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800f57e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800f580:	4618      	mov	r0, r3
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
	...

0800f58c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b08a      	sub	sp, #40	@ 0x28
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f594:	f107 0314 	add.w	r3, r7, #20
 800f598:	2200      	movs	r2, #0
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	605a      	str	r2, [r3, #4]
 800f59e:	609a      	str	r2, [r3, #8]
 800f5a0:	60da      	str	r2, [r3, #12]
 800f5a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f5ac:	d13a      	bne.n	800f624 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	613b      	str	r3, [r7, #16]
 800f5b2:	4b1e      	ldr	r3, [pc, #120]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5b6:	4a1d      	ldr	r2, [pc, #116]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f5b8:	f043 0301 	orr.w	r3, r3, #1
 800f5bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800f5be:	4b1b      	ldr	r3, [pc, #108]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f5c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5c2:	f003 0301 	and.w	r3, r3, #1
 800f5c6:	613b      	str	r3, [r7, #16]
 800f5c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f5ca:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f5ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5d0:	2302      	movs	r3, #2
 800f5d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5d8:	2303      	movs	r3, #3
 800f5da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f5dc:	230a      	movs	r3, #10
 800f5de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f5e0:	f107 0314 	add.w	r3, r7, #20
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	4812      	ldr	r0, [pc, #72]	@ (800f630 <HAL_PCD_MspInit+0xa4>)
 800f5e8:	f7f3 f9f2 	bl	80029d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f5ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f5ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5f0:	4a0e      	ldr	r2, [pc, #56]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f5f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5f6:	6353      	str	r3, [r2, #52]	@ 0x34
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	60fb      	str	r3, [r7, #12]
 800f5fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f5fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f600:	4a0a      	ldr	r2, [pc, #40]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f606:	6453      	str	r3, [r2, #68]	@ 0x44
 800f608:	4b08      	ldr	r3, [pc, #32]	@ (800f62c <HAL_PCD_MspInit+0xa0>)
 800f60a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f60c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f610:	60fb      	str	r3, [r7, #12]
 800f612:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f614:	2200      	movs	r2, #0
 800f616:	2100      	movs	r1, #0
 800f618:	2043      	movs	r0, #67	@ 0x43
 800f61a:	f7f3 f910 	bl	800283e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f61e:	2043      	movs	r0, #67	@ 0x43
 800f620:	f7f3 f929 	bl	8002876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f624:	bf00      	nop
 800f626:	3728      	adds	r7, #40	@ 0x28
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	40023800 	.word	0x40023800
 800f630:	40020000 	.word	0x40020000

0800f634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f648:	4619      	mov	r1, r3
 800f64a:	4610      	mov	r0, r2
 800f64c:	f7fa fc9e 	bl	8009f8c <USBD_LL_SetupStage>
}
 800f650:	bf00      	nop
 800f652:	3708      	adds	r7, #8
 800f654:	46bd      	mov	sp, r7
 800f656:	bd80      	pop	{r7, pc}

0800f658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	460b      	mov	r3, r1
 800f662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f66a:	78fa      	ldrb	r2, [r7, #3]
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	4613      	mov	r3, r2
 800f670:	00db      	lsls	r3, r3, #3
 800f672:	4413      	add	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	440b      	add	r3, r1
 800f678:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	78fb      	ldrb	r3, [r7, #3]
 800f680:	4619      	mov	r1, r3
 800f682:	f7fa fcd8 	bl	800a036 <USBD_LL_DataOutStage>
}
 800f686:	bf00      	nop
 800f688:	3708      	adds	r7, #8
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b082      	sub	sp, #8
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	460b      	mov	r3, r1
 800f698:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f6a0:	78fa      	ldrb	r2, [r7, #3]
 800f6a2:	6879      	ldr	r1, [r7, #4]
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	00db      	lsls	r3, r3, #3
 800f6a8:	4413      	add	r3, r2
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	440b      	add	r3, r1
 800f6ae:	3320      	adds	r3, #32
 800f6b0:	681a      	ldr	r2, [r3, #0]
 800f6b2:	78fb      	ldrb	r3, [r7, #3]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	f7fa fd7a 	bl	800a1ae <USBD_LL_DataInStage>
}
 800f6ba:	bf00      	nop
 800f6bc:	3708      	adds	r7, #8
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b082      	sub	sp, #8
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fa febe 	bl	800a452 <USBD_LL_SOF>
}
 800f6d6:	bf00      	nop
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6de:	b580      	push	{r7, lr}
 800f6e0:	b084      	sub	sp, #16
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	79db      	ldrb	r3, [r3, #7]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d102      	bne.n	800f6f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	73fb      	strb	r3, [r7, #15]
 800f6f6:	e008      	b.n	800f70a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	79db      	ldrb	r3, [r3, #7]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d102      	bne.n	800f706 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f700:	2301      	movs	r3, #1
 800f702:	73fb      	strb	r3, [r7, #15]
 800f704:	e001      	b.n	800f70a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f706:	f7f2 fd59 	bl	80021bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f710:	7bfa      	ldrb	r2, [r7, #15]
 800f712:	4611      	mov	r1, r2
 800f714:	4618      	mov	r0, r3
 800f716:	f7fa fe58 	bl	800a3ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f720:	4618      	mov	r0, r3
 800f722:	f7fa fdff 	bl	800a324 <USBD_LL_Reset>
}
 800f726:	bf00      	nop
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}
	...

0800f730 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fa fe53 	bl	800a3ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	687a      	ldr	r2, [r7, #4]
 800f750:	6812      	ldr	r2, [r2, #0]
 800f752:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f756:	f043 0301 	orr.w	r3, r3, #1
 800f75a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	7adb      	ldrb	r3, [r3, #11]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d005      	beq.n	800f770 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f764:	4b04      	ldr	r3, [pc, #16]	@ (800f778 <HAL_PCD_SuspendCallback+0x48>)
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	4a03      	ldr	r2, [pc, #12]	@ (800f778 <HAL_PCD_SuspendCallback+0x48>)
 800f76a:	f043 0306 	orr.w	r3, r3, #6
 800f76e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f770:	bf00      	nop
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	e000ed00 	.word	0xe000ed00

0800f77c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fa fe49 	bl	800a422 <USBD_LL_Resume>
}
 800f790:	bf00      	nop
 800f792:	3708      	adds	r7, #8
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}

0800f798 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f7aa:	78fa      	ldrb	r2, [r7, #3]
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fa fea1 	bl	800a4f6 <USBD_LL_IsoOUTIncomplete>
}
 800f7b4:	bf00      	nop
 800f7b6:	3708      	adds	r7, #8
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
 800f7c4:	460b      	mov	r3, r1
 800f7c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f7ce:	78fa      	ldrb	r2, [r7, #3]
 800f7d0:	4611      	mov	r1, r2
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f7fa fe5d 	bl	800a492 <USBD_LL_IsoINIncomplete>
}
 800f7d8:	bf00      	nop
 800f7da:	3708      	adds	r7, #8
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fa feb3 	bl	800a55a <USBD_LL_DevConnected>
}
 800f7f4:	bf00      	nop
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b082      	sub	sp, #8
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7fa feb0 	bl	800a570 <USBD_LL_DevDisconnected>
}
 800f810:	bf00      	nop
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}

0800f818 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d13c      	bne.n	800f8a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f828:	4a20      	ldr	r2, [pc, #128]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4a1e      	ldr	r2, [pc, #120]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f834:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f838:	4b1c      	ldr	r3, [pc, #112]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f83a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f83e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f840:	4b1a      	ldr	r3, [pc, #104]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f842:	2204      	movs	r2, #4
 800f844:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f846:	4b19      	ldr	r3, [pc, #100]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f848:	2202      	movs	r2, #2
 800f84a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f84c:	4b17      	ldr	r3, [pc, #92]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f84e:	2200      	movs	r2, #0
 800f850:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f852:	4b16      	ldr	r3, [pc, #88]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f854:	2202      	movs	r2, #2
 800f856:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f858:	4b14      	ldr	r3, [pc, #80]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f85e:	4b13      	ldr	r3, [pc, #76]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f860:	2200      	movs	r2, #0
 800f862:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f864:	4b11      	ldr	r3, [pc, #68]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f866:	2200      	movs	r2, #0
 800f868:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f86a:	4b10      	ldr	r3, [pc, #64]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f870:	4b0e      	ldr	r3, [pc, #56]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f872:	2200      	movs	r2, #0
 800f874:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f876:	480d      	ldr	r0, [pc, #52]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f878:	f7f3 fa6f 	bl	8002d5a <HAL_PCD_Init>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d001      	beq.n	800f886 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f882:	f7f2 fc9b 	bl	80021bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f886:	2180      	movs	r1, #128	@ 0x80
 800f888:	4808      	ldr	r0, [pc, #32]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f88a:	f7f4 fcc8 	bl	800421e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f88e:	2240      	movs	r2, #64	@ 0x40
 800f890:	2100      	movs	r1, #0
 800f892:	4806      	ldr	r0, [pc, #24]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f894:	f7f4 fc7c 	bl	8004190 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f898:	2280      	movs	r2, #128	@ 0x80
 800f89a:	2101      	movs	r1, #1
 800f89c:	4803      	ldr	r0, [pc, #12]	@ (800f8ac <USBD_LL_Init+0x94>)
 800f89e:	f7f4 fc77 	bl	8004190 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3708      	adds	r7, #8
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}
 800f8ac:	20004600 	.word	0x20004600

0800f8b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8bc:	2300      	movs	r3, #0
 800f8be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f7f3 fb56 	bl	8002f78 <HAL_PCD_Start>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f8d0:	7bfb      	ldrb	r3, [r7, #15]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 f962 	bl	800fb9c <USBD_Get_USB_Status>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b084      	sub	sp, #16
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	4608      	mov	r0, r1
 800f8f0:	4611      	mov	r1, r2
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	70fb      	strb	r3, [r7, #3]
 800f8f8:	460b      	mov	r3, r1
 800f8fa:	70bb      	strb	r3, [r7, #2]
 800f8fc:	4613      	mov	r3, r2
 800f8fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f900:	2300      	movs	r3, #0
 800f902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f90e:	78bb      	ldrb	r3, [r7, #2]
 800f910:	883a      	ldrh	r2, [r7, #0]
 800f912:	78f9      	ldrb	r1, [r7, #3]
 800f914:	f7f4 f82a 	bl	800396c <HAL_PCD_EP_Open>
 800f918:	4603      	mov	r3, r0
 800f91a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f91c:	7bfb      	ldrb	r3, [r7, #15]
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 f93c 	bl	800fb9c <USBD_Get_USB_Status>
 800f924:	4603      	mov	r3, r0
 800f926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f928:	7bbb      	ldrb	r3, [r7, #14]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b084      	sub	sp, #16
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	460b      	mov	r3, r1
 800f93c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f93e:	2300      	movs	r3, #0
 800f940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f942:	2300      	movs	r3, #0
 800f944:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f94c:	78fa      	ldrb	r2, [r7, #3]
 800f94e:	4611      	mov	r1, r2
 800f950:	4618      	mov	r0, r3
 800f952:	f7f4 f875 	bl	8003a40 <HAL_PCD_EP_Close>
 800f956:	4603      	mov	r3, r0
 800f958:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f95a:	7bfb      	ldrb	r3, [r7, #15]
 800f95c:	4618      	mov	r0, r3
 800f95e:	f000 f91d 	bl	800fb9c <USBD_Get_USB_Status>
 800f962:	4603      	mov	r3, r0
 800f964:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f966:	7bbb      	ldrb	r3, [r7, #14]
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3710      	adds	r7, #16
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	460b      	mov	r3, r1
 800f97a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f97c:	2300      	movs	r3, #0
 800f97e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f980:	2300      	movs	r3, #0
 800f982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f98a:	78fa      	ldrb	r2, [r7, #3]
 800f98c:	4611      	mov	r1, r2
 800f98e:	4618      	mov	r0, r3
 800f990:	f7f4 fa17 	bl	8003dc2 <HAL_PCD_EP_Flush>
 800f994:	4603      	mov	r3, r0
 800f996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f000 f8fe 	bl	800fb9c <USBD_Get_USB_Status>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}

0800f9ae <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9ae:	b580      	push	{r7, lr}
 800f9b0:	b084      	sub	sp, #16
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
 800f9b6:	460b      	mov	r3, r1
 800f9b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f9c8:	78fa      	ldrb	r2, [r7, #3]
 800f9ca:	4611      	mov	r1, r2
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7f4 f90e 	bl	8003bee <HAL_PCD_EP_SetStall>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f000 f8df 	bl	800fb9c <USBD_Get_USB_Status>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa06:	78fa      	ldrb	r2, [r7, #3]
 800fa08:	4611      	mov	r1, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f7f4 f952 	bl	8003cb4 <HAL_PCD_EP_ClrStall>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa14:	7bfb      	ldrb	r3, [r7, #15]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f000 f8c0 	bl	800fb9c <USBD_Get_USB_Status>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3710      	adds	r7, #16
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bd80      	pop	{r7, pc}

0800fa2a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa2a:	b480      	push	{r7}
 800fa2c:	b085      	sub	sp, #20
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
 800fa32:	460b      	mov	r3, r1
 800fa34:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa3c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	da0b      	bge.n	800fa5e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa46:	78fb      	ldrb	r3, [r7, #3]
 800fa48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa4c:	68f9      	ldr	r1, [r7, #12]
 800fa4e:	4613      	mov	r3, r2
 800fa50:	00db      	lsls	r3, r3, #3
 800fa52:	4413      	add	r3, r2
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	440b      	add	r3, r1
 800fa58:	3316      	adds	r3, #22
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	e00b      	b.n	800fa76 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa5e:	78fb      	ldrb	r3, [r7, #3]
 800fa60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa64:	68f9      	ldr	r1, [r7, #12]
 800fa66:	4613      	mov	r3, r2
 800fa68:	00db      	lsls	r3, r3, #3
 800fa6a:	4413      	add	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	440b      	add	r3, r1
 800fa70:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800fa74:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3714      	adds	r7, #20
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b084      	sub	sp, #16
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	460b      	mov	r3, r1
 800fa8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa92:	2300      	movs	r3, #0
 800fa94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa9c:	78fa      	ldrb	r2, [r7, #3]
 800fa9e:	4611      	mov	r1, r2
 800faa0:	4618      	mov	r0, r3
 800faa2:	f7f3 ff3f 	bl	8003924 <HAL_PCD_SetAddress>
 800faa6:	4603      	mov	r3, r0
 800faa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faaa:	7bfb      	ldrb	r3, [r7, #15]
 800faac:	4618      	mov	r0, r3
 800faae:	f000 f875 	bl	800fb9c <USBD_Get_USB_Status>
 800fab2:	4603      	mov	r3, r0
 800fab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3710      	adds	r7, #16
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	607a      	str	r2, [r7, #4]
 800faca:	603b      	str	r3, [r7, #0]
 800facc:	460b      	mov	r3, r1
 800face:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fad0:	2300      	movs	r3, #0
 800fad2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fad4:	2300      	movs	r3, #0
 800fad6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fade:	7af9      	ldrb	r1, [r7, #11]
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	f7f4 f849 	bl	8003b7a <HAL_PCD_EP_Transmit>
 800fae8:	4603      	mov	r3, r0
 800faea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faec:	7dfb      	ldrb	r3, [r7, #23]
 800faee:	4618      	mov	r0, r3
 800faf0:	f000 f854 	bl	800fb9c <USBD_Get_USB_Status>
 800faf4:	4603      	mov	r3, r0
 800faf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800faf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800fafa:	4618      	mov	r0, r3
 800fafc:	3718      	adds	r7, #24
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}

0800fb02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b086      	sub	sp, #24
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	60f8      	str	r0, [r7, #12]
 800fb0a:	607a      	str	r2, [r7, #4]
 800fb0c:	603b      	str	r3, [r7, #0]
 800fb0e:	460b      	mov	r3, r1
 800fb10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800fb20:	7af9      	ldrb	r1, [r7, #11]
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	f7f3 ffd5 	bl	8003ad4 <HAL_PCD_EP_Receive>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	4618      	mov	r0, r3
 800fb32:	f000 f833 	bl	800fb9c <USBD_Get_USB_Status>
 800fb36:	4603      	mov	r3, r0
 800fb38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3718      	adds	r7, #24
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
 800fb4c:	460b      	mov	r3, r1
 800fb4e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb56:	78fa      	ldrb	r2, [r7, #3]
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7f3 fff5 	bl	8003b4a <HAL_PCD_EP_GetRxCount>
 800fb60:	4603      	mov	r3, r0
}
 800fb62:	4618      	mov	r0, r3
 800fb64:	3708      	adds	r7, #8
 800fb66:	46bd      	mov	sp, r7
 800fb68:	bd80      	pop	{r7, pc}
	...

0800fb6c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fb74:	4b03      	ldr	r3, [pc, #12]	@ (800fb84 <USBD_static_malloc+0x18>)
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	370c      	adds	r7, #12
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	20004ae4 	.word	0x20004ae4

0800fb88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]

}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b085      	sub	sp, #20
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	4603      	mov	r3, r0
 800fba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba6:	2300      	movs	r3, #0
 800fba8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fbaa:	79fb      	ldrb	r3, [r7, #7]
 800fbac:	2b03      	cmp	r3, #3
 800fbae:	d817      	bhi.n	800fbe0 <USBD_Get_USB_Status+0x44>
 800fbb0:	a201      	add	r2, pc, #4	@ (adr r2, 800fbb8 <USBD_Get_USB_Status+0x1c>)
 800fbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb6:	bf00      	nop
 800fbb8:	0800fbc9 	.word	0x0800fbc9
 800fbbc:	0800fbcf 	.word	0x0800fbcf
 800fbc0:	0800fbd5 	.word	0x0800fbd5
 800fbc4:	0800fbdb 	.word	0x0800fbdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	73fb      	strb	r3, [r7, #15]
    break;
 800fbcc:	e00b      	b.n	800fbe6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbce:	2303      	movs	r3, #3
 800fbd0:	73fb      	strb	r3, [r7, #15]
    break;
 800fbd2:	e008      	b.n	800fbe6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbd8:	e005      	b.n	800fbe6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbda:	2303      	movs	r3, #3
 800fbdc:	73fb      	strb	r3, [r7, #15]
    break;
 800fbde:	e002      	b.n	800fbe6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe4:	bf00      	nop
  }
  return usb_status;
 800fbe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3714      	adds	r7, #20
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <sniprintf>:
 800fbf4:	b40c      	push	{r2, r3}
 800fbf6:	b530      	push	{r4, r5, lr}
 800fbf8:	4b17      	ldr	r3, [pc, #92]	@ (800fc58 <sniprintf+0x64>)
 800fbfa:	1e0c      	subs	r4, r1, #0
 800fbfc:	681d      	ldr	r5, [r3, #0]
 800fbfe:	b09d      	sub	sp, #116	@ 0x74
 800fc00:	da08      	bge.n	800fc14 <sniprintf+0x20>
 800fc02:	238b      	movs	r3, #139	@ 0x8b
 800fc04:	602b      	str	r3, [r5, #0]
 800fc06:	f04f 30ff 	mov.w	r0, #4294967295
 800fc0a:	b01d      	add	sp, #116	@ 0x74
 800fc0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc10:	b002      	add	sp, #8
 800fc12:	4770      	bx	lr
 800fc14:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fc18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fc1c:	bf14      	ite	ne
 800fc1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fc22:	4623      	moveq	r3, r4
 800fc24:	9304      	str	r3, [sp, #16]
 800fc26:	9307      	str	r3, [sp, #28]
 800fc28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc2c:	9002      	str	r0, [sp, #8]
 800fc2e:	9006      	str	r0, [sp, #24]
 800fc30:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fc34:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fc36:	ab21      	add	r3, sp, #132	@ 0x84
 800fc38:	a902      	add	r1, sp, #8
 800fc3a:	4628      	mov	r0, r5
 800fc3c:	9301      	str	r3, [sp, #4]
 800fc3e:	f000 f9cd 	bl	800ffdc <_svfiprintf_r>
 800fc42:	1c43      	adds	r3, r0, #1
 800fc44:	bfbc      	itt	lt
 800fc46:	238b      	movlt	r3, #139	@ 0x8b
 800fc48:	602b      	strlt	r3, [r5, #0]
 800fc4a:	2c00      	cmp	r4, #0
 800fc4c:	d0dd      	beq.n	800fc0a <sniprintf+0x16>
 800fc4e:	9b02      	ldr	r3, [sp, #8]
 800fc50:	2200      	movs	r2, #0
 800fc52:	701a      	strb	r2, [r3, #0]
 800fc54:	e7d9      	b.n	800fc0a <sniprintf+0x16>
 800fc56:	bf00      	nop
 800fc58:	20000114 	.word	0x20000114

0800fc5c <siprintf>:
 800fc5c:	b40e      	push	{r1, r2, r3}
 800fc5e:	b500      	push	{lr}
 800fc60:	b09c      	sub	sp, #112	@ 0x70
 800fc62:	ab1d      	add	r3, sp, #116	@ 0x74
 800fc64:	9002      	str	r0, [sp, #8]
 800fc66:	9006      	str	r0, [sp, #24]
 800fc68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fc6c:	4809      	ldr	r0, [pc, #36]	@ (800fc94 <siprintf+0x38>)
 800fc6e:	9107      	str	r1, [sp, #28]
 800fc70:	9104      	str	r1, [sp, #16]
 800fc72:	4909      	ldr	r1, [pc, #36]	@ (800fc98 <siprintf+0x3c>)
 800fc74:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc78:	9105      	str	r1, [sp, #20]
 800fc7a:	6800      	ldr	r0, [r0, #0]
 800fc7c:	9301      	str	r3, [sp, #4]
 800fc7e:	a902      	add	r1, sp, #8
 800fc80:	f000 f9ac 	bl	800ffdc <_svfiprintf_r>
 800fc84:	9b02      	ldr	r3, [sp, #8]
 800fc86:	2200      	movs	r2, #0
 800fc88:	701a      	strb	r2, [r3, #0]
 800fc8a:	b01c      	add	sp, #112	@ 0x70
 800fc8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fc90:	b003      	add	sp, #12
 800fc92:	4770      	bx	lr
 800fc94:	20000114 	.word	0x20000114
 800fc98:	ffff0208 	.word	0xffff0208

0800fc9c <memset>:
 800fc9c:	4402      	add	r2, r0
 800fc9e:	4603      	mov	r3, r0
 800fca0:	4293      	cmp	r3, r2
 800fca2:	d100      	bne.n	800fca6 <memset+0xa>
 800fca4:	4770      	bx	lr
 800fca6:	f803 1b01 	strb.w	r1, [r3], #1
 800fcaa:	e7f9      	b.n	800fca0 <memset+0x4>

0800fcac <strcat>:
 800fcac:	b510      	push	{r4, lr}
 800fcae:	4602      	mov	r2, r0
 800fcb0:	7814      	ldrb	r4, [r2, #0]
 800fcb2:	4613      	mov	r3, r2
 800fcb4:	3201      	adds	r2, #1
 800fcb6:	2c00      	cmp	r4, #0
 800fcb8:	d1fa      	bne.n	800fcb0 <strcat+0x4>
 800fcba:	3b01      	subs	r3, #1
 800fcbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fcc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fcc4:	2a00      	cmp	r2, #0
 800fcc6:	d1f9      	bne.n	800fcbc <strcat+0x10>
 800fcc8:	bd10      	pop	{r4, pc}
	...

0800fccc <__errno>:
 800fccc:	4b01      	ldr	r3, [pc, #4]	@ (800fcd4 <__errno+0x8>)
 800fcce:	6818      	ldr	r0, [r3, #0]
 800fcd0:	4770      	bx	lr
 800fcd2:	bf00      	nop
 800fcd4:	20000114 	.word	0x20000114

0800fcd8 <__libc_init_array>:
 800fcd8:	b570      	push	{r4, r5, r6, lr}
 800fcda:	4d0d      	ldr	r5, [pc, #52]	@ (800fd10 <__libc_init_array+0x38>)
 800fcdc:	4c0d      	ldr	r4, [pc, #52]	@ (800fd14 <__libc_init_array+0x3c>)
 800fcde:	1b64      	subs	r4, r4, r5
 800fce0:	10a4      	asrs	r4, r4, #2
 800fce2:	2600      	movs	r6, #0
 800fce4:	42a6      	cmp	r6, r4
 800fce6:	d109      	bne.n	800fcfc <__libc_init_array+0x24>
 800fce8:	4d0b      	ldr	r5, [pc, #44]	@ (800fd18 <__libc_init_array+0x40>)
 800fcea:	4c0c      	ldr	r4, [pc, #48]	@ (800fd1c <__libc_init_array+0x44>)
 800fcec:	f000 fc6e 	bl	80105cc <_init>
 800fcf0:	1b64      	subs	r4, r4, r5
 800fcf2:	10a4      	asrs	r4, r4, #2
 800fcf4:	2600      	movs	r6, #0
 800fcf6:	42a6      	cmp	r6, r4
 800fcf8:	d105      	bne.n	800fd06 <__libc_init_array+0x2e>
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}
 800fcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd00:	4798      	blx	r3
 800fd02:	3601      	adds	r6, #1
 800fd04:	e7ee      	b.n	800fce4 <__libc_init_array+0xc>
 800fd06:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd0a:	4798      	blx	r3
 800fd0c:	3601      	adds	r6, #1
 800fd0e:	e7f2      	b.n	800fcf6 <__libc_init_array+0x1e>
 800fd10:	08010f08 	.word	0x08010f08
 800fd14:	08010f08 	.word	0x08010f08
 800fd18:	08010f08 	.word	0x08010f08
 800fd1c:	08010f0c 	.word	0x08010f0c

0800fd20 <__retarget_lock_acquire_recursive>:
 800fd20:	4770      	bx	lr

0800fd22 <__retarget_lock_release_recursive>:
 800fd22:	4770      	bx	lr

0800fd24 <strcpy>:
 800fd24:	4603      	mov	r3, r0
 800fd26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd2a:	f803 2b01 	strb.w	r2, [r3], #1
 800fd2e:	2a00      	cmp	r2, #0
 800fd30:	d1f9      	bne.n	800fd26 <strcpy+0x2>
 800fd32:	4770      	bx	lr

0800fd34 <_free_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4605      	mov	r5, r0
 800fd38:	2900      	cmp	r1, #0
 800fd3a:	d041      	beq.n	800fdc0 <_free_r+0x8c>
 800fd3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd40:	1f0c      	subs	r4, r1, #4
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	bfb8      	it	lt
 800fd46:	18e4      	addlt	r4, r4, r3
 800fd48:	f000 f8e0 	bl	800ff0c <__malloc_lock>
 800fd4c:	4a1d      	ldr	r2, [pc, #116]	@ (800fdc4 <_free_r+0x90>)
 800fd4e:	6813      	ldr	r3, [r2, #0]
 800fd50:	b933      	cbnz	r3, 800fd60 <_free_r+0x2c>
 800fd52:	6063      	str	r3, [r4, #4]
 800fd54:	6014      	str	r4, [r2, #0]
 800fd56:	4628      	mov	r0, r5
 800fd58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd5c:	f000 b8dc 	b.w	800ff18 <__malloc_unlock>
 800fd60:	42a3      	cmp	r3, r4
 800fd62:	d908      	bls.n	800fd76 <_free_r+0x42>
 800fd64:	6820      	ldr	r0, [r4, #0]
 800fd66:	1821      	adds	r1, r4, r0
 800fd68:	428b      	cmp	r3, r1
 800fd6a:	bf01      	itttt	eq
 800fd6c:	6819      	ldreq	r1, [r3, #0]
 800fd6e:	685b      	ldreq	r3, [r3, #4]
 800fd70:	1809      	addeq	r1, r1, r0
 800fd72:	6021      	streq	r1, [r4, #0]
 800fd74:	e7ed      	b.n	800fd52 <_free_r+0x1e>
 800fd76:	461a      	mov	r2, r3
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	b10b      	cbz	r3, 800fd80 <_free_r+0x4c>
 800fd7c:	42a3      	cmp	r3, r4
 800fd7e:	d9fa      	bls.n	800fd76 <_free_r+0x42>
 800fd80:	6811      	ldr	r1, [r2, #0]
 800fd82:	1850      	adds	r0, r2, r1
 800fd84:	42a0      	cmp	r0, r4
 800fd86:	d10b      	bne.n	800fda0 <_free_r+0x6c>
 800fd88:	6820      	ldr	r0, [r4, #0]
 800fd8a:	4401      	add	r1, r0
 800fd8c:	1850      	adds	r0, r2, r1
 800fd8e:	4283      	cmp	r3, r0
 800fd90:	6011      	str	r1, [r2, #0]
 800fd92:	d1e0      	bne.n	800fd56 <_free_r+0x22>
 800fd94:	6818      	ldr	r0, [r3, #0]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	6053      	str	r3, [r2, #4]
 800fd9a:	4408      	add	r0, r1
 800fd9c:	6010      	str	r0, [r2, #0]
 800fd9e:	e7da      	b.n	800fd56 <_free_r+0x22>
 800fda0:	d902      	bls.n	800fda8 <_free_r+0x74>
 800fda2:	230c      	movs	r3, #12
 800fda4:	602b      	str	r3, [r5, #0]
 800fda6:	e7d6      	b.n	800fd56 <_free_r+0x22>
 800fda8:	6820      	ldr	r0, [r4, #0]
 800fdaa:	1821      	adds	r1, r4, r0
 800fdac:	428b      	cmp	r3, r1
 800fdae:	bf04      	itt	eq
 800fdb0:	6819      	ldreq	r1, [r3, #0]
 800fdb2:	685b      	ldreq	r3, [r3, #4]
 800fdb4:	6063      	str	r3, [r4, #4]
 800fdb6:	bf04      	itt	eq
 800fdb8:	1809      	addeq	r1, r1, r0
 800fdba:	6021      	streq	r1, [r4, #0]
 800fdbc:	6054      	str	r4, [r2, #4]
 800fdbe:	e7ca      	b.n	800fd56 <_free_r+0x22>
 800fdc0:	bd38      	pop	{r3, r4, r5, pc}
 800fdc2:	bf00      	nop
 800fdc4:	20004eb0 	.word	0x20004eb0

0800fdc8 <sbrk_aligned>:
 800fdc8:	b570      	push	{r4, r5, r6, lr}
 800fdca:	4e0f      	ldr	r6, [pc, #60]	@ (800fe08 <sbrk_aligned+0x40>)
 800fdcc:	460c      	mov	r4, r1
 800fdce:	6831      	ldr	r1, [r6, #0]
 800fdd0:	4605      	mov	r5, r0
 800fdd2:	b911      	cbnz	r1, 800fdda <sbrk_aligned+0x12>
 800fdd4:	f000 fba6 	bl	8010524 <_sbrk_r>
 800fdd8:	6030      	str	r0, [r6, #0]
 800fdda:	4621      	mov	r1, r4
 800fddc:	4628      	mov	r0, r5
 800fdde:	f000 fba1 	bl	8010524 <_sbrk_r>
 800fde2:	1c43      	adds	r3, r0, #1
 800fde4:	d103      	bne.n	800fdee <sbrk_aligned+0x26>
 800fde6:	f04f 34ff 	mov.w	r4, #4294967295
 800fdea:	4620      	mov	r0, r4
 800fdec:	bd70      	pop	{r4, r5, r6, pc}
 800fdee:	1cc4      	adds	r4, r0, #3
 800fdf0:	f024 0403 	bic.w	r4, r4, #3
 800fdf4:	42a0      	cmp	r0, r4
 800fdf6:	d0f8      	beq.n	800fdea <sbrk_aligned+0x22>
 800fdf8:	1a21      	subs	r1, r4, r0
 800fdfa:	4628      	mov	r0, r5
 800fdfc:	f000 fb92 	bl	8010524 <_sbrk_r>
 800fe00:	3001      	adds	r0, #1
 800fe02:	d1f2      	bne.n	800fdea <sbrk_aligned+0x22>
 800fe04:	e7ef      	b.n	800fde6 <sbrk_aligned+0x1e>
 800fe06:	bf00      	nop
 800fe08:	20004eac 	.word	0x20004eac

0800fe0c <_malloc_r>:
 800fe0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe10:	1ccd      	adds	r5, r1, #3
 800fe12:	f025 0503 	bic.w	r5, r5, #3
 800fe16:	3508      	adds	r5, #8
 800fe18:	2d0c      	cmp	r5, #12
 800fe1a:	bf38      	it	cc
 800fe1c:	250c      	movcc	r5, #12
 800fe1e:	2d00      	cmp	r5, #0
 800fe20:	4606      	mov	r6, r0
 800fe22:	db01      	blt.n	800fe28 <_malloc_r+0x1c>
 800fe24:	42a9      	cmp	r1, r5
 800fe26:	d904      	bls.n	800fe32 <_malloc_r+0x26>
 800fe28:	230c      	movs	r3, #12
 800fe2a:	6033      	str	r3, [r6, #0]
 800fe2c:	2000      	movs	r0, #0
 800fe2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ff08 <_malloc_r+0xfc>
 800fe36:	f000 f869 	bl	800ff0c <__malloc_lock>
 800fe3a:	f8d8 3000 	ldr.w	r3, [r8]
 800fe3e:	461c      	mov	r4, r3
 800fe40:	bb44      	cbnz	r4, 800fe94 <_malloc_r+0x88>
 800fe42:	4629      	mov	r1, r5
 800fe44:	4630      	mov	r0, r6
 800fe46:	f7ff ffbf 	bl	800fdc8 <sbrk_aligned>
 800fe4a:	1c43      	adds	r3, r0, #1
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	d158      	bne.n	800ff02 <_malloc_r+0xf6>
 800fe50:	f8d8 4000 	ldr.w	r4, [r8]
 800fe54:	4627      	mov	r7, r4
 800fe56:	2f00      	cmp	r7, #0
 800fe58:	d143      	bne.n	800fee2 <_malloc_r+0xd6>
 800fe5a:	2c00      	cmp	r4, #0
 800fe5c:	d04b      	beq.n	800fef6 <_malloc_r+0xea>
 800fe5e:	6823      	ldr	r3, [r4, #0]
 800fe60:	4639      	mov	r1, r7
 800fe62:	4630      	mov	r0, r6
 800fe64:	eb04 0903 	add.w	r9, r4, r3
 800fe68:	f000 fb5c 	bl	8010524 <_sbrk_r>
 800fe6c:	4581      	cmp	r9, r0
 800fe6e:	d142      	bne.n	800fef6 <_malloc_r+0xea>
 800fe70:	6821      	ldr	r1, [r4, #0]
 800fe72:	1a6d      	subs	r5, r5, r1
 800fe74:	4629      	mov	r1, r5
 800fe76:	4630      	mov	r0, r6
 800fe78:	f7ff ffa6 	bl	800fdc8 <sbrk_aligned>
 800fe7c:	3001      	adds	r0, #1
 800fe7e:	d03a      	beq.n	800fef6 <_malloc_r+0xea>
 800fe80:	6823      	ldr	r3, [r4, #0]
 800fe82:	442b      	add	r3, r5
 800fe84:	6023      	str	r3, [r4, #0]
 800fe86:	f8d8 3000 	ldr.w	r3, [r8]
 800fe8a:	685a      	ldr	r2, [r3, #4]
 800fe8c:	bb62      	cbnz	r2, 800fee8 <_malloc_r+0xdc>
 800fe8e:	f8c8 7000 	str.w	r7, [r8]
 800fe92:	e00f      	b.n	800feb4 <_malloc_r+0xa8>
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	1b52      	subs	r2, r2, r5
 800fe98:	d420      	bmi.n	800fedc <_malloc_r+0xd0>
 800fe9a:	2a0b      	cmp	r2, #11
 800fe9c:	d917      	bls.n	800fece <_malloc_r+0xc2>
 800fe9e:	1961      	adds	r1, r4, r5
 800fea0:	42a3      	cmp	r3, r4
 800fea2:	6025      	str	r5, [r4, #0]
 800fea4:	bf18      	it	ne
 800fea6:	6059      	strne	r1, [r3, #4]
 800fea8:	6863      	ldr	r3, [r4, #4]
 800feaa:	bf08      	it	eq
 800feac:	f8c8 1000 	streq.w	r1, [r8]
 800feb0:	5162      	str	r2, [r4, r5]
 800feb2:	604b      	str	r3, [r1, #4]
 800feb4:	4630      	mov	r0, r6
 800feb6:	f000 f82f 	bl	800ff18 <__malloc_unlock>
 800feba:	f104 000b 	add.w	r0, r4, #11
 800febe:	1d23      	adds	r3, r4, #4
 800fec0:	f020 0007 	bic.w	r0, r0, #7
 800fec4:	1ac2      	subs	r2, r0, r3
 800fec6:	bf1c      	itt	ne
 800fec8:	1a1b      	subne	r3, r3, r0
 800feca:	50a3      	strne	r3, [r4, r2]
 800fecc:	e7af      	b.n	800fe2e <_malloc_r+0x22>
 800fece:	6862      	ldr	r2, [r4, #4]
 800fed0:	42a3      	cmp	r3, r4
 800fed2:	bf0c      	ite	eq
 800fed4:	f8c8 2000 	streq.w	r2, [r8]
 800fed8:	605a      	strne	r2, [r3, #4]
 800feda:	e7eb      	b.n	800feb4 <_malloc_r+0xa8>
 800fedc:	4623      	mov	r3, r4
 800fede:	6864      	ldr	r4, [r4, #4]
 800fee0:	e7ae      	b.n	800fe40 <_malloc_r+0x34>
 800fee2:	463c      	mov	r4, r7
 800fee4:	687f      	ldr	r7, [r7, #4]
 800fee6:	e7b6      	b.n	800fe56 <_malloc_r+0x4a>
 800fee8:	461a      	mov	r2, r3
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	42a3      	cmp	r3, r4
 800feee:	d1fb      	bne.n	800fee8 <_malloc_r+0xdc>
 800fef0:	2300      	movs	r3, #0
 800fef2:	6053      	str	r3, [r2, #4]
 800fef4:	e7de      	b.n	800feb4 <_malloc_r+0xa8>
 800fef6:	230c      	movs	r3, #12
 800fef8:	6033      	str	r3, [r6, #0]
 800fefa:	4630      	mov	r0, r6
 800fefc:	f000 f80c 	bl	800ff18 <__malloc_unlock>
 800ff00:	e794      	b.n	800fe2c <_malloc_r+0x20>
 800ff02:	6005      	str	r5, [r0, #0]
 800ff04:	e7d6      	b.n	800feb4 <_malloc_r+0xa8>
 800ff06:	bf00      	nop
 800ff08:	20004eb0 	.word	0x20004eb0

0800ff0c <__malloc_lock>:
 800ff0c:	4801      	ldr	r0, [pc, #4]	@ (800ff14 <__malloc_lock+0x8>)
 800ff0e:	f7ff bf07 	b.w	800fd20 <__retarget_lock_acquire_recursive>
 800ff12:	bf00      	nop
 800ff14:	20004ea8 	.word	0x20004ea8

0800ff18 <__malloc_unlock>:
 800ff18:	4801      	ldr	r0, [pc, #4]	@ (800ff20 <__malloc_unlock+0x8>)
 800ff1a:	f7ff bf02 	b.w	800fd22 <__retarget_lock_release_recursive>
 800ff1e:	bf00      	nop
 800ff20:	20004ea8 	.word	0x20004ea8

0800ff24 <__ssputs_r>:
 800ff24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff28:	688e      	ldr	r6, [r1, #8]
 800ff2a:	461f      	mov	r7, r3
 800ff2c:	42be      	cmp	r6, r7
 800ff2e:	680b      	ldr	r3, [r1, #0]
 800ff30:	4682      	mov	sl, r0
 800ff32:	460c      	mov	r4, r1
 800ff34:	4690      	mov	r8, r2
 800ff36:	d82d      	bhi.n	800ff94 <__ssputs_r+0x70>
 800ff38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ff3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ff40:	d026      	beq.n	800ff90 <__ssputs_r+0x6c>
 800ff42:	6965      	ldr	r5, [r4, #20]
 800ff44:	6909      	ldr	r1, [r1, #16]
 800ff46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ff4a:	eba3 0901 	sub.w	r9, r3, r1
 800ff4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ff52:	1c7b      	adds	r3, r7, #1
 800ff54:	444b      	add	r3, r9
 800ff56:	106d      	asrs	r5, r5, #1
 800ff58:	429d      	cmp	r5, r3
 800ff5a:	bf38      	it	cc
 800ff5c:	461d      	movcc	r5, r3
 800ff5e:	0553      	lsls	r3, r2, #21
 800ff60:	d527      	bpl.n	800ffb2 <__ssputs_r+0x8e>
 800ff62:	4629      	mov	r1, r5
 800ff64:	f7ff ff52 	bl	800fe0c <_malloc_r>
 800ff68:	4606      	mov	r6, r0
 800ff6a:	b360      	cbz	r0, 800ffc6 <__ssputs_r+0xa2>
 800ff6c:	6921      	ldr	r1, [r4, #16]
 800ff6e:	464a      	mov	r2, r9
 800ff70:	f000 fae8 	bl	8010544 <memcpy>
 800ff74:	89a3      	ldrh	r3, [r4, #12]
 800ff76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ff7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff7e:	81a3      	strh	r3, [r4, #12]
 800ff80:	6126      	str	r6, [r4, #16]
 800ff82:	6165      	str	r5, [r4, #20]
 800ff84:	444e      	add	r6, r9
 800ff86:	eba5 0509 	sub.w	r5, r5, r9
 800ff8a:	6026      	str	r6, [r4, #0]
 800ff8c:	60a5      	str	r5, [r4, #8]
 800ff8e:	463e      	mov	r6, r7
 800ff90:	42be      	cmp	r6, r7
 800ff92:	d900      	bls.n	800ff96 <__ssputs_r+0x72>
 800ff94:	463e      	mov	r6, r7
 800ff96:	6820      	ldr	r0, [r4, #0]
 800ff98:	4632      	mov	r2, r6
 800ff9a:	4641      	mov	r1, r8
 800ff9c:	f000 faa8 	bl	80104f0 <memmove>
 800ffa0:	68a3      	ldr	r3, [r4, #8]
 800ffa2:	1b9b      	subs	r3, r3, r6
 800ffa4:	60a3      	str	r3, [r4, #8]
 800ffa6:	6823      	ldr	r3, [r4, #0]
 800ffa8:	4433      	add	r3, r6
 800ffaa:	6023      	str	r3, [r4, #0]
 800ffac:	2000      	movs	r0, #0
 800ffae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ffb2:	462a      	mov	r2, r5
 800ffb4:	f000 fad4 	bl	8010560 <_realloc_r>
 800ffb8:	4606      	mov	r6, r0
 800ffba:	2800      	cmp	r0, #0
 800ffbc:	d1e0      	bne.n	800ff80 <__ssputs_r+0x5c>
 800ffbe:	6921      	ldr	r1, [r4, #16]
 800ffc0:	4650      	mov	r0, sl
 800ffc2:	f7ff feb7 	bl	800fd34 <_free_r>
 800ffc6:	230c      	movs	r3, #12
 800ffc8:	f8ca 3000 	str.w	r3, [sl]
 800ffcc:	89a3      	ldrh	r3, [r4, #12]
 800ffce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffd2:	81a3      	strh	r3, [r4, #12]
 800ffd4:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd8:	e7e9      	b.n	800ffae <__ssputs_r+0x8a>
	...

0800ffdc <_svfiprintf_r>:
 800ffdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe0:	4698      	mov	r8, r3
 800ffe2:	898b      	ldrh	r3, [r1, #12]
 800ffe4:	061b      	lsls	r3, r3, #24
 800ffe6:	b09d      	sub	sp, #116	@ 0x74
 800ffe8:	4607      	mov	r7, r0
 800ffea:	460d      	mov	r5, r1
 800ffec:	4614      	mov	r4, r2
 800ffee:	d510      	bpl.n	8010012 <_svfiprintf_r+0x36>
 800fff0:	690b      	ldr	r3, [r1, #16]
 800fff2:	b973      	cbnz	r3, 8010012 <_svfiprintf_r+0x36>
 800fff4:	2140      	movs	r1, #64	@ 0x40
 800fff6:	f7ff ff09 	bl	800fe0c <_malloc_r>
 800fffa:	6028      	str	r0, [r5, #0]
 800fffc:	6128      	str	r0, [r5, #16]
 800fffe:	b930      	cbnz	r0, 801000e <_svfiprintf_r+0x32>
 8010000:	230c      	movs	r3, #12
 8010002:	603b      	str	r3, [r7, #0]
 8010004:	f04f 30ff 	mov.w	r0, #4294967295
 8010008:	b01d      	add	sp, #116	@ 0x74
 801000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801000e:	2340      	movs	r3, #64	@ 0x40
 8010010:	616b      	str	r3, [r5, #20]
 8010012:	2300      	movs	r3, #0
 8010014:	9309      	str	r3, [sp, #36]	@ 0x24
 8010016:	2320      	movs	r3, #32
 8010018:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801001c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010020:	2330      	movs	r3, #48	@ 0x30
 8010022:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80101c0 <_svfiprintf_r+0x1e4>
 8010026:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801002a:	f04f 0901 	mov.w	r9, #1
 801002e:	4623      	mov	r3, r4
 8010030:	469a      	mov	sl, r3
 8010032:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010036:	b10a      	cbz	r2, 801003c <_svfiprintf_r+0x60>
 8010038:	2a25      	cmp	r2, #37	@ 0x25
 801003a:	d1f9      	bne.n	8010030 <_svfiprintf_r+0x54>
 801003c:	ebba 0b04 	subs.w	fp, sl, r4
 8010040:	d00b      	beq.n	801005a <_svfiprintf_r+0x7e>
 8010042:	465b      	mov	r3, fp
 8010044:	4622      	mov	r2, r4
 8010046:	4629      	mov	r1, r5
 8010048:	4638      	mov	r0, r7
 801004a:	f7ff ff6b 	bl	800ff24 <__ssputs_r>
 801004e:	3001      	adds	r0, #1
 8010050:	f000 80a7 	beq.w	80101a2 <_svfiprintf_r+0x1c6>
 8010054:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010056:	445a      	add	r2, fp
 8010058:	9209      	str	r2, [sp, #36]	@ 0x24
 801005a:	f89a 3000 	ldrb.w	r3, [sl]
 801005e:	2b00      	cmp	r3, #0
 8010060:	f000 809f 	beq.w	80101a2 <_svfiprintf_r+0x1c6>
 8010064:	2300      	movs	r3, #0
 8010066:	f04f 32ff 	mov.w	r2, #4294967295
 801006a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801006e:	f10a 0a01 	add.w	sl, sl, #1
 8010072:	9304      	str	r3, [sp, #16]
 8010074:	9307      	str	r3, [sp, #28]
 8010076:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801007a:	931a      	str	r3, [sp, #104]	@ 0x68
 801007c:	4654      	mov	r4, sl
 801007e:	2205      	movs	r2, #5
 8010080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010084:	484e      	ldr	r0, [pc, #312]	@ (80101c0 <_svfiprintf_r+0x1e4>)
 8010086:	f7f0 f8bb 	bl	8000200 <memchr>
 801008a:	9a04      	ldr	r2, [sp, #16]
 801008c:	b9d8      	cbnz	r0, 80100c6 <_svfiprintf_r+0xea>
 801008e:	06d0      	lsls	r0, r2, #27
 8010090:	bf44      	itt	mi
 8010092:	2320      	movmi	r3, #32
 8010094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010098:	0711      	lsls	r1, r2, #28
 801009a:	bf44      	itt	mi
 801009c:	232b      	movmi	r3, #43	@ 0x2b
 801009e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80100a2:	f89a 3000 	ldrb.w	r3, [sl]
 80100a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80100a8:	d015      	beq.n	80100d6 <_svfiprintf_r+0xfa>
 80100aa:	9a07      	ldr	r2, [sp, #28]
 80100ac:	4654      	mov	r4, sl
 80100ae:	2000      	movs	r0, #0
 80100b0:	f04f 0c0a 	mov.w	ip, #10
 80100b4:	4621      	mov	r1, r4
 80100b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100ba:	3b30      	subs	r3, #48	@ 0x30
 80100bc:	2b09      	cmp	r3, #9
 80100be:	d94b      	bls.n	8010158 <_svfiprintf_r+0x17c>
 80100c0:	b1b0      	cbz	r0, 80100f0 <_svfiprintf_r+0x114>
 80100c2:	9207      	str	r2, [sp, #28]
 80100c4:	e014      	b.n	80100f0 <_svfiprintf_r+0x114>
 80100c6:	eba0 0308 	sub.w	r3, r0, r8
 80100ca:	fa09 f303 	lsl.w	r3, r9, r3
 80100ce:	4313      	orrs	r3, r2
 80100d0:	9304      	str	r3, [sp, #16]
 80100d2:	46a2      	mov	sl, r4
 80100d4:	e7d2      	b.n	801007c <_svfiprintf_r+0xa0>
 80100d6:	9b03      	ldr	r3, [sp, #12]
 80100d8:	1d19      	adds	r1, r3, #4
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	9103      	str	r1, [sp, #12]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	bfbb      	ittet	lt
 80100e2:	425b      	neglt	r3, r3
 80100e4:	f042 0202 	orrlt.w	r2, r2, #2
 80100e8:	9307      	strge	r3, [sp, #28]
 80100ea:	9307      	strlt	r3, [sp, #28]
 80100ec:	bfb8      	it	lt
 80100ee:	9204      	strlt	r2, [sp, #16]
 80100f0:	7823      	ldrb	r3, [r4, #0]
 80100f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80100f4:	d10a      	bne.n	801010c <_svfiprintf_r+0x130>
 80100f6:	7863      	ldrb	r3, [r4, #1]
 80100f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80100fa:	d132      	bne.n	8010162 <_svfiprintf_r+0x186>
 80100fc:	9b03      	ldr	r3, [sp, #12]
 80100fe:	1d1a      	adds	r2, r3, #4
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	9203      	str	r2, [sp, #12]
 8010104:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010108:	3402      	adds	r4, #2
 801010a:	9305      	str	r3, [sp, #20]
 801010c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80101d0 <_svfiprintf_r+0x1f4>
 8010110:	7821      	ldrb	r1, [r4, #0]
 8010112:	2203      	movs	r2, #3
 8010114:	4650      	mov	r0, sl
 8010116:	f7f0 f873 	bl	8000200 <memchr>
 801011a:	b138      	cbz	r0, 801012c <_svfiprintf_r+0x150>
 801011c:	9b04      	ldr	r3, [sp, #16]
 801011e:	eba0 000a 	sub.w	r0, r0, sl
 8010122:	2240      	movs	r2, #64	@ 0x40
 8010124:	4082      	lsls	r2, r0
 8010126:	4313      	orrs	r3, r2
 8010128:	3401      	adds	r4, #1
 801012a:	9304      	str	r3, [sp, #16]
 801012c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010130:	4824      	ldr	r0, [pc, #144]	@ (80101c4 <_svfiprintf_r+0x1e8>)
 8010132:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010136:	2206      	movs	r2, #6
 8010138:	f7f0 f862 	bl	8000200 <memchr>
 801013c:	2800      	cmp	r0, #0
 801013e:	d036      	beq.n	80101ae <_svfiprintf_r+0x1d2>
 8010140:	4b21      	ldr	r3, [pc, #132]	@ (80101c8 <_svfiprintf_r+0x1ec>)
 8010142:	bb1b      	cbnz	r3, 801018c <_svfiprintf_r+0x1b0>
 8010144:	9b03      	ldr	r3, [sp, #12]
 8010146:	3307      	adds	r3, #7
 8010148:	f023 0307 	bic.w	r3, r3, #7
 801014c:	3308      	adds	r3, #8
 801014e:	9303      	str	r3, [sp, #12]
 8010150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010152:	4433      	add	r3, r6
 8010154:	9309      	str	r3, [sp, #36]	@ 0x24
 8010156:	e76a      	b.n	801002e <_svfiprintf_r+0x52>
 8010158:	fb0c 3202 	mla	r2, ip, r2, r3
 801015c:	460c      	mov	r4, r1
 801015e:	2001      	movs	r0, #1
 8010160:	e7a8      	b.n	80100b4 <_svfiprintf_r+0xd8>
 8010162:	2300      	movs	r3, #0
 8010164:	3401      	adds	r4, #1
 8010166:	9305      	str	r3, [sp, #20]
 8010168:	4619      	mov	r1, r3
 801016a:	f04f 0c0a 	mov.w	ip, #10
 801016e:	4620      	mov	r0, r4
 8010170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010174:	3a30      	subs	r2, #48	@ 0x30
 8010176:	2a09      	cmp	r2, #9
 8010178:	d903      	bls.n	8010182 <_svfiprintf_r+0x1a6>
 801017a:	2b00      	cmp	r3, #0
 801017c:	d0c6      	beq.n	801010c <_svfiprintf_r+0x130>
 801017e:	9105      	str	r1, [sp, #20]
 8010180:	e7c4      	b.n	801010c <_svfiprintf_r+0x130>
 8010182:	fb0c 2101 	mla	r1, ip, r1, r2
 8010186:	4604      	mov	r4, r0
 8010188:	2301      	movs	r3, #1
 801018a:	e7f0      	b.n	801016e <_svfiprintf_r+0x192>
 801018c:	ab03      	add	r3, sp, #12
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	462a      	mov	r2, r5
 8010192:	4b0e      	ldr	r3, [pc, #56]	@ (80101cc <_svfiprintf_r+0x1f0>)
 8010194:	a904      	add	r1, sp, #16
 8010196:	4638      	mov	r0, r7
 8010198:	f3af 8000 	nop.w
 801019c:	1c42      	adds	r2, r0, #1
 801019e:	4606      	mov	r6, r0
 80101a0:	d1d6      	bne.n	8010150 <_svfiprintf_r+0x174>
 80101a2:	89ab      	ldrh	r3, [r5, #12]
 80101a4:	065b      	lsls	r3, r3, #25
 80101a6:	f53f af2d 	bmi.w	8010004 <_svfiprintf_r+0x28>
 80101aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80101ac:	e72c      	b.n	8010008 <_svfiprintf_r+0x2c>
 80101ae:	ab03      	add	r3, sp, #12
 80101b0:	9300      	str	r3, [sp, #0]
 80101b2:	462a      	mov	r2, r5
 80101b4:	4b05      	ldr	r3, [pc, #20]	@ (80101cc <_svfiprintf_r+0x1f0>)
 80101b6:	a904      	add	r1, sp, #16
 80101b8:	4638      	mov	r0, r7
 80101ba:	f000 f879 	bl	80102b0 <_printf_i>
 80101be:	e7ed      	b.n	801019c <_svfiprintf_r+0x1c0>
 80101c0:	08010ecc 	.word	0x08010ecc
 80101c4:	08010ed6 	.word	0x08010ed6
 80101c8:	00000000 	.word	0x00000000
 80101cc:	0800ff25 	.word	0x0800ff25
 80101d0:	08010ed2 	.word	0x08010ed2

080101d4 <_printf_common>:
 80101d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101d8:	4616      	mov	r6, r2
 80101da:	4698      	mov	r8, r3
 80101dc:	688a      	ldr	r2, [r1, #8]
 80101de:	690b      	ldr	r3, [r1, #16]
 80101e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80101e4:	4293      	cmp	r3, r2
 80101e6:	bfb8      	it	lt
 80101e8:	4613      	movlt	r3, r2
 80101ea:	6033      	str	r3, [r6, #0]
 80101ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80101f0:	4607      	mov	r7, r0
 80101f2:	460c      	mov	r4, r1
 80101f4:	b10a      	cbz	r2, 80101fa <_printf_common+0x26>
 80101f6:	3301      	adds	r3, #1
 80101f8:	6033      	str	r3, [r6, #0]
 80101fa:	6823      	ldr	r3, [r4, #0]
 80101fc:	0699      	lsls	r1, r3, #26
 80101fe:	bf42      	ittt	mi
 8010200:	6833      	ldrmi	r3, [r6, #0]
 8010202:	3302      	addmi	r3, #2
 8010204:	6033      	strmi	r3, [r6, #0]
 8010206:	6825      	ldr	r5, [r4, #0]
 8010208:	f015 0506 	ands.w	r5, r5, #6
 801020c:	d106      	bne.n	801021c <_printf_common+0x48>
 801020e:	f104 0a19 	add.w	sl, r4, #25
 8010212:	68e3      	ldr	r3, [r4, #12]
 8010214:	6832      	ldr	r2, [r6, #0]
 8010216:	1a9b      	subs	r3, r3, r2
 8010218:	42ab      	cmp	r3, r5
 801021a:	dc26      	bgt.n	801026a <_printf_common+0x96>
 801021c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010220:	6822      	ldr	r2, [r4, #0]
 8010222:	3b00      	subs	r3, #0
 8010224:	bf18      	it	ne
 8010226:	2301      	movne	r3, #1
 8010228:	0692      	lsls	r2, r2, #26
 801022a:	d42b      	bmi.n	8010284 <_printf_common+0xb0>
 801022c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010230:	4641      	mov	r1, r8
 8010232:	4638      	mov	r0, r7
 8010234:	47c8      	blx	r9
 8010236:	3001      	adds	r0, #1
 8010238:	d01e      	beq.n	8010278 <_printf_common+0xa4>
 801023a:	6823      	ldr	r3, [r4, #0]
 801023c:	6922      	ldr	r2, [r4, #16]
 801023e:	f003 0306 	and.w	r3, r3, #6
 8010242:	2b04      	cmp	r3, #4
 8010244:	bf02      	ittt	eq
 8010246:	68e5      	ldreq	r5, [r4, #12]
 8010248:	6833      	ldreq	r3, [r6, #0]
 801024a:	1aed      	subeq	r5, r5, r3
 801024c:	68a3      	ldr	r3, [r4, #8]
 801024e:	bf0c      	ite	eq
 8010250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010254:	2500      	movne	r5, #0
 8010256:	4293      	cmp	r3, r2
 8010258:	bfc4      	itt	gt
 801025a:	1a9b      	subgt	r3, r3, r2
 801025c:	18ed      	addgt	r5, r5, r3
 801025e:	2600      	movs	r6, #0
 8010260:	341a      	adds	r4, #26
 8010262:	42b5      	cmp	r5, r6
 8010264:	d11a      	bne.n	801029c <_printf_common+0xc8>
 8010266:	2000      	movs	r0, #0
 8010268:	e008      	b.n	801027c <_printf_common+0xa8>
 801026a:	2301      	movs	r3, #1
 801026c:	4652      	mov	r2, sl
 801026e:	4641      	mov	r1, r8
 8010270:	4638      	mov	r0, r7
 8010272:	47c8      	blx	r9
 8010274:	3001      	adds	r0, #1
 8010276:	d103      	bne.n	8010280 <_printf_common+0xac>
 8010278:	f04f 30ff 	mov.w	r0, #4294967295
 801027c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010280:	3501      	adds	r5, #1
 8010282:	e7c6      	b.n	8010212 <_printf_common+0x3e>
 8010284:	18e1      	adds	r1, r4, r3
 8010286:	1c5a      	adds	r2, r3, #1
 8010288:	2030      	movs	r0, #48	@ 0x30
 801028a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801028e:	4422      	add	r2, r4
 8010290:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010294:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010298:	3302      	adds	r3, #2
 801029a:	e7c7      	b.n	801022c <_printf_common+0x58>
 801029c:	2301      	movs	r3, #1
 801029e:	4622      	mov	r2, r4
 80102a0:	4641      	mov	r1, r8
 80102a2:	4638      	mov	r0, r7
 80102a4:	47c8      	blx	r9
 80102a6:	3001      	adds	r0, #1
 80102a8:	d0e6      	beq.n	8010278 <_printf_common+0xa4>
 80102aa:	3601      	adds	r6, #1
 80102ac:	e7d9      	b.n	8010262 <_printf_common+0x8e>
	...

080102b0 <_printf_i>:
 80102b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80102b4:	7e0f      	ldrb	r7, [r1, #24]
 80102b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80102b8:	2f78      	cmp	r7, #120	@ 0x78
 80102ba:	4691      	mov	r9, r2
 80102bc:	4680      	mov	r8, r0
 80102be:	460c      	mov	r4, r1
 80102c0:	469a      	mov	sl, r3
 80102c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80102c6:	d807      	bhi.n	80102d8 <_printf_i+0x28>
 80102c8:	2f62      	cmp	r7, #98	@ 0x62
 80102ca:	d80a      	bhi.n	80102e2 <_printf_i+0x32>
 80102cc:	2f00      	cmp	r7, #0
 80102ce:	f000 80d2 	beq.w	8010476 <_printf_i+0x1c6>
 80102d2:	2f58      	cmp	r7, #88	@ 0x58
 80102d4:	f000 80b9 	beq.w	801044a <_printf_i+0x19a>
 80102d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80102dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80102e0:	e03a      	b.n	8010358 <_printf_i+0xa8>
 80102e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80102e6:	2b15      	cmp	r3, #21
 80102e8:	d8f6      	bhi.n	80102d8 <_printf_i+0x28>
 80102ea:	a101      	add	r1, pc, #4	@ (adr r1, 80102f0 <_printf_i+0x40>)
 80102ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102f0:	08010349 	.word	0x08010349
 80102f4:	0801035d 	.word	0x0801035d
 80102f8:	080102d9 	.word	0x080102d9
 80102fc:	080102d9 	.word	0x080102d9
 8010300:	080102d9 	.word	0x080102d9
 8010304:	080102d9 	.word	0x080102d9
 8010308:	0801035d 	.word	0x0801035d
 801030c:	080102d9 	.word	0x080102d9
 8010310:	080102d9 	.word	0x080102d9
 8010314:	080102d9 	.word	0x080102d9
 8010318:	080102d9 	.word	0x080102d9
 801031c:	0801045d 	.word	0x0801045d
 8010320:	08010387 	.word	0x08010387
 8010324:	08010417 	.word	0x08010417
 8010328:	080102d9 	.word	0x080102d9
 801032c:	080102d9 	.word	0x080102d9
 8010330:	0801047f 	.word	0x0801047f
 8010334:	080102d9 	.word	0x080102d9
 8010338:	08010387 	.word	0x08010387
 801033c:	080102d9 	.word	0x080102d9
 8010340:	080102d9 	.word	0x080102d9
 8010344:	0801041f 	.word	0x0801041f
 8010348:	6833      	ldr	r3, [r6, #0]
 801034a:	1d1a      	adds	r2, r3, #4
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	6032      	str	r2, [r6, #0]
 8010350:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010354:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010358:	2301      	movs	r3, #1
 801035a:	e09d      	b.n	8010498 <_printf_i+0x1e8>
 801035c:	6833      	ldr	r3, [r6, #0]
 801035e:	6820      	ldr	r0, [r4, #0]
 8010360:	1d19      	adds	r1, r3, #4
 8010362:	6031      	str	r1, [r6, #0]
 8010364:	0606      	lsls	r6, r0, #24
 8010366:	d501      	bpl.n	801036c <_printf_i+0xbc>
 8010368:	681d      	ldr	r5, [r3, #0]
 801036a:	e003      	b.n	8010374 <_printf_i+0xc4>
 801036c:	0645      	lsls	r5, r0, #25
 801036e:	d5fb      	bpl.n	8010368 <_printf_i+0xb8>
 8010370:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010374:	2d00      	cmp	r5, #0
 8010376:	da03      	bge.n	8010380 <_printf_i+0xd0>
 8010378:	232d      	movs	r3, #45	@ 0x2d
 801037a:	426d      	negs	r5, r5
 801037c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010380:	4859      	ldr	r0, [pc, #356]	@ (80104e8 <_printf_i+0x238>)
 8010382:	230a      	movs	r3, #10
 8010384:	e011      	b.n	80103aa <_printf_i+0xfa>
 8010386:	6821      	ldr	r1, [r4, #0]
 8010388:	6833      	ldr	r3, [r6, #0]
 801038a:	0608      	lsls	r0, r1, #24
 801038c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010390:	d402      	bmi.n	8010398 <_printf_i+0xe8>
 8010392:	0649      	lsls	r1, r1, #25
 8010394:	bf48      	it	mi
 8010396:	b2ad      	uxthmi	r5, r5
 8010398:	2f6f      	cmp	r7, #111	@ 0x6f
 801039a:	4853      	ldr	r0, [pc, #332]	@ (80104e8 <_printf_i+0x238>)
 801039c:	6033      	str	r3, [r6, #0]
 801039e:	bf14      	ite	ne
 80103a0:	230a      	movne	r3, #10
 80103a2:	2308      	moveq	r3, #8
 80103a4:	2100      	movs	r1, #0
 80103a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80103aa:	6866      	ldr	r6, [r4, #4]
 80103ac:	60a6      	str	r6, [r4, #8]
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	bfa2      	ittt	ge
 80103b2:	6821      	ldrge	r1, [r4, #0]
 80103b4:	f021 0104 	bicge.w	r1, r1, #4
 80103b8:	6021      	strge	r1, [r4, #0]
 80103ba:	b90d      	cbnz	r5, 80103c0 <_printf_i+0x110>
 80103bc:	2e00      	cmp	r6, #0
 80103be:	d04b      	beq.n	8010458 <_printf_i+0x1a8>
 80103c0:	4616      	mov	r6, r2
 80103c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80103c6:	fb03 5711 	mls	r7, r3, r1, r5
 80103ca:	5dc7      	ldrb	r7, [r0, r7]
 80103cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80103d0:	462f      	mov	r7, r5
 80103d2:	42bb      	cmp	r3, r7
 80103d4:	460d      	mov	r5, r1
 80103d6:	d9f4      	bls.n	80103c2 <_printf_i+0x112>
 80103d8:	2b08      	cmp	r3, #8
 80103da:	d10b      	bne.n	80103f4 <_printf_i+0x144>
 80103dc:	6823      	ldr	r3, [r4, #0]
 80103de:	07df      	lsls	r7, r3, #31
 80103e0:	d508      	bpl.n	80103f4 <_printf_i+0x144>
 80103e2:	6923      	ldr	r3, [r4, #16]
 80103e4:	6861      	ldr	r1, [r4, #4]
 80103e6:	4299      	cmp	r1, r3
 80103e8:	bfde      	ittt	le
 80103ea:	2330      	movle	r3, #48	@ 0x30
 80103ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80103f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80103f4:	1b92      	subs	r2, r2, r6
 80103f6:	6122      	str	r2, [r4, #16]
 80103f8:	f8cd a000 	str.w	sl, [sp]
 80103fc:	464b      	mov	r3, r9
 80103fe:	aa03      	add	r2, sp, #12
 8010400:	4621      	mov	r1, r4
 8010402:	4640      	mov	r0, r8
 8010404:	f7ff fee6 	bl	80101d4 <_printf_common>
 8010408:	3001      	adds	r0, #1
 801040a:	d14a      	bne.n	80104a2 <_printf_i+0x1f2>
 801040c:	f04f 30ff 	mov.w	r0, #4294967295
 8010410:	b004      	add	sp, #16
 8010412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010416:	6823      	ldr	r3, [r4, #0]
 8010418:	f043 0320 	orr.w	r3, r3, #32
 801041c:	6023      	str	r3, [r4, #0]
 801041e:	4833      	ldr	r0, [pc, #204]	@ (80104ec <_printf_i+0x23c>)
 8010420:	2778      	movs	r7, #120	@ 0x78
 8010422:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	6831      	ldr	r1, [r6, #0]
 801042a:	061f      	lsls	r7, r3, #24
 801042c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010430:	d402      	bmi.n	8010438 <_printf_i+0x188>
 8010432:	065f      	lsls	r7, r3, #25
 8010434:	bf48      	it	mi
 8010436:	b2ad      	uxthmi	r5, r5
 8010438:	6031      	str	r1, [r6, #0]
 801043a:	07d9      	lsls	r1, r3, #31
 801043c:	bf44      	itt	mi
 801043e:	f043 0320 	orrmi.w	r3, r3, #32
 8010442:	6023      	strmi	r3, [r4, #0]
 8010444:	b11d      	cbz	r5, 801044e <_printf_i+0x19e>
 8010446:	2310      	movs	r3, #16
 8010448:	e7ac      	b.n	80103a4 <_printf_i+0xf4>
 801044a:	4827      	ldr	r0, [pc, #156]	@ (80104e8 <_printf_i+0x238>)
 801044c:	e7e9      	b.n	8010422 <_printf_i+0x172>
 801044e:	6823      	ldr	r3, [r4, #0]
 8010450:	f023 0320 	bic.w	r3, r3, #32
 8010454:	6023      	str	r3, [r4, #0]
 8010456:	e7f6      	b.n	8010446 <_printf_i+0x196>
 8010458:	4616      	mov	r6, r2
 801045a:	e7bd      	b.n	80103d8 <_printf_i+0x128>
 801045c:	6833      	ldr	r3, [r6, #0]
 801045e:	6825      	ldr	r5, [r4, #0]
 8010460:	6961      	ldr	r1, [r4, #20]
 8010462:	1d18      	adds	r0, r3, #4
 8010464:	6030      	str	r0, [r6, #0]
 8010466:	062e      	lsls	r6, r5, #24
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	d501      	bpl.n	8010470 <_printf_i+0x1c0>
 801046c:	6019      	str	r1, [r3, #0]
 801046e:	e002      	b.n	8010476 <_printf_i+0x1c6>
 8010470:	0668      	lsls	r0, r5, #25
 8010472:	d5fb      	bpl.n	801046c <_printf_i+0x1bc>
 8010474:	8019      	strh	r1, [r3, #0]
 8010476:	2300      	movs	r3, #0
 8010478:	6123      	str	r3, [r4, #16]
 801047a:	4616      	mov	r6, r2
 801047c:	e7bc      	b.n	80103f8 <_printf_i+0x148>
 801047e:	6833      	ldr	r3, [r6, #0]
 8010480:	1d1a      	adds	r2, r3, #4
 8010482:	6032      	str	r2, [r6, #0]
 8010484:	681e      	ldr	r6, [r3, #0]
 8010486:	6862      	ldr	r2, [r4, #4]
 8010488:	2100      	movs	r1, #0
 801048a:	4630      	mov	r0, r6
 801048c:	f7ef feb8 	bl	8000200 <memchr>
 8010490:	b108      	cbz	r0, 8010496 <_printf_i+0x1e6>
 8010492:	1b80      	subs	r0, r0, r6
 8010494:	6060      	str	r0, [r4, #4]
 8010496:	6863      	ldr	r3, [r4, #4]
 8010498:	6123      	str	r3, [r4, #16]
 801049a:	2300      	movs	r3, #0
 801049c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80104a0:	e7aa      	b.n	80103f8 <_printf_i+0x148>
 80104a2:	6923      	ldr	r3, [r4, #16]
 80104a4:	4632      	mov	r2, r6
 80104a6:	4649      	mov	r1, r9
 80104a8:	4640      	mov	r0, r8
 80104aa:	47d0      	blx	sl
 80104ac:	3001      	adds	r0, #1
 80104ae:	d0ad      	beq.n	801040c <_printf_i+0x15c>
 80104b0:	6823      	ldr	r3, [r4, #0]
 80104b2:	079b      	lsls	r3, r3, #30
 80104b4:	d413      	bmi.n	80104de <_printf_i+0x22e>
 80104b6:	68e0      	ldr	r0, [r4, #12]
 80104b8:	9b03      	ldr	r3, [sp, #12]
 80104ba:	4298      	cmp	r0, r3
 80104bc:	bfb8      	it	lt
 80104be:	4618      	movlt	r0, r3
 80104c0:	e7a6      	b.n	8010410 <_printf_i+0x160>
 80104c2:	2301      	movs	r3, #1
 80104c4:	4632      	mov	r2, r6
 80104c6:	4649      	mov	r1, r9
 80104c8:	4640      	mov	r0, r8
 80104ca:	47d0      	blx	sl
 80104cc:	3001      	adds	r0, #1
 80104ce:	d09d      	beq.n	801040c <_printf_i+0x15c>
 80104d0:	3501      	adds	r5, #1
 80104d2:	68e3      	ldr	r3, [r4, #12]
 80104d4:	9903      	ldr	r1, [sp, #12]
 80104d6:	1a5b      	subs	r3, r3, r1
 80104d8:	42ab      	cmp	r3, r5
 80104da:	dcf2      	bgt.n	80104c2 <_printf_i+0x212>
 80104dc:	e7eb      	b.n	80104b6 <_printf_i+0x206>
 80104de:	2500      	movs	r5, #0
 80104e0:	f104 0619 	add.w	r6, r4, #25
 80104e4:	e7f5      	b.n	80104d2 <_printf_i+0x222>
 80104e6:	bf00      	nop
 80104e8:	08010edd 	.word	0x08010edd
 80104ec:	08010eee 	.word	0x08010eee

080104f0 <memmove>:
 80104f0:	4288      	cmp	r0, r1
 80104f2:	b510      	push	{r4, lr}
 80104f4:	eb01 0402 	add.w	r4, r1, r2
 80104f8:	d902      	bls.n	8010500 <memmove+0x10>
 80104fa:	4284      	cmp	r4, r0
 80104fc:	4623      	mov	r3, r4
 80104fe:	d807      	bhi.n	8010510 <memmove+0x20>
 8010500:	1e43      	subs	r3, r0, #1
 8010502:	42a1      	cmp	r1, r4
 8010504:	d008      	beq.n	8010518 <memmove+0x28>
 8010506:	f811 2b01 	ldrb.w	r2, [r1], #1
 801050a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801050e:	e7f8      	b.n	8010502 <memmove+0x12>
 8010510:	4402      	add	r2, r0
 8010512:	4601      	mov	r1, r0
 8010514:	428a      	cmp	r2, r1
 8010516:	d100      	bne.n	801051a <memmove+0x2a>
 8010518:	bd10      	pop	{r4, pc}
 801051a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801051e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010522:	e7f7      	b.n	8010514 <memmove+0x24>

08010524 <_sbrk_r>:
 8010524:	b538      	push	{r3, r4, r5, lr}
 8010526:	4d06      	ldr	r5, [pc, #24]	@ (8010540 <_sbrk_r+0x1c>)
 8010528:	2300      	movs	r3, #0
 801052a:	4604      	mov	r4, r0
 801052c:	4608      	mov	r0, r1
 801052e:	602b      	str	r3, [r5, #0]
 8010530:	f7f1 ffa2 	bl	8002478 <_sbrk>
 8010534:	1c43      	adds	r3, r0, #1
 8010536:	d102      	bne.n	801053e <_sbrk_r+0x1a>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	b103      	cbz	r3, 801053e <_sbrk_r+0x1a>
 801053c:	6023      	str	r3, [r4, #0]
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	20004ea4 	.word	0x20004ea4

08010544 <memcpy>:
 8010544:	440a      	add	r2, r1
 8010546:	4291      	cmp	r1, r2
 8010548:	f100 33ff 	add.w	r3, r0, #4294967295
 801054c:	d100      	bne.n	8010550 <memcpy+0xc>
 801054e:	4770      	bx	lr
 8010550:	b510      	push	{r4, lr}
 8010552:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010556:	f803 4f01 	strb.w	r4, [r3, #1]!
 801055a:	4291      	cmp	r1, r2
 801055c:	d1f9      	bne.n	8010552 <memcpy+0xe>
 801055e:	bd10      	pop	{r4, pc}

08010560 <_realloc_r>:
 8010560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010564:	4680      	mov	r8, r0
 8010566:	4615      	mov	r5, r2
 8010568:	460c      	mov	r4, r1
 801056a:	b921      	cbnz	r1, 8010576 <_realloc_r+0x16>
 801056c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010570:	4611      	mov	r1, r2
 8010572:	f7ff bc4b 	b.w	800fe0c <_malloc_r>
 8010576:	b92a      	cbnz	r2, 8010584 <_realloc_r+0x24>
 8010578:	f7ff fbdc 	bl	800fd34 <_free_r>
 801057c:	2400      	movs	r4, #0
 801057e:	4620      	mov	r0, r4
 8010580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010584:	f000 f81a 	bl	80105bc <_malloc_usable_size_r>
 8010588:	4285      	cmp	r5, r0
 801058a:	4606      	mov	r6, r0
 801058c:	d802      	bhi.n	8010594 <_realloc_r+0x34>
 801058e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010592:	d8f4      	bhi.n	801057e <_realloc_r+0x1e>
 8010594:	4629      	mov	r1, r5
 8010596:	4640      	mov	r0, r8
 8010598:	f7ff fc38 	bl	800fe0c <_malloc_r>
 801059c:	4607      	mov	r7, r0
 801059e:	2800      	cmp	r0, #0
 80105a0:	d0ec      	beq.n	801057c <_realloc_r+0x1c>
 80105a2:	42b5      	cmp	r5, r6
 80105a4:	462a      	mov	r2, r5
 80105a6:	4621      	mov	r1, r4
 80105a8:	bf28      	it	cs
 80105aa:	4632      	movcs	r2, r6
 80105ac:	f7ff ffca 	bl	8010544 <memcpy>
 80105b0:	4621      	mov	r1, r4
 80105b2:	4640      	mov	r0, r8
 80105b4:	f7ff fbbe 	bl	800fd34 <_free_r>
 80105b8:	463c      	mov	r4, r7
 80105ba:	e7e0      	b.n	801057e <_realloc_r+0x1e>

080105bc <_malloc_usable_size_r>:
 80105bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80105c0:	1f18      	subs	r0, r3, #4
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	bfbc      	itt	lt
 80105c6:	580b      	ldrlt	r3, [r1, r0]
 80105c8:	18c0      	addlt	r0, r0, r3
 80105ca:	4770      	bx	lr

080105cc <_init>:
 80105cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ce:	bf00      	nop
 80105d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105d2:	bc08      	pop	{r3}
 80105d4:	469e      	mov	lr, r3
 80105d6:	4770      	bx	lr

080105d8 <_fini>:
 80105d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105da:	bf00      	nop
 80105dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105de:	bc08      	pop	{r3}
 80105e0:	469e      	mov	lr, r3
 80105e2:	4770      	bx	lr
