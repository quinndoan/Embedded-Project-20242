
STM32_20242_ReadFile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f73c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  0800f8ec  0800f8ec  000108ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010164  08010164  00012164  2**0
                  CONTENTS
  4 .ARM          00000008  08010164  08010164  00011164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801016c  0801016c  00012164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801016c  0801016c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010170  08010170  00011170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  08010174  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012164  2**0
                  CONTENTS
 10 .bss          000048d4  20000164  20000164  00012164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a38  20004a38  00012164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001987d  00000000  00000000  00012194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004485  00000000  00000000  0002ba11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014f0  00000000  00000000  0002fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fee  00000000  00000000  00031388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288f7  00000000  00000000  00032376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f5a5  00000000  00000000  0005ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da2af  00000000  00000000  0007a212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001544c1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b54  00000000  00000000  00154504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0015a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f8d4 	.word	0x0800f8d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	0800f8d4 	.word	0x0800f8d4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b96a 	b.w	8000b98 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	460c      	mov	r4, r1
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d14e      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008e8:	4694      	mov	ip, r2
 80008ea:	458c      	cmp	ip, r1
 80008ec:	4686      	mov	lr, r0
 80008ee:	fab2 f282 	clz	r2, r2
 80008f2:	d962      	bls.n	80009ba <__udivmoddi4+0xde>
 80008f4:	b14a      	cbz	r2, 800090a <__udivmoddi4+0x2e>
 80008f6:	f1c2 0320 	rsb	r3, r2, #32
 80008fa:	4091      	lsls	r1, r2
 80008fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000900:	fa0c fc02 	lsl.w	ip, ip, r2
 8000904:	4319      	orrs	r1, r3
 8000906:	fa00 fe02 	lsl.w	lr, r0, r2
 800090a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800090e:	fa1f f68c 	uxth.w	r6, ip
 8000912:	fbb1 f4f7 	udiv	r4, r1, r7
 8000916:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800091a:	fb07 1114 	mls	r1, r7, r4, r1
 800091e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000922:	fb04 f106 	mul.w	r1, r4, r6
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000932:	f080 8112 	bcs.w	8000b5a <__udivmoddi4+0x27e>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 810f 	bls.w	8000b5a <__udivmoddi4+0x27e>
 800093c:	3c02      	subs	r4, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a59      	subs	r1, r3, r1
 8000942:	fa1f f38e 	uxth.w	r3, lr
 8000946:	fbb1 f0f7 	udiv	r0, r1, r7
 800094a:	fb07 1110 	mls	r1, r7, r0, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb00 f606 	mul.w	r6, r0, r6
 8000956:	429e      	cmp	r6, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x94>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000962:	f080 80fc 	bcs.w	8000b5e <__udivmoddi4+0x282>
 8000966:	429e      	cmp	r6, r3
 8000968:	f240 80f9 	bls.w	8000b5e <__udivmoddi4+0x282>
 800096c:	4463      	add	r3, ip
 800096e:	3802      	subs	r0, #2
 8000970:	1b9b      	subs	r3, r3, r6
 8000972:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000976:	2100      	movs	r1, #0
 8000978:	b11d      	cbz	r5, 8000982 <__udivmoddi4+0xa6>
 800097a:	40d3      	lsrs	r3, r2
 800097c:	2200      	movs	r2, #0
 800097e:	e9c5 3200 	strd	r3, r2, [r5]
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d905      	bls.n	8000996 <__udivmoddi4+0xba>
 800098a:	b10d      	cbz	r5, 8000990 <__udivmoddi4+0xb4>
 800098c:	e9c5 0100 	strd	r0, r1, [r5]
 8000990:	2100      	movs	r1, #0
 8000992:	4608      	mov	r0, r1
 8000994:	e7f5      	b.n	8000982 <__udivmoddi4+0xa6>
 8000996:	fab3 f183 	clz	r1, r3
 800099a:	2900      	cmp	r1, #0
 800099c:	d146      	bne.n	8000a2c <__udivmoddi4+0x150>
 800099e:	42a3      	cmp	r3, r4
 80009a0:	d302      	bcc.n	80009a8 <__udivmoddi4+0xcc>
 80009a2:	4290      	cmp	r0, r2
 80009a4:	f0c0 80f0 	bcc.w	8000b88 <__udivmoddi4+0x2ac>
 80009a8:	1a86      	subs	r6, r0, r2
 80009aa:	eb64 0303 	sbc.w	r3, r4, r3
 80009ae:	2001      	movs	r0, #1
 80009b0:	2d00      	cmp	r5, #0
 80009b2:	d0e6      	beq.n	8000982 <__udivmoddi4+0xa6>
 80009b4:	e9c5 6300 	strd	r6, r3, [r5]
 80009b8:	e7e3      	b.n	8000982 <__udivmoddi4+0xa6>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	f040 8090 	bne.w	8000ae0 <__udivmoddi4+0x204>
 80009c0:	eba1 040c 	sub.w	r4, r1, ip
 80009c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	2101      	movs	r1, #1
 80009ce:	fbb4 f6f8 	udiv	r6, r4, r8
 80009d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009d6:	fb08 4416 	mls	r4, r8, r6, r4
 80009da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009de:	fb07 f006 	mul.w	r0, r7, r6
 80009e2:	4298      	cmp	r0, r3
 80009e4:	d908      	bls.n	80009f8 <__udivmoddi4+0x11c>
 80009e6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ea:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ee:	d202      	bcs.n	80009f6 <__udivmoddi4+0x11a>
 80009f0:	4298      	cmp	r0, r3
 80009f2:	f200 80cd 	bhi.w	8000b90 <__udivmoddi4+0x2b4>
 80009f6:	4626      	mov	r6, r4
 80009f8:	1a1c      	subs	r4, r3, r0
 80009fa:	fa1f f38e 	uxth.w	r3, lr
 80009fe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a02:	fb08 4410 	mls	r4, r8, r0, r4
 8000a06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0a:	fb00 f707 	mul.w	r7, r0, r7
 8000a0e:	429f      	cmp	r7, r3
 8000a10:	d908      	bls.n	8000a24 <__udivmoddi4+0x148>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a1a:	d202      	bcs.n	8000a22 <__udivmoddi4+0x146>
 8000a1c:	429f      	cmp	r7, r3
 8000a1e:	f200 80b0 	bhi.w	8000b82 <__udivmoddi4+0x2a6>
 8000a22:	4620      	mov	r0, r4
 8000a24:	1bdb      	subs	r3, r3, r7
 8000a26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a2a:	e7a5      	b.n	8000978 <__udivmoddi4+0x9c>
 8000a2c:	f1c1 0620 	rsb	r6, r1, #32
 8000a30:	408b      	lsls	r3, r1
 8000a32:	fa22 f706 	lsr.w	r7, r2, r6
 8000a36:	431f      	orrs	r7, r3
 8000a38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a40:	ea43 030c 	orr.w	r3, r3, ip
 8000a44:	40f4      	lsrs	r4, r6
 8000a46:	fa00 f801 	lsl.w	r8, r0, r1
 8000a4a:	0c38      	lsrs	r0, r7, #16
 8000a4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a50:	fbb4 fef0 	udiv	lr, r4, r0
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	fb00 441e 	mls	r4, r0, lr, r4
 8000a5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a60:	fb0e f90c 	mul.w	r9, lr, ip
 8000a64:	45a1      	cmp	r9, r4
 8000a66:	fa02 f201 	lsl.w	r2, r2, r1
 8000a6a:	d90a      	bls.n	8000a82 <__udivmoddi4+0x1a6>
 8000a6c:	193c      	adds	r4, r7, r4
 8000a6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a72:	f080 8084 	bcs.w	8000b7e <__udivmoddi4+0x2a2>
 8000a76:	45a1      	cmp	r9, r4
 8000a78:	f240 8081 	bls.w	8000b7e <__udivmoddi4+0x2a2>
 8000a7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a80:	443c      	add	r4, r7
 8000a82:	eba4 0409 	sub.w	r4, r4, r9
 8000a86:	fa1f f983 	uxth.w	r9, r3
 8000a8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a9a:	45a4      	cmp	ip, r4
 8000a9c:	d907      	bls.n	8000aae <__udivmoddi4+0x1d2>
 8000a9e:	193c      	adds	r4, r7, r4
 8000aa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000aa4:	d267      	bcs.n	8000b76 <__udivmoddi4+0x29a>
 8000aa6:	45a4      	cmp	ip, r4
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0x29a>
 8000aaa:	3b02      	subs	r3, #2
 8000aac:	443c      	add	r4, r7
 8000aae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ab2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ab6:	eba4 040c 	sub.w	r4, r4, ip
 8000aba:	429c      	cmp	r4, r3
 8000abc:	46ce      	mov	lr, r9
 8000abe:	469c      	mov	ip, r3
 8000ac0:	d351      	bcc.n	8000b66 <__udivmoddi4+0x28a>
 8000ac2:	d04e      	beq.n	8000b62 <__udivmoddi4+0x286>
 8000ac4:	b155      	cbz	r5, 8000adc <__udivmoddi4+0x200>
 8000ac6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aca:	eb64 040c 	sbc.w	r4, r4, ip
 8000ace:	fa04 f606 	lsl.w	r6, r4, r6
 8000ad2:	40cb      	lsrs	r3, r1
 8000ad4:	431e      	orrs	r6, r3
 8000ad6:	40cc      	lsrs	r4, r1
 8000ad8:	e9c5 6400 	strd	r6, r4, [r5]
 8000adc:	2100      	movs	r1, #0
 8000ade:	e750      	b.n	8000982 <__udivmoddi4+0xa6>
 8000ae0:	f1c2 0320 	rsb	r3, r2, #32
 8000ae4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ae8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aec:	fa24 f303 	lsr.w	r3, r4, r3
 8000af0:	4094      	lsls	r4, r2
 8000af2:	430c      	orrs	r4, r1
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b04:	fb08 3110 	mls	r1, r8, r0, r3
 8000b08:	0c23      	lsrs	r3, r4, #16
 8000b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0e:	fb00 f107 	mul.w	r1, r0, r7
 8000b12:	4299      	cmp	r1, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x24c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b1e:	d22c      	bcs.n	8000b7a <__udivmoddi4+0x29e>
 8000b20:	4299      	cmp	r1, r3
 8000b22:	d92a      	bls.n	8000b7a <__udivmoddi4+0x29e>
 8000b24:	3802      	subs	r0, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b30:	fb08 3311 	mls	r3, r8, r1, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb01 f307 	mul.w	r3, r1, r7
 8000b3c:	42a3      	cmp	r3, r4
 8000b3e:	d908      	bls.n	8000b52 <__udivmoddi4+0x276>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b48:	d213      	bcs.n	8000b72 <__udivmoddi4+0x296>
 8000b4a:	42a3      	cmp	r3, r4
 8000b4c:	d911      	bls.n	8000b72 <__udivmoddi4+0x296>
 8000b4e:	3902      	subs	r1, #2
 8000b50:	4464      	add	r4, ip
 8000b52:	1ae4      	subs	r4, r4, r3
 8000b54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b58:	e739      	b.n	80009ce <__udivmoddi4+0xf2>
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	e6f0      	b.n	8000940 <__udivmoddi4+0x64>
 8000b5e:	4608      	mov	r0, r1
 8000b60:	e706      	b.n	8000970 <__udivmoddi4+0x94>
 8000b62:	45c8      	cmp	r8, r9
 8000b64:	d2ae      	bcs.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b6e:	3801      	subs	r0, #1
 8000b70:	e7a8      	b.n	8000ac4 <__udivmoddi4+0x1e8>
 8000b72:	4631      	mov	r1, r6
 8000b74:	e7ed      	b.n	8000b52 <__udivmoddi4+0x276>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e799      	b.n	8000aae <__udivmoddi4+0x1d2>
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	e7d4      	b.n	8000b28 <__udivmoddi4+0x24c>
 8000b7e:	46d6      	mov	lr, sl
 8000b80:	e77f      	b.n	8000a82 <__udivmoddi4+0x1a6>
 8000b82:	4463      	add	r3, ip
 8000b84:	3802      	subs	r0, #2
 8000b86:	e74d      	b.n	8000a24 <__udivmoddi4+0x148>
 8000b88:	4606      	mov	r6, r0
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e70f      	b.n	80009b0 <__udivmoddi4+0xd4>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	e730      	b.n	80009f8 <__udivmoddi4+0x11c>
 8000b96:	bf00      	nop

08000b98 <__aeabi_idiv0>:
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <disk_status+0x30>)
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	4905      	ldr	r1, [pc, #20]	@ (8000bcc <disk_status+0x30>)
 8000bb6:	440a      	add	r2, r1
 8000bb8:	7a12      	ldrb	r2, [r2, #8]
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4798      	blx	r3
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20003c9c 	.word	0x20003c9c

08000bd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <disk_initialize+0x4c>)
 8000be2:	5cd3      	ldrb	r3, [r2, r3]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d114      	bne.n	8000c12 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a0c      	ldr	r2, [pc, #48]	@ (8000c1c <disk_initialize+0x4c>)
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	79fa      	ldrb	r2, [r7, #7]
 8000bf6:	4909      	ldr	r1, [pc, #36]	@ (8000c1c <disk_initialize+0x4c>)
 8000bf8:	440a      	add	r2, r1
 8000bfa:	7a12      	ldrb	r2, [r2, #8]
 8000bfc:	4610      	mov	r0, r2
 8000bfe:	4798      	blx	r3
 8000c00:	4603      	mov	r3, r0
 8000c02:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8000c04:	7bfb      	ldrb	r3, [r7, #15]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d103      	bne.n	8000c12 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	4a03      	ldr	r2, [pc, #12]	@ (8000c1c <disk_initialize+0x4c>)
 8000c0e:	2101      	movs	r1, #1
 8000c10:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20003c9c 	.word	0x20003c9c

08000c20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <disk_read+0x3c>)
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	4413      	add	r3, r2
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	689c      	ldr	r4, [r3, #8]
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <disk_read+0x3c>)
 8000c40:	4413      	add	r3, r2
 8000c42:	7a18      	ldrb	r0, [r3, #8]
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	47a0      	blx	r4
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20003c9c 	.word	0x20003c9c

08000c60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <disk_write+0x3c>)
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	68dc      	ldr	r4, [r3, #12]
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	4a07      	ldr	r2, [pc, #28]	@ (8000c9c <disk_write+0x3c>)
 8000c80:	4413      	add	r3, r2
 8000c82:	7a18      	ldrb	r0, [r3, #8]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	47a0      	blx	r4
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	371c      	adds	r7, #28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd90      	pop	{r4, r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20003c9c 	.word	0x20003c9c

08000ca0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	603a      	str	r2, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	460b      	mov	r3, r1
 8000cae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a09      	ldr	r2, [pc, #36]	@ (8000cd8 <disk_ioctl+0x38>)
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	79fa      	ldrb	r2, [r7, #7]
 8000cbe:	4906      	ldr	r1, [pc, #24]	@ (8000cd8 <disk_ioctl+0x38>)
 8000cc0:	440a      	add	r2, r1
 8000cc2:	7a10      	ldrb	r0, [r2, #8]
 8000cc4:	79b9      	ldrb	r1, [r7, #6]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4798      	blx	r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]
  return res;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20003c9c 	.word	0x20003c9c

08000cdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000ce0:	4904      	ldr	r1, [pc, #16]	@ (8000cf4 <MX_FATFS_Init+0x18>)
 8000ce2:	4805      	ldr	r0, [pc, #20]	@ (8000cf8 <MX_FATFS_Init+0x1c>)
 8000ce4:	f00d fba0 	bl	800e428 <FATFS_LinkDriver>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <MX_FATFS_Init+0x20>)
 8000cee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000184 	.word	0x20000184
 8000cf8:	20000010 	.word	0x20000010
 8000cfc:	20000180 	.word	0x20000180

08000d00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8000d04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);	// không cần thiết vì ở đây chỉ có 1 slave
	HAL_Delay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f001 fae7 	bl	80022e8 <HAL_Delay>
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
	HAL_Delay(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f001 fae0 	bl	80022e8 <HAL_Delay>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d36:	1df9      	adds	r1, r7, #7
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <SPI_TxByte+0x20>)
 8000d3e:	f003 fd6e 	bl	800481e <HAL_SPI_Transmit>
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000151c 	.word	0x2000151c

08000d50 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000d5c:	887a      	ldrh	r2, [r7, #2]
 8000d5e:	2364      	movs	r3, #100	@ 0x64
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	4803      	ldr	r0, [pc, #12]	@ (8000d70 <SPI_TxBuffer+0x20>)
 8000d64:	f003 fd5b 	bl	800481e <HAL_SPI_Transmit>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2000151c 	.word	0x2000151c

08000d74 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af02      	add	r7, sp, #8
	uint8_t dummy, data;	// dummy dùng để trigger SPI nhận dữ liệu, giải thích vì sao chọn 0xFF
	dummy = 0xFF;
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	71fb      	strb	r3, [r7, #7]

//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d7e:	1dba      	adds	r2, r7, #6
 8000d80:	1df9      	adds	r1, r7, #7
 8000d82:	2364      	movs	r3, #100	@ 0x64
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	4803      	ldr	r0, [pc, #12]	@ (8000d98 <SPI_RxByte+0x24>)
 8000d8a:	f003 fe8c 	bl	8004aa6 <HAL_SPI_TransmitReceive>

	return data;
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2000151c 	.word	0x2000151c

08000d9c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000da4:	f7ff ffe6 	bl	8000d74 <SPI_RxByte>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	701a      	strb	r2, [r3, #0]
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 100;	// giải thích ý nghĩa của Timer2
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <SD_ReadyWait+0x30>)
 8000dc0:	2264      	movs	r2, #100	@ 0x64
 8000dc2:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000dc4:	f7ff ffd6 	bl	8000d74 <SPI_RxByte>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	2bff      	cmp	r3, #255	@ 0xff
 8000dd0:	d004      	beq.n	8000ddc <SD_ReadyWait+0x24>
 8000dd2:	4b05      	ldr	r3, [pc, #20]	@ (8000de8 <SD_ReadyWait+0x30>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f3      	bne.n	8000dc4 <SD_ReadyWait+0xc>

	return res;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20003a42 	.word	0x20003a42

08000dec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000df2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000df6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000df8:	f7ff ff91 	bl	8000d1e <DESELECT>
	for(int i = 0; i < 10; i++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	e005      	b.n	8000e0e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000e02:	20ff      	movs	r0, #255	@ 0xff
 8000e04:	f7ff ff92 	bl	8000d2c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	2b09      	cmp	r3, #9
 8000e12:	ddf6      	ble.n	8000e02 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();	
 8000e14:	f7ff ff7c 	bl	8000d10 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000e2c:	2395      	movs	r3, #149	@ 0x95
 8000e2e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000e30:	463b      	mov	r3, r7
 8000e32:	2106      	movs	r1, #6
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff8b 	bl	8000d50 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e3a:	e002      	b.n	8000e42 <SD_PowerOn+0x56>
	{
		cnt--;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e42:	f7ff ff97 	bl	8000d74 <SPI_RxByte>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d002      	beq.n	8000e52 <SD_PowerOn+0x66>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f4      	bne.n	8000e3c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000e52:	f7ff ff64 	bl	8000d1e <DESELECT>
	SPI_TxByte(0XFF);
 8000e56:	20ff      	movs	r0, #255	@ 0xff
 8000e58:	f7ff ff68 	bl	8000d2c <SPI_TxByte>

	PowerFlag = 1;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <SD_PowerOn+0x80>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20001519 	.word	0x20001519

08000e70 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e74:	4b03      	ldr	r3, [pc, #12]	@ (8000e84 <SD_PowerOff+0x14>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	20001519 	.word	0x20001519

08000e88 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e8c:	4b03      	ldr	r3, [pc, #12]	@ (8000e9c <SD_CheckPower+0x14>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	20001519 	.word	0x20001519

08000ea0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 100;
 8000eaa:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <SD_RxDataBlock+0x5c>)
 8000eac:	2264      	movs	r2, #100	@ 0x64
 8000eae:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000eb0:	f7ff ff60 	bl	8000d74 <SPI_RxByte>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2bff      	cmp	r3, #255	@ 0xff
 8000ebc:	d104      	bne.n	8000ec8 <SD_RxDataBlock+0x28>
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <SD_RxDataBlock+0x5c>)
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f3      	bne.n	8000eb0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ecc:	d001      	beq.n	8000ed2 <SD_RxDataBlock+0x32>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e00f      	b.n	8000ef2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <SPI_RxBytePtr>
	} while(len--);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	1e5a      	subs	r2, r3, #1
 8000ee2:	603a      	str	r2, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f4      	bne.n	8000ed2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ee8:	f7ff ff44 	bl	8000d74 <SPI_RxByte>
	SPI_RxByte();
 8000eec:	f7ff ff42 	bl	8000d74 <SPI_RxByte>

	return TRUE;
 8000ef0:	2301      	movs	r3, #1
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20003a41 	.word	0x20003a41

08000f00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f10:	f7ff ff52 	bl	8000db8 <SD_ReadyWait>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2bff      	cmp	r3, #255	@ 0xff
 8000f18:	d001      	beq.n	8000f1e <SD_TxDataBlock+0x1e>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e03f      	b.n	8000f9e <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff03 	bl	8000d2c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f2a:	d030      	beq.n	8000f8e <SD_TxDataBlock+0x8e>
	{	Timer3 = 200;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <SD_TxDataBlock+0xa8>)
 8000f2e:	22c8      	movs	r2, #200	@ 0xc8
 8000f30:	801a      	strh	r2, [r3, #0]
		Timer4 =200;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <SD_TxDataBlock+0xac>)
 8000f34:	22c8      	movs	r2, #200	@ 0xc8
 8000f36:	801a      	strh	r2, [r3, #0]
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff07 	bl	8000d50 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000f42:	f7ff ff17 	bl	8000d74 <SPI_RxByte>
		SPI_RxByte();
 8000f46:	f7ff ff15 	bl	8000d74 <SPI_RxByte>

		/* receive response */
		while (i <= 64 && Timer4)
 8000f4a:	e00b      	b.n	8000f64 <SD_TxDataBlock+0x64>
		{
			resp = SPI_RxByte();
 8000f4c:	f7ff ff12 	bl	8000d74 <SPI_RxByte>
 8000f50:	4603      	mov	r3, r0
 8000f52:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f003 031f 	and.w	r3, r3, #31
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	d00b      	beq.n	8000f76 <SD_TxDataBlock+0x76>
			i++;
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	3301      	adds	r3, #1
 8000f62:	73bb      	strb	r3, [r7, #14]
		while (i <= 64 && Timer4)
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	2b40      	cmp	r3, #64	@ 0x40
 8000f68:	d806      	bhi.n	8000f78 <SD_TxDataBlock+0x78>
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <SD_TxDataBlock+0xac>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1eb      	bne.n	8000f4c <SD_TxDataBlock+0x4c>
 8000f74:	e000      	b.n	8000f78 <SD_TxDataBlock+0x78>
			if ((resp & 0x1F) == 0x05) break;
 8000f76:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0 && Timer3);
 8000f78:	bf00      	nop
 8000f7a:	f7ff fefb 	bl	8000d74 <SPI_RxByte>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d104      	bne.n	8000f8e <SD_TxDataBlock+0x8e>
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <SD_TxDataBlock+0xa8>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f5      	bne.n	8000f7a <SD_TxDataBlock+0x7a>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d101      	bne.n	8000f9c <SD_TxDataBlock+0x9c>
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <SD_TxDataBlock+0x9e>

	return FALSE;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20003a43 	.word	0x20003a43
 8000fac:	20003a44 	.word	0x20003a44

08000fb0 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000fbc:	f7ff fefc 	bl	8000db8 <SD_ReadyWait>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2bff      	cmp	r3, #255	@ 0xff
 8000fc4:	d001      	beq.n	8000fca <SD_SendCmd+0x1a>
 8000fc6:	23ff      	movs	r3, #255	@ 0xff
 8000fc8:	e042      	b.n	8001050 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fead 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	0e1b      	lsrs	r3, r3, #24
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fea7 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fea1 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fe9b 	bl	8000d2c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fe96 	bl	8000d2c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */		// giải thích các giá trị cho CRC
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	2b40      	cmp	r3, #64	@ 0x40
 8001004:	d102      	bne.n	800100c <SD_SendCmd+0x5c>
 8001006:	2395      	movs	r3, #149	@ 0x95
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e007      	b.n	800101c <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b48      	cmp	r3, #72	@ 0x48
 8001010:	d102      	bne.n	8001018 <SD_SendCmd+0x68>
 8001012:	2387      	movs	r3, #135	@ 0x87
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e001      	b.n	800101c <SD_SendCmd+0x6c>
	else crc = 1;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe84 	bl	8000d2c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b4c      	cmp	r3, #76	@ 0x4c
 8001028:	d101      	bne.n	800102e <SD_SendCmd+0x7e>
 800102a:	f7ff fea3 	bl	8000d74 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800102e:	230a      	movs	r3, #10
 8001030:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001032:	f7ff fe9f 	bl	8000d74 <SPI_RxByte>
 8001036:	4603      	mov	r3, r0
 8001038:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800103a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da05      	bge.n	800104e <SD_SendCmd+0x9e>
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	3b01      	subs	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]
 8001048:	7bbb      	ldrb	r3, [r7, #14]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f1      	bne.n	8001032 <SD_SendCmd+0x82>

	return res;
 800104e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <SD_disk_initialize+0x14>
 8001068:	2301      	movs	r3, #1
 800106a:	e0d5      	b.n	8001218 <SD_disk_initialize+0x1c0>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800106c:	4b6c      	ldr	r3, [pc, #432]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <SD_disk_initialize+0x2a>
 800107a:	4b69      	ldr	r3, [pc, #420]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	e0ca      	b.n	8001218 <SD_disk_initialize+0x1c0>

	/* power on */
	SD_PowerOn();
 8001082:	f7ff feb3 	bl	8000dec <SD_PowerOn>

	/* slave select */
	SELECT();
 8001086:	f7ff fe43 	bl	8000d10 <SELECT>

	/* check disk type */
	type = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800108e:	2100      	movs	r1, #0
 8001090:	2040      	movs	r0, #64	@ 0x40
 8001092:	f7ff ff8d 	bl	8000fb0 <SD_SendCmd>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	f040 80a5 	bne.w	80011e8 <SD_disk_initialize+0x190>
	{
		/* timeout 1 sec */
		Timer1 = 100;
 800109e:	4b61      	ldr	r3, [pc, #388]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80010a0:	2264      	movs	r2, #100	@ 0x64
 80010a2:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command*/
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80010a4:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80010a8:	2048      	movs	r0, #72	@ 0x48
 80010aa:	f7ff ff81 	bl	8000fb0 <SD_SendCmd>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d158      	bne.n	8001166 <SD_disk_initialize+0x10e>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
 80010b8:	e00c      	b.n	80010d4 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 80010ba:	7bfc      	ldrb	r4, [r7, #15]
 80010bc:	f7ff fe5a 	bl	8000d74 <SPI_RxByte>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	f104 0310 	add.w	r3, r4, #16
 80010c8:	443b      	add	r3, r7
 80010ca:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	3301      	adds	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d9ef      	bls.n	80010ba <SD_disk_initialize+0x62>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010da:	7abb      	ldrb	r3, [r7, #10]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 8083 	bne.w	80011e8 <SD_disk_initialize+0x190>
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2baa      	cmp	r3, #170	@ 0xaa
 80010e6:	d17f      	bne.n	80011e8 <SD_disk_initialize+0x190>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010e8:	2100      	movs	r1, #0
 80010ea:	2077      	movs	r0, #119	@ 0x77
 80010ec:	f7ff ff60 	bl	8000fb0 <SD_SendCmd>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d807      	bhi.n	8001106 <SD_disk_initialize+0xae>
 80010f6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010fa:	2069      	movs	r0, #105	@ 0x69
 80010fc:	f7ff ff58 	bl	8000fb0 <SD_SendCmd>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d005      	beq.n	8001112 <SD_disk_initialize+0xba>
				} while (Timer1);
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <SD_disk_initialize+0x1cc>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	b29b      	uxth	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1eb      	bne.n	80010e8 <SD_disk_initialize+0x90>
 8001110:	e000      	b.n	8001114 <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001112:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001114:	4b43      	ldr	r3, [pc, #268]	@ (8001224 <SD_disk_initialize+0x1cc>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d064      	beq.n	80011e8 <SD_disk_initialize+0x190>
 800111e:	2100      	movs	r1, #0
 8001120:	207a      	movs	r0, #122	@ 0x7a
 8001122:	f7ff ff45 	bl	8000fb0 <SD_SendCmd>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d15d      	bne.n	80011e8 <SD_disk_initialize+0x190>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e00c      	b.n	800114c <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001132:	7bfc      	ldrb	r4, [r7, #15]
 8001134:	f7ff fe1e 	bl	8000d74 <SPI_RxByte>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	f104 0310 	add.w	r3, r4, #16
 8001140:	443b      	add	r3, r7
 8001142:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	3301      	adds	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d9ef      	bls.n	8001132 <SD_disk_initialize+0xda>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001152:	7a3b      	ldrb	r3, [r7, #8]
 8001154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SD_disk_initialize+0x108>
 800115c:	230c      	movs	r3, #12
 800115e:	e000      	b.n	8001162 <SD_disk_initialize+0x10a>
 8001160:	2304      	movs	r3, #4
 8001162:	73bb      	strb	r3, [r7, #14]
 8001164:	e040      	b.n	80011e8 <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001166:	2100      	movs	r1, #0
 8001168:	2077      	movs	r0, #119	@ 0x77
 800116a:	f7ff ff21 	bl	8000fb0 <SD_SendCmd>
 800116e:	4603      	mov	r3, r0
 8001170:	2b01      	cmp	r3, #1
 8001172:	d808      	bhi.n	8001186 <SD_disk_initialize+0x12e>
 8001174:	2100      	movs	r1, #0
 8001176:	2069      	movs	r0, #105	@ 0x69
 8001178:	f7ff ff1a 	bl	8000fb0 <SD_SendCmd>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d801      	bhi.n	8001186 <SD_disk_initialize+0x12e>
 8001182:	2302      	movs	r3, #2
 8001184:	e000      	b.n	8001188 <SD_disk_initialize+0x130>
 8001186:	2301      	movs	r3, #1
 8001188:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d10e      	bne.n	80011ae <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001190:	2100      	movs	r1, #0
 8001192:	2077      	movs	r0, #119	@ 0x77
 8001194:	f7ff ff0c 	bl	8000fb0 <SD_SendCmd>
 8001198:	4603      	mov	r3, r0
 800119a:	2b01      	cmp	r3, #1
 800119c:	d80e      	bhi.n	80011bc <SD_disk_initialize+0x164>
 800119e:	2100      	movs	r1, #0
 80011a0:	2069      	movs	r0, #105	@ 0x69
 80011a2:	f7ff ff05 	bl	8000fb0 <SD_SendCmd>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <SD_disk_initialize+0x164>
 80011ac:	e00d      	b.n	80011ca <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011ae:	2100      	movs	r1, #0
 80011b0:	2041      	movs	r0, #65	@ 0x41
 80011b2:	f7ff fefd 	bl	8000fb0 <SD_SendCmd>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <SD_disk_initialize+0x170>
				}

			} while (Timer1);
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1e1      	bne.n	800118a <SD_disk_initialize+0x132>
 80011c6:	e000      	b.n	80011ca <SD_disk_initialize+0x172>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011c8:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80011ca:	4b16      	ldr	r3, [pc, #88]	@ (8001224 <SD_disk_initialize+0x1cc>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <SD_disk_initialize+0x18c>
 80011d4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d8:	2050      	movs	r0, #80	@ 0x50
 80011da:	f7ff fee9 	bl	8000fb0 <SD_SendCmd>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SD_disk_initialize+0x190>
 80011e4:	2300      	movs	r3, #0
 80011e6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80011e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <SD_disk_initialize+0x1d0>)
 80011ea:	7bbb      	ldrb	r3, [r7, #14]
 80011ec:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80011ee:	f7ff fd96 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 80011f2:	f7ff fdbf 	bl	8000d74 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d008      	beq.n	800120e <SD_disk_initialize+0x1b6>
	{
		Stat &= ~STA_NOINIT;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <SD_disk_initialize+0x1c8>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <SD_disk_initialize+0x1c8>)
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e001      	b.n	8001212 <SD_disk_initialize+0x1ba>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 800120e:	f7ff fe2f 	bl	8000e70 <SD_PowerOff>
	}

	return Stat;
 8001212:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <SD_disk_initialize+0x1c8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	20000000 	.word	0x20000000
 8001224:	20003a41 	.word	0x20003a41
 8001228:	20001518 	.word	0x20001518

0800122c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <SD_disk_status+0x14>
 800123c:	2301      	movs	r3, #1
 800123e:	e002      	b.n	8001246 <SD_disk_status+0x1a>
	return Stat;
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SD_disk_status+0x28>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000

08001258 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <SD_disk_read+0x1c>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d101      	bne.n	8001278 <SD_disk_read+0x20>
 8001274:	2304      	movs	r3, #4
 8001276:	e051      	b.n	800131c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <SD_disk_read+0xcc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SD_disk_read+0x32>
 8001286:	2303      	movs	r3, #3
 8001288:	e048      	b.n	800131c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800128a:	4b27      	ldr	r3, [pc, #156]	@ (8001328 <SD_disk_read+0xd0>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <SD_disk_read+0x44>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	607b      	str	r3, [r7, #4]

	SELECT();
 800129c:	f7ff fd38 	bl	8000d10 <SELECT>

	if (count == 1)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d111      	bne.n	80012ca <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2051      	movs	r0, #81	@ 0x51
 80012aa:	f7ff fe81 	bl	8000fb0 <SD_SendCmd>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d129      	bne.n	8001308 <SD_disk_read+0xb0>
 80012b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f7ff fdf1 	bl	8000ea0 <SD_RxDataBlock>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d021      	beq.n	8001308 <SD_disk_read+0xb0>
 80012c4:	2300      	movs	r3, #0
 80012c6:	603b      	str	r3, [r7, #0]
 80012c8:	e01e      	b.n	8001308 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2052      	movs	r0, #82	@ 0x52
 80012ce:	f7ff fe6f 	bl	8000fb0 <SD_SendCmd>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d117      	bne.n	8001308 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80012d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012dc:	68b8      	ldr	r0, [r7, #8]
 80012de:	f7ff fddf 	bl	8000ea0 <SD_RxDataBlock>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00a      	beq.n	80012fe <SD_disk_read+0xa6>
				buff += 512;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012ee:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ed      	bne.n	80012d8 <SD_disk_read+0x80>
 80012fc:	e000      	b.n	8001300 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80012fe:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001300:	2100      	movs	r1, #0
 8001302:	204c      	movs	r0, #76	@ 0x4c
 8001304:	f7ff fe54 	bl	8000fb0 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001308:	f7ff fd09 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 800130c:	f7ff fd32 	bl	8000d74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	bf14      	ite	ne
 8001316:	2301      	movne	r3, #1
 8001318:	2300      	moveq	r3, #0
 800131a:	b2db      	uxtb	r3, r3
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	20001518 	.word	0x20001518

0800132c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d102      	bne.n	8001348 <SD_disk_write+0x1c>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <SD_disk_write+0x20>
 8001348:	2304      	movs	r3, #4
 800134a:	e06b      	b.n	8001424 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800134c:	4b37      	ldr	r3, [pc, #220]	@ (800142c <SD_disk_write+0x100>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SD_disk_write+0x32>
 800135a:	2303      	movs	r3, #3
 800135c:	e062      	b.n	8001424 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800135e:	4b33      	ldr	r3, [pc, #204]	@ (800142c <SD_disk_write+0x100>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SD_disk_write+0x44>
 800136c:	2302      	movs	r3, #2
 800136e:	e059      	b.n	8001424 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001370:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <SD_disk_write+0x104>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d102      	bne.n	8001382 <SD_disk_write+0x56>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	607b      	str	r3, [r7, #4]

	SELECT();
 8001382:	f7ff fcc5 	bl	8000d10 <SELECT>

	if (count == 1)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d110      	bne.n	80013ae <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	2058      	movs	r0, #88	@ 0x58
 8001390:	f7ff fe0e 	bl	8000fb0 <SD_SendCmd>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d13a      	bne.n	8001410 <SD_disk_write+0xe4>
 800139a:	21fe      	movs	r1, #254	@ 0xfe
 800139c:	68b8      	ldr	r0, [r7, #8]
 800139e:	f7ff fdaf 	bl	8000f00 <SD_TxDataBlock>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d033      	beq.n	8001410 <SD_disk_write+0xe4>
			count = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	603b      	str	r3, [r7, #0]
 80013ac:	e030      	b.n	8001410 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80013ae:	4b20      	ldr	r3, [pc, #128]	@ (8001430 <SD_disk_write+0x104>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d007      	beq.n	80013ca <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013ba:	2100      	movs	r1, #0
 80013bc:	2077      	movs	r0, #119	@ 0x77
 80013be:	f7ff fdf7 	bl	8000fb0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80013c2:	6839      	ldr	r1, [r7, #0]
 80013c4:	2057      	movs	r0, #87	@ 0x57
 80013c6:	f7ff fdf3 	bl	8000fb0 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	2059      	movs	r0, #89	@ 0x59
 80013ce:	f7ff fdef 	bl	8000fb0 <SD_SendCmd>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d11b      	bne.n	8001410 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013d8:	21fc      	movs	r1, #252	@ 0xfc
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f7ff fd90 	bl	8000f00 <SD_TxDataBlock>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <SD_disk_write+0xd0>
				buff += 512;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80013ec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	3b01      	subs	r3, #1
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ee      	bne.n	80013d8 <SD_disk_write+0xac>
 80013fa:	e000      	b.n	80013fe <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013fc:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80013fe:	21fd      	movs	r1, #253	@ 0xfd
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fd7d 	bl	8000f00 <SD_TxDataBlock>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <SD_disk_write+0xe4>
			{
				count = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001410:	f7ff fc85 	bl	8000d1e <DESELECT>
	SPI_RxByte();
 8001414:	f7ff fcae 	bl	8000d74 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	bf14      	ite	ne
 800141e:	2301      	movne	r3, #1
 8001420:	2300      	moveq	r3, #0
 8001422:	b2db      	uxtb	r3, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20001518 	.word	0x20001518

08001434 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b08b      	sub	sp, #44	@ 0x2c
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	603a      	str	r2, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	460b      	mov	r3, r1
 8001442:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SD_disk_ioctl+0x1e>
 800144e:	2304      	movs	r3, #4
 8001450:	e113      	b.n	800167a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	2b05      	cmp	r3, #5
 800145c:	d124      	bne.n	80014a8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d012      	beq.n	800148c <SD_disk_ioctl+0x58>
 8001466:	2b02      	cmp	r3, #2
 8001468:	dc1a      	bgt.n	80014a0 <SD_disk_ioctl+0x6c>
 800146a:	2b00      	cmp	r3, #0
 800146c:	d002      	beq.n	8001474 <SD_disk_ioctl+0x40>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d006      	beq.n	8001480 <SD_disk_ioctl+0x4c>
 8001472:	e015      	b.n	80014a0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001474:	f7ff fcfc 	bl	8000e70 <SD_PowerOff>
			res = RES_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800147e:	e0fa      	b.n	8001676 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001480:	f7ff fcb4 	bl	8000dec <SD_PowerOn>
			res = RES_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800148a:	e0f4      	b.n	8001676 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	1c5c      	adds	r4, r3, #1
 8001490:	f7ff fcfa 	bl	8000e88 <SD_CheckPower>
 8001494:	4603      	mov	r3, r0
 8001496:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800149e:	e0ea      	b.n	8001676 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80014a0:	2304      	movs	r3, #4
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80014a6:	e0e6      	b.n	8001676 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80014a8:	4b76      	ldr	r3, [pc, #472]	@ (8001684 <SD_disk_ioctl+0x250>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SD_disk_ioctl+0x86>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0df      	b.n	800167a <SD_disk_ioctl+0x246>

		SELECT();
 80014ba:	f7ff fc29 	bl	8000d10 <SELECT>

		switch (ctrl)
 80014be:	79bb      	ldrb	r3, [r7, #6]
 80014c0:	2b0d      	cmp	r3, #13
 80014c2:	f200 80c9 	bhi.w	8001658 <SD_disk_ioctl+0x224>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <SD_disk_ioctl+0x98>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	080015c3 	.word	0x080015c3
 80014d0:	08001505 	.word	0x08001505
 80014d4:	080015b3 	.word	0x080015b3
 80014d8:	08001659 	.word	0x08001659
 80014dc:	08001659 	.word	0x08001659
 80014e0:	08001659 	.word	0x08001659
 80014e4:	08001659 	.word	0x08001659
 80014e8:	08001659 	.word	0x08001659
 80014ec:	08001659 	.word	0x08001659
 80014f0:	08001659 	.word	0x08001659
 80014f4:	08001659 	.word	0x08001659
 80014f8:	080015d5 	.word	0x080015d5
 80014fc:	080015f9 	.word	0x080015f9
 8001500:	0800161d 	.word	0x0800161d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001504:	2100      	movs	r1, #0
 8001506:	2049      	movs	r0, #73	@ 0x49
 8001508:	f7ff fd52 	bl	8000fb0 <SD_SendCmd>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 80a6 	bne.w	8001660 <SD_disk_ioctl+0x22c>
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2110      	movs	r1, #16
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fcc0 	bl	8000ea0 <SD_RxDataBlock>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 809c 	beq.w	8001660 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	099b      	lsrs	r3, r3, #6
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d10d      	bne.n	800154e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001532:	7d7b      	ldrb	r3, [r7, #21]
 8001534:	461a      	mov	r2, r3
 8001536:	7d3b      	ldrb	r3, [r7, #20]
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b29b      	uxth	r3, r3
 800153c:	4413      	add	r3, r2
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001544:	8bfb      	ldrh	r3, [r7, #30]
 8001546:	029a      	lsls	r2, r3, #10
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	e02d      	b.n	80015aa <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800154e:	7c7b      	ldrb	r3, [r7, #17]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	b2da      	uxtb	r2, r3
 8001556:	7dbb      	ldrb	r3, [r7, #22]
 8001558:	09db      	lsrs	r3, r3, #7
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2da      	uxtb	r2, r3
 8001560:	7d7b      	ldrb	r3, [r7, #21]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	b2db      	uxtb	r3, r3
 8001566:	f003 0306 	and.w	r3, r3, #6
 800156a:	b2db      	uxtb	r3, r3
 800156c:	4413      	add	r3, r2
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3302      	adds	r3, #2
 8001572:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001576:	7d3b      	ldrb	r3, [r7, #20]
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	b2db      	uxtb	r3, r3
 800157c:	461a      	mov	r2, r3
 800157e:	7cfb      	ldrb	r3, [r7, #19]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b29a      	uxth	r2, r3
 8001588:	7cbb      	ldrb	r3, [r7, #18]
 800158a:	029b      	lsls	r3, r3, #10
 800158c:	b29b      	uxth	r3, r3
 800158e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001592:	b29b      	uxth	r3, r3
 8001594:	4413      	add	r3, r2
 8001596:	b29b      	uxth	r3, r3
 8001598:	3301      	adds	r3, #1
 800159a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800159c:	8bfa      	ldrh	r2, [r7, #30]
 800159e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80015a2:	3b09      	subs	r3, #9
 80015a4:	409a      	lsls	r2, r3
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80015b0:	e056      	b.n	8001660 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015c0:	e055      	b.n	800166e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80015c2:	f7ff fbf9 	bl	8000db8 <SD_ReadyWait>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2bff      	cmp	r3, #255	@ 0xff
 80015ca:	d14b      	bne.n	8001664 <SD_disk_ioctl+0x230>
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015d2:	e047      	b.n	8001664 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015d4:	2100      	movs	r1, #0
 80015d6:	2049      	movs	r0, #73	@ 0x49
 80015d8:	f7ff fcea 	bl	8000fb0 <SD_SendCmd>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d142      	bne.n	8001668 <SD_disk_ioctl+0x234>
 80015e2:	2110      	movs	r1, #16
 80015e4:	6a38      	ldr	r0, [r7, #32]
 80015e6:	f7ff fc5b 	bl	8000ea0 <SD_RxDataBlock>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03b      	beq.n	8001668 <SD_disk_ioctl+0x234>
 80015f0:	2300      	movs	r3, #0
 80015f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015f6:	e037      	b.n	8001668 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015f8:	2100      	movs	r1, #0
 80015fa:	204a      	movs	r0, #74	@ 0x4a
 80015fc:	f7ff fcd8 	bl	8000fb0 <SD_SendCmd>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d132      	bne.n	800166c <SD_disk_ioctl+0x238>
 8001606:	2110      	movs	r1, #16
 8001608:	6a38      	ldr	r0, [r7, #32]
 800160a:	f7ff fc49 	bl	8000ea0 <SD_RxDataBlock>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d02b      	beq.n	800166c <SD_disk_ioctl+0x238>
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800161a:	e027      	b.n	800166c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800161c:	2100      	movs	r1, #0
 800161e:	207a      	movs	r0, #122	@ 0x7a
 8001620:	f7ff fcc6 	bl	8000fb0 <SD_SendCmd>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d116      	bne.n	8001658 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800162a:	2300      	movs	r3, #0
 800162c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001630:	e00b      	b.n	800164a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001632:	6a3c      	ldr	r4, [r7, #32]
 8001634:	1c63      	adds	r3, r4, #1
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	f7ff fb9c 	bl	8000d74 <SPI_RxByte>
 800163c:	4603      	mov	r3, r0
 800163e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001640:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001644:	3301      	adds	r3, #1
 8001646:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800164a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800164e:	2b03      	cmp	r3, #3
 8001650:	d9ef      	bls.n	8001632 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001658:	2304      	movs	r3, #4
 800165a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800165e:	e006      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 8001660:	bf00      	nop
 8001662:	e004      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 8001664:	bf00      	nop
 8001666:	e002      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 8001668:	bf00      	nop
 800166a:	e000      	b.n	800166e <SD_disk_ioctl+0x23a>
			break;
 800166c:	bf00      	nop
		}

		DESELECT();
 800166e:	f7ff fb56 	bl	8000d1e <DESELECT>
		SPI_RxByte();
 8001672:	f7ff fb7f 	bl	8000d74 <SPI_RxByte>
	}

	return res;
 8001676:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800167a:	4618      	mov	r0, r3
 800167c:	372c      	adds	r7, #44	@ 0x2c
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000

08001688 <SD_List_File>:

/* List- File Function */

void SD_List_File(void){
 8001688:	b598      	push	{r3, r4, r7, lr}
 800168a:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 800168c:	2200      	movs	r2, #0
 800168e:	4935      	ldr	r1, [pc, #212]	@ (8001764 <SD_List_File+0xdc>)
 8001690:	4835      	ldr	r0, [pc, #212]	@ (8001768 <SD_List_File+0xe0>)
 8001692:	f00b fb05 	bl	800cca0 <f_mount>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <SD_List_File+0x1a>
	{
		Error_Handler();
 800169c:	f000 fbf4 	bl	8001e88 <Error_Handler>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
			}
			f_closedir(&dir);
		}
	}
}
 80016a0:	e05e      	b.n	8001760 <SD_List_File+0xd8>
		strcpy(fileInfo.fname, (char*)sect);
 80016a2:	4932      	ldr	r1, [pc, #200]	@ (800176c <SD_List_File+0xe4>)
 80016a4:	4832      	ldr	r0, [pc, #200]	@ (8001770 <SD_List_File+0xe8>)
 80016a6:	f00d fcc1 	bl	800f02c <strcpy>
		fileInfo.fsize = sizeof(sect);
 80016aa:	4b32      	ldr	r3, [pc, #200]	@ (8001774 <SD_List_File+0xec>)
 80016ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016b0:	601a      	str	r2, [r3, #0]
		result = f_opendir(&dir, "/");
 80016b2:	4931      	ldr	r1, [pc, #196]	@ (8001778 <SD_List_File+0xf0>)
 80016b4:	4831      	ldr	r0, [pc, #196]	@ (800177c <SD_List_File+0xf4>)
 80016b6:	f00c fac0 	bl	800dc3a <f_opendir>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <SD_List_File+0xf8>)
 80016c0:	701a      	strb	r2, [r3, #0]
		if (result == FR_OK)
 80016c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <SD_List_File+0xf8>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d14a      	bne.n	8001760 <SD_List_File+0xd8>
				result = f_readdir(&dir, &fileInfo);
 80016ca:	492a      	ldr	r1, [pc, #168]	@ (8001774 <SD_List_File+0xec>)
 80016cc:	482b      	ldr	r0, [pc, #172]	@ (800177c <SD_List_File+0xf4>)
 80016ce:	f00c fb4d 	bl	800dd6c <f_readdir>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <SD_List_File+0xf8>)
 80016d8:	701a      	strb	r2, [r3, #0]
				if (result==FR_OK && fileInfo.fname[0])
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <SD_List_File+0xf8>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d13b      	bne.n	800175a <SD_List_File+0xd2>
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <SD_List_File+0xec>)
 80016e4:	7d9b      	ldrb	r3, [r3, #22]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d037      	beq.n	800175a <SD_List_File+0xd2>
					fn = fileInfo.fname; // Pointer to the LFN buffer
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <SD_List_File+0xfc>)
 80016ec:	4a20      	ldr	r2, [pc, #128]	@ (8001770 <SD_List_File+0xe8>)
 80016ee:	601a      	str	r2, [r3, #0]
					if(strlen(fn)) HAL_UART_Transmit(&huart1,(uint8_t*)fn,strlen(fn),0x1000);
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <SD_List_File+0xfc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00f      	beq.n	800171a <SD_List_File+0x92>
 80016fa:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <SD_List_File+0xfc>)
 80016fc:	681c      	ldr	r4, [r3, #0]
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <SD_List_File+0xfc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fd74 	bl	80001f0 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001710:	4621      	mov	r1, r4
 8001712:	481d      	ldr	r0, [pc, #116]	@ (8001788 <SD_List_File+0x100>)
 8001714:	f003 fc9c 	bl	8005050 <HAL_UART_Transmit>
 8001718:	e00a      	b.n	8001730 <SD_List_File+0xa8>
					else HAL_UART_Transmit(&huart1,(uint8_t*)fileInfo.fname,strlen((char*)fileInfo.fname),0x1000);
 800171a:	4815      	ldr	r0, [pc, #84]	@ (8001770 <SD_List_File+0xe8>)
 800171c:	f7fe fd68 	bl	80001f0 <strlen>
 8001720:	4603      	mov	r3, r0
 8001722:	b29a      	uxth	r2, r3
 8001724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001728:	4911      	ldr	r1, [pc, #68]	@ (8001770 <SD_List_File+0xe8>)
 800172a:	4817      	ldr	r0, [pc, #92]	@ (8001788 <SD_List_File+0x100>)
 800172c:	f003 fc90 	bl	8005050 <HAL_UART_Transmit>
					if(fileInfo.fattrib&AM_DIR)
 8001730:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <SD_List_File+0xec>)
 8001732:	7a1b      	ldrb	r3, [r3, #8]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <SD_List_File+0xc2>
						HAL_UART_Transmit(&huart1,(uint8_t*)"  [DIR]",7,0x1000);
 800173c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001740:	2207      	movs	r2, #7
 8001742:	4912      	ldr	r1, [pc, #72]	@ (800178c <SD_List_File+0x104>)
 8001744:	4810      	ldr	r0, [pc, #64]	@ (8001788 <SD_List_File+0x100>)
 8001746:	f003 fc83 	bl	8005050 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 800174a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174e:	2202      	movs	r2, #2
 8001750:	490f      	ldr	r1, [pc, #60]	@ (8001790 <SD_List_File+0x108>)
 8001752:	480d      	ldr	r0, [pc, #52]	@ (8001788 <SD_List_File+0x100>)
 8001754:	f003 fc7c 	bl	8005050 <HAL_UART_Transmit>
				result = f_readdir(&dir, &fileInfo);
 8001758:	e7b7      	b.n	80016ca <SD_List_File+0x42>
			f_closedir(&dir);
 800175a:	4808      	ldr	r0, [pc, #32]	@ (800177c <SD_List_File+0xf4>)
 800175c:	f00c fae0 	bl	800dd20 <f_closedir>
}
 8001760:	bf00      	nop
 8001762:	bd98      	pop	{r3, r4, r7, pc}
 8001764:	20000188 	.word	0x20000188
 8001768:	2000018c 	.word	0x2000018c
 800176c:	200012dc 	.word	0x200012dc
 8001770:	200011da 	.word	0x200011da
 8001774:	200011c4 	.word	0x200011c4
 8001778:	0800f8ec 	.word	0x0800f8ec
 800177c:	200014e4 	.word	0x200014e4
 8001780:	200014dc 	.word	0x200014dc
 8001784:	200014e0 	.word	0x200014e0
 8001788:	20001574 	.word	0x20001574
 800178c:	0800f8f0 	.word	0x0800f8f0
 8001790:	0800f8f8 	.word	0x0800f8f8

08001794 <SD_creatSubDir>:
/* Hàm tạo thư mục */

void SD_creatSubDir(char* filename)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	if(f_mount(&SDFatFs,(TCHAR const*)USER_Path,0)!=FR_OK)
 800179c:	2200      	movs	r2, #0
 800179e:	4918      	ldr	r1, [pc, #96]	@ (8001800 <SD_creatSubDir+0x6c>)
 80017a0:	4818      	ldr	r0, [pc, #96]	@ (8001804 <SD_creatSubDir+0x70>)
 80017a2:	f00b fa7d 	bl	800cca0 <f_mount>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <SD_creatSubDir+0x1e>
	{
		Error_Handler();
 80017ac:	f000 fb6c 	bl	8001e88 <Error_Handler>
				break;
			default:
				Error_Handler();
		}
	}
}
 80017b0:	e021      	b.n	80017f6 <SD_creatSubDir+0x62>
		res = f_stat(filename,&fileInfo);
 80017b2:	4915      	ldr	r1, [pc, #84]	@ (8001808 <SD_creatSubDir+0x74>)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f00c fb16 	bl	800dde6 <f_stat>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b13      	ldr	r3, [pc, #76]	@ (800180c <SD_creatSubDir+0x78>)
 80017c0:	701a      	strb	r2, [r3, #0]
		switch(res)
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <SD_creatSubDir+0x78>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d012      	beq.n	80017f0 <SD_creatSubDir+0x5c>
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d10d      	bne.n	80017ea <SD_creatSubDir+0x56>
				res = f_mkdir(filename);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f00c fbf7 	bl	800dfc2 <f_mkdir>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <SD_creatSubDir+0x78>)
 80017da:	701a      	strb	r2, [r3, #0]
				if(res != FR_OK) Error_Handler();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <SD_creatSubDir+0x78>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d007      	beq.n	80017f4 <SD_creatSubDir+0x60>
 80017e4:	f000 fb50 	bl	8001e88 <Error_Handler>
				break;
 80017e8:	e004      	b.n	80017f4 <SD_creatSubDir+0x60>
				Error_Handler();
 80017ea:	f000 fb4d 	bl	8001e88 <Error_Handler>
}
 80017ee:	e002      	b.n	80017f6 <SD_creatSubDir+0x62>
				break;
 80017f0:	bf00      	nop
 80017f2:	e000      	b.n	80017f6 <SD_creatSubDir+0x62>
				break;
 80017f4:	bf00      	nop
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000188 	.word	0x20000188
 8001804:	2000018c 	.word	0x2000018c
 8001808:	200011c4 	.word	0x200011c4
 800180c:	200014dd 	.word	0x200014dd

08001810 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

// to send data to uart
void send_uart(char *string)
{
 8001810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	466b      	mov	r3, sp
 800181c:	469a      	mov	sl, r3
	/*
	uint16_t len = strlen(string);  
	memset(buf2, 0, sizeof(buf2));
	HAL_UART_Transmit(&huart1, (uint8_t)* string, len, 2000);
	*/
	uint16_t len = strlen(string);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe fce6 	bl	80001f0 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	82fb      	strh	r3, [r7, #22]
  char buf1[len];
 8001828:	8afe      	ldrh	r6, [r7, #22]
 800182a:	4633      	mov	r3, r6
 800182c:	3b01      	subs	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	b2b3      	uxth	r3, r6
 8001832:	2200      	movs	r2, #0
 8001834:	4698      	mov	r8, r3
 8001836:	4691      	mov	r9, r2
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001844:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001848:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800184c:	b2b3      	uxth	r3, r6
 800184e:	2200      	movs	r2, #0
 8001850:	461c      	mov	r4, r3
 8001852:	4615      	mov	r5, r2
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	00eb      	lsls	r3, r5, #3
 800185e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001862:	00e2      	lsls	r2, r4, #3
 8001864:	4633      	mov	r3, r6
 8001866:	3307      	adds	r3, #7
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	ebad 0d03 	sub.w	sp, sp, r3
 8001870:	466b      	mov	r3, sp
 8001872:	3300      	adds	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  memset(buf1, 0, sizeof(buf1));
 8001876:	4633      	mov	r3, r6
 8001878:	461a      	mov	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f00d fba1 	bl	800efc4 <memset>
  strcpy(buf1, string);
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f00d fbd1 	bl	800f02c <strcpy>
  HAL_UART_Transmit(&huart1,(char*) buf1, sizeof(buf1), 2000);
 800188a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800188e:	4632      	mov	r2, r6
 8001890:	68f9      	ldr	r1, [r7, #12]
 8001892:	4804      	ldr	r0, [pc, #16]	@ (80018a4 <send_uart+0x94>)
 8001894:	f003 fbdc 	bl	8005050 <HAL_UART_Transmit>
 8001898:	46d5      	mov	sp, sl

}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018a4:	20001574 	.word	0x20001574

080018a8 <bufsize>:

int bufsize(char *buf){
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	int i=0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0' )i++;
 80018b4:	e002      	b.n	80018bc <bufsize+0x14>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3301      	adds	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f6      	bne.n	80018b6 <bufsize+0xe>

	return i;
 80018c8:	68fb      	ldr	r3, [r7, #12]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <clear_buffer>:
	}
}


void clear_buffer (void)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
	for (int i=0; i<1024; i++) buffer[i] = '\0';
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	e007      	b.n	80018f4 <clear_buffer+0x1c>
 80018e4:	4a09      	ldr	r2, [pc, #36]	@ (800190c <clear_buffer+0x34>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3301      	adds	r3, #1
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fa:	dbf3      	blt.n	80018e4 <clear_buffer+0xc>
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20003628 	.word	0x20003628

08001910 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001914:	f000 fc76 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001918:	f000 f99c 	bl	8001c54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191c:	f000 fa64 	bl	8001de8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001920:	f000 fa02 	bl	8001d28 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001924:	f000 fa36 	bl	8001d94 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001928:	f7ff f9d8 	bl	8000cdc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800192c:	f00c fe52 	bl	800e5d4 <MX_USB_DEVICE_Init>
  //SD_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001930:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001934:	f000 fcd8 	bl	80022e8 <HAL_Delay>
  fresult = f_unlink("/file1.txt");
  if (fresult == FR_OK){
	  send_uart("file1.txt removed sucessfully\n");
  }
*/
  fresult = f_mount(&fs, "/", 1);
 8001938:	2201      	movs	r2, #1
 800193a:	49a5      	ldr	r1, [pc, #660]	@ (8001bd0 <main+0x2c0>)
 800193c:	48a5      	ldr	r0, [pc, #660]	@ (8001bd4 <main+0x2c4>)
 800193e:	f00b f9af 	bl	800cca0 <f_mount>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4ba4      	ldr	r3, [pc, #656]	@ (8001bd8 <main+0x2c8>)
 8001948:	701a      	strb	r2, [r3, #0]
    	if (fresult != FR_OK) send_uart ("ERROR in mounting SD CARD...\n\n");
 800194a:	4ba3      	ldr	r3, [pc, #652]	@ (8001bd8 <main+0x2c8>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <main+0x4a>
 8001952:	48a2      	ldr	r0, [pc, #648]	@ (8001bdc <main+0x2cc>)
 8001954:	f7ff ff5c 	bl	8001810 <send_uart>
 8001958:	e002      	b.n	8001960 <main+0x50>
    	else send_uart("SD CARD mounted successfully...\n\n");
 800195a:	48a1      	ldr	r0, [pc, #644]	@ (8001be0 <main+0x2d0>)
 800195c:	f7ff ff58 	bl	8001810 <send_uart>


    	/*************** Card capacity details ********************/

    	/* Check free space */
    	f_getfree("", &fre_clust, &pfs);
 8001960:	4aa0      	ldr	r2, [pc, #640]	@ (8001be4 <main+0x2d4>)
 8001962:	49a1      	ldr	r1, [pc, #644]	@ (8001be8 <main+0x2d8>)
 8001964:	48a1      	ldr	r0, [pc, #644]	@ (8001bec <main+0x2dc>)
 8001966:	f00c fa77 	bl	800de58 <f_getfree>

    	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800196a:	4b9e      	ldr	r3, [pc, #632]	@ (8001be4 <main+0x2d4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	3b02      	subs	r3, #2
 8001972:	4a9c      	ldr	r2, [pc, #624]	@ (8001be4 <main+0x2d4>)
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	8952      	ldrh	r2, [r2, #10]
 8001978:	fb02 f303 	mul.w	r3, r2, r3
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fefb 	bl	8000778 <__aeabi_ui2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf0 <main+0x2e0>)
 8001988:	f7fe fc8a 	bl	80002a0 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7fe ff6a 	bl	800086c <__aeabi_d2uiz>
 8001998:	4603      	mov	r3, r0
 800199a:	4a96      	ldr	r2, [pc, #600]	@ (8001bf4 <main+0x2e4>)
 800199c:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800199e:	4b95      	ldr	r3, [pc, #596]	@ (8001bf4 <main+0x2e4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4994      	ldr	r1, [pc, #592]	@ (8001bf8 <main+0x2e8>)
 80019a6:	4895      	ldr	r0, [pc, #596]	@ (8001bfc <main+0x2ec>)
 80019a8:	f00d faec 	bl	800ef84 <siprintf>
    	send_uart(buffer);
 80019ac:	4893      	ldr	r0, [pc, #588]	@ (8001bfc <main+0x2ec>)
 80019ae:	f7ff ff2f 	bl	8001810 <send_uart>
    	clear_buffer();
 80019b2:	f7ff ff91 	bl	80018d8 <clear_buffer>
    	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80019b6:	4b8b      	ldr	r3, [pc, #556]	@ (8001be4 <main+0x2d4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	895b      	ldrh	r3, [r3, #10]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b8a      	ldr	r3, [pc, #552]	@ (8001be8 <main+0x2d8>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fed6 	bl	8000778 <__aeabi_ui2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b87      	ldr	r3, [pc, #540]	@ (8001bf0 <main+0x2e0>)
 80019d2:	f7fe fc65 	bl	80002a0 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7fe ff45 	bl	800086c <__aeabi_d2uiz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a86      	ldr	r2, [pc, #536]	@ (8001c00 <main+0x2f0>)
 80019e6:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 80019e8:	4b85      	ldr	r3, [pc, #532]	@ (8001c00 <main+0x2f0>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4985      	ldr	r1, [pc, #532]	@ (8001c04 <main+0x2f4>)
 80019f0:	4882      	ldr	r0, [pc, #520]	@ (8001bfc <main+0x2ec>)
 80019f2:	f00d fac7 	bl	800ef84 <siprintf>
    	send_uart(buffer);
 80019f6:	4881      	ldr	r0, [pc, #516]	@ (8001bfc <main+0x2ec>)
 80019f8:	f7ff ff0a 	bl	8001810 <send_uart>
    	clear_buffer();
 80019fc:	f7ff ff6c 	bl	80018d8 <clear_buffer>


    	/************* The following operation is using PUTS and GETS *********************/

    	/* Open file to write/ create a file if it doesn't exist */
        fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001a00:	2213      	movs	r2, #19
 8001a02:	4981      	ldr	r1, [pc, #516]	@ (8001c08 <main+0x2f8>)
 8001a04:	4881      	ldr	r0, [pc, #516]	@ (8001c0c <main+0x2fc>)
 8001a06:	f00b f991 	bl	800cd2c <f_open>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b72      	ldr	r3, [pc, #456]	@ (8001bd8 <main+0x2c8>)
 8001a10:	701a      	strb	r2, [r3, #0]

    	/* Writing text */
    	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 8001a12:	497e      	ldr	r1, [pc, #504]	@ (8001c0c <main+0x2fc>)
 8001a14:	487e      	ldr	r0, [pc, #504]	@ (8001c10 <main+0x300>)
 8001a16:	f00c fc96 	bl	800e346 <f_puts>

    	/* Close file */
    	fresult = f_close(&fil);
 8001a1a:	487c      	ldr	r0, [pc, #496]	@ (8001c0c <main+0x2fc>)
 8001a1c:	f00b febf 	bl	800d79e <f_close>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <main+0x2c8>)
 8001a26:	701a      	strb	r2, [r3, #0]

    	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");
 8001a28:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd8 <main+0x2c8>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d102      	bne.n	8001a36 <main+0x126>
 8001a30:	4878      	ldr	r0, [pc, #480]	@ (8001c14 <main+0x304>)
 8001a32:	f7ff feed 	bl	8001810 <send_uart>

    	/* Open file to read */
    	fresult = f_open(&fil, "file1.txt", FA_READ);
 8001a36:	2201      	movs	r2, #1
 8001a38:	4973      	ldr	r1, [pc, #460]	@ (8001c08 <main+0x2f8>)
 8001a3a:	4874      	ldr	r0, [pc, #464]	@ (8001c0c <main+0x2fc>)
 8001a3c:	f00b f976 	bl	800cd2c <f_open>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b64      	ldr	r3, [pc, #400]	@ (8001bd8 <main+0x2c8>)
 8001a46:	701a      	strb	r2, [r3, #0]

    	/* Read string from the file */
    	f_gets(buffer, f_size(&fil), &fil);
 8001a48:	4b70      	ldr	r3, [pc, #448]	@ (8001c0c <main+0x2fc>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	4a6f      	ldr	r2, [pc, #444]	@ (8001c0c <main+0x2fc>)
 8001a4e:	4619      	mov	r1, r3
 8001a50:	486a      	ldr	r0, [pc, #424]	@ (8001bfc <main+0x2ec>)
 8001a52:	f00c fbc3 	bl	800e1dc <f_gets>

    	send_uart("File1.txt is opened and it contains the data as shown below\n");
 8001a56:	4870      	ldr	r0, [pc, #448]	@ (8001c18 <main+0x308>)
 8001a58:	f7ff feda 	bl	8001810 <send_uart>
    	send_uart(buffer);
 8001a5c:	4867      	ldr	r0, [pc, #412]	@ (8001bfc <main+0x2ec>)
 8001a5e:	f7ff fed7 	bl	8001810 <send_uart>
    	send_uart("\n\n");
 8001a62:	486e      	ldr	r0, [pc, #440]	@ (8001c1c <main+0x30c>)
 8001a64:	f7ff fed4 	bl	8001810 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8001a68:	4868      	ldr	r0, [pc, #416]	@ (8001c0c <main+0x2fc>)
 8001a6a:	f00b fe98 	bl	800d79e <f_close>

    	clear_buffer();
 8001a6e:	f7ff ff33 	bl	80018d8 <clear_buffer>


    	/**************** The following operation is using f_write and f_read **************************/

    	/* Create second file with read write access and open it */
    	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8001a72:	220a      	movs	r2, #10
 8001a74:	496a      	ldr	r1, [pc, #424]	@ (8001c20 <main+0x310>)
 8001a76:	4865      	ldr	r0, [pc, #404]	@ (8001c0c <main+0x2fc>)
 8001a78:	f00b f958 	bl	800cd2c <f_open>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <main+0x2c8>)
 8001a82:	701a      	strb	r2, [r3, #0]

    	/* Writing text */
    	strcpy (buffer, "This is File2.txt, written using f_write and said Hello World\n");
 8001a84:	4a5d      	ldr	r2, [pc, #372]	@ (8001bfc <main+0x2ec>)
 8001a86:	4b67      	ldr	r3, [pc, #412]	@ (8001c24 <main+0x314>)
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a9c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a9e:	8023      	strh	r3, [r4, #0]
 8001aa0:	3402      	adds	r4, #2
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	7023      	strb	r3, [r4, #0]

    	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8001aa6:	4855      	ldr	r0, [pc, #340]	@ (8001bfc <main+0x2ec>)
 8001aa8:	f7ff fefe 	bl	80018a8 <bufsize>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b5d      	ldr	r3, [pc, #372]	@ (8001c28 <main+0x318>)
 8001ab2:	4952      	ldr	r1, [pc, #328]	@ (8001bfc <main+0x2ec>)
 8001ab4:	4855      	ldr	r0, [pc, #340]	@ (8001c0c <main+0x2fc>)
 8001ab6:	f00b fc60 	bl	800d37a <f_write>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	4b46      	ldr	r3, [pc, #280]	@ (8001bd8 <main+0x2c8>)
 8001ac0:	701a      	strb	r2, [r3, #0]

    	send_uart ("File2.txt created and data is written\n");
 8001ac2:	485a      	ldr	r0, [pc, #360]	@ (8001c2c <main+0x31c>)
 8001ac4:	f7ff fea4 	bl	8001810 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8001ac8:	4850      	ldr	r0, [pc, #320]	@ (8001c0c <main+0x2fc>)
 8001aca:	f00b fe68 	bl	800d79e <f_close>



    	// clearing buffer to show that result obtained is from the file
    	clear_buffer();
 8001ace:	f7ff ff03 	bl	80018d8 <clear_buffer>

    	/* Open second file to read */
    	fresult = f_open(&fil, "file2.txt", FA_READ);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4952      	ldr	r1, [pc, #328]	@ (8001c20 <main+0x310>)
 8001ad6:	484d      	ldr	r0, [pc, #308]	@ (8001c0c <main+0x2fc>)
 8001ad8:	f00b f928 	bl	800cd2c <f_open>
 8001adc:	4603      	mov	r3, r0
 8001ade:	461a      	mov	r2, r3
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <main+0x2c8>)
 8001ae2:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");
 8001ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd8 <main+0x2c8>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d102      	bne.n	8001af2 <main+0x1e2>
 8001aec:	4850      	ldr	r0, [pc, #320]	@ (8001c30 <main+0x320>)
 8001aee:	f7ff fe8f 	bl	8001810 <send_uart>

    	/* Read data from the file
    	 * Please see the function details for the arguments */
    	f_read (&fil, buffer, f_size(&fil), &br);
 8001af2:	4b46      	ldr	r3, [pc, #280]	@ (8001c0c <main+0x2fc>)
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c34 <main+0x324>)
 8001af8:	4940      	ldr	r1, [pc, #256]	@ (8001bfc <main+0x2ec>)
 8001afa:	4844      	ldr	r0, [pc, #272]	@ (8001c0c <main+0x2fc>)
 8001afc:	f00b fade 	bl	800d0bc <f_read>
    	send_uart(buffer);
 8001b00:	483e      	ldr	r0, [pc, #248]	@ (8001bfc <main+0x2ec>)
 8001b02:	f7ff fe85 	bl	8001810 <send_uart>
    	send_uart("\n\n");
 8001b06:	4845      	ldr	r0, [pc, #276]	@ (8001c1c <main+0x30c>)
 8001b08:	f7ff fe82 	bl	8001810 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8001b0c:	483f      	ldr	r0, [pc, #252]	@ (8001c0c <main+0x2fc>)
 8001b0e:	f00b fe46 	bl	800d79e <f_close>

    	clear_buffer();
 8001b12:	f7ff fee1 	bl	80018d8 <clear_buffer>


    	/*********************UPDATING an existing file ***************************/

    	/* Open the file with write access */
    	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 8001b16:	2203      	movs	r2, #3
 8001b18:	4941      	ldr	r1, [pc, #260]	@ (8001c20 <main+0x310>)
 8001b1a:	483c      	ldr	r0, [pc, #240]	@ (8001c0c <main+0x2fc>)
 8001b1c:	f00b f906 	bl	800cd2c <f_open>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd8 <main+0x2c8>)
 8001b26:	701a      	strb	r2, [r3, #0]

    	/* Move to offset to the end of the file */
    	fresult = f_lseek(&fil, f_size(&fil));
 8001b28:	4b38      	ldr	r3, [pc, #224]	@ (8001c0c <main+0x2fc>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4837      	ldr	r0, [pc, #220]	@ (8001c0c <main+0x2fc>)
 8001b30:	f00b fe5f 	bl	800d7f2 <f_lseek>
 8001b34:	4603      	mov	r3, r0
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <main+0x2c8>)
 8001b3a:	701a      	strb	r2, [r3, #0]

    	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");
 8001b3c:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <main+0x2c8>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <main+0x23a>
 8001b44:	483c      	ldr	r0, [pc, #240]	@ (8001c38 <main+0x328>)
 8001b46:	f7ff fe63 	bl	8001810 <send_uart>

    	/* write the string to the file */
    	fresult = f_puts("This is updated data and it should be in the end", &fil);
 8001b4a:	4930      	ldr	r1, [pc, #192]	@ (8001c0c <main+0x2fc>)
 8001b4c:	483b      	ldr	r0, [pc, #236]	@ (8001c3c <main+0x32c>)
 8001b4e:	f00c fbfa 	bl	800e346 <f_puts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <main+0x2c8>)
 8001b58:	701a      	strb	r2, [r3, #0]

    	f_close (&fil);
 8001b5a:	482c      	ldr	r0, [pc, #176]	@ (8001c0c <main+0x2fc>)
 8001b5c:	f00b fe1f 	bl	800d79e <f_close>

    	clear_buffer();
 8001b60:	f7ff feba 	bl	80018d8 <clear_buffer>

    	/* Open to read the file */
    	fresult = f_open (&fil, "file2.txt", FA_READ);
 8001b64:	2201      	movs	r2, #1
 8001b66:	492e      	ldr	r1, [pc, #184]	@ (8001c20 <main+0x310>)
 8001b68:	4828      	ldr	r0, [pc, #160]	@ (8001c0c <main+0x2fc>)
 8001b6a:	f00b f8df 	bl	800cd2c <f_open>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <main+0x2c8>)
 8001b74:	701a      	strb	r2, [r3, #0]

    	/* Read string from the file */
    	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 8001b76:	4b25      	ldr	r3, [pc, #148]	@ (8001c0c <main+0x2fc>)
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c34 <main+0x324>)
 8001b7c:	491f      	ldr	r1, [pc, #124]	@ (8001bfc <main+0x2ec>)
 8001b7e:	4823      	ldr	r0, [pc, #140]	@ (8001c0c <main+0x2fc>)
 8001b80:	f00b fa9c 	bl	800d0bc <f_read>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <main+0x2c8>)
 8001b8a:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
 8001b8c:	4b12      	ldr	r3, [pc, #72]	@ (8001bd8 <main+0x2c8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d102      	bne.n	8001b9a <main+0x28a>
 8001b94:	482a      	ldr	r0, [pc, #168]	@ (8001c40 <main+0x330>)
 8001b96:	f7ff fe3b 	bl	8001810 <send_uart>
    	send_uart(buffer);
 8001b9a:	4818      	ldr	r0, [pc, #96]	@ (8001bfc <main+0x2ec>)
 8001b9c:	f7ff fe38 	bl	8001810 <send_uart>
    	send_uart("\n\n");
 8001ba0:	481e      	ldr	r0, [pc, #120]	@ (8001c1c <main+0x30c>)
 8001ba2:	f7ff fe35 	bl	8001810 <send_uart>

    	/* Close file */
    	f_close(&fil);
 8001ba6:	4819      	ldr	r0, [pc, #100]	@ (8001c0c <main+0x2fc>)
 8001ba8:	f00b fdf9 	bl	800d79e <f_close>

    	clear_buffer();
 8001bac:	f7ff fe94 	bl	80018d8 <clear_buffer>


  /* USER CODE END 2 */

  // Test tạo thư mục mới
  SD_creatSubDir("testdir");
 8001bb0:	4824      	ldr	r0, [pc, #144]	@ (8001c44 <main+0x334>)
 8001bb2:	f7ff fdef 	bl	8001794 <SD_creatSubDir>
  send_uart("Đã tạo thư mục testdir\n");
 8001bb6:	4824      	ldr	r0, [pc, #144]	@ (8001c48 <main+0x338>)
 8001bb8:	f7ff fe2a 	bl	8001810 <send_uart>

  // Test liệt kê file/thư mục
  send_uart("Danh sách file/thư mục trên thẻ SD:\n");
 8001bbc:	4823      	ldr	r0, [pc, #140]	@ (8001c4c <main+0x33c>)
 8001bbe:	f7ff fe27 	bl	8001810 <send_uart>
  SD_List_File();
 8001bc2:	f7ff fd61 	bl	8001688 <SD_List_File>
  send_uart("\n");
 8001bc6:	4822      	ldr	r0, [pc, #136]	@ (8001c50 <main+0x340>)
 8001bc8:	f7ff fe22 	bl	8001810 <send_uart>
  */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <main+0x2bc>
 8001bd0:	0800f964 	.word	0x0800f964
 8001bd4:	200015bc 	.word	0x200015bc
 8001bd8:	20003624 	.word	0x20003624
 8001bdc:	0800f968 	.word	0x0800f968
 8001be0:	0800f988 	.word	0x0800f988
 8001be4:	20003a30 	.word	0x20003a30
 8001be8:	20003a34 	.word	0x20003a34
 8001bec:	0800f9ac 	.word	0x0800f9ac
 8001bf0:	3fe00000 	.word	0x3fe00000
 8001bf4:	20003a38 	.word	0x20003a38
 8001bf8:	0800f9b0 	.word	0x0800f9b0
 8001bfc:	20003628 	.word	0x20003628
 8001c00:	20003a3c 	.word	0x20003a3c
 8001c04:	0800f9cc 	.word	0x0800f9cc
 8001c08:	0800f9e8 	.word	0x0800f9e8
 8001c0c:	200025f4 	.word	0x200025f4
 8001c10:	0800f9f4 	.word	0x0800f9f4
 8001c14:	0800fa3c 	.word	0x0800fa3c
 8001c18:	0800fa68 	.word	0x0800fa68
 8001c1c:	0800faa8 	.word	0x0800faa8
 8001c20:	0800faac 	.word	0x0800faac
 8001c24:	0800fab8 	.word	0x0800fab8
 8001c28:	20003a2c 	.word	0x20003a2c
 8001c2c:	0800faf8 	.word	0x0800faf8
 8001c30:	0800fb20 	.word	0x0800fb20
 8001c34:	20003a28 	.word	0x20003a28
 8001c38:	0800fb50 	.word	0x0800fb50
 8001c3c:	0800fb70 	.word	0x0800fb70
 8001c40:	0800fba4 	.word	0x0800fba4
 8001c44:	0800fbd0 	.word	0x0800fbd0
 8001c48:	0800fbd8 	.word	0x0800fbd8
 8001c4c:	0800fbf8 	.word	0x0800fbf8
 8001c50:	0800fc24 	.word	0x0800fc24

08001c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b094      	sub	sp, #80	@ 0x50
 8001c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	2230      	movs	r2, #48	@ 0x30
 8001c60:	2100      	movs	r1, #0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f00d f9ae 	bl	800efc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	4b28      	ldr	r3, [pc, #160]	@ (8001d20 <SystemClock_Config+0xcc>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	4a27      	ldr	r2, [pc, #156]	@ (8001d20 <SystemClock_Config+0xcc>)
 8001c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c88:	4b25      	ldr	r3, [pc, #148]	@ (8001d20 <SystemClock_Config+0xcc>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	4b22      	ldr	r3, [pc, #136]	@ (8001d24 <SystemClock_Config+0xd0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ca0:	4a20      	ldr	r2, [pc, #128]	@ (8001d24 <SystemClock_Config+0xd0>)
 8001ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d24 <SystemClock_Config+0xd0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001cc8:	2304      	movs	r3, #4
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001ccc:	2348      	movs	r3, #72	@ 0x48
 8001cce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd8:	f107 0320 	add.w	r3, r7, #32
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 f87d 	bl	8003ddc <HAL_RCC_OscConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ce8:	f000 f8ce 	bl	8001e88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cec:	230f      	movs	r3, #15
 8001cee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cfc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	2102      	movs	r1, #2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 fadf 	bl	80042cc <HAL_RCC_ClockConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d14:	f000 f8b8 	bl	8001e88 <Error_Handler>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3750      	adds	r7, #80	@ 0x50
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40007000 	.word	0x40007000

08001d28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d2c:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d2e:	4a18      	ldr	r2, [pc, #96]	@ (8001d90 <MX_SPI1_Init+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d32:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d74:	220a      	movs	r2, #10
 8001d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_SPI1_Init+0x64>)
 8001d7a:	f002 fcc7 	bl	800470c <HAL_SPI_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d84:	f000 f880 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000151c 	.word	0x2000151c
 8001d90:	40013000 	.word	0x40013000

08001d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d98:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <MX_USART1_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f003 f8f0 	bl	8004fb0 <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 f857 	bl	8001e88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20001574 	.word	0x20001574
 8001de4:	40011000 	.word	0x40011000

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a17      	ldr	r2, [pc, #92]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a10      	ldr	r2, [pc, #64]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_GPIO_Init+0x98>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2110      	movs	r1, #16
 8001e56:	480b      	ldr	r0, [pc, #44]	@ (8001e84 <MX_GPIO_Init+0x9c>)
 8001e58:	f000 fd28 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e60:	2301      	movs	r3, #1
 8001e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6c:	f107 030c 	add.w	r3, r7, #12
 8001e70:	4619      	mov	r1, r3
 8001e72:	4804      	ldr	r0, [pc, #16]	@ (8001e84 <MX_GPIO_Init+0x9c>)
 8001e74:	f000 fb6e 	bl	8002554 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e78:	bf00      	nop
 8001e7a:	3720      	adds	r7, #32
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020800 	.word	0x40020800

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <Error_Handler+0x8>

08001e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	607b      	str	r3, [r7, #4]
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <HAL_MspInit+0x4c>)
 8001ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_MspInit+0x4c>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_MspInit+0x4c>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ec4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_MspInit+0x4c>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_SPI_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12b      	bne.n	8001f5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a17      	ldr	r2, [pc, #92]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a10      	ldr	r2, [pc, #64]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <HAL_SPI_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f3e:	23e0      	movs	r3, #224	@ 0xe0
 8001f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f4e:	2305      	movs	r3, #5
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <HAL_SPI_MspInit+0x8c>)
 8001f5a:	f000 fafb 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	@ 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40013000 	.word	0x40013000
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020000 	.word	0x40020000

08001f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_UART_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12c      	bne.n	8001ff0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_UART_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a17      	ldr	r2, [pc, #92]	@ (8001ffc <HAL_UART_MspInit+0x88>)
 8001fa0:	f043 0310 	orr.w	r3, r3, #16
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_UART_MspInit+0x88>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_UART_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a10      	ldr	r2, [pc, #64]	@ (8001ffc <HAL_UART_MspInit+0x88>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_UART_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <HAL_UART_MspInit+0x8c>)
 8001fec:	f000 fab2 	bl	8002554 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	@ 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40011000 	.word	0x40011000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40020000 	.word	0x40020000

08002004 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2,Timer3,Timer4;

void SDTimer_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8002008:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <SDTimer_Handler+0x70>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <SDTimer_Handler+0x1c>
    Timer1--;
 8002012:	4b18      	ldr	r3, [pc, #96]	@ (8002074 <SDTimer_Handler+0x70>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <SDTimer_Handler+0x70>)
 800201e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002020:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <SDTimer_Handler+0x74>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <SDTimer_Handler+0x34>
    Timer2--;
 800202a:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <SDTimer_Handler+0x74>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b10      	ldr	r3, [pc, #64]	@ (8002078 <SDTimer_Handler+0x74>)
 8002036:	701a      	strb	r2, [r3, #0]
  if(Timer3 > 0)
 8002038:	4b10      	ldr	r3, [pc, #64]	@ (800207c <SDTimer_Handler+0x78>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <SDTimer_Handler+0x4c>
      Timer1--;
 8002042:	4b0c      	ldr	r3, [pc, #48]	@ (8002074 <SDTimer_Handler+0x70>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	3b01      	subs	r3, #1
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <SDTimer_Handler+0x70>)
 800204e:	701a      	strb	r2, [r3, #0]

  if(Timer4 > 0)
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <SDTimer_Handler+0x7c>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <SDTimer_Handler+0x64>
      Timer2--;
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <SDTimer_Handler+0x74>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3b01      	subs	r3, #1
 8002062:	b2da      	uxtb	r2, r3
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <SDTimer_Handler+0x74>)
 8002066:	701a      	strb	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20003a41 	.word	0x20003a41
 8002078:	20003a42 	.word	0x20003a42
 800207c:	20003a43 	.word	0x20003a43
 8002080:	20003a44 	.word	0x20003a44

08002084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002088:	bf00      	nop
 800208a:	e7fd      	b.n	8002088 <NMI_Handler+0x4>

0800208c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <HardFault_Handler+0x4>

08002094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <MemManage_Handler+0x4>

0800209c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <BusFault_Handler+0x4>

080020a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <UsageFault_Handler+0x4>

080020ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80020dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <SysTick_Handler+0x30>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <SysTick_Handler+0x30>)
 80020e8:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <SysTick_Handler+0x30>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b09      	cmp	r3, #9
 80020f2:	d904      	bls.n	80020fe <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 80020f4:	4b04      	ldr	r3, [pc, #16]	@ (8002108 <SysTick_Handler+0x30>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80020fa:	f7ff ff83 	bl	8002004 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020fe:	f000 f8d3 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20003a40 	.word	0x20003a40

0800210c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002110:	4802      	ldr	r0, [pc, #8]	@ (800211c <OTG_FS_IRQHandler+0x10>)
 8002112:	f000 fd28 	bl	8002b66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20004184 	.word	0x20004184

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	@ (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	@ (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	@ (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	@ (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f00c ff40 	bl	800efd4 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	@ (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	@ (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	@ (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20030000 	.word	0x20030000
 8002180:	00000400 	.word	0x00000400
 8002184:	20003a48 	.word	0x20003a48
 8002188:	20004a38 	.word	0x20004a38

0800218c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b4:	f7ff ffea 	bl	800218c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021de:	f00c feff 	bl	800efe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7ff fb95 	bl	8001910 <main>
  bx  lr    
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80021f4:	08010174 	.word	0x08010174
  ldr r2, =_sbss
 80021f8:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80021fc:	20004a38 	.word	0x20004a38

08002200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC_IRQHandler>
	...

08002204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002208:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0d      	ldr	r2, [pc, #52]	@ (8002244 <HAL_Init+0x40>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <HAL_Init+0x40>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800221e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <HAL_Init+0x40>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f94f 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	200f      	movs	r0, #15
 8002234:	f000 f808 	bl	8002248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fe2c 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00

08002248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002250:	4b12      	ldr	r3, [pc, #72]	@ (800229c <HAL_InitTick+0x54>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_InitTick+0x58>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f967 	bl	800253a <HAL_SYSTICK_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00e      	b.n	8002294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d80a      	bhi.n	8002292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f000 f92f 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	4a06      	ldr	r2, [pc, #24]	@ (80022a4 <HAL_InitTick+0x5c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000004 	.word	0x20000004
 80022a0:	2000000c 	.word	0x2000000c
 80022a4:	20000008 	.word	0x20000008

080022a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	2000000c 	.word	0x2000000c
 80022cc:	20003a4c 	.word	0x20003a4c

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20003a4c 	.word	0x20003a4c

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff ffee 	bl	80022d0 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	@ (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffde 	bl	80022d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	2000000c 	.word	0x2000000c

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	@ (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	@ (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	@ (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	@ (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	@ (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	@ 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	@ 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	@ 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e177      	b.n	8002860 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8166 	bne.w	800285a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80c0 	beq.w	800285a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b66      	ldr	r3, [pc, #408]	@ (8002878 <HAL_GPIO_Init+0x324>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e2:	4a65      	ldr	r2, [pc, #404]	@ (8002878 <HAL_GPIO_Init+0x324>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ea:	4b63      	ldr	r3, [pc, #396]	@ (8002878 <HAL_GPIO_Init+0x324>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a61      	ldr	r2, [pc, #388]	@ (800287c <HAL_GPIO_Init+0x328>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a58      	ldr	r2, [pc, #352]	@ (8002880 <HAL_GPIO_Init+0x32c>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d037      	beq.n	8002792 <HAL_GPIO_Init+0x23e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a57      	ldr	r2, [pc, #348]	@ (8002884 <HAL_GPIO_Init+0x330>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_GPIO_Init+0x23a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a56      	ldr	r2, [pc, #344]	@ (8002888 <HAL_GPIO_Init+0x334>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d02b      	beq.n	800278a <HAL_GPIO_Init+0x236>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a55      	ldr	r2, [pc, #340]	@ (800288c <HAL_GPIO_Init+0x338>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d025      	beq.n	8002786 <HAL_GPIO_Init+0x232>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a54      	ldr	r2, [pc, #336]	@ (8002890 <HAL_GPIO_Init+0x33c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d01f      	beq.n	8002782 <HAL_GPIO_Init+0x22e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a53      	ldr	r2, [pc, #332]	@ (8002894 <HAL_GPIO_Init+0x340>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d019      	beq.n	800277e <HAL_GPIO_Init+0x22a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a52      	ldr	r2, [pc, #328]	@ (8002898 <HAL_GPIO_Init+0x344>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a51      	ldr	r2, [pc, #324]	@ (800289c <HAL_GPIO_Init+0x348>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00d      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a50      	ldr	r2, [pc, #320]	@ (80028a0 <HAL_GPIO_Init+0x34c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d007      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a4f      	ldr	r2, [pc, #316]	@ (80028a4 <HAL_GPIO_Init+0x350>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d101      	bne.n	800276e <HAL_GPIO_Init+0x21a>
 800276a:	2309      	movs	r3, #9
 800276c:	e012      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800276e:	230a      	movs	r3, #10
 8002770:	e010      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002772:	2308      	movs	r3, #8
 8002774:	e00e      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002776:	2307      	movs	r3, #7
 8002778:	e00c      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800277a:	2306      	movs	r3, #6
 800277c:	e00a      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800277e:	2305      	movs	r3, #5
 8002780:	e008      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002782:	2304      	movs	r3, #4
 8002784:	e006      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002786:	2303      	movs	r3, #3
 8002788:	e004      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800278a:	2302      	movs	r3, #2
 800278c:	e002      	b.n	8002794 <HAL_GPIO_Init+0x240>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x240>
 8002792:	2300      	movs	r3, #0
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	f002 0203 	and.w	r2, r2, #3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	4093      	lsls	r3, r2
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027a4:	4935      	ldr	r1, [pc, #212]	@ (800287c <HAL_GPIO_Init+0x328>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	089b      	lsrs	r3, r3, #2
 80027aa:	3302      	adds	r3, #2
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b3d      	ldr	r3, [pc, #244]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a34      	ldr	r2, [pc, #208]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b32      	ldr	r3, [pc, #200]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a29      	ldr	r2, [pc, #164]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002806:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282a:	4a1f      	ldr	r2, [pc, #124]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002854:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <HAL_GPIO_Init+0x354>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3301      	adds	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b0f      	cmp	r3, #15
 8002864:	f67f ae84 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002868:	bf00      	nop
 800286a:	bf00      	nop
 800286c:	3724      	adds	r7, #36	@ 0x24
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	40013800 	.word	0x40013800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00
 8002890:	40021000 	.word	0x40021000
 8002894:	40021400 	.word	0x40021400
 8002898:	40021800 	.word	0x40021800
 800289c:	40021c00 	.word	0x40021c00
 80028a0:	40022000 	.word	0x40022000
 80028a4:	40022400 	.word	0x40022400
 80028a8:	40013c00 	.word	0x40013c00

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b086      	sub	sp, #24
 80028e2:	af02      	add	r7, sp, #8
 80028e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e101      	b.n	8002af4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f00c f806 	bl	800e91c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2203      	movs	r2, #3
 8002914:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800291e:	d102      	bne.n	8002926 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f003 f863 	bl	80059f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7c1a      	ldrb	r2, [r3, #16]
 8002938:	f88d 2000 	strb.w	r2, [sp]
 800293c:	3304      	adds	r3, #4
 800293e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002940:	f002 ff42 	bl	80057c8 <USB_CoreInit>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0ce      	b.n	8002af4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f003 f85b 	bl	8005a18 <USB_SetCurrentMode>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2202      	movs	r2, #2
 800296c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0bf      	b.n	8002af4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e04a      	b.n	8002a10 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3315      	adds	r3, #21
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3314      	adds	r3, #20
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	b298      	uxth	r0, r3
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	332e      	adds	r3, #46	@ 0x2e
 80029b6:	4602      	mov	r2, r0
 80029b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3318      	adds	r3, #24
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	331c      	adds	r3, #28
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3320      	adds	r3, #32
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3324      	adds	r3, #36	@ 0x24
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	791b      	ldrb	r3, [r3, #4]
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d3af      	bcc.n	800297a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	73fb      	strb	r3, [r7, #15]
 8002a1e:	e044      	b.n	8002aaa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	7bfb      	ldrb	r3, [r7, #15]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	73fb      	strb	r3, [r7, #15]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	791b      	ldrb	r3, [r3, #4]
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3b5      	bcc.n	8002a20 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7c1a      	ldrb	r2, [r3, #16]
 8002abc:	f88d 2000 	strb.w	r2, [sp]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac4:	f002 fff4 	bl	8005ab0 <USB_DevInit>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00c      	b.n	8002af4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 f83e 	bl	8006b6e <USB_DevDisconnect>

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_PCD_Start+0x1c>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e022      	b.n	8002b5e <HAL_PCD_Start+0x62>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 ff45 	bl	80059d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 ffec 	bl	8006b2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b66:	b590      	push	{r4, r7, lr}
 8002b68:	b08d      	sub	sp, #52	@ 0x34
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 f8aa 	bl	8006cd6 <USB_GetMode>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 848c 	bne.w	80034a2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 f80e 	bl	8006bb0 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8482 	beq.w	80034a0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	0a1b      	lsrs	r3, r3, #8
 8002ba6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fffb 	bl	8006bb0 <USB_ReadInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d107      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f002 0202 	and.w	r2, r2, #2
 8002bd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 ffe9 	bl	8006bb0 <USB_ReadInterrupts>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b10      	cmp	r3, #16
 8002be6:	d161      	bne.n	8002cac <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0210 	bic.w	r2, r2, #16
 8002bf6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 020f 	and.w	r2, r3, #15
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	3304      	adds	r3, #4
 8002c16:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	0c5b      	lsrs	r3, r3, #17
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d124      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d035      	beq.n	8002c9c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	6a38      	ldr	r0, [r7, #32]
 8002c44:	f003 fe20 	bl	8006888 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c54:	441a      	add	r2, r3
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	695a      	ldr	r2, [r3, #20]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c66:	441a      	add	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	615a      	str	r2, [r3, #20]
 8002c6c:	e016      	b.n	8002c9c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	0c5b      	lsrs	r3, r3, #17
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d110      	bne.n	8002c9c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c80:	2208      	movs	r2, #8
 8002c82:	4619      	mov	r1, r3
 8002c84:	6a38      	ldr	r0, [r7, #32]
 8002c86:	f003 fdff 	bl	8006888 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c96:	441a      	add	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0210 	orr.w	r2, r2, #16
 8002caa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f003 ff7d 	bl	8006bb0 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cbc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002cc0:	f040 80a7 	bne.w	8002e12 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 ff82 	bl	8006bd6 <USB_ReadDevAllOutEpInterrupt>
 8002cd2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002cd4:	e099      	b.n	8002e0a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 808e 	beq.w	8002dfe <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ce8:	b2d2      	uxtb	r2, r2
 8002cea:	4611      	mov	r1, r2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 ffa6 	bl	8006c3e <USB_ReadDevOutEPInterrupt>
 8002cf2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00c      	beq.n	8002d18 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	015a      	lsls	r2, r3, #5
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	4413      	add	r3, r2
 8002d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fed0 	bl	8003ab8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2308      	movs	r3, #8
 8002d32:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 ffa6 	bl	8003c88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d52:	461a      	mov	r2, r3
 8002d54:	2310      	movs	r3, #16
 8002d56:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d030      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d6a:	2b80      	cmp	r3, #128	@ 0x80
 8002d6c:	d109      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d80:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	78db      	ldrb	r3, [r3, #3]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d108      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	2200      	movs	r2, #0
 8002da4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	4619      	mov	r1, r3
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f00b febb 	bl	800eb28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2320      	movs	r3, #32
 8002dde:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df6:	461a      	mov	r2, r3
 8002df8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dfc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e00:	3301      	adds	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f47f af62 	bne.w	8002cd6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f003 feca 	bl	8006bb0 <USB_ReadInterrupts>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e26:	f040 80db 	bne.w	8002fe0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 feeb 	bl	8006c0a <USB_ReadDevAllInEpInterrupt>
 8002e34:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002e3a:	e0cd      	b.n	8002fd8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 80c2 	beq.w	8002fcc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 ff11 	bl	8006c7a <USB_ReadDevInEPInterrupt>
 8002e58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d057      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69f9      	ldr	r1, [r7, #28]
 8002e80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002e84:	4013      	ands	r3, r2
 8002e86:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e94:	461a      	mov	r2, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	799b      	ldrb	r3, [r3, #6]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d132      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3320      	adds	r3, #32
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4403      	add	r3, r0
 8002ec2:	331c      	adds	r3, #28
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4419      	add	r1, r3
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ecc:	4613      	mov	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4403      	add	r3, r0
 8002ed6:	3320      	adds	r3, #32
 8002ed8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d113      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x3a2>
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3324      	adds	r3, #36	@ 0x24
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d108      	bne.n	8002f08 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f00:	461a      	mov	r2, r3
 8002f02:	2101      	movs	r1, #1
 8002f04:	f003 ff18 	bl	8006d38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f00b fd85 	bl	800ea1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f003 0310 	and.w	r3, r3, #16
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f46:	461a      	mov	r2, r3
 8002f48:	2310      	movs	r3, #16
 8002f4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d008      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f62:	461a      	mov	r2, r3
 8002f64:	2340      	movs	r3, #64	@ 0x40
 8002f66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d023      	beq.n	8002fba <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f74:	6a38      	ldr	r0, [r7, #32]
 8002f76:	f002 feff 	bl	8005d78 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	3310      	adds	r3, #16
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	78db      	ldrb	r3, [r3, #3]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d108      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f00b fdd2 	bl	800eb4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fcea 	bl	80039a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	3301      	adds	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f47f af2e 	bne.w	8002e3c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 fde3 	bl	8006bb0 <USB_ReadInterrupts>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ff0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ff4:	d122      	bne.n	800303c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003010:	2b01      	cmp	r3, #1
 8003012:	d108      	bne.n	8003026 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800301c:	2100      	movs	r1, #0
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fed0 	bl	8003dc4 <HAL_PCDEx_LPM_Callback>
 8003024:	e002      	b.n	800302c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f00b fd70 	bl	800eb0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800303a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 fdb5 	bl	8006bb0 <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800304c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003050:	d112      	bne.n	8003078 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f00b fd2c 	bl	800eac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003076:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f003 fd97 	bl	8006bb0 <USB_ReadInterrupts>
 8003082:	4603      	mov	r3, r0
 8003084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308c:	f040 80b7 	bne.w	80031fe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800309e:	f023 0301 	bic.w	r3, r3, #1
 80030a2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2110      	movs	r1, #16
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 fe64 	bl	8005d78 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b4:	e046      	b.n	8003144 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030c2:	461a      	mov	r2, r3
 80030c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030c8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	69fa      	ldr	r2, [r7, #28]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80030e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030e8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80030fc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80030fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800310e:	0151      	lsls	r1, r2, #5
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	440a      	add	r2, r1
 8003114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003118:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800311c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800311e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	440a      	add	r2, r1
 8003134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003138:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800313c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800313e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003140:	3301      	adds	r3, #1
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	791b      	ldrb	r3, [r3, #4]
 8003148:	461a      	mov	r2, r3
 800314a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314c:	4293      	cmp	r3, r2
 800314e:	d3b2      	bcc.n	80030b6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800315e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003162:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7bdb      	ldrb	r3, [r3, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d016      	beq.n	800319a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003176:	69fa      	ldr	r2, [r7, #28]
 8003178:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800317c:	f043 030b 	orr.w	r3, r3, #11
 8003180:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800318a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003192:	f043 030b 	orr.w	r3, r3, #11
 8003196:	6453      	str	r3, [r2, #68]	@ 0x44
 8003198:	e015      	b.n	80031c6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031ac:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80031b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	69fa      	ldr	r2, [r7, #28]
 80031bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031c0:	f043 030b 	orr.w	r3, r3, #11
 80031c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031d4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80031d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80031e8:	461a      	mov	r2, r3
 80031ea:	f003 fda5 	bl	8006d38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f003 fcd4 	bl	8006bb0 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800320e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003212:	d123      	bne.n	800325c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f003 fd6a 	bl	8006cf2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 fe21 	bl	8005e6a <USB_GetDevSpeed>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681c      	ldr	r4, [r3, #0]
 8003234:	f001 fa36 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 8003238:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800323e:	461a      	mov	r2, r3
 8003240:	4620      	mov	r0, r4
 8003242:	f002 fb25 	bl	8005890 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f00b fc11 	bl	800ea6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800325a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f003 fca5 	bl	8006bb0 <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b08      	cmp	r3, #8
 800326e:	d10a      	bne.n	8003286 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f00b fbee 	bl	800ea52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f002 0208 	and.w	r2, r2, #8
 8003284:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f003 fc90 	bl	8006bb0 <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b80      	cmp	r3, #128	@ 0x80
 8003298:	d123      	bne.n	80032e2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a6:	2301      	movs	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032aa:	e014      	b.n	80032d6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fb0a 	bl	80038e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	3301      	adds	r3, #1
 80032d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	791b      	ldrb	r3, [r3, #4]
 80032da:	461a      	mov	r2, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	4293      	cmp	r3, r2
 80032e0:	d3e4      	bcc.n	80032ac <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f003 fc62 	bl	8006bb0 <USB_ReadInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032f6:	d13c      	bne.n	8003372 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032f8:	2301      	movs	r3, #1
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80032fc:	e02b      	b.n	8003356 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	015a      	lsls	r2, r3, #5
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	4413      	add	r3, r2
 8003306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3318      	adds	r3, #24
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d115      	bne.n	8003350 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003324:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	da12      	bge.n	8003350 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3317      	adds	r3, #23
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	b2db      	uxtb	r3, r3
 8003342:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003346:	b2db      	uxtb	r3, r3
 8003348:	4619      	mov	r1, r3
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 faca 	bl	80038e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003352:	3301      	adds	r3, #1
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	791b      	ldrb	r3, [r3, #4]
 800335a:	461a      	mov	r2, r3
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	4293      	cmp	r3, r2
 8003360:	d3cd      	bcc.n	80032fe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f003 fc1a 	bl	8006bb0 <USB_ReadInterrupts>
 800337c:	4603      	mov	r3, r0
 800337e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003386:	d156      	bne.n	8003436 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003388:	2301      	movs	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
 800338c:	e045      	b.n	800341a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d12e      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	da2b      	bge.n	8003414 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	0c1a      	lsrs	r2, r3, #16
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80033c6:	4053      	eors	r3, r2
 80033c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d121      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800340c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003410:	6053      	str	r3, [r2, #4]
            break;
 8003412:	e008      	b.n	8003426 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	3301      	adds	r3, #1
 8003418:	627b      	str	r3, [r7, #36]	@ 0x24
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	791b      	ldrb	r3, [r3, #4]
 800341e:	461a      	mov	r2, r3
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	4293      	cmp	r3, r2
 8003424:	d3b3      	bcc.n	800338e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003434:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f003 fbb8 	bl	8006bb0 <USB_ReadInterrupts>
 8003440:	4603      	mov	r3, r0
 8003442:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344a:	d10a      	bne.n	8003462 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f00b fb8f 	bl	800eb70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003460:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fba2 	bl	8006bb0 <USB_ReadInterrupts>
 800346c:	4603      	mov	r3, r0
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b04      	cmp	r3, #4
 8003474:	d115      	bne.n	80034a2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f00b fb7f 	bl	800eb8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	e000      	b.n	80034a2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80034a0:	bf00      	nop
    }
  }
}
 80034a2:	3734      	adds	r7, #52	@ 0x34
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd90      	pop	{r4, r7, pc}

080034a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_PCD_SetAddress+0x1a>
 80034be:	2302      	movs	r3, #2
 80034c0:	e012      	b.n	80034e8 <HAL_PCD_SetAddress+0x40>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fb01 	bl	8006ae0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	4608      	mov	r0, r1
 80034fa:	4611      	mov	r1, r2
 80034fc:	461a      	mov	r2, r3
 80034fe:	4603      	mov	r3, r0
 8003500:	70fb      	strb	r3, [r7, #3]
 8003502:	460b      	mov	r3, r1
 8003504:	803b      	strh	r3, [r7, #0]
 8003506:	4613      	mov	r3, r2
 8003508:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800350e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003512:	2b00      	cmp	r3, #0
 8003514:	da0f      	bge.n	8003536 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	f003 020f 	and.w	r2, r3, #15
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	3310      	adds	r3, #16
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	3304      	adds	r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	705a      	strb	r2, [r3, #1]
 8003534:	e00f      	b.n	8003556 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003562:	883b      	ldrh	r3, [r7, #0]
 8003564:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	78ba      	ldrb	r2, [r7, #2]
 8003570:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	785b      	ldrb	r3, [r3, #1]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003584:	78bb      	ldrb	r3, [r7, #2]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d102      	bne.n	8003590 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_PCD_EP_Open+0xae>
 800359a:	2302      	movs	r3, #2
 800359c:	e00e      	b.n	80035bc <HAL_PCD_EP_Open+0xcc>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f002 fc81 	bl	8005eb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da0f      	bge.n	80035f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	f003 020f 	and.w	r2, r3, #15
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3310      	adds	r3, #16
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	705a      	strb	r2, [r3, #1]
 80035f6:	e00f      	b.n	8003618 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 020f 	and.w	r2, r3, #15
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_PCD_EP_Close+0x6e>
 800362e:	2302      	movs	r3, #2
 8003630:	e00e      	b.n	8003650 <HAL_PCD_EP_Close+0x8c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	f002 fcbf 	bl	8005fc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	460b      	mov	r3, r1
 8003666:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003668:	7afb      	ldrb	r3, [r7, #11]
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2200      	movs	r2, #0
 8003698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	799b      	ldrb	r3, [r3, #6]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d102      	bne.n	80036b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6818      	ldr	r0, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	799b      	ldrb	r3, [r3, #6]
 80036bc:	461a      	mov	r2, r3
 80036be:	6979      	ldr	r1, [r7, #20]
 80036c0:	f002 fd5c 	bl	800617c <USB_EPStartXfer>

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	f003 020f 	and.w	r2, r3, #15
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80036f0:	681b      	ldr	r3, [r3, #0]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	460b      	mov	r3, r1
 800370c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370e:	7afb      	ldrb	r3, [r7, #11]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3310      	adds	r3, #16
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	3304      	adds	r3, #4
 8003724:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2200      	movs	r2, #0
 8003736:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2201      	movs	r2, #1
 800373c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	b2da      	uxtb	r2, r3
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	799b      	ldrb	r3, [r3, #6]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d102      	bne.n	8003758 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	799b      	ldrb	r3, [r3, #6]
 8003760:	461a      	mov	r2, r3
 8003762:	6979      	ldr	r1, [r7, #20]
 8003764:	f002 fd0a 	bl	800617c <USB_EPStartXfer>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	7912      	ldrb	r2, [r2, #4]
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e04f      	b.n	8003830 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da0f      	bge.n	80037b8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	3310      	adds	r3, #16
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	3304      	adds	r3, #4
 80037ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	705a      	strb	r2, [r3, #1]
 80037b6:	e00d      	b.n	80037d4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	4613      	mov	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	3304      	adds	r3, #4
 80037cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 030f 	and.w	r3, r3, #15
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_PCD_EP_SetStall+0x82>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e01d      	b.n	8003830 <HAL_PCD_EP_SetStall+0xbe>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68f9      	ldr	r1, [r7, #12]
 8003802:	4618      	mov	r0, r3
 8003804:	f003 f898 	bl	8006938 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7999      	ldrb	r1, [r3, #6]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003820:	461a      	mov	r2, r3
 8003822:	f003 fa89 	bl	8006d38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	7912      	ldrb	r2, [r2, #4]
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e042      	b.n	80038dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800385a:	2b00      	cmp	r3, #0
 800385c:	da0f      	bge.n	800387e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	f003 020f 	and.w	r2, r3, #15
 8003864:	4613      	mov	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	3310      	adds	r3, #16
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	3304      	adds	r3, #4
 8003874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	705a      	strb	r2, [r3, #1]
 800387c:	e00f      	b.n	800389e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800387e:	78fb      	ldrb	r3, [r7, #3]
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	4413      	add	r3, r2
 8003894:	3304      	adds	r3, #4
 8003896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_PCD_EP_ClrStall+0x86>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e00e      	b.n	80038dc <HAL_PCD_EP_ClrStall+0xa4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68f9      	ldr	r1, [r7, #12]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f003 f8a1 	bl	8006a14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80038f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da0c      	bge.n	8003912 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	f003 020f 	and.w	r2, r3, #15
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	3310      	adds	r3, #16
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	4413      	add	r3, r2
 800390c:	3304      	adds	r3, #4
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	e00c      	b.n	800392c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68f9      	ldr	r1, [r7, #12]
 8003932:	4618      	mov	r0, r3
 8003934:	f002 fec0 	bl	80066b8 <USB_EPStopXfer>
 8003938:	4603      	mov	r3, r0
 800393a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800393c:	7afb      	ldrb	r3, [r7, #11]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_PCD_EP_Flush+0x1a>
 800395c:	2302      	movs	r3, #2
 800395e:	e01b      	b.n	8003998 <HAL_PCD_EP_Flush+0x52>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 8003968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da09      	bge.n	8003984 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f002 f9fb 	bl	8005d78 <USB_FlushTxFifo>
 8003982:	e004      	b.n	800398e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f002 fa27 	bl	8005ddc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b08a      	sub	sp, #40	@ 0x28
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	3310      	adds	r3, #16
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	4413      	add	r3, r2
 80039c4:	3304      	adds	r3, #4
 80039c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	695a      	ldr	r2, [r3, #20]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d901      	bls.n	80039d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e06b      	b.n	8003ab0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d902      	bls.n	80039f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3303      	adds	r3, #3
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039fc:	e02a      	b.n	8003a54 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d902      	bls.n	8003a1a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3303      	adds	r3, #3
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68d9      	ldr	r1, [r3, #12]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	4603      	mov	r3, r0
 8003a36:	6978      	ldr	r0, [r7, #20]
 8003a38:	f002 fee8 	bl	800680c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	441a      	add	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d809      	bhi.n	8003a7e <PCD_WriteEmptyTxFifo+0xde>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d203      	bcs.n	8003a7e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1bf      	bne.n	80039fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d811      	bhi.n	8003aae <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	2201      	movs	r2, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	6939      	ldr	r1, [r7, #16]
 8003aa6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003aaa:	4013      	ands	r3, r2
 8003aac:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	333c      	adds	r3, #60	@ 0x3c
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	799b      	ldrb	r3, [r3, #6]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d17b      	bne.n	8003be6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4a61      	ldr	r2, [pc, #388]	@ (8003c80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	f240 80b9 	bls.w	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80b3 	beq.w	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b20:	6093      	str	r3, [r2, #8]
 8003b22:	e0a7      	b.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2320      	movs	r3, #32
 8003b3e:	6093      	str	r3, [r2, #8]
 8003b40:	e098      	b.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 8093 	bne.w	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4a4b      	ldr	r2, [pc, #300]	@ (8003c80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d90f      	bls.n	8003b76 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b72:	6093      	str	r3, [r2, #8]
 8003b74:	e07e      	b.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4413      	add	r3, r2
 8003b88:	3304      	adds	r3, #4
 8003b8a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1a      	ldr	r2, [r3, #32]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	0159      	lsls	r1, r3, #5
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	440b      	add	r3, r1
 8003b98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba2:	1ad2      	subs	r2, r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d114      	bne.n	8003bd8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	f003 f8b8 	bl	8006d38 <USB_EP0_OutStart>
 8003bc8:	e006      	b.n	8003bd8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	441a      	add	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4619      	mov	r1, r3
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f00a ff02 	bl	800e9e8 <HAL_PCD_DataOutStageCallback>
 8003be4:	e046      	b.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	4a26      	ldr	r2, [pc, #152]	@ (8003c84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d124      	bne.n	8003c38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c04:	461a      	mov	r2, r3
 8003c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c0a:	6093      	str	r3, [r2, #8]
 8003c0c:	e032      	b.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c24:	461a      	mov	r2, r3
 8003c26:	2320      	movs	r3, #32
 8003c28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f00a fed9 	bl	800e9e8 <HAL_PCD_DataOutStageCallback>
 8003c36:	e01d      	b.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d114      	bne.n	8003c68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c60:	461a      	mov	r2, r3
 8003c62:	2100      	movs	r1, #0
 8003c64:	f003 f868 	bl	8006d38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f00a feba 	bl	800e9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	4f54300a 	.word	0x4f54300a
 8003c84:	4f54310a 	.word	0x4f54310a

08003c88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	333c      	adds	r3, #60	@ 0x3c
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4a15      	ldr	r2, [pc, #84]	@ (8003d10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d90e      	bls.n	8003cdc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f00a fe71 	bl	800e9c4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d90c      	bls.n	8003d04 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	799b      	ldrb	r3, [r3, #6]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d108      	bne.n	8003d04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2101      	movs	r1, #1
 8003d00:	f003 f81a 	bl	8006d38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	4f54300a 	.word	0x4f54300a

08003d14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	70fb      	strb	r3, [r7, #3]
 8003d20:	4613      	mov	r3, r2
 8003d22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d107      	bne.n	8003d42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d32:	883b      	ldrh	r3, [r7, #0]
 8003d34:	0419      	lsls	r1, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d40:	e028      	b.n	8003d94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
 8003d54:	e00d      	b.n	8003d72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	3340      	adds	r3, #64	@ 0x40
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	4413      	add	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d3ec      	bcc.n	8003d56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d7c:	883b      	ldrh	r3, [r7, #0]
 8003d7e:	0418      	lsls	r0, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	4302      	orrs	r2, r0
 8003d8c:	3340      	adds	r3, #64	@ 0x40
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3714      	adds	r7, #20
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	887a      	ldrh	r2, [r7, #2]
 8003db4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e267      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d075      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003dfa:	4b88      	ldr	r3, [pc, #544]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d00c      	beq.n	8003e20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e06:	4b85      	ldr	r3, [pc, #532]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d112      	bne.n	8003e38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e12:	4b82      	ldr	r3, [pc, #520]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e20:	4b7e      	ldr	r3, [pc, #504]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05b      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x108>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d157      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e242      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e40:	d106      	bne.n	8003e50 <HAL_RCC_OscConfig+0x74>
 8003e42:	4b76      	ldr	r3, [pc, #472]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a75      	ldr	r2, [pc, #468]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e01d      	b.n	8003e8c <HAL_RCC_OscConfig+0xb0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e58:	d10c      	bne.n	8003e74 <HAL_RCC_OscConfig+0x98>
 8003e5a:	4b70      	ldr	r3, [pc, #448]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a6f      	ldr	r2, [pc, #444]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b6d      	ldr	r3, [pc, #436]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6c      	ldr	r2, [pc, #432]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e00b      	b.n	8003e8c <HAL_RCC_OscConfig+0xb0>
 8003e74:	4b69      	ldr	r3, [pc, #420]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a68      	ldr	r2, [pc, #416]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b66      	ldr	r3, [pc, #408]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a65      	ldr	r2, [pc, #404]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003e86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d013      	beq.n	8003ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe fa1c 	bl	80022d0 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fe fa18 	bl	80022d0 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	@ 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e207      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b5b      	ldr	r3, [pc, #364]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0xc0>
 8003eba:	e014      	b.n	8003ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fa08 	bl	80022d0 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec4:	f7fe fa04 	bl	80022d0 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b64      	cmp	r3, #100	@ 0x64
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e1f3      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed6:	4b51      	ldr	r3, [pc, #324]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f0      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xe8>
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d063      	beq.n	8003fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003efe:	4b47      	ldr	r3, [pc, #284]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d11c      	bne.n	8003f44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b44      	ldr	r3, [pc, #272]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d116      	bne.n	8003f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	4b41      	ldr	r3, [pc, #260]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_RCC_OscConfig+0x152>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e1c7      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4937      	ldr	r1, [pc, #220]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f42:	e03a      	b.n	8003fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4c:	4b34      	ldr	r3, [pc, #208]	@ (8004020 <HAL_RCC_OscConfig+0x244>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f52:	f7fe f9bd 	bl	80022d0 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f5a:	f7fe f9b9 	bl	80022d0 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1a8      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b28      	ldr	r3, [pc, #160]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4925      	ldr	r1, [pc, #148]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
 8003f8c:	e015      	b.n	8003fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b24      	ldr	r3, [pc, #144]	@ (8004020 <HAL_RCC_OscConfig+0x244>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe f99c 	bl	80022d0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9c:	f7fe f998 	bl	80022d0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e187      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fae:	4b1b      	ldr	r3, [pc, #108]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d036      	beq.n	8004034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d016      	beq.n	8003ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <HAL_RCC_OscConfig+0x248>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fe f97c 	bl	80022d0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe f978 	bl	80022d0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e167      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <HAL_RCC_OscConfig+0x240>)
 8003ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0x200>
 8003ffa:	e01b      	b.n	8004034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffc:	4b09      	ldr	r3, [pc, #36]	@ (8004024 <HAL_RCC_OscConfig+0x248>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004002:	f7fe f965 	bl	80022d0 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004008:	e00e      	b.n	8004028 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400a:	f7fe f961 	bl	80022d0 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d907      	bls.n	8004028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e150      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
 800401c:	40023800 	.word	0x40023800
 8004020:	42470000 	.word	0x42470000
 8004024:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004028:	4b88      	ldr	r3, [pc, #544]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 800402a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ea      	bne.n	800400a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 8097 	beq.w	8004170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004042:	2300      	movs	r3, #0
 8004044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004046:	4b81      	ldr	r3, [pc, #516]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	4b7d      	ldr	r3, [pc, #500]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	4a7c      	ldr	r2, [pc, #496]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 800405c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004060:	6413      	str	r3, [r2, #64]	@ 0x40
 8004062:	4b7a      	ldr	r3, [pc, #488]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406a:	60bb      	str	r3, [r7, #8]
 800406c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800406e:	2301      	movs	r3, #1
 8004070:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b77      	ldr	r3, [pc, #476]	@ (8004250 <HAL_RCC_OscConfig+0x474>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d118      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407e:	4b74      	ldr	r3, [pc, #464]	@ (8004250 <HAL_RCC_OscConfig+0x474>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a73      	ldr	r2, [pc, #460]	@ (8004250 <HAL_RCC_OscConfig+0x474>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800408a:	f7fe f921 	bl	80022d0 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fe f91d 	bl	80022d0 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e10c      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	4b6a      	ldr	r3, [pc, #424]	@ (8004250 <HAL_RCC_OscConfig+0x474>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d106      	bne.n	80040c6 <HAL_RCC_OscConfig+0x2ea>
 80040b8:	4b64      	ldr	r3, [pc, #400]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	4a63      	ldr	r2, [pc, #396]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c4:	e01c      	b.n	8004100 <HAL_RCC_OscConfig+0x324>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x30c>
 80040ce:	4b5f      	ldr	r3, [pc, #380]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040d2:	4a5e      	ldr	r2, [pc, #376]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040da:	4b5c      	ldr	r3, [pc, #368]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040de:	4a5b      	ldr	r2, [pc, #364]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0x324>
 80040e8:	4b58      	ldr	r3, [pc, #352]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a57      	ldr	r2, [pc, #348]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f4:	4b55      	ldr	r3, [pc, #340]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f8:	4a54      	ldr	r2, [pc, #336]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d015      	beq.n	8004134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fe f8e2 	bl	80022d0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fe f8de 	bl	80022d0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0cb      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004126:	4b49      	ldr	r3, [pc, #292]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0ee      	beq.n	8004110 <HAL_RCC_OscConfig+0x334>
 8004132:	e014      	b.n	800415e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004134:	f7fe f8cc 	bl	80022d0 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413a:	e00a      	b.n	8004152 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fe f8c8 	bl	80022d0 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e0b5      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004152:	4b3e      	ldr	r3, [pc, #248]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ee      	bne.n	800413c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415e:	7dfb      	ldrb	r3, [r7, #23]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d105      	bne.n	8004170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004164:	4b39      	ldr	r3, [pc, #228]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	4a38      	ldr	r2, [pc, #224]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80a1 	beq.w	80042bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800417a:	4b34      	ldr	r3, [pc, #208]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b08      	cmp	r3, #8
 8004184:	d05c      	beq.n	8004240 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d141      	bne.n	8004212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418e:	4b31      	ldr	r3, [pc, #196]	@ (8004254 <HAL_RCC_OscConfig+0x478>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe f89c 	bl	80022d0 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419c:	f7fe f898 	bl	80022d0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e087      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	4b27      	ldr	r3, [pc, #156]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69da      	ldr	r2, [r3, #28]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c8:	019b      	lsls	r3, r3, #6
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	3b01      	subs	r3, #1
 80041d4:	041b      	lsls	r3, r3, #16
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	061b      	lsls	r3, r3, #24
 80041de:	491b      	ldr	r1, [pc, #108]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <HAL_RCC_OscConfig+0x478>)
 80041e6:	2201      	movs	r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ea:	f7fe f871 	bl	80022d0 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041f0:	e008      	b.n	8004204 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f2:	f7fe f86d 	bl	80022d0 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e05c      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004204:	4b11      	ldr	r3, [pc, #68]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0f0      	beq.n	80041f2 <HAL_RCC_OscConfig+0x416>
 8004210:	e054      	b.n	80042bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <HAL_RCC_OscConfig+0x478>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004218:	f7fe f85a 	bl	80022d0 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004220:	f7fe f856 	bl	80022d0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e045      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004232:	4b06      	ldr	r3, [pc, #24]	@ (800424c <HAL_RCC_OscConfig+0x470>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x444>
 800423e:	e03d      	b.n	80042bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e038      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
 800424c:	40023800 	.word	0x40023800
 8004250:	40007000 	.word	0x40007000
 8004254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004258:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x4ec>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d028      	beq.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d121      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d11a      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800428e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	085b      	lsrs	r3, r3, #1
 80042a0:	3b01      	subs	r3, #1
 80042a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800

080042cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cc      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e0:	4b68      	ldr	r3, [pc, #416]	@ (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d90c      	bls.n	8004308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b65      	ldr	r3, [pc, #404]	@ (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b63      	ldr	r3, [pc, #396]	@ (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0b8      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d020      	beq.n	8004356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004320:	4b59      	ldr	r3, [pc, #356]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a58      	ldr	r2, [pc, #352]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800432a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d005      	beq.n	8004344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004338:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4a52      	ldr	r2, [pc, #328]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b50      	ldr	r3, [pc, #320]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	494d      	ldr	r1, [pc, #308]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d044      	beq.n	80043ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b47      	ldr	r3, [pc, #284]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d119      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e07f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d003      	beq.n	800438a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	2b03      	cmp	r3, #3
 8004388:	d107      	bne.n	800439a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438a:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e06f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	4b3b      	ldr	r3, [pc, #236]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0302 	and.w	r3, r3, #2
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e067      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043aa:	4b37      	ldr	r3, [pc, #220]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f023 0203 	bic.w	r2, r3, #3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4934      	ldr	r1, [pc, #208]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043bc:	f7fd ff88 	bl	80022d0 <HAL_GetTick>
 80043c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c2:	e00a      	b.n	80043da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c4:	f7fd ff84 	bl	80022d0 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e04f      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043da:	4b2b      	ldr	r3, [pc, #172]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 020c 	and.w	r2, r3, #12
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d1eb      	bne.n	80043c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043ec:	4b25      	ldr	r3, [pc, #148]	@ (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d20c      	bcs.n	8004414 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fa:	4b22      	ldr	r3, [pc, #136]	@ (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	4b20      	ldr	r3, [pc, #128]	@ (8004484 <HAL_RCC_ClockConfig+0x1b8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e032      	b.n	800447a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004420:	4b19      	ldr	r3, [pc, #100]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4916      	ldr	r1, [pc, #88]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d009      	beq.n	8004452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443e:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	490e      	ldr	r1, [pc, #56]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	4313      	orrs	r3, r2
 8004450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004452:	f000 f821 	bl	8004498 <HAL_RCC_GetSysClockFreq>
 8004456:	4602      	mov	r2, r0
 8004458:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	490a      	ldr	r1, [pc, #40]	@ (800448c <HAL_RCC_ClockConfig+0x1c0>)
 8004464:	5ccb      	ldrb	r3, [r1, r3]
 8004466:	fa22 f303 	lsr.w	r3, r2, r3
 800446a:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <HAL_RCC_ClockConfig+0x1c4>)
 800446c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800446e:	4b09      	ldr	r3, [pc, #36]	@ (8004494 <HAL_RCC_ClockConfig+0x1c8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd fee8 	bl	8002248 <HAL_InitTick>

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40023c00 	.word	0x40023c00
 8004488:	40023800 	.word	0x40023800
 800448c:	0800fcb4 	.word	0x0800fcb4
 8004490:	20000004 	.word	0x20000004
 8004494:	20000008 	.word	0x20000008

08004498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800449c:	b094      	sub	sp, #80	@ 0x50
 800449e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044b0:	4b79      	ldr	r3, [pc, #484]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d00d      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x40>
 80044bc:	2b08      	cmp	r3, #8
 80044be:	f200 80e1 	bhi.w	8004684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x34>
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d003      	beq.n	80044d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ca:	e0db      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044cc:	4b73      	ldr	r3, [pc, #460]	@ (800469c <HAL_RCC_GetSysClockFreq+0x204>)
 80044ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d0:	e0db      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044d2:	4b73      	ldr	r3, [pc, #460]	@ (80046a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80044d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d6:	e0d8      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044d8:	4b6f      	ldr	r3, [pc, #444]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d063      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	2200      	movs	r2, #0
 80044f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004500:	633b      	str	r3, [r7, #48]	@ 0x30
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	@ 0x34
 8004506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800450a:	4622      	mov	r2, r4
 800450c:	462b      	mov	r3, r5
 800450e:	f04f 0000 	mov.w	r0, #0
 8004512:	f04f 0100 	mov.w	r1, #0
 8004516:	0159      	lsls	r1, r3, #5
 8004518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800451c:	0150      	lsls	r0, r2, #5
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4621      	mov	r1, r4
 8004524:	1a51      	subs	r1, r2, r1
 8004526:	6139      	str	r1, [r7, #16]
 8004528:	4629      	mov	r1, r5
 800452a:	eb63 0301 	sbc.w	r3, r3, r1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800453c:	4659      	mov	r1, fp
 800453e:	018b      	lsls	r3, r1, #6
 8004540:	4651      	mov	r1, sl
 8004542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004546:	4651      	mov	r1, sl
 8004548:	018a      	lsls	r2, r1, #6
 800454a:	4651      	mov	r1, sl
 800454c:	ebb2 0801 	subs.w	r8, r2, r1
 8004550:	4659      	mov	r1, fp
 8004552:	eb63 0901 	sbc.w	r9, r3, r1
 8004556:	f04f 0200 	mov.w	r2, #0
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800456a:	4690      	mov	r8, r2
 800456c:	4699      	mov	r9, r3
 800456e:	4623      	mov	r3, r4
 8004570:	eb18 0303 	adds.w	r3, r8, r3
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	462b      	mov	r3, r5
 8004578:	eb49 0303 	adc.w	r3, r9, r3
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800458a:	4629      	mov	r1, r5
 800458c:	024b      	lsls	r3, r1, #9
 800458e:	4621      	mov	r1, r4
 8004590:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004594:	4621      	mov	r1, r4
 8004596:	024a      	lsls	r2, r1, #9
 8004598:	4610      	mov	r0, r2
 800459a:	4619      	mov	r1, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459e:	2200      	movs	r2, #0
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045a8:	f7fc f980 	bl	80008ac <__aeabi_uldivmod>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4613      	mov	r3, r2
 80045b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045b4:	e058      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b6:	4b38      	ldr	r3, [pc, #224]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	099b      	lsrs	r3, r3, #6
 80045bc:	2200      	movs	r2, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	4611      	mov	r1, r2
 80045c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045c6:	623b      	str	r3, [r7, #32]
 80045c8:	2300      	movs	r3, #0
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80045cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	f04f 0000 	mov.w	r0, #0
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	0159      	lsls	r1, r3, #5
 80045de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045e2:	0150      	lsls	r0, r2, #5
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4641      	mov	r1, r8
 80045ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80045ee:	4649      	mov	r1, r9
 80045f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004608:	ebb2 040a 	subs.w	r4, r2, sl
 800460c:	eb63 050b 	sbc.w	r5, r3, fp
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	00eb      	lsls	r3, r5, #3
 800461a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800461e:	00e2      	lsls	r2, r4, #3
 8004620:	4614      	mov	r4, r2
 8004622:	461d      	mov	r5, r3
 8004624:	4643      	mov	r3, r8
 8004626:	18e3      	adds	r3, r4, r3
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	464b      	mov	r3, r9
 800462c:	eb45 0303 	adc.w	r3, r5, r3
 8004630:	607b      	str	r3, [r7, #4]
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800463e:	4629      	mov	r1, r5
 8004640:	028b      	lsls	r3, r1, #10
 8004642:	4621      	mov	r1, r4
 8004644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004648:	4621      	mov	r1, r4
 800464a:	028a      	lsls	r2, r1, #10
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004652:	2200      	movs	r2, #0
 8004654:	61bb      	str	r3, [r7, #24]
 8004656:	61fa      	str	r2, [r7, #28]
 8004658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465c:	f7fc f926 	bl	80008ac <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4613      	mov	r3, r2
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <HAL_RCC_GetSysClockFreq+0x200>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	0c1b      	lsrs	r3, r3, #16
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	3301      	adds	r3, #1
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800467a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800467c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004680:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004682:	e002      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <HAL_RCC_GetSysClockFreq+0x204>)
 8004686:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800468c:	4618      	mov	r0, r3
 800468e:	3750      	adds	r7, #80	@ 0x50
 8004690:	46bd      	mov	sp, r7
 8004692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004696:	bf00      	nop
 8004698:	40023800 	.word	0x40023800
 800469c:	00f42400 	.word	0x00f42400
 80046a0:	007a1200 	.word	0x007a1200

080046a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a8:	4b03      	ldr	r3, [pc, #12]	@ (80046b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000004 	.word	0x20000004

080046bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046c0:	f7ff fff0 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0a9b      	lsrs	r3, r3, #10
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4903      	ldr	r1, [pc, #12]	@ (80046e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d8:	4618      	mov	r0, r3
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40023800 	.word	0x40023800
 80046e0:	0800fcc4 	.word	0x0800fcc4

080046e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046e8:	f7ff ffdc 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046ec:	4602      	mov	r2, r0
 80046ee:	4b05      	ldr	r3, [pc, #20]	@ (8004704 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	0b5b      	lsrs	r3, r3, #13
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	4903      	ldr	r1, [pc, #12]	@ (8004708 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046fa:	5ccb      	ldrb	r3, [r1, r3]
 80046fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40023800 	.word	0x40023800
 8004708:	0800fcc4 	.word	0x0800fcc4

0800470c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07b      	b.n	8004816 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800472e:	d009      	beq.n	8004744 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	61da      	str	r2, [r3, #28]
 8004736:	e005      	b.n	8004744 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d106      	bne.n	8004764 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd fbc0 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800477a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	ea42 0103 	orr.w	r1, r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	0c1b      	lsrs	r3, r3, #16
 80047e2:	f003 0104 	and.w	r1, r3, #4
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	f003 0210 	and.w	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b088      	sub	sp, #32
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	603b      	str	r3, [r7, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800482e:	f7fd fd4f 	bl	80022d0 <HAL_GetTick>
 8004832:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d001      	beq.n	8004848 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
 8004846:	e12a      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <HAL_SPI_Transmit+0x36>
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e122      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Transmit+0x48>
 8004862:	2302      	movs	r3, #2
 8004864:	e11b      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2203      	movs	r2, #3
 8004872:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	88fa      	ldrh	r2, [r7, #6]
 8004886:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048b4:	d10f      	bne.n	80048d6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e0:	2b40      	cmp	r3, #64	@ 0x40
 80048e2:	d007      	beq.n	80048f4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048fc:	d152      	bne.n	80049a4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_SPI_Transmit+0xee>
 8004906:	8b7b      	ldrh	r3, [r7, #26]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d145      	bne.n	8004998 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	881a      	ldrh	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491c:	1c9a      	adds	r2, r3, #2
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004930:	e032      	b.n	8004998 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b02      	cmp	r3, #2
 800493e:	d112      	bne.n	8004966 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	881a      	ldrh	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495a:	b29b      	uxth	r3, r3
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004964:	e018      	b.n	8004998 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004966:	f7fd fcb3 	bl	80022d0 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d803      	bhi.n	800497e <HAL_SPI_Transmit+0x160>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Transmit+0x166>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e082      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1c7      	bne.n	8004932 <HAL_SPI_Transmit+0x114>
 80049a2:	e053      	b.n	8004a4c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_SPI_Transmit+0x194>
 80049ac:	8b7b      	ldrh	r3, [r7, #26]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d147      	bne.n	8004a42 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	330c      	adds	r3, #12
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049d8:	e033      	b.n	8004a42 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d113      	bne.n	8004a10 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	7812      	ldrb	r2, [r2, #0]
 80049f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004a0e:	e018      	b.n	8004a42 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a10:	f7fd fc5e 	bl	80022d0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d803      	bhi.n	8004a28 <HAL_SPI_Transmit+0x20a>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d102      	bne.n	8004a2e <HAL_SPI_Transmit+0x210>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d109      	bne.n	8004a42 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e02d      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1c6      	bne.n	80049da <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fa59 	bl	8004f08 <SPI_EndRxTxTransaction>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10a      	bne.n	8004a80 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e000      	b.n	8004a9e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b08a      	sub	sp, #40	@ 0x28
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab8:	f7fd fc0a 	bl	80022d0 <HAL_GetTick>
 8004abc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ac4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004acc:	887b      	ldrh	r3, [r7, #2]
 8004ace:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ad0:	7ffb      	ldrb	r3, [r7, #31]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d00c      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x4a>
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004adc:	d106      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <HAL_SPI_TransmitReceive+0x46>
 8004ae6:	7ffb      	ldrb	r3, [r7, #31]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d001      	beq.n	8004af0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004aec:	2302      	movs	r3, #2
 8004aee:	e17f      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x5c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d002      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x5c>
 8004afc:	887b      	ldrh	r3, [r7, #2]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e174      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_SPI_TransmitReceive+0x6e>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e16d      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b04      	cmp	r3, #4
 8004b26:	d003      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	887a      	ldrh	r2, [r7, #2]
 8004b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	887a      	ldrh	r2, [r7, #2]
 8004b46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	887a      	ldrh	r2, [r7, #2]
 8004b52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b70:	2b40      	cmp	r3, #64	@ 0x40
 8004b72:	d007      	beq.n	8004b84 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b8c:	d17e      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <HAL_SPI_TransmitReceive+0xf6>
 8004b96:	8afb      	ldrh	r3, [r7, #22]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d16c      	bne.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bc0:	e059      	b.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d11b      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x162>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_SPI_TransmitReceive+0x162>
 8004bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d113      	bne.n	8004c08 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d119      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x1a4>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d014      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2a:	b292      	uxth	r2, r2
 8004c2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c32:	1c9a      	adds	r2, r3, #2
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c46:	2301      	movs	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004c4a:	f7fd fb41 	bl	80022d0 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d80d      	bhi.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d009      	beq.n	8004c76 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e0bc      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1a0      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x11c>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d19b      	bne.n	8004bc2 <HAL_SPI_TransmitReceive+0x11c>
 8004c8a:	e082      	b.n	8004d92 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <HAL_SPI_TransmitReceive+0x1f4>
 8004c94:	8afb      	ldrh	r3, [r7, #22]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d171      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	7812      	ldrb	r2, [r2, #0]
 8004ca6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cc0:	e05d      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d11c      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x264>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d017      	beq.n	8004d0a <HAL_SPI_TransmitReceive+0x264>
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d114      	bne.n	8004d0a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d119      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x2a6>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d014      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d4c:	f7fd fac0 	bl	80022d0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d803      	bhi.n	8004d64 <HAL_SPI_TransmitReceive+0x2be>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x2c4>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e038      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d19c      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x21c>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d197      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f8b6 	bl	8004f08 <SPI_EndRxTxTransaction>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d008      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2220      	movs	r2, #32
 8004da6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e01d      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	613b      	str	r3, [r7, #16]
 8004dd0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004dee:	2300      	movs	r3, #0
  }
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3728      	adds	r7, #40	@ 0x28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e08:	f7fd fa62 	bl	80022d0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e18:	f7fd fa5a 	bl	80022d0 <HAL_GetTick>
 8004e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e1e:	4b39      	ldr	r3, [pc, #228]	@ (8004f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	015b      	lsls	r3, r3, #5
 8004e24:	0d1b      	lsrs	r3, r3, #20
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	fb02 f303 	mul.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e2e:	e055      	b.n	8004edc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d051      	beq.n	8004edc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e38:	f7fd fa4a 	bl	80022d0 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d13d      	bne.n	8004eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e66:	d111      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e70:	d004      	beq.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d107      	bne.n	8004e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e94:	d10f      	bne.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e018      	b.n	8004efc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d102      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	e002      	b.n	8004edc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d19a      	bne.n	8004e30 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3720      	adds	r7, #32
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	20000004 	.word	0x20000004

08004f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	2102      	movs	r1, #2
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f7ff ff6a 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2e:	f043 0220 	orr.w	r2, r3, #32
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e032      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa8 <SPI_EndRxTxTransaction+0xa0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fac <SPI_EndRxTxTransaction+0xa4>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	0d5b      	lsrs	r3, r3, #21
 8004f46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f58:	d112      	bne.n	8004f80 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2180      	movs	r1, #128	@ 0x80
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff ff47 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d016      	beq.n	8004f9e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e00f      	b.n	8004fa0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f96:	2b80      	cmp	r3, #128	@ 0x80
 8004f98:	d0f2      	beq.n	8004f80 <SPI_EndRxTxTransaction+0x78>
 8004f9a:	e000      	b.n	8004f9e <SPI_EndRxTxTransaction+0x96>
        break;
 8004f9c:	bf00      	nop
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3718      	adds	r7, #24
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000004 	.word	0x20000004
 8004fac:	165e9f81 	.word	0x165e9f81

08004fb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e042      	b.n	8005048 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc ffcc 	bl	8001f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2224      	movs	r2, #36	@ 0x24
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ff2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f973 	bl	80052e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005008:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005018:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005028:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	@ 0x28
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	603b      	str	r3, [r7, #0]
 800505c:	4613      	mov	r3, r2
 800505e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b20      	cmp	r3, #32
 800506e:	d175      	bne.n	800515c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <HAL_UART_Transmit+0x2c>
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e06e      	b.n	800515e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2221      	movs	r2, #33	@ 0x21
 800508a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800508e:	f7fd f91f 	bl	80022d0 <HAL_GetTick>
 8005092:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050a8:	d108      	bne.n	80050bc <HAL_UART_Transmit+0x6c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d104      	bne.n	80050bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	61bb      	str	r3, [r7, #24]
 80050ba:	e003      	b.n	80050c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050c4:	e02e      	b.n	8005124 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2200      	movs	r2, #0
 80050ce:	2180      	movs	r1, #128	@ 0x80
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f848 	bl	8005166 <UART_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e03a      	b.n	800515e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10b      	bne.n	8005106 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	3302      	adds	r3, #2
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e007      	b.n	8005116 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	781a      	ldrb	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	3301      	adds	r3, #1
 8005114:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1cb      	bne.n	80050c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2200      	movs	r2, #0
 8005136:	2140      	movs	r1, #64	@ 0x40
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f814 	bl	8005166 <UART_WaitOnFlagUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e006      	b.n	800515e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b086      	sub	sp, #24
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	603b      	str	r3, [r7, #0]
 8005172:	4613      	mov	r3, r2
 8005174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005176:	e03b      	b.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d037      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005180:	f7fd f8a6 	bl	80022d0 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	6a3a      	ldr	r2, [r7, #32]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <UART_WaitOnFlagUntilTimeout+0x30>
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e03a      	b.n	8005210 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d023      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	d020      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b40      	cmp	r3, #64	@ 0x40
 80051b2:	d01d      	beq.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d116      	bne.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80051c2:	2300      	movs	r3, #0
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	617b      	str	r3, [r7, #20]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	617b      	str	r3, [r7, #20]
 80051d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f81d 	bl	8005218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2208      	movs	r2, #8
 80051e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e00f      	b.n	8005210 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4013      	ands	r3, r2
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	461a      	mov	r2, r3
 8005208:	79fb      	ldrb	r3, [r7, #7]
 800520a:	429a      	cmp	r2, r3
 800520c:	d0b4      	beq.n	8005178 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b095      	sub	sp, #84	@ 0x54
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005232:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005236:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005240:	643a      	str	r2, [r7, #64]	@ 0x40
 8005242:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800524e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	e853 3f00 	ldrex	r3, [r3]
 8005262:	61fb      	str	r3, [r7, #28]
   return(result);
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f023 0301 	bic.w	r3, r3, #1
 800526a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3314      	adds	r3, #20
 8005272:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800527a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527c:	e841 2300 	strex	r3, r2, [r1]
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1e5      	bne.n	8005254 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	2b01      	cmp	r3, #1
 800528e:	d119      	bne.n	80052c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052b0:	61ba      	str	r2, [r7, #24]
 80052b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	613b      	str	r3, [r7, #16]
   return(result);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80052d2:	bf00      	nop
 80052d4:	3754      	adds	r7, #84	@ 0x54
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
	...

080052e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e4:	b0c0      	sub	sp, #256	@ 0x100
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fc:	68d9      	ldr	r1, [r3, #12]
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	ea40 0301 	orr.w	r3, r0, r1
 8005308:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	431a      	orrs	r2, r3
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	431a      	orrs	r2, r3
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005338:	f021 010c 	bic.w	r1, r1, #12
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005346:	430b      	orrs	r3, r1
 8005348:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535a:	6999      	ldr	r1, [r3, #24]
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	ea40 0301 	orr.w	r3, r0, r1
 8005366:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b8f      	ldr	r3, [pc, #572]	@ (80055ac <UART_SetConfig+0x2cc>)
 8005370:	429a      	cmp	r2, r3
 8005372:	d005      	beq.n	8005380 <UART_SetConfig+0xa0>
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b8d      	ldr	r3, [pc, #564]	@ (80055b0 <UART_SetConfig+0x2d0>)
 800537c:	429a      	cmp	r2, r3
 800537e:	d104      	bne.n	800538a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005380:	f7ff f9b0 	bl	80046e4 <HAL_RCC_GetPCLK2Freq>
 8005384:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005388:	e003      	b.n	8005392 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800538a:	f7ff f997 	bl	80046bc <HAL_RCC_GetPCLK1Freq>
 800538e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800539c:	f040 810c 	bne.w	80055b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053b2:	4622      	mov	r2, r4
 80053b4:	462b      	mov	r3, r5
 80053b6:	1891      	adds	r1, r2, r2
 80053b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80053ba:	415b      	adcs	r3, r3
 80053bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053c2:	4621      	mov	r1, r4
 80053c4:	eb12 0801 	adds.w	r8, r2, r1
 80053c8:	4629      	mov	r1, r5
 80053ca:	eb43 0901 	adc.w	r9, r3, r1
 80053ce:	f04f 0200 	mov.w	r2, #0
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e2:	4690      	mov	r8, r2
 80053e4:	4699      	mov	r9, r3
 80053e6:	4623      	mov	r3, r4
 80053e8:	eb18 0303 	adds.w	r3, r8, r3
 80053ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80053f0:	462b      	mov	r3, r5
 80053f2:	eb49 0303 	adc.w	r3, r9, r3
 80053f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005406:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800540a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800540e:	460b      	mov	r3, r1
 8005410:	18db      	adds	r3, r3, r3
 8005412:	653b      	str	r3, [r7, #80]	@ 0x50
 8005414:	4613      	mov	r3, r2
 8005416:	eb42 0303 	adc.w	r3, r2, r3
 800541a:	657b      	str	r3, [r7, #84]	@ 0x54
 800541c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005420:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005424:	f7fb fa42 	bl	80008ac <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4b61      	ldr	r3, [pc, #388]	@ (80055b4 <UART_SetConfig+0x2d4>)
 800542e:	fba3 2302 	umull	r2, r3, r3, r2
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	011c      	lsls	r4, r3, #4
 8005436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005440:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005444:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005448:	4642      	mov	r2, r8
 800544a:	464b      	mov	r3, r9
 800544c:	1891      	adds	r1, r2, r2
 800544e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005450:	415b      	adcs	r3, r3
 8005452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005454:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005458:	4641      	mov	r1, r8
 800545a:	eb12 0a01 	adds.w	sl, r2, r1
 800545e:	4649      	mov	r1, r9
 8005460:	eb43 0b01 	adc.w	fp, r3, r1
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005470:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005474:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005478:	4692      	mov	sl, r2
 800547a:	469b      	mov	fp, r3
 800547c:	4643      	mov	r3, r8
 800547e:	eb1a 0303 	adds.w	r3, sl, r3
 8005482:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005486:	464b      	mov	r3, r9
 8005488:	eb4b 0303 	adc.w	r3, fp, r3
 800548c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800549c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054a4:	460b      	mov	r3, r1
 80054a6:	18db      	adds	r3, r3, r3
 80054a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80054aa:	4613      	mov	r3, r2
 80054ac:	eb42 0303 	adc.w	r3, r2, r3
 80054b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80054ba:	f7fb f9f7 	bl	80008ac <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4611      	mov	r1, r2
 80054c4:	4b3b      	ldr	r3, [pc, #236]	@ (80055b4 <UART_SetConfig+0x2d4>)
 80054c6:	fba3 2301 	umull	r2, r3, r3, r1
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	2264      	movs	r2, #100	@ 0x64
 80054ce:	fb02 f303 	mul.w	r3, r2, r3
 80054d2:	1acb      	subs	r3, r1, r3
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80054da:	4b36      	ldr	r3, [pc, #216]	@ (80055b4 <UART_SetConfig+0x2d4>)
 80054dc:	fba3 2302 	umull	r2, r3, r3, r2
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80054e8:	441c      	add	r4, r3
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ee:	2200      	movs	r2, #0
 80054f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80054f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80054f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	1891      	adds	r1, r2, r2
 8005502:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005504:	415b      	adcs	r3, r3
 8005506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005508:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800550c:	4641      	mov	r1, r8
 800550e:	1851      	adds	r1, r2, r1
 8005510:	6339      	str	r1, [r7, #48]	@ 0x30
 8005512:	4649      	mov	r1, r9
 8005514:	414b      	adcs	r3, r1
 8005516:	637b      	str	r3, [r7, #52]	@ 0x34
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	f04f 0300 	mov.w	r3, #0
 8005520:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005524:	4659      	mov	r1, fp
 8005526:	00cb      	lsls	r3, r1, #3
 8005528:	4651      	mov	r1, sl
 800552a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552e:	4651      	mov	r1, sl
 8005530:	00ca      	lsls	r2, r1, #3
 8005532:	4610      	mov	r0, r2
 8005534:	4619      	mov	r1, r3
 8005536:	4603      	mov	r3, r0
 8005538:	4642      	mov	r2, r8
 800553a:	189b      	adds	r3, r3, r2
 800553c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005540:	464b      	mov	r3, r9
 8005542:	460a      	mov	r2, r1
 8005544:	eb42 0303 	adc.w	r3, r2, r3
 8005548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005558:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800555c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005560:	460b      	mov	r3, r1
 8005562:	18db      	adds	r3, r3, r3
 8005564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005566:	4613      	mov	r3, r2
 8005568:	eb42 0303 	adc.w	r3, r2, r3
 800556c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800556e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005572:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005576:	f7fb f999 	bl	80008ac <__aeabi_uldivmod>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4b0d      	ldr	r3, [pc, #52]	@ (80055b4 <UART_SetConfig+0x2d4>)
 8005580:	fba3 1302 	umull	r1, r3, r3, r2
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	2164      	movs	r1, #100	@ 0x64
 8005588:	fb01 f303 	mul.w	r3, r1, r3
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	3332      	adds	r3, #50	@ 0x32
 8005592:	4a08      	ldr	r2, [pc, #32]	@ (80055b4 <UART_SetConfig+0x2d4>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	095b      	lsrs	r3, r3, #5
 800559a:	f003 0207 	and.w	r2, r3, #7
 800559e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4422      	add	r2, r4
 80055a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055a8:	e106      	b.n	80057b8 <UART_SetConfig+0x4d8>
 80055aa:	bf00      	nop
 80055ac:	40011000 	.word	0x40011000
 80055b0:	40011400 	.word	0x40011400
 80055b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055bc:	2200      	movs	r2, #0
 80055be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80055c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80055c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80055ca:	4642      	mov	r2, r8
 80055cc:	464b      	mov	r3, r9
 80055ce:	1891      	adds	r1, r2, r2
 80055d0:	6239      	str	r1, [r7, #32]
 80055d2:	415b      	adcs	r3, r3
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055da:	4641      	mov	r1, r8
 80055dc:	1854      	adds	r4, r2, r1
 80055de:	4649      	mov	r1, r9
 80055e0:	eb43 0501 	adc.w	r5, r3, r1
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	f04f 0300 	mov.w	r3, #0
 80055ec:	00eb      	lsls	r3, r5, #3
 80055ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055f2:	00e2      	lsls	r2, r4, #3
 80055f4:	4614      	mov	r4, r2
 80055f6:	461d      	mov	r5, r3
 80055f8:	4643      	mov	r3, r8
 80055fa:	18e3      	adds	r3, r4, r3
 80055fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005600:	464b      	mov	r3, r9
 8005602:	eb45 0303 	adc.w	r3, r5, r3
 8005606:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005616:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005626:	4629      	mov	r1, r5
 8005628:	008b      	lsls	r3, r1, #2
 800562a:	4621      	mov	r1, r4
 800562c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005630:	4621      	mov	r1, r4
 8005632:	008a      	lsls	r2, r1, #2
 8005634:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005638:	f7fb f938 	bl	80008ac <__aeabi_uldivmod>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	4b60      	ldr	r3, [pc, #384]	@ (80057c4 <UART_SetConfig+0x4e4>)
 8005642:	fba3 2302 	umull	r2, r3, r3, r2
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	011c      	lsls	r4, r3, #4
 800564a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564e:	2200      	movs	r2, #0
 8005650:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005654:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005658:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	1891      	adds	r1, r2, r2
 8005662:	61b9      	str	r1, [r7, #24]
 8005664:	415b      	adcs	r3, r3
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800566c:	4641      	mov	r1, r8
 800566e:	1851      	adds	r1, r2, r1
 8005670:	6139      	str	r1, [r7, #16]
 8005672:	4649      	mov	r1, r9
 8005674:	414b      	adcs	r3, r1
 8005676:	617b      	str	r3, [r7, #20]
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005684:	4659      	mov	r1, fp
 8005686:	00cb      	lsls	r3, r1, #3
 8005688:	4651      	mov	r1, sl
 800568a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800568e:	4651      	mov	r1, sl
 8005690:	00ca      	lsls	r2, r1, #3
 8005692:	4610      	mov	r0, r2
 8005694:	4619      	mov	r1, r3
 8005696:	4603      	mov	r3, r0
 8005698:	4642      	mov	r2, r8
 800569a:	189b      	adds	r3, r3, r2
 800569c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056a0:	464b      	mov	r3, r9
 80056a2:	460a      	mov	r2, r1
 80056a4:	eb42 0303 	adc.w	r3, r2, r3
 80056a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80056c4:	4649      	mov	r1, r9
 80056c6:	008b      	lsls	r3, r1, #2
 80056c8:	4641      	mov	r1, r8
 80056ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056ce:	4641      	mov	r1, r8
 80056d0:	008a      	lsls	r2, r1, #2
 80056d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80056d6:	f7fb f8e9 	bl	80008ac <__aeabi_uldivmod>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4611      	mov	r1, r2
 80056e0:	4b38      	ldr	r3, [pc, #224]	@ (80057c4 <UART_SetConfig+0x4e4>)
 80056e2:	fba3 2301 	umull	r2, r3, r3, r1
 80056e6:	095b      	lsrs	r3, r3, #5
 80056e8:	2264      	movs	r2, #100	@ 0x64
 80056ea:	fb02 f303 	mul.w	r3, r2, r3
 80056ee:	1acb      	subs	r3, r1, r3
 80056f0:	011b      	lsls	r3, r3, #4
 80056f2:	3332      	adds	r3, #50	@ 0x32
 80056f4:	4a33      	ldr	r2, [pc, #204]	@ (80057c4 <UART_SetConfig+0x4e4>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005700:	441c      	add	r4, r3
 8005702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005706:	2200      	movs	r2, #0
 8005708:	673b      	str	r3, [r7, #112]	@ 0x70
 800570a:	677a      	str	r2, [r7, #116]	@ 0x74
 800570c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005710:	4642      	mov	r2, r8
 8005712:	464b      	mov	r3, r9
 8005714:	1891      	adds	r1, r2, r2
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	415b      	adcs	r3, r3
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005720:	4641      	mov	r1, r8
 8005722:	1851      	adds	r1, r2, r1
 8005724:	6039      	str	r1, [r7, #0]
 8005726:	4649      	mov	r1, r9
 8005728:	414b      	adcs	r3, r1
 800572a:	607b      	str	r3, [r7, #4]
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005738:	4659      	mov	r1, fp
 800573a:	00cb      	lsls	r3, r1, #3
 800573c:	4651      	mov	r1, sl
 800573e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005742:	4651      	mov	r1, sl
 8005744:	00ca      	lsls	r2, r1, #3
 8005746:	4610      	mov	r0, r2
 8005748:	4619      	mov	r1, r3
 800574a:	4603      	mov	r3, r0
 800574c:	4642      	mov	r2, r8
 800574e:	189b      	adds	r3, r3, r2
 8005750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005752:	464b      	mov	r3, r9
 8005754:	460a      	mov	r2, r1
 8005756:	eb42 0303 	adc.w	r3, r2, r3
 800575a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	663b      	str	r3, [r7, #96]	@ 0x60
 8005766:	667a      	str	r2, [r7, #100]	@ 0x64
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005774:	4649      	mov	r1, r9
 8005776:	008b      	lsls	r3, r1, #2
 8005778:	4641      	mov	r1, r8
 800577a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800577e:	4641      	mov	r1, r8
 8005780:	008a      	lsls	r2, r1, #2
 8005782:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005786:	f7fb f891 	bl	80008ac <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <UART_SetConfig+0x4e4>)
 8005790:	fba3 1302 	umull	r1, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	2164      	movs	r1, #100	@ 0x64
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	3332      	adds	r3, #50	@ 0x32
 80057a2:	4a08      	ldr	r2, [pc, #32]	@ (80057c4 <UART_SetConfig+0x4e4>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f003 020f 	and.w	r2, r3, #15
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4422      	add	r2, r4
 80057b6:	609a      	str	r2, [r3, #8]
}
 80057b8:	bf00      	nop
 80057ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80057be:	46bd      	mov	sp, r7
 80057c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c4:	51eb851f 	.word	0x51eb851f

080057c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057c8:	b084      	sub	sp, #16
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	f107 001c 	add.w	r0, r7, #28
 80057d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d123      	bne.n	800582a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80057f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800580a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800580e:	2b01      	cmp	r3, #1
 8005810:	d105      	bne.n	800581e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f001 fae8 	bl	8006df4 <USB_CoreReset>
 8005824:	4603      	mov	r3, r0
 8005826:	73fb      	strb	r3, [r7, #15]
 8005828:	e01b      	b.n	8005862 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 fadc 	bl	8006df4 <USB_CoreReset>
 800583c:	4603      	mov	r3, r0
 800583e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005840:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	639a      	str	r2, [r3, #56]	@ 0x38
 8005854:	e005      	b.n	8005862 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005862:	7fbb      	ldrb	r3, [r7, #30]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d10b      	bne.n	8005880 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f043 0206 	orr.w	r2, r3, #6
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f043 0220 	orr.w	r2, r3, #32
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005880:	7bfb      	ldrb	r3, [r7, #15]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800588c:	b004      	add	sp, #16
 800588e:	4770      	bx	lr

08005890 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4613      	mov	r3, r2
 800589c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d165      	bne.n	8005970 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4a41      	ldr	r2, [pc, #260]	@ (80059ac <USB_SetTurnaroundTime+0x11c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d906      	bls.n	80058ba <USB_SetTurnaroundTime+0x2a>
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4a40      	ldr	r2, [pc, #256]	@ (80059b0 <USB_SetTurnaroundTime+0x120>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d202      	bcs.n	80058ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058b4:	230f      	movs	r3, #15
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	e062      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	4a3c      	ldr	r2, [pc, #240]	@ (80059b0 <USB_SetTurnaroundTime+0x120>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d306      	bcc.n	80058d0 <USB_SetTurnaroundTime+0x40>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	4a3b      	ldr	r2, [pc, #236]	@ (80059b4 <USB_SetTurnaroundTime+0x124>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d202      	bcs.n	80058d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058ca:	230e      	movs	r3, #14
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e057      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4a38      	ldr	r2, [pc, #224]	@ (80059b4 <USB_SetTurnaroundTime+0x124>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d306      	bcc.n	80058e6 <USB_SetTurnaroundTime+0x56>
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4a37      	ldr	r2, [pc, #220]	@ (80059b8 <USB_SetTurnaroundTime+0x128>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d202      	bcs.n	80058e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058e0:	230d      	movs	r3, #13
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	e04c      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4a33      	ldr	r2, [pc, #204]	@ (80059b8 <USB_SetTurnaroundTime+0x128>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d306      	bcc.n	80058fc <USB_SetTurnaroundTime+0x6c>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	4a32      	ldr	r2, [pc, #200]	@ (80059bc <USB_SetTurnaroundTime+0x12c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d802      	bhi.n	80058fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058f6:	230c      	movs	r3, #12
 80058f8:	617b      	str	r3, [r7, #20]
 80058fa:	e041      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4a2f      	ldr	r2, [pc, #188]	@ (80059bc <USB_SetTurnaroundTime+0x12c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d906      	bls.n	8005912 <USB_SetTurnaroundTime+0x82>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	4a2e      	ldr	r2, [pc, #184]	@ (80059c0 <USB_SetTurnaroundTime+0x130>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d802      	bhi.n	8005912 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800590c:	230b      	movs	r3, #11
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	e036      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4a2a      	ldr	r2, [pc, #168]	@ (80059c0 <USB_SetTurnaroundTime+0x130>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d906      	bls.n	8005928 <USB_SetTurnaroundTime+0x98>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4a29      	ldr	r2, [pc, #164]	@ (80059c4 <USB_SetTurnaroundTime+0x134>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d802      	bhi.n	8005928 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005922:	230a      	movs	r3, #10
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e02b      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	4a26      	ldr	r2, [pc, #152]	@ (80059c4 <USB_SetTurnaroundTime+0x134>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d906      	bls.n	800593e <USB_SetTurnaroundTime+0xae>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	4a25      	ldr	r2, [pc, #148]	@ (80059c8 <USB_SetTurnaroundTime+0x138>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d202      	bcs.n	800593e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005938:	2309      	movs	r3, #9
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	e020      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4a21      	ldr	r2, [pc, #132]	@ (80059c8 <USB_SetTurnaroundTime+0x138>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d306      	bcc.n	8005954 <USB_SetTurnaroundTime+0xc4>
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4a20      	ldr	r2, [pc, #128]	@ (80059cc <USB_SetTurnaroundTime+0x13c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d802      	bhi.n	8005954 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800594e:	2308      	movs	r3, #8
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	e015      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	4a1d      	ldr	r2, [pc, #116]	@ (80059cc <USB_SetTurnaroundTime+0x13c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d906      	bls.n	800596a <USB_SetTurnaroundTime+0xda>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	4a1c      	ldr	r2, [pc, #112]	@ (80059d0 <USB_SetTurnaroundTime+0x140>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d202      	bcs.n	800596a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005964:	2307      	movs	r3, #7
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	e00a      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800596a:	2306      	movs	r3, #6
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	e007      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005976:	2309      	movs	r3, #9
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e001      	b.n	8005980 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800597c:	2309      	movs	r3, #9
 800597e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	029b      	lsls	r3, r3, #10
 8005994:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005998:	431a      	orrs	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	00d8acbf 	.word	0x00d8acbf
 80059b0:	00e4e1c0 	.word	0x00e4e1c0
 80059b4:	00f42400 	.word	0x00f42400
 80059b8:	01067380 	.word	0x01067380
 80059bc:	011a499f 	.word	0x011a499f
 80059c0:	01312cff 	.word	0x01312cff
 80059c4:	014ca43f 	.word	0x014ca43f
 80059c8:	016e3600 	.word	0x016e3600
 80059cc:	01a6ab1f 	.word	0x01a6ab1f
 80059d0:	01e84800 	.word	0x01e84800

080059d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f043 0201 	orr.w	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f023 0201 	bic.w	r2, r3, #1
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d115      	bne.n	8005a66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a46:	200a      	movs	r0, #10
 8005a48:	f7fc fc4e 	bl	80022e8 <HAL_Delay>
      ms += 10U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	330a      	adds	r3, #10
 8005a50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 f93f 	bl	8006cd6 <USB_GetMode>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d01e      	beq.n	8005a9c <USB_SetCurrentMode+0x84>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a62:	d9f0      	bls.n	8005a46 <USB_SetCurrentMode+0x2e>
 8005a64:	e01a      	b.n	8005a9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a66:	78fb      	ldrb	r3, [r7, #3]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d115      	bne.n	8005a98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a78:	200a      	movs	r0, #10
 8005a7a:	f7fc fc35 	bl	80022e8 <HAL_Delay>
      ms += 10U;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	330a      	adds	r3, #10
 8005a82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 f926 	bl	8006cd6 <USB_GetMode>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <USB_SetCurrentMode+0x84>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a94:	d9f0      	bls.n	8005a78 <USB_SetCurrentMode+0x60>
 8005a96:	e001      	b.n	8005a9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e005      	b.n	8005aa8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005aa0:	d101      	bne.n	8005aa6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
 8005aba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	613b      	str	r3, [r7, #16]
 8005ace:	e009      	b.n	8005ae4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	3340      	adds	r3, #64	@ 0x40
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	2200      	movs	r2, #0
 8005adc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b0e      	cmp	r3, #14
 8005ae8:	d9f2      	bls.n	8005ad0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d11c      	bne.n	8005b2c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b00:	f043 0302 	orr.w	r3, r3, #2
 8005b04:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b16:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b22:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b2a:	e00b      	b.n	8005b44 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b30:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b50:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d10d      	bne.n	8005b74 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b60:	2100      	movs	r1, #0
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f968 	bl	8005e38 <USB_SetDevSpeed>
 8005b68:	e008      	b.n	8005b7c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f963 	bl	8005e38 <USB_SetDevSpeed>
 8005b72:	e003      	b.n	8005b7c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b74:	2103      	movs	r1, #3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f95e 	bl	8005e38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b7c:	2110      	movs	r1, #16
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8fa 	bl	8005d78 <USB_FlushTxFifo>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f924 	bl	8005ddc <USB_FlushRxFifo>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	613b      	str	r3, [r7, #16]
 8005bc6:	e043      	b.n	8005c50 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bde:	d118      	bne.n	8005c12 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	e013      	b.n	8005c24 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c08:	461a      	mov	r2, r3
 8005c0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	e008      	b.n	8005c24 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2300      	movs	r3, #0
 8005c22:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c30:	461a      	mov	r2, r3
 8005c32:	2300      	movs	r3, #0
 8005c34:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c42:	461a      	mov	r2, r3
 8005c44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005c48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005c54:	461a      	mov	r2, r3
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d3b5      	bcc.n	8005bc8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	613b      	str	r3, [r7, #16]
 8005c60:	e043      	b.n	8005cea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c78:	d118      	bne.n	8005cac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10a      	bne.n	8005c96 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	e013      	b.n	8005cbe <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e008      	b.n	8005cbe <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb8:	461a      	mov	r2, r3
 8005cba:	2300      	movs	r3, #0
 8005cbc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cca:	461a      	mov	r2, r3
 8005ccc:	2300      	movs	r3, #0
 8005cce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ce2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005cee:	461a      	mov	r2, r3
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d3b5      	bcc.n	8005c62 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d08:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005d16:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d105      	bne.n	8005d2c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	f043 0210 	orr.w	r2, r3, #16
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	4b10      	ldr	r3, [pc, #64]	@ (8005d74 <USB_DevInit+0x2c4>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d38:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f043 0208 	orr.w	r2, r3, #8
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d4c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d107      	bne.n	8005d64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d5c:	f043 0304 	orr.w	r3, r3, #4
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d70:	b004      	add	sp, #16
 8005d72:	4770      	bx	lr
 8005d74:	803c3800 	.word	0x803c3800

08005d78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d92:	d901      	bls.n	8005d98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e01b      	b.n	8005dd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	daf2      	bge.n	8005d86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	019b      	lsls	r3, r3, #6
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dbc:	d901      	bls.n	8005dc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e006      	b.n	8005dd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0320 	and.w	r3, r3, #32
 8005dca:	2b20      	cmp	r3, #32
 8005dcc:	d0f0      	beq.n	8005db0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005df4:	d901      	bls.n	8005dfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e018      	b.n	8005e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	daf2      	bge.n	8005de8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2210      	movs	r2, #16
 8005e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e18:	d901      	bls.n	8005e1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e006      	b.n	8005e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0310 	and.w	r3, r3, #16
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d0f0      	beq.n	8005e0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	68f9      	ldr	r1, [r7, #12]
 8005e54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b087      	sub	sp, #28
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 0306 	and.w	r3, r3, #6
 8005e82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d102      	bne.n	8005e90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]
 8005e8e:	e00a      	b.n	8005ea6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d002      	beq.n	8005e9c <USB_GetDevSpeed+0x32>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b06      	cmp	r3, #6
 8005e9a:	d102      	bne.n	8005ea2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	75fb      	strb	r3, [r7, #23]
 8005ea0:	e001      	b.n	8005ea6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ea2:	230f      	movs	r3, #15
 8005ea4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	785b      	ldrb	r3, [r3, #1]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d13a      	bne.n	8005f46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	68f9      	ldr	r1, [r7, #12]
 8005eea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d155      	bne.n	8005fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	791b      	ldrb	r3, [r3, #4]
 8005f22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	059b      	lsls	r3, r3, #22
 8005f2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e036      	b.n	8005fb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4c:	69da      	ldr	r2, [r3, #28]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	2101      	movs	r1, #1
 8005f58:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5c:	041b      	lsls	r3, r3, #16
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d11a      	bne.n	8005fb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	791b      	ldrb	r3, [r3, #4]
 8005f98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f9a:	430b      	orrs	r3, r1
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
	...

08005fc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	785b      	ldrb	r3, [r3, #1]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d161      	bne.n	80060a4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ff6:	d11f      	bne.n	8006038 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	015a      	lsls	r2, r3, #5
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	0151      	lsls	r1, r2, #5
 800600a:	68fa      	ldr	r2, [r7, #12]
 800600c:	440a      	add	r2, r1
 800600e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006012:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006016:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	2101      	movs	r1, #1
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	68f9      	ldr	r1, [r7, #12]
 8006054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006058:	4013      	ands	r3, r2
 800605a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	2101      	movs	r1, #1
 800606e:	fa01 f303 	lsl.w	r3, r1, r3
 8006072:	b29b      	uxth	r3, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	68f9      	ldr	r1, [r7, #12]
 8006078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800607c:	4013      	ands	r3, r2
 800607e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	0159      	lsls	r1, r3, #5
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	440b      	add	r3, r1
 8006096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609a:	4619      	mov	r1, r3
 800609c:	4b35      	ldr	r3, [pc, #212]	@ (8006174 <USB_DeactivateEndpoint+0x1b0>)
 800609e:	4013      	ands	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]
 80060a2:	e060      	b.n	8006166 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060ba:	d11f      	bne.n	80060fc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80060da:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	0151      	lsls	r1, r2, #5
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	440a      	add	r2, r1
 80060f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	f003 030f 	and.w	r3, r3, #15
 800610c:	2101      	movs	r1, #1
 800610e:	fa01 f303 	lsl.w	r3, r1, r3
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	43db      	mvns	r3, r3
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800611c:	4013      	ands	r3, r2
 800611e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	2101      	movs	r1, #1
 8006132:	fa01 f303 	lsl.w	r3, r1, r3
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	43db      	mvns	r3, r3
 800613a:	68f9      	ldr	r1, [r7, #12]
 800613c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006140:	4013      	ands	r3, r2
 8006142:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	0159      	lsls	r1, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	440b      	add	r3, r1
 800615a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615e:	4619      	mov	r1, r3
 8006160:	4b05      	ldr	r3, [pc, #20]	@ (8006178 <USB_DeactivateEndpoint+0x1b4>)
 8006162:	4013      	ands	r3, r2
 8006164:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	ec337800 	.word	0xec337800
 8006178:	eff37800 	.word	0xeff37800

0800617c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08a      	sub	sp, #40	@ 0x28
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	4613      	mov	r3, r2
 8006188:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	785b      	ldrb	r3, [r3, #1]
 8006198:	2b01      	cmp	r3, #1
 800619a:	f040 817f 	bne.w	800649c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d132      	bne.n	800620c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	015a      	lsls	r2, r3, #5
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	0151      	lsls	r1, r2, #5
 80061b8:	69fa      	ldr	r2, [r7, #28]
 80061ba:	440a      	add	r2, r1
 80061bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80061c4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80061c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	69fa      	ldr	r2, [r7, #28]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006204:	0cdb      	lsrs	r3, r3, #19
 8006206:	04db      	lsls	r3, r3, #19
 8006208:	6113      	str	r3, [r2, #16]
 800620a:	e097      	b.n	800633c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	0151      	lsls	r1, r2, #5
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	440a      	add	r2, r1
 8006222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006226:	0cdb      	lsrs	r3, r3, #19
 8006228:	04db      	lsls	r3, r3, #19
 800622a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006246:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800624a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800624e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d11a      	bne.n	800628c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	d903      	bls.n	800626a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006284:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006288:	6113      	str	r3, [r2, #16]
 800628a:	e044      	b.n	8006316 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4413      	add	r3, r2
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	8afb      	ldrh	r3, [r7, #22]
 80062b2:	04d9      	lsls	r1, r3, #19
 80062b4:	4ba4      	ldr	r3, [pc, #656]	@ (8006548 <USB_EPStartXfer+0x3cc>)
 80062b6:	400b      	ands	r3, r1
 80062b8:	69b9      	ldr	r1, [r7, #24]
 80062ba:	0148      	lsls	r0, r1, #5
 80062bc:	69f9      	ldr	r1, [r7, #28]
 80062be:	4401      	add	r1, r0
 80062c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80062c4:	4313      	orrs	r3, r2
 80062c6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	791b      	ldrb	r3, [r3, #4]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d122      	bne.n	8006316 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	0151      	lsls	r1, r2, #5
 80062e2:	69fa      	ldr	r2, [r7, #28]
 80062e4:	440a      	add	r2, r1
 80062e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80062ee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062fc:	691a      	ldr	r2, [r3, #16]
 80062fe:	8afb      	ldrh	r3, [r7, #22]
 8006300:	075b      	lsls	r3, r3, #29
 8006302:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006306:	69b9      	ldr	r1, [r7, #24]
 8006308:	0148      	lsls	r0, r1, #5
 800630a:	69f9      	ldr	r1, [r7, #28]
 800630c:	4401      	add	r1, r0
 800630e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006312:	4313      	orrs	r3, r2
 8006314:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632c:	69b9      	ldr	r1, [r7, #24]
 800632e:	0148      	lsls	r0, r1, #5
 8006330:	69f9      	ldr	r1, [r7, #28]
 8006332:	4401      	add	r1, r0
 8006334:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006338:	4313      	orrs	r3, r2
 800633a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800633c:	79fb      	ldrb	r3, [r7, #7]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d14b      	bne.n	80063da <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006356:	461a      	mov	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	791b      	ldrb	r3, [r3, #4]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d128      	bne.n	80063b8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d110      	bne.n	8006398 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	0151      	lsls	r1, r2, #5
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	440a      	add	r2, r1
 800638c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006390:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006394:	6013      	str	r3, [r2, #0]
 8006396:	e00f      	b.n	80063b8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	69fa      	ldr	r2, [r7, #28]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063b6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	69fa      	ldr	r2, [r7, #28]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e166      	b.n	80066a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	0151      	lsls	r1, r2, #5
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	440a      	add	r2, r1
 80063f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80063f8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	791b      	ldrb	r3, [r3, #4]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d015      	beq.n	800642e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 814e 	beq.w	80066a8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f003 030f 	and.w	r3, r3, #15
 800641c:	2101      	movs	r1, #1
 800641e:	fa01 f303 	lsl.w	r3, r1, r3
 8006422:	69f9      	ldr	r1, [r7, #28]
 8006424:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006428:	4313      	orrs	r3, r2
 800642a:	634b      	str	r3, [r1, #52]	@ 0x34
 800642c:	e13c      	b.n	80066a8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800643a:	2b00      	cmp	r3, #0
 800643c:	d110      	bne.n	8006460 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006458:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	e00f      	b.n	8006480 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0151      	lsls	r1, r2, #5
 8006472:	69fa      	ldr	r2, [r7, #28]
 8006474:	440a      	add	r2, r1
 8006476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800647a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800647e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	68d9      	ldr	r1, [r3, #12]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	b298      	uxth	r0, r3
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	4603      	mov	r3, r0
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f000 f9b9 	bl	800680c <USB_WritePacket>
 800649a:	e105      	b.n	80066a8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064b6:	0cdb      	lsrs	r3, r3, #19
 80064b8:	04db      	lsls	r3, r3, #19
 80064ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80064de:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d132      	bne.n	800654c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	691a      	ldr	r2, [r3, #16]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006514:	69b9      	ldr	r1, [r7, #24]
 8006516:	0148      	lsls	r0, r1, #5
 8006518:	69f9      	ldr	r1, [r7, #28]
 800651a:	4401      	add	r1, r0
 800651c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006520:	4313      	orrs	r3, r2
 8006522:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	69fa      	ldr	r2, [r7, #28]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800653e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006542:	6113      	str	r3, [r2, #16]
 8006544:	e062      	b.n	800660c <USB_EPStartXfer+0x490>
 8006546:	bf00      	nop
 8006548:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d123      	bne.n	800659c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006560:	691a      	ldr	r2, [r3, #16]
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	0148      	lsls	r0, r1, #5
 800656e:	69f9      	ldr	r1, [r7, #28]
 8006570:	4401      	add	r1, r0
 8006572:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006576:	4313      	orrs	r3, r2
 8006578:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006594:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006598:	6113      	str	r3, [r2, #16]
 800659a:	e037      	b.n	800660c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4413      	add	r3, r2
 80065a6:	1e5a      	subs	r2, r3, #1
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	8afa      	ldrh	r2, [r7, #22]
 80065b8:	fb03 f202 	mul.w	r2, r3, r2
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	8afb      	ldrh	r3, [r7, #22]
 80065d0:	04d9      	lsls	r1, r3, #19
 80065d2:	4b38      	ldr	r3, [pc, #224]	@ (80066b4 <USB_EPStartXfer+0x538>)
 80065d4:	400b      	ands	r3, r1
 80065d6:	69b9      	ldr	r1, [r7, #24]
 80065d8:	0148      	lsls	r0, r1, #5
 80065da:	69f9      	ldr	r1, [r7, #28]
 80065dc:	4401      	add	r1, r0
 80065de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80065e2:	4313      	orrs	r3, r2
 80065e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	015a      	lsls	r2, r3, #5
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065fc:	69b9      	ldr	r1, [r7, #24]
 80065fe:	0148      	lsls	r0, r1, #5
 8006600:	69f9      	ldr	r1, [r7, #28]
 8006602:	4401      	add	r1, r0
 8006604:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006608:	4313      	orrs	r3, r2
 800660a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d10d      	bne.n	800662e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662a:	460a      	mov	r2, r1
 800662c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	791b      	ldrb	r3, [r3, #4]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d128      	bne.n	8006688 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d110      	bne.n	8006668 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006660:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e00f      	b.n	8006688 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006686:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	1ff80000 	.word	0x1ff80000

080066b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d14a      	bne.n	800676c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ee:	f040 8086 	bne.w	80067fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	693a      	ldr	r2, [r7, #16]
 800670a:	440a      	add	r2, r1
 800670c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006710:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006714:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006734:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006738:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	3301      	adds	r3, #1
 800673e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006746:	4293      	cmp	r3, r2
 8006748:	d902      	bls.n	8006750 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	75fb      	strb	r3, [r7, #23]
          break;
 800674e:	e056      	b.n	80067fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006768:	d0e7      	beq.n	800673a <USB_EPStopXfer+0x82>
 800676a:	e048      	b.n	80067fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	4413      	add	r3, r2
 8006776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006780:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006784:	d13b      	bne.n	80067fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	0151      	lsls	r1, r2, #5
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	440a      	add	r2, r1
 80067a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	7812      	ldrb	r2, [r2, #0]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3301      	adds	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80067da:	4293      	cmp	r3, r2
 80067dc:	d902      	bls.n	80067e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	75fb      	strb	r3, [r7, #23]
          break;
 80067e2:	e00c      	b.n	80067fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067fc:	d0e7      	beq.n	80067ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80067fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006800:	4618      	mov	r0, r3
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	@ 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4611      	mov	r1, r2
 8006818:	461a      	mov	r2, r3
 800681a:	460b      	mov	r3, r1
 800681c:	71fb      	strb	r3, [r7, #7]
 800681e:	4613      	mov	r3, r2
 8006820:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800682a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d123      	bne.n	800687a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006832:	88bb      	ldrh	r3, [r7, #4]
 8006834:	3303      	adds	r3, #3
 8006836:	089b      	lsrs	r3, r3, #2
 8006838:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800683a:	2300      	movs	r3, #0
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	e018      	b.n	8006872 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	031a      	lsls	r2, r3, #12
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800684c:	461a      	mov	r2, r3
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	3301      	adds	r3, #1
 8006858:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	3301      	adds	r3, #1
 800685e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3301      	adds	r3, #1
 8006864:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3301      	adds	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	3301      	adds	r3, #1
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	69ba      	ldr	r2, [r7, #24]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	429a      	cmp	r2, r3
 8006878:	d3e2      	bcc.n	8006840 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3724      	adds	r7, #36	@ 0x24
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006888:	b480      	push	{r7}
 800688a:	b08b      	sub	sp, #44	@ 0x2c
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	089b      	lsrs	r3, r3, #2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068ae:	2300      	movs	r3, #0
 80068b0:	623b      	str	r3, [r7, #32]
 80068b2:	e014      	b.n	80068de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	601a      	str	r2, [r3, #0]
    pDest++;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	3301      	adds	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	3301      	adds	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	3301      	adds	r3, #1
 80068d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	3301      	adds	r3, #1
 80068d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	3301      	adds	r3, #1
 80068dc:	623b      	str	r3, [r7, #32]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d3e6      	bcc.n	80068b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068e6:	8bfb      	ldrh	r3, [r7, #30]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d01e      	beq.n	800692a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068f6:	461a      	mov	r2, r3
 80068f8:	f107 0310 	add.w	r3, r7, #16
 80068fc:	6812      	ldr	r2, [r2, #0]
 80068fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
 800690c:	b2da      	uxtb	r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	701a      	strb	r2, [r3, #0]
      i++;
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	3301      	adds	r3, #1
 8006916:	623b      	str	r3, [r7, #32]
      pDest++;
 8006918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691a:	3301      	adds	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800691e:	8bfb      	ldrh	r3, [r7, #30]
 8006920:	3b01      	subs	r3, #1
 8006922:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006924:	8bfb      	ldrh	r3, [r7, #30]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1ea      	bne.n	8006900 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800692c:	4618      	mov	r0, r3
 800692e:	372c      	adds	r7, #44	@ 0x2c
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	785b      	ldrb	r3, [r3, #1]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d12c      	bne.n	80069ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	db12      	blt.n	800698c <USB_EPSetStall+0x54>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00f      	beq.n	800698c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006986:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800698a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	0151      	lsls	r1, r2, #5
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	440a      	add	r2, r1
 80069a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80069aa:	6013      	str	r3, [r2, #0]
 80069ac:	e02b      	b.n	8006a06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	db12      	blt.n	80069e6 <USB_EPSetStall+0xae>
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00f      	beq.n	80069e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80069e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006a04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3714      	adds	r7, #20
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d128      	bne.n	8006a82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	791b      	ldrb	r3, [r3, #4]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d003      	beq.n	8006a60 <USB_EPClearStall+0x4c>
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d138      	bne.n	8006ad2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e027      	b.n	8006ad2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a9c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aa0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d003      	beq.n	8006ab2 <USB_EPClearStall+0x9e>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	791b      	ldrb	r3, [r3, #4]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	d10f      	bne.n	8006ad2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68ba      	ldr	r2, [r7, #8]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006afe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006b02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b46:	f023 0303 	bic.w	r3, r3, #3
 8006b4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b5a:	f023 0302 	bic.w	r3, r3, #2
 8006b5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b88:	f023 0303 	bic.w	r3, r3, #3
 8006b8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b9c:	f043 0302 	orr.w	r3, r3, #2
 8006ba0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	695b      	ldr	r3, [r3, #20]
 8006bbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b085      	sub	sp, #20
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	0c1b      	lsrs	r3, r3, #16
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	b29b      	uxth	r3, r3
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b085      	sub	sp, #20
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
 8006c46:	460b      	mov	r3, r1
 8006c48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c4e:	78fb      	ldrb	r3, [r7, #3]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b087      	sub	sp, #28
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
 8006c82:	460b      	mov	r3, r1
 8006c84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8006caa:	01db      	lsls	r3, r3, #7
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cb4:	78fb      	ldrb	r3, [r7, #3]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cc8:	68bb      	ldr	r3, [r7, #8]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	371c      	adds	r7, #28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b085      	sub	sp, #20
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006d10:	f023 0307 	bic.w	r3, r3, #7
 8006d14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	460b      	mov	r3, r1
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	333c      	adds	r3, #60	@ 0x3c
 8006d4e:	3304      	adds	r3, #4
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	4a26      	ldr	r2, [pc, #152]	@ (8006df0 <USB_EP0_OutStart+0xb8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d90a      	bls.n	8006d72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d6c:	d101      	bne.n	8006d72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e037      	b.n	8006de2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006da0:	f043 0318 	orr.w	r3, r3, #24
 8006da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006db4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006db8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10f      	bne.n	8006de0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dda:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006dde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	371c      	adds	r7, #28
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	4f54300a 	.word	0x4f54300a

08006df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e0c:	d901      	bls.n	8006e12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e022      	b.n	8006e58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	daf2      	bge.n	8006e00 <USB_CoreReset+0xc>

  count = 10U;
 8006e1a:	230a      	movs	r3, #10
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006e1e:	e002      	b.n	8006e26 <USB_CoreReset+0x32>
  {
    count--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1f9      	bne.n	8006e20 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	f043 0201 	orr.w	r2, r3, #1
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e44:	d901      	bls.n	8006e4a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e006      	b.n	8006e58 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	f003 0301 	and.w	r3, r3, #1
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d0f0      	beq.n	8006e38 <USB_CoreReset+0x44>

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fa f8f1 	bl	8001058 <SD_disk_initialize>
 8006e76:	4603      	mov	r3, r0
 8006e78:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	4603      	mov	r3, r0
 8006e8a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8006e8c:	79fb      	ldrb	r3, [r7, #7]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fa f9cc 	bl	800122c <SD_disk_status>
 8006e94:	4603      	mov	r3, r0
 8006e96:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
 8006eaa:	603b      	str	r3, [r7, #0]
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006eb0:	7bf8      	ldrb	r0, [r7, #15]
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	f7fa f9ce 	bl	8001258 <SD_disk_read>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60b9      	str	r1, [r7, #8]
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	603b      	str	r3, [r7, #0]
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006ed8:	7bf8      	ldrb	r0, [r7, #15]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	68b9      	ldr	r1, [r7, #8]
 8006ee0:	f7fa fa24 	bl	800132c <SD_disk_write>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	603a      	str	r2, [r7, #0]
 8006efa:	71fb      	strb	r3, [r7, #7]
 8006efc:	460b      	mov	r3, r1
 8006efe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   return SD_disk_ioctl(pdrv,cmd, buff);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	79b9      	ldrb	r1, [r7, #6]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fa fa94 	bl	8001434 <SD_disk_ioctl>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006f24:	f44f 7021 	mov.w	r0, #644	@ 0x284
 8006f28:	f007 ffe8 	bl	800eefc <USBD_static_malloc>
 8006f2c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32b0      	adds	r2, #176	@ 0xb0
 8006f3e:	2100      	movs	r1, #0
 8006f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f44:	2302      	movs	r3, #2
 8006f46:	e06e      	b.n	8007026 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	32b0      	adds	r2, #176	@ 0xb0
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	32b0      	adds	r2, #176	@ 0xb0
 8006f62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	7c1b      	ldrb	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d12b      	bne.n	8006fcc <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006f74:	4b2e      	ldr	r3, [pc, #184]	@ (8007030 <USBD_MSC_Init+0x118>)
 8006f76:	7819      	ldrb	r1, [r3, #0]
 8006f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f007 fe79 	bl	800ec76 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006f84:	4b2a      	ldr	r3, [pc, #168]	@ (8007030 <USBD_MSC_Init+0x118>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	f003 020f 	and.w	r2, r3, #15
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006fa0:	4b24      	ldr	r3, [pc, #144]	@ (8007034 <USBD_MSC_Init+0x11c>)
 8006fa2:	7819      	ldrb	r1, [r3, #0]
 8006fa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fa8:	2202      	movs	r2, #2
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f007 fe63 	bl	800ec76 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006fb0:	4b20      	ldr	r3, [pc, #128]	@ (8007034 <USBD_MSC_Init+0x11c>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 020f 	and.w	r2, r3, #15
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	440b      	add	r3, r1
 8006fc4:	3323      	adds	r3, #35	@ 0x23
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	e028      	b.n	800701e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006fcc:	4b18      	ldr	r3, [pc, #96]	@ (8007030 <USBD_MSC_Init+0x118>)
 8006fce:	7819      	ldrb	r1, [r3, #0]
 8006fd0:	2340      	movs	r3, #64	@ 0x40
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f007 fe4e 	bl	800ec76 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006fda:	4b15      	ldr	r3, [pc, #84]	@ (8007030 <USBD_MSC_Init+0x118>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	f003 020f 	and.w	r2, r3, #15
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <USBD_MSC_Init+0x11c>)
 8006ff8:	7819      	ldrb	r1, [r3, #0]
 8006ffa:	2340      	movs	r3, #64	@ 0x40
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f007 fe39 	bl	800ec76 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8007004:	4b0b      	ldr	r3, [pc, #44]	@ (8007034 <USBD_MSC_Init+0x11c>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f003 020f 	and.w	r2, r3, #15
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	440b      	add	r3, r1
 8007018:	3323      	adds	r3, #35	@ 0x23
 800701a:	2201      	movs	r2, #1
 800701c:	701a      	strb	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fa30 	bl	8007484 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000087 	.word	0x20000087
 8007034:	20000086 	.word	0x20000086

08007038 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8007044:	4b26      	ldr	r3, [pc, #152]	@ (80070e0 <USBD_MSC_DeInit+0xa8>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f007 fe39 	bl	800ecc2 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8007050:	4b23      	ldr	r3, [pc, #140]	@ (80070e0 <USBD_MSC_DeInit+0xa8>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 020f 	and.w	r2, r3, #15
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007068:	2200      	movs	r2, #0
 800706a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 800706c:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <USBD_MSC_DeInit+0xac>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f007 fe25 	bl	800ecc2 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8007078:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <USBD_MSC_DeInit+0xac>)
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f003 020f 	and.w	r2, r3, #15
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	440b      	add	r3, r1
 800708c:	3323      	adds	r3, #35	@ 0x23
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	32b0      	adds	r2, #176	@ 0xb0
 800709c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d018      	beq.n	80070d6 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fa6b 	bl	8007580 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	32b0      	adds	r2, #176	@ 0xb0
 80070b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f007 ff2d 	bl	800ef18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	32b0      	adds	r2, #176	@ 0xb0
 80070c8:	2100      	movs	r1, #0
 80070ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000087 	.word	0x20000087
 80070e4:	20000086 	.word	0x20000086

080070e8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	32b0      	adds	r2, #176	@ 0xb0
 80070fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007100:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	75fb      	strb	r3, [r7, #23]
  uint32_t max_lun;
  uint16_t status_info = 0U;
 8007106:	2300      	movs	r3, #0
 8007108:	817b      	strh	r3, [r7, #10]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007110:	2303      	movs	r3, #3
 8007112:	e0e5      	b.n	80072e0 <USBD_MSC_Setup+0x1f8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800711c:	2b00      	cmp	r3, #0
 800711e:	d058      	beq.n	80071d2 <USBD_MSC_Setup+0xea>
 8007120:	2b20      	cmp	r3, #32
 8007122:	f040 80d5 	bne.w	80072d0 <USBD_MSC_Setup+0x1e8>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	785b      	ldrb	r3, [r3, #1]
 800712a:	2bfe      	cmp	r3, #254	@ 0xfe
 800712c:	d002      	beq.n	8007134 <USBD_MSC_Setup+0x4c>
 800712e:	2bff      	cmp	r3, #255	@ 0xff
 8007130:	d02f      	beq.n	8007192 <USBD_MSC_Setup+0xaa>
 8007132:	e046      	b.n	80071c2 <USBD_MSC_Setup+0xda>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	885b      	ldrh	r3, [r3, #2]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d123      	bne.n	8007184 <USBD_MSC_Setup+0x9c>
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	88db      	ldrh	r3, [r3, #6]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d11f      	bne.n	8007184 <USBD_MSC_Setup+0x9c>
              ((req->bmRequest & 0x80U) == 0x80U))
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800714a:	2b00      	cmp	r3, #0
 800714c:	da1a      	bge.n	8007184 <USBD_MSC_Setup+0x9c>
          {
            max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	33b0      	adds	r3, #176	@ 0xb0
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	4798      	blx	r3
 8007162:	4603      	mov	r3, r0
 8007164:	60fb      	str	r3, [r7, #12]
            hmsc->max_lun = (max_lun > MSC_BOT_MAX_LUN) ? MSC_BOT_MAX_LUN : max_lun;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b02      	cmp	r3, #2
 800716a:	bf28      	it	cs
 800716c:	2302      	movcs	r3, #2
 800716e:	461a      	mov	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2201      	movs	r2, #1
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f003 fa0a 	bl	800a594 <USBD_CtlSendData>
 8007180:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007182:	e025      	b.n	80071d0 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f003 f987 	bl	800a49a <USBD_CtlError>
            ret = USBD_FAIL;
 800718c:	2303      	movs	r3, #3
 800718e:	75fb      	strb	r3, [r7, #23]
          break;
 8007190:	e01e      	b.n	80071d0 <USBD_MSC_Setup+0xe8>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	885b      	ldrh	r3, [r3, #2]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10c      	bne.n	80071b4 <USBD_MSC_Setup+0xcc>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	88db      	ldrh	r3, [r3, #6]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d108      	bne.n	80071b4 <USBD_MSC_Setup+0xcc>
              ((req->bmRequest & 0x80U) != 0x80U))
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	db03      	blt.n	80071b4 <USBD_MSC_Setup+0xcc>
          {
            MSC_BOT_Reset(pdev);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f9b3 	bl	8007518 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071b2:	e00d      	b.n	80071d0 <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f003 f96f 	bl	800a49a <USBD_CtlError>
            ret = USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	75fb      	strb	r3, [r7, #23]
          break;
 80071c0:	e006      	b.n	80071d0 <USBD_MSC_Setup+0xe8>

        default:
          USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f003 f968 	bl	800a49a <USBD_CtlError>
          ret = USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	75fb      	strb	r3, [r7, #23]
          break;
 80071ce:	bf00      	nop
      }
      break;
 80071d0:	e085      	b.n	80072de <USBD_MSC_Setup+0x1f6>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	2b0b      	cmp	r3, #11
 80071d8:	d871      	bhi.n	80072be <USBD_MSC_Setup+0x1d6>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <USBD_MSC_Setup+0xf8>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007211 	.word	0x08007211
 80071e4:	0800728d 	.word	0x0800728d
 80071e8:	080072bf 	.word	0x080072bf
 80071ec:	080072bf 	.word	0x080072bf
 80071f0:	080072bf 	.word	0x080072bf
 80071f4:	080072bf 	.word	0x080072bf
 80071f8:	080072bf 	.word	0x080072bf
 80071fc:	080072bf 	.word	0x080072bf
 8007200:	080072bf 	.word	0x080072bf
 8007204:	080072bf 	.word	0x080072bf
 8007208:	0800723b 	.word	0x0800723b
 800720c:	08007265 	.word	0x08007265
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b03      	cmp	r3, #3
 800721a:	d107      	bne.n	800722c <USBD_MSC_Setup+0x144>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800721c:	f107 030a 	add.w	r3, r7, #10
 8007220:	2202      	movs	r2, #2
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f003 f9b5 	bl	800a594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800722a:	e050      	b.n	80072ce <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f003 f933 	bl	800a49a <USBD_CtlError>
            ret = USBD_FAIL;
 8007234:	2303      	movs	r3, #3
 8007236:	75fb      	strb	r3, [r7, #23]
          break;
 8007238:	e049      	b.n	80072ce <USBD_MSC_Setup+0x1e6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d107      	bne.n	8007256 <USBD_MSC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	3304      	adds	r3, #4
 800724a:	2201      	movs	r2, #1
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f003 f9a0 	bl	800a594 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007254:	e03b      	b.n	80072ce <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8007256:	6839      	ldr	r1, [r7, #0]
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f003 f91e 	bl	800a49a <USBD_CtlError>
            ret = USBD_FAIL;
 800725e:	2303      	movs	r3, #3
 8007260:	75fb      	strb	r3, [r7, #23]
          break;
 8007262:	e034      	b.n	80072ce <USBD_MSC_Setup+0x1e6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b03      	cmp	r3, #3
 800726e:	d106      	bne.n	800727e <USBD_MSC_Setup+0x196>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	885b      	ldrh	r3, [r3, #2]
 8007274:	b2db      	uxtb	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800727c:	e027      	b.n	80072ce <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f003 f90a 	bl	800a49a <USBD_CtlError>
            ret = USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	75fb      	strb	r3, [r7, #23]
          break;
 800728a:	e020      	b.n	80072ce <USBD_MSC_Setup+0x1e6>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b03      	cmp	r3, #3
 8007296:	d119      	bne.n	80072cc <USBD_MSC_Setup+0x1e4>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	885b      	ldrh	r3, [r3, #2]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d115      	bne.n	80072cc <USBD_MSC_Setup+0x1e4>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	889b      	ldrh	r3, [r3, #4]
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f007 fd29 	bl	800ed00 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	889b      	ldrh	r3, [r3, #4]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fb30 	bl	800791c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80072bc:	e006      	b.n	80072cc <USBD_MSC_Setup+0x1e4>

        default:
          USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f003 f8ea 	bl	800a49a <USBD_CtlError>
          ret = USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ca:	e000      	b.n	80072ce <USBD_MSC_Setup+0x1e6>
          break;
 80072cc:	bf00      	nop
      }
      break;
 80072ce:	e006      	b.n	80072de <USBD_MSC_Setup+0x1f6>

    default:
      USBD_CtlError(pdev, req);
 80072d0:	6839      	ldr	r1, [r7, #0]
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f003 f8e1 	bl	800a49a <USBD_CtlError>
      ret = USBD_FAIL;
 80072d8:	2303      	movs	r3, #3
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80072de:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f959 	bl	80075b0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f983 	bl	8007624 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8007330:	2181      	movs	r1, #129	@ 0x81
 8007332:	4812      	ldr	r0, [pc, #72]	@ (800737c <USBD_MSC_GetHSCfgDesc+0x54>)
 8007334:	f002 fa79 	bl	800982a <USBD_GetEpDesc>
 8007338:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 800733a:	2101      	movs	r1, #1
 800733c:	480f      	ldr	r0, [pc, #60]	@ (800737c <USBD_MSC_GetHSCfgDesc+0x54>)
 800733e:	f002 fa74 	bl	800982a <USBD_GetEpDesc>
 8007342:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d006      	beq.n	8007358 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	711a      	strb	r2, [r3, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f042 0202 	orr.w	r2, r2, #2
 8007356:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d006      	beq.n	800736c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2200      	movs	r2, #0
 8007362:	711a      	strb	r2, [r3, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f042 0202 	orr.w	r2, r2, #2
 800736a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2220      	movs	r2, #32
 8007370:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007372:	4b02      	ldr	r3, [pc, #8]	@ (800737c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	2000005c 	.word	0x2000005c

08007380 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8007388:	2181      	movs	r1, #129	@ 0x81
 800738a:	4812      	ldr	r0, [pc, #72]	@ (80073d4 <USBD_MSC_GetFSCfgDesc+0x54>)
 800738c:	f002 fa4d 	bl	800982a <USBD_GetEpDesc>
 8007390:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007392:	2101      	movs	r1, #1
 8007394:	480f      	ldr	r0, [pc, #60]	@ (80073d4 <USBD_MSC_GetFSCfgDesc+0x54>)
 8007396:	f002 fa48 	bl	800982a <USBD_GetEpDesc>
 800739a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073aa:	711a      	strb	r2, [r3, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d006      	beq.n	80073c4 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073be:	711a      	strb	r2, [r3, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80073ca:	4b02      	ldr	r3, [pc, #8]	@ (80073d4 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	2000005c 	.word	0x2000005c

080073d8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80073e0:	2181      	movs	r1, #129	@ 0x81
 80073e2:	4812      	ldr	r0, [pc, #72]	@ (800742c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80073e4:	f002 fa21 	bl	800982a <USBD_GetEpDesc>
 80073e8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80073ea:	2101      	movs	r1, #1
 80073ec:	480f      	ldr	r0, [pc, #60]	@ (800742c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80073ee:	f002 fa1c 	bl	800982a <USBD_GetEpDesc>
 80073f2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d006      	beq.n	8007408 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007402:	711a      	strb	r2, [r3, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d006      	beq.n	800741c <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2200      	movs	r2, #0
 8007412:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007416:	711a      	strb	r2, [r3, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007422:	4b02      	ldr	r3, [pc, #8]	@ (800742c <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	2000005c 	.word	0x2000005c

08007430 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	220a      	movs	r2, #10
 800743c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800743e:	4b03      	ldr	r3, [pc, #12]	@ (800744c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	2000007c 	.word	0x2000007c

08007450 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007460:	2303      	movs	r3, #3
 8007462:	e009      	b.n	8007478 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	33b0      	adds	r3, #176	@ 0xb0
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32b0      	adds	r2, #176	@ 0xb0
 8007496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d032      	beq.n	8007508 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	33b0      	adds	r3, #176	@ 0xb0
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2000      	movs	r0, #0
 80074da:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80074dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007510 <MSC_BOT_Init+0x8c>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f007 fc0c 	bl	800ed00 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80074e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007514 <MSC_BOT_Init+0x90>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f007 fc06 	bl	800ed00 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80074f4:	4b06      	ldr	r3, [pc, #24]	@ (8007510 <MSC_BOT_Init+0x8c>)
 80074f6:	7819      	ldrb	r1, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80074fe:	231f      	movs	r3, #31
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f007 fcc6 	bl	800ee92 <USBD_LL_PrepareReceive>
 8007506:	e000      	b.n	800750a <MSC_BOT_Init+0x86>
    return;
 8007508:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000087 	.word	0x20000087
 8007514:	20000086 	.word	0x20000086

08007518 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	32b0      	adds	r2, #176	@ 0xb0
 800752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01b      	beq.n	800756e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8007542:	4b0d      	ldr	r3, [pc, #52]	@ (8007578 <MSC_BOT_Reset+0x60>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f007 fc17 	bl	800ed7c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 800754e:	4b0b      	ldr	r3, [pc, #44]	@ (800757c <MSC_BOT_Reset+0x64>)
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f007 fc11 	bl	800ed7c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800755a:	4b08      	ldr	r3, [pc, #32]	@ (800757c <MSC_BOT_Reset+0x64>)
 800755c:	7819      	ldrb	r1, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007564:	231f      	movs	r3, #31
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f007 fc93 	bl	800ee92 <USBD_LL_PrepareReceive>
 800756c:	e000      	b.n	8007570 <MSC_BOT_Reset+0x58>
    return;
 800756e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000086 	.word	0x20000086
 800757c:	20000087 	.word	0x20000087

08007580 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	32b0      	adds	r2, #176	@ 0xb0
 8007592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007596:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	721a      	strb	r2, [r3, #8]
  }
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	460b      	mov	r3, r1
 80075ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	32b0      	adds	r2, #176	@ 0xb0
 80075c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ca:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d020      	beq.n	8007614 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	7a1b      	ldrb	r3, [r3, #8]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d005      	beq.n	80075e6 <MSC_BOT_DataIn+0x36>
 80075da:	2b02      	cmp	r3, #2
 80075dc:	db1c      	blt.n	8007618 <MSC_BOT_DataIn+0x68>
 80075de:	3b03      	subs	r3, #3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d819      	bhi.n	8007618 <MSC_BOT_DataIn+0x68>
 80075e4:	e011      	b.n	800760a <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80075f2:	461a      	mov	r2, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f9cb 	bl	8007990 <SCSI_ProcessCmd>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da0d      	bge.n	800761c <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007600:	2101      	movs	r1, #1
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f90e 	bl	8007824 <MSC_BOT_SendCSW>
      }
      break;
 8007608:	e008      	b.n	800761c <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800760a:	2100      	movs	r1, #0
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f909 	bl	8007824 <MSC_BOT_SendCSW>
      break;
 8007612:	e004      	b.n	800761e <MSC_BOT_DataIn+0x6e>
    return;
 8007614:	bf00      	nop
 8007616:	e002      	b.n	800761e <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8007618:	bf00      	nop
 800761a:	e000      	b.n	800761e <MSC_BOT_DataIn+0x6e>
      break;
 800761c:	bf00      	nop
  }
}
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	32b0      	adds	r2, #176	@ 0xb0
 800763a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01c      	beq.n	8007680 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7a1b      	ldrb	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <MSC_BOT_DataOut+0x30>
 800764e:	2b01      	cmp	r3, #1
 8007650:	d004      	beq.n	800765c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007652:	e018      	b.n	8007686 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f819 	bl	800768c <MSC_BOT_CBW_Decode>
      break;
 800765a:	e014      	b.n	8007686 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 8007668:	461a      	mov	r2, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f990 	bl	8007990 <SCSI_ProcessCmd>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	da06      	bge.n	8007684 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007676:	2101      	movs	r1, #1
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f8d3 	bl	8007824 <MSC_BOT_SendCSW>
      break;
 800767e:	e001      	b.n	8007684 <MSC_BOT_DataOut+0x60>
    return;
 8007680:	bf00      	nop
 8007682:	e000      	b.n	8007686 <MSC_BOT_DataOut+0x62>
      break;
 8007684:	bf00      	nop
  }
}
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	32b0      	adds	r2, #176	@ 0xb0
 800769e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d07c      	beq.n	80077a4 <MSC_BOT_CBW_Decode+0x118>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80076c2:	4b3b      	ldr	r3, [pc, #236]	@ (80077b0 <MSC_BOT_CBW_Decode+0x124>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f007 fc03 	bl	800eed4 <USBD_LL_GetRxDataSize>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b1f      	cmp	r3, #31
 80076d2:	d117      	bne.n	8007704 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80076da:	4a36      	ldr	r2, [pc, #216]	@ (80077b4 <MSC_BOT_CBW_Decode+0x128>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d111      	bne.n	8007704 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 80076e6:	461a      	mov	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d809      	bhi.n	8007704 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d004      	beq.n	8007704 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 8007700:	2b10      	cmp	r3, #16
 8007702:	d90e      	bls.n	8007722 <MSC_BOT_CBW_Decode+0x96>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800770a:	2320      	movs	r3, #32
 800770c:	2205      	movs	r2, #5
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fe85 	bl	800841e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2202      	movs	r2, #2
 8007718:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8bc 	bl	8007898 <MSC_BOT_Abort>
 8007720:	e043      	b.n	80077aa <MSC_BOT_CBW_Decode+0x11e>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800772e:	461a      	mov	r2, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f92d 	bl	8007990 <SCSI_ProcessCmd>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	da0c      	bge.n	8007756 <MSC_BOT_CBW_Decode+0xca>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	7a1b      	ldrb	r3, [r3, #8]
 8007740:	2b05      	cmp	r3, #5
 8007742:	d104      	bne.n	800774e <MSC_BOT_CBW_Decode+0xc2>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007744:	2101      	movs	r1, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f86c 	bl	8007824 <MSC_BOT_SendCSW>
 800774c:	e02d      	b.n	80077aa <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f8a2 	bl	8007898 <MSC_BOT_Abort>
 8007754:	e029      	b.n	80077aa <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	7a1b      	ldrb	r3, [r3, #8]
 800775a:	2b02      	cmp	r3, #2
 800775c:	d024      	beq.n	80077a8 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007762:	2b01      	cmp	r3, #1
 8007764:	d020      	beq.n	80077a8 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800776a:	2b03      	cmp	r3, #3
 800776c:	d01c      	beq.n	80077a8 <MSC_BOT_CBW_Decode+0x11c>
    {
      if (hmsc->bot_data_length > 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d009      	beq.n	800778a <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f103 0110 	add.w	r1, r3, #16
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	461a      	mov	r2, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f818 	bl	80077b8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007788:	e00f      	b.n	80077aa <MSC_BOT_CBW_Decode+0x11e>
      }
      else if (hmsc->bot_data_length == 0U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007792:	2100      	movs	r1, #0
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f845 	bl	8007824 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800779a:	e006      	b.n	80077aa <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f87b 	bl	8007898 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80077a2:	e002      	b.n	80077aa <MSC_BOT_CBW_Decode+0x11e>
    return;
 80077a4:	bf00      	nop
 80077a6:	e000      	b.n	80077aa <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    else
    {
      return;
 80077a8:	bf00      	nop
    }
  }
}
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	20000087 	.word	0x20000087
 80077b4:	43425355 	.word	0x43425355

080077b8 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	32b0      	adds	r2, #176	@ 0xb0
 80077ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d2:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d01e      	beq.n	8007818 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	4293      	cmp	r3, r2
 80077e4:	bf28      	it	cs
 80077e6:	4613      	movcs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	2204      	movs	r2, #4
 8007806:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007808:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <MSC_BOT_SendData+0x68>)
 800780a:	7819      	ldrb	r1, [r3, #0]
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f007 fb1d 	bl	800ee50 <USBD_LL_Transmit>
 8007816:	e000      	b.n	800781a <MSC_BOT_SendData+0x62>
    return;
 8007818:	bf00      	nop
}
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	20000086 	.word	0x20000086

08007824 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	32b0      	adds	r2, #176	@ 0xb0
 800783a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800783e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d01d      	beq.n	8007882 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a10      	ldr	r2, [pc, #64]	@ (800788c <MSC_BOT_SendCSW+0x68>)
 800784a:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 800785c:	4b0c      	ldr	r3, [pc, #48]	@ (8007890 <MSC_BOT_SendCSW+0x6c>)
 800785e:	7819      	ldrb	r1, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 8007866:	230d      	movs	r3, #13
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f007 faf1 	bl	800ee50 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 800786e:	4b09      	ldr	r3, [pc, #36]	@ (8007894 <MSC_BOT_SendCSW+0x70>)
 8007870:	7819      	ldrb	r1, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 8007878:	231f      	movs	r3, #31
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f007 fb09 	bl	800ee92 <USBD_LL_PrepareReceive>
 8007880:	e000      	b.n	8007884 <MSC_BOT_SendCSW+0x60>
    return;
 8007882:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	53425355 	.word	0x53425355
 8007890:	20000086 	.word	0x20000086
 8007894:	20000087 	.word	0x20000087

08007898 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	32b0      	adds	r2, #176	@ 0xb0
 80078aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d02a      	beq.n	800790c <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d10e      	bne.n	80078de <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d105      	bne.n	80078de <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80078d2:	4b10      	ldr	r3, [pc, #64]	@ (8007914 <MSC_BOT_Abort+0x7c>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f007 fa30 	bl	800ed3e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80078de:	4b0e      	ldr	r3, [pc, #56]	@ (8007918 <MSC_BOT_Abort+0x80>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f007 fa2a 	bl	800ed3e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	7a5b      	ldrb	r3, [r3, #9]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d10d      	bne.n	800790e <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80078f2:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <MSC_BOT_Abort+0x80>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f007 fa20 	bl	800ed3e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80078fe:	4b05      	ldr	r3, [pc, #20]	@ (8007914 <MSC_BOT_Abort+0x7c>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f007 fa1a 	bl	800ed3e <USBD_LL_StallEP>
 800790a:	e000      	b.n	800790e <MSC_BOT_Abort+0x76>
    return;
 800790c:	bf00      	nop
  }
}
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	20000087 	.word	0x20000087
 8007918:	20000086 	.word	0x20000086

0800791c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	32b0      	adds	r2, #176	@ 0xb0
 8007932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007936:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01d      	beq.n	800797a <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	7a5b      	ldrb	r3, [r3, #9]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d10c      	bne.n	8007960 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8007946:	4b10      	ldr	r3, [pc, #64]	@ (8007988 <MSC_BOT_CplClrFeature+0x6c>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f007 f9f6 	bl	800ed3e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8007952:	4b0e      	ldr	r3, [pc, #56]	@ (800798c <MSC_BOT_CplClrFeature+0x70>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f007 f9f0 	bl	800ed3e <USBD_LL_StallEP>
 800795e:	e00f      	b.n	8007980 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da0a      	bge.n	800797e <MSC_BOT_CplClrFeature+0x62>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	7a5b      	ldrb	r3, [r3, #9]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d006      	beq.n	800797e <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007970:	2101      	movs	r1, #1
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f7ff ff56 	bl	8007824 <MSC_BOT_SendCSW>
 8007978:	e002      	b.n	8007980 <MSC_BOT_CplClrFeature+0x64>
    return;
 800797a:	bf00      	nop
 800797c:	e000      	b.n	8007980 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 800797e:	bf00      	nop
  }
}
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000086 	.word	0x20000086
 800798c:	20000087 	.word	0x20000087

08007990 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	60f8      	str	r0, [r7, #12]
 8007998:	460b      	mov	r3, r1
 800799a:	607a      	str	r2, [r7, #4]
 800799c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	32b0      	adds	r2, #176	@ 0xb0
 80079a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80079b4:	f04f 33ff 	mov.w	r3, #4294967295
 80079b8:	e18f      	b.n	8007cda <SCSI_ProcessCmd+0x34a>
  }

  switch (cmd[0])
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b5a      	cmp	r3, #90	@ 0x5a
 80079c0:	f300 80e0 	bgt.w	8007b84 <SCSI_ProcessCmd+0x1f4>
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	da21      	bge.n	8007a0c <SCSI_ProcessCmd+0x7c>
 80079c8:	e17c      	b.n	8007cc4 <SCSI_ProcessCmd+0x334>
 80079ca:	3b9e      	subs	r3, #158	@ 0x9e
 80079cc:	2b0c      	cmp	r3, #12
 80079ce:	f200 8179 	bhi.w	8007cc4 <SCSI_ProcessCmd+0x334>
 80079d2:	a201      	add	r2, pc, #4	@ (adr r2, 80079d8 <SCSI_ProcessCmd+0x48>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	08007c35 	.word	0x08007c35
 80079dc:	08007cc5 	.word	0x08007cc5
 80079e0:	08007ca1 	.word	0x08007ca1
 80079e4:	08007cc5 	.word	0x08007cc5
 80079e8:	08007cc5 	.word	0x08007cc5
 80079ec:	08007cc5 	.word	0x08007cc5
 80079f0:	08007cc5 	.word	0x08007cc5
 80079f4:	08007cc5 	.word	0x08007cc5
 80079f8:	08007cc5 	.word	0x08007cc5
 80079fc:	08007cc5 	.word	0x08007cc5
 8007a00:	08007c59 	.word	0x08007c59
 8007a04:	08007cc5 	.word	0x08007cc5
 8007a08:	08007c7d 	.word	0x08007c7d
 8007a0c:	2b5a      	cmp	r3, #90	@ 0x5a
 8007a0e:	f200 8159 	bhi.w	8007cc4 <SCSI_ProcessCmd+0x334>
 8007a12:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <SCSI_ProcessCmd+0x88>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007b93 	.word	0x08007b93
 8007a1c:	08007cc5 	.word	0x08007cc5
 8007a20:	08007cc5 	.word	0x08007cc5
 8007a24:	08007ba5 	.word	0x08007ba5
 8007a28:	08007cc5 	.word	0x08007cc5
 8007a2c:	08007cc5 	.word	0x08007cc5
 8007a30:	08007cc5 	.word	0x08007cc5
 8007a34:	08007cc5 	.word	0x08007cc5
 8007a38:	08007cc5 	.word	0x08007cc5
 8007a3c:	08007cc5 	.word	0x08007cc5
 8007a40:	08007cc5 	.word	0x08007cc5
 8007a44:	08007cc5 	.word	0x08007cc5
 8007a48:	08007cc5 	.word	0x08007cc5
 8007a4c:	08007cc5 	.word	0x08007cc5
 8007a50:	08007cc5 	.word	0x08007cc5
 8007a54:	08007cc5 	.word	0x08007cc5
 8007a58:	08007cc5 	.word	0x08007cc5
 8007a5c:	08007cc5 	.word	0x08007cc5
 8007a60:	08007bb7 	.word	0x08007bb7
 8007a64:	08007cc5 	.word	0x08007cc5
 8007a68:	08007cc5 	.word	0x08007cc5
 8007a6c:	08007cc5 	.word	0x08007cc5
 8007a70:	08007cc5 	.word	0x08007cc5
 8007a74:	08007cc5 	.word	0x08007cc5
 8007a78:	08007cc5 	.word	0x08007cc5
 8007a7c:	08007cc5 	.word	0x08007cc5
 8007a80:	08007bed 	.word	0x08007bed
 8007a84:	08007bc9 	.word	0x08007bc9
 8007a88:	08007cb3 	.word	0x08007cb3
 8007a8c:	08007cc5 	.word	0x08007cc5
 8007a90:	08007bdb 	.word	0x08007bdb
 8007a94:	08007cc5 	.word	0x08007cc5
 8007a98:	08007cc5 	.word	0x08007cc5
 8007a9c:	08007cc5 	.word	0x08007cc5
 8007aa0:	08007cc5 	.word	0x08007cc5
 8007aa4:	08007c11 	.word	0x08007c11
 8007aa8:	08007cc5 	.word	0x08007cc5
 8007aac:	08007c23 	.word	0x08007c23
 8007ab0:	08007cc5 	.word	0x08007cc5
 8007ab4:	08007cc5 	.word	0x08007cc5
 8007ab8:	08007c47 	.word	0x08007c47
 8007abc:	08007cc5 	.word	0x08007cc5
 8007ac0:	08007c6b 	.word	0x08007c6b
 8007ac4:	08007cc5 	.word	0x08007cc5
 8007ac8:	08007cc5 	.word	0x08007cc5
 8007acc:	08007cc5 	.word	0x08007cc5
 8007ad0:	08007cc5 	.word	0x08007cc5
 8007ad4:	08007c8f 	.word	0x08007c8f
 8007ad8:	08007cc5 	.word	0x08007cc5
 8007adc:	08007cc5 	.word	0x08007cc5
 8007ae0:	08007cc5 	.word	0x08007cc5
 8007ae4:	08007cc5 	.word	0x08007cc5
 8007ae8:	08007cc5 	.word	0x08007cc5
 8007aec:	08007cc5 	.word	0x08007cc5
 8007af0:	08007cc5 	.word	0x08007cc5
 8007af4:	08007cc5 	.word	0x08007cc5
 8007af8:	08007cc5 	.word	0x08007cc5
 8007afc:	08007cc5 	.word	0x08007cc5
 8007b00:	08007cc5 	.word	0x08007cc5
 8007b04:	08007cc5 	.word	0x08007cc5
 8007b08:	08007cc5 	.word	0x08007cc5
 8007b0c:	08007cc5 	.word	0x08007cc5
 8007b10:	08007cc5 	.word	0x08007cc5
 8007b14:	08007cc5 	.word	0x08007cc5
 8007b18:	08007cc5 	.word	0x08007cc5
 8007b1c:	08007cc5 	.word	0x08007cc5
 8007b20:	08007cc5 	.word	0x08007cc5
 8007b24:	08007cc5 	.word	0x08007cc5
 8007b28:	08007cc5 	.word	0x08007cc5
 8007b2c:	08007cc5 	.word	0x08007cc5
 8007b30:	08007cc5 	.word	0x08007cc5
 8007b34:	08007cc5 	.word	0x08007cc5
 8007b38:	08007cc5 	.word	0x08007cc5
 8007b3c:	08007cc5 	.word	0x08007cc5
 8007b40:	08007cc5 	.word	0x08007cc5
 8007b44:	08007cc5 	.word	0x08007cc5
 8007b48:	08007cc5 	.word	0x08007cc5
 8007b4c:	08007cc5 	.word	0x08007cc5
 8007b50:	08007cc5 	.word	0x08007cc5
 8007b54:	08007cc5 	.word	0x08007cc5
 8007b58:	08007cc5 	.word	0x08007cc5
 8007b5c:	08007cc5 	.word	0x08007cc5
 8007b60:	08007cc5 	.word	0x08007cc5
 8007b64:	08007cc5 	.word	0x08007cc5
 8007b68:	08007cc5 	.word	0x08007cc5
 8007b6c:	08007cc5 	.word	0x08007cc5
 8007b70:	08007cc5 	.word	0x08007cc5
 8007b74:	08007cc5 	.word	0x08007cc5
 8007b78:	08007cc5 	.word	0x08007cc5
 8007b7c:	08007cc5 	.word	0x08007cc5
 8007b80:	08007bff 	.word	0x08007bff
 8007b84:	2baa      	cmp	r3, #170	@ 0xaa
 8007b86:	f300 809d 	bgt.w	8007cc4 <SCSI_ProcessCmd+0x334>
 8007b8a:	2b9e      	cmp	r3, #158	@ 0x9e
 8007b8c:	f6bf af1d 	bge.w	80079ca <SCSI_ProcessCmd+0x3a>
 8007b90:	e098      	b.n	8007cc4 <SCSI_ProcessCmd+0x334>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007b92:	7afb      	ldrb	r3, [r7, #11]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	4619      	mov	r1, r3
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f8a3 	bl	8007ce4 <SCSI_TestUnitReady>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba2:	e098      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fbb4 	bl	8008318 <SCSI_RequestSense>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb4:	e08f      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f8eb 	bl	8007d98 <SCSI_Inquiry>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007bc6:	e086      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007bc8:	7afb      	ldrb	r3, [r7, #11]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4619      	mov	r1, r3
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fc70 	bl	80084b4 <SCSI_StartStopUnit>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd8:	e07d      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	4619      	mov	r1, r3
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 fcbc 	bl	800855e <SCSI_AllowPreventRemovable>
 8007be6:	4603      	mov	r3, r0
 8007be8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bea:	e074      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007bec:	7afb      	ldrb	r3, [r7, #11]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 faf2 	bl	80081dc <SCSI_ModeSense6>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfc:	e06b      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	4619      	mov	r1, r3
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 fb39 	bl	800827c <SCSI_ModeSense10>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c0e:	e062      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	4619      	mov	r1, r3
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 fa64 	bl	80080e4 <SCSI_ReadFormatCapacity>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	e059      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f931 	bl	8007e90 <SCSI_ReadCapacity10>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]
      break;
 8007c32:	e050      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	4619      	mov	r1, r3
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f9a2 	bl	8007f84 <SCSI_ReadCapacity16>
 8007c40:	4603      	mov	r3, r0
 8007c42:	75fb      	strb	r3, [r7, #23]
      break;
 8007c44:	e047      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8007c46:	7afb      	ldrb	r3, [r7, #11]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f000 fcb3 	bl	80085b8 <SCSI_Read10>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75fb      	strb	r3, [r7, #23]
      break;
 8007c56:	e03e      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fd54 	bl	800870c <SCSI_Read12>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
      break;
 8007c68:	e035      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fe01 	bl	8008878 <SCSI_Write10>
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7a:	e02c      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	4619      	mov	r1, r3
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fed0 	bl	8008a28 <SCSI_Write12>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c8c:	e023      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4619      	mov	r1, r3
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f000 ffaf 	bl	8008bf8 <SCSI_Verify10>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c9e:	e01a      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_REPORT_LUNS:
      ret = SCSI_ReportLuns(pdev, lun, cmd);
 8007ca0:	7afb      	ldrb	r3, [r7, #11]
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f000 ffe8 	bl	8008c7c <SCSI_ReportLuns>
 8007cac:	4603      	mov	r3, r0
 8007cae:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb0:	e011      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    case SCSI_RECEIVE_DIAGNOSTIC_RESULTS:
      ret = SCSI_ReceiveDiagnosticResults(pdev, lun, cmd);
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f001 f835 	bl	8008d28 <SCSI_ReceiveDiagnosticResults>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc2:	e008      	b.n	8007cd6 <SCSI_ProcessCmd+0x346>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007cc4:	7af9      	ldrb	r1, [r7, #11]
 8007cc6:	2320      	movs	r3, #32
 8007cc8:	2205      	movs	r2, #5
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 fba7 	bl	800841e <SCSI_SenseCode>
      ret = -1;
 8007cd0:	23ff      	movs	r3, #255	@ 0xff
 8007cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd4:	bf00      	nop
  }

  return ret;
 8007cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop

08007ce4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	460b      	mov	r3, r1
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	32b0      	adds	r2, #176	@ 0xb0
 8007cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d00:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8007d08:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0c:	e03f      	b.n	8007d8e <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007d1e:	2320      	movs	r3, #32
 8007d20:	2205      	movs	r2, #5
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 fb7b 	bl	800841e <SCSI_SenseCode>

    return -1;
 8007d28:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2c:	e02f      	b.n	8007d8e <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d10b      	bne.n	8007d50 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d38:	7af9      	ldrb	r1, [r7, #11]
 8007d3a:	233a      	movs	r3, #58	@ 0x3a
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fb6d 	bl	800841e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	2205      	movs	r2, #5
 8007d48:	721a      	strb	r2, [r3, #8]
    return -1;
 8007d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4e:	e01e      	b.n	8007d8e <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	33b0      	adds	r3, #176	@ 0xb0
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	7afa      	ldrb	r2, [r7, #11]
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d6e:	7af9      	ldrb	r1, [r7, #11]
 8007d70:	233a      	movs	r3, #58	@ 0x3a
 8007d72:	2202      	movs	r2, #2
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fb52 	bl	800841e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2205      	movs	r2, #5
 8007d7e:	721a      	strb	r2, [r3, #8]

    return -1;
 8007d80:	f04f 33ff 	mov.w	r3, #4294967295
 8007d84:	e003      	b.n	8007d8e <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	60da      	str	r2, [r3, #12]

  return 0;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	460b      	mov	r3, r1
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	32b0      	adds	r2, #176	@ 0xb0
 8007db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	e05e      	b.n	8007e80 <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007dd2:	2320      	movs	r3, #32
 8007dd4:	2205      	movs	r2, #5
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	f000 fb21 	bl	800841e <SCSI_SenseCode>
    return -1;
 8007ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8007de0:	e04e      	b.n	8007e80 <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3301      	adds	r3, #1
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d020      	beq.n	8007e32 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3302      	adds	r3, #2
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007dfa:	2206      	movs	r2, #6
 8007dfc:	4922      	ldr	r1, [pc, #136]	@ (8007e88 <SCSI_Inquiry+0xf0>)
 8007dfe:	69b8      	ldr	r0, [r7, #24]
 8007e00:	f001 f908 	bl	8009014 <SCSI_UpdateBotData>
 8007e04:	e03b      	b.n	8007e7e <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3302      	adds	r3, #2
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b80      	cmp	r3, #128	@ 0x80
 8007e0e:	d105      	bne.n	8007e1c <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007e10:	2208      	movs	r2, #8
 8007e12:	491e      	ldr	r1, [pc, #120]	@ (8007e8c <SCSI_Inquiry+0xf4>)
 8007e14:	69b8      	ldr	r0, [r7, #24]
 8007e16:	f001 f8fd 	bl	8009014 <SCSI_UpdateBotData>
 8007e1a:	e030      	b.n	8007e7e <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007e22:	2324      	movs	r3, #36	@ 0x24
 8007e24:	2205      	movs	r2, #5
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 faf9 	bl	800841e <SCSI_SenseCode>
                     INVALID_FIELD_IN_COMMAND);

      return -1;
 8007e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e30:	e026      	b.n	8007e80 <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	33b0      	adds	r3, #176	@ 0xb0
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007e42:	69d9      	ldr	r1, [r3, #28]
 8007e44:	7afa      	ldrb	r2, [r7, #11]
 8007e46:	4613      	mov	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8007e4e:	440b      	add	r3, r1
 8007e50:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	3304      	adds	r3, #4
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	3305      	adds	r3, #5
 8007e5a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	8bfb      	ldrh	r3, [r7, #30]
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d303      	bcc.n	8007e72 <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007e72:	8bfb      	ldrh	r3, [r7, #30]
 8007e74:	461a      	mov	r2, r3
 8007e76:	6979      	ldr	r1, [r7, #20]
 8007e78:	69b8      	ldr	r0, [r7, #24]
 8007e7a:	f001 f8cb 	bl	8009014 <SCSI_UpdateBotData>
  }

  return 0;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000088 	.word	0x20000088
 8007e8c:	20000090 	.word	0x20000090

08007e90 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	32b0      	adds	r2, #176	@ 0xb0
 8007ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eac:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	3326      	adds	r3, #38	@ 0x26
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	69fa      	ldr	r2, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3304      	adds	r3, #4
 8007eba:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d102      	bne.n	8007ec8 <SCSI_ReadCapacity10+0x38>
  {
    return -1;
 8007ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec6:	e059      	b.n	8007f7c <SCSI_ReadCapacity10+0xec>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	33b0      	adds	r3, #176	@ 0xb0
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	1d11      	adds	r1, r2, #4
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	7af8      	ldrb	r0, [r7, #11]
 8007ee2:	4798      	blx	r3
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	75fb      	strb	r3, [r7, #23]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <SCSI_ReadCapacity10+0x6a>
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d108      	bne.n	8007f0c <SCSI_ReadCapacity10+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007efa:	7af9      	ldrb	r1, [r7, #11]
 8007efc:	233a      	movs	r3, #58	@ 0x3a
 8007efe:	2202      	movs	r2, #2
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 fa8c 	bl	800841e <SCSI_SenseCode>
    return -1;
 8007f06:	f04f 33ff 	mov.w	r3, #4294967295
 8007f0a:	e037      	b.n	8007f7c <SCSI_ReadCapacity10+0xec>
  }

  hmsc->bot_data[0] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	0e1b      	lsrs	r3, r3, #24
 8007f14:	b2da      	uxtb	r2, r3
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	0c1b      	lsrs	r3, r3, #16
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	0a1b      	lsrs	r3, r3, #8
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(p_scsi_blk->size >> 24);
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	161b      	asrs	r3, r3, #24
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(p_scsi_blk->size >> 16);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	141b      	asrs	r3, r3, #16
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(p_scsi_blk->size >> 8);
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	0a1b      	lsrs	r3, r3, #8
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->size);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2208      	movs	r2, #8
 8007f78:	60da      	str	r2, [r3, #12]

  return 0;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3720      	adds	r7, #32
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	607a      	str	r2, [r7, #4]
 8007f90:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	32b0      	adds	r2, #176	@ 0xb0
 8007f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa0:	61bb      	str	r3, [r7, #24]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8007fa2:	7afb      	ldrb	r3, [r7, #11]
 8007fa4:	3326      	adds	r3, #38	@ 0x26
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	69ba      	ldr	r2, [r7, #24]
 8007faa:	4413      	add	r3, r2
 8007fac:	3304      	adds	r3, #4
 8007fae:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <SCSI_ReadCapacity16+0x38>
  {
    return -1;
 8007fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fba:	e08f      	b.n	80080dc <SCSI_ReadCapacity16+0x158>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	33b0      	adds	r3, #176	@ 0xb0
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4413      	add	r3, r2
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	1d11      	adds	r1, r2, #4
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	7af8      	ldrb	r0, [r7, #11]
 8007fd6:	4798      	blx	r3
 8007fd8:	4603      	mov	r3, r0
 8007fda:	74fb      	strb	r3, [r7, #19]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007fdc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d104      	bne.n	8007fee <SCSI_ReadCapacity16+0x6a>
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d108      	bne.n	8008000 <SCSI_ReadCapacity16+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007fee:	7af9      	ldrb	r1, [r7, #11]
 8007ff0:	233a      	movs	r3, #58	@ 0x3a
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fa12 	bl	800841e <SCSI_SenseCode>
    return -1;
 8007ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8007ffe:	e06d      	b.n	80080dc <SCSI_ReadCapacity16+0x158>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	330a      	adds	r3, #10
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	330b      	adds	r3, #11
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008010:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	330c      	adds	r3, #12
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800801a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	320d      	adds	r2, #13
 8008020:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8008022:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	e008      	b.n	8008040 <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	4413      	add	r3, r2
 8008034:	3310      	adds	r3, #16
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	3301      	adds	r3, #1
 800803e:	61fb      	str	r3, [r7, #28]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	429a      	cmp	r2, r3
 8008048:	d3f1      	bcc.n	800802e <SCSI_ReadCapacity16+0xaa>
  }

  hmsc->bot_data[4] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	3b01      	subs	r3, #1
 8008050:	0e1b      	lsrs	r3, r3, #24
 8008052:	b2da      	uxtb	r2, r3
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	3b01      	subs	r3, #1
 800805e:	0c1b      	lsrs	r3, r3, #16
 8008060:	b2da      	uxtb	r2, r3
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	3b01      	subs	r3, #1
 800806c:	0a1b      	lsrs	r3, r3, #8
 800806e:	b2da      	uxtb	r2, r3
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	b2db      	uxtb	r3, r3
 800807a:	3b01      	subs	r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(p_scsi_blk->size >>  24);
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	161b      	asrs	r3, r3, #24
 8008088:	b2da      	uxtb	r2, r3
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(p_scsi_blk->size >>  16);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	141b      	asrs	r3, r3, #16
 8008094:	b2da      	uxtb	r2, r3
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(p_scsi_blk->size >>  8);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(p_scsi_blk->size);
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	330a      	adds	r3, #10
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	330b      	adds	r3, #11
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80080c2:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	330c      	adds	r3, #12
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80080cc:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	320d      	adds	r2, #13
 80080d2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80080d4:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	60da      	str	r2, [r3, #12]

  return 0;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	460b      	mov	r3, r1
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	32b0      	adds	r2, #176	@ 0xb0
 80080fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008100:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8008108:	f04f 33ff 	mov.w	r3, #4294967295
 800810c:	e061      	b.n	80081d2 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	33b0      	adds	r3, #176	@ 0xb0
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f107 0214 	add.w	r2, r7, #20
 8008124:	f107 0110 	add.w	r1, r7, #16
 8008128:	7af8      	ldrb	r0, [r7, #11]
 800812a:	4798      	blx	r3
 800812c:	4603      	mov	r3, r0
 800812e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008130:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d104      	bne.n	8008142 <SCSI_ReadFormatCapacity+0x5e>
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800813e:	2b02      	cmp	r3, #2
 8008140:	d108      	bne.n	8008154 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008142:	7af9      	ldrb	r1, [r7, #11]
 8008144:	233a      	movs	r3, #58	@ 0x3a
 8008146:	2202      	movs	r2, #2
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 f968 	bl	800841e <SCSI_SenseCode>
    return -1;
 800814e:	f04f 33ff 	mov.w	r3, #4294967295
 8008152:	e03e      	b.n	80081d2 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8008154:	2300      	movs	r3, #0
 8008156:	83fb      	strh	r3, [r7, #30]
 8008158:	e007      	b.n	800816a <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 800815a:	8bfb      	ldrh	r3, [r7, #30]
 800815c:	69ba      	ldr	r2, [r7, #24]
 800815e:	4413      	add	r3, r2
 8008160:	2200      	movs	r2, #0
 8008162:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8008164:	8bfb      	ldrh	r3, [r7, #30]
 8008166:	3301      	adds	r3, #1
 8008168:	83fb      	strh	r3, [r7, #30]
 800816a:	8bfb      	ldrh	r3, [r7, #30]
 800816c:	2b0b      	cmp	r3, #11
 800816e:	d9f4      	bls.n	800815a <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	2208      	movs	r2, #8
 8008174:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	0e1b      	lsrs	r3, r3, #24
 800817c:	b2da      	uxtb	r2, r3
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	3b01      	subs	r3, #1
 8008186:	0c1b      	lsrs	r3, r3, #16
 8008188:	b2da      	uxtb	r2, r3
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	3b01      	subs	r3, #1
 8008192:	0a1b      	lsrs	r3, r3, #8
 8008194:	b2da      	uxtb	r2, r3
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	3b01      	subs	r3, #1
 80081a0:	b2da      	uxtb	r2, r3
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	2202      	movs	r2, #2
 80081aa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80081ac:	8abb      	ldrh	r3, [r7, #20]
 80081ae:	141b      	asrs	r3, r3, #16
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80081b6:	8abb      	ldrh	r3, [r7, #20]
 80081b8:	0a1b      	lsrs	r3, r3, #8
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80081c2:	8abb      	ldrh	r3, [r7, #20]
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	220c      	movs	r2, #12
 80081ce:	60da      	str	r2, [r3, #12]

  return 0;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	460b      	mov	r3, r1
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	32b0      	adds	r2, #176	@ 0xb0
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80081fa:	2304      	movs	r3, #4
 80081fc:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
 8008208:	e02f      	b.n	800826a <SCSI_ModeSense6+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	33b0      	adds	r3, #176	@ 0xb0
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	7afa      	ldrb	r2, [r7, #11]
 800821e:	4610      	mov	r0, r2
 8008220:	4798      	blx	r3
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d007      	beq.n	8008238 <SCSI_ModeSense6+0x5c>
  {
    MSC_Mode_Sense6_data[2] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8008228:	4b12      	ldr	r3, [pc, #72]	@ (8008274 <SCSI_ModeSense6+0x98>)
 800822a:	789b      	ldrb	r3, [r3, #2]
 800822c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b10      	ldr	r3, [pc, #64]	@ (8008274 <SCSI_ModeSense6+0x98>)
 8008234:	709a      	strb	r2, [r3, #2]
 8008236:	e006      	b.n	8008246 <SCSI_ModeSense6+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[2] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8008238:	4b0f      	ldr	r3, [pc, #60]	@ (8008278 <SCSI_ModeSense6+0x9c>)
 800823a:	789b      	ldrb	r3, [r3, #2]
 800823c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008240:	b2da      	uxtb	r2, r3
 8008242:	4b0d      	ldr	r3, [pc, #52]	@ (8008278 <SCSI_ModeSense6+0x9c>)
 8008244:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3304      	adds	r3, #4
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	8afb      	ldrh	r3, [r7, #22]
 8008250:	4293      	cmp	r3, r2
 8008252:	d303      	bcc.n	800825c <SCSI_ModeSense6+0x80>
  {
    len = params[4];
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	3304      	adds	r3, #4
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800825c:	8afb      	ldrh	r3, [r7, #22]
 800825e:	461a      	mov	r2, r3
 8008260:	4904      	ldr	r1, [pc, #16]	@ (8008274 <SCSI_ModeSense6+0x98>)
 8008262:	6938      	ldr	r0, [r7, #16]
 8008264:	f000 fed6 	bl	8009014 <SCSI_UpdateBotData>

  return 0;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3718      	adds	r7, #24
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000098 	.word	0x20000098
 8008278:	2000009c 	.word	0x2000009c

0800827c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	460b      	mov	r3, r1
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	32b0      	adds	r2, #176	@ 0xb0
 8008294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008298:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800829a:	2308      	movs	r3, #8
 800829c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d102      	bne.n	80082aa <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80082a4:	f04f 33ff 	mov.w	r3, #4294967295
 80082a8:	e02f      	b.n	800830a <SCSI_ModeSense10+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	33b0      	adds	r3, #176	@ 0xb0
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	7afa      	ldrb	r2, [r7, #11]
 80082be:	4610      	mov	r0, r2
 80082c0:	4798      	blx	r3
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d007      	beq.n	80082d8 <SCSI_ModeSense10+0x5c>
  {
    MSC_Mode_Sense10_data[3] |= (0x1U << 7); /* Set the WP (write protection) bit */
 80082c8:	4b12      	ldr	r3, [pc, #72]	@ (8008314 <SCSI_ModeSense10+0x98>)
 80082ca:	78db      	ldrb	r3, [r3, #3]
 80082cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	4b10      	ldr	r3, [pc, #64]	@ (8008314 <SCSI_ModeSense10+0x98>)
 80082d4:	70da      	strb	r2, [r3, #3]
 80082d6:	e006      	b.n	80082e6 <SCSI_ModeSense10+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[3] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 80082d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008314 <SCSI_ModeSense10+0x98>)
 80082da:	78db      	ldrb	r3, [r3, #3]
 80082dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <SCSI_ModeSense10+0x98>)
 80082e4:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	3308      	adds	r3, #8
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	461a      	mov	r2, r3
 80082ee:	8afb      	ldrh	r3, [r7, #22]
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d303      	bcc.n	80082fc <SCSI_ModeSense10+0x80>
  {
    len = params[8];
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	3308      	adds	r3, #8
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80082fc:	8afb      	ldrh	r3, [r7, #22]
 80082fe:	461a      	mov	r2, r3
 8008300:	4904      	ldr	r1, [pc, #16]	@ (8008314 <SCSI_ModeSense10+0x98>)
 8008302:	6938      	ldr	r0, [r7, #16]
 8008304:	f000 fe86 	bl	8009014 <SCSI_UpdateBotData>

  return 0;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3718      	adds	r7, #24
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	2000009c 	.word	0x2000009c

08008318 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	460b      	mov	r3, r1
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	32b0      	adds	r2, #176	@ 0xb0
 8008330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008334:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <SCSI_RequestSense+0x2a>
  {
    return -1;
 800833c:	f04f 33ff 	mov.w	r3, #4294967295
 8008340:	e069      	b.n	8008416 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008352:	2320      	movs	r3, #32
 8008354:	2205      	movs	r2, #5
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 f861 	bl	800841e <SCSI_SenseCode>
    return -1;
 800835c:	f04f 33ff 	mov.w	r3, #4294967295
 8008360:	e059      	b.n	8008416 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008362:	2300      	movs	r3, #0
 8008364:	75fb      	strb	r3, [r7, #23]
 8008366:	e007      	b.n	8008378 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4413      	add	r3, r2
 800836e:	2200      	movs	r2, #0
 8008370:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	3301      	adds	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b11      	cmp	r3, #17
 800837c:	d9f4      	bls.n	8008368 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2270      	movs	r2, #112	@ 0x70
 8008382:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	220c      	movs	r2, #12
 8008388:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008396:	429a      	cmp	r2, r3
 8008398:	d02e      	beq.n	80083f8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80083a0:	461a      	mov	r2, r3
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3248      	adds	r2, #72	@ 0x48
 80083a6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	3348      	adds	r3, #72	@ 0x48
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	4413      	add	r3, r2
 80083bc:	791a      	ldrb	r2, [r3, #4]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	3348      	adds	r3, #72	@ 0x48
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	4413      	add	r3, r2
 80083d0:	795a      	ldrb	r2, [r3, #5]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80083dc:	3301      	adds	r3, #1
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d103      	bne.n	80083f8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2212      	movs	r2, #18
 80083fc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	3304      	adds	r3, #4
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b12      	cmp	r3, #18
 8008406:	d805      	bhi.n	8008414 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}

0800841e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	461a      	mov	r2, r3
 800842c:	4603      	mov	r3, r0
 800842e:	70fb      	strb	r3, [r7, #3]
 8008430:	460b      	mov	r3, r1
 8008432:	70bb      	strb	r3, [r7, #2]
 8008434:	4613      	mov	r3, r2
 8008436:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	32b0      	adds	r2, #176	@ 0xb0
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d02c      	beq.n	80084a8 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008454:	461a      	mov	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3248      	adds	r2, #72	@ 0x48
 800845a:	78b9      	ldrb	r1, [r7, #2]
 800845c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	3348      	adds	r3, #72	@ 0x48
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	4413      	add	r3, r2
 800846e:	787a      	ldrb	r2, [r7, #1]
 8008470:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	3348      	adds	r3, #72	@ 0x48
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	2200      	movs	r2, #0
 8008482:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800848a:	3301      	adds	r3, #1
 800848c:	b2da      	uxtb	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 800849a:	2b04      	cmp	r3, #4
 800849c:	d105      	bne.n	80084aa <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 80084a6:	e000      	b.n	80084aa <SCSI_SenseCode+0x8c>
    return;
 80084a8:	bf00      	nop
  }
}
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	460b      	mov	r3, r1
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	32b0      	adds	r2, #176	@ 0xb0
 80084cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80084d8:	f04f 33ff 	mov.w	r3, #4294967295
 80084dc:	e03b      	b.n	8008556 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10f      	bne.n	8008508 <SCSI_StartStopUnit+0x54>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3304      	adds	r3, #4
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d108      	bne.n	8008508 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 80084f6:	7af9      	ldrb	r1, [r7, #11]
 80084f8:	2324      	movs	r3, #36	@ 0x24
 80084fa:	2205      	movs	r2, #5
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7ff ff8e 	bl	800841e <SCSI_SenseCode>

    return -1;
 8008502:	f04f 33ff 	mov.w	r3, #4294967295
 8008506:	e026      	b.n	8008556 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b01      	cmp	r3, #1
 8008514:	d104      	bne.n	8008520 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800851e:	e016      	b.n	800854e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	f003 0303 	and.w	r3, r3, #3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d104      	bne.n	8008538 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2202      	movs	r2, #2
 8008532:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8008536:	e00a      	b.n	800854e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	2b03      	cmp	r3, #3
 8008544:	d103      	bne.n	800854e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2200      	movs	r2, #0
 8008552:	60da      	str	r2, [r3, #12]

  return 0;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800855e:	b480      	push	{r7}
 8008560:	b087      	sub	sp, #28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	460b      	mov	r3, r1
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	32b0      	adds	r2, #176	@ 0xb0
 8008576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8008582:	f04f 33ff 	mov.w	r3, #4294967295
 8008586:	e011      	b.n	80085ac <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800859a:	e003      	b.n	80085a4 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	60da      	str	r2, [r3, #12]

  return 0;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	460b      	mov	r3, r1
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	32b0      	adds	r2, #176	@ 0xb0
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80085d6:	7afb      	ldrb	r3, [r7, #11]
 80085d8:	3326      	adds	r3, #38	@ 0x26
 80085da:	011b      	lsls	r3, r3, #4
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	4413      	add	r3, r2
 80085e0:	3304      	adds	r3, #4
 80085e2:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d102      	bne.n	80085f0 <SCSI_Read10+0x38>
  {
    return -1;
 80085ea:	f04f 33ff 	mov.w	r3, #4294967295
 80085ee:	e089      	b.n	8008704 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	7a1b      	ldrb	r3, [r3, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d17b      	bne.n	80086f0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80085fe:	b25b      	sxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	db0a      	blt.n	800861a <SCSI_Read10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 800860a:	2320      	movs	r3, #32
 800860c:	2205      	movs	r2, #5
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f7ff ff05 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008614:	f04f 33ff 	mov.w	r3, #4294967295
 8008618:	e074      	b.n	8008704 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008620:	2b02      	cmp	r3, #2
 8008622:	d108      	bne.n	8008636 <SCSI_Read10+0x7e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008624:	7af9      	ldrb	r1, [r7, #11]
 8008626:	233a      	movs	r3, #58	@ 0x3a
 8008628:	2202      	movs	r2, #2
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fef7 	bl	800841e <SCSI_SenseCode>

      return -1;
 8008630:	f04f 33ff 	mov.w	r3, #4294967295
 8008634:	e066      	b.n	8008704 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	33b0      	adds	r3, #176	@ 0xb0
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4413      	add	r3, r2
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	7afa      	ldrb	r2, [r7, #11]
 800864a:	4610      	mov	r0, r2
 800864c:	4798      	blx	r3
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d008      	beq.n	8008666 <SCSI_Read10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008654:	7af9      	ldrb	r1, [r7, #11]
 8008656:	233a      	movs	r3, #58	@ 0x3a
 8008658:	2202      	movs	r2, #2
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f7ff fedf 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008660:	f04f 33ff 	mov.w	r3, #4294967295
 8008664:	e04e      	b.n	8008704 <SCSI_Read10+0x14c>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3302      	adds	r3, #2
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3303      	adds	r3, #3
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008676:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3304      	adds	r3, #4
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8008680:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	3205      	adds	r2, #5
 8008686:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 8008688:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3307      	adds	r3, #7
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	3208      	adds	r2, #8
 800869a:	7812      	ldrb	r2, [r2, #0]
 800869c:	431a      	orrs	r2, r3
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	7af9      	ldrb	r1, [r7, #11]
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 fb6d 	bl	8008d8c <SCSI_CheckAddressRange>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da02      	bge.n	80086be <SCSI_Read10+0x106>
    {
      return -1; /* error */
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295
 80086bc:	e022      	b.n	8008704 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	6939      	ldr	r1, [r7, #16]
 80086ca:	8809      	ldrh	r1, [r1, #0]
 80086cc:	fb01 f303 	mul.w	r3, r1, r3
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d00a      	beq.n	80086ea <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80086da:	2320      	movs	r3, #32
 80086dc:	2205      	movs	r2, #5
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f7ff fe9d 	bl	800841e <SCSI_SenseCode>
      return -1;
 80086e4:	f04f 33ff 	mov.w	r3, #4294967295
 80086e8:	e00c      	b.n	8008704 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2202      	movs	r2, #2
 80086ee:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086f6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80086f8:	7afb      	ldrb	r3, [r7, #11]
 80086fa:	4619      	mov	r1, r3
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 fb77 	bl	8008df0 <SCSI_ProcessRead>
 8008702:	4603      	mov	r3, r0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	460b      	mov	r3, r1
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	32b0      	adds	r2, #176	@ 0xb0
 8008724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008728:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	3326      	adds	r3, #38	@ 0x26
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4413      	add	r3, r2
 8008734:	3304      	adds	r3, #4
 8008736:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d102      	bne.n	8008744 <SCSI_Read12+0x38>
  {
    return -1;
 800873e:	f04f 33ff 	mov.w	r3, #4294967295
 8008742:	e094      	b.n	800886e <SCSI_Read12+0x162>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	7a1b      	ldrb	r3, [r3, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 8086 	bne.w	800885a <SCSI_Read12+0x14e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008754:	b25b      	sxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	db0a      	blt.n	8008770 <SCSI_Read12+0x64>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008760:	2320      	movs	r3, #32
 8008762:	2205      	movs	r2, #5
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fe5a 	bl	800841e <SCSI_SenseCode>
      return -1;
 800876a:	f04f 33ff 	mov.w	r3, #4294967295
 800876e:	e07e      	b.n	800886e <SCSI_Read12+0x162>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008776:	2b02      	cmp	r3, #2
 8008778:	d108      	bne.n	800878c <SCSI_Read12+0x80>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800877a:	7af9      	ldrb	r1, [r7, #11]
 800877c:	233a      	movs	r3, #58	@ 0x3a
 800877e:	2202      	movs	r2, #2
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f7ff fe4c 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008786:	f04f 33ff 	mov.w	r3, #4294967295
 800878a:	e070      	b.n	800886e <SCSI_Read12+0x162>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	33b0      	adds	r3, #176	@ 0xb0
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	7afa      	ldrb	r2, [r7, #11]
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d008      	beq.n	80087bc <SCSI_Read12+0xb0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80087aa:	7af9      	ldrb	r1, [r7, #11]
 80087ac:	233a      	movs	r3, #58	@ 0x3a
 80087ae:	2202      	movs	r2, #2
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f7ff fe34 	bl	800841e <SCSI_SenseCode>
      return -1;
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	e058      	b.n	800886e <SCSI_Read12+0x162>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3302      	adds	r3, #2
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	3303      	adds	r3, #3
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80087cc:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3304      	adds	r3, #4
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 80087d6:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	3205      	adds	r2, #5
 80087dc:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 80087de:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3306      	adds	r3, #6
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	3307      	adds	r3, #7
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80087f4:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3308      	adds	r3, #8
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 80087fe:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	3209      	adds	r2, #9
 8008804:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 8008806:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	7af9      	ldrb	r1, [r7, #11]
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fab8 	bl	8008d8c <SCSI_CheckAddressRange>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	da02      	bge.n	8008828 <SCSI_Read12+0x11c>
    {
      return -1; /* error */
 8008822:	f04f 33ff 	mov.w	r3, #4294967295
 8008826:	e022      	b.n	800886e <SCSI_Read12+0x162>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	6939      	ldr	r1, [r7, #16]
 8008834:	8809      	ldrh	r1, [r1, #0]
 8008836:	fb01 f303 	mul.w	r3, r1, r3
 800883a:	429a      	cmp	r2, r3
 800883c:	d00a      	beq.n	8008854 <SCSI_Read12+0x148>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008844:	2320      	movs	r3, #32
 8008846:	2205      	movs	r2, #5
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7ff fde8 	bl	800841e <SCSI_SenseCode>
      return -1;
 800884e:	f04f 33ff 	mov.w	r3, #4294967295
 8008852:	e00c      	b.n	800886e <SCSI_Read12+0x162>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2202      	movs	r2, #2
 8008858:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008860:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008862:	7afb      	ldrb	r3, [r7, #11]
 8008864:	4619      	mov	r1, r3
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 fac2 	bl	8008df0 <SCSI_ProcessRead>
 800886c:	4603      	mov	r3, r0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
	...

08008878 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	460b      	mov	r3, r1
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	32b0      	adds	r2, #176	@ 0xb0
 8008890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008894:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	3326      	adds	r3, #38	@ 0x26
 800889a:	011b      	lsls	r3, r3, #4
 800889c:	69fa      	ldr	r2, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	3304      	adds	r3, #4
 80088a2:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <SCSI_Write10+0x38>
  {
    return -1;
 80088aa:	f04f 33ff 	mov.w	r3, #4294967295
 80088ae:	e0b4      	b.n	8008a1a <SCSI_Write10+0x1a2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80088b0:	69fb      	ldr	r3, [r7, #28]
 80088b2:	7a1b      	ldrb	r3, [r3, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f040 80aa 	bne.w	8008a0e <SCSI_Write10+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10a      	bne.n	80088da <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80088ca:	2320      	movs	r3, #32
 80088cc:	2205      	movs	r2, #5
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fda5 	bl	800841e <SCSI_SenseCode>
      return -1;
 80088d4:	f04f 33ff 	mov.w	r3, #4294967295
 80088d8:	e09f      	b.n	8008a1a <SCSI_Write10+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80088e0:	b25b      	sxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	da0a      	bge.n	80088fc <SCSI_Write10+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80088ec:	2320      	movs	r3, #32
 80088ee:	2205      	movs	r2, #5
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff fd94 	bl	800841e <SCSI_SenseCode>
      return -1;
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	e08e      	b.n	8008a1a <SCSI_Write10+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	33b0      	adds	r3, #176	@ 0xb0
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	7afa      	ldrb	r2, [r7, #11]
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d008      	beq.n	800892c <SCSI_Write10+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800891a:	7af9      	ldrb	r1, [r7, #11]
 800891c:	233a      	movs	r3, #58	@ 0x3a
 800891e:	2202      	movs	r2, #2
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff fd7c 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008926:	f04f 33ff 	mov.w	r3, #4294967295
 800892a:	e076      	b.n	8008a1a <SCSI_Write10+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	33b0      	adds	r3, #176	@ 0xb0
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	7afa      	ldrb	r2, [r7, #11]
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d008      	beq.n	800895c <SCSI_Write10+0xe4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800894a:	7af9      	ldrb	r1, [r7, #11]
 800894c:	2327      	movs	r3, #39	@ 0x27
 800894e:	2202      	movs	r2, #2
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7ff fd64 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008956:	f04f 33ff 	mov.w	r3, #4294967295
 800895a:	e05e      	b.n	8008a1a <SCSI_Write10+0x1a2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3302      	adds	r3, #2
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	3303      	adds	r3, #3
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800896c:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3304      	adds	r3, #4
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8008976:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	3205      	adds	r2, #5
 800897c:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 800897e:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	3307      	adds	r3, #7
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	021b      	lsls	r3, r3, #8
                      (uint32_t)params[8];
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	3208      	adds	r2, #8
 8008990:	7812      	ldrb	r2, [r2, #0]
    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 8008992:	431a      	orrs	r2, r3
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	7af9      	ldrb	r1, [r7, #11]
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f000 f9f2 	bl	8008d8c <SCSI_CheckAddressRange>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	da02      	bge.n	80089b4 <SCSI_Write10+0x13c>
    {
      return -1; /* error */
 80089ae:	f04f 33ff 	mov.w	r3, #4294967295
 80089b2:	e032      	b.n	8008a1a <SCSI_Write10+0x1a2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	8812      	ldrh	r2, [r2, #0]
 80089bc:	fb02 f303 	mul.w	r3, r2, r3
 80089c0:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d00a      	beq.n	80089e4 <SCSI_Write10+0x16c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80089d4:	2320      	movs	r3, #32
 80089d6:	2205      	movs	r2, #5
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f7ff fd20 	bl	800841e <SCSI_SenseCode>
      return -1;
 80089de:	f04f 33ff 	mov.w	r3, #4294967295
 80089e2:	e01a      	b.n	8008a1a <SCSI_Write10+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ea:	bf28      	it	cs
 80089ec:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 80089f0:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	2201      	movs	r2, #1
 80089f6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80089f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008a24 <SCSI_Write10+0x1ac>)
 80089fa:	7819      	ldrb	r1, [r3, #0]
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f103 0210 	add.w	r2, r3, #16
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f006 fa44 	bl	800ee92 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e005      	b.n	8008a1a <SCSI_Write10+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8008a0e:	7afb      	ldrb	r3, [r7, #11]
 8008a10:	4619      	mov	r1, r3
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 fa6e 	bl	8008ef4 <SCSI_ProcessWrite>
 8008a18:	4603      	mov	r3, r0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3720      	adds	r7, #32
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	20000087 	.word	0x20000087

08008a28 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b088      	sub	sp, #32
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	460b      	mov	r3, r1
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	32b0      	adds	r2, #176	@ 0xb0
 8008a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a44:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008a46:	7afb      	ldrb	r3, [r7, #11]
 8008a48:	3326      	adds	r3, #38	@ 0x26
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	69fa      	ldr	r2, [r7, #28]
 8008a4e:	4413      	add	r3, r2
 8008a50:	3304      	adds	r3, #4
 8008a52:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d102      	bne.n	8008a60 <SCSI_Write12+0x38>
  {
    return -1;
 8008a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5e:	e0c4      	b.n	8008bea <SCSI_Write12+0x1c2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	7a1b      	ldrb	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f040 80ba 	bne.w	8008bde <SCSI_Write12+0x1b6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d10a      	bne.n	8008a8a <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	2205      	movs	r2, #5
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	f7ff fccd 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008a84:	f04f 33ff 	mov.w	r3, #4294967295
 8008a88:	e0af      	b.n	8008bea <SCSI_Write12+0x1c2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8008a90:	b25b      	sxtb	r3, r3
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	da0a      	bge.n	8008aac <SCSI_Write12+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008a9c:	2320      	movs	r3, #32
 8008a9e:	2205      	movs	r2, #5
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f7ff fcbc 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aaa:	e09e      	b.n	8008bea <SCSI_Write12+0x1c2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	33b0      	adds	r3, #176	@ 0xb0
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	7afa      	ldrb	r2, [r7, #11]
 8008ac0:	4610      	mov	r0, r2
 8008ac2:	4798      	blx	r3
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00b      	beq.n	8008ae2 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008aca:	7af9      	ldrb	r1, [r7, #11]
 8008acc:	233a      	movs	r3, #58	@ 0x3a
 8008ace:	2202      	movs	r2, #2
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fca4 	bl	800841e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	2205      	movs	r2, #5
 8008ada:	721a      	strb	r2, [r3, #8]
      return -1;
 8008adc:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae0:	e083      	b.n	8008bea <SCSI_Write12+0x1c2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	33b0      	adds	r3, #176	@ 0xb0
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	7afa      	ldrb	r2, [r7, #11]
 8008af6:	4610      	mov	r0, r2
 8008af8:	4798      	blx	r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <SCSI_Write12+0xf0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008b00:	7af9      	ldrb	r1, [r7, #11]
 8008b02:	2327      	movs	r3, #39	@ 0x27
 8008b04:	2202      	movs	r2, #2
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f7ff fc89 	bl	800841e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2205      	movs	r2, #5
 8008b10:	721a      	strb	r2, [r3, #8]
      return -1;
 8008b12:	f04f 33ff 	mov.w	r3, #4294967295
 8008b16:	e068      	b.n	8008bea <SCSI_Write12+0x1c2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3302      	adds	r3, #2
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3303      	adds	r3, #3
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008b28:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8008b32:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	3205      	adds	r2, #5
 8008b38:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 8008b3a:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3306      	adds	r3, #6
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3307      	adds	r3, #7
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008b50:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3308      	adds	r3, #8
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 8008b5a:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	3209      	adds	r2, #9
 8008b60:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 8008b62:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	7af9      	ldrb	r1, [r7, #11]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 f90a 	bl	8008d8c <SCSI_CheckAddressRange>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	da02      	bge.n	8008b84 <SCSI_Write12+0x15c>
    {
      return -1; /* error */
 8008b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b82:	e032      	b.n	8008bea <SCSI_Write12+0x1c2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	8812      	ldrh	r2, [r2, #0]
 8008b8c:	fb02 f303 	mul.w	r3, r2, r3
 8008b90:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d00a      	beq.n	8008bb4 <SCSI_Write12+0x18c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	2205      	movs	r2, #5
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7ff fc38 	bl	800841e <SCSI_SenseCode>
      return -1;
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb2:	e01a      	b.n	8008bea <SCSI_Write12+0x1c2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bba:	bf28      	it	cs
 8008bbc:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008bc0:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf4 <SCSI_Write12+0x1cc>)
 8008bca:	7819      	ldrb	r1, [r3, #0]
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f103 0210 	add.w	r2, r3, #16
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f006 f95c 	bl	800ee92 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e005      	b.n	8008bea <SCSI_Write12+0x1c2>
    return SCSI_ProcessWrite(pdev, lun);
 8008bde:	7afb      	ldrb	r3, [r7, #11]
 8008be0:	4619      	mov	r1, r3
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f000 f986 	bl	8008ef4 <SCSI_ProcessWrite>
 8008be8:	4603      	mov	r3, r0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3720      	adds	r7, #32
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	20000087 	.word	0x20000087

08008bf8 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	460b      	mov	r3, r1
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	32b0      	adds	r2, #176	@ 0xb0
 8008c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c14:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008c16:	7afb      	ldrb	r3, [r7, #11]
 8008c18:	3326      	adds	r3, #38	@ 0x26
 8008c1a:	011b      	lsls	r3, r3, #4
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4413      	add	r3, r2
 8008c20:	3304      	adds	r3, #4
 8008c22:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <SCSI_Verify10+0x38>
  {
    return -1;
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c2e:	e021      	b.n	8008c74 <SCSI_Verify10+0x7c>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3301      	adds	r3, #1
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d008      	beq.n	8008c50 <SCSI_Verify10+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 8008c3e:	7af9      	ldrb	r1, [r7, #11]
 8008c40:	2324      	movs	r3, #36	@ 0x24
 8008c42:	2205      	movs	r2, #5
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff fbea 	bl	800841e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4e:	e011      	b.n	8008c74 <SCSI_Verify10+0x7c>
  }

  if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	7af9      	ldrb	r1, [r7, #11]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 f896 	bl	8008d8c <SCSI_CheckAddressRange>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da02      	bge.n	8008c6c <SCSI_Verify10+0x74>
  {
    return -1; /* error */
 8008c66:	f04f 33ff 	mov.w	r3, #4294967295
 8008c6a:	e003      	b.n	8008c74 <SCSI_Verify10+0x7c>
  }

  hmsc->bot_data_length = 0U;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	60da      	str	r2, [r3, #12]

  return 0;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <SCSI_ReportLuns>:
  * @brief  SCSI_ReportLuns12
  *         Process ReportLuns command
  * @retval status
  */
static int8_t SCSI_ReportLuns(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	460b      	mov	r3, r1
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);

  /* Define the report LUNs buffer Each LUN entry is 8 bytes */
  static uint8_t lun_report[8U * (MSC_BOT_MAX_LUN + 1U)];

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	32b0      	adds	r2, #176	@ 0xb0
 8008c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c98:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <SCSI_ReportLuns+0x2a>
  {
    return -1;
 8008ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca4:	e039      	b.n	8008d1a <SCSI_ReportLuns+0x9e>
  }

  /* Initialize the report LUNs buffer */
  (void)USBD_memset(lun_report, 0, sizeof(lun_report));
 8008ca6:	2218      	movs	r2, #24
 8008ca8:	2100      	movs	r1, #0
 8008caa:	481e      	ldr	r0, [pc, #120]	@ (8008d24 <SCSI_ReportLuns+0xa8>)
 8008cac:	f006 f98a 	bl	800efc4 <memset>

  /* Set the LUN list length in the first 4 bytes */
  lun_list_length = 8U * (hmsc->max_lun + 1U);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	617b      	str	r3, [r7, #20]
  lun_report[0] = (uint8_t)(lun_list_length >> 24);
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	0e1b      	lsrs	r3, r3, #24
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	4b18      	ldr	r3, [pc, #96]	@ (8008d24 <SCSI_ReportLuns+0xa8>)
 8008cc2:	701a      	strb	r2, [r3, #0]
  lun_report[1] = (uint8_t)(lun_list_length >> 16);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	0c1b      	lsrs	r3, r3, #16
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	4b16      	ldr	r3, [pc, #88]	@ (8008d24 <SCSI_ReportLuns+0xa8>)
 8008ccc:	705a      	strb	r2, [r3, #1]
  lun_report[2] = (uint8_t)(lun_list_length >> 8);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	0a1b      	lsrs	r3, r3, #8
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	4b13      	ldr	r3, [pc, #76]	@ (8008d24 <SCSI_ReportLuns+0xa8>)
 8008cd6:	709a      	strb	r2, [r3, #2]
  lun_report[3] = (uint8_t)(lun_list_length & 0xFFU);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	4b11      	ldr	r3, [pc, #68]	@ (8008d24 <SCSI_ReportLuns+0xa8>)
 8008cde:	70da      	strb	r2, [r3, #3]

  /* Update the LUN list */
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e009      	b.n	8008cfa <SCSI_ReportLuns+0x7e>
  {
    /* LUN identifier is placed at the second byte of each 8-byte entry */
    lun_report[(8U * (lun_idx + 1U)) + 1U] = lun_idx;
 8008ce6:	7ffb      	ldrb	r3, [r7, #31]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	3301      	adds	r3, #1
 8008cee:	490d      	ldr	r1, [pc, #52]	@ (8008d24 <SCSI_ReportLuns+0xa8>)
 8008cf0:	7ffa      	ldrb	r2, [r7, #31]
 8008cf2:	54ca      	strb	r2, [r1, r3]
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8008cf4:	7ffb      	ldrb	r3, [r7, #31]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	77fb      	strb	r3, [r7, #31]
 8008cfa:	7ffa      	ldrb	r2, [r7, #31]
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d9f0      	bls.n	8008ce6 <SCSI_ReportLuns+0x6a>
  }

  /* Calculate the total length of the report LUNs buffer */
  total_length = lun_list_length + 8U;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	3308      	adds	r3, #8
 8008d08:	613b      	str	r3, [r7, #16]

  /* Update the BOT data with the report LUNs buffer */
  (void)SCSI_UpdateBotData(hmsc, lun_report, (uint16_t)total_length);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	461a      	mov	r2, r3
 8008d10:	4904      	ldr	r1, [pc, #16]	@ (8008d24 <SCSI_ReportLuns+0xa8>)
 8008d12:	69b8      	ldr	r0, [r7, #24]
 8008d14:	f000 f97e 	bl	8009014 <SCSI_UpdateBotData>

  return 0;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3720      	adds	r7, #32
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20003a58 	.word	0x20003a58

08008d28 <SCSI_ReceiveDiagnosticResults>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReceiveDiagnosticResults(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	460b      	mov	r3, r1
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	32b0      	adds	r2, #176	@ 0xb0
 8008d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d44:	613b      	str	r3, [r7, #16]
  uint16_t allocation_length;

  /* Extract the allocation length from the CDB */
  allocation_length = (((uint16_t)params[3] << 8) | (uint16_t)params[4]);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3303      	adds	r3, #3
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	021b      	lsls	r3, r3, #8
 8008d4e:	b21a      	sxth	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3304      	adds	r3, #4
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b21b      	sxth	r3, r3
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	b21b      	sxth	r3, r3
 8008d5c:	82fb      	strh	r3, [r7, #22]

  if (allocation_length == 0U)
 8008d5e:	8afb      	ldrh	r3, [r7, #22]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <SCSI_ReceiveDiagnosticResults+0x40>
  {
    return 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	e00b      	b.n	8008d80 <SCSI_ReceiveDiagnosticResults+0x58>
  }

  /* Ensure the allocation length does not exceed the diagnostic data length */
  if (allocation_length > DIAGNOSTIC_DATA_LEN)
 8008d68:	8afb      	ldrh	r3, [r7, #22]
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d901      	bls.n	8008d72 <SCSI_ReceiveDiagnosticResults+0x4a>
  {
    allocation_length = DIAGNOSTIC_DATA_LEN;
 8008d6e:	2308      	movs	r3, #8
 8008d70:	82fb      	strh	r3, [r7, #22]
  }

  /* Send the diagnostic data to the host */
  (void)SCSI_UpdateBotData(hmsc, MSC_Diagnostic_Data, allocation_length);
 8008d72:	8afb      	ldrh	r3, [r7, #22]
 8008d74:	461a      	mov	r2, r3
 8008d76:	4904      	ldr	r1, [pc, #16]	@ (8008d88 <SCSI_ReceiveDiagnosticResults+0x60>)
 8008d78:	6938      	ldr	r0, [r7, #16]
 8008d7a:	f000 f94b 	bl	8009014 <SCSI_UpdateBotData>

  return 0;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3718      	adds	r7, #24
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20003a50 	.word	0x20003a50

08008d8c <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	603b      	str	r3, [r7, #0]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	32b0      	adds	r2, #176	@ 0xb0
 8008da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008daa:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	3326      	adds	r3, #38	@ 0x26
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4413      	add	r3, r2
 8008db6:	3304      	adds	r3, #4
 8008db8:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <SCSI_CheckAddressRange+0x3a>
  {
    return -1;
 8008dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc4:	e010      	b.n	8008de8 <SCSI_CheckAddressRange+0x5c>
  }

  if ((blk_offset + blk_nbr) > p_scsi_blk->nbr)
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	441a      	add	r2, r3
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d908      	bls.n	8008de6 <SCSI_CheckAddressRange+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008dd4:	7af9      	ldrb	r1, [r7, #11]
 8008dd6:	2321      	movs	r3, #33	@ 0x21
 8008dd8:	2205      	movs	r2, #5
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f7ff fb1f 	bl	800841e <SCSI_SenseCode>
    return -1;
 8008de0:	f04f 33ff 	mov.w	r3, #4294967295
 8008de4:	e000      	b.n	8008de8 <SCSI_CheckAddressRange+0x5c>
  }

  return 0;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008df0:	b590      	push	{r4, r7, lr}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	32b0      	adds	r2, #176	@ 0xb0
 8008e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e0a:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	3326      	adds	r3, #38	@ 0x26
 8008e10:	011b      	lsls	r3, r3, #4
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	4413      	add	r3, r2
 8008e16:	3304      	adds	r3, #4
 8008e18:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <SCSI_ProcessRead+0x36>
  {
    return -1;
 8008e20:	f04f 33ff 	mov.w	r3, #4294967295
 8008e24:	e05f      	b.n	8008ee6 <SCSI_ProcessRead+0xf6>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	8812      	ldrh	r2, [r2, #0]
 8008e2e:	fb02 f303 	mul.w	r3, r2, r3
 8008e32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e3a:	bf28      	it	cs
 8008e3c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008e40:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	33b0      	adds	r3, #176	@ 0xb0
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	691c      	ldr	r4, [r3, #16]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f103 0110 	add.w	r1, r3, #16
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	689a      	ldr	r2, [r3, #8]
                                                                    p_scsi_blk->addr,
                                                                    (len / p_scsi_blk->size)) < 0)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	4618      	mov	r0, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	78f8      	ldrb	r0, [r7, #3]
 8008e6e:	47a0      	blx	r4
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da08      	bge.n	8008e88 <SCSI_ProcessRead+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008e76:	78f9      	ldrb	r1, [r7, #3]
 8008e78:	2311      	movs	r3, #17
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff face 	bl	800841e <SCSI_SenseCode>
    return -1;
 8008e82:	f04f 33ff 	mov.w	r3, #4294967295
 8008e86:	e02e      	b.n	8008ee6 <SCSI_ProcessRead+0xf6>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8008e88:	4b19      	ldr	r3, [pc, #100]	@ (8008ef0 <SCSI_ProcessRead+0x100>)
 8008e8a:	7819      	ldrb	r1, [r3, #0]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f103 0210 	add.w	r2, r3, #16
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f005 ffdb 	bl	800ee50 <USBD_LL_Transmit>

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	689a      	ldr	r2, [r3, #8]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008eaa:	441a      	add	r2, r3
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ec0:	1ad2      	subs	r2, r2, r3
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	60da      	str	r2, [r3, #12]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <SCSI_ProcessRead+0xf4>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2203      	movs	r2, #3
 8008ee2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd90      	pop	{r4, r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000086 	.word	0x20000086

08008ef4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	32b0      	adds	r2, #176	@ 0xb0
 8008f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0e:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	3326      	adds	r3, #38	@ 0x26
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4413      	add	r3, r2
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d102      	bne.n	8008f2a <SCSI_ProcessWrite+0x36>
  {
    return -1;
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295
 8008f28:	e06d      	b.n	8009006 <SCSI_ProcessWrite+0x112>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	8812      	ldrh	r2, [r2, #0]
 8008f32:	fb02 f303 	mul.w	r3, r2, r3
 8008f36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f3e:	bf28      	it	cs
 8008f40:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008f44:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	33b0      	adds	r3, #176	@ 0xb0
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	695c      	ldr	r4, [r3, #20]
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f103 0110 	add.w	r1, r3, #16
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	689a      	ldr	r2, [r3, #8]
                                                                     (len / p_scsi_blk->size)) < 0)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	78f8      	ldrb	r0, [r7, #3]
 8008f72:	47a0      	blx	r4
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da08      	bge.n	8008f8c <SCSI_ProcessWrite+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008f7a:	78f9      	ldrb	r1, [r7, #3]
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	2204      	movs	r2, #4
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fa4c 	bl	800841e <SCSI_SenseCode>
    return -1;
 8008f86:	f04f 33ff 	mov.w	r3, #4294967295
 8008f8a:	e03c      	b.n	8009006 <SCSI_ProcessWrite+0x112>
  }

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f9c:	441a      	add	r2, r3
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	68da      	ldr	r2, [r3, #12]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	4619      	mov	r1, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fb2:	1ad2      	subs	r2, r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	60da      	str	r2, [r3, #12]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad2      	subs	r2, r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <SCSI_ProcessWrite+0xe6>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7fe fc26 	bl	8007824 <MSC_BOT_SendCSW>
 8008fd8:	e014      	b.n	8009004 <SCSI_ProcessWrite+0x110>
  }
  else
  {
    len = MIN((p_scsi_blk->len * p_scsi_blk->size), MSC_MEDIA_PACKET);
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	8812      	ldrh	r2, [r2, #0]
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
 8008fe6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fea:	bf28      	it	cs
 8008fec:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008ff0:	60fb      	str	r3, [r7, #12]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008ff2:	4b07      	ldr	r3, [pc, #28]	@ (8009010 <SCSI_ProcessWrite+0x11c>)
 8008ff4:	7819      	ldrb	r1, [r3, #0]
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f103 0210 	add.w	r2, r3, #16
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f005 ff47 	bl	800ee92 <USBD_LL_PrepareReceive>
  }

  return 0;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	371c      	adds	r7, #28
 800900a:	46bd      	mov	sp, r7
 800900c:	bd90      	pop	{r4, r7, pc}
 800900e:	bf00      	nop
 8009010:	20000087 	.word	0x20000087

08009014 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d102      	bne.n	8009032 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	e013      	b.n	800905a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8009032:	8afa      	ldrh	r2, [r7, #22]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8009038:	e00b      	b.n	8009052 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800903a:	8afb      	ldrh	r3, [r7, #22]
 800903c:	3b01      	subs	r3, #1
 800903e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8009040:	8afb      	ldrh	r3, [r7, #22]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	441a      	add	r2, r3
 8009046:	8afb      	ldrh	r3, [r7, #22]
 8009048:	7811      	ldrb	r1, [r2, #0]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	4413      	add	r3, r2
 800904e:	460a      	mov	r2, r1
 8009050:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8009052:	8afb      	ldrh	r3, [r7, #22]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1f0      	bne.n	800903a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	371c      	adds	r7, #28
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b086      	sub	sp, #24
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	4613      	mov	r3, r2
 8009072:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800907a:	2303      	movs	r3, #3
 800907c:	e01f      	b.n	80090be <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	79fa      	ldrb	r2, [r7, #7]
 80090b0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f005 fd78 	bl	800eba8 <USBD_LL_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	75fb      	strb	r3, [r7, #23]

  return ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3718      	adds	r7, #24
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d101      	bne.n	80090de <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090da:	2303      	movs	r3, #3
 80090dc:	e025      	b.n	800912a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	32ae      	adds	r2, #174	@ 0xae
 80090f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00f      	beq.n	800911a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	32ae      	adds	r2, #174	@ 0xae
 8009104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910a:	f107 020e 	add.w	r2, r7, #14
 800910e:	4610      	mov	r0, r2
 8009110:	4798      	blx	r3
 8009112:	4602      	mov	r2, r0
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f005 fd80 	bl	800ec40 <USBD_LL_Start>
 8009140:	4603      	mov	r3, r0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009152:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	460b      	mov	r3, r1
 800916a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800916c:	2300      	movs	r3, #0
 800916e:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d009      	beq.n	800918e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	78fa      	ldrb	r2, [r7, #3]
 8009184:	4611      	mov	r1, r2
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
 800918a:	4603      	mov	r3, r0
 800918c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800918e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091a4:	2300      	movs	r3, #0
 80091a6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	4611      	mov	r1, r2
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	4798      	blx	r3
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80091be:	2303      	movs	r3, #3
 80091c0:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f001 f921 	bl	800a426 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80091f2:	461a      	mov	r2, r3
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009200:	f003 031f 	and.w	r3, r3, #31
 8009204:	2b02      	cmp	r3, #2
 8009206:	d01a      	beq.n	800923e <USBD_LL_SetupStage+0x72>
 8009208:	2b02      	cmp	r3, #2
 800920a:	d822      	bhi.n	8009252 <USBD_LL_SetupStage+0x86>
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <USBD_LL_SetupStage+0x4a>
 8009210:	2b01      	cmp	r3, #1
 8009212:	d00a      	beq.n	800922a <USBD_LL_SetupStage+0x5e>
 8009214:	e01d      	b.n	8009252 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fb76 	bl	8009910 <USBD_StdDevReq>
 8009224:	4603      	mov	r3, r0
 8009226:	73fb      	strb	r3, [r7, #15]
      break;
 8009228:	e020      	b.n	800926c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fbde 	bl	80099f4 <USBD_StdItfReq>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]
      break;
 800923c:	e016      	b.n	800926c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009244:	4619      	mov	r1, r3
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fc40 	bl	8009acc <USBD_StdEPReq>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
      break;
 8009250:	e00c      	b.n	800926c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009258:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800925c:	b2db      	uxtb	r3, r3
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f005 fd6c 	bl	800ed3e <USBD_LL_StallEP>
 8009266:	4603      	mov	r3, r0
 8009268:	73fb      	strb	r3, [r7, #15]
      break;
 800926a:	bf00      	nop
  }

  return ret;
 800926c:	7bfb      	ldrb	r3, [r7, #15]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b086      	sub	sp, #24
 800927a:	af00      	add	r7, sp, #0
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	460b      	mov	r3, r1
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009288:	7afb      	ldrb	r3, [r7, #11]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d177      	bne.n	800937e <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009294:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800929c:	2b03      	cmp	r3, #3
 800929e:	f040 80a1 	bne.w	80093e4 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	8992      	ldrh	r2, [r2, #12]
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d91c      	bls.n	80092e8 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	8992      	ldrh	r2, [r2, #12]
 80092b6:	1a9a      	subs	r2, r3, r2
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	8992      	ldrh	r2, [r2, #12]
 80092c4:	441a      	add	r2, r3
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6919      	ldr	r1, [r3, #16]
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	899b      	ldrh	r3, [r3, #12]
 80092d2:	461a      	mov	r2, r3
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	4293      	cmp	r3, r2
 80092da:	bf38      	it	cc
 80092dc:	4613      	movcc	r3, r2
 80092de:	461a      	mov	r2, r3
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f001 f986 	bl	800a5f2 <USBD_CtlContinueRx>
 80092e6:	e07d      	b.n	80093e4 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092ee:	f003 031f 	and.w	r3, r3, #31
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d014      	beq.n	8009320 <USBD_LL_DataOutStage+0xaa>
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d81d      	bhi.n	8009336 <USBD_LL_DataOutStage+0xc0>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d002      	beq.n	8009304 <USBD_LL_DataOutStage+0x8e>
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d003      	beq.n	800930a <USBD_LL_DataOutStage+0x94>
 8009302:	e018      	b.n	8009336 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009304:	2300      	movs	r3, #0
 8009306:	75bb      	strb	r3, [r7, #22]
            break;
 8009308:	e018      	b.n	800933c <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009310:	b2db      	uxtb	r3, r3
 8009312:	4619      	mov	r1, r3
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fa6e 	bl	80097f6 <USBD_CoreFindIF>
 800931a:	4603      	mov	r3, r0
 800931c:	75bb      	strb	r3, [r7, #22]
            break;
 800931e:	e00d      	b.n	800933c <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009326:	b2db      	uxtb	r3, r3
 8009328:	4619      	mov	r1, r3
 800932a:	68f8      	ldr	r0, [r7, #12]
 800932c:	f000 fa70 	bl	8009810 <USBD_CoreFindEP>
 8009330:	4603      	mov	r3, r0
 8009332:	75bb      	strb	r3, [r7, #22]
            break;
 8009334:	e002      	b.n	800933c <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009336:	2300      	movs	r3, #0
 8009338:	75bb      	strb	r3, [r7, #22]
            break;
 800933a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800933c:	7dbb      	ldrb	r3, [r7, #22]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d119      	bne.n	8009376 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b03      	cmp	r3, #3
 800934c:	d113      	bne.n	8009376 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800934e:	7dba      	ldrb	r2, [r7, #22]
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	32ae      	adds	r2, #174	@ 0xae
 8009354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00b      	beq.n	8009376 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800935e:	7dba      	ldrb	r2, [r7, #22]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009366:	7dba      	ldrb	r2, [r7, #22]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	32ae      	adds	r2, #174	@ 0xae
 800936c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	68f8      	ldr	r0, [r7, #12]
 8009374:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f001 f94c 	bl	800a614 <USBD_CtlSendStatus>
 800937c:	e032      	b.n	80093e4 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800937e:	7afb      	ldrb	r3, [r7, #11]
 8009380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009384:	b2db      	uxtb	r3, r3
 8009386:	4619      	mov	r1, r3
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	f000 fa41 	bl	8009810 <USBD_CoreFindEP>
 800938e:	4603      	mov	r3, r0
 8009390:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009392:	7dbb      	ldrb	r3, [r7, #22]
 8009394:	2bff      	cmp	r3, #255	@ 0xff
 8009396:	d025      	beq.n	80093e4 <USBD_LL_DataOutStage+0x16e>
 8009398:	7dbb      	ldrb	r3, [r7, #22]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d122      	bne.n	80093e4 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d117      	bne.n	80093da <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093aa:	7dba      	ldrb	r2, [r7, #22]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	32ae      	adds	r2, #174	@ 0xae
 80093b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d00f      	beq.n	80093da <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80093ba:	7dba      	ldrb	r2, [r7, #22]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093c2:	7dba      	ldrb	r2, [r7, #22]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	32ae      	adds	r2, #174	@ 0xae
 80093c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	7afa      	ldrb	r2, [r7, #11]
 80093d0:	4611      	mov	r1, r2
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	e000      	b.n	80093e6 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b086      	sub	sp, #24
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	60f8      	str	r0, [r7, #12]
 80093f6:	460b      	mov	r3, r1
 80093f8:	607a      	str	r2, [r7, #4]
 80093fa:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d178      	bne.n	80094f4 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	3314      	adds	r3, #20
 8009406:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800940e:	2b02      	cmp	r3, #2
 8009410:	d163      	bne.n	80094da <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	8992      	ldrh	r2, [r2, #12]
 800941a:	4293      	cmp	r3, r2
 800941c:	d91c      	bls.n	8009458 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	8992      	ldrh	r2, [r2, #12]
 8009426:	1a9a      	subs	r2, r3, r2
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	8992      	ldrh	r2, [r2, #12]
 8009434:	441a      	add	r2, r3
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	6919      	ldr	r1, [r3, #16]
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	461a      	mov	r2, r3
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f001 f8c3 	bl	800a5d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800944a:	2300      	movs	r3, #0
 800944c:	2200      	movs	r2, #0
 800944e:	2100      	movs	r1, #0
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f005 fd1e 	bl	800ee92 <USBD_LL_PrepareReceive>
 8009456:	e040      	b.n	80094da <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	899b      	ldrh	r3, [r3, #12]
 800945c:	461a      	mov	r2, r3
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d11c      	bne.n	80094a0 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800946e:	4293      	cmp	r3, r2
 8009470:	d316      	bcc.n	80094a0 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800947c:	429a      	cmp	r2, r3
 800947e:	d20f      	bcs.n	80094a0 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009480:	2200      	movs	r2, #0
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f001 f8a3 	bl	800a5d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009492:	2300      	movs	r3, #0
 8009494:	2200      	movs	r2, #0
 8009496:	2100      	movs	r1, #0
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f005 fcfa 	bl	800ee92 <USBD_LL_PrepareReceive>
 800949e:	e01c      	b.n	80094da <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b03      	cmp	r3, #3
 80094aa:	d10f      	bne.n	80094cc <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d009      	beq.n	80094cc <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094cc:	2180      	movs	r1, #128	@ 0x80
 80094ce:	68f8      	ldr	r0, [r7, #12]
 80094d0:	f005 fc35 	bl	800ed3e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f001 f8b0 	bl	800a63a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d03a      	beq.n	800955a <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7ff fe30 	bl	800914a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80094f2:	e032      	b.n	800955a <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	4619      	mov	r1, r3
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f000 f986 	bl	8009810 <USBD_CoreFindEP>
 8009504:	4603      	mov	r3, r0
 8009506:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	2bff      	cmp	r3, #255	@ 0xff
 800950c:	d025      	beq.n	800955a <USBD_LL_DataInStage+0x16c>
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d122      	bne.n	800955a <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b03      	cmp	r3, #3
 800951e:	d11c      	bne.n	800955a <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009520:	7dfa      	ldrb	r2, [r7, #23]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	32ae      	adds	r2, #174	@ 0xae
 8009526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d014      	beq.n	800955a <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8009530:	7dfa      	ldrb	r2, [r7, #23]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009538:	7dfa      	ldrb	r2, [r7, #23]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	32ae      	adds	r2, #174	@ 0xae
 800953e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	7afa      	ldrb	r2, [r7, #11]
 8009546:	4611      	mov	r1, r2
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	4798      	blx	r3
 800954c:	4603      	mov	r3, r0
 800954e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009550:	7dbb      	ldrb	r3, [r7, #22]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8009556:	7dbb      	ldrb	r3, [r7, #22]
 8009558:	e000      	b.n	800955c <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800959c:	2b00      	cmp	r3, #0
 800959e:	d014      	beq.n	80095ca <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00e      	beq.n	80095ca <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6852      	ldr	r2, [r2, #4]
 80095b8:	b2d2      	uxtb	r2, r2
 80095ba:	4611      	mov	r1, r2
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	4798      	blx	r3
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095c6:	2303      	movs	r3, #3
 80095c8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095ca:	2340      	movs	r3, #64	@ 0x40
 80095cc:	2200      	movs	r2, #0
 80095ce:	2100      	movs	r1, #0
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f005 fb50 	bl	800ec76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2201      	movs	r2, #1
 80095da:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2240      	movs	r2, #64	@ 0x40
 80095e2:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095e6:	2340      	movs	r3, #64	@ 0x40
 80095e8:	2200      	movs	r2, #0
 80095ea:	2180      	movs	r1, #128	@ 0x80
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f005 fb42 	bl	800ec76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2240      	movs	r2, #64	@ 0x40
 80095fe:	841a      	strh	r2, [r3, #32]

  return ret;
 8009600:	7bfb      	ldrb	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	460b      	mov	r3, r1
 8009614:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	78fa      	ldrb	r2, [r7, #3]
 800961a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b04      	cmp	r3, #4
 800963c:	d006      	beq.n	800964c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009644:	b2da      	uxtb	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2204      	movs	r2, #4
 8009650:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b04      	cmp	r3, #4
 8009674:	d106      	bne.n	8009684 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800967c:	b2da      	uxtb	r2, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b082      	sub	sp, #8
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d110      	bne.n	80096c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	32ae      	adds	r2, #174	@ 0xae
 80096e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e01c      	b.n	800972e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	d115      	bne.n	800972c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	32ae      	adds	r2, #174	@ 0xae
 800970a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	32ae      	adds	r2, #174	@ 0xae
 800971e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	4611      	mov	r1, r2
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	32ae      	adds	r2, #174	@ 0xae
 800974c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d101      	bne.n	8009758 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009754:	2303      	movs	r3, #3
 8009756:	e01c      	b.n	8009792 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b03      	cmp	r3, #3
 8009762:	d115      	bne.n	8009790 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	32ae      	adds	r2, #174	@ 0xae
 800976e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	32ae      	adds	r2, #174	@ 0xae
 8009782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009788:	78fa      	ldrb	r2, [r7, #3]
 800978a:	4611      	mov	r1, r2
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00e      	beq.n	80097ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6852      	ldr	r2, [r2, #4]
 80097da:	b2d2      	uxtb	r2, r2
 80097dc:	4611      	mov	r1, r2
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	4798      	blx	r3
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80097e8:	2303      	movs	r3, #3
 80097ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b083      	sub	sp, #12
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009802:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009804:	4618      	mov	r0, r3
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800981c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800981e:	4618      	mov	r0, r3
 8009820:	370c      	adds	r7, #12
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b086      	sub	sp, #24
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	885b      	ldrh	r3, [r3, #2]
 8009846:	b29b      	uxth	r3, r3
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	7812      	ldrb	r2, [r2, #0]
 800984c:	4293      	cmp	r3, r2
 800984e:	d91f      	bls.n	8009890 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009856:	e013      	b.n	8009880 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009858:	f107 030a 	add.w	r3, r7, #10
 800985c:	4619      	mov	r1, r3
 800985e:	6978      	ldr	r0, [r7, #20]
 8009860:	f000 f81b 	bl	800989a <USBD_GetNextDesc>
 8009864:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	785b      	ldrb	r3, [r3, #1]
 800986a:	2b05      	cmp	r3, #5
 800986c:	d108      	bne.n	8009880 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	789b      	ldrb	r3, [r3, #2]
 8009876:	78fa      	ldrb	r2, [r7, #3]
 8009878:	429a      	cmp	r2, r3
 800987a:	d008      	beq.n	800988e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	885b      	ldrh	r3, [r3, #2]
 8009884:	b29a      	uxth	r2, r3
 8009886:	897b      	ldrh	r3, [r7, #10]
 8009888:	429a      	cmp	r2, r3
 800988a:	d8e5      	bhi.n	8009858 <USBD_GetEpDesc+0x2e>
 800988c:	e000      	b.n	8009890 <USBD_GetEpDesc+0x66>
          break;
 800988e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009890:	693b      	ldr	r3, [r7, #16]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800989a:	b480      	push	{r7}
 800989c:	b085      	sub	sp, #20
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	7812      	ldrb	r2, [r2, #0]
 80098b0:	4413      	add	r3, r2
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	461a      	mov	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4413      	add	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098c4:	68fb      	ldr	r3, [r7, #12]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b087      	sub	sp, #28
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	3301      	adds	r3, #1
 80098e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80098f0:	8a3b      	ldrh	r3, [r7, #16]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	b21a      	sxth	r2, r3
 80098f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009900:	89fb      	ldrh	r3, [r7, #14]
}
 8009902:	4618      	mov	r0, r3
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
	...

08009910 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009926:	2b40      	cmp	r3, #64	@ 0x40
 8009928:	d005      	beq.n	8009936 <USBD_StdDevReq+0x26>
 800992a:	2b40      	cmp	r3, #64	@ 0x40
 800992c:	d857      	bhi.n	80099de <USBD_StdDevReq+0xce>
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00f      	beq.n	8009952 <USBD_StdDevReq+0x42>
 8009932:	2b20      	cmp	r3, #32
 8009934:	d153      	bne.n	80099de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	32ae      	adds	r2, #174	@ 0xae
 8009940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
 800994c:	4603      	mov	r3, r0
 800994e:	73fb      	strb	r3, [r7, #15]
      break;
 8009950:	e04a      	b.n	80099e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b09      	cmp	r3, #9
 8009958:	d83b      	bhi.n	80099d2 <USBD_StdDevReq+0xc2>
 800995a:	a201      	add	r2, pc, #4	@ (adr r2, 8009960 <USBD_StdDevReq+0x50>)
 800995c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009960:	080099b5 	.word	0x080099b5
 8009964:	080099c9 	.word	0x080099c9
 8009968:	080099d3 	.word	0x080099d3
 800996c:	080099bf 	.word	0x080099bf
 8009970:	080099d3 	.word	0x080099d3
 8009974:	08009993 	.word	0x08009993
 8009978:	08009989 	.word	0x08009989
 800997c:	080099d3 	.word	0x080099d3
 8009980:	080099ab 	.word	0x080099ab
 8009984:	0800999d 	.word	0x0800999d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 fa3e 	bl	8009e0c <USBD_GetDescriptor>
          break;
 8009990:	e024      	b.n	80099dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fba3 	bl	800a0e0 <USBD_SetAddress>
          break;
 800999a:	e01f      	b.n	80099dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800999c:	6839      	ldr	r1, [r7, #0]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 fbe2 	bl	800a168 <USBD_SetConfig>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]
          break;
 80099a8:	e018      	b.n	80099dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099aa:	6839      	ldr	r1, [r7, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 fc85 	bl	800a2bc <USBD_GetConfig>
          break;
 80099b2:	e013      	b.n	80099dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fcb6 	bl	800a328 <USBD_GetStatus>
          break;
 80099bc:	e00e      	b.n	80099dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fce5 	bl	800a390 <USBD_SetFeature>
          break;
 80099c6:	e009      	b.n	80099dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099c8:	6839      	ldr	r1, [r7, #0]
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f000 fd09 	bl	800a3e2 <USBD_ClrFeature>
          break;
 80099d0:	e004      	b.n	80099dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fd60 	bl	800a49a <USBD_CtlError>
          break;
 80099da:	bf00      	nop
      }
      break;
 80099dc:	e004      	b.n	80099e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fd5a 	bl	800a49a <USBD_CtlError>
      break;
 80099e6:	bf00      	nop
  }

  return ret;
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop

080099f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a0a:	2b40      	cmp	r3, #64	@ 0x40
 8009a0c:	d005      	beq.n	8009a1a <USBD_StdItfReq+0x26>
 8009a0e:	2b40      	cmp	r3, #64	@ 0x40
 8009a10:	d852      	bhi.n	8009ab8 <USBD_StdItfReq+0xc4>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <USBD_StdItfReq+0x26>
 8009a16:	2b20      	cmp	r3, #32
 8009a18:	d14e      	bne.n	8009ab8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	3b01      	subs	r3, #1
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d840      	bhi.n	8009aaa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	889b      	ldrh	r3, [r3, #4]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d836      	bhi.n	8009aa0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	889b      	ldrh	r3, [r3, #4]
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff fedb 	bl	80097f6 <USBD_CoreFindIF>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2bff      	cmp	r3, #255	@ 0xff
 8009a48:	d01d      	beq.n	8009a86 <USBD_StdItfReq+0x92>
 8009a4a:	7bbb      	ldrb	r3, [r7, #14]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d11a      	bne.n	8009a86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a50:	7bba      	ldrb	r2, [r7, #14]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	32ae      	adds	r2, #174	@ 0xae
 8009a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00f      	beq.n	8009a80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a60:	7bba      	ldrb	r2, [r7, #14]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a68:	7bba      	ldrb	r2, [r7, #14]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	32ae      	adds	r2, #174	@ 0xae
 8009a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	4798      	blx	r3
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a7e:	e004      	b.n	8009a8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a80:	2303      	movs	r3, #3
 8009a82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a84:	e001      	b.n	8009a8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009a86:	2303      	movs	r3, #3
 8009a88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	88db      	ldrh	r3, [r3, #6]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d110      	bne.n	8009ab4 <USBD_StdItfReq+0xc0>
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d10d      	bne.n	8009ab4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fdbb 	bl	800a614 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a9e:	e009      	b.n	8009ab4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fcf9 	bl	800a49a <USBD_CtlError>
          break;
 8009aa8:	e004      	b.n	8009ab4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009aaa:	6839      	ldr	r1, [r7, #0]
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fcf4 	bl	800a49a <USBD_CtlError>
          break;
 8009ab2:	e000      	b.n	8009ab6 <USBD_StdItfReq+0xc2>
          break;
 8009ab4:	bf00      	nop
      }
      break;
 8009ab6:	e004      	b.n	8009ac2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ab8:	6839      	ldr	r1, [r7, #0]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fced 	bl	800a49a <USBD_CtlError>
      break;
 8009ac0:	bf00      	nop
  }

  return ret;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	889b      	ldrh	r3, [r3, #4]
 8009ade:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ae8:	2b40      	cmp	r3, #64	@ 0x40
 8009aea:	d007      	beq.n	8009afc <USBD_StdEPReq+0x30>
 8009aec:	2b40      	cmp	r3, #64	@ 0x40
 8009aee:	f200 8181 	bhi.w	8009df4 <USBD_StdEPReq+0x328>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d02a      	beq.n	8009b4c <USBD_StdEPReq+0x80>
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	f040 817c 	bne.w	8009df4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff fe85 	bl	8009810 <USBD_CoreFindEP>
 8009b06:	4603      	mov	r3, r0
 8009b08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b0a:	7b7b      	ldrb	r3, [r7, #13]
 8009b0c:	2bff      	cmp	r3, #255	@ 0xff
 8009b0e:	f000 8176 	beq.w	8009dfe <USBD_StdEPReq+0x332>
 8009b12:	7b7b      	ldrb	r3, [r7, #13]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f040 8172 	bne.w	8009dfe <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009b1a:	7b7a      	ldrb	r2, [r7, #13]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b22:	7b7a      	ldrb	r2, [r7, #13]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	32ae      	adds	r2, #174	@ 0xae
 8009b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8165 	beq.w	8009dfe <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b34:	7b7a      	ldrb	r2, [r7, #13]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	32ae      	adds	r2, #174	@ 0xae
 8009b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
 8009b46:	4603      	mov	r3, r0
 8009b48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b4a:	e158      	b.n	8009dfe <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	785b      	ldrb	r3, [r3, #1]
 8009b50:	2b03      	cmp	r3, #3
 8009b52:	d008      	beq.n	8009b66 <USBD_StdEPReq+0x9a>
 8009b54:	2b03      	cmp	r3, #3
 8009b56:	f300 8147 	bgt.w	8009de8 <USBD_StdEPReq+0x31c>
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 809b 	beq.w	8009c96 <USBD_StdEPReq+0x1ca>
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d03c      	beq.n	8009bde <USBD_StdEPReq+0x112>
 8009b64:	e140      	b.n	8009de8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d002      	beq.n	8009b78 <USBD_StdEPReq+0xac>
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d016      	beq.n	8009ba4 <USBD_StdEPReq+0xd8>
 8009b76:	e02c      	b.n	8009bd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b78:	7bbb      	ldrb	r3, [r7, #14]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00d      	beq.n	8009b9a <USBD_StdEPReq+0xce>
 8009b7e:	7bbb      	ldrb	r3, [r7, #14]
 8009b80:	2b80      	cmp	r3, #128	@ 0x80
 8009b82:	d00a      	beq.n	8009b9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b84:	7bbb      	ldrb	r3, [r7, #14]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f005 f8d8 	bl	800ed3e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b8e:	2180      	movs	r1, #128	@ 0x80
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f005 f8d4 	bl	800ed3e <USBD_LL_StallEP>
 8009b96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b98:	e020      	b.n	8009bdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fc7c 	bl	800a49a <USBD_CtlError>
              break;
 8009ba2:	e01b      	b.n	8009bdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	885b      	ldrh	r3, [r3, #2]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10e      	bne.n	8009bca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00b      	beq.n	8009bca <USBD_StdEPReq+0xfe>
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b80      	cmp	r3, #128	@ 0x80
 8009bb6:	d008      	beq.n	8009bca <USBD_StdEPReq+0xfe>
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	88db      	ldrh	r3, [r3, #6]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d104      	bne.n	8009bca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f005 f8ba 	bl	800ed3e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fd22 	bl	800a614 <USBD_CtlSendStatus>

              break;
 8009bd0:	e004      	b.n	8009bdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fc60 	bl	800a49a <USBD_CtlError>
              break;
 8009bda:	bf00      	nop
          }
          break;
 8009bdc:	e109      	b.n	8009df2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d002      	beq.n	8009bf0 <USBD_StdEPReq+0x124>
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	d016      	beq.n	8009c1c <USBD_StdEPReq+0x150>
 8009bee:	e04b      	b.n	8009c88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00d      	beq.n	8009c12 <USBD_StdEPReq+0x146>
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	2b80      	cmp	r3, #128	@ 0x80
 8009bfa:	d00a      	beq.n	8009c12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	4619      	mov	r1, r3
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f005 f89c 	bl	800ed3e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c06:	2180      	movs	r1, #128	@ 0x80
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f005 f898 	bl	800ed3e <USBD_LL_StallEP>
 8009c0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c10:	e040      	b.n	8009c94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fc40 	bl	800a49a <USBD_CtlError>
              break;
 8009c1a:	e03b      	b.n	8009c94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	885b      	ldrh	r3, [r3, #2]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d136      	bne.n	8009c92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d004      	beq.n	8009c38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f005 f8a2 	bl	800ed7c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fceb 	bl	800a614 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f7ff fde4 	bl	8009810 <USBD_CoreFindEP>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c4c:	7b7b      	ldrb	r3, [r7, #13]
 8009c4e:	2bff      	cmp	r3, #255	@ 0xff
 8009c50:	d01f      	beq.n	8009c92 <USBD_StdEPReq+0x1c6>
 8009c52:	7b7b      	ldrb	r3, [r7, #13]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d11c      	bne.n	8009c92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c58:	7b7a      	ldrb	r2, [r7, #13]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c60:	7b7a      	ldrb	r2, [r7, #13]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	32ae      	adds	r2, #174	@ 0xae
 8009c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d010      	beq.n	8009c92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c70:	7b7a      	ldrb	r2, [r7, #13]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	32ae      	adds	r2, #174	@ 0xae
 8009c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	4798      	blx	r3
 8009c82:	4603      	mov	r3, r0
 8009c84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009c86:	e004      	b.n	8009c92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fc05 	bl	800a49a <USBD_CtlError>
              break;
 8009c90:	e000      	b.n	8009c94 <USBD_StdEPReq+0x1c8>
              break;
 8009c92:	bf00      	nop
          }
          break;
 8009c94:	e0ad      	b.n	8009df2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d002      	beq.n	8009ca8 <USBD_StdEPReq+0x1dc>
 8009ca2:	2b03      	cmp	r3, #3
 8009ca4:	d033      	beq.n	8009d0e <USBD_StdEPReq+0x242>
 8009ca6:	e099      	b.n	8009ddc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <USBD_StdEPReq+0x1f2>
 8009cae:	7bbb      	ldrb	r3, [r7, #14]
 8009cb0:	2b80      	cmp	r3, #128	@ 0x80
 8009cb2:	d004      	beq.n	8009cbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fbef 	bl	800a49a <USBD_CtlError>
                break;
 8009cbc:	e093      	b.n	8009de6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da0b      	bge.n	8009cde <USBD_StdEPReq+0x212>
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ccc:	4613      	mov	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	3310      	adds	r3, #16
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	4413      	add	r3, r2
 8009cda:	3304      	adds	r3, #4
 8009cdc:	e00b      	b.n	8009cf6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce4:	4613      	mov	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	330e      	adds	r3, #14
 8009d02:	2202      	movs	r2, #2
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fc44 	bl	800a594 <USBD_CtlSendData>
              break;
 8009d0c:	e06b      	b.n	8009de6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	da11      	bge.n	8009d3a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	f003 020f 	and.w	r2, r3, #15
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	440b      	add	r3, r1
 8009d28:	3323      	adds	r3, #35	@ 0x23
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d117      	bne.n	8009d60 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fbb1 	bl	800a49a <USBD_CtlError>
                  break;
 8009d38:	e055      	b.n	8009de6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d3a:	7bbb      	ldrb	r3, [r7, #14]
 8009d3c:	f003 020f 	and.w	r2, r3, #15
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	4613      	mov	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	4413      	add	r3, r2
 8009d48:	009b      	lsls	r3, r3, #2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d104      	bne.n	8009d60 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fb9e 	bl	800a49a <USBD_CtlError>
                  break;
 8009d5e:	e042      	b.n	8009de6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da0b      	bge.n	8009d80 <USBD_StdEPReq+0x2b4>
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d6e:	4613      	mov	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	3310      	adds	r3, #16
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	4413      	add	r3, r2
 8009d7c:	3304      	adds	r3, #4
 8009d7e:	e00b      	b.n	8009d98 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
 8009d82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d92:	687a      	ldr	r2, [r7, #4]
 8009d94:	4413      	add	r3, r2
 8009d96:	3304      	adds	r3, #4
 8009d98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d002      	beq.n	8009da6 <USBD_StdEPReq+0x2da>
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	2b80      	cmp	r3, #128	@ 0x80
 8009da4:	d103      	bne.n	8009dae <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	2200      	movs	r2, #0
 8009daa:	739a      	strb	r2, [r3, #14]
 8009dac:	e00e      	b.n	8009dcc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	4619      	mov	r1, r3
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f005 f801 	bl	800edba <USBD_LL_IsStallEP>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	739a      	strb	r2, [r3, #14]
 8009dc4:	e002      	b.n	8009dcc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	330e      	adds	r3, #14
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fbdd 	bl	800a594 <USBD_CtlSendData>
              break;
 8009dda:	e004      	b.n	8009de6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009ddc:	6839      	ldr	r1, [r7, #0]
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 fb5b 	bl	800a49a <USBD_CtlError>
              break;
 8009de4:	bf00      	nop
          }
          break;
 8009de6:	e004      	b.n	8009df2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fb55 	bl	800a49a <USBD_CtlError>
          break;
 8009df0:	bf00      	nop
      }
      break;
 8009df2:	e005      	b.n	8009e00 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009df4:	6839      	ldr	r1, [r7, #0]
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fb4f 	bl	800a49a <USBD_CtlError>
      break;
 8009dfc:	e000      	b.n	8009e00 <USBD_StdEPReq+0x334>
      break;
 8009dfe:	bf00      	nop
  }

  return ret;
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
	...

08009e0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	885b      	ldrh	r3, [r3, #2]
 8009e26:	0a1b      	lsrs	r3, r3, #8
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	2b06      	cmp	r3, #6
 8009e2e:	f200 8128 	bhi.w	800a082 <USBD_GetDescriptor+0x276>
 8009e32:	a201      	add	r2, pc, #4	@ (adr r2, 8009e38 <USBD_GetDescriptor+0x2c>)
 8009e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e38:	08009e55 	.word	0x08009e55
 8009e3c:	08009e6d 	.word	0x08009e6d
 8009e40:	08009ead 	.word	0x08009ead
 8009e44:	0800a083 	.word	0x0800a083
 8009e48:	0800a083 	.word	0x0800a083
 8009e4c:	0800a023 	.word	0x0800a023
 8009e50:	0800a04f 	.word	0x0800a04f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	7c12      	ldrb	r2, [r2, #16]
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	60f8      	str	r0, [r7, #12]
      break;
 8009e6a:	e112      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	7c1b      	ldrb	r3, [r3, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d10d      	bne.n	8009e90 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7c:	f107 0208 	add.w	r2, r7, #8
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
 8009e84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e8e:	e100      	b.n	800a092 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e98:	f107 0208 	add.w	r2, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	701a      	strb	r2, [r3, #0]
      break;
 8009eaa:	e0f2      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	885b      	ldrh	r3, [r3, #2]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b05      	cmp	r3, #5
 8009eb4:	f200 80ac 	bhi.w	800a010 <USBD_GetDescriptor+0x204>
 8009eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec0 <USBD_GetDescriptor+0xb4>)
 8009eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ebe:	bf00      	nop
 8009ec0:	08009ed9 	.word	0x08009ed9
 8009ec4:	08009f0d 	.word	0x08009f0d
 8009ec8:	08009f41 	.word	0x08009f41
 8009ecc:	08009f75 	.word	0x08009f75
 8009ed0:	08009fa9 	.word	0x08009fa9
 8009ed4:	08009fdd 	.word	0x08009fdd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00b      	beq.n	8009efc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	7c12      	ldrb	r2, [r2, #16]
 8009ef0:	f107 0108 	add.w	r1, r7, #8
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4798      	blx	r3
 8009ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009efa:	e091      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 facb 	bl	800a49a <USBD_CtlError>
            err++;
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	3301      	adds	r3, #1
 8009f08:	72fb      	strb	r3, [r7, #11]
          break;
 8009f0a:	e089      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	7c12      	ldrb	r2, [r2, #16]
 8009f24:	f107 0108 	add.w	r1, r7, #8
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4798      	blx	r3
 8009f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2e:	e077      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fab1 	bl	800a49a <USBD_CtlError>
            err++;
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3e:	e06f      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	7c12      	ldrb	r2, [r2, #16]
 8009f58:	f107 0108 	add.w	r1, r7, #8
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4798      	blx	r3
 8009f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f62:	e05d      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa97 	bl	800a49a <USBD_CtlError>
            err++;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	72fb      	strb	r3, [r7, #11]
          break;
 8009f72:	e055      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00b      	beq.n	8009f98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	7c12      	ldrb	r2, [r2, #16]
 8009f8c:	f107 0108 	add.w	r1, r7, #8
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f96:	e043      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa7d 	bl	800a49a <USBD_CtlError>
            err++;
 8009fa0:	7afb      	ldrb	r3, [r7, #11]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa6:	e03b      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7c12      	ldrb	r2, [r2, #16]
 8009fc0:	f107 0108 	add.w	r1, r7, #8
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fca:	e029      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa63 	bl	800a49a <USBD_CtlError>
            err++;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fda:	e021      	b.n	800a020 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffe:	e00f      	b.n	800a020 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa49 	bl	800a49a <USBD_CtlError>
            err++;
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	3301      	adds	r3, #1
 800a00c:	72fb      	strb	r3, [r7, #11]
          break;
 800a00e:	e007      	b.n	800a020 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fa41 	bl	800a49a <USBD_CtlError>
          err++;
 800a018:	7afb      	ldrb	r3, [r7, #11]
 800a01a:	3301      	adds	r3, #1
 800a01c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a01e:	bf00      	nop
      }
      break;
 800a020:	e037      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	7c1b      	ldrb	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d109      	bne.n	800a03e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a032:	f107 0208 	add.w	r2, r7, #8
 800a036:	4610      	mov	r0, r2
 800a038:	4798      	blx	r3
 800a03a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a03c:	e029      	b.n	800a092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fa2a 	bl	800a49a <USBD_CtlError>
        err++;
 800a046:	7afb      	ldrb	r3, [r7, #11]
 800a048:	3301      	adds	r3, #1
 800a04a:	72fb      	strb	r3, [r7, #11]
      break;
 800a04c:	e021      	b.n	800a092 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	7c1b      	ldrb	r3, [r3, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d10d      	bne.n	800a072 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a05c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a05e:	f107 0208 	add.w	r2, r7, #8
 800a062:	4610      	mov	r0, r2
 800a064:	4798      	blx	r3
 800a066:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3301      	adds	r3, #1
 800a06c:	2207      	movs	r2, #7
 800a06e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a070:	e00f      	b.n	800a092 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fa10 	bl	800a49a <USBD_CtlError>
        err++;
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	3301      	adds	r3, #1
 800a07e:	72fb      	strb	r3, [r7, #11]
      break;
 800a080:	e007      	b.n	800a092 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fa08 	bl	800a49a <USBD_CtlError>
      err++;
 800a08a:	7afb      	ldrb	r3, [r7, #11]
 800a08c:	3301      	adds	r3, #1
 800a08e:	72fb      	strb	r3, [r7, #11]
      break;
 800a090:	bf00      	nop
  }

  if (err != 0U)
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d11e      	bne.n	800a0d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	88db      	ldrh	r3, [r3, #6]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d016      	beq.n	800a0ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a0a0:	893b      	ldrh	r3, [r7, #8]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00e      	beq.n	800a0c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	88da      	ldrh	r2, [r3, #6]
 800a0aa:	893b      	ldrh	r3, [r7, #8]
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	bf28      	it	cs
 800a0b0:	4613      	movcs	r3, r2
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0b6:	893b      	ldrh	r3, [r7, #8]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa69 	bl	800a594 <USBD_CtlSendData>
 800a0c2:	e009      	b.n	800a0d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f9e7 	bl	800a49a <USBD_CtlError>
 800a0cc:	e004      	b.n	800a0d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 faa0 	bl	800a614 <USBD_CtlSendStatus>
 800a0d4:	e000      	b.n	800a0d8 <USBD_GetDescriptor+0x2cc>
    return;
 800a0d6:	bf00      	nop
  }
}
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop

0800a0e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	889b      	ldrh	r3, [r3, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d131      	bne.n	800a156 <USBD_SetAddress+0x76>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	88db      	ldrh	r3, [r3, #6]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d12d      	bne.n	800a156 <USBD_SetAddress+0x76>
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	885b      	ldrh	r3, [r3, #2]
 800a0fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800a100:	d829      	bhi.n	800a156 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	885b      	ldrh	r3, [r3, #2]
 800a106:	b2db      	uxtb	r3, r3
 800a108:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a10c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b03      	cmp	r3, #3
 800a118:	d104      	bne.n	800a124 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f9bc 	bl	800a49a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a122:	e01d      	b.n	800a160 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	7bfa      	ldrb	r2, [r7, #15]
 800a128:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f004 fe6e 	bl	800ee12 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa6c 	bl	800a614 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a13c:	7bfb      	ldrb	r3, [r7, #15]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d004      	beq.n	800a14c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2202      	movs	r2, #2
 800a146:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a14a:	e009      	b.n	800a160 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a154:	e004      	b.n	800a160 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f99e 	bl	800a49a <USBD_CtlError>
  }
}
 800a15e:	bf00      	nop
 800a160:	bf00      	nop
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	885b      	ldrh	r3, [r3, #2]
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a17e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a180:	4b4d      	ldr	r3, [pc, #308]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d905      	bls.n	800a194 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f985 	bl	800a49a <USBD_CtlError>
    return USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	e08c      	b.n	800a2ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d002      	beq.n	800a1a6 <USBD_SetConfig+0x3e>
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d029      	beq.n	800a1f8 <USBD_SetConfig+0x90>
 800a1a4:	e075      	b.n	800a292 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1a6:	4b44      	ldr	r3, [pc, #272]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d020      	beq.n	800a1f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1ae:	4b42      	ldr	r3, [pc, #264]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1b8:	4b3f      	ldr	r3, [pc, #252]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7fe ffce 	bl	8009160 <USBD_SetClassConfig>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1c8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d008      	beq.n	800a1e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1ce:	6839      	ldr	r1, [r7, #0]
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f962 	bl	800a49a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2202      	movs	r2, #2
 800a1da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1de:	e065      	b.n	800a2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fa17 	bl	800a614 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2203      	movs	r2, #3
 800a1ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a1ee:	e05d      	b.n	800a2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fa0f 	bl	800a614 <USBD_CtlSendStatus>
      break;
 800a1f6:	e059      	b.n	800a2ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1f8:	4b2f      	ldr	r3, [pc, #188]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d112      	bne.n	800a226 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2202      	movs	r2, #2
 800a204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a208:	4b2b      	ldr	r3, [pc, #172]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	461a      	mov	r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a212:	4b29      	ldr	r3, [pc, #164]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7fe ffbd 	bl	8009198 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f9f8 	bl	800a614 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a224:	e042      	b.n	800a2ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a226:	4b24      	ldr	r3, [pc, #144]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d02a      	beq.n	800a28a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	4619      	mov	r1, r3
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7fe ffab 	bl	8009198 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a242:	4b1d      	ldr	r3, [pc, #116]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a24c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7fe ff84 	bl	8009160 <USBD_SetClassConfig>
 800a258:	4603      	mov	r3, r0
 800a25a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00f      	beq.n	800a282 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f918 	bl	800a49a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7fe ff90 	bl	8009198 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2202      	movs	r2, #2
 800a27c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a280:	e014      	b.n	800a2ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f9c6 	bl	800a614 <USBD_CtlSendStatus>
      break;
 800a288:	e010      	b.n	800a2ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f9c2 	bl	800a614 <USBD_CtlSendStatus>
      break;
 800a290:	e00c      	b.n	800a2ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a292:	6839      	ldr	r1, [r7, #0]
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f900 	bl	800a49a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a29a:	4b07      	ldr	r3, [pc, #28]	@ (800a2b8 <USBD_SetConfig+0x150>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7fe ff79 	bl	8009198 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2aa:	bf00      	nop
  }

  return ret;
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20003a70 	.word	0x20003a70

0800a2bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	88db      	ldrh	r3, [r3, #6]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d004      	beq.n	800a2d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 f8e2 	bl	800a49a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2d6:	e023      	b.n	800a320 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	dc02      	bgt.n	800a2ea <USBD_GetConfig+0x2e>
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dc03      	bgt.n	800a2f0 <USBD_GetConfig+0x34>
 800a2e8:	e015      	b.n	800a316 <USBD_GetConfig+0x5a>
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d00b      	beq.n	800a306 <USBD_GetConfig+0x4a>
 800a2ee:	e012      	b.n	800a316 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f948 	bl	800a594 <USBD_CtlSendData>
        break;
 800a304:	e00c      	b.n	800a320 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3304      	adds	r3, #4
 800a30a:	2201      	movs	r2, #1
 800a30c:	4619      	mov	r1, r3
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f940 	bl	800a594 <USBD_CtlSendData>
        break;
 800a314:	e004      	b.n	800a320 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a316:	6839      	ldr	r1, [r7, #0]
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f8be 	bl	800a49a <USBD_CtlError>
        break;
 800a31e:	bf00      	nop
}
 800a320:	bf00      	nop
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d81e      	bhi.n	800a37e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	88db      	ldrh	r3, [r3, #6]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d004      	beq.n	800a352 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f8a5 	bl	800a49a <USBD_CtlError>
        break;
 800a350:	e01a      	b.n	800a388 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	f043 0202 	orr.w	r2, r3, #2
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	330c      	adds	r3, #12
 800a372:	2202      	movs	r2, #2
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f90c 	bl	800a594 <USBD_CtlSendData>
      break;
 800a37c:	e004      	b.n	800a388 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f88a 	bl	800a49a <USBD_CtlError>
      break;
 800a386:	bf00      	nop
  }
}
 800a388:	bf00      	nop
 800a38a:	3708      	adds	r7, #8
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bd80      	pop	{r7, pc}

0800a390 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	885b      	ldrh	r3, [r3, #2]
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d107      	bne.n	800a3b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f932 	bl	800a614 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3b0:	e013      	b.n	800a3da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	885b      	ldrh	r3, [r3, #2]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d10b      	bne.n	800a3d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	889b      	ldrh	r3, [r3, #4]
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f922 	bl	800a614 <USBD_CtlSendStatus>
}
 800a3d0:	e003      	b.n	800a3da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a3d2:	6839      	ldr	r1, [r7, #0]
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f860 	bl	800a49a <USBD_CtlError>
}
 800a3da:	bf00      	nop
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d80b      	bhi.n	800a412 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d10c      	bne.n	800a41c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f902 	bl	800a614 <USBD_CtlSendStatus>
      }
      break;
 800a410:	e004      	b.n	800a41c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a412:	6839      	ldr	r1, [r7, #0]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f840 	bl	800a49a <USBD_CtlError>
      break;
 800a41a:	e000      	b.n	800a41e <USBD_ClrFeature+0x3c>
      break;
 800a41c:	bf00      	nop
  }
}
 800a41e:	bf00      	nop
 800a420:	3708      	adds	r7, #8
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}

0800a426 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a426:	b580      	push	{r7, lr}
 800a428:	b084      	sub	sp, #16
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	781a      	ldrb	r2, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	3301      	adds	r3, #1
 800a440:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	781a      	ldrb	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff fa3e 	bl	80098d2 <SWAPBYTE>
 800a456:	4603      	mov	r3, r0
 800a458:	461a      	mov	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3301      	adds	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3301      	adds	r3, #1
 800a468:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fa31 	bl	80098d2 <SWAPBYTE>
 800a470:	4603      	mov	r3, r0
 800a472:	461a      	mov	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	3301      	adds	r3, #1
 800a47c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3301      	adds	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff fa24 	bl	80098d2 <SWAPBYTE>
 800a48a:	4603      	mov	r3, r0
 800a48c:	461a      	mov	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	80da      	strh	r2, [r3, #6]
}
 800a492:	bf00      	nop
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4a4:	2180      	movs	r1, #128	@ 0x80
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f004 fc49 	bl	800ed3e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f004 fc45 	bl	800ed3e <USBD_LL_StallEP>
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b086      	sub	sp, #24
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d042      	beq.n	800a558 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a4d6:	6938      	ldr	r0, [r7, #16]
 800a4d8:	f000 f842 	bl	800a560 <USBD_GetLen>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	3301      	adds	r3, #1
 800a4e0:	005b      	lsls	r3, r3, #1
 800a4e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4e6:	d808      	bhi.n	800a4fa <USBD_GetString+0x3e>
 800a4e8:	6938      	ldr	r0, [r7, #16]
 800a4ea:	f000 f839 	bl	800a560 <USBD_GetLen>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	005b      	lsls	r3, r3, #1
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	e001      	b.n	800a4fe <USBD_GetString+0x42>
 800a4fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	4413      	add	r3, r2
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7812      	ldrb	r2, [r2, #0]
 800a50c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a50e:	7dfb      	ldrb	r3, [r7, #23]
 800a510:	3301      	adds	r3, #1
 800a512:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	4413      	add	r3, r2
 800a51a:	2203      	movs	r2, #3
 800a51c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
 800a520:	3301      	adds	r3, #1
 800a522:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a524:	e013      	b.n	800a54e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a526:	7dfb      	ldrb	r3, [r7, #23]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	4413      	add	r3, r2
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	7812      	ldrb	r2, [r2, #0]
 800a530:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	3301      	adds	r3, #1
 800a536:	613b      	str	r3, [r7, #16]
    idx++;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	3301      	adds	r3, #1
 800a53c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	4413      	add	r3, r2
 800a544:	2200      	movs	r2, #0
 800a546:	701a      	strb	r2, [r3, #0]
    idx++;
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	3301      	adds	r3, #1
 800a54c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e7      	bne.n	800a526 <USBD_GetString+0x6a>
 800a556:	e000      	b.n	800a55a <USBD_GetString+0x9e>
    return;
 800a558:	bf00      	nop
  }
}
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}

0800a560 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a568:	2300      	movs	r3, #0
 800a56a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a570:	e005      	b.n	800a57e <USBD_GetLen+0x1e>
  {
    len++;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
 800a574:	3301      	adds	r3, #1
 800a576:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1f5      	bne.n	800a572 <USBD_GetLen+0x12>
  }

  return len;
 800a586:	7bfb      	ldrb	r3, [r7, #15]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b084      	sub	sp, #16
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	2100      	movs	r1, #0
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f004 fc45 	bl	800ee50 <USBD_LL_Transmit>

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f004 fc34 	bl	800ee50 <USBD_LL_Transmit>

  return USBD_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	60f8      	str	r0, [r7, #12]
 800a5fa:	60b9      	str	r1, [r7, #8]
 800a5fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	2100      	movs	r1, #0
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f004 fc44 	bl	800ee92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2204      	movs	r2, #4
 800a620:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a624:	2300      	movs	r3, #0
 800a626:	2200      	movs	r2, #0
 800a628:	2100      	movs	r1, #0
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f004 fc10 	bl	800ee50 <USBD_LL_Transmit>

  return USBD_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2205      	movs	r2, #5
 800a646:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a64a:	2300      	movs	r3, #0
 800a64c:	2200      	movs	r2, #0
 800a64e:	2100      	movs	r1, #0
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f004 fc1e 	bl	800ee92 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	3301      	adds	r3, #1
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a670:	89fb      	ldrh	r3, [r7, #14]
 800a672:	021b      	lsls	r3, r3, #8
 800a674:	b21a      	sxth	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	781b      	ldrb	r3, [r3, #0]
 800a67a:	b21b      	sxth	r3, r3
 800a67c:	4313      	orrs	r3, r2
 800a67e:	b21b      	sxth	r3, r3
 800a680:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a682:	89fb      	ldrh	r3, [r7, #14]
}
 800a684:	4618      	mov	r0, r3
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3303      	adds	r3, #3
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	021b      	lsls	r3, r3, #8
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	3202      	adds	r2, #2
 800a6a8:	7812      	ldrb	r2, [r2, #0]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	3201      	adds	r2, #1
 800a6b6:	7812      	ldrb	r2, [r2, #0]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	021b      	lsls	r3, r3, #8
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	7812      	ldrb	r2, [r2, #0]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
	return rv;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	1c5a      	adds	r2, r3, #1
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	887a      	ldrh	r2, [r7, #2]
 800a6ea:	b2d2      	uxtb	r2, r2
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	887b      	ldrh	r3, [r7, #2]
 800a6f0:	0a1b      	lsrs	r3, r3, #8
 800a6f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	887a      	ldrh	r2, [r7, #2]
 800a6fc:	b2d2      	uxtb	r2, r2
 800a6fe:	701a      	strb	r2, [r3, #0]
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	1c5a      	adds	r2, r3, #1
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	683a      	ldr	r2, [r7, #0]
 800a71e:	b2d2      	uxtb	r2, r2
 800a720:	701a      	strb	r2, [r3, #0]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	0a1b      	lsrs	r3, r3, #8
 800a726:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	b2d2      	uxtb	r2, r2
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	0a1b      	lsrs	r3, r3, #8
 800a738:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	b2d2      	uxtb	r2, r2
 800a744:	701a      	strb	r2, [r3, #0]
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	0a1b      	lsrs	r3, r3, #8
 800a74a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	b2d2      	uxtb	r2, r2
 800a756:	701a      	strb	r2, [r3, #0]
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00d      	beq.n	800a79a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a77e:	693a      	ldr	r2, [r7, #16]
 800a780:	1c53      	adds	r3, r2, #1
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	1c59      	adds	r1, r3, #1
 800a788:	6179      	str	r1, [r7, #20]
 800a78a:	7812      	ldrb	r2, [r2, #0]
 800a78c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3b01      	subs	r3, #1
 800a792:	607b      	str	r3, [r7, #4]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f1      	bne.n	800a77e <mem_cpy+0x1a>
	}
}
 800a79a:	bf00      	nop
 800a79c:	371c      	adds	r7, #28
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a7a6:	b480      	push	{r7}
 800a7a8:	b087      	sub	sp, #28
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	60f8      	str	r0, [r7, #12]
 800a7ae:	60b9      	str	r1, [r7, #8]
 800a7b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	617a      	str	r2, [r7, #20]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	b2d2      	uxtb	r2, r2
 800a7c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	607b      	str	r3, [r7, #4]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1f3      	bne.n	800a7b6 <mem_set+0x10>
}
 800a7ce:	bf00      	nop
 800a7d0:	bf00      	nop
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a7dc:	b480      	push	{r7}
 800a7de:	b089      	sub	sp, #36	@ 0x24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	61fb      	str	r3, [r7, #28]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	61fa      	str	r2, [r7, #28]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	1c5a      	adds	r2, r3, #1
 800a802:	61ba      	str	r2, [r7, #24]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	1acb      	subs	r3, r1, r3
 800a808:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3b01      	subs	r3, #1
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <mem_cmp+0x40>
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0eb      	beq.n	800a7f4 <mem_cmp+0x18>

	return r;
 800a81c:	697b      	ldr	r3, [r7, #20]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3724      	adds	r7, #36	@ 0x24
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr

0800a82a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a82a:	b480      	push	{r7}
 800a82c:	b083      	sub	sp, #12
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a834:	e002      	b.n	800a83c <chk_chr+0x12>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3301      	adds	r3, #1
 800a83a:	607b      	str	r3, [r7, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d005      	beq.n	800a850 <chk_chr+0x26>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	461a      	mov	r2, r3
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d1f2      	bne.n	800a836 <chk_chr+0xc>
	return *str;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	781b      	ldrb	r3, [r3, #0]
}
 800a854:	4618      	mov	r0, r3
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a86a:	2300      	movs	r3, #0
 800a86c:	60bb      	str	r3, [r7, #8]
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	e029      	b.n	800a8c8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a874:	4a27      	ldr	r2, [pc, #156]	@ (800a914 <chk_lock+0xb4>)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	4413      	add	r3, r2
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01d      	beq.n	800a8be <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a882:	4a24      	ldr	r2, [pc, #144]	@ (800a914 <chk_lock+0xb4>)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	011b      	lsls	r3, r3, #4
 800a888:	4413      	add	r3, r2
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	429a      	cmp	r2, r3
 800a892:	d116      	bne.n	800a8c2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a894:	4a1f      	ldr	r2, [pc, #124]	@ (800a914 <chk_lock+0xb4>)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	011b      	lsls	r3, r3, #4
 800a89a:	4413      	add	r3, r2
 800a89c:	3304      	adds	r3, #4
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d10c      	bne.n	800a8c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8a8:	4a1a      	ldr	r2, [pc, #104]	@ (800a914 <chk_lock+0xb4>)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	011b      	lsls	r3, r3, #4
 800a8ae:	4413      	add	r3, r2
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d102      	bne.n	800a8c2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8bc:	e007      	b.n	800a8ce <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d9d2      	bls.n	800a874 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	d109      	bne.n	800a8e8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d102      	bne.n	800a8e0 <chk_lock+0x80>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d101      	bne.n	800a8e4 <chk_lock+0x84>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e010      	b.n	800a906 <chk_lock+0xa6>
 800a8e4:	2312      	movs	r3, #18
 800a8e6:	e00e      	b.n	800a906 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d108      	bne.n	800a900 <chk_lock+0xa0>
 800a8ee:	4a09      	ldr	r2, [pc, #36]	@ (800a914 <chk_lock+0xb4>)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	011b      	lsls	r3, r3, #4
 800a8f4:	4413      	add	r3, r2
 800a8f6:	330c      	adds	r3, #12
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8fe:	d101      	bne.n	800a904 <chk_lock+0xa4>
 800a900:	2310      	movs	r3, #16
 800a902:	e000      	b.n	800a906 <chk_lock+0xa6>
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20003a7c 	.word	0x20003a7c

0800a918 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a91e:	2300      	movs	r3, #0
 800a920:	607b      	str	r3, [r7, #4]
 800a922:	e002      	b.n	800a92a <enq_lock+0x12>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3301      	adds	r3, #1
 800a928:	607b      	str	r3, [r7, #4]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d806      	bhi.n	800a93e <enq_lock+0x26>
 800a930:	4a09      	ldr	r2, [pc, #36]	@ (800a958 <enq_lock+0x40>)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	4413      	add	r3, r2
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1f2      	bne.n	800a924 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b02      	cmp	r3, #2
 800a942:	bf14      	ite	ne
 800a944:	2301      	movne	r3, #1
 800a946:	2300      	moveq	r3, #0
 800a948:	b2db      	uxtb	r3, r3
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	370c      	adds	r7, #12
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	20003a7c 	.word	0x20003a7c

0800a95c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a966:	2300      	movs	r3, #0
 800a968:	60fb      	str	r3, [r7, #12]
 800a96a:	e01f      	b.n	800a9ac <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a96c:	4a41      	ldr	r2, [pc, #260]	@ (800aa74 <inc_lock+0x118>)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	011b      	lsls	r3, r3, #4
 800a972:	4413      	add	r3, r2
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d113      	bne.n	800a9a6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a97e:	4a3d      	ldr	r2, [pc, #244]	@ (800aa74 <inc_lock+0x118>)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	4413      	add	r3, r2
 800a986:	3304      	adds	r3, #4
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a98e:	429a      	cmp	r2, r3
 800a990:	d109      	bne.n	800a9a6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a992:	4a38      	ldr	r2, [pc, #224]	@ (800aa74 <inc_lock+0x118>)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	011b      	lsls	r3, r3, #4
 800a998:	4413      	add	r3, r2
 800a99a:	3308      	adds	r3, #8
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d006      	beq.n	800a9b4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d9dc      	bls.n	800a96c <inc_lock+0x10>
 800a9b2:	e000      	b.n	800a9b6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a9b4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d132      	bne.n	800aa22 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	e002      	b.n	800a9c8 <inc_lock+0x6c>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	60fb      	str	r3, [r7, #12]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d806      	bhi.n	800a9dc <inc_lock+0x80>
 800a9ce:	4a29      	ldr	r2, [pc, #164]	@ (800aa74 <inc_lock+0x118>)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	011b      	lsls	r3, r3, #4
 800a9d4:	4413      	add	r3, r2
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1f2      	bne.n	800a9c2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d101      	bne.n	800a9e6 <inc_lock+0x8a>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e040      	b.n	800aa68 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	4922      	ldr	r1, [pc, #136]	@ (800aa74 <inc_lock+0x118>)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	440b      	add	r3, r1
 800a9f2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	491e      	ldr	r1, [pc, #120]	@ (800aa74 <inc_lock+0x118>)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	440b      	add	r3, r1
 800aa00:	3304      	adds	r3, #4
 800aa02:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	695a      	ldr	r2, [r3, #20]
 800aa08:	491a      	ldr	r1, [pc, #104]	@ (800aa74 <inc_lock+0x118>)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	011b      	lsls	r3, r3, #4
 800aa0e:	440b      	add	r3, r1
 800aa10:	3308      	adds	r3, #8
 800aa12:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aa14:	4a17      	ldr	r2, [pc, #92]	@ (800aa74 <inc_lock+0x118>)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	011b      	lsls	r3, r3, #4
 800aa1a:	4413      	add	r3, r2
 800aa1c:	330c      	adds	r3, #12
 800aa1e:	2200      	movs	r2, #0
 800aa20:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d009      	beq.n	800aa3c <inc_lock+0xe0>
 800aa28:	4a12      	ldr	r2, [pc, #72]	@ (800aa74 <inc_lock+0x118>)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	011b      	lsls	r3, r3, #4
 800aa2e:	4413      	add	r3, r2
 800aa30:	330c      	adds	r3, #12
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <inc_lock+0xe0>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	e015      	b.n	800aa68 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d108      	bne.n	800aa54 <inc_lock+0xf8>
 800aa42:	4a0c      	ldr	r2, [pc, #48]	@ (800aa74 <inc_lock+0x118>)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	011b      	lsls	r3, r3, #4
 800aa48:	4413      	add	r3, r2
 800aa4a:	330c      	adds	r3, #12
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	b29a      	uxth	r2, r3
 800aa52:	e001      	b.n	800aa58 <inc_lock+0xfc>
 800aa54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa58:	4906      	ldr	r1, [pc, #24]	@ (800aa74 <inc_lock+0x118>)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	440b      	add	r3, r1
 800aa60:	330c      	adds	r3, #12
 800aa62:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	3301      	adds	r3, #1
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr
 800aa74:	20003a7c 	.word	0x20003a7c

0800aa78 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	3b01      	subs	r3, #1
 800aa84:	607b      	str	r3, [r7, #4]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d825      	bhi.n	800aad8 <dec_lock+0x60>
		n = Files[i].ctr;
 800aa8c:	4a17      	ldr	r2, [pc, #92]	@ (800aaec <dec_lock+0x74>)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	011b      	lsls	r3, r3, #4
 800aa92:	4413      	add	r3, r2
 800aa94:	330c      	adds	r3, #12
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aa9a:	89fb      	ldrh	r3, [r7, #14]
 800aa9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaa0:	d101      	bne.n	800aaa6 <dec_lock+0x2e>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aaa6:	89fb      	ldrh	r3, [r7, #14]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <dec_lock+0x3a>
 800aaac:	89fb      	ldrh	r3, [r7, #14]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aab2:	4a0e      	ldr	r2, [pc, #56]	@ (800aaec <dec_lock+0x74>)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	011b      	lsls	r3, r3, #4
 800aab8:	4413      	add	r3, r2
 800aaba:	330c      	adds	r3, #12
 800aabc:	89fa      	ldrh	r2, [r7, #14]
 800aabe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800aac0:	89fb      	ldrh	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d105      	bne.n	800aad2 <dec_lock+0x5a>
 800aac6:	4a09      	ldr	r2, [pc, #36]	@ (800aaec <dec_lock+0x74>)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	4413      	add	r3, r2
 800aace:	2200      	movs	r2, #0
 800aad0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	737b      	strb	r3, [r7, #13]
 800aad6:	e001      	b.n	800aadc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800aad8:	2302      	movs	r3, #2
 800aada:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800aadc:	7b7b      	ldrb	r3, [r7, #13]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	20003a7c 	.word	0x20003a7c

0800aaf0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aaf8:	2300      	movs	r3, #0
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	e010      	b.n	800ab20 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aafe:	4a0d      	ldr	r2, [pc, #52]	@ (800ab34 <clear_lock+0x44>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	011b      	lsls	r3, r3, #4
 800ab04:	4413      	add	r3, r2
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d105      	bne.n	800ab1a <clear_lock+0x2a>
 800ab0e:	4a09      	ldr	r2, [pc, #36]	@ (800ab34 <clear_lock+0x44>)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	4413      	add	r3, r2
 800ab16:	2200      	movs	r2, #0
 800ab18:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3301      	adds	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d9eb      	bls.n	800aafe <clear_lock+0xe>
	}
}
 800ab26:	bf00      	nop
 800ab28:	bf00      	nop
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	20003a7c 	.word	0x20003a7c

0800ab38 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	78db      	ldrb	r3, [r3, #3]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d034      	beq.n	800abb6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab50:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	7858      	ldrb	r0, [r3, #1]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	f7f6 f87e 	bl	8000c60 <disk_write>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d002      	beq.n	800ab70 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	73fb      	strb	r3, [r7, #15]
 800ab6e:	e022      	b.n	800abb6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7a:	697a      	ldr	r2, [r7, #20]
 800ab7c:	1ad2      	subs	r2, r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d217      	bcs.n	800abb6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	789b      	ldrb	r3, [r3, #2]
 800ab8a:	613b      	str	r3, [r7, #16]
 800ab8c:	e010      	b.n	800abb0 <sync_window+0x78>
					wsect += fs->fsize;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	4413      	add	r3, r2
 800ab96:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	7858      	ldrb	r0, [r3, #1]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aba2:	2301      	movs	r3, #1
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	f7f6 f85b 	bl	8000c60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	3b01      	subs	r3, #1
 800abae:	613b      	str	r3, [r7, #16]
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d8eb      	bhi.n	800ab8e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d01b      	beq.n	800ac10 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f7ff ffad 	bl	800ab38 <sync_window>
 800abde:	4603      	mov	r3, r0
 800abe0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d113      	bne.n	800ac10 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7858      	ldrb	r0, [r3, #1]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800abf2:	2301      	movs	r3, #1
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	f7f6 f813 	bl	8000c20 <disk_read>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d004      	beq.n	800ac0a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295
 800ac04:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	683a      	ldr	r2, [r7, #0]
 800ac0e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff ff87 	bl	800ab38 <sync_window>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ac2e:	7bfb      	ldrb	r3, [r7, #15]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d159      	bne.n	800ace8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b03      	cmp	r3, #3
 800ac3a:	d149      	bne.n	800acd0 <sync_fs+0xb4>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	791b      	ldrb	r3, [r3, #4]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d145      	bne.n	800acd0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	899b      	ldrh	r3, [r3, #12]
 800ac4e:	461a      	mov	r2, r3
 800ac50:	2100      	movs	r1, #0
 800ac52:	f7ff fda8 	bl	800a7a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3338      	adds	r3, #56	@ 0x38
 800ac5a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac5e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7ff fd37 	bl	800a6d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	3338      	adds	r3, #56	@ 0x38
 800ac6c:	4921      	ldr	r1, [pc, #132]	@ (800acf4 <sync_fs+0xd8>)
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff fd4c 	bl	800a70c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3338      	adds	r3, #56	@ 0x38
 800ac78:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ac7c:	491e      	ldr	r1, [pc, #120]	@ (800acf8 <sync_fs+0xdc>)
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7ff fd44 	bl	800a70c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3338      	adds	r3, #56	@ 0x38
 800ac88:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	699b      	ldr	r3, [r3, #24]
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f7ff fd3a 	bl	800a70c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3338      	adds	r3, #56	@ 0x38
 800ac9c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	695b      	ldr	r3, [r3, #20]
 800aca4:	4619      	mov	r1, r3
 800aca6:	4610      	mov	r0, r2
 800aca8:	f7ff fd30 	bl	800a70c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7858      	ldrb	r0, [r3, #1]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acc4:	2301      	movs	r3, #1
 800acc6:	f7f5 ffcb 	bl	8000c60 <disk_write>
			fs->fsi_flag = 0;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	785b      	ldrb	r3, [r3, #1]
 800acd4:	2200      	movs	r2, #0
 800acd6:	2100      	movs	r1, #0
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f5 ffe1 	bl	8000ca0 <disk_ioctl>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d001      	beq.n	800ace8 <sync_fs+0xcc>
 800ace4:	2301      	movs	r3, #1
 800ace6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	41615252 	.word	0x41615252
 800acf8:	61417272 	.word	0x61417272

0800acfc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	3b02      	subs	r3, #2
 800ad0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	69db      	ldr	r3, [r3, #28]
 800ad10:	3b02      	subs	r3, #2
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d301      	bcc.n	800ad1c <clust2sect+0x20>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	e008      	b.n	800ad2e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	895b      	ldrh	r3, [r3, #10]
 800ad20:	461a      	mov	r2, r3
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	fb03 f202 	mul.w	r2, r3, r2
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2c:	4413      	add	r3, r2
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b086      	sub	sp, #24
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
 800ad42:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d904      	bls.n	800ad5a <get_fat+0x20>
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d302      	bcc.n	800ad60 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	e0ba      	b.n	800aed6 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ad60:	f04f 33ff 	mov.w	r3, #4294967295
 800ad64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b03      	cmp	r3, #3
 800ad6c:	f000 8082 	beq.w	800ae74 <get_fat+0x13a>
 800ad70:	2b03      	cmp	r3, #3
 800ad72:	f300 80a6 	bgt.w	800aec2 <get_fat+0x188>
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d002      	beq.n	800ad80 <get_fat+0x46>
 800ad7a:	2b02      	cmp	r3, #2
 800ad7c:	d055      	beq.n	800ae2a <get_fat+0xf0>
 800ad7e:	e0a0      	b.n	800aec2 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	60fb      	str	r3, [r7, #12]
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	085b      	lsrs	r3, r3, #1
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	899b      	ldrh	r3, [r3, #12]
 800ad96:	4619      	mov	r1, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad9e:	4413      	add	r3, r2
 800ada0:	4619      	mov	r1, r3
 800ada2:	6938      	ldr	r0, [r7, #16]
 800ada4:	f7ff ff0c 	bl	800abc0 <move_window>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f040 808c 	bne.w	800aec8 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	1c5a      	adds	r2, r3, #1
 800adb4:	60fa      	str	r2, [r7, #12]
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	8992      	ldrh	r2, [r2, #12]
 800adba:	fbb3 f1f2 	udiv	r1, r3, r2
 800adbe:	fb01 f202 	mul.w	r2, r1, r2
 800adc2:	1a9b      	subs	r3, r3, r2
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	4413      	add	r3, r2
 800adc8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800adcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	899b      	ldrh	r3, [r3, #12]
 800add6:	4619      	mov	r1, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	fbb3 f3f1 	udiv	r3, r3, r1
 800adde:	4413      	add	r3, r2
 800ade0:	4619      	mov	r1, r3
 800ade2:	6938      	ldr	r0, [r7, #16]
 800ade4:	f7ff feec 	bl	800abc0 <move_window>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d16e      	bne.n	800aecc <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	899b      	ldrh	r3, [r3, #12]
 800adf2:	461a      	mov	r2, r3
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800adfa:	fb01 f202 	mul.w	r2, r1, r2
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	693a      	ldr	r2, [r7, #16]
 800ae02:	4413      	add	r3, r2
 800ae04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ae08:	021b      	lsls	r3, r3, #8
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <get_fat+0xe6>
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	091b      	lsrs	r3, r3, #4
 800ae1e:	e002      	b.n	800ae26 <get_fat+0xec>
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae26:	617b      	str	r3, [r7, #20]
			break;
 800ae28:	e055      	b.n	800aed6 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	899b      	ldrh	r3, [r3, #12]
 800ae32:	085b      	lsrs	r3, r3, #1
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	4619      	mov	r1, r3
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae3e:	4413      	add	r3, r2
 800ae40:	4619      	mov	r1, r3
 800ae42:	6938      	ldr	r0, [r7, #16]
 800ae44:	f7ff febc 	bl	800abc0 <move_window>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d140      	bne.n	800aed0 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	005b      	lsls	r3, r3, #1
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	8992      	ldrh	r2, [r2, #12]
 800ae5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae60:	fb00 f202 	mul.w	r2, r0, r2
 800ae64:	1a9b      	subs	r3, r3, r2
 800ae66:	440b      	add	r3, r1
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff fbf9 	bl	800a660 <ld_word>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	617b      	str	r3, [r7, #20]
			break;
 800ae72:	e030      	b.n	800aed6 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	899b      	ldrh	r3, [r3, #12]
 800ae7c:	089b      	lsrs	r3, r3, #2
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	4619      	mov	r1, r3
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae88:	4413      	add	r3, r2
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6938      	ldr	r0, [r7, #16]
 800ae8e:	f7ff fe97 	bl	800abc0 <move_window>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d11d      	bne.n	800aed4 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	693a      	ldr	r2, [r7, #16]
 800aea4:	8992      	ldrh	r2, [r2, #12]
 800aea6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeaa:	fb00 f202 	mul.w	r2, r0, r2
 800aeae:	1a9b      	subs	r3, r3, r2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fbec 	bl	800a690 <ld_dword>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800aebe:	617b      	str	r3, [r7, #20]
			break;
 800aec0:	e009      	b.n	800aed6 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800aec2:	2301      	movs	r3, #1
 800aec4:	617b      	str	r3, [r7, #20]
 800aec6:	e006      	b.n	800aed6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aec8:	bf00      	nop
 800aeca:	e004      	b.n	800aed6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aecc:	bf00      	nop
 800aece:	e002      	b.n	800aed6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800aed0:	bf00      	nop
 800aed2:	e000      	b.n	800aed6 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aed4:	bf00      	nop
		}
	}

	return val;
 800aed6:	697b      	ldr	r3, [r7, #20]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b089      	sub	sp, #36	@ 0x24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800aeec:	2302      	movs	r3, #2
 800aeee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	f240 8109 	bls.w	800b10a <put_fat+0x22a>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	69db      	ldr	r3, [r3, #28]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	429a      	cmp	r2, r3
 800af00:	f080 8103 	bcs.w	800b10a <put_fat+0x22a>
		switch (fs->fs_type) {
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b03      	cmp	r3, #3
 800af0a:	f000 80b6 	beq.w	800b07a <put_fat+0x19a>
 800af0e:	2b03      	cmp	r3, #3
 800af10:	f300 80fb 	bgt.w	800b10a <put_fat+0x22a>
 800af14:	2b01      	cmp	r3, #1
 800af16:	d003      	beq.n	800af20 <put_fat+0x40>
 800af18:	2b02      	cmp	r3, #2
 800af1a:	f000 8083 	beq.w	800b024 <put_fat+0x144>
 800af1e:	e0f4      	b.n	800b10a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	61bb      	str	r3, [r7, #24]
 800af24:	69bb      	ldr	r3, [r7, #24]
 800af26:	085b      	lsrs	r3, r3, #1
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	4413      	add	r3, r2
 800af2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	899b      	ldrh	r3, [r3, #12]
 800af36:	4619      	mov	r1, r3
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800af3e:	4413      	add	r3, r2
 800af40:	4619      	mov	r1, r3
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff fe3c 	bl	800abc0 <move_window>
 800af48:	4603      	mov	r3, r0
 800af4a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af4c:	7ffb      	ldrb	r3, [r7, #31]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f040 80d4 	bne.w	800b0fc <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	61ba      	str	r2, [r7, #24]
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	8992      	ldrh	r2, [r2, #12]
 800af64:	fbb3 f0f2 	udiv	r0, r3, r2
 800af68:	fb00 f202 	mul.w	r2, r0, r2
 800af6c:	1a9b      	subs	r3, r3, r2
 800af6e:	440b      	add	r3, r1
 800af70:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00d      	beq.n	800af98 <put_fat+0xb8>
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	b25b      	sxtb	r3, r3
 800af82:	f003 030f 	and.w	r3, r3, #15
 800af86:	b25a      	sxtb	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	011b      	lsls	r3, r3, #4
 800af8e:	b25b      	sxtb	r3, r3
 800af90:	4313      	orrs	r3, r2
 800af92:	b25b      	sxtb	r3, r3
 800af94:	b2db      	uxtb	r3, r3
 800af96:	e001      	b.n	800af9c <put_fat+0xbc>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	697a      	ldr	r2, [r7, #20]
 800af9e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2201      	movs	r2, #1
 800afa4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	899b      	ldrh	r3, [r3, #12]
 800afae:	4619      	mov	r1, r3
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800afb6:	4413      	add	r3, r2
 800afb8:	4619      	mov	r1, r3
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f7ff fe00 	bl	800abc0 <move_window>
 800afc0:	4603      	mov	r3, r0
 800afc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800afc4:	7ffb      	ldrb	r3, [r7, #31]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f040 809a 	bne.w	800b100 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	899b      	ldrh	r3, [r3, #12]
 800afd6:	461a      	mov	r2, r3
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	fbb3 f0f2 	udiv	r0, r3, r2
 800afde:	fb00 f202 	mul.w	r2, r0, r2
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	440b      	add	r3, r1
 800afe6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	f003 0301 	and.w	r3, r3, #1
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <put_fat+0x11a>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	091b      	lsrs	r3, r3, #4
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	e00e      	b.n	800b018 <put_fat+0x138>
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	b25b      	sxtb	r3, r3
 800b000:	f023 030f 	bic.w	r3, r3, #15
 800b004:	b25a      	sxtb	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	0a1b      	lsrs	r3, r3, #8
 800b00a:	b25b      	sxtb	r3, r3
 800b00c:	f003 030f 	and.w	r3, r3, #15
 800b010:	b25b      	sxtb	r3, r3
 800b012:	4313      	orrs	r3, r2
 800b014:	b25b      	sxtb	r3, r3
 800b016:	b2db      	uxtb	r3, r3
 800b018:	697a      	ldr	r2, [r7, #20]
 800b01a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2201      	movs	r2, #1
 800b020:	70da      	strb	r2, [r3, #3]
			break;
 800b022:	e072      	b.n	800b10a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	899b      	ldrh	r3, [r3, #12]
 800b02c:	085b      	lsrs	r3, r3, #1
 800b02e:	b29b      	uxth	r3, r3
 800b030:	4619      	mov	r1, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	fbb3 f3f1 	udiv	r3, r3, r1
 800b038:	4413      	add	r3, r2
 800b03a:	4619      	mov	r1, r3
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff fdbf 	bl	800abc0 <move_window>
 800b042:	4603      	mov	r3, r0
 800b044:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b046:	7ffb      	ldrb	r3, [r7, #31]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d15b      	bne.n	800b104 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	8992      	ldrh	r2, [r2, #12]
 800b05a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b05e:	fb00 f202 	mul.w	r2, r0, r2
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	440b      	add	r3, r1
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	b292      	uxth	r2, r2
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff fb32 	bl	800a6d6 <st_word>
			fs->wflag = 1;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2201      	movs	r2, #1
 800b076:	70da      	strb	r2, [r3, #3]
			break;
 800b078:	e047      	b.n	800b10a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	899b      	ldrh	r3, [r3, #12]
 800b082:	089b      	lsrs	r3, r3, #2
 800b084:	b29b      	uxth	r3, r3
 800b086:	4619      	mov	r1, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b08e:	4413      	add	r3, r2
 800b090:	4619      	mov	r1, r3
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f7ff fd94 	bl	800abc0 <move_window>
 800b098:	4603      	mov	r3, r0
 800b09a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b09c:	7ffb      	ldrb	r3, [r7, #31]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d132      	bne.n	800b108 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	8992      	ldrh	r2, [r2, #12]
 800b0b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0ba:	fb00 f202 	mul.w	r2, r0, r2
 800b0be:	1a9b      	subs	r3, r3, r2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7ff fae4 	bl	800a690 <ld_dword>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b0ce:	4323      	orrs	r3, r4
 800b0d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	68fa      	ldr	r2, [r7, #12]
 800b0de:	8992      	ldrh	r2, [r2, #12]
 800b0e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0e4:	fb00 f202 	mul.w	r2, r0, r2
 800b0e8:	1a9b      	subs	r3, r3, r2
 800b0ea:	440b      	add	r3, r1
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff fb0c 	bl	800a70c <st_dword>
			fs->wflag = 1;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	70da      	strb	r2, [r3, #3]
			break;
 800b0fa:	e006      	b.n	800b10a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b0fc:	bf00      	nop
 800b0fe:	e004      	b.n	800b10a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b100:	bf00      	nop
 800b102:	e002      	b.n	800b10a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b104:	bf00      	nop
 800b106:	e000      	b.n	800b10a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b108:	bf00      	nop
		}
	}
	return res;
 800b10a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3724      	adds	r7, #36	@ 0x24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd90      	pop	{r4, r7, pc}

0800b114 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d904      	bls.n	800b13a <remove_chain+0x26>
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	69db      	ldr	r3, [r3, #28]
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	429a      	cmp	r2, r3
 800b138:	d301      	bcc.n	800b13e <remove_chain+0x2a>
 800b13a:	2302      	movs	r3, #2
 800b13c:	e04b      	b.n	800b1d6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00c      	beq.n	800b15e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b144:	f04f 32ff 	mov.w	r2, #4294967295
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	69b8      	ldr	r0, [r7, #24]
 800b14c:	f7ff fec8 	bl	800aee0 <put_fat>
 800b150:	4603      	mov	r3, r0
 800b152:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b154:	7ffb      	ldrb	r3, [r7, #31]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <remove_chain+0x4a>
 800b15a:	7ffb      	ldrb	r3, [r7, #31]
 800b15c:	e03b      	b.n	800b1d6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7ff fdea 	bl	800ad3a <get_fat>
 800b166:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d031      	beq.n	800b1d2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d101      	bne.n	800b178 <remove_chain+0x64>
 800b174:	2302      	movs	r3, #2
 800b176:	e02e      	b.n	800b1d6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17e:	d101      	bne.n	800b184 <remove_chain+0x70>
 800b180:	2301      	movs	r3, #1
 800b182:	e028      	b.n	800b1d6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b184:	2200      	movs	r2, #0
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	69b8      	ldr	r0, [r7, #24]
 800b18a:	f7ff fea9 	bl	800aee0 <put_fat>
 800b18e:	4603      	mov	r3, r0
 800b190:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b192:	7ffb      	ldrb	r3, [r7, #31]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <remove_chain+0x88>
 800b198:	7ffb      	ldrb	r3, [r7, #31]
 800b19a:	e01c      	b.n	800b1d6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	699a      	ldr	r2, [r3, #24]
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	3b02      	subs	r3, #2
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d20b      	bcs.n	800b1c2 <remove_chain+0xae>
			fs->free_clst++;
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	791b      	ldrb	r3, [r3, #4]
 800b1b8:	f043 0301 	orr.w	r3, r3, #1
 800b1bc:	b2da      	uxtb	r2, r3
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	69db      	ldr	r3, [r3, #28]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d3c6      	bcc.n	800b15e <remove_chain+0x4a>
 800b1d0:	e000      	b.n	800b1d4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b1d2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b088      	sub	sp, #32
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10d      	bne.n	800b210 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d004      	beq.n	800b20a <create_chain+0x2c>
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	429a      	cmp	r2, r3
 800b208:	d31b      	bcc.n	800b242 <create_chain+0x64>
 800b20a:	2301      	movs	r3, #1
 800b20c:	61bb      	str	r3, [r7, #24]
 800b20e:	e018      	b.n	800b242 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b210:	6839      	ldr	r1, [r7, #0]
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff fd91 	bl	800ad3a <get_fat>
 800b218:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d801      	bhi.n	800b224 <create_chain+0x46>
 800b220:	2301      	movs	r3, #1
 800b222:	e070      	b.n	800b306 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22a:	d101      	bne.n	800b230 <create_chain+0x52>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	e06a      	b.n	800b306 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	429a      	cmp	r2, r3
 800b238:	d201      	bcs.n	800b23e <create_chain+0x60>
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	e063      	b.n	800b306 <create_chain+0x128>
		scl = clst;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	3301      	adds	r3, #1
 800b24a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	69fa      	ldr	r2, [r7, #28]
 800b252:	429a      	cmp	r2, r3
 800b254:	d307      	bcc.n	800b266 <create_chain+0x88>
				ncl = 2;
 800b256:	2302      	movs	r3, #2
 800b258:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b25a:	69fa      	ldr	r2, [r7, #28]
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d901      	bls.n	800b266 <create_chain+0x88>
 800b262:	2300      	movs	r3, #0
 800b264:	e04f      	b.n	800b306 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b266:	69f9      	ldr	r1, [r7, #28]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7ff fd66 	bl	800ad3a <get_fat>
 800b26e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00e      	beq.n	800b294 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d003      	beq.n	800b284 <create_chain+0xa6>
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b282:	d101      	bne.n	800b288 <create_chain+0xaa>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	e03e      	b.n	800b306 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b288:	69fa      	ldr	r2, [r7, #28]
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d1da      	bne.n	800b246 <create_chain+0x68>
 800b290:	2300      	movs	r3, #0
 800b292:	e038      	b.n	800b306 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b294:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b296:	f04f 32ff 	mov.w	r2, #4294967295
 800b29a:	69f9      	ldr	r1, [r7, #28]
 800b29c:	6938      	ldr	r0, [r7, #16]
 800b29e:	f7ff fe1f 	bl	800aee0 <put_fat>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d109      	bne.n	800b2c0 <create_chain+0xe2>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d006      	beq.n	800b2c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b2b2:	69fa      	ldr	r2, [r7, #28]
 800b2b4:	6839      	ldr	r1, [r7, #0]
 800b2b6:	6938      	ldr	r0, [r7, #16]
 800b2b8:	f7ff fe12 	bl	800aee0 <put_fat>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d116      	bne.n	800b2f4 <create_chain+0x116>
		fs->last_clst = ncl;
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	69fa      	ldr	r2, [r7, #28]
 800b2ca:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	699a      	ldr	r2, [r3, #24]
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	3b02      	subs	r3, #2
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d804      	bhi.n	800b2e4 <create_chain+0x106>
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	699b      	ldr	r3, [r3, #24]
 800b2de:	1e5a      	subs	r2, r3, #1
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	791b      	ldrb	r3, [r3, #4]
 800b2e8:	f043 0301 	orr.w	r3, r3, #1
 800b2ec:	b2da      	uxtb	r2, r3
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	711a      	strb	r2, [r3, #4]
 800b2f2:	e007      	b.n	800b304 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d102      	bne.n	800b300 <create_chain+0x122>
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	e000      	b.n	800b302 <create_chain+0x124>
 800b300:	2301      	movs	r3, #1
 800b302:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b304:	69fb      	ldr	r3, [r7, #28]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3720      	adds	r7, #32
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b30e:	b480      	push	{r7}
 800b310:	b087      	sub	sp, #28
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b322:	3304      	adds	r3, #4
 800b324:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	899b      	ldrh	r3, [r3, #12]
 800b32a:	461a      	mov	r2, r3
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	8952      	ldrh	r2, [r2, #10]
 800b336:	fbb3 f3f2 	udiv	r3, r3, r2
 800b33a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	1d1a      	adds	r2, r3, #4
 800b340:	613a      	str	r2, [r7, #16]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <clmt_clust+0x42>
 800b34c:	2300      	movs	r3, #0
 800b34e:	e010      	b.n	800b372 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	429a      	cmp	r2, r3
 800b356:	d307      	bcc.n	800b368 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	1ad3      	subs	r3, r2, r3
 800b35e:	617b      	str	r3, [r7, #20]
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	3304      	adds	r3, #4
 800b364:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b366:	e7e9      	b.n	800b33c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b368:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	4413      	add	r3, r2
}
 800b372:	4618      	mov	r0, r3
 800b374:	371c      	adds	r7, #28
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr

0800b37e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b086      	sub	sp, #24
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b394:	d204      	bcs.n	800b3a0 <dir_sdi+0x22>
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	f003 031f 	and.w	r3, r3, #31
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d001      	beq.n	800b3a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	e071      	b.n	800b488 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <dir_sdi+0x46>
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d902      	bls.n	800b3c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10c      	bne.n	800b3e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	095b      	lsrs	r3, r3, #5
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	8912      	ldrh	r2, [r2, #8]
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d301      	bcc.n	800b3da <dir_sdi+0x5c>
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	e056      	b.n	800b488 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	61da      	str	r2, [r3, #28]
 800b3e2:	e02d      	b.n	800b440 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	895b      	ldrh	r3, [r3, #10]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	899b      	ldrh	r3, [r3, #12]
 800b3ee:	fb02 f303 	mul.w	r3, r2, r3
 800b3f2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b3f4:	e019      	b.n	800b42a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6979      	ldr	r1, [r7, #20]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7ff fc9d 	bl	800ad3a <get_fat>
 800b400:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b408:	d101      	bne.n	800b40e <dir_sdi+0x90>
 800b40a:	2301      	movs	r3, #1
 800b40c:	e03c      	b.n	800b488 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d904      	bls.n	800b41e <dir_sdi+0xa0>
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	69db      	ldr	r3, [r3, #28]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d301      	bcc.n	800b422 <dir_sdi+0xa4>
 800b41e:	2302      	movs	r3, #2
 800b420:	e032      	b.n	800b488 <dir_sdi+0x10a>
			ofs -= csz;
 800b422:	683a      	ldr	r2, [r7, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d2e1      	bcs.n	800b3f6 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b432:	6979      	ldr	r1, [r7, #20]
 800b434:	6938      	ldr	r0, [r7, #16]
 800b436:	f7ff fc61 	bl	800acfc <clust2sect>
 800b43a:	4602      	mov	r2, r0
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	69db      	ldr	r3, [r3, #28]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <dir_sdi+0xd4>
 800b44e:	2302      	movs	r3, #2
 800b450:	e01a      	b.n	800b488 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	69da      	ldr	r2, [r3, #28]
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	899b      	ldrh	r3, [r3, #12]
 800b45a:	4619      	mov	r1, r3
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b462:	441a      	add	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	899b      	ldrh	r3, [r3, #12]
 800b472:	461a      	mov	r2, r3
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	fbb3 f0f2 	udiv	r0, r3, r2
 800b47a:	fb00 f202 	mul.w	r2, r0, r2
 800b47e:	1a9b      	subs	r3, r3, r2
 800b480:	18ca      	adds	r2, r1, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	3320      	adds	r3, #32
 800b4a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	69db      	ldr	r3, [r3, #28]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <dir_next+0x28>
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4b6:	d301      	bcc.n	800b4bc <dir_next+0x2c>
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	e0bb      	b.n	800b634 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	899b      	ldrh	r3, [r3, #12]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4c8:	fb01 f202 	mul.w	r2, r1, r2
 800b4cc:	1a9b      	subs	r3, r3, r2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f040 809d 	bne.w	800b60e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	095b      	lsrs	r3, r3, #5
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	8912      	ldrh	r2, [r2, #8]
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f0c0 808d 	bcc.w	800b60e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	61da      	str	r2, [r3, #28]
 800b4fa:	2304      	movs	r3, #4
 800b4fc:	e09a      	b.n	800b634 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	899b      	ldrh	r3, [r3, #12]
 800b502:	461a      	mov	r2, r3
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	fbb3 f3f2 	udiv	r3, r3, r2
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	8952      	ldrh	r2, [r2, #10]
 800b50e:	3a01      	subs	r2, #1
 800b510:	4013      	ands	r3, r2
 800b512:	2b00      	cmp	r3, #0
 800b514:	d17b      	bne.n	800b60e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	699b      	ldr	r3, [r3, #24]
 800b51c:	4619      	mov	r1, r3
 800b51e:	4610      	mov	r0, r2
 800b520:	f7ff fc0b 	bl	800ad3a <get_fat>
 800b524:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d801      	bhi.n	800b530 <dir_next+0xa0>
 800b52c:	2302      	movs	r3, #2
 800b52e:	e081      	b.n	800b634 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b536:	d101      	bne.n	800b53c <dir_next+0xac>
 800b538:	2301      	movs	r3, #1
 800b53a:	e07b      	b.n	800b634 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	429a      	cmp	r2, r3
 800b544:	d359      	bcc.n	800b5fa <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d104      	bne.n	800b556 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	61da      	str	r2, [r3, #28]
 800b552:	2304      	movs	r3, #4
 800b554:	e06e      	b.n	800b634 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	4619      	mov	r1, r3
 800b55e:	4610      	mov	r0, r2
 800b560:	f7ff fe3d 	bl	800b1de <create_chain>
 800b564:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <dir_next+0xe0>
 800b56c:	2307      	movs	r3, #7
 800b56e:	e061      	b.n	800b634 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	2b01      	cmp	r3, #1
 800b574:	d101      	bne.n	800b57a <dir_next+0xea>
 800b576:	2302      	movs	r3, #2
 800b578:	e05c      	b.n	800b634 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b580:	d101      	bne.n	800b586 <dir_next+0xf6>
 800b582:	2301      	movs	r3, #1
 800b584:	e056      	b.n	800b634 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f7ff fad6 	bl	800ab38 <sync_window>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <dir_next+0x106>
 800b592:	2301      	movs	r3, #1
 800b594:	e04e      	b.n	800b634 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	899b      	ldrh	r3, [r3, #12]
 800b5a0:	461a      	mov	r2, r3
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	f7ff f8ff 	bl	800a7a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	613b      	str	r3, [r7, #16]
 800b5ac:	6979      	ldr	r1, [r7, #20]
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f7ff fba4 	bl	800acfc <clust2sect>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5ba:	e012      	b.n	800b5e2 <dir_next+0x152>
						fs->wflag = 1;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f7ff fab8 	bl	800ab38 <sync_window>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <dir_next+0x142>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e030      	b.n	800b634 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	613b      	str	r3, [r7, #16]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5dc:	1c5a      	adds	r2, r3, #1
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	895b      	ldrh	r3, [r3, #10]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d3e6      	bcc.n	800b5bc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	1ad2      	subs	r2, r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b600:	6979      	ldr	r1, [r7, #20]
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f7ff fb7a 	bl	800acfc <clust2sect>
 800b608:	4602      	mov	r2, r0
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	899b      	ldrh	r3, [r3, #12]
 800b61e:	461a      	mov	r2, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	fbb3 f0f2 	udiv	r0, r3, r2
 800b626:	fb00 f202 	mul.w	r2, r0, r2
 800b62a:	1a9b      	subs	r3, r3, r2
 800b62c:	18ca      	adds	r2, r1, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b086      	sub	sp, #24
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b64c:	2100      	movs	r1, #0
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7ff fe95 	bl	800b37e <dir_sdi>
 800b654:	4603      	mov	r3, r0
 800b656:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b658:	7dfb      	ldrb	r3, [r7, #23]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d12b      	bne.n	800b6b6 <dir_alloc+0x7a>
		n = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	69db      	ldr	r3, [r3, #28]
 800b666:	4619      	mov	r1, r3
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f7ff faa9 	bl	800abc0 <move_window>
 800b66e:	4603      	mov	r3, r0
 800b670:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b672:	7dfb      	ldrb	r3, [r7, #23]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d11d      	bne.n	800b6b4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a1b      	ldr	r3, [r3, #32]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2be5      	cmp	r3, #229	@ 0xe5
 800b680:	d004      	beq.n	800b68c <dir_alloc+0x50>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d107      	bne.n	800b69c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	3301      	adds	r3, #1
 800b690:	613b      	str	r3, [r7, #16]
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	429a      	cmp	r2, r3
 800b698:	d102      	bne.n	800b6a0 <dir_alloc+0x64>
 800b69a:	e00c      	b.n	800b6b6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b69c:	2300      	movs	r3, #0
 800b69e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b6a0:	2101      	movs	r1, #1
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff fef4 	bl	800b490 <dir_next>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b6ac:	7dfb      	ldrb	r3, [r7, #23]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d0d7      	beq.n	800b662 <dir_alloc+0x26>
 800b6b2:	e000      	b.n	800b6b6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b6b4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	d101      	bne.n	800b6c0 <dir_alloc+0x84>
 800b6bc:	2307      	movs	r3, #7
 800b6be:	75fb      	strb	r3, [r7, #23]
	return res;
 800b6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3718      	adds	r7, #24
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	331a      	adds	r3, #26
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe ffc1 	bl	800a660 <ld_word>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d109      	bne.n	800b6fe <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	3314      	adds	r3, #20
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe ffb6 	bl	800a660 <ld_word>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	041b      	lsls	r3, r3, #16
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	331a      	adds	r3, #26
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	b292      	uxth	r2, r2
 800b71c:	4611      	mov	r1, r2
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fe ffd9 	bl	800a6d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d109      	bne.n	800b740 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	f103 0214 	add.w	r2, r3, #20
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	0c1b      	lsrs	r3, r3, #16
 800b736:	b29b      	uxth	r3, r3
 800b738:	4619      	mov	r1, r3
 800b73a:	4610      	mov	r0, r2
 800b73c:	f7fe ffcb 	bl	800a6d6 <st_word>
	}
}
 800b740:	bf00      	nop
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b748:	b590      	push	{r4, r7, lr}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	331a      	adds	r3, #26
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe ff82 	bl	800a660 <ld_word>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d001      	beq.n	800b766 <cmp_lfn+0x1e>
 800b762:	2300      	movs	r3, #0
 800b764:	e059      	b.n	800b81a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b76e:	1e5a      	subs	r2, r3, #1
 800b770:	4613      	mov	r3, r2
 800b772:	005b      	lsls	r3, r3, #1
 800b774:	4413      	add	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	4413      	add	r3, r2
 800b77a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b77c:	2301      	movs	r3, #1
 800b77e:	81fb      	strh	r3, [r7, #14]
 800b780:	2300      	movs	r3, #0
 800b782:	613b      	str	r3, [r7, #16]
 800b784:	e033      	b.n	800b7ee <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b786:	4a27      	ldr	r2, [pc, #156]	@ (800b824 <cmp_lfn+0xdc>)
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	4413      	add	r3, r2
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	4413      	add	r3, r2
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe ff63 	bl	800a660 <ld_word>
 800b79a:	4603      	mov	r3, r0
 800b79c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b79e:	89fb      	ldrh	r3, [r7, #14]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d01a      	beq.n	800b7da <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b7a8:	d812      	bhi.n	800b7d0 <cmp_lfn+0x88>
 800b7aa:	89bb      	ldrh	r3, [r7, #12]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f002 fe87 	bl	800e4c0 <ff_wtoupper>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	461c      	mov	r4, r3
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	1c5a      	adds	r2, r3, #1
 800b7ba:	617a      	str	r2, [r7, #20]
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	881b      	ldrh	r3, [r3, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f002 fe7b 	bl	800e4c0 <ff_wtoupper>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	d001      	beq.n	800b7d4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	e022      	b.n	800b81a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b7d4:	89bb      	ldrh	r3, [r7, #12]
 800b7d6:	81fb      	strh	r3, [r7, #14]
 800b7d8:	e006      	b.n	800b7e8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b7da:	89bb      	ldrh	r3, [r7, #12]
 800b7dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d001      	beq.n	800b7e8 <cmp_lfn+0xa0>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	e018      	b.n	800b81a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	613b      	str	r3, [r7, #16]
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2b0c      	cmp	r3, #12
 800b7f2:	d9c8      	bls.n	800b786 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d00b      	beq.n	800b818 <cmp_lfn+0xd0>
 800b800:	89fb      	ldrh	r3, [r7, #14]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d008      	beq.n	800b818 <cmp_lfn+0xd0>
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	005b      	lsls	r3, r3, #1
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	881b      	ldrh	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <cmp_lfn+0xd0>
 800b814:	2300      	movs	r3, #0
 800b816:	e000      	b.n	800b81a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b818:	2301      	movs	r3, #1
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	371c      	adds	r7, #28
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd90      	pop	{r4, r7, pc}
 800b822:	bf00      	nop
 800b824:	0800fd4c 	.word	0x0800fd4c

0800b828 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	331a      	adds	r3, #26
 800b836:	4618      	mov	r0, r3
 800b838:	f7fe ff12 	bl	800a660 <ld_word>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <pick_lfn+0x1e>
 800b842:	2300      	movs	r3, #0
 800b844:	e04d      	b.n	800b8e2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b84e:	1e5a      	subs	r2, r3, #1
 800b850:	4613      	mov	r3, r2
 800b852:	005b      	lsls	r3, r3, #1
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4413      	add	r3, r2
 800b85a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b85c:	2301      	movs	r3, #1
 800b85e:	81fb      	strh	r3, [r7, #14]
 800b860:	2300      	movs	r3, #0
 800b862:	613b      	str	r3, [r7, #16]
 800b864:	e028      	b.n	800b8b8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b866:	4a21      	ldr	r2, [pc, #132]	@ (800b8ec <pick_lfn+0xc4>)
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	4413      	add	r3, r2
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	461a      	mov	r2, r3
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	4413      	add	r3, r2
 800b874:	4618      	mov	r0, r3
 800b876:	f7fe fef3 	bl	800a660 <ld_word>
 800b87a:	4603      	mov	r3, r0
 800b87c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b87e:	89fb      	ldrh	r3, [r7, #14]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00f      	beq.n	800b8a4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2bfe      	cmp	r3, #254	@ 0xfe
 800b888:	d901      	bls.n	800b88e <pick_lfn+0x66>
 800b88a:	2300      	movs	r3, #0
 800b88c:	e029      	b.n	800b8e2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b88e:	89bb      	ldrh	r3, [r7, #12]
 800b890:	81fb      	strh	r3, [r7, #14]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	1c5a      	adds	r2, r3, #1
 800b896:	617a      	str	r2, [r7, #20]
 800b898:	005b      	lsls	r3, r3, #1
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	4413      	add	r3, r2
 800b89e:	89fa      	ldrh	r2, [r7, #14]
 800b8a0:	801a      	strh	r2, [r3, #0]
 800b8a2:	e006      	b.n	800b8b2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b8a4:	89bb      	ldrh	r3, [r7, #12]
 800b8a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d001      	beq.n	800b8b2 <pick_lfn+0x8a>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e017      	b.n	800b8e2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	613b      	str	r3, [r7, #16]
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	2b0c      	cmp	r3, #12
 800b8bc:	d9d3      	bls.n	800b866 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2bfe      	cmp	r3, #254	@ 0xfe
 800b8ce:	d901      	bls.n	800b8d4 <pick_lfn+0xac>
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e006      	b.n	800b8e2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	4413      	add	r3, r2
 800b8dc:	2200      	movs	r2, #0
 800b8de:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b8e0:	2301      	movs	r3, #1
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	0800fd4c 	.word	0x0800fd4c

0800b8f0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	460b      	mov	r3, r1
 800b900:	71fb      	strb	r3, [r7, #7]
 800b902:	4613      	mov	r3, r2
 800b904:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	330d      	adds	r3, #13
 800b90a:	79ba      	ldrb	r2, [r7, #6]
 800b90c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	330b      	adds	r3, #11
 800b912:	220f      	movs	r2, #15
 800b914:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	330c      	adds	r3, #12
 800b91a:	2200      	movs	r2, #0
 800b91c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	331a      	adds	r3, #26
 800b922:	2100      	movs	r1, #0
 800b924:	4618      	mov	r0, r3
 800b926:	f7fe fed6 	bl	800a6d6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b92a:	79fb      	ldrb	r3, [r7, #7]
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	4613      	mov	r3, r2
 800b930:	005b      	lsls	r3, r3, #1
 800b932:	4413      	add	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b93a:	2300      	movs	r3, #0
 800b93c:	82fb      	strh	r3, [r7, #22]
 800b93e:	2300      	movs	r3, #0
 800b940:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b942:	8afb      	ldrh	r3, [r7, #22]
 800b944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b948:	4293      	cmp	r3, r2
 800b94a:	d007      	beq.n	800b95c <put_lfn+0x6c>
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	1c5a      	adds	r2, r3, #1
 800b950:	61fa      	str	r2, [r7, #28]
 800b952:	005b      	lsls	r3, r3, #1
 800b954:	68fa      	ldr	r2, [r7, #12]
 800b956:	4413      	add	r3, r2
 800b958:	881b      	ldrh	r3, [r3, #0]
 800b95a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b95c:	4a17      	ldr	r2, [pc, #92]	@ (800b9bc <put_lfn+0xcc>)
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	4413      	add	r3, r2
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	461a      	mov	r2, r3
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	4413      	add	r3, r2
 800b96a:	8afa      	ldrh	r2, [r7, #22]
 800b96c:	4611      	mov	r1, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe feb1 	bl	800a6d6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b974:	8afb      	ldrh	r3, [r7, #22]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d102      	bne.n	800b980 <put_lfn+0x90>
 800b97a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b97e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	3301      	adds	r3, #1
 800b984:	61bb      	str	r3, [r7, #24]
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	2b0c      	cmp	r3, #12
 800b98a:	d9da      	bls.n	800b942 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b98c:	8afb      	ldrh	r3, [r7, #22]
 800b98e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b992:	4293      	cmp	r3, r2
 800b994:	d006      	beq.n	800b9a4 <put_lfn+0xb4>
 800b996:	69fb      	ldr	r3, [r7, #28]
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d103      	bne.n	800b9ac <put_lfn+0xbc>
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9aa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	79fa      	ldrb	r2, [r7, #7]
 800b9b0:	701a      	strb	r2, [r3, #0]
}
 800b9b2:	bf00      	nop
 800b9b4:	3720      	adds	r7, #32
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}
 800b9ba:	bf00      	nop
 800b9bc:	0800fd4c 	.word	0x0800fd4c

0800b9c0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b08c      	sub	sp, #48	@ 0x30
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b9ce:	220b      	movs	r2, #11
 800b9d0:	68b9      	ldr	r1, [r7, #8]
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	f7fe fec6 	bl	800a764 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b05      	cmp	r3, #5
 800b9dc:	d92b      	bls.n	800ba36 <gen_numname+0x76>
		sr = seq;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b9e2:	e022      	b.n	800ba2a <gen_numname+0x6a>
			wc = *lfn++;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	1c9a      	adds	r2, r3, #2
 800b9e8:	607a      	str	r2, [r7, #4]
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9f2:	e017      	b.n	800ba24 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	005a      	lsls	r2, r3, #1
 800b9f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b9fa:	f003 0301 	and.w	r3, r3, #1
 800b9fe:	4413      	add	r3, r2
 800ba00:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ba02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba04:	085b      	lsrs	r3, r3, #1
 800ba06:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d005      	beq.n	800ba1e <gen_numname+0x5e>
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800ba18:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800ba1c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba20:	3301      	adds	r3, #1
 800ba22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba26:	2b0f      	cmp	r3, #15
 800ba28:	d9e4      	bls.n	800b9f4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1d8      	bne.n	800b9e4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ba36:	2307      	movs	r3, #7
 800ba38:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	f003 030f 	and.w	r3, r3, #15
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	3330      	adds	r3, #48	@ 0x30
 800ba46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ba4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba4e:	2b39      	cmp	r3, #57	@ 0x39
 800ba50:	d904      	bls.n	800ba5c <gen_numname+0x9c>
 800ba52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ba56:	3307      	adds	r3, #7
 800ba58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ba5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba5e:	1e5a      	subs	r2, r3, #1
 800ba60:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ba62:	3330      	adds	r3, #48	@ 0x30
 800ba64:	443b      	add	r3, r7
 800ba66:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ba6a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	091b      	lsrs	r3, r3, #4
 800ba72:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1df      	bne.n	800ba3a <gen_numname+0x7a>
	ns[i] = '~';
 800ba7a:	f107 0214 	add.w	r2, r7, #20
 800ba7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba80:	4413      	add	r3, r2
 800ba82:	227e      	movs	r2, #126	@ 0x7e
 800ba84:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ba86:	2300      	movs	r3, #0
 800ba88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba8a:	e002      	b.n	800ba92 <gen_numname+0xd2>
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8e:	3301      	adds	r3, #1
 800ba90:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d205      	bcs.n	800baa6 <gen_numname+0xe6>
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9e:	4413      	add	r3, r2
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	d1f2      	bne.n	800ba8c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800baa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa8:	2b07      	cmp	r3, #7
 800baaa:	d807      	bhi.n	800babc <gen_numname+0xfc>
 800baac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bab2:	3330      	adds	r3, #48	@ 0x30
 800bab4:	443b      	add	r3, r7
 800bab6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800baba:	e000      	b.n	800babe <gen_numname+0xfe>
 800babc:	2120      	movs	r1, #32
 800babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac0:	1c5a      	adds	r2, r3, #1
 800bac2:	627a      	str	r2, [r7, #36]	@ 0x24
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	4413      	add	r3, r2
 800bac8:	460a      	mov	r2, r1
 800baca:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800bacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bace:	2b07      	cmp	r3, #7
 800bad0:	d9e9      	bls.n	800baa6 <gen_numname+0xe6>
}
 800bad2:	bf00      	nop
 800bad4:	bf00      	nop
 800bad6:	3730      	adds	r7, #48	@ 0x30
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800bae8:	230b      	movs	r3, #11
 800baea:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	0852      	lsrs	r2, r2, #1
 800baf2:	01db      	lsls	r3, r3, #7
 800baf4:	4313      	orrs	r3, r2
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	1c59      	adds	r1, r3, #1
 800bafc:	6079      	str	r1, [r7, #4]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	4413      	add	r3, r2
 800bb02:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	3b01      	subs	r3, #1
 800bb08:	60bb      	str	r3, [r7, #8]
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1ed      	bne.n	800baec <sum_sfn+0x10>
	return sum;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b086      	sub	sp, #24
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bb28:	2304      	movs	r3, #4
 800bb2a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bb32:	23ff      	movs	r3, #255	@ 0xff
 800bb34:	757b      	strb	r3, [r7, #21]
 800bb36:	23ff      	movs	r3, #255	@ 0xff
 800bb38:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bb3a:	e081      	b.n	800bc40 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	69db      	ldr	r3, [r3, #28]
 800bb40:	4619      	mov	r1, r3
 800bb42:	6938      	ldr	r0, [r7, #16]
 800bb44:	f7ff f83c 	bl	800abc0 <move_window>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d17c      	bne.n	800bc4c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bb5a:	7dbb      	ldrb	r3, [r7, #22]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d102      	bne.n	800bb66 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bb60:	2304      	movs	r3, #4
 800bb62:	75fb      	strb	r3, [r7, #23]
 800bb64:	e077      	b.n	800bc56 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	330b      	adds	r3, #11
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb72:	73fb      	strb	r3, [r7, #15]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	7bfa      	ldrb	r2, [r7, #15]
 800bb78:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bb7a:	7dbb      	ldrb	r3, [r7, #22]
 800bb7c:	2be5      	cmp	r3, #229	@ 0xe5
 800bb7e:	d00e      	beq.n	800bb9e <dir_read+0x80>
 800bb80:	7dbb      	ldrb	r3, [r7, #22]
 800bb82:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb84:	d00b      	beq.n	800bb9e <dir_read+0x80>
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	f023 0320 	bic.w	r3, r3, #32
 800bb8c:	2b08      	cmp	r3, #8
 800bb8e:	bf0c      	ite	eq
 800bb90:	2301      	moveq	r3, #1
 800bb92:	2300      	movne	r3, #0
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	461a      	mov	r2, r3
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d002      	beq.n	800bba4 <dir_read+0x86>
				ord = 0xFF;
 800bb9e:	23ff      	movs	r3, #255	@ 0xff
 800bba0:	757b      	strb	r3, [r7, #21]
 800bba2:	e044      	b.n	800bc2e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
 800bba6:	2b0f      	cmp	r3, #15
 800bba8:	d12f      	bne.n	800bc0a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bbaa:	7dbb      	ldrb	r3, [r7, #22]
 800bbac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00d      	beq.n	800bbd0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a1b      	ldr	r3, [r3, #32]
 800bbb8:	7b5b      	ldrb	r3, [r3, #13]
 800bbba:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bbbc:	7dbb      	ldrb	r3, [r7, #22]
 800bbbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bbc2:	75bb      	strb	r3, [r7, #22]
 800bbc4:	7dbb      	ldrb	r3, [r7, #22]
 800bbc6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	695a      	ldr	r2, [r3, #20]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bbd0:	7dba      	ldrb	r2, [r7, #22]
 800bbd2:	7d7b      	ldrb	r3, [r7, #21]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d115      	bne.n	800bc04 <dir_read+0xe6>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6a1b      	ldr	r3, [r3, #32]
 800bbdc:	330d      	adds	r3, #13
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	7d3a      	ldrb	r2, [r7, #20]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d10e      	bne.n	800bc04 <dir_read+0xe6>
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	4619      	mov	r1, r3
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	f7ff fe19 	bl	800b828 <pick_lfn>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d003      	beq.n	800bc04 <dir_read+0xe6>
 800bbfc:	7d7b      	ldrb	r3, [r7, #21]
 800bbfe:	3b01      	subs	r3, #1
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	e000      	b.n	800bc06 <dir_read+0xe8>
 800bc04:	23ff      	movs	r3, #255	@ 0xff
 800bc06:	757b      	strb	r3, [r7, #21]
 800bc08:	e011      	b.n	800bc2e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bc0a:	7d7b      	ldrb	r3, [r7, #21]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d109      	bne.n	800bc24 <dir_read+0x106>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6a1b      	ldr	r3, [r3, #32]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff ff61 	bl	800badc <sum_sfn>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	7d3b      	ldrb	r3, [r7, #20]
 800bc20:	4293      	cmp	r3, r2
 800bc22:	d015      	beq.n	800bc50 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800bc2c:	e010      	b.n	800bc50 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bc2e:	2100      	movs	r1, #0
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f7ff fc2d 	bl	800b490 <dir_next>
 800bc36:	4603      	mov	r3, r0
 800bc38:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <dir_read+0x136>
	while (dp->sect) {
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69db      	ldr	r3, [r3, #28]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f47f af79 	bne.w	800bb3c <dir_read+0x1e>
 800bc4a:	e004      	b.n	800bc56 <dir_read+0x138>
		if (res != FR_OK) break;
 800bc4c:	bf00      	nop
 800bc4e:	e002      	b.n	800bc56 <dir_read+0x138>
					break;
 800bc50:	bf00      	nop
 800bc52:	e000      	b.n	800bc56 <dir_read+0x138>
		if (res != FR_OK) break;
 800bc54:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <dir_read+0x144>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	61da      	str	r2, [r3, #28]
	return res;
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff fb7e 	bl	800b37e <dir_sdi>
 800bc82:	4603      	mov	r3, r0
 800bc84:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc86:	7dfb      	ldrb	r3, [r7, #23]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <dir_find+0x24>
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	e0a9      	b.n	800bde4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bc90:	23ff      	movs	r3, #255	@ 0xff
 800bc92:	753b      	strb	r3, [r7, #20]
 800bc94:	7d3b      	ldrb	r3, [r7, #20]
 800bc96:	757b      	strb	r3, [r7, #21]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	69db      	ldr	r3, [r3, #28]
 800bca4:	4619      	mov	r1, r3
 800bca6:	6938      	ldr	r0, [r7, #16]
 800bca8:	f7fe ff8a 	bl	800abc0 <move_window>
 800bcac:	4603      	mov	r3, r0
 800bcae:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f040 8090 	bne.w	800bdd8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a1b      	ldr	r3, [r3, #32]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bcc0:	7dbb      	ldrb	r3, [r7, #22]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <dir_find+0x60>
 800bcc6:	2304      	movs	r3, #4
 800bcc8:	75fb      	strb	r3, [r7, #23]
 800bcca:	e08a      	b.n	800bde2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	330b      	adds	r3, #11
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bcd8:	73fb      	strb	r3, [r7, #15]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	7bfa      	ldrb	r2, [r7, #15]
 800bcde:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bce0:	7dbb      	ldrb	r3, [r7, #22]
 800bce2:	2be5      	cmp	r3, #229	@ 0xe5
 800bce4:	d007      	beq.n	800bcf6 <dir_find+0x8a>
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	f003 0308 	and.w	r3, r3, #8
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <dir_find+0x98>
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
 800bcf2:	2b0f      	cmp	r3, #15
 800bcf4:	d006      	beq.n	800bd04 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bcf6:	23ff      	movs	r3, #255	@ 0xff
 800bcf8:	757b      	strb	r3, [r7, #21]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bd00:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd02:	e05e      	b.n	800bdc2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bd04:	7bfb      	ldrb	r3, [r7, #15]
 800bd06:	2b0f      	cmp	r3, #15
 800bd08:	d136      	bne.n	800bd78 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bd10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d154      	bne.n	800bdc2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bd18:	7dbb      	ldrb	r3, [r7, #22]
 800bd1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00d      	beq.n	800bd3e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	7b5b      	ldrb	r3, [r3, #13]
 800bd28:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bd2a:	7dbb      	ldrb	r3, [r7, #22]
 800bd2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd30:	75bb      	strb	r3, [r7, #22]
 800bd32:	7dbb      	ldrb	r3, [r7, #22]
 800bd34:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695a      	ldr	r2, [r3, #20]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bd3e:	7dba      	ldrb	r2, [r7, #22]
 800bd40:	7d7b      	ldrb	r3, [r7, #21]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d115      	bne.n	800bd72 <dir_find+0x106>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a1b      	ldr	r3, [r3, #32]
 800bd4a:	330d      	adds	r3, #13
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	7d3a      	ldrb	r2, [r7, #20]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d10e      	bne.n	800bd72 <dir_find+0x106>
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	691a      	ldr	r2, [r3, #16]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4610      	mov	r0, r2
 800bd60:	f7ff fcf2 	bl	800b748 <cmp_lfn>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <dir_find+0x106>
 800bd6a:	7d7b      	ldrb	r3, [r7, #21]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	e000      	b.n	800bd74 <dir_find+0x108>
 800bd72:	23ff      	movs	r3, #255	@ 0xff
 800bd74:	757b      	strb	r3, [r7, #21]
 800bd76:	e024      	b.n	800bdc2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bd78:	7d7b      	ldrb	r3, [r7, #21]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d109      	bne.n	800bd92 <dir_find+0x126>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7ff feaa 	bl	800badc <sum_sfn>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	7d3b      	ldrb	r3, [r7, #20]
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d024      	beq.n	800bddc <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bd98:	f003 0301 	and.w	r3, r3, #1
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10a      	bne.n	800bdb6 <dir_find+0x14a>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6a18      	ldr	r0, [r3, #32]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3324      	adds	r3, #36	@ 0x24
 800bda8:	220b      	movs	r2, #11
 800bdaa:	4619      	mov	r1, r3
 800bdac:	f7fe fd16 	bl	800a7dc <mem_cmp>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d014      	beq.n	800bde0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bdb6:	23ff      	movs	r3, #255	@ 0xff
 800bdb8:	757b      	strb	r3, [r7, #21]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bdc0:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bdc2:	2100      	movs	r1, #0
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fb63 	bl	800b490 <dir_next>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bdce:	7dfb      	ldrb	r3, [r7, #23]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f43f af65 	beq.w	800bca0 <dir_find+0x34>
 800bdd6:	e004      	b.n	800bde2 <dir_find+0x176>
		if (res != FR_OK) break;
 800bdd8:	bf00      	nop
 800bdda:	e002      	b.n	800bde2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bddc:	bf00      	nop
 800bdde:	e000      	b.n	800bde2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bde0:	bf00      	nop

	return res;
 800bde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3718      	adds	r7, #24
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b08c      	sub	sp, #48	@ 0x30
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800be00:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d001      	beq.n	800be0c <dir_register+0x20>
 800be08:	2306      	movs	r3, #6
 800be0a:	e0e0      	b.n	800bfce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800be0c:	2300      	movs	r3, #0
 800be0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800be10:	e002      	b.n	800be18 <dir_register+0x2c>
 800be12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be14:	3301      	adds	r3, #1
 800be16:	627b      	str	r3, [r7, #36]	@ 0x24
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	691a      	ldr	r2, [r3, #16]
 800be1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	4413      	add	r3, r2
 800be22:	881b      	ldrh	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f4      	bne.n	800be12 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	220c      	movs	r2, #12
 800be34:	4618      	mov	r0, r3
 800be36:	f7fe fc95 	bl	800a764 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	f003 0301 	and.w	r3, r3, #1
 800be40:	2b00      	cmp	r3, #0
 800be42:	d032      	beq.n	800beaa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2240      	movs	r2, #64	@ 0x40
 800be48:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800be4c:	2301      	movs	r3, #1
 800be4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be50:	e016      	b.n	800be80 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	691a      	ldr	r2, [r3, #16]
 800be5c:	f107 010c 	add.w	r1, r7, #12
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	f7ff fdad 	bl	800b9c0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff ff00 	bl	800bc6c <dir_find>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800be72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be76:	2b00      	cmp	r3, #0
 800be78:	d106      	bne.n	800be88 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800be7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7c:	3301      	adds	r3, #1
 800be7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be82:	2b63      	cmp	r3, #99	@ 0x63
 800be84:	d9e5      	bls.n	800be52 <dir_register+0x66>
 800be86:	e000      	b.n	800be8a <dir_register+0x9e>
			if (res != FR_OK) break;
 800be88:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800be8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be8c:	2b64      	cmp	r3, #100	@ 0x64
 800be8e:	d101      	bne.n	800be94 <dir_register+0xa8>
 800be90:	2307      	movs	r3, #7
 800be92:	e09c      	b.n	800bfce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800be94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be98:	2b04      	cmp	r3, #4
 800be9a:	d002      	beq.n	800bea2 <dir_register+0xb6>
 800be9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bea0:	e095      	b.n	800bfce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bea2:	7dfa      	ldrb	r2, [r7, #23]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800beaa:	7dfb      	ldrb	r3, [r7, #23]
 800beac:	f003 0302 	and.w	r3, r3, #2
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d007      	beq.n	800bec4 <dir_register+0xd8>
 800beb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb6:	330c      	adds	r3, #12
 800beb8:	4a47      	ldr	r2, [pc, #284]	@ (800bfd8 <dir_register+0x1ec>)
 800beba:	fba2 2303 	umull	r2, r3, r2, r3
 800bebe:	089b      	lsrs	r3, r3, #2
 800bec0:	3301      	adds	r3, #1
 800bec2:	e000      	b.n	800bec6 <dir_register+0xda>
 800bec4:	2301      	movs	r3, #1
 800bec6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bec8:	6a39      	ldr	r1, [r7, #32]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff fbb6 	bl	800b63c <dir_alloc>
 800bed0:	4603      	mov	r3, r0
 800bed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d148      	bne.n	800bf70 <dir_register+0x184>
 800bede:	6a3b      	ldr	r3, [r7, #32]
 800bee0:	3b01      	subs	r3, #1
 800bee2:	623b      	str	r3, [r7, #32]
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d042      	beq.n	800bf70 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	695a      	ldr	r2, [r3, #20]
 800beee:	6a3b      	ldr	r3, [r7, #32]
 800bef0:	015b      	lsls	r3, r3, #5
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff fa41 	bl	800b37e <dir_sdi>
 800befc:	4603      	mov	r3, r0
 800befe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bf02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d132      	bne.n	800bf70 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	3324      	adds	r3, #36	@ 0x24
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff fde4 	bl	800badc <sum_sfn>
 800bf14:	4603      	mov	r3, r0
 800bf16:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	69db      	ldr	r3, [r3, #28]
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	69f8      	ldr	r0, [r7, #28]
 800bf20:	f7fe fe4e 	bl	800abc0 <move_window>
 800bf24:	4603      	mov	r3, r0
 800bf26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800bf2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d11d      	bne.n	800bf6e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	6918      	ldr	r0, [r3, #16]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a19      	ldr	r1, [r3, #32]
 800bf3a:	6a3b      	ldr	r3, [r7, #32]
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	7efb      	ldrb	r3, [r7, #27]
 800bf40:	f7ff fcd6 	bl	800b8f0 <put_lfn>
				fs->wflag = 1;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	2201      	movs	r2, #1
 800bf48:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f7ff fa9f 	bl	800b490 <dir_next>
 800bf52:	4603      	mov	r3, r0
 800bf54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800bf58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d107      	bne.n	800bf70 <dir_register+0x184>
 800bf60:	6a3b      	ldr	r3, [r7, #32]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	623b      	str	r3, [r7, #32]
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1d5      	bne.n	800bf18 <dir_register+0x12c>
 800bf6c:	e000      	b.n	800bf70 <dir_register+0x184>
				if (res != FR_OK) break;
 800bf6e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bf70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d128      	bne.n	800bfca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	69db      	ldr	r3, [r3, #28]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	69f8      	ldr	r0, [r7, #28]
 800bf80:	f7fe fe1e 	bl	800abc0 <move_window>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bf8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d11b      	bne.n	800bfca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a1b      	ldr	r3, [r3, #32]
 800bf96:	2220      	movs	r2, #32
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7fe fc03 	bl	800a7a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a18      	ldr	r0, [r3, #32]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3324      	adds	r3, #36	@ 0x24
 800bfa8:	220b      	movs	r2, #11
 800bfaa:	4619      	mov	r1, r3
 800bfac:	f7fe fbda 	bl	800a764 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	330c      	adds	r3, #12
 800bfbc:	f002 0218 	and.w	r2, r2, #24
 800bfc0:	b2d2      	uxtb	r2, r2
 800bfc2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bfca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3730      	adds	r7, #48	@ 0x30
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	4ec4ec4f 	.word	0x4ec4ec4f

0800bfdc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	2200      	movs	r2, #0
 800bff0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	69db      	ldr	r3, [r3, #28]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 80ca 	beq.w	800c190 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c004:	d032      	beq.n	800c06c <get_fileinfo+0x90>
			i = j = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	61bb      	str	r3, [r7, #24]
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c00e:	e01b      	b.n	800c048 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c010:	89fb      	ldrh	r3, [r7, #14]
 800c012:	2100      	movs	r1, #0
 800c014:	4618      	mov	r0, r3
 800c016:	f002 fa17 	bl	800e448 <ff_convert>
 800c01a:	4603      	mov	r3, r0
 800c01c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c01e:	89fb      	ldrh	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d102      	bne.n	800c02a <get_fileinfo+0x4e>
 800c024:	2300      	movs	r3, #0
 800c026:	61fb      	str	r3, [r7, #28]
 800c028:	e01a      	b.n	800c060 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	2bfe      	cmp	r3, #254	@ 0xfe
 800c02e:	d902      	bls.n	800c036 <get_fileinfo+0x5a>
 800c030:	2300      	movs	r3, #0
 800c032:	61fb      	str	r3, [r7, #28]
 800c034:	e014      	b.n	800c060 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c036:	69fb      	ldr	r3, [r7, #28]
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	61fa      	str	r2, [r7, #28]
 800c03c:	89fa      	ldrh	r2, [r7, #14]
 800c03e:	b2d1      	uxtb	r1, r2
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	4413      	add	r3, r2
 800c044:	460a      	mov	r2, r1
 800c046:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	691a      	ldr	r2, [r3, #16]
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	1c59      	adds	r1, r3, #1
 800c050:	61b9      	str	r1, [r7, #24]
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	4413      	add	r3, r2
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	81fb      	strh	r3, [r7, #14]
 800c05a:	89fb      	ldrh	r3, [r7, #14]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1d7      	bne.n	800c010 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c060:	683a      	ldr	r2, [r7, #0]
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	3316      	adds	r3, #22
 800c068:	2200      	movs	r2, #0
 800c06a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c06c:	2300      	movs	r3, #0
 800c06e:	61bb      	str	r3, [r7, #24]
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	4413      	add	r3, r2
 800c07a:	3316      	adds	r3, #22
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c080:	e04d      	b.n	800c11e <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6a1a      	ldr	r2, [r3, #32]
 800c086:	69fb      	ldr	r3, [r7, #28]
 800c088:	1c59      	adds	r1, r3, #1
 800c08a:	61f9      	str	r1, [r7, #28]
 800c08c:	4413      	add	r3, r2
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c092:	7dfb      	ldrb	r3, [r7, #23]
 800c094:	2b20      	cmp	r3, #32
 800c096:	d041      	beq.n	800c11c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c098:	7dfb      	ldrb	r3, [r7, #23]
 800c09a:	2b05      	cmp	r3, #5
 800c09c:	d101      	bne.n	800c0a2 <get_fileinfo+0xc6>
 800c09e:	23e5      	movs	r3, #229	@ 0xe5
 800c0a0:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	2b09      	cmp	r3, #9
 800c0a6:	d10f      	bne.n	800c0c8 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800c0a8:	89bb      	ldrh	r3, [r7, #12]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d105      	bne.n	800c0ba <get_fileinfo+0xde>
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	69bb      	ldr	r3, [r7, #24]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	3316      	adds	r3, #22
 800c0b6:	222e      	movs	r2, #46	@ 0x2e
 800c0b8:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	61ba      	str	r2, [r7, #24]
 800c0c0:	683a      	ldr	r2, [r7, #0]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	222e      	movs	r2, #46	@ 0x2e
 800c0c6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c0c8:	683a      	ldr	r2, [r7, #0]
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	3309      	adds	r3, #9
 800c0d0:	7dfa      	ldrb	r2, [r7, #23]
 800c0d2:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c0d4:	89bb      	ldrh	r3, [r7, #12]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d11c      	bne.n	800c114 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	2b40      	cmp	r3, #64	@ 0x40
 800c0de:	d913      	bls.n	800c108 <get_fileinfo+0x12c>
 800c0e0:	7dfb      	ldrb	r3, [r7, #23]
 800c0e2:	2b5a      	cmp	r3, #90	@ 0x5a
 800c0e4:	d810      	bhi.n	800c108 <get_fileinfo+0x12c>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6a1b      	ldr	r3, [r3, #32]
 800c0ea:	330c      	adds	r3, #12
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	2b08      	cmp	r3, #8
 800c0f4:	d901      	bls.n	800c0fa <get_fileinfo+0x11e>
 800c0f6:	2310      	movs	r3, #16
 800c0f8:	e000      	b.n	800c0fc <get_fileinfo+0x120>
 800c0fa:	2308      	movs	r3, #8
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800c102:	7dfb      	ldrb	r3, [r7, #23]
 800c104:	3320      	adds	r3, #32
 800c106:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c108:	683a      	ldr	r2, [r7, #0]
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	4413      	add	r3, r2
 800c10e:	3316      	adds	r3, #22
 800c110:	7dfa      	ldrb	r2, [r7, #23]
 800c112:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	3301      	adds	r3, #1
 800c118:	61bb      	str	r3, [r7, #24]
 800c11a:	e000      	b.n	800c11e <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c11c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c11e:	69fb      	ldr	r3, [r7, #28]
 800c120:	2b0a      	cmp	r3, #10
 800c122:	d9ae      	bls.n	800c082 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c124:	89bb      	ldrh	r3, [r7, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10d      	bne.n	800c146 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800c12a:	683a      	ldr	r2, [r7, #0]
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	4413      	add	r3, r2
 800c130:	3316      	adds	r3, #22
 800c132:	2200      	movs	r2, #0
 800c134:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	330c      	adds	r3, #12
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <get_fileinfo+0x16a>
 800c142:	2300      	movs	r3, #0
 800c144:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	4413      	add	r3, r2
 800c14c:	3309      	adds	r3, #9
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6a1b      	ldr	r3, [r3, #32]
 800c156:	7ada      	ldrb	r2, [r3, #11]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6a1b      	ldr	r3, [r3, #32]
 800c160:	331c      	adds	r3, #28
 800c162:	4618      	mov	r0, r3
 800c164:	f7fe fa94 	bl	800a690 <ld_dword>
 800c168:	4602      	mov	r2, r0
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	3316      	adds	r3, #22
 800c174:	4618      	mov	r0, r3
 800c176:	f7fe fa8b 	bl	800a690 <ld_dword>
 800c17a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	b29a      	uxth	r2, r3
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	80da      	strh	r2, [r3, #6]
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	0c1b      	lsrs	r3, r3, #16
 800c188:	b29a      	uxth	r2, r3
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	809a      	strh	r2, [r3, #4]
 800c18e:	e000      	b.n	800c192 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c190:	bf00      	nop
}
 800c192:	3720      	adds	r7, #32
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b08a      	sub	sp, #40	@ 0x28
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
 800c1a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	613b      	str	r3, [r7, #16]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	60fb      	str	r3, [r7, #12]
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	617b      	str	r3, [r7, #20]
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	1c5a      	adds	r2, r3, #1
 800c1bc:	61ba      	str	r2, [r7, #24]
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c1c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c1c8:	2b1f      	cmp	r3, #31
 800c1ca:	d940      	bls.n	800c24e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c1cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c1ce:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1d0:	d006      	beq.n	800c1e0 <create_name+0x48>
 800c1d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c1d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1d6:	d110      	bne.n	800c1fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c1d8:	e002      	b.n	800c1e0 <create_name+0x48>
 800c1da:	69bb      	ldr	r3, [r7, #24]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	61bb      	str	r3, [r7, #24]
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	69bb      	ldr	r3, [r7, #24]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1ea:	d0f6      	beq.n	800c1da <create_name+0x42>
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1f6:	d0f0      	beq.n	800c1da <create_name+0x42>
			break;
 800c1f8:	e02a      	b.n	800c250 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	2bfe      	cmp	r3, #254	@ 0xfe
 800c1fe:	d901      	bls.n	800c204 <create_name+0x6c>
 800c200:	2306      	movs	r3, #6
 800c202:	e17d      	b.n	800c500 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c204:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c206:	b2db      	uxtb	r3, r3
 800c208:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c20a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c20c:	2101      	movs	r1, #1
 800c20e:	4618      	mov	r0, r3
 800c210:	f002 f91a 	bl	800e448 <ff_convert>
 800c214:	4603      	mov	r3, r0
 800c216:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c218:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d101      	bne.n	800c222 <create_name+0x8a>
 800c21e:	2306      	movs	r3, #6
 800c220:	e16e      	b.n	800c500 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c222:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c224:	2b7f      	cmp	r3, #127	@ 0x7f
 800c226:	d809      	bhi.n	800c23c <create_name+0xa4>
 800c228:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c22a:	4619      	mov	r1, r3
 800c22c:	488d      	ldr	r0, [pc, #564]	@ (800c464 <create_name+0x2cc>)
 800c22e:	f7fe fafc 	bl	800a82a <chk_chr>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <create_name+0xa4>
 800c238:	2306      	movs	r3, #6
 800c23a:	e161      	b.n	800c500 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	1c5a      	adds	r2, r3, #1
 800c240:	617a      	str	r2, [r7, #20]
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4413      	add	r3, r2
 800c248:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c24a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c24c:	e7b4      	b.n	800c1b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c24e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	69bb      	ldr	r3, [r7, #24]
 800c254:	441a      	add	r2, r3
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c25a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c25c:	2b1f      	cmp	r3, #31
 800c25e:	d801      	bhi.n	800c264 <create_name+0xcc>
 800c260:	2304      	movs	r3, #4
 800c262:	e000      	b.n	800c266 <create_name+0xce>
 800c264:	2300      	movs	r3, #0
 800c266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c26a:	e011      	b.n	800c290 <create_name+0xf8>
		w = lfn[di - 1];
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c272:	3b01      	subs	r3, #1
 800c274:	005b      	lsls	r3, r3, #1
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c27e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c280:	2b20      	cmp	r3, #32
 800c282:	d002      	beq.n	800c28a <create_name+0xf2>
 800c284:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c286:	2b2e      	cmp	r3, #46	@ 0x2e
 800c288:	d106      	bne.n	800c298 <create_name+0x100>
		di--;
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	3b01      	subs	r3, #1
 800c28e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1ea      	bne.n	800c26c <create_name+0xd4>
 800c296:	e000      	b.n	800c29a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c298:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <create_name+0x118>
 800c2ac:	2306      	movs	r3, #6
 800c2ae:	e127      	b.n	800c500 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	3324      	adds	r3, #36	@ 0x24
 800c2b4:	220b      	movs	r2, #11
 800c2b6:	2120      	movs	r1, #32
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7fe fa74 	bl	800a7a6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61bb      	str	r3, [r7, #24]
 800c2c2:	e002      	b.n	800c2ca <create_name+0x132>
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	61bb      	str	r3, [r7, #24]
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	005b      	lsls	r3, r3, #1
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	2b20      	cmp	r3, #32
 800c2d6:	d0f5      	beq.n	800c2c4 <create_name+0x12c>
 800c2d8:	69bb      	ldr	r3, [r7, #24]
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4413      	add	r3, r2
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2e4:	d0ee      	beq.n	800c2c4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d009      	beq.n	800c300 <create_name+0x168>
 800c2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c2f0:	f043 0303 	orr.w	r3, r3, #3
 800c2f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c2f8:	e002      	b.n	800c300 <create_name+0x168>
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	617b      	str	r3, [r7, #20]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d009      	beq.n	800c31a <create_name+0x182>
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c30c:	3b01      	subs	r3, #1
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	4413      	add	r3, r2
 800c314:	881b      	ldrh	r3, [r3, #0]
 800c316:	2b2e      	cmp	r3, #46	@ 0x2e
 800c318:	d1ef      	bne.n	800c2fa <create_name+0x162>

	i = b = 0; ni = 8;
 800c31a:	2300      	movs	r3, #0
 800c31c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c320:	2300      	movs	r3, #0
 800c322:	623b      	str	r3, [r7, #32]
 800c324:	2308      	movs	r3, #8
 800c326:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c328:	69bb      	ldr	r3, [r7, #24]
 800c32a:	1c5a      	adds	r2, r3, #1
 800c32c:	61ba      	str	r2, [r7, #24]
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	4413      	add	r3, r2
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c338:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 8090 	beq.w	800c460 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c340:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c342:	2b20      	cmp	r3, #32
 800c344:	d006      	beq.n	800c354 <create_name+0x1bc>
 800c346:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c348:	2b2e      	cmp	r3, #46	@ 0x2e
 800c34a:	d10a      	bne.n	800c362 <create_name+0x1ca>
 800c34c:	69ba      	ldr	r2, [r7, #24]
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	429a      	cmp	r2, r3
 800c352:	d006      	beq.n	800c362 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c354:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c358:	f043 0303 	orr.w	r3, r3, #3
 800c35c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c360:	e07d      	b.n	800c45e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c362:	6a3a      	ldr	r2, [r7, #32]
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	429a      	cmp	r2, r3
 800c368:	d203      	bcs.n	800c372 <create_name+0x1da>
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	429a      	cmp	r2, r3
 800c370:	d123      	bne.n	800c3ba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	2b0b      	cmp	r3, #11
 800c376:	d106      	bne.n	800c386 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c37c:	f043 0303 	orr.w	r3, r3, #3
 800c380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c384:	e075      	b.n	800c472 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d005      	beq.n	800c39a <create_name+0x202>
 800c38e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c392:	f043 0303 	orr.w	r3, r3, #3
 800c396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c39a:	69ba      	ldr	r2, [r7, #24]
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d866      	bhi.n	800c470 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	61bb      	str	r3, [r7, #24]
 800c3a6:	2308      	movs	r3, #8
 800c3a8:	623b      	str	r3, [r7, #32]
 800c3aa:	230b      	movs	r3, #11
 800c3ac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c3ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c3b8:	e051      	b.n	800c45e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c3ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3bc:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3be:	d914      	bls.n	800c3ea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c3c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f002 f83f 	bl	800e448 <ff_convert>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c3ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <create_name+0x246>
 800c3d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3d6:	3b80      	subs	r3, #128	@ 0x80
 800c3d8:	4a23      	ldr	r2, [pc, #140]	@ (800c468 <create_name+0x2d0>)
 800c3da:	5cd3      	ldrb	r3, [r2, r3]
 800c3dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c3de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c3e2:	f043 0302 	orr.w	r3, r3, #2
 800c3e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c3ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d007      	beq.n	800c400 <create_name+0x268>
 800c3f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	481d      	ldr	r0, [pc, #116]	@ (800c46c <create_name+0x2d4>)
 800c3f6:	f7fe fa18 	bl	800a82a <chk_chr>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d008      	beq.n	800c412 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c400:	235f      	movs	r3, #95	@ 0x5f
 800c402:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c408:	f043 0303 	orr.w	r3, r3, #3
 800c40c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c410:	e01b      	b.n	800c44a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c412:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c414:	2b40      	cmp	r3, #64	@ 0x40
 800c416:	d909      	bls.n	800c42c <create_name+0x294>
 800c418:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c41a:	2b5a      	cmp	r3, #90	@ 0x5a
 800c41c:	d806      	bhi.n	800c42c <create_name+0x294>
					b |= 2;
 800c41e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c422:	f043 0302 	orr.w	r3, r3, #2
 800c426:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c42a:	e00e      	b.n	800c44a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c42c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c42e:	2b60      	cmp	r3, #96	@ 0x60
 800c430:	d90b      	bls.n	800c44a <create_name+0x2b2>
 800c432:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c434:	2b7a      	cmp	r3, #122	@ 0x7a
 800c436:	d808      	bhi.n	800c44a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c438:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c43c:	f043 0301 	orr.w	r3, r3, #1
 800c440:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c444:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c446:	3b20      	subs	r3, #32
 800c448:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c44a:	6a3b      	ldr	r3, [r7, #32]
 800c44c:	1c5a      	adds	r2, r3, #1
 800c44e:	623a      	str	r2, [r7, #32]
 800c450:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c452:	b2d1      	uxtb	r1, r2
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	4413      	add	r3, r2
 800c458:	460a      	mov	r2, r1
 800c45a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c45e:	e763      	b.n	800c328 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c460:	bf00      	nop
 800c462:	e006      	b.n	800c472 <create_name+0x2da>
 800c464:	0800fc28 	.word	0x0800fc28
 800c468:	0800fccc 	.word	0x0800fccc
 800c46c:	0800fc34 	.word	0x0800fc34
			if (si > di) break;			/* No extension */
 800c470:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c478:	2be5      	cmp	r3, #229	@ 0xe5
 800c47a:	d103      	bne.n	800c484 <create_name+0x2ec>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2205      	movs	r2, #5
 800c480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	2b08      	cmp	r3, #8
 800c488:	d104      	bne.n	800c494 <create_name+0x2fc>
 800c48a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c494:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c498:	f003 030c 	and.w	r3, r3, #12
 800c49c:	2b0c      	cmp	r3, #12
 800c49e:	d005      	beq.n	800c4ac <create_name+0x314>
 800c4a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c4a4:	f003 0303 	and.w	r3, r3, #3
 800c4a8:	2b03      	cmp	r3, #3
 800c4aa:	d105      	bne.n	800c4b8 <create_name+0x320>
 800c4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4b0:	f043 0302 	orr.w	r3, r3, #2
 800c4b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d117      	bne.n	800c4f4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c4c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c4c8:	f003 0303 	and.w	r3, r3, #3
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d105      	bne.n	800c4dc <create_name+0x344>
 800c4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4d4:	f043 0310 	orr.w	r3, r3, #16
 800c4d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c4dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c4e0:	f003 030c 	and.w	r3, r3, #12
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	d105      	bne.n	800c4f4 <create_name+0x35c>
 800c4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4ec:	f043 0308 	orr.w	r3, r3, #8
 800c4f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c4fa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800c4fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c500:	4618      	mov	r0, r3
 800c502:	3728      	adds	r7, #40	@ 0x28
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c516:	693b      	ldr	r3, [r7, #16]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c51c:	e002      	b.n	800c524 <follow_path+0x1c>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	3301      	adds	r3, #1
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	2b2f      	cmp	r3, #47	@ 0x2f
 800c52a:	d0f8      	beq.n	800c51e <follow_path+0x16>
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	2b5c      	cmp	r3, #92	@ 0x5c
 800c532:	d0f4      	beq.n	800c51e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	2200      	movs	r2, #0
 800c538:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	2b1f      	cmp	r3, #31
 800c540:	d80a      	bhi.n	800c558 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2280      	movs	r2, #128	@ 0x80
 800c546:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c54a:	2100      	movs	r1, #0
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7fe ff16 	bl	800b37e <dir_sdi>
 800c552:	4603      	mov	r3, r0
 800c554:	75fb      	strb	r3, [r7, #23]
 800c556:	e048      	b.n	800c5ea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c558:	463b      	mov	r3, r7
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f7ff fe1b 	bl	800c198 <create_name>
 800c562:	4603      	mov	r3, r0
 800c564:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c566:	7dfb      	ldrb	r3, [r7, #23]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d139      	bne.n	800c5e0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff fb7d 	bl	800bc6c <dir_find>
 800c572:	4603      	mov	r3, r0
 800c574:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c57c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c57e:	7dfb      	ldrb	r3, [r7, #23]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00a      	beq.n	800c59a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c584:	7dfb      	ldrb	r3, [r7, #23]
 800c586:	2b04      	cmp	r3, #4
 800c588:	d12c      	bne.n	800c5e4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c58a:	7afb      	ldrb	r3, [r7, #11]
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	d127      	bne.n	800c5e4 <follow_path+0xdc>
 800c594:	2305      	movs	r3, #5
 800c596:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c598:	e024      	b.n	800c5e4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	f003 0304 	and.w	r3, r3, #4
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d121      	bne.n	800c5e8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	799b      	ldrb	r3, [r3, #6]
 800c5a8:	f003 0310 	and.w	r3, r3, #16
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d102      	bne.n	800c5b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c5b0:	2305      	movs	r3, #5
 800c5b2:	75fb      	strb	r3, [r7, #23]
 800c5b4:	e019      	b.n	800c5ea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	68fa      	ldr	r2, [r7, #12]
 800c5c2:	8992      	ldrh	r2, [r2, #12]
 800c5c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c5c8:	fb00 f202 	mul.w	r2, r0, r2
 800c5cc:	1a9b      	subs	r3, r3, r2
 800c5ce:	440b      	add	r3, r1
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f7ff f879 	bl	800b6ca <ld_clust>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5de:	e7bb      	b.n	800c558 <follow_path+0x50>
			if (res != FR_OK) break;
 800c5e0:	bf00      	nop
 800c5e2:	e002      	b.n	800c5ea <follow_path+0xe2>
				break;
 800c5e4:	bf00      	nop
 800c5e6:	e000      	b.n	800c5ea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c5e8:	bf00      	nop
			}
		}
	}

	return res;
 800c5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3718      	adds	r7, #24
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c600:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d031      	beq.n	800c66e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	617b      	str	r3, [r7, #20]
 800c610:	e002      	b.n	800c618 <get_ldnumber+0x24>
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	3301      	adds	r3, #1
 800c616:	617b      	str	r3, [r7, #20]
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	2b1f      	cmp	r3, #31
 800c61e:	d903      	bls.n	800c628 <get_ldnumber+0x34>
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b3a      	cmp	r3, #58	@ 0x3a
 800c626:	d1f4      	bne.n	800c612 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	2b3a      	cmp	r3, #58	@ 0x3a
 800c62e:	d11c      	bne.n	800c66a <get_ldnumber+0x76>
			tp = *path;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	1c5a      	adds	r2, r3, #1
 800c63a:	60fa      	str	r2, [r7, #12]
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	3b30      	subs	r3, #48	@ 0x30
 800c640:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	2b09      	cmp	r3, #9
 800c646:	d80e      	bhi.n	800c666 <get_ldnumber+0x72>
 800c648:	68fa      	ldr	r2, [r7, #12]
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d10a      	bne.n	800c666 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d107      	bne.n	800c666 <get_ldnumber+0x72>
					vol = (int)i;
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	3301      	adds	r3, #1
 800c65e:	617b      	str	r3, [r7, #20]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	e002      	b.n	800c670 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c66a:	2300      	movs	r3, #0
 800c66c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c66e:	693b      	ldr	r3, [r7, #16]
}
 800c670:	4618      	mov	r0, r3
 800c672:	371c      	adds	r7, #28
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr

0800c67c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
 800c684:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	70da      	strb	r2, [r3, #3]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f04f 32ff 	mov.w	r2, #4294967295
 800c692:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c694:	6839      	ldr	r1, [r7, #0]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7fe fa92 	bl	800abc0 <move_window>
 800c69c:	4603      	mov	r3, r0
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d001      	beq.n	800c6a6 <check_fs+0x2a>
 800c6a2:	2304      	movs	r3, #4
 800c6a4:	e038      	b.n	800c718 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3338      	adds	r3, #56	@ 0x38
 800c6aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fd ffd6 	bl	800a660 <ld_word>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d001      	beq.n	800c6c4 <check_fs+0x48>
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	e029      	b.n	800c718 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c6ca:	2be9      	cmp	r3, #233	@ 0xe9
 800c6cc:	d009      	beq.n	800c6e2 <check_fs+0x66>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c6d4:	2beb      	cmp	r3, #235	@ 0xeb
 800c6d6:	d11e      	bne.n	800c716 <check_fs+0x9a>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c6de:	2b90      	cmp	r3, #144	@ 0x90
 800c6e0:	d119      	bne.n	800c716 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3338      	adds	r3, #56	@ 0x38
 800c6e6:	3336      	adds	r3, #54	@ 0x36
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fd ffd1 	bl	800a690 <ld_dword>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c6f4:	4a0a      	ldr	r2, [pc, #40]	@ (800c720 <check_fs+0xa4>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d101      	bne.n	800c6fe <check_fs+0x82>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	e00c      	b.n	800c718 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	3338      	adds	r3, #56	@ 0x38
 800c702:	3352      	adds	r3, #82	@ 0x52
 800c704:	4618      	mov	r0, r3
 800c706:	f7fd ffc3 	bl	800a690 <ld_dword>
 800c70a:	4603      	mov	r3, r0
 800c70c:	4a05      	ldr	r2, [pc, #20]	@ (800c724 <check_fs+0xa8>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d101      	bne.n	800c716 <check_fs+0x9a>
 800c712:	2300      	movs	r3, #0
 800c714:	e000      	b.n	800c718 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c716:	2302      	movs	r3, #2
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	00544146 	.word	0x00544146
 800c724:	33544146 	.word	0x33544146

0800c728 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b096      	sub	sp, #88	@ 0x58
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	2200      	movs	r2, #0
 800c73a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c73c:	68f8      	ldr	r0, [r7, #12]
 800c73e:	f7ff ff59 	bl	800c5f4 <get_ldnumber>
 800c742:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c746:	2b00      	cmp	r3, #0
 800c748:	da01      	bge.n	800c74e <find_volume+0x26>
 800c74a:	230b      	movs	r3, #11
 800c74c:	e265      	b.n	800cc1a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c74e:	4a9f      	ldr	r2, [pc, #636]	@ (800c9cc <find_volume+0x2a4>)
 800c750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c756:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <find_volume+0x3a>
 800c75e:	230c      	movs	r3, #12
 800c760:	e25b      	b.n	800cc1a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c766:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c768:	79fb      	ldrb	r3, [r7, #7]
 800c76a:	f023 0301 	bic.w	r3, r3, #1
 800c76e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d01a      	beq.n	800c7ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	785b      	ldrb	r3, [r3, #1]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7f4 fa0d 	bl	8000b9c <disk_status>
 800c782:	4603      	mov	r3, r0
 800c784:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c788:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10c      	bne.n	800c7ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c794:	79fb      	ldrb	r3, [r7, #7]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d007      	beq.n	800c7aa <find_volume+0x82>
 800c79a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c79e:	f003 0304 	and.w	r3, r3, #4
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d001      	beq.n	800c7aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c7a6:	230a      	movs	r3, #10
 800c7a8:	e237      	b.n	800cc1a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	e235      	b.n	800cc1a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7be:	785b      	ldrb	r3, [r3, #1]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7f4 fa05 	bl	8000bd0 <disk_initialize>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c7cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7d0:	f003 0301 	and.w	r3, r3, #1
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d001      	beq.n	800c7dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e21e      	b.n	800cc1a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c7dc:	79fb      	ldrb	r3, [r7, #7]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <find_volume+0xca>
 800c7e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c7e6:	f003 0304 	and.w	r3, r3, #4
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d001      	beq.n	800c7f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c7ee:	230a      	movs	r3, #10
 800c7f0:	e213      	b.n	800cc1a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f4:	7858      	ldrb	r0, [r3, #1]
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	2102      	movs	r1, #2
 800c7fe:	f7f4 fa4f 	bl	8000ca0 <disk_ioctl>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <find_volume+0xe4>
 800c808:	2301      	movs	r3, #1
 800c80a:	e206      	b.n	800cc1a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80e:	899b      	ldrh	r3, [r3, #12]
 800c810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c814:	d80d      	bhi.n	800c832 <find_volume+0x10a>
 800c816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c818:	899b      	ldrh	r3, [r3, #12]
 800c81a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c81e:	d308      	bcc.n	800c832 <find_volume+0x10a>
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	899b      	ldrh	r3, [r3, #12]
 800c824:	461a      	mov	r2, r3
 800c826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c828:	899b      	ldrh	r3, [r3, #12]
 800c82a:	3b01      	subs	r3, #1
 800c82c:	4013      	ands	r3, r2
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d001      	beq.n	800c836 <find_volume+0x10e>
 800c832:	2301      	movs	r3, #1
 800c834:	e1f1      	b.n	800cc1a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c836:	2300      	movs	r3, #0
 800c838:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c83a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c83c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c83e:	f7ff ff1d 	bl	800c67c <check_fs>
 800c842:	4603      	mov	r3, r0
 800c844:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c848:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d149      	bne.n	800c8e4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c850:	2300      	movs	r3, #0
 800c852:	643b      	str	r3, [r7, #64]	@ 0x40
 800c854:	e01e      	b.n	800c894 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c858:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c85c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c85e:	011b      	lsls	r3, r3, #4
 800c860:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c864:	4413      	add	r3, r2
 800c866:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c86a:	3304      	adds	r3, #4
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d006      	beq.n	800c880 <find_volume+0x158>
 800c872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c874:	3308      	adds	r3, #8
 800c876:	4618      	mov	r0, r3
 800c878:	f7fd ff0a 	bl	800a690 <ld_dword>
 800c87c:	4602      	mov	r2, r0
 800c87e:	e000      	b.n	800c882 <find_volume+0x15a>
 800c880:	2200      	movs	r2, #0
 800c882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	3358      	adds	r3, #88	@ 0x58
 800c888:	443b      	add	r3, r7
 800c88a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c88e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c890:	3301      	adds	r3, #1
 800c892:	643b      	str	r3, [r7, #64]	@ 0x40
 800c894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c896:	2b03      	cmp	r3, #3
 800c898:	d9dd      	bls.n	800c856 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c89a:	2300      	movs	r3, #0
 800c89c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <find_volume+0x182>
 800c8a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c8aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	3358      	adds	r3, #88	@ 0x58
 800c8b0:	443b      	add	r3, r7
 800c8b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c8b6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c8b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d005      	beq.n	800c8ca <find_volume+0x1a2>
 800c8be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c8c0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c8c2:	f7ff fedb 	bl	800c67c <check_fs>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	e000      	b.n	800c8cc <find_volume+0x1a4>
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c8d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d905      	bls.n	800c8e4 <find_volume+0x1bc>
 800c8d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8da:	3301      	adds	r3, #1
 800c8dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	d9e2      	bls.n	800c8aa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c8e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8e8:	2b04      	cmp	r3, #4
 800c8ea:	d101      	bne.n	800c8f0 <find_volume+0x1c8>
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e194      	b.n	800cc1a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c8f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d901      	bls.n	800c8fc <find_volume+0x1d4>
 800c8f8:	230d      	movs	r3, #13
 800c8fa:	e18e      	b.n	800cc1a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fe:	3338      	adds	r3, #56	@ 0x38
 800c900:	330b      	adds	r3, #11
 800c902:	4618      	mov	r0, r3
 800c904:	f7fd feac 	bl	800a660 <ld_word>
 800c908:	4603      	mov	r3, r0
 800c90a:	461a      	mov	r2, r3
 800c90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90e:	899b      	ldrh	r3, [r3, #12]
 800c910:	429a      	cmp	r2, r3
 800c912:	d001      	beq.n	800c918 <find_volume+0x1f0>
 800c914:	230d      	movs	r3, #13
 800c916:	e180      	b.n	800cc1a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91a:	3338      	adds	r3, #56	@ 0x38
 800c91c:	3316      	adds	r3, #22
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fd fe9e 	bl	800a660 <ld_word>
 800c924:	4603      	mov	r3, r0
 800c926:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <find_volume+0x214>
 800c92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c930:	3338      	adds	r3, #56	@ 0x38
 800c932:	3324      	adds	r3, #36	@ 0x24
 800c934:	4618      	mov	r0, r3
 800c936:	f7fd feab 	bl	800a690 <ld_dword>
 800c93a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c940:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c944:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94e:	789b      	ldrb	r3, [r3, #2]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d005      	beq.n	800c960 <find_volume+0x238>
 800c954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c956:	789b      	ldrb	r3, [r3, #2]
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d001      	beq.n	800c960 <find_volume+0x238>
 800c95c:	230d      	movs	r3, #13
 800c95e:	e15c      	b.n	800cc1a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c962:	789b      	ldrb	r3, [r3, #2]
 800c964:	461a      	mov	r2, r3
 800c966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c968:	fb02 f303 	mul.w	r3, r2, r3
 800c96c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c96e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c970:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c974:	461a      	mov	r2, r3
 800c976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c978:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97c:	895b      	ldrh	r3, [r3, #10]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d008      	beq.n	800c994 <find_volume+0x26c>
 800c982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c984:	895b      	ldrh	r3, [r3, #10]
 800c986:	461a      	mov	r2, r3
 800c988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98a:	895b      	ldrh	r3, [r3, #10]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	4013      	ands	r3, r2
 800c990:	2b00      	cmp	r3, #0
 800c992:	d001      	beq.n	800c998 <find_volume+0x270>
 800c994:	230d      	movs	r3, #13
 800c996:	e140      	b.n	800cc1a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99a:	3338      	adds	r3, #56	@ 0x38
 800c99c:	3311      	adds	r3, #17
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7fd fe5e 	bl	800a660 <ld_word>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c9ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ae:	891b      	ldrh	r3, [r3, #8]
 800c9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c9b2:	8992      	ldrh	r2, [r2, #12]
 800c9b4:	0952      	lsrs	r2, r2, #5
 800c9b6:	b292      	uxth	r2, r2
 800c9b8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9bc:	fb01 f202 	mul.w	r2, r1, r2
 800c9c0:	1a9b      	subs	r3, r3, r2
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d003      	beq.n	800c9d0 <find_volume+0x2a8>
 800c9c8:	230d      	movs	r3, #13
 800c9ca:	e126      	b.n	800cc1a <find_volume+0x4f2>
 800c9cc:	20003a74 	.word	0x20003a74

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d2:	3338      	adds	r3, #56	@ 0x38
 800c9d4:	3313      	adds	r3, #19
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fd fe42 	bl	800a660 <ld_word>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c9e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d106      	bne.n	800c9f4 <find_volume+0x2cc>
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e8:	3338      	adds	r3, #56	@ 0x38
 800c9ea:	3320      	adds	r3, #32
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fd fe4f 	bl	800a690 <ld_dword>
 800c9f2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f6:	3338      	adds	r3, #56	@ 0x38
 800c9f8:	330e      	adds	r3, #14
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fd fe30 	bl	800a660 <ld_word>
 800ca00:	4603      	mov	r3, r0
 800ca02:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ca04:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <find_volume+0x2e6>
 800ca0a:	230d      	movs	r3, #13
 800ca0c:	e105      	b.n	800cc1a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ca0e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ca10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca12:	4413      	add	r3, r2
 800ca14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca16:	8911      	ldrh	r1, [r2, #8]
 800ca18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca1a:	8992      	ldrh	r2, [r2, #12]
 800ca1c:	0952      	lsrs	r2, r2, #5
 800ca1e:	b292      	uxth	r2, r2
 800ca20:	fbb1 f2f2 	udiv	r2, r1, r2
 800ca24:	b292      	uxth	r2, r2
 800ca26:	4413      	add	r3, r2
 800ca28:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ca2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d201      	bcs.n	800ca36 <find_volume+0x30e>
 800ca32:	230d      	movs	r3, #13
 800ca34:	e0f1      	b.n	800cc1a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ca36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3a:	1ad3      	subs	r3, r2, r3
 800ca3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca3e:	8952      	ldrh	r2, [r2, #10]
 800ca40:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca44:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d101      	bne.n	800ca50 <find_volume+0x328>
 800ca4c:	230d      	movs	r3, #13
 800ca4e:	e0e4      	b.n	800cc1a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ca50:	2303      	movs	r3, #3
 800ca52:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ca56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca58:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d802      	bhi.n	800ca66 <find_volume+0x33e>
 800ca60:	2302      	movs	r3, #2
 800ca62:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ca66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca68:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d802      	bhi.n	800ca76 <find_volume+0x34e>
 800ca70:	2301      	movs	r3, #1
 800ca72:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ca76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca78:	1c9a      	adds	r2, r3, #2
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ca7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca80:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca82:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ca84:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ca86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca88:	441a      	add	r2, r3
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ca8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca92:	441a      	add	r2, r3
 800ca94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca96:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800ca98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d11e      	bne.n	800cade <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800caa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa2:	3338      	adds	r3, #56	@ 0x38
 800caa4:	332a      	adds	r3, #42	@ 0x2a
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fd fdda 	bl	800a660 <ld_word>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <find_volume+0x38e>
 800cab2:	230d      	movs	r3, #13
 800cab4:	e0b1      	b.n	800cc1a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab8:	891b      	ldrh	r3, [r3, #8]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <find_volume+0x39a>
 800cabe:	230d      	movs	r3, #13
 800cac0:	e0ab      	b.n	800cc1a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac4:	3338      	adds	r3, #56	@ 0x38
 800cac6:	332c      	adds	r3, #44	@ 0x2c
 800cac8:	4618      	mov	r0, r3
 800caca:	f7fd fde1 	bl	800a690 <ld_dword>
 800cace:	4602      	mov	r2, r0
 800cad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	647b      	str	r3, [r7, #68]	@ 0x44
 800cadc:	e01f      	b.n	800cb1e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae0:	891b      	ldrh	r3, [r3, #8]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d101      	bne.n	800caea <find_volume+0x3c2>
 800cae6:	230d      	movs	r3, #13
 800cae8:	e097      	b.n	800cc1a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800caea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800caee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800caf0:	441a      	add	r2, r3
 800caf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caf4:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800caf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d103      	bne.n	800cb06 <find_volume+0x3de>
 800cafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	005b      	lsls	r3, r3, #1
 800cb04:	e00a      	b.n	800cb1c <find_volume+0x3f4>
 800cb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb08:	69da      	ldr	r2, [r3, #28]
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	4413      	add	r3, r2
 800cb10:	085a      	lsrs	r2, r3, #1
 800cb12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb14:	69db      	ldr	r3, [r3, #28]
 800cb16:	f003 0301 	and.w	r3, r3, #1
 800cb1a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cb1c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb20:	6a1a      	ldr	r2, [r3, #32]
 800cb22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb24:	899b      	ldrh	r3, [r3, #12]
 800cb26:	4619      	mov	r1, r3
 800cb28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb2a:	440b      	add	r3, r1
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb30:	8989      	ldrh	r1, [r1, #12]
 800cb32:	fbb3 f3f1 	udiv	r3, r3, r1
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d201      	bcs.n	800cb3e <find_volume+0x416>
 800cb3a:	230d      	movs	r3, #13
 800cb3c:	e06d      	b.n	800cc1a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cb3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb40:	f04f 32ff 	mov.w	r2, #4294967295
 800cb44:	619a      	str	r2, [r3, #24]
 800cb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb48:	699a      	ldr	r2, [r3, #24]
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb4c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800cb4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb50:	2280      	movs	r2, #128	@ 0x80
 800cb52:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cb54:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d149      	bne.n	800cbf0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5e:	3338      	adds	r3, #56	@ 0x38
 800cb60:	3330      	adds	r3, #48	@ 0x30
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fd fd7c 	bl	800a660 <ld_word>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d140      	bne.n	800cbf0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cb6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb70:	3301      	adds	r3, #1
 800cb72:	4619      	mov	r1, r3
 800cb74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cb76:	f7fe f823 	bl	800abc0 <move_window>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d137      	bne.n	800cbf0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800cb80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb82:	2200      	movs	r2, #0
 800cb84:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb88:	3338      	adds	r3, #56	@ 0x38
 800cb8a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7fd fd66 	bl	800a660 <ld_word>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d127      	bne.n	800cbf0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba2:	3338      	adds	r3, #56	@ 0x38
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fd fd73 	bl	800a690 <ld_dword>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	4a1d      	ldr	r2, [pc, #116]	@ (800cc24 <find_volume+0x4fc>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d11e      	bne.n	800cbf0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb4:	3338      	adds	r3, #56	@ 0x38
 800cbb6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7fd fd68 	bl	800a690 <ld_dword>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	4a19      	ldr	r2, [pc, #100]	@ (800cc28 <find_volume+0x500>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d113      	bne.n	800cbf0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbca:	3338      	adds	r3, #56	@ 0x38
 800cbcc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fd fd5d 	bl	800a690 <ld_dword>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbda:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbde:	3338      	adds	r3, #56	@ 0x38
 800cbe0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fd fd53 	bl	800a690 <ld_dword>
 800cbea:	4602      	mov	r2, r0
 800cbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbee:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800cbf6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cbf8:	4b0c      	ldr	r3, [pc, #48]	@ (800cc2c <find_volume+0x504>)
 800cbfa:	881b      	ldrh	r3, [r3, #0]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	4b0a      	ldr	r3, [pc, #40]	@ (800cc2c <find_volume+0x504>)
 800cc02:	801a      	strh	r2, [r3, #0]
 800cc04:	4b09      	ldr	r3, [pc, #36]	@ (800cc2c <find_volume+0x504>)
 800cc06:	881a      	ldrh	r2, [r3, #0]
 800cc08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0e:	4a08      	ldr	r2, [pc, #32]	@ (800cc30 <find_volume+0x508>)
 800cc10:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cc12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cc14:	f7fd ff6c 	bl	800aaf0 <clear_lock>
#endif
	return FR_OK;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3758      	adds	r7, #88	@ 0x58
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	41615252 	.word	0x41615252
 800cc28:	61417272 	.word	0x61417272
 800cc2c:	20003a78 	.word	0x20003a78
 800cc30:	20003a9c 	.word	0x20003a9c

0800cc34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cc3e:	2309      	movs	r3, #9
 800cc40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d01c      	beq.n	800cc82 <validate+0x4e>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d018      	beq.n	800cc82 <validate+0x4e>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d013      	beq.n	800cc82 <validate+0x4e>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	889a      	ldrh	r2, [r3, #4]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	88db      	ldrh	r3, [r3, #6]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d10c      	bne.n	800cc82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	785b      	ldrb	r3, [r3, #1]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7f3 ff94 	bl	8000b9c <disk_status>
 800cc74:	4603      	mov	r3, r0
 800cc76:	f003 0301 	and.w	r3, r3, #1
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d101      	bne.n	800cc82 <validate+0x4e>
			res = FR_OK;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d102      	bne.n	800cc8e <validate+0x5a>
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	e000      	b.n	800cc90 <validate+0x5c>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	6013      	str	r3, [r2, #0]
	return res;
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
	...

0800cca0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b088      	sub	sp, #32
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ccb2:	f107 0310 	add.w	r3, r7, #16
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fc9c 	bl	800c5f4 <get_ldnumber>
 800ccbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	da01      	bge.n	800ccc8 <f_mount+0x28>
 800ccc4:	230b      	movs	r3, #11
 800ccc6:	e02b      	b.n	800cd20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ccc8:	4a17      	ldr	r2, [pc, #92]	@ (800cd28 <f_mount+0x88>)
 800ccca:	69fb      	ldr	r3, [r7, #28]
 800cccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ccd2:	69bb      	ldr	r3, [r7, #24]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d005      	beq.n	800cce4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ccd8:	69b8      	ldr	r0, [r7, #24]
 800ccda:	f7fd ff09 	bl	800aaf0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	2200      	movs	r2, #0
 800cce2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	490d      	ldr	r1, [pc, #52]	@ (800cd28 <f_mount+0x88>)
 800ccf4:	69fb      	ldr	r3, [r7, #28]
 800ccf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <f_mount+0x66>
 800cd00:	79fb      	ldrb	r3, [r7, #7]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d001      	beq.n	800cd0a <f_mount+0x6a>
 800cd06:	2300      	movs	r3, #0
 800cd08:	e00a      	b.n	800cd20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cd0a:	f107 010c 	add.w	r1, r7, #12
 800cd0e:	f107 0308 	add.w	r3, r7, #8
 800cd12:	2200      	movs	r2, #0
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fd07 	bl	800c728 <find_volume>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3720      	adds	r7, #32
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	20003a74 	.word	0x20003a74

0800cd2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b09a      	sub	sp, #104	@ 0x68
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	4613      	mov	r3, r2
 800cd38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <f_open+0x18>
 800cd40:	2309      	movs	r3, #9
 800cd42:	e1b7      	b.n	800d0b4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cd44:	79fb      	ldrb	r3, [r7, #7]
 800cd46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cd4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cd4c:	79fa      	ldrb	r2, [r7, #7]
 800cd4e:	f107 0114 	add.w	r1, r7, #20
 800cd52:	f107 0308 	add.w	r3, r7, #8
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7ff fce6 	bl	800c728 <find_volume>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800cd62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f040 819b 	bne.w	800d0a2 <f_open+0x376>
		dj.obj.fs = fs;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	f107 0318 	add.w	r3, r7, #24
 800cd76:	4611      	mov	r1, r2
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7ff fbc5 	bl	800c508 <follow_path>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cd84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d118      	bne.n	800cdbe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cd8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800cd90:	b25b      	sxtb	r3, r3
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	da03      	bge.n	800cd9e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cd96:	2306      	movs	r3, #6
 800cd98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cd9c:	e00f      	b.n	800cdbe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd9e:	79fb      	ldrb	r3, [r7, #7]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	bf8c      	ite	hi
 800cda4:	2301      	movhi	r3, #1
 800cda6:	2300      	movls	r3, #0
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f107 0318 	add.w	r3, r7, #24
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7fd fd54 	bl	800a860 <chk_lock>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	f003 031c 	and.w	r3, r3, #28
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d07f      	beq.n	800cec8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cdc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d017      	beq.n	800ce00 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cdd0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	d10e      	bne.n	800cdf6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cdd8:	f7fd fd9e 	bl	800a918 <enq_lock>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d006      	beq.n	800cdf0 <f_open+0xc4>
 800cde2:	f107 0318 	add.w	r3, r7, #24
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff f800 	bl	800bdec <dir_register>
 800cdec:	4603      	mov	r3, r0
 800cdee:	e000      	b.n	800cdf2 <f_open+0xc6>
 800cdf0:	2312      	movs	r3, #18
 800cdf2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	f043 0308 	orr.w	r3, r3, #8
 800cdfc:	71fb      	strb	r3, [r7, #7]
 800cdfe:	e010      	b.n	800ce22 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ce00:	7fbb      	ldrb	r3, [r7, #30]
 800ce02:	f003 0311 	and.w	r3, r3, #17
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <f_open+0xe6>
					res = FR_DENIED;
 800ce0a:	2307      	movs	r3, #7
 800ce0c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ce10:	e007      	b.n	800ce22 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d002      	beq.n	800ce22 <f_open+0xf6>
 800ce1c:	2308      	movs	r3, #8
 800ce1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ce22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d168      	bne.n	800cefc <f_open+0x1d0>
 800ce2a:	79fb      	ldrb	r3, [r7, #7]
 800ce2c:	f003 0308 	and.w	r3, r3, #8
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d063      	beq.n	800cefc <f_open+0x1d0>
				dw = GET_FATTIME();
 800ce34:	f7f3 ff64 	bl	8000d00 <get_fattime>
 800ce38:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3c:	330e      	adds	r3, #14
 800ce3e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fd fc63 	bl	800a70c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ce46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce48:	3316      	adds	r3, #22
 800ce4a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fd fc5d 	bl	800a70c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ce52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce54:	330b      	adds	r3, #11
 800ce56:	2220      	movs	r2, #32
 800ce58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fe fc32 	bl	800b6ca <ld_clust>
 800ce66:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fe fc4a 	bl	800b708 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ce74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce76:	331c      	adds	r3, #28
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fd fc46 	bl	800a70c <st_dword>
					fs->wflag = 1;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	2201      	movs	r2, #1
 800ce84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ce86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d037      	beq.n	800cefc <f_open+0x1d0>
						dw = fs->winsect;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce90:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800ce92:	f107 0318 	add.w	r3, r7, #24
 800ce96:	2200      	movs	r2, #0
 800ce98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe f93a 	bl	800b114 <remove_chain>
 800cea0:	4603      	mov	r3, r0
 800cea2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800cea6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d126      	bne.n	800cefc <f_open+0x1d0>
							res = move_window(fs, dw);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fd fe84 	bl	800abc0 <move_window>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cec2:	3a01      	subs	r2, #1
 800cec4:	615a      	str	r2, [r3, #20]
 800cec6:	e019      	b.n	800cefc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cec8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d115      	bne.n	800cefc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ced0:	7fbb      	ldrb	r3, [r7, #30]
 800ced2:	f003 0310 	and.w	r3, r3, #16
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d003      	beq.n	800cee2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800ceda:	2304      	movs	r3, #4
 800cedc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cee0:	e00c      	b.n	800cefc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	f003 0302 	and.w	r3, r3, #2
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d007      	beq.n	800cefc <f_open+0x1d0>
 800ceec:	7fbb      	ldrb	r3, [r7, #30]
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <f_open+0x1d0>
						res = FR_DENIED;
 800cef6:	2307      	movs	r3, #7
 800cef8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cefc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d126      	bne.n	800cf52 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cf04:	79fb      	ldrb	r3, [r7, #7]
 800cf06:	f003 0308 	and.w	r3, r3, #8
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cf1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	2b01      	cmp	r3, #1
 800cf28:	bf8c      	ite	hi
 800cf2a:	2301      	movhi	r3, #1
 800cf2c:	2300      	movls	r3, #0
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	461a      	mov	r2, r3
 800cf32:	f107 0318 	add.w	r3, r7, #24
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fd fd0f 	bl	800a95c <inc_lock>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	691b      	ldr	r3, [r3, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d102      	bne.n	800cf52 <f_open+0x226>
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cf52:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f040 80a3 	bne.w	800d0a2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf60:	4611      	mov	r1, r2
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe fbb1 	bl	800b6ca <ld_clust>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cf6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf70:	331c      	adds	r3, #28
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fd fb8c 	bl	800a690 <ld_dword>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cf84:	697a      	ldr	r2, [r7, #20]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	88da      	ldrh	r2, [r3, #6]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	79fa      	ldrb	r2, [r7, #7]
 800cf96:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	3330      	adds	r3, #48	@ 0x30
 800cfae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fd fbf6 	bl	800a7a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	f003 0320 	and.w	r3, r3, #32
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d06e      	beq.n	800d0a2 <f_open+0x376>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d06a      	beq.n	800d0a2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	68da      	ldr	r2, [r3, #12]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	895b      	ldrh	r3, [r3, #10]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	899b      	ldrh	r3, [r3, #12]
 800cfde:	fb02 f303 	mul.w	r3, r2, r3
 800cfe2:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	68db      	ldr	r3, [r3, #12]
 800cfee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cff0:	e016      	b.n	800d020 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fd fe9f 	bl	800ad3a <get_fat>
 800cffc:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d000:	2b01      	cmp	r3, #1
 800d002:	d802      	bhi.n	800d00a <f_open+0x2de>
 800d004:	2302      	movs	r3, #2
 800d006:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d00a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d010:	d102      	bne.n	800d018 <f_open+0x2ec>
 800d012:	2301      	movs	r3, #1
 800d014:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d018:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d01a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d020:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d024:	2b00      	cmp	r3, #0
 800d026:	d103      	bne.n	800d030 <f_open+0x304>
 800d028:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d02a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d8e0      	bhi.n	800cff2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d034:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d036:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d131      	bne.n	800d0a2 <f_open+0x376>
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	899b      	ldrh	r3, [r3, #12]
 800d042:	461a      	mov	r2, r3
 800d044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d046:	fbb3 f1f2 	udiv	r1, r3, r2
 800d04a:	fb01 f202 	mul.w	r2, r1, r2
 800d04e:	1a9b      	subs	r3, r3, r2
 800d050:	2b00      	cmp	r3, #0
 800d052:	d026      	beq.n	800d0a2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fd fe4f 	bl	800acfc <clust2sect>
 800d05e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d103      	bne.n	800d06e <f_open+0x342>
						res = FR_INT_ERR;
 800d066:	2302      	movs	r3, #2
 800d068:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d06c:	e019      	b.n	800d0a2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	899b      	ldrh	r3, [r3, #12]
 800d072:	461a      	mov	r2, r3
 800d074:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d076:	fbb3 f2f2 	udiv	r2, r3, r2
 800d07a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d07c:	441a      	add	r2, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	7858      	ldrb	r0, [r3, #1]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6a1a      	ldr	r2, [r3, #32]
 800d090:	2301      	movs	r3, #1
 800d092:	f7f3 fdc5 	bl	8000c20 <disk_read>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d002      	beq.n	800d0a2 <f_open+0x376>
 800d09c:	2301      	movs	r3, #1
 800d09e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d0a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <f_open+0x384>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d0b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3768      	adds	r7, #104	@ 0x68
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b08e      	sub	sp, #56	@ 0x38
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	60f8      	str	r0, [r7, #12]
 800d0c4:	60b9      	str	r1, [r7, #8]
 800d0c6:	607a      	str	r2, [r7, #4]
 800d0c8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f107 0214 	add.w	r2, r7, #20
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7ff fda9 	bl	800cc34 <validate>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d0e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d107      	bne.n	800d100 <f_read+0x44>
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	7d5b      	ldrb	r3, [r3, #21]
 800d0f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d0f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d002      	beq.n	800d106 <f_read+0x4a>
 800d100:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d104:	e135      	b.n	800d372 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	7d1b      	ldrb	r3, [r3, #20]
 800d10a:	f003 0301 	and.w	r3, r3, #1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d101      	bne.n	800d116 <f_read+0x5a>
 800d112:	2307      	movs	r3, #7
 800d114:	e12d      	b.n	800d372 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	6a3b      	ldr	r3, [r7, #32]
 800d126:	429a      	cmp	r2, r3
 800d128:	f240 811e 	bls.w	800d368 <f_read+0x2ac>
 800d12c:	6a3b      	ldr	r3, [r7, #32]
 800d12e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d130:	e11a      	b.n	800d368 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	699b      	ldr	r3, [r3, #24]
 800d136:	697a      	ldr	r2, [r7, #20]
 800d138:	8992      	ldrh	r2, [r2, #12]
 800d13a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d13e:	fb01 f202 	mul.w	r2, r1, r2
 800d142:	1a9b      	subs	r3, r3, r2
 800d144:	2b00      	cmp	r3, #0
 800d146:	f040 80d5 	bne.w	800d2f4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	697a      	ldr	r2, [r7, #20]
 800d150:	8992      	ldrh	r2, [r2, #12]
 800d152:	fbb3 f3f2 	udiv	r3, r3, r2
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	8952      	ldrh	r2, [r2, #10]
 800d15a:	3a01      	subs	r2, #1
 800d15c:	4013      	ands	r3, r2
 800d15e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d12f      	bne.n	800d1c6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	699b      	ldr	r3, [r3, #24]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d103      	bne.n	800d176 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	689b      	ldr	r3, [r3, #8]
 800d172:	633b      	str	r3, [r7, #48]	@ 0x30
 800d174:	e013      	b.n	800d19e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d007      	beq.n	800d18e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	4619      	mov	r1, r3
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7fe f8c2 	bl	800b30e <clmt_clust>
 800d18a:	6338      	str	r0, [r7, #48]	@ 0x30
 800d18c:	e007      	b.n	800d19e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d18e:	68fa      	ldr	r2, [r7, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	69db      	ldr	r3, [r3, #28]
 800d194:	4619      	mov	r1, r3
 800d196:	4610      	mov	r0, r2
 800d198:	f7fd fdcf 	bl	800ad3a <get_fat>
 800d19c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d804      	bhi.n	800d1ae <f_read+0xf2>
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	755a      	strb	r2, [r3, #21]
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	e0e1      	b.n	800d372 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b4:	d104      	bne.n	800d1c0 <f_read+0x104>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	755a      	strb	r2, [r3, #21]
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e0d8      	b.n	800d372 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	f7fd fd94 	bl	800acfc <clust2sect>
 800d1d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d104      	bne.n	800d1e6 <f_read+0x12a>
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	755a      	strb	r2, [r3, #21]
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	e0c5      	b.n	800d372 <f_read+0x2b6>
			sect += csect;
 800d1e6:	69ba      	ldr	r2, [r7, #24]
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	899b      	ldrh	r3, [r3, #12]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1fa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d1fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d041      	beq.n	800d286 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d202:	69fa      	ldr	r2, [r7, #28]
 800d204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d206:	4413      	add	r3, r2
 800d208:	697a      	ldr	r2, [r7, #20]
 800d20a:	8952      	ldrh	r2, [r2, #10]
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d905      	bls.n	800d21c <f_read+0x160>
					cc = fs->csize - csect;
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	895b      	ldrh	r3, [r3, #10]
 800d214:	461a      	mov	r2, r3
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	7858      	ldrb	r0, [r3, #1]
 800d220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d222:	69ba      	ldr	r2, [r7, #24]
 800d224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d226:	f7f3 fcfb 	bl	8000c20 <disk_read>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d004      	beq.n	800d23a <f_read+0x17e>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2201      	movs	r2, #1
 800d234:	755a      	strb	r2, [r3, #21]
 800d236:	2301      	movs	r3, #1
 800d238:	e09b      	b.n	800d372 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	7d1b      	ldrb	r3, [r3, #20]
 800d23e:	b25b      	sxtb	r3, r3
 800d240:	2b00      	cmp	r3, #0
 800d242:	da18      	bge.n	800d276 <f_read+0x1ba>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6a1a      	ldr	r2, [r3, #32]
 800d248:	69bb      	ldr	r3, [r7, #24]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d24e:	429a      	cmp	r2, r3
 800d250:	d911      	bls.n	800d276 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6a1a      	ldr	r2, [r3, #32]
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	1ad3      	subs	r3, r2, r3
 800d25a:	697a      	ldr	r2, [r7, #20]
 800d25c:	8992      	ldrh	r2, [r2, #12]
 800d25e:	fb02 f303 	mul.w	r3, r2, r3
 800d262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d264:	18d0      	adds	r0, r2, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	899b      	ldrh	r3, [r3, #12]
 800d270:	461a      	mov	r2, r3
 800d272:	f7fd fa77 	bl	800a764 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	899b      	ldrh	r3, [r3, #12]
 800d27a:	461a      	mov	r2, r3
 800d27c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27e:	fb02 f303 	mul.w	r3, r2, r3
 800d282:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d284:	e05c      	b.n	800d340 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6a1b      	ldr	r3, [r3, #32]
 800d28a:	69ba      	ldr	r2, [r7, #24]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d02e      	beq.n	800d2ee <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	7d1b      	ldrb	r3, [r3, #20]
 800d294:	b25b      	sxtb	r3, r3
 800d296:	2b00      	cmp	r3, #0
 800d298:	da18      	bge.n	800d2cc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	7858      	ldrb	r0, [r3, #1]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6a1a      	ldr	r2, [r3, #32]
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	f7f3 fcd9 	bl	8000c60 <disk_write>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d004      	beq.n	800d2be <f_read+0x202>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	755a      	strb	r2, [r3, #21]
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e059      	b.n	800d372 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	7d1b      	ldrb	r3, [r3, #20]
 800d2c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	7858      	ldrb	r0, [r3, #1]
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	69ba      	ldr	r2, [r7, #24]
 800d2da:	f7f3 fca1 	bl	8000c20 <disk_read>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d004      	beq.n	800d2ee <f_read+0x232>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	755a      	strb	r2, [r3, #21]
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e041      	b.n	800d372 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	69ba      	ldr	r2, [r7, #24]
 800d2f2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	899b      	ldrh	r3, [r3, #12]
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	697a      	ldr	r2, [r7, #20]
 800d300:	8992      	ldrh	r2, [r2, #12]
 800d302:	fbb3 f1f2 	udiv	r1, r3, r2
 800d306:	fb01 f202 	mul.w	r2, r1, r2
 800d30a:	1a9b      	subs	r3, r3, r2
 800d30c:	1ac3      	subs	r3, r0, r3
 800d30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	429a      	cmp	r2, r3
 800d316:	d901      	bls.n	800d31c <f_read+0x260>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	699b      	ldr	r3, [r3, #24]
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	8992      	ldrh	r2, [r2, #12]
 800d32a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d32e:	fb00 f202 	mul.w	r2, r0, r2
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	440b      	add	r3, r1
 800d336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d338:	4619      	mov	r1, r3
 800d33a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d33c:	f7fd fa12 	bl	800a764 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d344:	4413      	add	r3, r2
 800d346:	627b      	str	r3, [r7, #36]	@ 0x24
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	699a      	ldr	r2, [r3, #24]
 800d34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34e:	441a      	add	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	619a      	str	r2, [r3, #24]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d35a:	441a      	add	r2, r3
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	601a      	str	r2, [r3, #0]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d364:	1ad3      	subs	r3, r2, r3
 800d366:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f47f aee1 	bne.w	800d132 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3738      	adds	r7, #56	@ 0x38
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}

0800d37a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d37a:	b580      	push	{r7, lr}
 800d37c:	b08c      	sub	sp, #48	@ 0x30
 800d37e:	af00      	add	r7, sp, #0
 800d380:	60f8      	str	r0, [r7, #12]
 800d382:	60b9      	str	r1, [r7, #8]
 800d384:	607a      	str	r2, [r7, #4]
 800d386:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	2200      	movs	r2, #0
 800d390:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f107 0210 	add.w	r2, r7, #16
 800d398:	4611      	mov	r1, r2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff fc4a 	bl	800cc34 <validate>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d3a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d107      	bne.n	800d3be <f_write+0x44>
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	7d5b      	ldrb	r3, [r3, #21]
 800d3b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d002      	beq.n	800d3c4 <f_write+0x4a>
 800d3be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d3c2:	e16a      	b.n	800d69a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	7d1b      	ldrb	r3, [r3, #20]
 800d3c8:	f003 0302 	and.w	r3, r3, #2
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <f_write+0x5a>
 800d3d0:	2307      	movs	r3, #7
 800d3d2:	e162      	b.n	800d69a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	699a      	ldr	r2, [r3, #24]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	441a      	add	r2, r3
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	699b      	ldr	r3, [r3, #24]
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	f080 814c 	bcs.w	800d67e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	699b      	ldr	r3, [r3, #24]
 800d3ea:	43db      	mvns	r3, r3
 800d3ec:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d3ee:	e146      	b.n	800d67e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	699b      	ldr	r3, [r3, #24]
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	8992      	ldrh	r2, [r2, #12]
 800d3f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d3fc:	fb01 f202 	mul.w	r2, r1, r2
 800d400:	1a9b      	subs	r3, r3, r2
 800d402:	2b00      	cmp	r3, #0
 800d404:	f040 80f1 	bne.w	800d5ea <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	8992      	ldrh	r2, [r2, #12]
 800d410:	fbb3 f3f2 	udiv	r3, r3, r2
 800d414:	693a      	ldr	r2, [r7, #16]
 800d416:	8952      	ldrh	r2, [r2, #10]
 800d418:	3a01      	subs	r2, #1
 800d41a:	4013      	ands	r3, r2
 800d41c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d143      	bne.n	800d4ac <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	699b      	ldr	r3, [r3, #24]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10c      	bne.n	800d446 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d434:	2b00      	cmp	r3, #0
 800d436:	d11a      	bne.n	800d46e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2100      	movs	r1, #0
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fd fece 	bl	800b1de <create_chain>
 800d442:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d444:	e013      	b.n	800d46e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	699b      	ldr	r3, [r3, #24]
 800d452:	4619      	mov	r1, r3
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7fd ff5a 	bl	800b30e <clmt_clust>
 800d45a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d45c:	e007      	b.n	800d46e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	69db      	ldr	r3, [r3, #28]
 800d464:	4619      	mov	r1, r3
 800d466:	4610      	mov	r0, r2
 800d468:	f7fd feb9 	bl	800b1de <create_chain>
 800d46c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 8109 	beq.w	800d688 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d104      	bne.n	800d486 <f_write+0x10c>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2202      	movs	r2, #2
 800d480:	755a      	strb	r2, [r3, #21]
 800d482:	2302      	movs	r3, #2
 800d484:	e109      	b.n	800d69a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48c:	d104      	bne.n	800d498 <f_write+0x11e>
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2201      	movs	r2, #1
 800d492:	755a      	strb	r2, [r3, #21]
 800d494:	2301      	movs	r3, #1
 800d496:	e100      	b.n	800d69a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d49c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d102      	bne.n	800d4ac <f_write+0x132>
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4aa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	7d1b      	ldrb	r3, [r3, #20]
 800d4b0:	b25b      	sxtb	r3, r3
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	da18      	bge.n	800d4e8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4b6:	693b      	ldr	r3, [r7, #16]
 800d4b8:	7858      	ldrb	r0, [r3, #1]
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6a1a      	ldr	r2, [r3, #32]
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	f7f3 fbcb 	bl	8000c60 <disk_write>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <f_write+0x160>
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	755a      	strb	r2, [r3, #21]
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e0df      	b.n	800d69a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	7d1b      	ldrb	r3, [r3, #20]
 800d4de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d4e8:	693a      	ldr	r2, [r7, #16]
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	69db      	ldr	r3, [r3, #28]
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	4610      	mov	r0, r2
 800d4f2:	f7fd fc03 	bl	800acfc <clust2sect>
 800d4f6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d104      	bne.n	800d508 <f_write+0x18e>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2202      	movs	r2, #2
 800d502:	755a      	strb	r2, [r3, #21]
 800d504:	2302      	movs	r3, #2
 800d506:	e0c8      	b.n	800d69a <f_write+0x320>
			sect += csect;
 800d508:	697a      	ldr	r2, [r7, #20]
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	4413      	add	r3, r2
 800d50e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	899b      	ldrh	r3, [r3, #12]
 800d514:	461a      	mov	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	fbb3 f3f2 	udiv	r3, r3, r2
 800d51c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d51e:	6a3b      	ldr	r3, [r7, #32]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d043      	beq.n	800d5ac <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d524:	69ba      	ldr	r2, [r7, #24]
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	4413      	add	r3, r2
 800d52a:	693a      	ldr	r2, [r7, #16]
 800d52c:	8952      	ldrh	r2, [r2, #10]
 800d52e:	4293      	cmp	r3, r2
 800d530:	d905      	bls.n	800d53e <f_write+0x1c4>
					cc = fs->csize - csect;
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	895b      	ldrh	r3, [r3, #10]
 800d536:	461a      	mov	r2, r3
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	7858      	ldrb	r0, [r3, #1]
 800d542:	6a3b      	ldr	r3, [r7, #32]
 800d544:	697a      	ldr	r2, [r7, #20]
 800d546:	69f9      	ldr	r1, [r7, #28]
 800d548:	f7f3 fb8a 	bl	8000c60 <disk_write>
 800d54c:	4603      	mov	r3, r0
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d004      	beq.n	800d55c <f_write+0x1e2>
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2201      	movs	r2, #1
 800d556:	755a      	strb	r2, [r3, #21]
 800d558:	2301      	movs	r3, #1
 800d55a:	e09e      	b.n	800d69a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6a1a      	ldr	r2, [r3, #32]
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	6a3a      	ldr	r2, [r7, #32]
 800d566:	429a      	cmp	r2, r3
 800d568:	d918      	bls.n	800d59c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	6a1a      	ldr	r2, [r3, #32]
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	1ad3      	subs	r3, r2, r3
 800d578:	693a      	ldr	r2, [r7, #16]
 800d57a:	8992      	ldrh	r2, [r2, #12]
 800d57c:	fb02 f303 	mul.w	r3, r2, r3
 800d580:	69fa      	ldr	r2, [r7, #28]
 800d582:	18d1      	adds	r1, r2, r3
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	899b      	ldrh	r3, [r3, #12]
 800d588:	461a      	mov	r2, r3
 800d58a:	f7fd f8eb 	bl	800a764 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	7d1b      	ldrb	r3, [r3, #20]
 800d592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d596:	b2da      	uxtb	r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	899b      	ldrh	r3, [r3, #12]
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	fb02 f303 	mul.w	r3, r2, r3
 800d5a8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d5aa:	e04b      	b.n	800d644 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6a1b      	ldr	r3, [r3, #32]
 800d5b0:	697a      	ldr	r2, [r7, #20]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d016      	beq.n	800d5e4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	699a      	ldr	r2, [r3, #24]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d210      	bcs.n	800d5e4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	7858      	ldrb	r0, [r3, #1]
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	697a      	ldr	r2, [r7, #20]
 800d5d0:	f7f3 fb26 	bl	8000c20 <disk_read>
 800d5d4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d004      	beq.n	800d5e4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	755a      	strb	r2, [r3, #21]
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e05a      	b.n	800d69a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	697a      	ldr	r2, [r7, #20]
 800d5e8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	899b      	ldrh	r3, [r3, #12]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	699b      	ldr	r3, [r3, #24]
 800d5f4:	693a      	ldr	r2, [r7, #16]
 800d5f6:	8992      	ldrh	r2, [r2, #12]
 800d5f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5fc:	fb01 f202 	mul.w	r2, r1, r2
 800d600:	1a9b      	subs	r3, r3, r2
 800d602:	1ac3      	subs	r3, r0, r3
 800d604:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d901      	bls.n	800d612 <f_write+0x298>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	699b      	ldr	r3, [r3, #24]
 800d61c:	693a      	ldr	r2, [r7, #16]
 800d61e:	8992      	ldrh	r2, [r2, #12]
 800d620:	fbb3 f0f2 	udiv	r0, r3, r2
 800d624:	fb00 f202 	mul.w	r2, r0, r2
 800d628:	1a9b      	subs	r3, r3, r2
 800d62a:	440b      	add	r3, r1
 800d62c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d62e:	69f9      	ldr	r1, [r7, #28]
 800d630:	4618      	mov	r0, r3
 800d632:	f7fd f897 	bl	800a764 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	7d1b      	ldrb	r3, [r3, #20]
 800d63a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d644:	69fa      	ldr	r2, [r7, #28]
 800d646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d648:	4413      	add	r3, r2
 800d64a:	61fb      	str	r3, [r7, #28]
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	699a      	ldr	r2, [r3, #24]
 800d650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d652:	441a      	add	r2, r3
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	619a      	str	r2, [r3, #24]
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	68da      	ldr	r2, [r3, #12]
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	699b      	ldr	r3, [r3, #24]
 800d660:	429a      	cmp	r2, r3
 800d662:	bf38      	it	cc
 800d664:	461a      	movcc	r2, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	60da      	str	r2, [r3, #12]
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d670:	441a      	add	r2, r3
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	601a      	str	r2, [r3, #0]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	f47f aeb5 	bne.w	800d3f0 <f_write+0x76>
 800d686:	e000      	b.n	800d68a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d688:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	7d1b      	ldrb	r3, [r3, #20]
 800d68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d692:	b2da      	uxtb	r2, r3
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d698:	2300      	movs	r3, #0
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3730      	adds	r7, #48	@ 0x30
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b086      	sub	sp, #24
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f107 0208 	add.w	r2, r7, #8
 800d6b0:	4611      	mov	r1, r2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7ff fabe 	bl	800cc34 <validate>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d6bc:	7dfb      	ldrb	r3, [r7, #23]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d168      	bne.n	800d794 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	7d1b      	ldrb	r3, [r3, #20]
 800d6c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d062      	beq.n	800d794 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	7d1b      	ldrb	r3, [r3, #20]
 800d6d2:	b25b      	sxtb	r3, r3
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	da15      	bge.n	800d704 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	7858      	ldrb	r0, [r3, #1]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a1a      	ldr	r2, [r3, #32]
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	f7f3 faba 	bl	8000c60 <disk_write>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d001      	beq.n	800d6f6 <f_sync+0x54>
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	e04f      	b.n	800d796 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7d1b      	ldrb	r3, [r3, #20]
 800d6fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d704:	f7f3 fafc 	bl	8000d00 <get_fattime>
 800d708:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d710:	4619      	mov	r1, r3
 800d712:	4610      	mov	r0, r2
 800d714:	f7fd fa54 	bl	800abc0 <move_window>
 800d718:	4603      	mov	r3, r0
 800d71a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d138      	bne.n	800d794 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d726:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	330b      	adds	r3, #11
 800d72c:	781a      	ldrb	r2, [r3, #0]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	330b      	adds	r3, #11
 800d732:	f042 0220 	orr.w	r2, r2, #32
 800d736:	b2d2      	uxtb	r2, r2
 800d738:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6818      	ldr	r0, [r3, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	461a      	mov	r2, r3
 800d744:	68f9      	ldr	r1, [r7, #12]
 800d746:	f7fd ffdf 	bl	800b708 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f103 021c 	add.w	r2, r3, #28
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	4619      	mov	r1, r3
 800d756:	4610      	mov	r0, r2
 800d758:	f7fc ffd8 	bl	800a70c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	3316      	adds	r3, #22
 800d760:	6939      	ldr	r1, [r7, #16]
 800d762:	4618      	mov	r0, r3
 800d764:	f7fc ffd2 	bl	800a70c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	3312      	adds	r3, #18
 800d76c:	2100      	movs	r1, #0
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fc ffb1 	bl	800a6d6 <st_word>
					fs->wflag = 1;
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	2201      	movs	r2, #1
 800d778:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f7fd fa4d 	bl	800ac1c <sync_fs>
 800d782:	4603      	mov	r3, r0
 800d784:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	7d1b      	ldrb	r3, [r3, #20]
 800d78a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d78e:	b2da      	uxtb	r2, r3
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d794:	7dfb      	ldrb	r3, [r7, #23]
}
 800d796:	4618      	mov	r0, r3
 800d798:	3718      	adds	r7, #24
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}

0800d79e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d79e:	b580      	push	{r7, lr}
 800d7a0:	b084      	sub	sp, #16
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f7ff ff7b 	bl	800d6a2 <f_sync>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d118      	bne.n	800d7e8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	f107 0208 	add.w	r2, r7, #8
 800d7bc:	4611      	mov	r1, r2
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7ff fa38 	bl	800cc34 <validate>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10c      	bne.n	800d7e8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fd f950 	bl	800aa78 <dec_lock>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d102      	bne.n	800d7e8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b090      	sub	sp, #64	@ 0x40
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f107 0208 	add.w	r2, r7, #8
 800d802:	4611      	mov	r1, r2
 800d804:	4618      	mov	r0, r3
 800d806:	f7ff fa15 	bl	800cc34 <validate>
 800d80a:	4603      	mov	r3, r0
 800d80c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d810:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d814:	2b00      	cmp	r3, #0
 800d816:	d103      	bne.n	800d820 <f_lseek+0x2e>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	7d5b      	ldrb	r3, [r3, #21]
 800d81c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d820:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d824:	2b00      	cmp	r3, #0
 800d826:	d002      	beq.n	800d82e <f_lseek+0x3c>
 800d828:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d82c:	e201      	b.n	800dc32 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 80d9 	beq.w	800d9ea <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83e:	d15a      	bne.n	800d8f6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d844:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d848:	1d1a      	adds	r2, r3, #4
 800d84a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	617b      	str	r3, [r7, #20]
 800d850:	2302      	movs	r3, #2
 800d852:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d03a      	beq.n	800d8d6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d862:	613b      	str	r3, [r7, #16]
 800d864:	2300      	movs	r3, #0
 800d866:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d86a:	3302      	adds	r3, #2
 800d86c:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d870:	60fb      	str	r3, [r7, #12]
 800d872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d874:	3301      	adds	r3, #1
 800d876:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fd fa5c 	bl	800ad3a <get_fat>
 800d882:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d886:	2b01      	cmp	r3, #1
 800d888:	d804      	bhi.n	800d894 <f_lseek+0xa2>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2202      	movs	r2, #2
 800d88e:	755a      	strb	r2, [r3, #21]
 800d890:	2302      	movs	r3, #2
 800d892:	e1ce      	b.n	800dc32 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89a:	d104      	bne.n	800d8a6 <f_lseek+0xb4>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	755a      	strb	r2, [r3, #21]
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e1c5      	b.n	800dc32 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d0de      	beq.n	800d86e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d8b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d809      	bhi.n	800d8cc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ba:	1d1a      	adds	r2, r3, #4
 800d8bc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8c0:	601a      	str	r2, [r3, #0]
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	1d1a      	adds	r2, r3, #4
 800d8c6:	627a      	str	r2, [r7, #36]	@ 0x24
 800d8c8:	693a      	ldr	r2, [r7, #16]
 800d8ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	69db      	ldr	r3, [r3, #28]
 800d8d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d3c4      	bcc.n	800d860 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d8de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d803      	bhi.n	800d8ee <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	e19f      	b.n	800dc2e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d8ee:	2311      	movs	r3, #17
 800d8f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d8f4:	e19b      	b.n	800dc2e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	683a      	ldr	r2, [r7, #0]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d902      	bls.n	800d906 <f_lseek+0x114>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	683a      	ldr	r2, [r7, #0]
 800d90a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	f000 818d 	beq.w	800dc2e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	3b01      	subs	r3, #1
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7fd fcf7 	bl	800b30e <clmt_clust>
 800d920:	4602      	mov	r2, r0
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	69db      	ldr	r3, [r3, #28]
 800d92c:	4619      	mov	r1, r3
 800d92e:	4610      	mov	r0, r2
 800d930:	f7fd f9e4 	bl	800acfc <clust2sect>
 800d934:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d936:	69bb      	ldr	r3, [r7, #24]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <f_lseek+0x154>
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2202      	movs	r2, #2
 800d940:	755a      	strb	r2, [r3, #21]
 800d942:	2302      	movs	r3, #2
 800d944:	e175      	b.n	800dc32 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	3b01      	subs	r3, #1
 800d94a:	68ba      	ldr	r2, [r7, #8]
 800d94c:	8992      	ldrh	r2, [r2, #12]
 800d94e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d952:	68ba      	ldr	r2, [r7, #8]
 800d954:	8952      	ldrh	r2, [r2, #10]
 800d956:	3a01      	subs	r2, #1
 800d958:	4013      	ands	r3, r2
 800d95a:	69ba      	ldr	r2, [r7, #24]
 800d95c:	4413      	add	r3, r2
 800d95e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	68ba      	ldr	r2, [r7, #8]
 800d966:	8992      	ldrh	r2, [r2, #12]
 800d968:	fbb3 f1f2 	udiv	r1, r3, r2
 800d96c:	fb01 f202 	mul.w	r2, r1, r2
 800d970:	1a9b      	subs	r3, r3, r2
 800d972:	2b00      	cmp	r3, #0
 800d974:	f000 815b 	beq.w	800dc2e <f_lseek+0x43c>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6a1b      	ldr	r3, [r3, #32]
 800d97c:	69ba      	ldr	r2, [r7, #24]
 800d97e:	429a      	cmp	r2, r3
 800d980:	f000 8155 	beq.w	800dc2e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	7d1b      	ldrb	r3, [r3, #20]
 800d988:	b25b      	sxtb	r3, r3
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	da18      	bge.n	800d9c0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	7858      	ldrb	r0, [r3, #1]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6a1a      	ldr	r2, [r3, #32]
 800d99c:	2301      	movs	r3, #1
 800d99e:	f7f3 f95f 	bl	8000c60 <disk_write>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d004      	beq.n	800d9b2 <f_lseek+0x1c0>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	755a      	strb	r2, [r3, #21]
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e13f      	b.n	800dc32 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	7d1b      	ldrb	r3, [r3, #20]
 800d9b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	7858      	ldrb	r0, [r3, #1]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	69ba      	ldr	r2, [r7, #24]
 800d9ce:	f7f3 f927 	bl	8000c20 <disk_read>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d004      	beq.n	800d9e2 <f_lseek+0x1f0>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	755a      	strb	r2, [r3, #21]
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e127      	b.n	800dc32 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	69ba      	ldr	r2, [r7, #24]
 800d9e6:	621a      	str	r2, [r3, #32]
 800d9e8:	e121      	b.n	800dc2e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	68db      	ldr	r3, [r3, #12]
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d908      	bls.n	800da06 <f_lseek+0x214>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7d1b      	ldrb	r3, [r3, #20]
 800d9f8:	f003 0302 	and.w	r3, r3, #2
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	699b      	ldr	r3, [r3, #24]
 800da0a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800da14:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 80b5 	beq.w	800db88 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	895b      	ldrh	r3, [r3, #10]
 800da22:	461a      	mov	r2, r3
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	899b      	ldrh	r3, [r3, #12]
 800da28:	fb02 f303 	mul.w	r3, r2, r3
 800da2c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d01b      	beq.n	800da6c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	1e5a      	subs	r2, r3, #1
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	fbb2 f2f3 	udiv	r2, r2, r3
 800da3e:	6a3b      	ldr	r3, [r7, #32]
 800da40:	1e59      	subs	r1, r3, #1
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800da48:	429a      	cmp	r2, r3
 800da4a:	d30f      	bcc.n	800da6c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800da4c:	6a3b      	ldr	r3, [r7, #32]
 800da4e:	1e5a      	subs	r2, r3, #1
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	425b      	negs	r3, r3
 800da54:	401a      	ands	r2, r3
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	699b      	ldr	r3, [r3, #24]
 800da5e:	683a      	ldr	r2, [r7, #0]
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	69db      	ldr	r3, [r3, #28]
 800da68:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da6a:	e022      	b.n	800dab2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800da72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da74:	2b00      	cmp	r3, #0
 800da76:	d119      	bne.n	800daac <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2100      	movs	r1, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fd fbae 	bl	800b1de <create_chain>
 800da82:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800da84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da86:	2b01      	cmp	r3, #1
 800da88:	d104      	bne.n	800da94 <f_lseek+0x2a2>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2202      	movs	r2, #2
 800da8e:	755a      	strb	r2, [r3, #21]
 800da90:	2302      	movs	r3, #2
 800da92:	e0ce      	b.n	800dc32 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9a:	d104      	bne.n	800daa6 <f_lseek+0x2b4>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	755a      	strb	r2, [r3, #21]
 800daa2:	2301      	movs	r3, #1
 800daa4:	e0c5      	b.n	800dc32 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800daaa:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dab0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800dab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d067      	beq.n	800db88 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800dab8:	e03a      	b.n	800db30 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800daba:	683a      	ldr	r2, [r7, #0]
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	603b      	str	r3, [r7, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	699a      	ldr	r2, [r3, #24]
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	441a      	add	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	7d1b      	ldrb	r3, [r3, #20]
 800dad2:	f003 0302 	and.w	r3, r3, #2
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00b      	beq.n	800daf2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fd fb7d 	bl	800b1de <create_chain>
 800dae4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800dae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d108      	bne.n	800dafe <f_lseek+0x30c>
							ofs = 0; break;
 800daec:	2300      	movs	r3, #0
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	e022      	b.n	800db38 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fd f91f 	bl	800ad3a <get_fat>
 800dafc:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dafe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db04:	d104      	bne.n	800db10 <f_lseek+0x31e>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2201      	movs	r2, #1
 800db0a:	755a      	strb	r2, [r3, #21]
 800db0c:	2301      	movs	r3, #1
 800db0e:	e090      	b.n	800dc32 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800db10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db12:	2b01      	cmp	r3, #1
 800db14:	d904      	bls.n	800db20 <f_lseek+0x32e>
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	69db      	ldr	r3, [r3, #28]
 800db1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d304      	bcc.n	800db2a <f_lseek+0x338>
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2202      	movs	r2, #2
 800db24:	755a      	strb	r2, [r3, #21]
 800db26:	2302      	movs	r3, #2
 800db28:	e083      	b.n	800dc32 <f_lseek+0x440>
					fp->clust = clst;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db2e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800db30:	683a      	ldr	r2, [r7, #0]
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	429a      	cmp	r2, r3
 800db36:	d8c0      	bhi.n	800daba <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	699a      	ldr	r2, [r3, #24]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	441a      	add	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	899b      	ldrh	r3, [r3, #12]
 800db48:	461a      	mov	r2, r3
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800db50:	fb01 f202 	mul.w	r2, r1, r2
 800db54:	1a9b      	subs	r3, r3, r2
 800db56:	2b00      	cmp	r3, #0
 800db58:	d016      	beq.n	800db88 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800db5e:	4618      	mov	r0, r3
 800db60:	f7fd f8cc 	bl	800acfc <clust2sect>
 800db64:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800db66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d104      	bne.n	800db76 <f_lseek+0x384>
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2202      	movs	r2, #2
 800db70:	755a      	strb	r2, [r3, #21]
 800db72:	2302      	movs	r3, #2
 800db74:	e05d      	b.n	800dc32 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	899b      	ldrh	r3, [r3, #12]
 800db7a:	461a      	mov	r2, r3
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	fbb3 f3f2 	udiv	r3, r3, r2
 800db82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db84:	4413      	add	r3, r2
 800db86:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	699a      	ldr	r2, [r3, #24]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	429a      	cmp	r2, r3
 800db92:	d90a      	bls.n	800dbaa <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	699a      	ldr	r2, [r3, #24]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	7d1b      	ldrb	r3, [r3, #20]
 800dba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dba4:	b2da      	uxtb	r2, r3
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	699b      	ldr	r3, [r3, #24]
 800dbae:	68ba      	ldr	r2, [r7, #8]
 800dbb0:	8992      	ldrh	r2, [r2, #12]
 800dbb2:	fbb3 f1f2 	udiv	r1, r3, r2
 800dbb6:	fb01 f202 	mul.w	r2, r1, r2
 800dbba:	1a9b      	subs	r3, r3, r2
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d036      	beq.n	800dc2e <f_lseek+0x43c>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6a1b      	ldr	r3, [r3, #32]
 800dbc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d031      	beq.n	800dc2e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	7d1b      	ldrb	r3, [r3, #20]
 800dbce:	b25b      	sxtb	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	da18      	bge.n	800dc06 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	7858      	ldrb	r0, [r3, #1]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6a1a      	ldr	r2, [r3, #32]
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	f7f3 f83c 	bl	8000c60 <disk_write>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d004      	beq.n	800dbf8 <f_lseek+0x406>
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	755a      	strb	r2, [r3, #21]
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e01c      	b.n	800dc32 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	7d1b      	ldrb	r3, [r3, #20]
 800dbfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	7858      	ldrb	r0, [r3, #1]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dc10:	2301      	movs	r3, #1
 800dc12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc14:	f7f3 f804 	bl	8000c20 <disk_read>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d004      	beq.n	800dc28 <f_lseek+0x436>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	755a      	strb	r2, [r3, #21]
 800dc24:	2301      	movs	r3, #1
 800dc26:	e004      	b.n	800dc32 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc2c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800dc2e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3740      	adds	r7, #64	@ 0x40
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b086      	sub	sp, #24
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <f_opendir+0x14>
 800dc4a:	2309      	movs	r3, #9
 800dc4c:	e064      	b.n	800dd18 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800dc52:	f107 010c 	add.w	r1, r7, #12
 800dc56:	463b      	mov	r3, r7
 800dc58:	2200      	movs	r2, #0
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7fe fd64 	bl	800c728 <find_volume>
 800dc60:	4603      	mov	r3, r0
 800dc62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d14f      	bne.n	800dd0a <f_opendir+0xd0>
		obj->fs = fs;
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f7fe fc47 	bl	800c508 <follow_path>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d13d      	bne.n	800dd00 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dc8a:	b25b      	sxtb	r3, r3
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	db12      	blt.n	800dcb6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	799b      	ldrb	r3, [r3, #6]
 800dc94:	f003 0310 	and.w	r3, r3, #16
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00a      	beq.n	800dcb2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6a1b      	ldr	r3, [r3, #32]
 800dca2:	4619      	mov	r1, r3
 800dca4:	4610      	mov	r0, r2
 800dca6:	f7fd fd10 	bl	800b6ca <ld_clust>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	609a      	str	r2, [r3, #8]
 800dcb0:	e001      	b.n	800dcb6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800dcb2:	2305      	movs	r3, #5
 800dcb4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800dcb6:	7dfb      	ldrb	r3, [r7, #23]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d121      	bne.n	800dd00 <f_opendir+0xc6>
				obj->id = fs->id;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	88da      	ldrh	r2, [r3, #6]
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800dcc4:	2100      	movs	r1, #0
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7fd fb59 	bl	800b37e <dir_sdi>
 800dccc:	4603      	mov	r3, r0
 800dcce:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d114      	bne.n	800dd00 <f_opendir+0xc6>
					if (obj->sclust) {
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00d      	beq.n	800dcfa <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800dcde:	2100      	movs	r1, #0
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f7fc fe3b 	bl	800a95c <inc_lock>
 800dce6:	4602      	mov	r2, r0
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	691b      	ldr	r3, [r3, #16]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d105      	bne.n	800dd00 <f_opendir+0xc6>
 800dcf4:	2312      	movs	r3, #18
 800dcf6:	75fb      	strb	r3, [r7, #23]
 800dcf8:	e002      	b.n	800dd00 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800dd00:	7dfb      	ldrb	r3, [r7, #23]
 800dd02:	2b04      	cmp	r3, #4
 800dd04:	d101      	bne.n	800dd0a <f_opendir+0xd0>
 800dd06:	2305      	movs	r3, #5
 800dd08:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <f_opendir+0xdc>
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	2200      	movs	r2, #0
 800dd14:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dd16:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f107 0208 	add.w	r2, r7, #8
 800dd2e:	4611      	mov	r1, r2
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe ff7f 	bl	800cc34 <validate>
 800dd36:	4603      	mov	r3, r0
 800dd38:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d110      	bne.n	800dd62 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	691b      	ldr	r3, [r3, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d006      	beq.n	800dd56 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fc fe93 	bl	800aa78 <dec_lock>
 800dd52:	4603      	mov	r3, r0
 800dd54:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800dd56:	7bfb      	ldrb	r3, [r7, #15]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d102      	bne.n	800dd62 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800dd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f107 0208 	add.w	r2, r7, #8
 800dd7c:	4611      	mov	r1, r2
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7fe ff58 	bl	800cc34 <validate>
 800dd84:	4603      	mov	r3, r0
 800dd86:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd88:	7bfb      	ldrb	r3, [r7, #15]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d126      	bne.n	800dddc <f_readdir+0x70>
		if (!fno) {
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d106      	bne.n	800dda2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800dd94:	2100      	movs	r1, #0
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7fd faf1 	bl	800b37e <dir_sdi>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	73fb      	strb	r3, [r7, #15]
 800dda0:	e01c      	b.n	800dddc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800dda2:	2100      	movs	r1, #0
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7fd feba 	bl	800bb1e <dir_read>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
 800ddb0:	2b04      	cmp	r3, #4
 800ddb2:	d101      	bne.n	800ddb8 <f_readdir+0x4c>
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800ddb8:	7bfb      	ldrb	r3, [r7, #15]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d10e      	bne.n	800dddc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ddbe:	6839      	ldr	r1, [r7, #0]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f7fe f90b 	bl	800bfdc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f7fd fb61 	bl	800b490 <dir_next>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
 800ddd4:	2b04      	cmp	r3, #4
 800ddd6:	d101      	bne.n	800dddc <f_readdir+0x70>
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b090      	sub	sp, #64	@ 0x40
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ddf0:	f107 0108 	add.w	r1, r7, #8
 800ddf4:	1d3b      	adds	r3, r7, #4
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f7fe fc95 	bl	800c728 <find_volume>
 800ddfe:	4603      	mov	r3, r0
 800de00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 800de04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d11f      	bne.n	800de4c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	f107 0308 	add.w	r3, r7, #8
 800de12:	4611      	mov	r1, r2
 800de14:	4618      	mov	r0, r3
 800de16:	f7fe fb77 	bl	800c508 <follow_path>
 800de1a:	4603      	mov	r3, r0
 800de1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800de20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800de24:	2b00      	cmp	r3, #0
 800de26:	d111      	bne.n	800de4c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800de28:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800de2c:	b25b      	sxtb	r3, r3
 800de2e:	2b00      	cmp	r3, #0
 800de30:	da03      	bge.n	800de3a <f_stat+0x54>
				res = FR_INVALID_NAME;
 800de32:	2306      	movs	r3, #6
 800de34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800de38:	e008      	b.n	800de4c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d005      	beq.n	800de4c <f_stat+0x66>
 800de40:	f107 0308 	add.w	r3, r7, #8
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	4618      	mov	r0, r3
 800de48:	f7fe f8c8 	bl	800bfdc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800de4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800de50:	4618      	mov	r0, r3
 800de52:	3740      	adds	r7, #64	@ 0x40
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b092      	sub	sp, #72	@ 0x48
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800de64:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800de68:	f107 030c 	add.w	r3, r7, #12
 800de6c:	2200      	movs	r2, #0
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fe fc5a 	bl	800c728 <find_volume>
 800de74:	4603      	mov	r3, r0
 800de76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800de7a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800de7e:	2b00      	cmp	r3, #0
 800de80:	f040 8099 	bne.w	800dfb6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800de84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800de8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de8c:	699a      	ldr	r2, [r3, #24]
 800de8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de90:	69db      	ldr	r3, [r3, #28]
 800de92:	3b02      	subs	r3, #2
 800de94:	429a      	cmp	r2, r3
 800de96:	d804      	bhi.n	800dea2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800de98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de9a:	699a      	ldr	r2, [r3, #24]
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	e089      	b.n	800dfb6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800dea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d128      	bne.n	800df00 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800deae:	2302      	movs	r3, #2
 800deb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800deb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800deb6:	f107 0314 	add.w	r3, r7, #20
 800deba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800debc:	4618      	mov	r0, r3
 800debe:	f7fc ff3c 	bl	800ad3a <get_fat>
 800dec2:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800dec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deca:	d103      	bne.n	800ded4 <f_getfree+0x7c>
 800decc:	2301      	movs	r3, #1
 800dece:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ded2:	e063      	b.n	800df9c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800ded4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d103      	bne.n	800dee2 <f_getfree+0x8a>
 800deda:	2302      	movs	r3, #2
 800dedc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800dee0:	e05c      	b.n	800df9c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800dee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d102      	bne.n	800deee <f_getfree+0x96>
 800dee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800deea:	3301      	adds	r3, #1
 800deec:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800deee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800def0:	3301      	adds	r3, #1
 800def2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800def4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def6:	69db      	ldr	r3, [r3, #28]
 800def8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800defa:	429a      	cmp	r2, r3
 800defc:	d3db      	bcc.n	800deb6 <f_getfree+0x5e>
 800defe:	e04d      	b.n	800df9c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df02:	69db      	ldr	r3, [r3, #28]
 800df04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800df10:	2300      	movs	r3, #0
 800df12:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800df14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df16:	2b00      	cmp	r3, #0
 800df18:	d113      	bne.n	800df42 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800df1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800df1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1e:	1c5a      	adds	r2, r3, #1
 800df20:	63ba      	str	r2, [r7, #56]	@ 0x38
 800df22:	4619      	mov	r1, r3
 800df24:	f7fc fe4c 	bl	800abc0 <move_window>
 800df28:	4603      	mov	r3, r0
 800df2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800df2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800df32:	2b00      	cmp	r3, #0
 800df34:	d131      	bne.n	800df9a <f_getfree+0x142>
							p = fs->win;
 800df36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df38:	3338      	adds	r3, #56	@ 0x38
 800df3a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800df3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df3e:	899b      	ldrh	r3, [r3, #12]
 800df40:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800df42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	2b02      	cmp	r3, #2
 800df48:	d10f      	bne.n	800df6a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800df4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df4c:	f7fc fb88 	bl	800a660 <ld_word>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d102      	bne.n	800df5c <f_getfree+0x104>
 800df56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df58:	3301      	adds	r3, #1
 800df5a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800df5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df5e:	3302      	adds	r3, #2
 800df60:	633b      	str	r3, [r7, #48]	@ 0x30
 800df62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df64:	3b02      	subs	r3, #2
 800df66:	637b      	str	r3, [r7, #52]	@ 0x34
 800df68:	e010      	b.n	800df8c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800df6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df6c:	f7fc fb90 	bl	800a690 <ld_dword>
 800df70:	4603      	mov	r3, r0
 800df72:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800df76:	2b00      	cmp	r3, #0
 800df78:	d102      	bne.n	800df80 <f_getfree+0x128>
 800df7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df7c:	3301      	adds	r3, #1
 800df7e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800df80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df82:	3304      	adds	r3, #4
 800df84:	633b      	str	r3, [r7, #48]	@ 0x30
 800df86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df88:	3b04      	subs	r3, #4
 800df8a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800df8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df8e:	3b01      	subs	r3, #1
 800df90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df94:	2b00      	cmp	r3, #0
 800df96:	d1bd      	bne.n	800df14 <f_getfree+0xbc>
 800df98:	e000      	b.n	800df9c <f_getfree+0x144>
							if (res != FR_OK) break;
 800df9a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfa0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800dfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfa6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800dfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfaa:	791a      	ldrb	r2, [r3, #4]
 800dfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfae:	f042 0201 	orr.w	r2, r2, #1
 800dfb2:	b2d2      	uxtb	r2, r2
 800dfb4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800dfb6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3748      	adds	r7, #72	@ 0x48
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b098      	sub	sp, #96	@ 0x60
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800dfca:	f107 010c 	add.w	r1, r7, #12
 800dfce:	1d3b      	adds	r3, r7, #4
 800dfd0:	2202      	movs	r2, #2
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe fba8 	bl	800c728 <find_volume>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	dj.obj.fs = fs;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800dfe2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f040 80f2 	bne.w	800e1d0 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	f107 0310 	add.w	r3, r7, #16
 800dff2:	4611      	mov	r1, r2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe fa87 	bl	800c508 <follow_path>
 800dffa:	4603      	mov	r3, r0
 800dffc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800e000:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e004:	2b00      	cmp	r3, #0
 800e006:	d102      	bne.n	800e00e <f_mkdir+0x4c>
 800e008:	2308      	movs	r3, #8
 800e00a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800e00e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e012:	2b04      	cmp	r3, #4
 800e014:	f040 80dc 	bne.w	800e1d0 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800e018:	f107 0310 	add.w	r3, r7, #16
 800e01c:	2100      	movs	r1, #0
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fd f8dd 	bl	800b1de <create_chain>
 800e024:	64f8      	str	r0, [r7, #76]	@ 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	895b      	ldrh	r3, [r3, #10]
 800e02a:	461a      	mov	r2, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	899b      	ldrh	r3, [r3, #12]
 800e030:	fb02 f303 	mul.w	r3, r2, r3
 800e034:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800e036:	2300      	movs	r3, #0
 800e038:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800e03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d102      	bne.n	800e048 <f_mkdir+0x86>
 800e042:	2307      	movs	r3, #7
 800e044:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800e048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d102      	bne.n	800e054 <f_mkdir+0x92>
 800e04e:	2302      	movs	r3, #2
 800e050:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05a:	d102      	bne.n	800e062 <f_mkdir+0xa0>
 800e05c:	2301      	movs	r3, #1
 800e05e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800e062:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e066:	2b00      	cmp	r3, #0
 800e068:	d106      	bne.n	800e078 <f_mkdir+0xb6>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fc fd63 	bl	800ab38 <sync_window>
 800e072:	4603      	mov	r3, r0
 800e074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			tm = GET_FATTIME();
 800e078:	f7f2 fe42 	bl	8000d00 <get_fattime>
 800e07c:	64b8      	str	r0, [r7, #72]	@ 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800e07e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e082:	2b00      	cmp	r3, #0
 800e084:	d16c      	bne.n	800e160 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fc fe36 	bl	800acfc <clust2sect>
 800e090:	6578      	str	r0, [r7, #84]	@ 0x54
				dir = fs->win;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3338      	adds	r3, #56	@ 0x38
 800e096:	647b      	str	r3, [r7, #68]	@ 0x44
				mem_set(dir, 0, SS(fs));
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	899b      	ldrh	r3, [r3, #12]
 800e09c:	461a      	mov	r2, r3
 800e09e:	2100      	movs	r1, #0
 800e0a0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e0a2:	f7fc fb80 	bl	800a7a6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800e0a6:	220b      	movs	r2, #11
 800e0a8:	2120      	movs	r1, #32
 800e0aa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e0ac:	f7fc fb7b 	bl	800a7a6 <mem_set>
					dir[DIR_Name] = '.';
 800e0b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0b2:	222e      	movs	r2, #46	@ 0x2e
 800e0b4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800e0b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0b8:	330b      	adds	r3, #11
 800e0ba:	2210      	movs	r2, #16
 800e0bc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800e0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0c0:	3316      	adds	r3, #22
 800e0c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fc fb21 	bl	800a70c <st_dword>
					st_clust(fs, dir, dcl);
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e0ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7fd fb19 	bl	800b708 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800e0d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0d8:	3320      	adds	r3, #32
 800e0da:	2220      	movs	r2, #32
 800e0dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f7fc fb40 	bl	800a764 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800e0e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0e6:	3321      	adds	r3, #33	@ 0x21
 800e0e8:	222e      	movs	r2, #46	@ 0x2e
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	653b      	str	r3, [r7, #80]	@ 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b03      	cmp	r3, #3
 800e0f6:	d106      	bne.n	800e106 <f_mkdir+0x144>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e0fe:	429a      	cmp	r2, r3
 800e100:	d101      	bne.n	800e106 <f_mkdir+0x144>
 800e102:	2300      	movs	r3, #0
 800e104:	653b      	str	r3, [r7, #80]	@ 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e10a:	3320      	adds	r3, #32
 800e10c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e10e:	4619      	mov	r1, r3
 800e110:	f7fd fafa 	bl	800b708 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	895b      	ldrh	r3, [r3, #10]
 800e118:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e11a:	e01c      	b.n	800e156 <f_mkdir+0x194>
					fs->winsect = dsc++;
 800e11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e11e:	1c5a      	adds	r2, r3, #1
 800e120:	657a      	str	r2, [r7, #84]	@ 0x54
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	6353      	str	r3, [r2, #52]	@ 0x34
					fs->wflag = 1;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2201      	movs	r2, #1
 800e12a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4618      	mov	r0, r3
 800e130:	f7fc fd02 	bl	800ab38 <sync_window>
 800e134:	4603      	mov	r3, r0
 800e136:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (res != FR_OK) break;
 800e13a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10d      	bne.n	800e15e <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	899b      	ldrh	r3, [r3, #12]
 800e146:	461a      	mov	r2, r3
 800e148:	2100      	movs	r1, #0
 800e14a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e14c:	f7fc fb2b 	bl	800a7a6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800e150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e152:	3b01      	subs	r3, #1
 800e154:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1df      	bne.n	800e11c <f_mkdir+0x15a>
 800e15c:	e000      	b.n	800e160 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 800e15e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800e160:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e164:	2b00      	cmp	r3, #0
 800e166:	d107      	bne.n	800e178 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800e168:	f107 0310 	add.w	r3, r7, #16
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7fd fe3d 	bl	800bdec <dir_register>
 800e172:	4603      	mov	r3, r0
 800e174:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
			if (res == FR_OK) {
 800e178:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d120      	bne.n	800e1c2 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800e180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e182:	647b      	str	r3, [r7, #68]	@ 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800e184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e186:	3316      	adds	r3, #22
 800e188:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fc fabe 	bl	800a70c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e194:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e196:	4618      	mov	r0, r3
 800e198:	f7fd fab6 	bl	800b708 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800e19c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e19e:	330b      	adds	r3, #11
 800e1a0:	2210      	movs	r2, #16
 800e1a2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800e1aa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10e      	bne.n	800e1d0 <f_mkdir+0x20e>
					res = sync_fs(fs);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fc fd31 	bl	800ac1c <sync_fs>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e1c0:	e006      	b.n	800e1d0 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800e1c2:	f107 0310 	add.w	r3, r7, #16
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fc ffa2 	bl	800b114 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800e1d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3760      	adds	r7, #96	@ 0x60
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	60b9      	str	r1, [r7, #8]
 800e1e6:	607a      	str	r2, [r7, #4]
	int n = 0;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e1f0:	e01c      	b.n	800e22c <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800e1f2:	f107 0310 	add.w	r3, r7, #16
 800e1f6:	f107 0114 	add.w	r1, r7, #20
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7fe ff5d 	bl	800d0bc <f_read>
		if (rc != 1) break;
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d117      	bne.n	800e238 <f_gets+0x5c>
		c = s[0];
 800e208:	7d3b      	ldrb	r3, [r7, #20]
 800e20a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e20c:	7dfb      	ldrb	r3, [r7, #23]
 800e20e:	2b0d      	cmp	r3, #13
 800e210:	d00b      	beq.n	800e22a <f_gets+0x4e>
		*p++ = c;
 800e212:	69bb      	ldr	r3, [r7, #24]
 800e214:	1c5a      	adds	r2, r3, #1
 800e216:	61ba      	str	r2, [r7, #24]
 800e218:	7dfa      	ldrb	r2, [r7, #23]
 800e21a:	701a      	strb	r2, [r3, #0]
		n++;
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	3301      	adds	r3, #1
 800e220:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800e222:	7dfb      	ldrb	r3, [r7, #23]
 800e224:	2b0a      	cmp	r3, #10
 800e226:	d009      	beq.n	800e23c <f_gets+0x60>
 800e228:	e000      	b.n	800e22c <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800e22a:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	3b01      	subs	r3, #1
 800e230:	69fa      	ldr	r2, [r7, #28]
 800e232:	429a      	cmp	r2, r3
 800e234:	dbdd      	blt.n	800e1f2 <f_gets+0x16>
 800e236:	e002      	b.n	800e23e <f_gets+0x62>
		if (rc != 1) break;
 800e238:	bf00      	nop
 800e23a:	e000      	b.n	800e23e <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800e23c:	bf00      	nop
	}
	*p = 0;
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	2200      	movs	r2, #0
 800e242:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <f_gets+0x72>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	e000      	b.n	800e250 <f_gets+0x74>
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3720      	adds	r7, #32
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}

0800e258 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b084      	sub	sp, #16
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	460b      	mov	r3, r1
 800e262:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e264:	78fb      	ldrb	r3, [r7, #3]
 800e266:	2b0a      	cmp	r3, #10
 800e268:	d103      	bne.n	800e272 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e26a:	210d      	movs	r1, #13
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7ff fff3 	bl	800e258 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	db25      	blt.n	800e2ca <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	1c5a      	adds	r2, r3, #1
 800e282:	60fa      	str	r2, [r7, #12]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	4413      	add	r3, r2
 800e288:	78fa      	ldrb	r2, [r7, #3]
 800e28a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2b3c      	cmp	r3, #60	@ 0x3c
 800e290:	dd12      	ble.n	800e2b8 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6818      	ldr	r0, [r3, #0]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f103 010c 	add.w	r1, r3, #12
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	f107 0308 	add.w	r3, r7, #8
 800e2a2:	f7ff f86a 	bl	800d37a <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e2a6:	68ba      	ldr	r2, [r7, #8]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d101      	bne.n	800e2b2 <putc_bfd+0x5a>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e001      	b.n	800e2b6 <putc_bfd+0x5e>
 800e2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b6:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	689b      	ldr	r3, [r3, #8]
 800e2c2:	1c5a      	adds	r2, r3, #1
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	609a      	str	r2, [r3, #8]
 800e2c8:	e000      	b.n	800e2cc <putc_bfd+0x74>
	if (i < 0) return;
 800e2ca:	bf00      	nop
}
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b084      	sub	sp, #16
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	685b      	ldr	r3, [r3, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	db16      	blt.n	800e310 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6818      	ldr	r0, [r3, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f103 010c 	add.w	r1, r3, #12
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	461a      	mov	r2, r3
 800e2f2:	f107 030c 	add.w	r3, r7, #12
 800e2f6:	f7ff f840 	bl	800d37a <f_write>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d107      	bne.n	800e310 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	4293      	cmp	r3, r2
 800e308:	d102      	bne.n	800e310 <putc_flush+0x3e>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	e001      	b.n	800e314 <putc_flush+0x42>
	return EOF;
 800e310:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	683a      	ldr	r2, [r7, #0]
 800e32a:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2200      	movs	r2, #0
 800e330:	605a      	str	r2, [r3, #4]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	685a      	ldr	r2, [r3, #4]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	609a      	str	r2, [r3, #8]
}
 800e33a:	bf00      	nop
 800e33c:	370c      	adds	r7, #12
 800e33e:	46bd      	mov	sp, r7
 800e340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e344:	4770      	bx	lr

0800e346 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800e346:	b580      	push	{r7, lr}
 800e348:	b096      	sub	sp, #88	@ 0x58
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
 800e34e:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800e350:	f107 030c 	add.w	r3, r7, #12
 800e354:	6839      	ldr	r1, [r7, #0]
 800e356:	4618      	mov	r0, r3
 800e358:	f7ff ffe0 	bl	800e31c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800e35c:	e009      	b.n	800e372 <f_puts+0x2c>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	1c5a      	adds	r2, r3, #1
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	781a      	ldrb	r2, [r3, #0]
 800e366:	f107 030c 	add.w	r3, r7, #12
 800e36a:	4611      	mov	r1, r2
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7ff ff73 	bl	800e258 <putc_bfd>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1f1      	bne.n	800e35e <f_puts+0x18>
	return putc_flush(&pb);
 800e37a:	f107 030c 	add.w	r3, r7, #12
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff ffa7 	bl	800e2d2 <putc_flush>
 800e384:	4603      	mov	r3, r0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3758      	adds	r7, #88	@ 0x58
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
	...

0800e390 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e390:	b480      	push	{r7}
 800e392:	b087      	sub	sp, #28
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	4613      	mov	r3, r2
 800e39c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e3a6:	4b1f      	ldr	r3, [pc, #124]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3a8:	7a5b      	ldrb	r3, [r3, #9]
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d131      	bne.n	800e414 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e3b0:	4b1c      	ldr	r3, [pc, #112]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3b2:	7a5b      	ldrb	r3, [r3, #9]
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	461a      	mov	r2, r3
 800e3b8:	4b1a      	ldr	r3, [pc, #104]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e3be:	4b19      	ldr	r3, [pc, #100]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3c0:	7a5b      	ldrb	r3, [r3, #9]
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	4a17      	ldr	r2, [pc, #92]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e3ce:	4b15      	ldr	r3, [pc, #84]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3d0:	7a5b      	ldrb	r3, [r3, #9]
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	461a      	mov	r2, r3
 800e3d6:	4b13      	ldr	r3, [pc, #76]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3d8:	4413      	add	r3, r2
 800e3da:	79fa      	ldrb	r2, [r7, #7]
 800e3dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e3de:	4b11      	ldr	r3, [pc, #68]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3e0:	7a5b      	ldrb	r3, [r3, #9]
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	1c5a      	adds	r2, r3, #1
 800e3e6:	b2d1      	uxtb	r1, r2
 800e3e8:	4a0e      	ldr	r2, [pc, #56]	@ (800e424 <FATFS_LinkDriverEx+0x94>)
 800e3ea:	7251      	strb	r1, [r2, #9]
 800e3ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e3ee:	7dbb      	ldrb	r3, [r7, #22]
 800e3f0:	3330      	adds	r3, #48	@ 0x30
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	223a      	movs	r2, #58	@ 0x3a
 800e3fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	3302      	adds	r3, #2
 800e404:	222f      	movs	r2, #47	@ 0x2f
 800e406:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	3303      	adds	r3, #3
 800e40c:	2200      	movs	r2, #0
 800e40e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e410:	2300      	movs	r3, #0
 800e412:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e414:	7dfb      	ldrb	r3, [r7, #23]
}
 800e416:	4618      	mov	r0, r3
 800e418:	371c      	adds	r7, #28
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	20003c9c 	.word	0x20003c9c

0800e428 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e432:	2200      	movs	r2, #0
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f7ff ffaa 	bl	800e390 <FATFS_LinkDriverEx>
 800e43c:	4603      	mov	r3, r0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3708      	adds	r7, #8
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	6039      	str	r1, [r7, #0]
 800e452:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e454:	88fb      	ldrh	r3, [r7, #6]
 800e456:	2b7f      	cmp	r3, #127	@ 0x7f
 800e458:	d802      	bhi.n	800e460 <ff_convert+0x18>
		c = chr;
 800e45a:	88fb      	ldrh	r3, [r7, #6]
 800e45c:	81fb      	strh	r3, [r7, #14]
 800e45e:	e025      	b.n	800e4ac <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d00b      	beq.n	800e47e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e466:	88fb      	ldrh	r3, [r7, #6]
 800e468:	2bff      	cmp	r3, #255	@ 0xff
 800e46a:	d805      	bhi.n	800e478 <ff_convert+0x30>
 800e46c:	88fb      	ldrh	r3, [r7, #6]
 800e46e:	3b80      	subs	r3, #128	@ 0x80
 800e470:	4a12      	ldr	r2, [pc, #72]	@ (800e4bc <ff_convert+0x74>)
 800e472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e476:	e000      	b.n	800e47a <ff_convert+0x32>
 800e478:	2300      	movs	r3, #0
 800e47a:	81fb      	strh	r3, [r7, #14]
 800e47c:	e016      	b.n	800e4ac <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e47e:	2300      	movs	r3, #0
 800e480:	81fb      	strh	r3, [r7, #14]
 800e482:	e009      	b.n	800e498 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e484:	89fb      	ldrh	r3, [r7, #14]
 800e486:	4a0d      	ldr	r2, [pc, #52]	@ (800e4bc <ff_convert+0x74>)
 800e488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e48c:	88fa      	ldrh	r2, [r7, #6]
 800e48e:	429a      	cmp	r2, r3
 800e490:	d006      	beq.n	800e4a0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e492:	89fb      	ldrh	r3, [r7, #14]
 800e494:	3301      	adds	r3, #1
 800e496:	81fb      	strh	r3, [r7, #14]
 800e498:	89fb      	ldrh	r3, [r7, #14]
 800e49a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e49c:	d9f2      	bls.n	800e484 <ff_convert+0x3c>
 800e49e:	e000      	b.n	800e4a2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e4a0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e4a2:	89fb      	ldrh	r3, [r7, #14]
 800e4a4:	3380      	adds	r3, #128	@ 0x80
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e4ac:	89fb      	ldrh	r3, [r7, #14]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr
 800e4ba:	bf00      	nop
 800e4bc:	0800fd5c 	.word	0x0800fd5c

0800e4c0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e4c0:	b480      	push	{r7}
 800e4c2:	b087      	sub	sp, #28
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4d0:	d201      	bcs.n	800e4d6 <ff_wtoupper+0x16>
 800e4d2:	4b3e      	ldr	r3, [pc, #248]	@ (800e5cc <ff_wtoupper+0x10c>)
 800e4d4:	e000      	b.n	800e4d8 <ff_wtoupper+0x18>
 800e4d6:	4b3e      	ldr	r3, [pc, #248]	@ (800e5d0 <ff_wtoupper+0x110>)
 800e4d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	1c9a      	adds	r2, r3, #2
 800e4de:	617a      	str	r2, [r7, #20]
 800e4e0:	881b      	ldrh	r3, [r3, #0]
 800e4e2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e4e4:	8a7b      	ldrh	r3, [r7, #18]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d068      	beq.n	800e5bc <ff_wtoupper+0xfc>
 800e4ea:	88fa      	ldrh	r2, [r7, #6]
 800e4ec:	8a7b      	ldrh	r3, [r7, #18]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d364      	bcc.n	800e5bc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	1c9a      	adds	r2, r3, #2
 800e4f6:	617a      	str	r2, [r7, #20]
 800e4f8:	881b      	ldrh	r3, [r3, #0]
 800e4fa:	823b      	strh	r3, [r7, #16]
 800e4fc:	8a3b      	ldrh	r3, [r7, #16]
 800e4fe:	0a1b      	lsrs	r3, r3, #8
 800e500:	81fb      	strh	r3, [r7, #14]
 800e502:	8a3b      	ldrh	r3, [r7, #16]
 800e504:	b2db      	uxtb	r3, r3
 800e506:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e508:	88fa      	ldrh	r2, [r7, #6]
 800e50a:	8a79      	ldrh	r1, [r7, #18]
 800e50c:	8a3b      	ldrh	r3, [r7, #16]
 800e50e:	440b      	add	r3, r1
 800e510:	429a      	cmp	r2, r3
 800e512:	da49      	bge.n	800e5a8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e514:	89fb      	ldrh	r3, [r7, #14]
 800e516:	2b08      	cmp	r3, #8
 800e518:	d84f      	bhi.n	800e5ba <ff_wtoupper+0xfa>
 800e51a:	a201      	add	r2, pc, #4	@ (adr r2, 800e520 <ff_wtoupper+0x60>)
 800e51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e520:	0800e545 	.word	0x0800e545
 800e524:	0800e557 	.word	0x0800e557
 800e528:	0800e56d 	.word	0x0800e56d
 800e52c:	0800e575 	.word	0x0800e575
 800e530:	0800e57d 	.word	0x0800e57d
 800e534:	0800e585 	.word	0x0800e585
 800e538:	0800e58d 	.word	0x0800e58d
 800e53c:	0800e595 	.word	0x0800e595
 800e540:	0800e59d 	.word	0x0800e59d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e544:	88fa      	ldrh	r2, [r7, #6]
 800e546:	8a7b      	ldrh	r3, [r7, #18]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	4413      	add	r3, r2
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	80fb      	strh	r3, [r7, #6]
 800e554:	e027      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e556:	88fa      	ldrh	r2, [r7, #6]
 800e558:	8a7b      	ldrh	r3, [r7, #18]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	f003 0301 	and.w	r3, r3, #1
 800e562:	b29b      	uxth	r3, r3
 800e564:	88fa      	ldrh	r2, [r7, #6]
 800e566:	1ad3      	subs	r3, r2, r3
 800e568:	80fb      	strh	r3, [r7, #6]
 800e56a:	e01c      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e56c:	88fb      	ldrh	r3, [r7, #6]
 800e56e:	3b10      	subs	r3, #16
 800e570:	80fb      	strh	r3, [r7, #6]
 800e572:	e018      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e574:	88fb      	ldrh	r3, [r7, #6]
 800e576:	3b20      	subs	r3, #32
 800e578:	80fb      	strh	r3, [r7, #6]
 800e57a:	e014      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e57c:	88fb      	ldrh	r3, [r7, #6]
 800e57e:	3b30      	subs	r3, #48	@ 0x30
 800e580:	80fb      	strh	r3, [r7, #6]
 800e582:	e010      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e584:	88fb      	ldrh	r3, [r7, #6]
 800e586:	3b1a      	subs	r3, #26
 800e588:	80fb      	strh	r3, [r7, #6]
 800e58a:	e00c      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e58c:	88fb      	ldrh	r3, [r7, #6]
 800e58e:	3308      	adds	r3, #8
 800e590:	80fb      	strh	r3, [r7, #6]
 800e592:	e008      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e594:	88fb      	ldrh	r3, [r7, #6]
 800e596:	3b50      	subs	r3, #80	@ 0x50
 800e598:	80fb      	strh	r3, [r7, #6]
 800e59a:	e004      	b.n	800e5a6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e59c:	88fb      	ldrh	r3, [r7, #6]
 800e59e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e5a2:	80fb      	strh	r3, [r7, #6]
 800e5a4:	bf00      	nop
			}
			break;
 800e5a6:	e008      	b.n	800e5ba <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e5a8:	89fb      	ldrh	r3, [r7, #14]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d195      	bne.n	800e4da <ff_wtoupper+0x1a>
 800e5ae:	8a3b      	ldrh	r3, [r7, #16]
 800e5b0:	005b      	lsls	r3, r3, #1
 800e5b2:	697a      	ldr	r2, [r7, #20]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e5b8:	e78f      	b.n	800e4da <ff_wtoupper+0x1a>
			break;
 800e5ba:	bf00      	nop
	}

	return chr;
 800e5bc:	88fb      	ldrh	r3, [r7, #6]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	371c      	adds	r7, #28
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c8:	4770      	bx	lr
 800e5ca:	bf00      	nop
 800e5cc:	0800fe5c 	.word	0x0800fe5c
 800e5d0:	08010050 	.word	0x08010050

0800e5d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e5d8:	2200      	movs	r2, #0
 800e5da:	4912      	ldr	r1, [pc, #72]	@ (800e624 <MX_USB_DEVICE_Init+0x50>)
 800e5dc:	4812      	ldr	r0, [pc, #72]	@ (800e628 <MX_USB_DEVICE_Init+0x54>)
 800e5de:	f7fa fd42 	bl	8009066 <USBD_Init>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e5e8:	f7f3 fc4e 	bl	8001e88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800e5ec:	490f      	ldr	r1, [pc, #60]	@ (800e62c <MX_USB_DEVICE_Init+0x58>)
 800e5ee:	480e      	ldr	r0, [pc, #56]	@ (800e628 <MX_USB_DEVICE_Init+0x54>)
 800e5f0:	f7fa fd69 	bl	80090c6 <USBD_RegisterClass>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d001      	beq.n	800e5fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e5fa:	f7f3 fc45 	bl	8001e88 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800e5fe:	490c      	ldr	r1, [pc, #48]	@ (800e630 <MX_USB_DEVICE_Init+0x5c>)
 800e600:	4809      	ldr	r0, [pc, #36]	@ (800e628 <MX_USB_DEVICE_Init+0x54>)
 800e602:	f7f8 ff25 	bl	8007450 <USBD_MSC_RegisterStorage>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e60c:	f7f3 fc3c 	bl	8001e88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e610:	4805      	ldr	r0, [pc, #20]	@ (800e628 <MX_USB_DEVICE_Init+0x54>)
 800e612:	f7fa fd8e 	bl	8009132 <USBD_Start>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e61c:	f7f3 fc34 	bl	8001e88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e620:	bf00      	nop
 800e622:	bd80      	pop	{r7, pc}
 800e624:	200000a4 	.word	0x200000a4
 800e628:	20003ca8 	.word	0x20003ca8
 800e62c:	20000024 	.word	0x20000024
 800e630:	200000f4 	.word	0x200000f4

0800e634 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	4603      	mov	r3, r0
 800e63c:	6039      	str	r1, [r7, #0]
 800e63e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2212      	movs	r2, #18
 800e644:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e646:	4b03      	ldr	r3, [pc, #12]	@ (800e654 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e648:	4618      	mov	r0, r3
 800e64a:	370c      	adds	r7, #12
 800e64c:	46bd      	mov	sp, r7
 800e64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e652:	4770      	bx	lr
 800e654:	200000c0 	.word	0x200000c0

0800e658 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	4603      	mov	r3, r0
 800e660:	6039      	str	r1, [r7, #0]
 800e662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2204      	movs	r2, #4
 800e668:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e66a:	4b03      	ldr	r3, [pc, #12]	@ (800e678 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	200000d4 	.word	0x200000d4

0800e67c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	6039      	str	r1, [r7, #0]
 800e686:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d105      	bne.n	800e69a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	4907      	ldr	r1, [pc, #28]	@ (800e6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e692:	4808      	ldr	r0, [pc, #32]	@ (800e6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e694:	f7fb ff12 	bl	800a4bc <USBD_GetString>
 800e698:	e004      	b.n	800e6a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e69a:	683a      	ldr	r2, [r7, #0]
 800e69c:	4904      	ldr	r1, [pc, #16]	@ (800e6b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e69e:	4805      	ldr	r0, [pc, #20]	@ (800e6b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e6a0:	f7fb ff0c 	bl	800a4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6a4:	4b02      	ldr	r3, [pc, #8]	@ (800e6b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3708      	adds	r7, #8
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}
 800e6ae:	bf00      	nop
 800e6b0:	20003f84 	.word	0x20003f84
 800e6b4:	0800fc70 	.word	0x0800fc70

0800e6b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	6039      	str	r1, [r7, #0]
 800e6c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e6c4:	683a      	ldr	r2, [r7, #0]
 800e6c6:	4904      	ldr	r1, [pc, #16]	@ (800e6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e6c8:	4804      	ldr	r0, [pc, #16]	@ (800e6dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e6ca:	f7fb fef7 	bl	800a4bc <USBD_GetString>
  return USBD_StrDesc;
 800e6ce:	4b02      	ldr	r3, [pc, #8]	@ (800e6d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	20003f84 	.word	0x20003f84
 800e6dc:	0800fc84 	.word	0x0800fc84

0800e6e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	6039      	str	r1, [r7, #0]
 800e6ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	221a      	movs	r2, #26
 800e6f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e6f2:	f000 f843 	bl	800e77c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e6f6:	4b02      	ldr	r3, [pc, #8]	@ (800e700 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	200000d8 	.word	0x200000d8

0800e704 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	6039      	str	r1, [r7, #0]
 800e70e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d105      	bne.n	800e722 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e716:	683a      	ldr	r2, [r7, #0]
 800e718:	4907      	ldr	r1, [pc, #28]	@ (800e738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e71a:	4808      	ldr	r0, [pc, #32]	@ (800e73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e71c:	f7fb fece 	bl	800a4bc <USBD_GetString>
 800e720:	e004      	b.n	800e72c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e722:	683a      	ldr	r2, [r7, #0]
 800e724:	4904      	ldr	r1, [pc, #16]	@ (800e738 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e726:	4805      	ldr	r0, [pc, #20]	@ (800e73c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e728:	f7fb fec8 	bl	800a4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e72c:	4b02      	ldr	r3, [pc, #8]	@ (800e738 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e72e:	4618      	mov	r0, r3
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	20003f84 	.word	0x20003f84
 800e73c:	0800fc98 	.word	0x0800fc98

0800e740 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	4603      	mov	r3, r0
 800e748:	6039      	str	r1, [r7, #0]
 800e74a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e74c:	79fb      	ldrb	r3, [r7, #7]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d105      	bne.n	800e75e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e752:	683a      	ldr	r2, [r7, #0]
 800e754:	4907      	ldr	r1, [pc, #28]	@ (800e774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e756:	4808      	ldr	r0, [pc, #32]	@ (800e778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e758:	f7fb feb0 	bl	800a4bc <USBD_GetString>
 800e75c:	e004      	b.n	800e768 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e75e:	683a      	ldr	r2, [r7, #0]
 800e760:	4904      	ldr	r1, [pc, #16]	@ (800e774 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e762:	4805      	ldr	r0, [pc, #20]	@ (800e778 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e764:	f7fb feaa 	bl	800a4bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e768:	4b02      	ldr	r3, [pc, #8]	@ (800e774 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	20003f84 	.word	0x20003f84
 800e778:	0800fca4 	.word	0x0800fca4

0800e77c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b084      	sub	sp, #16
 800e780:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e782:	4b0f      	ldr	r3, [pc, #60]	@ (800e7c0 <Get_SerialNum+0x44>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e788:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c4 <Get_SerialNum+0x48>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e78e:	4b0e      	ldr	r3, [pc, #56]	@ (800e7c8 <Get_SerialNum+0x4c>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e794:	68fa      	ldr	r2, [r7, #12]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4413      	add	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d009      	beq.n	800e7b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e7a2:	2208      	movs	r2, #8
 800e7a4:	4909      	ldr	r1, [pc, #36]	@ (800e7cc <Get_SerialNum+0x50>)
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f000 f814 	bl	800e7d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e7ac:	2204      	movs	r2, #4
 800e7ae:	4908      	ldr	r1, [pc, #32]	@ (800e7d0 <Get_SerialNum+0x54>)
 800e7b0:	68b8      	ldr	r0, [r7, #8]
 800e7b2:	f000 f80f 	bl	800e7d4 <IntToUnicode>
  }
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	1fff7a10 	.word	0x1fff7a10
 800e7c4:	1fff7a14 	.word	0x1fff7a14
 800e7c8:	1fff7a18 	.word	0x1fff7a18
 800e7cc:	200000da 	.word	0x200000da
 800e7d0:	200000ea 	.word	0x200000ea

0800e7d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b087      	sub	sp, #28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	60f8      	str	r0, [r7, #12]
 800e7dc:	60b9      	str	r1, [r7, #8]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	75fb      	strb	r3, [r7, #23]
 800e7ea:	e027      	b.n	800e83c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	0f1b      	lsrs	r3, r3, #28
 800e7f0:	2b09      	cmp	r3, #9
 800e7f2:	d80b      	bhi.n	800e80c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	0f1b      	lsrs	r3, r3, #28
 800e7f8:	b2da      	uxtb	r2, r3
 800e7fa:	7dfb      	ldrb	r3, [r7, #23]
 800e7fc:	005b      	lsls	r3, r3, #1
 800e7fe:	4619      	mov	r1, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	440b      	add	r3, r1
 800e804:	3230      	adds	r2, #48	@ 0x30
 800e806:	b2d2      	uxtb	r2, r2
 800e808:	701a      	strb	r2, [r3, #0]
 800e80a:	e00a      	b.n	800e822 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	0f1b      	lsrs	r3, r3, #28
 800e810:	b2da      	uxtb	r2, r3
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4619      	mov	r1, r3
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	440b      	add	r3, r1
 800e81c:	3237      	adds	r2, #55	@ 0x37
 800e81e:	b2d2      	uxtb	r2, r2
 800e820:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	011b      	lsls	r3, r3, #4
 800e826:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e828:	7dfb      	ldrb	r3, [r7, #23]
 800e82a:	005b      	lsls	r3, r3, #1
 800e82c:	3301      	adds	r3, #1
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	4413      	add	r3, r2
 800e832:	2200      	movs	r2, #0
 800e834:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	3301      	adds	r3, #1
 800e83a:	75fb      	strb	r3, [r7, #23]
 800e83c:	7dfa      	ldrb	r2, [r7, #23]
 800e83e:	79fb      	ldrb	r3, [r7, #7]
 800e840:	429a      	cmp	r2, r3
 800e842:	d3d3      	bcc.n	800e7ec <IntToUnicode+0x18>
  }
}
 800e844:	bf00      	nop
 800e846:	bf00      	nop
 800e848:	371c      	adds	r7, #28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr

0800e852 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	4603      	mov	r3, r0
 800e85a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800e85c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800e86a:	b480      	push	{r7}
 800e86c:	b085      	sub	sp, #20
 800e86e:	af00      	add	r7, sp, #0
 800e870:	4603      	mov	r3, r0
 800e872:	60b9      	str	r1, [r7, #8]
 800e874:	607a      	str	r2, [r7, #4]
 800e876:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e87e:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e886:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800e888:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3714      	adds	r7, #20
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800e896:	b480      	push	{r7}
 800e898:	b083      	sub	sp, #12
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	4603      	mov	r3, r0
 800e89e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800e8a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	b083      	sub	sp, #12
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800e8b8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr

0800e8c6 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e8c6:	b480      	push	{r7}
 800e8c8:	b085      	sub	sp, #20
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	73fb      	strb	r3, [r7, #15]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800e8da:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3714      	adds	r7, #20
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b085      	sub	sp, #20
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	60b9      	str	r1, [r7, #8]
 800e8f0:	607a      	str	r2, [r7, #4]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	73fb      	strb	r3, [r7, #15]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800e8fc:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3714      	adds	r7, #20
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr

0800e90a <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800e90a:	b480      	push	{r7}
 800e90c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800e90e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e910:	4618      	mov	r0, r3
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
	...

0800e91c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b08a      	sub	sp, #40	@ 0x28
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e924:	f107 0314 	add.w	r3, r7, #20
 800e928:	2200      	movs	r2, #0
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	605a      	str	r2, [r3, #4]
 800e92e:	609a      	str	r2, [r3, #8]
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e93c:	d13a      	bne.n	800e9b4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e93e:	2300      	movs	r3, #0
 800e940:	613b      	str	r3, [r7, #16]
 800e942:	4b1e      	ldr	r3, [pc, #120]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e946:	4a1d      	ldr	r2, [pc, #116]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e948:	f043 0301 	orr.w	r3, r3, #1
 800e94c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e94e:	4b1b      	ldr	r3, [pc, #108]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e952:	f003 0301 	and.w	r3, r3, #1
 800e956:	613b      	str	r3, [r7, #16]
 800e958:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e95a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e95e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e960:	2302      	movs	r3, #2
 800e962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e964:	2300      	movs	r3, #0
 800e966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e968:	2303      	movs	r3, #3
 800e96a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e96c:	230a      	movs	r3, #10
 800e96e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e970:	f107 0314 	add.w	r3, r7, #20
 800e974:	4619      	mov	r1, r3
 800e976:	4812      	ldr	r0, [pc, #72]	@ (800e9c0 <HAL_PCD_MspInit+0xa4>)
 800e978:	f7f3 fdec 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e97c:	4b0f      	ldr	r3, [pc, #60]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e980:	4a0e      	ldr	r2, [pc, #56]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e986:	6353      	str	r3, [r2, #52]	@ 0x34
 800e988:	2300      	movs	r3, #0
 800e98a:	60fb      	str	r3, [r7, #12]
 800e98c:	4b0b      	ldr	r3, [pc, #44]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e98e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e990:	4a0a      	ldr	r2, [pc, #40]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e996:	6453      	str	r3, [r2, #68]	@ 0x44
 800e998:	4b08      	ldr	r3, [pc, #32]	@ (800e9bc <HAL_PCD_MspInit+0xa0>)
 800e99a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e99c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e9a0:	60fb      	str	r3, [r7, #12]
 800e9a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	2043      	movs	r0, #67	@ 0x43
 800e9aa:	f7f3 fd9c 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e9ae:	2043      	movs	r0, #67	@ 0x43
 800e9b0:	f7f3 fdb5 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e9b4:	bf00      	nop
 800e9b6:	3728      	adds	r7, #40	@ 0x28
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	40023800 	.word	0x40023800
 800e9c0:	40020000 	.word	0x40020000

0800e9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4610      	mov	r0, r2
 800e9dc:	f7fa fbf6 	bl	80091cc <USBD_LL_SetupStage>
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e9fa:	78fa      	ldrb	r2, [r7, #3]
 800e9fc:	6879      	ldr	r1, [r7, #4]
 800e9fe:	4613      	mov	r3, r2
 800ea00:	00db      	lsls	r3, r3, #3
 800ea02:	4413      	add	r3, r2
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	440b      	add	r3, r1
 800ea08:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	78fb      	ldrb	r3, [r7, #3]
 800ea10:	4619      	mov	r1, r3
 800ea12:	f7fa fc30 	bl	8009276 <USBD_LL_DataOutStage>
}
 800ea16:	bf00      	nop
 800ea18:	3708      	adds	r7, #8
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b082      	sub	sp, #8
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
 800ea26:	460b      	mov	r3, r1
 800ea28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ea30:	78fa      	ldrb	r2, [r7, #3]
 800ea32:	6879      	ldr	r1, [r7, #4]
 800ea34:	4613      	mov	r3, r2
 800ea36:	00db      	lsls	r3, r3, #3
 800ea38:	4413      	add	r3, r2
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	440b      	add	r3, r1
 800ea3e:	3320      	adds	r3, #32
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	78fb      	ldrb	r3, [r7, #3]
 800ea44:	4619      	mov	r1, r3
 800ea46:	f7fa fcd2 	bl	80093ee <USBD_LL_DataInStage>
}
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b082      	sub	sp, #8
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea60:	4618      	mov	r0, r3
 800ea62:	f7fa fe16 	bl	8009692 <USBD_LL_SOF>
}
 800ea66:	bf00      	nop
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea6e:	b580      	push	{r7, lr}
 800ea70:	b084      	sub	sp, #16
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea76:	2301      	movs	r3, #1
 800ea78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	79db      	ldrb	r3, [r3, #7]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d102      	bne.n	800ea88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea82:	2300      	movs	r3, #0
 800ea84:	73fb      	strb	r3, [r7, #15]
 800ea86:	e008      	b.n	800ea9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	79db      	ldrb	r3, [r3, #7]
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d102      	bne.n	800ea96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea90:	2301      	movs	r3, #1
 800ea92:	73fb      	strb	r3, [r7, #15]
 800ea94:	e001      	b.n	800ea9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea96:	f7f3 f9f7 	bl	8001e88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eaa0:	7bfa      	ldrb	r2, [r7, #15]
 800eaa2:	4611      	mov	r1, r2
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fa fdb0 	bl	800960a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fa fd57 	bl	8009564 <USBD_LL_Reset>
}
 800eab6:	bf00      	nop
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
	...

0800eac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eace:	4618      	mov	r0, r3
 800ead0:	f7fa fdab 	bl	800962a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	6812      	ldr	r2, [r2, #0]
 800eae2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eae6:	f043 0301 	orr.w	r3, r3, #1
 800eaea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	7adb      	ldrb	r3, [r3, #11]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d005      	beq.n	800eb00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eaf4:	4b04      	ldr	r3, [pc, #16]	@ (800eb08 <HAL_PCD_SuspendCallback+0x48>)
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	4a03      	ldr	r2, [pc, #12]	@ (800eb08 <HAL_PCD_SuspendCallback+0x48>)
 800eafa:	f043 0306 	orr.w	r3, r3, #6
 800eafe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eb00:	bf00      	nop
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	e000ed00 	.word	0xe000ed00

0800eb0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fa fda1 	bl	8009662 <USBD_LL_Resume>
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	460b      	mov	r3, r1
 800eb32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb3a:	78fa      	ldrb	r2, [r7, #3]
 800eb3c:	4611      	mov	r1, r2
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f7fa fdf9 	bl	8009736 <USBD_LL_IsoOUTIncomplete>
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	460b      	mov	r3, r1
 800eb56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb5e:	78fa      	ldrb	r2, [r7, #3]
 800eb60:	4611      	mov	r1, r2
 800eb62:	4618      	mov	r0, r3
 800eb64:	f7fa fdb5 	bl	80096d2 <USBD_LL_IsoINIncomplete>
}
 800eb68:	bf00      	nop
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fa fe0b 	bl	800979a <USBD_LL_DevConnected>
}
 800eb84:	bf00      	nop
 800eb86:	3708      	adds	r7, #8
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fa fe08 	bl	80097b0 <USBD_LL_DevDisconnected>
}
 800eba0:	bf00      	nop
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d13c      	bne.n	800ec32 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ebb8:	4a20      	ldr	r2, [pc, #128]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a1e      	ldr	r2, [pc, #120]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebc4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ebc8:	4b1c      	ldr	r3, [pc, #112]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ebce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ebd0:	4b1a      	ldr	r3, [pc, #104]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebd2:	2204      	movs	r2, #4
 800ebd4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ebd6:	4b19      	ldr	r3, [pc, #100]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebd8:	2202      	movs	r2, #2
 800ebda:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ebdc:	4b17      	ldr	r3, [pc, #92]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebde:	2200      	movs	r2, #0
 800ebe0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ebe2:	4b16      	ldr	r3, [pc, #88]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebe4:	2202      	movs	r2, #2
 800ebe6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ebe8:	4b14      	ldr	r3, [pc, #80]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ebee:	4b13      	ldr	r3, [pc, #76]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ebf4:	4b11      	ldr	r3, [pc, #68]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ebfa:	4b10      	ldr	r3, [pc, #64]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ec00:	4b0e      	ldr	r3, [pc, #56]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ec06:	480d      	ldr	r0, [pc, #52]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ec08:	f7f3 fe69 	bl	80028de <HAL_PCD_Init>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ec12:	f7f3 f939 	bl	8001e88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ec16:	2180      	movs	r1, #128	@ 0x80
 800ec18:	4808      	ldr	r0, [pc, #32]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ec1a:	f7f5 f8c2 	bl	8003da2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ec1e:	2240      	movs	r2, #64	@ 0x40
 800ec20:	2100      	movs	r1, #0
 800ec22:	4806      	ldr	r0, [pc, #24]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ec24:	f7f5 f876 	bl	8003d14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ec28:	2280      	movs	r2, #128	@ 0x80
 800ec2a:	2101      	movs	r1, #1
 800ec2c:	4803      	ldr	r0, [pc, #12]	@ (800ec3c <USBD_LL_Init+0x94>)
 800ec2e:	f7f5 f871 	bl	8003d14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ec32:	2300      	movs	r3, #0
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	20004184 	.word	0x20004184

0800ec40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f3 ff50 	bl	8002afc <HAL_PCD_Start>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec60:	7bfb      	ldrb	r3, [r7, #15]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 f962 	bl	800ef2c <USBD_Get_USB_Status>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b084      	sub	sp, #16
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	4608      	mov	r0, r1
 800ec80:	4611      	mov	r1, r2
 800ec82:	461a      	mov	r2, r3
 800ec84:	4603      	mov	r3, r0
 800ec86:	70fb      	strb	r3, [r7, #3]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	70bb      	strb	r3, [r7, #2]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec90:	2300      	movs	r3, #0
 800ec92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ec9e:	78bb      	ldrb	r3, [r7, #2]
 800eca0:	883a      	ldrh	r2, [r7, #0]
 800eca2:	78f9      	ldrb	r1, [r7, #3]
 800eca4:	f7f4 fc24 	bl	80034f0 <HAL_PCD_EP_Open>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f000 f93c 	bl	800ef2c <USBD_Get_USB_Status>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b084      	sub	sp, #16
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
 800ecca:	460b      	mov	r3, r1
 800eccc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ecdc:	78fa      	ldrb	r2, [r7, #3]
 800ecde:	4611      	mov	r1, r2
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7f4 fc6f 	bl	80035c4 <HAL_PCD_EP_Close>
 800ece6:	4603      	mov	r3, r0
 800ece8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecea:	7bfb      	ldrb	r3, [r7, #15]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f000 f91d 	bl	800ef2c <USBD_Get_USB_Status>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed10:	2300      	movs	r3, #0
 800ed12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed1a:	78fa      	ldrb	r2, [r7, #3]
 800ed1c:	4611      	mov	r1, r2
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7f4 fe11 	bl	8003946 <HAL_PCD_EP_Flush>
 800ed24:	4603      	mov	r3, r0
 800ed26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed28:	7bfb      	ldrb	r3, [r7, #15]
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f000 f8fe 	bl	800ef2c <USBD_Get_USB_Status>
 800ed30:	4603      	mov	r3, r0
 800ed32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3710      	adds	r7, #16
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b084      	sub	sp, #16
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
 800ed46:	460b      	mov	r3, r1
 800ed48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed58:	78fa      	ldrb	r2, [r7, #3]
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7f4 fd08 	bl	8003772 <HAL_PCD_EP_SetStall>
 800ed62:	4603      	mov	r3, r0
 800ed64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed66:	7bfb      	ldrb	r3, [r7, #15]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f000 f8df 	bl	800ef2c <USBD_Get_USB_Status>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	460b      	mov	r3, r1
 800ed86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed96:	78fa      	ldrb	r2, [r7, #3]
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7f4 fd4c 	bl	8003838 <HAL_PCD_EP_ClrStall>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 f8c0 	bl	800ef2c <USBD_Get_USB_Status>
 800edac:	4603      	mov	r3, r0
 800edae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edb2:	4618      	mov	r0, r3
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edba:	b480      	push	{r7}
 800edbc:	b085      	sub	sp, #20
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
 800edc2:	460b      	mov	r3, r1
 800edc4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edcc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800edce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	da0b      	bge.n	800edee <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800edd6:	78fb      	ldrb	r3, [r7, #3]
 800edd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eddc:	68f9      	ldr	r1, [r7, #12]
 800edde:	4613      	mov	r3, r2
 800ede0:	00db      	lsls	r3, r3, #3
 800ede2:	4413      	add	r3, r2
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	440b      	add	r3, r1
 800ede8:	3316      	adds	r3, #22
 800edea:	781b      	ldrb	r3, [r3, #0]
 800edec:	e00b      	b.n	800ee06 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800edee:	78fb      	ldrb	r3, [r7, #3]
 800edf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800edf4:	68f9      	ldr	r1, [r7, #12]
 800edf6:	4613      	mov	r3, r2
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	4413      	add	r3, r2
 800edfc:	009b      	lsls	r3, r3, #2
 800edfe:	440b      	add	r3, r1
 800ee00:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ee04:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr

0800ee12 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b084      	sub	sp, #16
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
 800ee1a:	460b      	mov	r3, r1
 800ee1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee22:	2300      	movs	r3, #0
 800ee24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee2c:	78fa      	ldrb	r2, [r7, #3]
 800ee2e:	4611      	mov	r1, r2
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7f4 fb39 	bl	80034a8 <HAL_PCD_SetAddress>
 800ee36:	4603      	mov	r3, r0
 800ee38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee3a:	7bfb      	ldrb	r3, [r7, #15]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f000 f875 	bl	800ef2c <USBD_Get_USB_Status>
 800ee42:	4603      	mov	r3, r0
 800ee44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3710      	adds	r7, #16
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bd80      	pop	{r7, pc}

0800ee50 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	607a      	str	r2, [r7, #4]
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee60:	2300      	movs	r3, #0
 800ee62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee64:	2300      	movs	r3, #0
 800ee66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ee6e:	7af9      	ldrb	r1, [r7, #11]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	f7f4 fc43 	bl	80036fe <HAL_PCD_EP_Transmit>
 800ee78:	4603      	mov	r3, r0
 800ee7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee7c:	7dfb      	ldrb	r3, [r7, #23]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f000 f854 	bl	800ef2c <USBD_Get_USB_Status>
 800ee84:	4603      	mov	r3, r0
 800ee86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee88:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3718      	adds	r7, #24
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b086      	sub	sp, #24
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	60f8      	str	r0, [r7, #12]
 800ee9a:	607a      	str	r2, [r7, #4]
 800ee9c:	603b      	str	r3, [r7, #0]
 800ee9e:	460b      	mov	r3, r1
 800eea0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eea2:	2300      	movs	r3, #0
 800eea4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eeb0:	7af9      	ldrb	r1, [r7, #11]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	f7f4 fbcf 	bl	8003658 <HAL_PCD_EP_Receive>
 800eeba:	4603      	mov	r3, r0
 800eebc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eebe:	7dfb      	ldrb	r3, [r7, #23]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f000 f833 	bl	800ef2c <USBD_Get_USB_Status>
 800eec6:	4603      	mov	r3, r0
 800eec8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eeca:	7dbb      	ldrb	r3, [r7, #22]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3718      	adds	r7, #24
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	460b      	mov	r3, r1
 800eede:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eee6:	78fa      	ldrb	r2, [r7, #3]
 800eee8:	4611      	mov	r1, r2
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7f4 fbef 	bl	80036ce <HAL_PCD_EP_GetRxCount>
 800eef0:	4603      	mov	r3, r0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3708      	adds	r7, #8
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
	...

0800eefc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef04:	4b03      	ldr	r3, [pc, #12]	@ (800ef14 <USBD_static_malloc+0x18>)
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	370c      	adds	r7, #12
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	20004668 	.word	0x20004668

0800ef18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]

}
 800ef20:	bf00      	nop
 800ef22:	370c      	adds	r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2a:	4770      	bx	lr

0800ef2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef36:	2300      	movs	r3, #0
 800ef38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef3a:	79fb      	ldrb	r3, [r7, #7]
 800ef3c:	2b03      	cmp	r3, #3
 800ef3e:	d817      	bhi.n	800ef70 <USBD_Get_USB_Status+0x44>
 800ef40:	a201      	add	r2, pc, #4	@ (adr r2, 800ef48 <USBD_Get_USB_Status+0x1c>)
 800ef42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef46:	bf00      	nop
 800ef48:	0800ef59 	.word	0x0800ef59
 800ef4c:	0800ef5f 	.word	0x0800ef5f
 800ef50:	0800ef65 	.word	0x0800ef65
 800ef54:	0800ef6b 	.word	0x0800ef6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ef5c:	e00b      	b.n	800ef76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	73fb      	strb	r3, [r7, #15]
    break;
 800ef62:	e008      	b.n	800ef76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ef64:	2301      	movs	r3, #1
 800ef66:	73fb      	strb	r3, [r7, #15]
    break;
 800ef68:	e005      	b.n	800ef76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	73fb      	strb	r3, [r7, #15]
    break;
 800ef6e:	e002      	b.n	800ef76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ef70:	2303      	movs	r3, #3
 800ef72:	73fb      	strb	r3, [r7, #15]
    break;
 800ef74:	bf00      	nop
  }
  return usb_status;
 800ef76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3714      	adds	r7, #20
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <siprintf>:
 800ef84:	b40e      	push	{r1, r2, r3}
 800ef86:	b500      	push	{lr}
 800ef88:	b09c      	sub	sp, #112	@ 0x70
 800ef8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ef8c:	9002      	str	r0, [sp, #8]
 800ef8e:	9006      	str	r0, [sp, #24]
 800ef90:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ef94:	4809      	ldr	r0, [pc, #36]	@ (800efbc <siprintf+0x38>)
 800ef96:	9107      	str	r1, [sp, #28]
 800ef98:	9104      	str	r1, [sp, #16]
 800ef9a:	4909      	ldr	r1, [pc, #36]	@ (800efc0 <siprintf+0x3c>)
 800ef9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800efa0:	9105      	str	r1, [sp, #20]
 800efa2:	6800      	ldr	r0, [r0, #0]
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	a902      	add	r1, sp, #8
 800efa8:	f000 f99c 	bl	800f2e4 <_svfiprintf_r>
 800efac:	9b02      	ldr	r3, [sp, #8]
 800efae:	2200      	movs	r2, #0
 800efb0:	701a      	strb	r2, [r3, #0]
 800efb2:	b01c      	add	sp, #112	@ 0x70
 800efb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800efb8:	b003      	add	sp, #12
 800efba:	4770      	bx	lr
 800efbc:	20000114 	.word	0x20000114
 800efc0:	ffff0208 	.word	0xffff0208

0800efc4 <memset>:
 800efc4:	4402      	add	r2, r0
 800efc6:	4603      	mov	r3, r0
 800efc8:	4293      	cmp	r3, r2
 800efca:	d100      	bne.n	800efce <memset+0xa>
 800efcc:	4770      	bx	lr
 800efce:	f803 1b01 	strb.w	r1, [r3], #1
 800efd2:	e7f9      	b.n	800efc8 <memset+0x4>

0800efd4 <__errno>:
 800efd4:	4b01      	ldr	r3, [pc, #4]	@ (800efdc <__errno+0x8>)
 800efd6:	6818      	ldr	r0, [r3, #0]
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	20000114 	.word	0x20000114

0800efe0 <__libc_init_array>:
 800efe0:	b570      	push	{r4, r5, r6, lr}
 800efe2:	4d0d      	ldr	r5, [pc, #52]	@ (800f018 <__libc_init_array+0x38>)
 800efe4:	4c0d      	ldr	r4, [pc, #52]	@ (800f01c <__libc_init_array+0x3c>)
 800efe6:	1b64      	subs	r4, r4, r5
 800efe8:	10a4      	asrs	r4, r4, #2
 800efea:	2600      	movs	r6, #0
 800efec:	42a6      	cmp	r6, r4
 800efee:	d109      	bne.n	800f004 <__libc_init_array+0x24>
 800eff0:	4d0b      	ldr	r5, [pc, #44]	@ (800f020 <__libc_init_array+0x40>)
 800eff2:	4c0c      	ldr	r4, [pc, #48]	@ (800f024 <__libc_init_array+0x44>)
 800eff4:	f000 fc6e 	bl	800f8d4 <_init>
 800eff8:	1b64      	subs	r4, r4, r5
 800effa:	10a4      	asrs	r4, r4, #2
 800effc:	2600      	movs	r6, #0
 800effe:	42a6      	cmp	r6, r4
 800f000:	d105      	bne.n	800f00e <__libc_init_array+0x2e>
 800f002:	bd70      	pop	{r4, r5, r6, pc}
 800f004:	f855 3b04 	ldr.w	r3, [r5], #4
 800f008:	4798      	blx	r3
 800f00a:	3601      	adds	r6, #1
 800f00c:	e7ee      	b.n	800efec <__libc_init_array+0xc>
 800f00e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f012:	4798      	blx	r3
 800f014:	3601      	adds	r6, #1
 800f016:	e7f2      	b.n	800effe <__libc_init_array+0x1e>
 800f018:	0801016c 	.word	0x0801016c
 800f01c:	0801016c 	.word	0x0801016c
 800f020:	0801016c 	.word	0x0801016c
 800f024:	08010170 	.word	0x08010170

0800f028 <__retarget_lock_acquire_recursive>:
 800f028:	4770      	bx	lr

0800f02a <__retarget_lock_release_recursive>:
 800f02a:	4770      	bx	lr

0800f02c <strcpy>:
 800f02c:	4603      	mov	r3, r0
 800f02e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f032:	f803 2b01 	strb.w	r2, [r3], #1
 800f036:	2a00      	cmp	r2, #0
 800f038:	d1f9      	bne.n	800f02e <strcpy+0x2>
 800f03a:	4770      	bx	lr

0800f03c <_free_r>:
 800f03c:	b538      	push	{r3, r4, r5, lr}
 800f03e:	4605      	mov	r5, r0
 800f040:	2900      	cmp	r1, #0
 800f042:	d041      	beq.n	800f0c8 <_free_r+0x8c>
 800f044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f048:	1f0c      	subs	r4, r1, #4
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	bfb8      	it	lt
 800f04e:	18e4      	addlt	r4, r4, r3
 800f050:	f000 f8e0 	bl	800f214 <__malloc_lock>
 800f054:	4a1d      	ldr	r2, [pc, #116]	@ (800f0cc <_free_r+0x90>)
 800f056:	6813      	ldr	r3, [r2, #0]
 800f058:	b933      	cbnz	r3, 800f068 <_free_r+0x2c>
 800f05a:	6063      	str	r3, [r4, #4]
 800f05c:	6014      	str	r4, [r2, #0]
 800f05e:	4628      	mov	r0, r5
 800f060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f064:	f000 b8dc 	b.w	800f220 <__malloc_unlock>
 800f068:	42a3      	cmp	r3, r4
 800f06a:	d908      	bls.n	800f07e <_free_r+0x42>
 800f06c:	6820      	ldr	r0, [r4, #0]
 800f06e:	1821      	adds	r1, r4, r0
 800f070:	428b      	cmp	r3, r1
 800f072:	bf01      	itttt	eq
 800f074:	6819      	ldreq	r1, [r3, #0]
 800f076:	685b      	ldreq	r3, [r3, #4]
 800f078:	1809      	addeq	r1, r1, r0
 800f07a:	6021      	streq	r1, [r4, #0]
 800f07c:	e7ed      	b.n	800f05a <_free_r+0x1e>
 800f07e:	461a      	mov	r2, r3
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	b10b      	cbz	r3, 800f088 <_free_r+0x4c>
 800f084:	42a3      	cmp	r3, r4
 800f086:	d9fa      	bls.n	800f07e <_free_r+0x42>
 800f088:	6811      	ldr	r1, [r2, #0]
 800f08a:	1850      	adds	r0, r2, r1
 800f08c:	42a0      	cmp	r0, r4
 800f08e:	d10b      	bne.n	800f0a8 <_free_r+0x6c>
 800f090:	6820      	ldr	r0, [r4, #0]
 800f092:	4401      	add	r1, r0
 800f094:	1850      	adds	r0, r2, r1
 800f096:	4283      	cmp	r3, r0
 800f098:	6011      	str	r1, [r2, #0]
 800f09a:	d1e0      	bne.n	800f05e <_free_r+0x22>
 800f09c:	6818      	ldr	r0, [r3, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	6053      	str	r3, [r2, #4]
 800f0a2:	4408      	add	r0, r1
 800f0a4:	6010      	str	r0, [r2, #0]
 800f0a6:	e7da      	b.n	800f05e <_free_r+0x22>
 800f0a8:	d902      	bls.n	800f0b0 <_free_r+0x74>
 800f0aa:	230c      	movs	r3, #12
 800f0ac:	602b      	str	r3, [r5, #0]
 800f0ae:	e7d6      	b.n	800f05e <_free_r+0x22>
 800f0b0:	6820      	ldr	r0, [r4, #0]
 800f0b2:	1821      	adds	r1, r4, r0
 800f0b4:	428b      	cmp	r3, r1
 800f0b6:	bf04      	itt	eq
 800f0b8:	6819      	ldreq	r1, [r3, #0]
 800f0ba:	685b      	ldreq	r3, [r3, #4]
 800f0bc:	6063      	str	r3, [r4, #4]
 800f0be:	bf04      	itt	eq
 800f0c0:	1809      	addeq	r1, r1, r0
 800f0c2:	6021      	streq	r1, [r4, #0]
 800f0c4:	6054      	str	r4, [r2, #4]
 800f0c6:	e7ca      	b.n	800f05e <_free_r+0x22>
 800f0c8:	bd38      	pop	{r3, r4, r5, pc}
 800f0ca:	bf00      	nop
 800f0cc:	20004a34 	.word	0x20004a34

0800f0d0 <sbrk_aligned>:
 800f0d0:	b570      	push	{r4, r5, r6, lr}
 800f0d2:	4e0f      	ldr	r6, [pc, #60]	@ (800f110 <sbrk_aligned+0x40>)
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	6831      	ldr	r1, [r6, #0]
 800f0d8:	4605      	mov	r5, r0
 800f0da:	b911      	cbnz	r1, 800f0e2 <sbrk_aligned+0x12>
 800f0dc:	f000 fba6 	bl	800f82c <_sbrk_r>
 800f0e0:	6030      	str	r0, [r6, #0]
 800f0e2:	4621      	mov	r1, r4
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	f000 fba1 	bl	800f82c <_sbrk_r>
 800f0ea:	1c43      	adds	r3, r0, #1
 800f0ec:	d103      	bne.n	800f0f6 <sbrk_aligned+0x26>
 800f0ee:	f04f 34ff 	mov.w	r4, #4294967295
 800f0f2:	4620      	mov	r0, r4
 800f0f4:	bd70      	pop	{r4, r5, r6, pc}
 800f0f6:	1cc4      	adds	r4, r0, #3
 800f0f8:	f024 0403 	bic.w	r4, r4, #3
 800f0fc:	42a0      	cmp	r0, r4
 800f0fe:	d0f8      	beq.n	800f0f2 <sbrk_aligned+0x22>
 800f100:	1a21      	subs	r1, r4, r0
 800f102:	4628      	mov	r0, r5
 800f104:	f000 fb92 	bl	800f82c <_sbrk_r>
 800f108:	3001      	adds	r0, #1
 800f10a:	d1f2      	bne.n	800f0f2 <sbrk_aligned+0x22>
 800f10c:	e7ef      	b.n	800f0ee <sbrk_aligned+0x1e>
 800f10e:	bf00      	nop
 800f110:	20004a30 	.word	0x20004a30

0800f114 <_malloc_r>:
 800f114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f118:	1ccd      	adds	r5, r1, #3
 800f11a:	f025 0503 	bic.w	r5, r5, #3
 800f11e:	3508      	adds	r5, #8
 800f120:	2d0c      	cmp	r5, #12
 800f122:	bf38      	it	cc
 800f124:	250c      	movcc	r5, #12
 800f126:	2d00      	cmp	r5, #0
 800f128:	4606      	mov	r6, r0
 800f12a:	db01      	blt.n	800f130 <_malloc_r+0x1c>
 800f12c:	42a9      	cmp	r1, r5
 800f12e:	d904      	bls.n	800f13a <_malloc_r+0x26>
 800f130:	230c      	movs	r3, #12
 800f132:	6033      	str	r3, [r6, #0]
 800f134:	2000      	movs	r0, #0
 800f136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f210 <_malloc_r+0xfc>
 800f13e:	f000 f869 	bl	800f214 <__malloc_lock>
 800f142:	f8d8 3000 	ldr.w	r3, [r8]
 800f146:	461c      	mov	r4, r3
 800f148:	bb44      	cbnz	r4, 800f19c <_malloc_r+0x88>
 800f14a:	4629      	mov	r1, r5
 800f14c:	4630      	mov	r0, r6
 800f14e:	f7ff ffbf 	bl	800f0d0 <sbrk_aligned>
 800f152:	1c43      	adds	r3, r0, #1
 800f154:	4604      	mov	r4, r0
 800f156:	d158      	bne.n	800f20a <_malloc_r+0xf6>
 800f158:	f8d8 4000 	ldr.w	r4, [r8]
 800f15c:	4627      	mov	r7, r4
 800f15e:	2f00      	cmp	r7, #0
 800f160:	d143      	bne.n	800f1ea <_malloc_r+0xd6>
 800f162:	2c00      	cmp	r4, #0
 800f164:	d04b      	beq.n	800f1fe <_malloc_r+0xea>
 800f166:	6823      	ldr	r3, [r4, #0]
 800f168:	4639      	mov	r1, r7
 800f16a:	4630      	mov	r0, r6
 800f16c:	eb04 0903 	add.w	r9, r4, r3
 800f170:	f000 fb5c 	bl	800f82c <_sbrk_r>
 800f174:	4581      	cmp	r9, r0
 800f176:	d142      	bne.n	800f1fe <_malloc_r+0xea>
 800f178:	6821      	ldr	r1, [r4, #0]
 800f17a:	1a6d      	subs	r5, r5, r1
 800f17c:	4629      	mov	r1, r5
 800f17e:	4630      	mov	r0, r6
 800f180:	f7ff ffa6 	bl	800f0d0 <sbrk_aligned>
 800f184:	3001      	adds	r0, #1
 800f186:	d03a      	beq.n	800f1fe <_malloc_r+0xea>
 800f188:	6823      	ldr	r3, [r4, #0]
 800f18a:	442b      	add	r3, r5
 800f18c:	6023      	str	r3, [r4, #0]
 800f18e:	f8d8 3000 	ldr.w	r3, [r8]
 800f192:	685a      	ldr	r2, [r3, #4]
 800f194:	bb62      	cbnz	r2, 800f1f0 <_malloc_r+0xdc>
 800f196:	f8c8 7000 	str.w	r7, [r8]
 800f19a:	e00f      	b.n	800f1bc <_malloc_r+0xa8>
 800f19c:	6822      	ldr	r2, [r4, #0]
 800f19e:	1b52      	subs	r2, r2, r5
 800f1a0:	d420      	bmi.n	800f1e4 <_malloc_r+0xd0>
 800f1a2:	2a0b      	cmp	r2, #11
 800f1a4:	d917      	bls.n	800f1d6 <_malloc_r+0xc2>
 800f1a6:	1961      	adds	r1, r4, r5
 800f1a8:	42a3      	cmp	r3, r4
 800f1aa:	6025      	str	r5, [r4, #0]
 800f1ac:	bf18      	it	ne
 800f1ae:	6059      	strne	r1, [r3, #4]
 800f1b0:	6863      	ldr	r3, [r4, #4]
 800f1b2:	bf08      	it	eq
 800f1b4:	f8c8 1000 	streq.w	r1, [r8]
 800f1b8:	5162      	str	r2, [r4, r5]
 800f1ba:	604b      	str	r3, [r1, #4]
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f000 f82f 	bl	800f220 <__malloc_unlock>
 800f1c2:	f104 000b 	add.w	r0, r4, #11
 800f1c6:	1d23      	adds	r3, r4, #4
 800f1c8:	f020 0007 	bic.w	r0, r0, #7
 800f1cc:	1ac2      	subs	r2, r0, r3
 800f1ce:	bf1c      	itt	ne
 800f1d0:	1a1b      	subne	r3, r3, r0
 800f1d2:	50a3      	strne	r3, [r4, r2]
 800f1d4:	e7af      	b.n	800f136 <_malloc_r+0x22>
 800f1d6:	6862      	ldr	r2, [r4, #4]
 800f1d8:	42a3      	cmp	r3, r4
 800f1da:	bf0c      	ite	eq
 800f1dc:	f8c8 2000 	streq.w	r2, [r8]
 800f1e0:	605a      	strne	r2, [r3, #4]
 800f1e2:	e7eb      	b.n	800f1bc <_malloc_r+0xa8>
 800f1e4:	4623      	mov	r3, r4
 800f1e6:	6864      	ldr	r4, [r4, #4]
 800f1e8:	e7ae      	b.n	800f148 <_malloc_r+0x34>
 800f1ea:	463c      	mov	r4, r7
 800f1ec:	687f      	ldr	r7, [r7, #4]
 800f1ee:	e7b6      	b.n	800f15e <_malloc_r+0x4a>
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	42a3      	cmp	r3, r4
 800f1f6:	d1fb      	bne.n	800f1f0 <_malloc_r+0xdc>
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	6053      	str	r3, [r2, #4]
 800f1fc:	e7de      	b.n	800f1bc <_malloc_r+0xa8>
 800f1fe:	230c      	movs	r3, #12
 800f200:	6033      	str	r3, [r6, #0]
 800f202:	4630      	mov	r0, r6
 800f204:	f000 f80c 	bl	800f220 <__malloc_unlock>
 800f208:	e794      	b.n	800f134 <_malloc_r+0x20>
 800f20a:	6005      	str	r5, [r0, #0]
 800f20c:	e7d6      	b.n	800f1bc <_malloc_r+0xa8>
 800f20e:	bf00      	nop
 800f210:	20004a34 	.word	0x20004a34

0800f214 <__malloc_lock>:
 800f214:	4801      	ldr	r0, [pc, #4]	@ (800f21c <__malloc_lock+0x8>)
 800f216:	f7ff bf07 	b.w	800f028 <__retarget_lock_acquire_recursive>
 800f21a:	bf00      	nop
 800f21c:	20004a2c 	.word	0x20004a2c

0800f220 <__malloc_unlock>:
 800f220:	4801      	ldr	r0, [pc, #4]	@ (800f228 <__malloc_unlock+0x8>)
 800f222:	f7ff bf02 	b.w	800f02a <__retarget_lock_release_recursive>
 800f226:	bf00      	nop
 800f228:	20004a2c 	.word	0x20004a2c

0800f22c <__ssputs_r>:
 800f22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f230:	688e      	ldr	r6, [r1, #8]
 800f232:	461f      	mov	r7, r3
 800f234:	42be      	cmp	r6, r7
 800f236:	680b      	ldr	r3, [r1, #0]
 800f238:	4682      	mov	sl, r0
 800f23a:	460c      	mov	r4, r1
 800f23c:	4690      	mov	r8, r2
 800f23e:	d82d      	bhi.n	800f29c <__ssputs_r+0x70>
 800f240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f248:	d026      	beq.n	800f298 <__ssputs_r+0x6c>
 800f24a:	6965      	ldr	r5, [r4, #20]
 800f24c:	6909      	ldr	r1, [r1, #16]
 800f24e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f252:	eba3 0901 	sub.w	r9, r3, r1
 800f256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f25a:	1c7b      	adds	r3, r7, #1
 800f25c:	444b      	add	r3, r9
 800f25e:	106d      	asrs	r5, r5, #1
 800f260:	429d      	cmp	r5, r3
 800f262:	bf38      	it	cc
 800f264:	461d      	movcc	r5, r3
 800f266:	0553      	lsls	r3, r2, #21
 800f268:	d527      	bpl.n	800f2ba <__ssputs_r+0x8e>
 800f26a:	4629      	mov	r1, r5
 800f26c:	f7ff ff52 	bl	800f114 <_malloc_r>
 800f270:	4606      	mov	r6, r0
 800f272:	b360      	cbz	r0, 800f2ce <__ssputs_r+0xa2>
 800f274:	6921      	ldr	r1, [r4, #16]
 800f276:	464a      	mov	r2, r9
 800f278:	f000 fae8 	bl	800f84c <memcpy>
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f286:	81a3      	strh	r3, [r4, #12]
 800f288:	6126      	str	r6, [r4, #16]
 800f28a:	6165      	str	r5, [r4, #20]
 800f28c:	444e      	add	r6, r9
 800f28e:	eba5 0509 	sub.w	r5, r5, r9
 800f292:	6026      	str	r6, [r4, #0]
 800f294:	60a5      	str	r5, [r4, #8]
 800f296:	463e      	mov	r6, r7
 800f298:	42be      	cmp	r6, r7
 800f29a:	d900      	bls.n	800f29e <__ssputs_r+0x72>
 800f29c:	463e      	mov	r6, r7
 800f29e:	6820      	ldr	r0, [r4, #0]
 800f2a0:	4632      	mov	r2, r6
 800f2a2:	4641      	mov	r1, r8
 800f2a4:	f000 faa8 	bl	800f7f8 <memmove>
 800f2a8:	68a3      	ldr	r3, [r4, #8]
 800f2aa:	1b9b      	subs	r3, r3, r6
 800f2ac:	60a3      	str	r3, [r4, #8]
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	4433      	add	r3, r6
 800f2b2:	6023      	str	r3, [r4, #0]
 800f2b4:	2000      	movs	r0, #0
 800f2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	f000 fad4 	bl	800f868 <_realloc_r>
 800f2c0:	4606      	mov	r6, r0
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d1e0      	bne.n	800f288 <__ssputs_r+0x5c>
 800f2c6:	6921      	ldr	r1, [r4, #16]
 800f2c8:	4650      	mov	r0, sl
 800f2ca:	f7ff feb7 	bl	800f03c <_free_r>
 800f2ce:	230c      	movs	r3, #12
 800f2d0:	f8ca 3000 	str.w	r3, [sl]
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2da:	81a3      	strh	r3, [r4, #12]
 800f2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e0:	e7e9      	b.n	800f2b6 <__ssputs_r+0x8a>
	...

0800f2e4 <_svfiprintf_r>:
 800f2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2e8:	4698      	mov	r8, r3
 800f2ea:	898b      	ldrh	r3, [r1, #12]
 800f2ec:	061b      	lsls	r3, r3, #24
 800f2ee:	b09d      	sub	sp, #116	@ 0x74
 800f2f0:	4607      	mov	r7, r0
 800f2f2:	460d      	mov	r5, r1
 800f2f4:	4614      	mov	r4, r2
 800f2f6:	d510      	bpl.n	800f31a <_svfiprintf_r+0x36>
 800f2f8:	690b      	ldr	r3, [r1, #16]
 800f2fa:	b973      	cbnz	r3, 800f31a <_svfiprintf_r+0x36>
 800f2fc:	2140      	movs	r1, #64	@ 0x40
 800f2fe:	f7ff ff09 	bl	800f114 <_malloc_r>
 800f302:	6028      	str	r0, [r5, #0]
 800f304:	6128      	str	r0, [r5, #16]
 800f306:	b930      	cbnz	r0, 800f316 <_svfiprintf_r+0x32>
 800f308:	230c      	movs	r3, #12
 800f30a:	603b      	str	r3, [r7, #0]
 800f30c:	f04f 30ff 	mov.w	r0, #4294967295
 800f310:	b01d      	add	sp, #116	@ 0x74
 800f312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f316:	2340      	movs	r3, #64	@ 0x40
 800f318:	616b      	str	r3, [r5, #20]
 800f31a:	2300      	movs	r3, #0
 800f31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f31e:	2320      	movs	r3, #32
 800f320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f324:	f8cd 800c 	str.w	r8, [sp, #12]
 800f328:	2330      	movs	r3, #48	@ 0x30
 800f32a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f4c8 <_svfiprintf_r+0x1e4>
 800f32e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f332:	f04f 0901 	mov.w	r9, #1
 800f336:	4623      	mov	r3, r4
 800f338:	469a      	mov	sl, r3
 800f33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f33e:	b10a      	cbz	r2, 800f344 <_svfiprintf_r+0x60>
 800f340:	2a25      	cmp	r2, #37	@ 0x25
 800f342:	d1f9      	bne.n	800f338 <_svfiprintf_r+0x54>
 800f344:	ebba 0b04 	subs.w	fp, sl, r4
 800f348:	d00b      	beq.n	800f362 <_svfiprintf_r+0x7e>
 800f34a:	465b      	mov	r3, fp
 800f34c:	4622      	mov	r2, r4
 800f34e:	4629      	mov	r1, r5
 800f350:	4638      	mov	r0, r7
 800f352:	f7ff ff6b 	bl	800f22c <__ssputs_r>
 800f356:	3001      	adds	r0, #1
 800f358:	f000 80a7 	beq.w	800f4aa <_svfiprintf_r+0x1c6>
 800f35c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f35e:	445a      	add	r2, fp
 800f360:	9209      	str	r2, [sp, #36]	@ 0x24
 800f362:	f89a 3000 	ldrb.w	r3, [sl]
 800f366:	2b00      	cmp	r3, #0
 800f368:	f000 809f 	beq.w	800f4aa <_svfiprintf_r+0x1c6>
 800f36c:	2300      	movs	r3, #0
 800f36e:	f04f 32ff 	mov.w	r2, #4294967295
 800f372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f376:	f10a 0a01 	add.w	sl, sl, #1
 800f37a:	9304      	str	r3, [sp, #16]
 800f37c:	9307      	str	r3, [sp, #28]
 800f37e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f382:	931a      	str	r3, [sp, #104]	@ 0x68
 800f384:	4654      	mov	r4, sl
 800f386:	2205      	movs	r2, #5
 800f388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f38c:	484e      	ldr	r0, [pc, #312]	@ (800f4c8 <_svfiprintf_r+0x1e4>)
 800f38e:	f7f0 ff37 	bl	8000200 <memchr>
 800f392:	9a04      	ldr	r2, [sp, #16]
 800f394:	b9d8      	cbnz	r0, 800f3ce <_svfiprintf_r+0xea>
 800f396:	06d0      	lsls	r0, r2, #27
 800f398:	bf44      	itt	mi
 800f39a:	2320      	movmi	r3, #32
 800f39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3a0:	0711      	lsls	r1, r2, #28
 800f3a2:	bf44      	itt	mi
 800f3a4:	232b      	movmi	r3, #43	@ 0x2b
 800f3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f3ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3b0:	d015      	beq.n	800f3de <_svfiprintf_r+0xfa>
 800f3b2:	9a07      	ldr	r2, [sp, #28]
 800f3b4:	4654      	mov	r4, sl
 800f3b6:	2000      	movs	r0, #0
 800f3b8:	f04f 0c0a 	mov.w	ip, #10
 800f3bc:	4621      	mov	r1, r4
 800f3be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3c2:	3b30      	subs	r3, #48	@ 0x30
 800f3c4:	2b09      	cmp	r3, #9
 800f3c6:	d94b      	bls.n	800f460 <_svfiprintf_r+0x17c>
 800f3c8:	b1b0      	cbz	r0, 800f3f8 <_svfiprintf_r+0x114>
 800f3ca:	9207      	str	r2, [sp, #28]
 800f3cc:	e014      	b.n	800f3f8 <_svfiprintf_r+0x114>
 800f3ce:	eba0 0308 	sub.w	r3, r0, r8
 800f3d2:	fa09 f303 	lsl.w	r3, r9, r3
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	9304      	str	r3, [sp, #16]
 800f3da:	46a2      	mov	sl, r4
 800f3dc:	e7d2      	b.n	800f384 <_svfiprintf_r+0xa0>
 800f3de:	9b03      	ldr	r3, [sp, #12]
 800f3e0:	1d19      	adds	r1, r3, #4
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	9103      	str	r1, [sp, #12]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	bfbb      	ittet	lt
 800f3ea:	425b      	neglt	r3, r3
 800f3ec:	f042 0202 	orrlt.w	r2, r2, #2
 800f3f0:	9307      	strge	r3, [sp, #28]
 800f3f2:	9307      	strlt	r3, [sp, #28]
 800f3f4:	bfb8      	it	lt
 800f3f6:	9204      	strlt	r2, [sp, #16]
 800f3f8:	7823      	ldrb	r3, [r4, #0]
 800f3fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3fc:	d10a      	bne.n	800f414 <_svfiprintf_r+0x130>
 800f3fe:	7863      	ldrb	r3, [r4, #1]
 800f400:	2b2a      	cmp	r3, #42	@ 0x2a
 800f402:	d132      	bne.n	800f46a <_svfiprintf_r+0x186>
 800f404:	9b03      	ldr	r3, [sp, #12]
 800f406:	1d1a      	adds	r2, r3, #4
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	9203      	str	r2, [sp, #12]
 800f40c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f410:	3402      	adds	r4, #2
 800f412:	9305      	str	r3, [sp, #20]
 800f414:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f4d8 <_svfiprintf_r+0x1f4>
 800f418:	7821      	ldrb	r1, [r4, #0]
 800f41a:	2203      	movs	r2, #3
 800f41c:	4650      	mov	r0, sl
 800f41e:	f7f0 feef 	bl	8000200 <memchr>
 800f422:	b138      	cbz	r0, 800f434 <_svfiprintf_r+0x150>
 800f424:	9b04      	ldr	r3, [sp, #16]
 800f426:	eba0 000a 	sub.w	r0, r0, sl
 800f42a:	2240      	movs	r2, #64	@ 0x40
 800f42c:	4082      	lsls	r2, r0
 800f42e:	4313      	orrs	r3, r2
 800f430:	3401      	adds	r4, #1
 800f432:	9304      	str	r3, [sp, #16]
 800f434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f438:	4824      	ldr	r0, [pc, #144]	@ (800f4cc <_svfiprintf_r+0x1e8>)
 800f43a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f43e:	2206      	movs	r2, #6
 800f440:	f7f0 fede 	bl	8000200 <memchr>
 800f444:	2800      	cmp	r0, #0
 800f446:	d036      	beq.n	800f4b6 <_svfiprintf_r+0x1d2>
 800f448:	4b21      	ldr	r3, [pc, #132]	@ (800f4d0 <_svfiprintf_r+0x1ec>)
 800f44a:	bb1b      	cbnz	r3, 800f494 <_svfiprintf_r+0x1b0>
 800f44c:	9b03      	ldr	r3, [sp, #12]
 800f44e:	3307      	adds	r3, #7
 800f450:	f023 0307 	bic.w	r3, r3, #7
 800f454:	3308      	adds	r3, #8
 800f456:	9303      	str	r3, [sp, #12]
 800f458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f45a:	4433      	add	r3, r6
 800f45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f45e:	e76a      	b.n	800f336 <_svfiprintf_r+0x52>
 800f460:	fb0c 3202 	mla	r2, ip, r2, r3
 800f464:	460c      	mov	r4, r1
 800f466:	2001      	movs	r0, #1
 800f468:	e7a8      	b.n	800f3bc <_svfiprintf_r+0xd8>
 800f46a:	2300      	movs	r3, #0
 800f46c:	3401      	adds	r4, #1
 800f46e:	9305      	str	r3, [sp, #20]
 800f470:	4619      	mov	r1, r3
 800f472:	f04f 0c0a 	mov.w	ip, #10
 800f476:	4620      	mov	r0, r4
 800f478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f47c:	3a30      	subs	r2, #48	@ 0x30
 800f47e:	2a09      	cmp	r2, #9
 800f480:	d903      	bls.n	800f48a <_svfiprintf_r+0x1a6>
 800f482:	2b00      	cmp	r3, #0
 800f484:	d0c6      	beq.n	800f414 <_svfiprintf_r+0x130>
 800f486:	9105      	str	r1, [sp, #20]
 800f488:	e7c4      	b.n	800f414 <_svfiprintf_r+0x130>
 800f48a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f48e:	4604      	mov	r4, r0
 800f490:	2301      	movs	r3, #1
 800f492:	e7f0      	b.n	800f476 <_svfiprintf_r+0x192>
 800f494:	ab03      	add	r3, sp, #12
 800f496:	9300      	str	r3, [sp, #0]
 800f498:	462a      	mov	r2, r5
 800f49a:	4b0e      	ldr	r3, [pc, #56]	@ (800f4d4 <_svfiprintf_r+0x1f0>)
 800f49c:	a904      	add	r1, sp, #16
 800f49e:	4638      	mov	r0, r7
 800f4a0:	f3af 8000 	nop.w
 800f4a4:	1c42      	adds	r2, r0, #1
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	d1d6      	bne.n	800f458 <_svfiprintf_r+0x174>
 800f4aa:	89ab      	ldrh	r3, [r5, #12]
 800f4ac:	065b      	lsls	r3, r3, #25
 800f4ae:	f53f af2d 	bmi.w	800f30c <_svfiprintf_r+0x28>
 800f4b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4b4:	e72c      	b.n	800f310 <_svfiprintf_r+0x2c>
 800f4b6:	ab03      	add	r3, sp, #12
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	462a      	mov	r2, r5
 800f4bc:	4b05      	ldr	r3, [pc, #20]	@ (800f4d4 <_svfiprintf_r+0x1f0>)
 800f4be:	a904      	add	r1, sp, #16
 800f4c0:	4638      	mov	r0, r7
 800f4c2:	f000 f879 	bl	800f5b8 <_printf_i>
 800f4c6:	e7ed      	b.n	800f4a4 <_svfiprintf_r+0x1c0>
 800f4c8:	08010130 	.word	0x08010130
 800f4cc:	0801013a 	.word	0x0801013a
 800f4d0:	00000000 	.word	0x00000000
 800f4d4:	0800f22d 	.word	0x0800f22d
 800f4d8:	08010136 	.word	0x08010136

0800f4dc <_printf_common>:
 800f4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4e0:	4616      	mov	r6, r2
 800f4e2:	4698      	mov	r8, r3
 800f4e4:	688a      	ldr	r2, [r1, #8]
 800f4e6:	690b      	ldr	r3, [r1, #16]
 800f4e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	bfb8      	it	lt
 800f4f0:	4613      	movlt	r3, r2
 800f4f2:	6033      	str	r3, [r6, #0]
 800f4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f4f8:	4607      	mov	r7, r0
 800f4fa:	460c      	mov	r4, r1
 800f4fc:	b10a      	cbz	r2, 800f502 <_printf_common+0x26>
 800f4fe:	3301      	adds	r3, #1
 800f500:	6033      	str	r3, [r6, #0]
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	0699      	lsls	r1, r3, #26
 800f506:	bf42      	ittt	mi
 800f508:	6833      	ldrmi	r3, [r6, #0]
 800f50a:	3302      	addmi	r3, #2
 800f50c:	6033      	strmi	r3, [r6, #0]
 800f50e:	6825      	ldr	r5, [r4, #0]
 800f510:	f015 0506 	ands.w	r5, r5, #6
 800f514:	d106      	bne.n	800f524 <_printf_common+0x48>
 800f516:	f104 0a19 	add.w	sl, r4, #25
 800f51a:	68e3      	ldr	r3, [r4, #12]
 800f51c:	6832      	ldr	r2, [r6, #0]
 800f51e:	1a9b      	subs	r3, r3, r2
 800f520:	42ab      	cmp	r3, r5
 800f522:	dc26      	bgt.n	800f572 <_printf_common+0x96>
 800f524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f528:	6822      	ldr	r2, [r4, #0]
 800f52a:	3b00      	subs	r3, #0
 800f52c:	bf18      	it	ne
 800f52e:	2301      	movne	r3, #1
 800f530:	0692      	lsls	r2, r2, #26
 800f532:	d42b      	bmi.n	800f58c <_printf_common+0xb0>
 800f534:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f538:	4641      	mov	r1, r8
 800f53a:	4638      	mov	r0, r7
 800f53c:	47c8      	blx	r9
 800f53e:	3001      	adds	r0, #1
 800f540:	d01e      	beq.n	800f580 <_printf_common+0xa4>
 800f542:	6823      	ldr	r3, [r4, #0]
 800f544:	6922      	ldr	r2, [r4, #16]
 800f546:	f003 0306 	and.w	r3, r3, #6
 800f54a:	2b04      	cmp	r3, #4
 800f54c:	bf02      	ittt	eq
 800f54e:	68e5      	ldreq	r5, [r4, #12]
 800f550:	6833      	ldreq	r3, [r6, #0]
 800f552:	1aed      	subeq	r5, r5, r3
 800f554:	68a3      	ldr	r3, [r4, #8]
 800f556:	bf0c      	ite	eq
 800f558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f55c:	2500      	movne	r5, #0
 800f55e:	4293      	cmp	r3, r2
 800f560:	bfc4      	itt	gt
 800f562:	1a9b      	subgt	r3, r3, r2
 800f564:	18ed      	addgt	r5, r5, r3
 800f566:	2600      	movs	r6, #0
 800f568:	341a      	adds	r4, #26
 800f56a:	42b5      	cmp	r5, r6
 800f56c:	d11a      	bne.n	800f5a4 <_printf_common+0xc8>
 800f56e:	2000      	movs	r0, #0
 800f570:	e008      	b.n	800f584 <_printf_common+0xa8>
 800f572:	2301      	movs	r3, #1
 800f574:	4652      	mov	r2, sl
 800f576:	4641      	mov	r1, r8
 800f578:	4638      	mov	r0, r7
 800f57a:	47c8      	blx	r9
 800f57c:	3001      	adds	r0, #1
 800f57e:	d103      	bne.n	800f588 <_printf_common+0xac>
 800f580:	f04f 30ff 	mov.w	r0, #4294967295
 800f584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f588:	3501      	adds	r5, #1
 800f58a:	e7c6      	b.n	800f51a <_printf_common+0x3e>
 800f58c:	18e1      	adds	r1, r4, r3
 800f58e:	1c5a      	adds	r2, r3, #1
 800f590:	2030      	movs	r0, #48	@ 0x30
 800f592:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f596:	4422      	add	r2, r4
 800f598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f59c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f5a0:	3302      	adds	r3, #2
 800f5a2:	e7c7      	b.n	800f534 <_printf_common+0x58>
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	4622      	mov	r2, r4
 800f5a8:	4641      	mov	r1, r8
 800f5aa:	4638      	mov	r0, r7
 800f5ac:	47c8      	blx	r9
 800f5ae:	3001      	adds	r0, #1
 800f5b0:	d0e6      	beq.n	800f580 <_printf_common+0xa4>
 800f5b2:	3601      	adds	r6, #1
 800f5b4:	e7d9      	b.n	800f56a <_printf_common+0x8e>
	...

0800f5b8 <_printf_i>:
 800f5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5bc:	7e0f      	ldrb	r7, [r1, #24]
 800f5be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f5c0:	2f78      	cmp	r7, #120	@ 0x78
 800f5c2:	4691      	mov	r9, r2
 800f5c4:	4680      	mov	r8, r0
 800f5c6:	460c      	mov	r4, r1
 800f5c8:	469a      	mov	sl, r3
 800f5ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f5ce:	d807      	bhi.n	800f5e0 <_printf_i+0x28>
 800f5d0:	2f62      	cmp	r7, #98	@ 0x62
 800f5d2:	d80a      	bhi.n	800f5ea <_printf_i+0x32>
 800f5d4:	2f00      	cmp	r7, #0
 800f5d6:	f000 80d2 	beq.w	800f77e <_printf_i+0x1c6>
 800f5da:	2f58      	cmp	r7, #88	@ 0x58
 800f5dc:	f000 80b9 	beq.w	800f752 <_printf_i+0x19a>
 800f5e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5e8:	e03a      	b.n	800f660 <_printf_i+0xa8>
 800f5ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5ee:	2b15      	cmp	r3, #21
 800f5f0:	d8f6      	bhi.n	800f5e0 <_printf_i+0x28>
 800f5f2:	a101      	add	r1, pc, #4	@ (adr r1, 800f5f8 <_printf_i+0x40>)
 800f5f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5f8:	0800f651 	.word	0x0800f651
 800f5fc:	0800f665 	.word	0x0800f665
 800f600:	0800f5e1 	.word	0x0800f5e1
 800f604:	0800f5e1 	.word	0x0800f5e1
 800f608:	0800f5e1 	.word	0x0800f5e1
 800f60c:	0800f5e1 	.word	0x0800f5e1
 800f610:	0800f665 	.word	0x0800f665
 800f614:	0800f5e1 	.word	0x0800f5e1
 800f618:	0800f5e1 	.word	0x0800f5e1
 800f61c:	0800f5e1 	.word	0x0800f5e1
 800f620:	0800f5e1 	.word	0x0800f5e1
 800f624:	0800f765 	.word	0x0800f765
 800f628:	0800f68f 	.word	0x0800f68f
 800f62c:	0800f71f 	.word	0x0800f71f
 800f630:	0800f5e1 	.word	0x0800f5e1
 800f634:	0800f5e1 	.word	0x0800f5e1
 800f638:	0800f787 	.word	0x0800f787
 800f63c:	0800f5e1 	.word	0x0800f5e1
 800f640:	0800f68f 	.word	0x0800f68f
 800f644:	0800f5e1 	.word	0x0800f5e1
 800f648:	0800f5e1 	.word	0x0800f5e1
 800f64c:	0800f727 	.word	0x0800f727
 800f650:	6833      	ldr	r3, [r6, #0]
 800f652:	1d1a      	adds	r2, r3, #4
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	6032      	str	r2, [r6, #0]
 800f658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f65c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f660:	2301      	movs	r3, #1
 800f662:	e09d      	b.n	800f7a0 <_printf_i+0x1e8>
 800f664:	6833      	ldr	r3, [r6, #0]
 800f666:	6820      	ldr	r0, [r4, #0]
 800f668:	1d19      	adds	r1, r3, #4
 800f66a:	6031      	str	r1, [r6, #0]
 800f66c:	0606      	lsls	r6, r0, #24
 800f66e:	d501      	bpl.n	800f674 <_printf_i+0xbc>
 800f670:	681d      	ldr	r5, [r3, #0]
 800f672:	e003      	b.n	800f67c <_printf_i+0xc4>
 800f674:	0645      	lsls	r5, r0, #25
 800f676:	d5fb      	bpl.n	800f670 <_printf_i+0xb8>
 800f678:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f67c:	2d00      	cmp	r5, #0
 800f67e:	da03      	bge.n	800f688 <_printf_i+0xd0>
 800f680:	232d      	movs	r3, #45	@ 0x2d
 800f682:	426d      	negs	r5, r5
 800f684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f688:	4859      	ldr	r0, [pc, #356]	@ (800f7f0 <_printf_i+0x238>)
 800f68a:	230a      	movs	r3, #10
 800f68c:	e011      	b.n	800f6b2 <_printf_i+0xfa>
 800f68e:	6821      	ldr	r1, [r4, #0]
 800f690:	6833      	ldr	r3, [r6, #0]
 800f692:	0608      	lsls	r0, r1, #24
 800f694:	f853 5b04 	ldr.w	r5, [r3], #4
 800f698:	d402      	bmi.n	800f6a0 <_printf_i+0xe8>
 800f69a:	0649      	lsls	r1, r1, #25
 800f69c:	bf48      	it	mi
 800f69e:	b2ad      	uxthmi	r5, r5
 800f6a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f6a2:	4853      	ldr	r0, [pc, #332]	@ (800f7f0 <_printf_i+0x238>)
 800f6a4:	6033      	str	r3, [r6, #0]
 800f6a6:	bf14      	ite	ne
 800f6a8:	230a      	movne	r3, #10
 800f6aa:	2308      	moveq	r3, #8
 800f6ac:	2100      	movs	r1, #0
 800f6ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f6b2:	6866      	ldr	r6, [r4, #4]
 800f6b4:	60a6      	str	r6, [r4, #8]
 800f6b6:	2e00      	cmp	r6, #0
 800f6b8:	bfa2      	ittt	ge
 800f6ba:	6821      	ldrge	r1, [r4, #0]
 800f6bc:	f021 0104 	bicge.w	r1, r1, #4
 800f6c0:	6021      	strge	r1, [r4, #0]
 800f6c2:	b90d      	cbnz	r5, 800f6c8 <_printf_i+0x110>
 800f6c4:	2e00      	cmp	r6, #0
 800f6c6:	d04b      	beq.n	800f760 <_printf_i+0x1a8>
 800f6c8:	4616      	mov	r6, r2
 800f6ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6ce:	fb03 5711 	mls	r7, r3, r1, r5
 800f6d2:	5dc7      	ldrb	r7, [r0, r7]
 800f6d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f6d8:	462f      	mov	r7, r5
 800f6da:	42bb      	cmp	r3, r7
 800f6dc:	460d      	mov	r5, r1
 800f6de:	d9f4      	bls.n	800f6ca <_printf_i+0x112>
 800f6e0:	2b08      	cmp	r3, #8
 800f6e2:	d10b      	bne.n	800f6fc <_printf_i+0x144>
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	07df      	lsls	r7, r3, #31
 800f6e8:	d508      	bpl.n	800f6fc <_printf_i+0x144>
 800f6ea:	6923      	ldr	r3, [r4, #16]
 800f6ec:	6861      	ldr	r1, [r4, #4]
 800f6ee:	4299      	cmp	r1, r3
 800f6f0:	bfde      	ittt	le
 800f6f2:	2330      	movle	r3, #48	@ 0x30
 800f6f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f6f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f6fc:	1b92      	subs	r2, r2, r6
 800f6fe:	6122      	str	r2, [r4, #16]
 800f700:	f8cd a000 	str.w	sl, [sp]
 800f704:	464b      	mov	r3, r9
 800f706:	aa03      	add	r2, sp, #12
 800f708:	4621      	mov	r1, r4
 800f70a:	4640      	mov	r0, r8
 800f70c:	f7ff fee6 	bl	800f4dc <_printf_common>
 800f710:	3001      	adds	r0, #1
 800f712:	d14a      	bne.n	800f7aa <_printf_i+0x1f2>
 800f714:	f04f 30ff 	mov.w	r0, #4294967295
 800f718:	b004      	add	sp, #16
 800f71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	f043 0320 	orr.w	r3, r3, #32
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	4833      	ldr	r0, [pc, #204]	@ (800f7f4 <_printf_i+0x23c>)
 800f728:	2778      	movs	r7, #120	@ 0x78
 800f72a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	6831      	ldr	r1, [r6, #0]
 800f732:	061f      	lsls	r7, r3, #24
 800f734:	f851 5b04 	ldr.w	r5, [r1], #4
 800f738:	d402      	bmi.n	800f740 <_printf_i+0x188>
 800f73a:	065f      	lsls	r7, r3, #25
 800f73c:	bf48      	it	mi
 800f73e:	b2ad      	uxthmi	r5, r5
 800f740:	6031      	str	r1, [r6, #0]
 800f742:	07d9      	lsls	r1, r3, #31
 800f744:	bf44      	itt	mi
 800f746:	f043 0320 	orrmi.w	r3, r3, #32
 800f74a:	6023      	strmi	r3, [r4, #0]
 800f74c:	b11d      	cbz	r5, 800f756 <_printf_i+0x19e>
 800f74e:	2310      	movs	r3, #16
 800f750:	e7ac      	b.n	800f6ac <_printf_i+0xf4>
 800f752:	4827      	ldr	r0, [pc, #156]	@ (800f7f0 <_printf_i+0x238>)
 800f754:	e7e9      	b.n	800f72a <_printf_i+0x172>
 800f756:	6823      	ldr	r3, [r4, #0]
 800f758:	f023 0320 	bic.w	r3, r3, #32
 800f75c:	6023      	str	r3, [r4, #0]
 800f75e:	e7f6      	b.n	800f74e <_printf_i+0x196>
 800f760:	4616      	mov	r6, r2
 800f762:	e7bd      	b.n	800f6e0 <_printf_i+0x128>
 800f764:	6833      	ldr	r3, [r6, #0]
 800f766:	6825      	ldr	r5, [r4, #0]
 800f768:	6961      	ldr	r1, [r4, #20]
 800f76a:	1d18      	adds	r0, r3, #4
 800f76c:	6030      	str	r0, [r6, #0]
 800f76e:	062e      	lsls	r6, r5, #24
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	d501      	bpl.n	800f778 <_printf_i+0x1c0>
 800f774:	6019      	str	r1, [r3, #0]
 800f776:	e002      	b.n	800f77e <_printf_i+0x1c6>
 800f778:	0668      	lsls	r0, r5, #25
 800f77a:	d5fb      	bpl.n	800f774 <_printf_i+0x1bc>
 800f77c:	8019      	strh	r1, [r3, #0]
 800f77e:	2300      	movs	r3, #0
 800f780:	6123      	str	r3, [r4, #16]
 800f782:	4616      	mov	r6, r2
 800f784:	e7bc      	b.n	800f700 <_printf_i+0x148>
 800f786:	6833      	ldr	r3, [r6, #0]
 800f788:	1d1a      	adds	r2, r3, #4
 800f78a:	6032      	str	r2, [r6, #0]
 800f78c:	681e      	ldr	r6, [r3, #0]
 800f78e:	6862      	ldr	r2, [r4, #4]
 800f790:	2100      	movs	r1, #0
 800f792:	4630      	mov	r0, r6
 800f794:	f7f0 fd34 	bl	8000200 <memchr>
 800f798:	b108      	cbz	r0, 800f79e <_printf_i+0x1e6>
 800f79a:	1b80      	subs	r0, r0, r6
 800f79c:	6060      	str	r0, [r4, #4]
 800f79e:	6863      	ldr	r3, [r4, #4]
 800f7a0:	6123      	str	r3, [r4, #16]
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7a8:	e7aa      	b.n	800f700 <_printf_i+0x148>
 800f7aa:	6923      	ldr	r3, [r4, #16]
 800f7ac:	4632      	mov	r2, r6
 800f7ae:	4649      	mov	r1, r9
 800f7b0:	4640      	mov	r0, r8
 800f7b2:	47d0      	blx	sl
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d0ad      	beq.n	800f714 <_printf_i+0x15c>
 800f7b8:	6823      	ldr	r3, [r4, #0]
 800f7ba:	079b      	lsls	r3, r3, #30
 800f7bc:	d413      	bmi.n	800f7e6 <_printf_i+0x22e>
 800f7be:	68e0      	ldr	r0, [r4, #12]
 800f7c0:	9b03      	ldr	r3, [sp, #12]
 800f7c2:	4298      	cmp	r0, r3
 800f7c4:	bfb8      	it	lt
 800f7c6:	4618      	movlt	r0, r3
 800f7c8:	e7a6      	b.n	800f718 <_printf_i+0x160>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	4632      	mov	r2, r6
 800f7ce:	4649      	mov	r1, r9
 800f7d0:	4640      	mov	r0, r8
 800f7d2:	47d0      	blx	sl
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	d09d      	beq.n	800f714 <_printf_i+0x15c>
 800f7d8:	3501      	adds	r5, #1
 800f7da:	68e3      	ldr	r3, [r4, #12]
 800f7dc:	9903      	ldr	r1, [sp, #12]
 800f7de:	1a5b      	subs	r3, r3, r1
 800f7e0:	42ab      	cmp	r3, r5
 800f7e2:	dcf2      	bgt.n	800f7ca <_printf_i+0x212>
 800f7e4:	e7eb      	b.n	800f7be <_printf_i+0x206>
 800f7e6:	2500      	movs	r5, #0
 800f7e8:	f104 0619 	add.w	r6, r4, #25
 800f7ec:	e7f5      	b.n	800f7da <_printf_i+0x222>
 800f7ee:	bf00      	nop
 800f7f0:	08010141 	.word	0x08010141
 800f7f4:	08010152 	.word	0x08010152

0800f7f8 <memmove>:
 800f7f8:	4288      	cmp	r0, r1
 800f7fa:	b510      	push	{r4, lr}
 800f7fc:	eb01 0402 	add.w	r4, r1, r2
 800f800:	d902      	bls.n	800f808 <memmove+0x10>
 800f802:	4284      	cmp	r4, r0
 800f804:	4623      	mov	r3, r4
 800f806:	d807      	bhi.n	800f818 <memmove+0x20>
 800f808:	1e43      	subs	r3, r0, #1
 800f80a:	42a1      	cmp	r1, r4
 800f80c:	d008      	beq.n	800f820 <memmove+0x28>
 800f80e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f812:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f816:	e7f8      	b.n	800f80a <memmove+0x12>
 800f818:	4402      	add	r2, r0
 800f81a:	4601      	mov	r1, r0
 800f81c:	428a      	cmp	r2, r1
 800f81e:	d100      	bne.n	800f822 <memmove+0x2a>
 800f820:	bd10      	pop	{r4, pc}
 800f822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f82a:	e7f7      	b.n	800f81c <memmove+0x24>

0800f82c <_sbrk_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	4d06      	ldr	r5, [pc, #24]	@ (800f848 <_sbrk_r+0x1c>)
 800f830:	2300      	movs	r3, #0
 800f832:	4604      	mov	r4, r0
 800f834:	4608      	mov	r0, r1
 800f836:	602b      	str	r3, [r5, #0]
 800f838:	f7f2 fc72 	bl	8002120 <_sbrk>
 800f83c:	1c43      	adds	r3, r0, #1
 800f83e:	d102      	bne.n	800f846 <_sbrk_r+0x1a>
 800f840:	682b      	ldr	r3, [r5, #0]
 800f842:	b103      	cbz	r3, 800f846 <_sbrk_r+0x1a>
 800f844:	6023      	str	r3, [r4, #0]
 800f846:	bd38      	pop	{r3, r4, r5, pc}
 800f848:	20004a28 	.word	0x20004a28

0800f84c <memcpy>:
 800f84c:	440a      	add	r2, r1
 800f84e:	4291      	cmp	r1, r2
 800f850:	f100 33ff 	add.w	r3, r0, #4294967295
 800f854:	d100      	bne.n	800f858 <memcpy+0xc>
 800f856:	4770      	bx	lr
 800f858:	b510      	push	{r4, lr}
 800f85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f862:	4291      	cmp	r1, r2
 800f864:	d1f9      	bne.n	800f85a <memcpy+0xe>
 800f866:	bd10      	pop	{r4, pc}

0800f868 <_realloc_r>:
 800f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f86c:	4680      	mov	r8, r0
 800f86e:	4615      	mov	r5, r2
 800f870:	460c      	mov	r4, r1
 800f872:	b921      	cbnz	r1, 800f87e <_realloc_r+0x16>
 800f874:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f878:	4611      	mov	r1, r2
 800f87a:	f7ff bc4b 	b.w	800f114 <_malloc_r>
 800f87e:	b92a      	cbnz	r2, 800f88c <_realloc_r+0x24>
 800f880:	f7ff fbdc 	bl	800f03c <_free_r>
 800f884:	2400      	movs	r4, #0
 800f886:	4620      	mov	r0, r4
 800f888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f88c:	f000 f81a 	bl	800f8c4 <_malloc_usable_size_r>
 800f890:	4285      	cmp	r5, r0
 800f892:	4606      	mov	r6, r0
 800f894:	d802      	bhi.n	800f89c <_realloc_r+0x34>
 800f896:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f89a:	d8f4      	bhi.n	800f886 <_realloc_r+0x1e>
 800f89c:	4629      	mov	r1, r5
 800f89e:	4640      	mov	r0, r8
 800f8a0:	f7ff fc38 	bl	800f114 <_malloc_r>
 800f8a4:	4607      	mov	r7, r0
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	d0ec      	beq.n	800f884 <_realloc_r+0x1c>
 800f8aa:	42b5      	cmp	r5, r6
 800f8ac:	462a      	mov	r2, r5
 800f8ae:	4621      	mov	r1, r4
 800f8b0:	bf28      	it	cs
 800f8b2:	4632      	movcs	r2, r6
 800f8b4:	f7ff ffca 	bl	800f84c <memcpy>
 800f8b8:	4621      	mov	r1, r4
 800f8ba:	4640      	mov	r0, r8
 800f8bc:	f7ff fbbe 	bl	800f03c <_free_r>
 800f8c0:	463c      	mov	r4, r7
 800f8c2:	e7e0      	b.n	800f886 <_realloc_r+0x1e>

0800f8c4 <_malloc_usable_size_r>:
 800f8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8c8:	1f18      	subs	r0, r3, #4
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	bfbc      	itt	lt
 800f8ce:	580b      	ldrlt	r3, [r1, r0]
 800f8d0:	18c0      	addlt	r0, r0, r3
 800f8d2:	4770      	bx	lr

0800f8d4 <_init>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	bf00      	nop
 800f8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8da:	bc08      	pop	{r3}
 800f8dc:	469e      	mov	lr, r3
 800f8de:	4770      	bx	lr

0800f8e0 <_fini>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	bf00      	nop
 800f8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8e6:	bc08      	pop	{r3}
 800f8e8:	469e      	mov	lr, r3
 800f8ea:	4770      	bx	lr
