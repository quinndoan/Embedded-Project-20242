/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "usb_device.h"
#include "string.h"
#include "fatfs_sd.h"
#include "stm32f4xx_hal.h"
#include "stdint.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
//#define f_size(fp)  ((fp)->obj.objsize)

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void SD_List_File(void);
void SD_creatSubDir(char* filename);
void SD_deleteFolder(char* foldername);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
FATFS fs;
FIL fil;
FRESULT fresult;
char buffer[1024];

UINT br, bw;

// capacity
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

// to send data to uart
void send_uart(char *string)
{
	/*
	uint16_t len = strlen(string);  
	memset(buf2, 0, sizeof(buf2));
	HAL_UART_Transmit(&huart1, (uint8_t)* string, len, 2000);
	*/
	uint16_t len = strlen(string);
  char buf1[len];
  memset(buf1, 0, sizeof(buf1));
  strcpy(buf1, string);
  HAL_UART_Transmit(&huart1,(char*) buf1, sizeof(buf1), 2000);

}

int bufsize(char *buf){
	int i=0;
	while (*buf++ != '\0' )i++;

	return i;
}
void bufclear(void){
	for (int i=0;i<1024;i++){
		buffer[i] = '\0';
	}
}


void clear_buffer (void)
{
	for (int i=0; i<1024; i++) buffer[i] = '\0';
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USART1_UART_Init();
  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
  //SD_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
  // Mount the SD card
/*
  fresult = f_mount(&fs, "", 0);  // Changed to "0:" and force mount
  if (fresult != FR_OK) {
    switch(fresult) {
      case FR_DISK_ERR:
        send_uart("Error: Disk error\n");
        break;
      case FR_INT_ERR:
        send_uart("Error: Internal error\n");
        break;
      case FR_NOT_READY:
        send_uart("Error: Not ready\n");
        break;
      case FR_NO_FILESYSTEM:
        send_uart("Error: No valid FAT volume\n");
        break;
      default:
        sprintf(buffer, "Error mounting SD card: %d\n", fresult);
        send_uart(buffer);
    }
    Error_Handler();
  }
  send_uart("SD Card mounted successfully\n");

/*
  // Check if SD card is ready
  if (disk_status(0) & STA_NOINIT) {
    send_uart("SD Card not initialized\n");
    Error_Handler();
  }
  if (disk_status(0) & STA_NODISK) {
    send_uart("No SD card detected\n");
    Error_Handler();
  }
  if (disk_status(0) & STA_PROTECT) {
    send_uart("SD Card is write protected\n");
    Error_Handler();
  }


/* Open file to write */
  // check free space
  /*
  f_getfree("", &fre_clust, &pfs);
  total = (uint32_t)((pfs->n_fatent -2)* pfs->csize*0.5);
  sprintf(buffer, "SD Card total size: \t%lu\n", total);
  send_uart(buffer);
  bufclear();
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
  sprintf(buffer, "SD_CARD Free Space: \t%lu\n", free_space);
  send_uart(buffer);

  // open a file or create if not existing
  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);

  // WRITE TEXT
  fresult = f_puts("This data is from the first file \n\n", &fil);


  // close
  fresult = f_close(&fil);
  //
  send_uart ("file1.txt created and the data is written\n");

  // open file to read
  fresult = f_open(&fil, "file1.txt", FA_READ);

  // read string from the file
  f_gets(buffer, fil.buf, &fil);

  send_uart(buffer);
  // close file
  f_close(&fil);
  bufclear();


 //----------Update a file-------------/
  fresult = f_open(&fil, 'file1.txt', FA_OPEN_EXISTING | FA_READ | FA_WRITE);

  // move to the end
  fresult = f_lseek(&fil, fil.obj.objsize); // xem lai de la f.size


  // write to string to file
  fresult = f_puts("This is updated area and it should be at the end\n", &fil);

  f_close(&fil);

  // open to read
  fresult = f_open(&fil, "file1.txt", FA_READ);

  // read from string
  f_read(&fil, buffer, fil.buf, &br);
  send_uart(buffer);

  // close file
  f_close(&fil);

  bufclear();

  //-----------------Delete from Card-----------------/
  fresult = f_unlink("/file1.txt");
  if (fresult == FR_OK){
	  send_uart("file1.txt removed sucessfully\n");
  }
*/
  fresult = f_mount(&fs, "/", 1);
    	if (fresult != FR_OK) send_uart ("ERROR in mounting SD CARD...\n\n");
    	else send_uart("SD CARD mounted successfully...\n\n");


    	/*************** Card capacity details ********************/

    	/* Check free space */
    	f_getfree("", &fre_clust, &pfs);

    	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
    	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
    	send_uart(buffer);
    	clear_buffer();
    	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
    	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
    	send_uart(buffer);
    	clear_buffer();



    	/************* The following operation is using PUTS and GETS *********************/

    	/* Open file to write/ create a file if it doesn't exist */
        fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);

    	/* Writing text */
    	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);

    	/* Close file */
    	fresult = f_close(&fil);

    	if (fresult == FR_OK)send_uart ("File1.txt created and the data is written \n");

    	/* Open file to read */
    	fresult = f_open(&fil, "file1.txt", FA_READ);

    	/* Read string from the file */
    	f_gets(buffer, f_size(&fil), &fil);

    	send_uart("File1.txt is opened and it contains the data as shown below\n");
    	send_uart(buffer);
    	send_uart("\n\n");

    	/* Close file */
    	f_close(&fil);

    	clear_buffer();




    	/**************** The following operation is using f_write and f_read **************************/

    	/* Create second file with read write access and open it */
    	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);

    	/* Writing text */
    	strcpy (buffer, "This is File2.txt, written using f_write and said Hello World\n");

    	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);

    	send_uart ("File2.txt created and data is written\n");

    	/* Close file */
    	f_close(&fil);



    	// clearing buffer to show that result obtained is from the file
    	clear_buffer();

    	/* Open second file to read */
    	fresult = f_open(&fil, "file2.txt", FA_READ);
    	if (fresult == FR_OK)send_uart ("file2.txt is open and the data is shown below\n");

    	/* Read data from the file
    	 * Please see the function details for the arguments */
    	f_read (&fil, buffer, f_size(&fil), &br);
    	send_uart(buffer);
    	send_uart("\n\n");

    	/* Close file */
    	f_close(&fil);

    	clear_buffer();


    	/*********************UPDATING an existing file ***************************/

    	/* Open the file with write access */
    	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);

    	/* Move to offset to the end of the file */
    	fresult = f_lseek(&fil, f_size(&fil));

    	if (fresult == FR_OK)send_uart ("About to update the file2.txt\n");

    	/* write the string to the file */
    	fresult = f_puts("This is updated data and it should be in the end", &fil);

    	f_close (&fil);

    	clear_buffer();

    	/* Open to read the file */
    	fresult = f_open (&fil, "file2.txt", FA_READ);

    	/* Read string from the file */
    	fresult = f_read (&fil, buffer, f_size(&fil), &br);
    	if (fresult == FR_OK)send_uart ("Below is the data from updated file2.txt\n");
    	send_uart(buffer);
    	send_uart("\n\n");

    	/* Close file */
    	f_close(&fil);

    	clear_buffer();

    	/*

    	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/
    	/*
    	fresult = f_unlink("/file1.txt");
    	if (fresult == FR_OK) send_uart("file1.txt removed successfully...\n");

    	fresult = f_unlink("/file2.txt");
    	if (fresult == FR_OK) send_uart("file2.txt removed successfully...\n");

    	/* Unmount SDCARD */
    	/*
    	fresult = f_mount(NULL, "/", 1);
    	if (fresult == FR_OK) send_uart ("SD CARD UNMOUNTED successfully...\n");
    	*/
    /****************CREATE A NEW SUB DIR************* */
    

    


  /* USER CODE END 2 */

  // Test tạo thư mục mới
  SD_creatSubDir("testdir");
  send_uart("Đã tạo thư mục testdir\n");

  // Test liệt kê file/thư mục
  send_uart("Danh sách file/thư mục trên thẻ SD:\n");
  SD_List_File();
  send_uart("\n");

  // Test xóa thư mục vừa tạo
  SD_deleteFolder("testdir");
  send_uart("Đã xóa thư mục testdir\n");

  // Liệt kê lại để kiểm tra
  send_uart("Danh sách file/thư mục sau khi xóa testdir:\n");
  SD_List_File();
  send_uart("\n");

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
