
STM32_20242_ReadFile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f08c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800f23c  0800f23c  0001023c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f914  0800f914  00011164  2**0
                  CONTENTS
  4 .ARM          00000008  0800f914  0800f914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f91c  0800f91c  00011164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f91c  0800f91c  0001091c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f920  0800f920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000164  20000000  0800f924  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011164  2**0
                  CONTENTS
 10 .bss          00003540  20000164  20000164  00011164  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200036a4  200036a4  00011164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018ee8  00000000  00000000  00011194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000439e  00000000  00000000  0002a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0002e420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fba  00000000  00000000  0002f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287cd  00000000  00000000  000308a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f16b  00000000  00000000  0005906f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da22b  00000000  00000000  000781da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152405  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a8c  00000000  00000000  00152448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00157ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000164 	.word	0x20000164
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f224 	.word	0x0800f224

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000168 	.word	0x20000168
 80001ec:	0800f224 	.word	0x0800f224

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96a 	b.w	8000b88 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	460c      	mov	r4, r1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d14e      	bne.n	8000976 <__udivmoddi4+0xaa>
 80008d8:	4694      	mov	ip, r2
 80008da:	458c      	cmp	ip, r1
 80008dc:	4686      	mov	lr, r0
 80008de:	fab2 f282 	clz	r2, r2
 80008e2:	d962      	bls.n	80009aa <__udivmoddi4+0xde>
 80008e4:	b14a      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e6:	f1c2 0320 	rsb	r3, r2, #32
 80008ea:	4091      	lsls	r1, r2
 80008ec:	fa20 f303 	lsr.w	r3, r0, r3
 80008f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008f4:	4319      	orrs	r1, r3
 80008f6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008fe:	fa1f f68c 	uxth.w	r6, ip
 8000902:	fbb1 f4f7 	udiv	r4, r1, r7
 8000906:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090a:	fb07 1114 	mls	r1, r7, r4, r1
 800090e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000912:	fb04 f106 	mul.w	r1, r4, r6
 8000916:	4299      	cmp	r1, r3
 8000918:	d90a      	bls.n	8000930 <__udivmoddi4+0x64>
 800091a:	eb1c 0303 	adds.w	r3, ip, r3
 800091e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000922:	f080 8112 	bcs.w	8000b4a <__udivmoddi4+0x27e>
 8000926:	4299      	cmp	r1, r3
 8000928:	f240 810f 	bls.w	8000b4a <__udivmoddi4+0x27e>
 800092c:	3c02      	subs	r4, #2
 800092e:	4463      	add	r3, ip
 8000930:	1a59      	subs	r1, r3, r1
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb1 f0f7 	udiv	r0, r1, r7
 800093a:	fb07 1110 	mls	r1, r7, r0, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb00 f606 	mul.w	r6, r0, r6
 8000946:	429e      	cmp	r6, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x94>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000952:	f080 80fc 	bcs.w	8000b4e <__udivmoddi4+0x282>
 8000956:	429e      	cmp	r6, r3
 8000958:	f240 80f9 	bls.w	8000b4e <__udivmoddi4+0x282>
 800095c:	4463      	add	r3, ip
 800095e:	3802      	subs	r0, #2
 8000960:	1b9b      	subs	r3, r3, r6
 8000962:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000966:	2100      	movs	r1, #0
 8000968:	b11d      	cbz	r5, 8000972 <__udivmoddi4+0xa6>
 800096a:	40d3      	lsrs	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	e9c5 3200 	strd	r3, r2, [r5]
 8000972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000976:	428b      	cmp	r3, r1
 8000978:	d905      	bls.n	8000986 <__udivmoddi4+0xba>
 800097a:	b10d      	cbz	r5, 8000980 <__udivmoddi4+0xb4>
 800097c:	e9c5 0100 	strd	r0, r1, [r5]
 8000980:	2100      	movs	r1, #0
 8000982:	4608      	mov	r0, r1
 8000984:	e7f5      	b.n	8000972 <__udivmoddi4+0xa6>
 8000986:	fab3 f183 	clz	r1, r3
 800098a:	2900      	cmp	r1, #0
 800098c:	d146      	bne.n	8000a1c <__udivmoddi4+0x150>
 800098e:	42a3      	cmp	r3, r4
 8000990:	d302      	bcc.n	8000998 <__udivmoddi4+0xcc>
 8000992:	4290      	cmp	r0, r2
 8000994:	f0c0 80f0 	bcc.w	8000b78 <__udivmoddi4+0x2ac>
 8000998:	1a86      	subs	r6, r0, r2
 800099a:	eb64 0303 	sbc.w	r3, r4, r3
 800099e:	2001      	movs	r0, #1
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d0e6      	beq.n	8000972 <__udivmoddi4+0xa6>
 80009a4:	e9c5 6300 	strd	r6, r3, [r5]
 80009a8:	e7e3      	b.n	8000972 <__udivmoddi4+0xa6>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	f040 8090 	bne.w	8000ad0 <__udivmoddi4+0x204>
 80009b0:	eba1 040c 	sub.w	r4, r1, ip
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	fa1f f78c 	uxth.w	r7, ip
 80009bc:	2101      	movs	r1, #1
 80009be:	fbb4 f6f8 	udiv	r6, r4, r8
 80009c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009c6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ce:	fb07 f006 	mul.w	r0, r7, r6
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x11c>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f106 34ff 	add.w	r4, r6, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x11a>
 80009e0:	4298      	cmp	r0, r3
 80009e2:	f200 80cd 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009e6:	4626      	mov	r6, r4
 80009e8:	1a1c      	subs	r4, r3, r0
 80009ea:	fa1f f38e 	uxth.w	r3, lr
 80009ee:	fbb4 f0f8 	udiv	r0, r4, r8
 80009f2:	fb08 4410 	mls	r4, r8, r0, r4
 80009f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fa:	fb00 f707 	mul.w	r7, r0, r7
 80009fe:	429f      	cmp	r7, r3
 8000a00:	d908      	bls.n	8000a14 <__udivmoddi4+0x148>
 8000a02:	eb1c 0303 	adds.w	r3, ip, r3
 8000a06:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a0a:	d202      	bcs.n	8000a12 <__udivmoddi4+0x146>
 8000a0c:	429f      	cmp	r7, r3
 8000a0e:	f200 80b0 	bhi.w	8000b72 <__udivmoddi4+0x2a6>
 8000a12:	4620      	mov	r0, r4
 8000a14:	1bdb      	subs	r3, r3, r7
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	e7a5      	b.n	8000968 <__udivmoddi4+0x9c>
 8000a1c:	f1c1 0620 	rsb	r6, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 f706 	lsr.w	r7, r2, r6
 8000a26:	431f      	orrs	r7, r3
 8000a28:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a2c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a30:	ea43 030c 	orr.w	r3, r3, ip
 8000a34:	40f4      	lsrs	r4, r6
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	0c38      	lsrs	r0, r7, #16
 8000a3c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a40:	fbb4 fef0 	udiv	lr, r4, r0
 8000a44:	fa1f fc87 	uxth.w	ip, r7
 8000a48:	fb00 441e 	mls	r4, r0, lr, r4
 8000a4c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a50:	fb0e f90c 	mul.w	r9, lr, ip
 8000a54:	45a1      	cmp	r9, r4
 8000a56:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5a:	d90a      	bls.n	8000a72 <__udivmoddi4+0x1a6>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a62:	f080 8084 	bcs.w	8000b6e <__udivmoddi4+0x2a2>
 8000a66:	45a1      	cmp	r9, r4
 8000a68:	f240 8081 	bls.w	8000b6e <__udivmoddi4+0x2a2>
 8000a6c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a70:	443c      	add	r4, r7
 8000a72:	eba4 0409 	sub.w	r4, r4, r9
 8000a76:	fa1f f983 	uxth.w	r9, r3
 8000a7a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a7e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a82:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a86:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d907      	bls.n	8000a9e <__udivmoddi4+0x1d2>
 8000a8e:	193c      	adds	r4, r7, r4
 8000a90:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a94:	d267      	bcs.n	8000b66 <__udivmoddi4+0x29a>
 8000a96:	45a4      	cmp	ip, r4
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0x29a>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	443c      	add	r4, r7
 8000a9e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000aa2:	fba0 9302 	umull	r9, r3, r0, r2
 8000aa6:	eba4 040c 	sub.w	r4, r4, ip
 8000aaa:	429c      	cmp	r4, r3
 8000aac:	46ce      	mov	lr, r9
 8000aae:	469c      	mov	ip, r3
 8000ab0:	d351      	bcc.n	8000b56 <__udivmoddi4+0x28a>
 8000ab2:	d04e      	beq.n	8000b52 <__udivmoddi4+0x286>
 8000ab4:	b155      	cbz	r5, 8000acc <__udivmoddi4+0x200>
 8000ab6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aba:	eb64 040c 	sbc.w	r4, r4, ip
 8000abe:	fa04 f606 	lsl.w	r6, r4, r6
 8000ac2:	40cb      	lsrs	r3, r1
 8000ac4:	431e      	orrs	r6, r3
 8000ac6:	40cc      	lsrs	r4, r1
 8000ac8:	e9c5 6400 	strd	r6, r4, [r5]
 8000acc:	2100      	movs	r1, #0
 8000ace:	e750      	b.n	8000972 <__udivmoddi4+0xa6>
 8000ad0:	f1c2 0320 	rsb	r3, r2, #32
 8000ad4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ad8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000adc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ae0:	4094      	lsls	r4, r2
 8000ae2:	430c      	orrs	r4, r1
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aec:	fa1f f78c 	uxth.w	r7, ip
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3110 	mls	r1, r8, r0, r3
 8000af8:	0c23      	lsrs	r3, r4, #16
 8000afa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000afe:	fb00 f107 	mul.w	r1, r0, r7
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x24c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b0e:	d22c      	bcs.n	8000b6a <__udivmoddi4+0x29e>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	d92a      	bls.n	8000b6a <__udivmoddi4+0x29e>
 8000b14:	3802      	subs	r0, #2
 8000b16:	4463      	add	r3, ip
 8000b18:	1a5b      	subs	r3, r3, r1
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b20:	fb08 3311 	mls	r3, r8, r1, r3
 8000b24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b28:	fb01 f307 	mul.w	r3, r1, r7
 8000b2c:	42a3      	cmp	r3, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x276>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b38:	d213      	bcs.n	8000b62 <__udivmoddi4+0x296>
 8000b3a:	42a3      	cmp	r3, r4
 8000b3c:	d911      	bls.n	8000b62 <__udivmoddi4+0x296>
 8000b3e:	3902      	subs	r1, #2
 8000b40:	4464      	add	r4, ip
 8000b42:	1ae4      	subs	r4, r4, r3
 8000b44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b48:	e739      	b.n	80009be <__udivmoddi4+0xf2>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	e6f0      	b.n	8000930 <__udivmoddi4+0x64>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e706      	b.n	8000960 <__udivmoddi4+0x94>
 8000b52:	45c8      	cmp	r8, r9
 8000b54:	d2ae      	bcs.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b56:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b5a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7a8      	b.n	8000ab4 <__udivmoddi4+0x1e8>
 8000b62:	4631      	mov	r1, r6
 8000b64:	e7ed      	b.n	8000b42 <__udivmoddi4+0x276>
 8000b66:	4603      	mov	r3, r0
 8000b68:	e799      	b.n	8000a9e <__udivmoddi4+0x1d2>
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	e7d4      	b.n	8000b18 <__udivmoddi4+0x24c>
 8000b6e:	46d6      	mov	lr, sl
 8000b70:	e77f      	b.n	8000a72 <__udivmoddi4+0x1a6>
 8000b72:	4463      	add	r3, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	e74d      	b.n	8000a14 <__udivmoddi4+0x148>
 8000b78:	4606      	mov	r6, r0
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	4608      	mov	r0, r1
 8000b7e:	e70f      	b.n	80009a0 <__udivmoddi4+0xd4>
 8000b80:	3e02      	subs	r6, #2
 8000b82:	4463      	add	r3, ip
 8000b84:	e730      	b.n	80009e8 <__udivmoddi4+0x11c>
 8000b86:	bf00      	nop

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4a08      	ldr	r2, [pc, #32]	@ (8000bbc <disk_status+0x30>)
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	4905      	ldr	r1, [pc, #20]	@ (8000bbc <disk_status+0x30>)
 8000ba6:	440a      	add	r2, r1
 8000ba8:	7a12      	ldrb	r2, [r2, #8]
 8000baa:	4610      	mov	r0, r2
 8000bac:	4798      	blx	r3
 8000bae:	4603      	mov	r3, r0
 8000bb0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20002908 	.word	0x20002908

08000bc0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <disk_initialize+0x4c>)
 8000bd2:	5cd3      	ldrb	r3, [r2, r3]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d114      	bne.n	8000c02 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	4a0c      	ldr	r2, [pc, #48]	@ (8000c0c <disk_initialize+0x4c>)
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	79fa      	ldrb	r2, [r7, #7]
 8000be6:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <disk_initialize+0x4c>)
 8000be8:	440a      	add	r2, r1
 8000bea:	7a12      	ldrb	r2, [r2, #8]
 8000bec:	4610      	mov	r0, r2
 8000bee:	4798      	blx	r3
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	4a03      	ldr	r2, [pc, #12]	@ (8000c0c <disk_initialize+0x4c>)
 8000bfe:	2101      	movs	r1, #1
 8000c00:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20002908 	.word	0x20002908

08000c10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <disk_read+0x3c>)
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4413      	add	r3, r2
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	689c      	ldr	r4, [r3, #8]
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	4a07      	ldr	r2, [pc, #28]	@ (8000c4c <disk_read+0x3c>)
 8000c30:	4413      	add	r3, r2
 8000c32:	7a18      	ldrb	r0, [r3, #8]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	47a0      	blx	r4
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd90      	pop	{r4, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20002908 	.word	0x20002908

08000c50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b087      	sub	sp, #28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <disk_write+0x3c>)
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	68dc      	ldr	r4, [r3, #12]
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <disk_write+0x3c>)
 8000c70:	4413      	add	r3, r2
 8000c72:	7a18      	ldrb	r0, [r3, #8]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	47a0      	blx	r4
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	371c      	adds	r7, #28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd90      	pop	{r4, r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20002908 	.word	0x20002908

08000c90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	603a      	str	r2, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	460b      	mov	r3, r1
 8000c9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a09      	ldr	r2, [pc, #36]	@ (8000cc8 <disk_ioctl+0x38>)
 8000ca4:	009b      	lsls	r3, r3, #2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	79fa      	ldrb	r2, [r7, #7]
 8000cae:	4906      	ldr	r1, [pc, #24]	@ (8000cc8 <disk_ioctl+0x38>)
 8000cb0:	440a      	add	r2, r1
 8000cb2:	7a10      	ldrb	r0, [r2, #8]
 8000cb4:	79b9      	ldrb	r1, [r7, #6]
 8000cb6:	683a      	ldr	r2, [r7, #0]
 8000cb8:	4798      	blx	r3
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20002908 	.word	0x20002908

08000ccc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8000cd0:	4904      	ldr	r1, [pc, #16]	@ (8000ce4 <MX_FATFS_Init+0x18>)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_FATFS_Init+0x1c>)
 8000cd4:	f00d f850 	bl	800dd78 <FATFS_LinkDriver>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	461a      	mov	r2, r3
 8000cdc:	4b03      	ldr	r3, [pc, #12]	@ (8000cec <MX_FATFS_Init+0x20>)
 8000cde:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000184 	.word	0x20000184
 8000ce8:	20000010 	.word	0x20000010
 8000cec:	20000180 	.word	0x20000180

08000cf0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8000cf4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);	// không cần thiết vì ở đây chỉ có 1 slave
	HAL_Delay(1);
 8000d04:	2001      	movs	r0, #1
 8000d06:	f001 f99d 	bl	8002044 <HAL_Delay>
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
	HAL_Delay(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f001 f996 	bl	8002044 <HAL_Delay>
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000d26:	1df9      	adds	r1, r7, #7
 8000d28:	2364      	movs	r3, #100	@ 0x64
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <SPI_TxByte+0x20>)
 8000d2e:	f003 fc24 	bl	800457a <HAL_SPI_Transmit>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000018c 	.word	0x2000018c

08000d40 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000d4c:	887a      	ldrh	r2, [r7, #2]
 8000d4e:	2364      	movs	r3, #100	@ 0x64
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	4803      	ldr	r0, [pc, #12]	@ (8000d60 <SPI_TxBuffer+0x20>)
 8000d54:	f003 fc11 	bl	800457a <HAL_SPI_Transmit>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000018c 	.word	0x2000018c

08000d64 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af02      	add	r7, sp, #8
	uint8_t dummy, data;	// dummy dùng để trigger SPI nhận dữ liệu, giải thích vì sao chọn 0xFF
	dummy = 0xFF;
 8000d6a:	23ff      	movs	r3, #255	@ 0xff
 8000d6c:	71fb      	strb	r3, [r7, #7]

//	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000d6e:	1dba      	adds	r2, r7, #6
 8000d70:	1df9      	adds	r1, r7, #7
 8000d72:	2364      	movs	r3, #100	@ 0x64
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2301      	movs	r3, #1
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <SPI_RxByte+0x24>)
 8000d7a:	f003 fd42 	bl	8004802 <HAL_SPI_TransmitReceive>

	return data;
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	2000018c 	.word	0x2000018c

08000d8c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000d94:	f7ff ffe6 	bl	8000d64 <SPI_RxByte>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	701a      	strb	r2, [r3, #0]
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 100;	// giải thích ý nghĩa của Timer2
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <SD_ReadyWait+0x30>)
 8000db0:	2264      	movs	r2, #100	@ 0x64
 8000db2:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000db4:	f7ff ffd6 	bl	8000d64 <SPI_RxByte>
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	2bff      	cmp	r3, #255	@ 0xff
 8000dc0:	d004      	beq.n	8000dcc <SD_ReadyWait+0x24>
 8000dc2:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <SD_ReadyWait+0x30>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f3      	bne.n	8000db4 <SD_ReadyWait+0xc>

	return res;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200026ae 	.word	0x200026ae

08000ddc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000de2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000de6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000de8:	f7ff ff91 	bl	8000d0e <DESELECT>
	for(int i = 0; i < 10; i++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	e005      	b.n	8000dfe <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000df2:	20ff      	movs	r0, #255	@ 0xff
 8000df4:	f7ff ff92 	bl	8000d1c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b09      	cmp	r3, #9
 8000e02:	ddf6      	ble.n	8000df2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();	
 8000e04:	f7ff ff7c 	bl	8000d00 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000e08:	2340      	movs	r3, #64	@ 0x40
 8000e0a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000e1c:	2395      	movs	r3, #149	@ 0x95
 8000e1e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000e20:	463b      	mov	r3, r7
 8000e22:	2106      	movs	r1, #6
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff8b 	bl	8000d40 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e2a:	e002      	b.n	8000e32 <SD_PowerOn+0x56>
	{
		cnt--;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000e32:	f7ff ff97 	bl	8000d64 <SPI_RxByte>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d002      	beq.n	8000e42 <SD_PowerOn+0x66>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f4      	bne.n	8000e2c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000e42:	f7ff ff64 	bl	8000d0e <DESELECT>
	SPI_TxByte(0XFF);
 8000e46:	20ff      	movs	r0, #255	@ 0xff
 8000e48:	f7ff ff68 	bl	8000d1c <SPI_TxByte>

	PowerFlag = 1;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <SD_PowerOn+0x80>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000189 	.word	0x20000189

08000e60 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <SD_PowerOff+0x14>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20000189 	.word	0x20000189

08000e78 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <SD_CheckPower+0x14>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000189 	.word	0x20000189

08000e90 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 100;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <SD_RxDataBlock+0x5c>)
 8000e9c:	2264      	movs	r2, #100	@ 0x64
 8000e9e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000ea0:	f7ff ff60 	bl	8000d64 <SPI_RxByte>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	2bff      	cmp	r3, #255	@ 0xff
 8000eac:	d104      	bne.n	8000eb8 <SD_RxDataBlock+0x28>
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <SD_RxDataBlock+0x5c>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1f3      	bne.n	8000ea0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ebc:	d001      	beq.n	8000ec2 <SD_RxDataBlock+0x32>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e00f      	b.n	8000ee2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff ff5f 	bl	8000d8c <SPI_RxBytePtr>
	} while(len--);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	603a      	str	r2, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f4      	bne.n	8000ec2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000ed8:	f7ff ff44 	bl	8000d64 <SPI_RxByte>
	SPI_RxByte();
 8000edc:	f7ff ff42 	bl	8000d64 <SPI_RxByte>

	return TRUE;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200026ad 	.word	0x200026ad

08000ef0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000f00:	f7ff ff52 	bl	8000da8 <SD_ReadyWait>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2bff      	cmp	r3, #255	@ 0xff
 8000f08:	d001      	beq.n	8000f0e <SD_TxDataBlock+0x1e>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e03f      	b.n	8000f8e <SD_TxDataBlock+0x9e>

	/* transmit token */
	SPI_TxByte(token);
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff03 	bl	8000d1c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000f16:	78fb      	ldrb	r3, [r7, #3]
 8000f18:	2bfd      	cmp	r3, #253	@ 0xfd
 8000f1a:	d030      	beq.n	8000f7e <SD_TxDataBlock+0x8e>
	{	Timer3 = 200;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <SD_TxDataBlock+0xa8>)
 8000f1e:	22c8      	movs	r2, #200	@ 0xc8
 8000f20:	801a      	strh	r2, [r3, #0]
		Timer4 =200;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	@ (8000f9c <SD_TxDataBlock+0xac>)
 8000f24:	22c8      	movs	r2, #200	@ 0xc8
 8000f26:	801a      	strh	r2, [r3, #0]
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000f28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff ff07 	bl	8000d40 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000f32:	f7ff ff17 	bl	8000d64 <SPI_RxByte>
		SPI_RxByte();
 8000f36:	f7ff ff15 	bl	8000d64 <SPI_RxByte>

		/* receive response */
		while (i <= 64 && Timer4)
 8000f3a:	e00b      	b.n	8000f54 <SD_TxDataBlock+0x64>
		{
			resp = SPI_RxByte();
 8000f3c:	f7ff ff12 	bl	8000d64 <SPI_RxByte>
 8000f40:	4603      	mov	r3, r0
 8000f42:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d00b      	beq.n	8000f66 <SD_TxDataBlock+0x76>
			i++;
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	3301      	adds	r3, #1
 8000f52:	73bb      	strb	r3, [r7, #14]
		while (i <= 64 && Timer4)
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
 8000f56:	2b40      	cmp	r3, #64	@ 0x40
 8000f58:	d806      	bhi.n	8000f68 <SD_TxDataBlock+0x78>
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <SD_TxDataBlock+0xac>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1eb      	bne.n	8000f3c <SD_TxDataBlock+0x4c>
 8000f64:	e000      	b.n	8000f68 <SD_TxDataBlock+0x78>
			if ((resp & 0x1F) == 0x05) break;
 8000f66:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0 && Timer3);
 8000f68:	bf00      	nop
 8000f6a:	f7ff fefb 	bl	8000d64 <SPI_RxByte>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d104      	bne.n	8000f7e <SD_TxDataBlock+0x8e>
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <SD_TxDataBlock+0xa8>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f5      	bne.n	8000f6a <SD_TxDataBlock+0x7a>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f003 031f 	and.w	r3, r3, #31
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d101      	bne.n	8000f8c <SD_TxDataBlock+0x9c>
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <SD_TxDataBlock+0x9e>

	return FALSE;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200026af 	.word	0x200026af
 8000f9c:	200026b0 	.word	0x200026b0

08000fa0 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000fac:	f7ff fefc 	bl	8000da8 <SD_ReadyWait>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2bff      	cmp	r3, #255	@ 0xff
 8000fb4:	d001      	beq.n	8000fba <SD_SendCmd+0x1a>
 8000fb6:	23ff      	movs	r3, #255	@ 0xff
 8000fb8:	e042      	b.n	8001040 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fead 	bl	8000d1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	0e1b      	lsrs	r3, r3, #24
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fea7 	bl	8000d1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	0c1b      	lsrs	r3, r3, #16
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fea1 	bl	8000d1c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe9b 	bl	8000d1c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe96 	bl	8000d1c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */		// giải thích các giá trị cho CRC
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b40      	cmp	r3, #64	@ 0x40
 8000ff4:	d102      	bne.n	8000ffc <SD_SendCmd+0x5c>
 8000ff6:	2395      	movs	r3, #149	@ 0x95
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e007      	b.n	800100c <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2b48      	cmp	r3, #72	@ 0x48
 8001000:	d102      	bne.n	8001008 <SD_SendCmd+0x68>
 8001002:	2387      	movs	r3, #135	@ 0x87
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e001      	b.n	800100c <SD_SendCmd+0x6c>
	else crc = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fe84 	bl	8000d1c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b4c      	cmp	r3, #76	@ 0x4c
 8001018:	d101      	bne.n	800101e <SD_SendCmd+0x7e>
 800101a:	f7ff fea3 	bl	8000d64 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800101e:	230a      	movs	r3, #10
 8001020:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001022:	f7ff fe9f 	bl	8000d64 <SPI_RxByte>
 8001026:	4603      	mov	r3, r0
 8001028:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800102a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800102e:	2b00      	cmp	r3, #0
 8001030:	da05      	bge.n	800103e <SD_SendCmd+0x9e>
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	3b01      	subs	r3, #1
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f1      	bne.n	8001022 <SD_SendCmd+0x82>

	return res;
 800103e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SD_disk_initialize+0x14>
 8001058:	2301      	movs	r3, #1
 800105a:	e0d5      	b.n	8001208 <SD_disk_initialize+0x1c0>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800105c:	4b6c      	ldr	r3, [pc, #432]	@ (8001210 <SD_disk_initialize+0x1c8>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <SD_disk_initialize+0x2a>
 800106a:	4b69      	ldr	r3, [pc, #420]	@ (8001210 <SD_disk_initialize+0x1c8>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	e0ca      	b.n	8001208 <SD_disk_initialize+0x1c0>

	/* power on */
	SD_PowerOn();
 8001072:	f7ff feb3 	bl	8000ddc <SD_PowerOn>

	/* slave select */
	SELECT();
 8001076:	f7ff fe43 	bl	8000d00 <SELECT>

	/* check disk type */
	type = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800107e:	2100      	movs	r1, #0
 8001080:	2040      	movs	r0, #64	@ 0x40
 8001082:	f7ff ff8d 	bl	8000fa0 <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b01      	cmp	r3, #1
 800108a:	f040 80a5 	bne.w	80011d8 <SD_disk_initialize+0x190>
	{
		/* timeout 1 sec */
		Timer1 = 100;
 800108e:	4b61      	ldr	r3, [pc, #388]	@ (8001214 <SD_disk_initialize+0x1cc>)
 8001090:	2264      	movs	r2, #100	@ 0x64
 8001092:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command*/
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001094:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001098:	2048      	movs	r0, #72	@ 0x48
 800109a:	f7ff ff81 	bl	8000fa0 <SD_SendCmd>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d158      	bne.n	8001156 <SD_disk_initialize+0x10e>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]
 80010a8:	e00c      	b.n	80010c4 <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 80010aa:	7bfc      	ldrb	r4, [r7, #15]
 80010ac:	f7ff fe5a 	bl	8000d64 <SPI_RxByte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	f104 0310 	add.w	r3, r4, #16
 80010b8:	443b      	add	r3, r7
 80010ba:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	3301      	adds	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d9ef      	bls.n	80010aa <SD_disk_initialize+0x62>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80010ca:	7abb      	ldrb	r3, [r7, #10]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	f040 8083 	bne.w	80011d8 <SD_disk_initialize+0x190>
 80010d2:	7afb      	ldrb	r3, [r7, #11]
 80010d4:	2baa      	cmp	r3, #170	@ 0xaa
 80010d6:	d17f      	bne.n	80011d8 <SD_disk_initialize+0x190>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80010d8:	2100      	movs	r1, #0
 80010da:	2077      	movs	r0, #119	@ 0x77
 80010dc:	f7ff ff60 	bl	8000fa0 <SD_SendCmd>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d807      	bhi.n	80010f6 <SD_disk_initialize+0xae>
 80010e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80010ea:	2069      	movs	r0, #105	@ 0x69
 80010ec:	f7ff ff58 	bl	8000fa0 <SD_SendCmd>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <SD_disk_initialize+0xba>
				} while (Timer1);
 80010f6:	4b47      	ldr	r3, [pc, #284]	@ (8001214 <SD_disk_initialize+0x1cc>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1eb      	bne.n	80010d8 <SD_disk_initialize+0x90>
 8001100:	e000      	b.n	8001104 <SD_disk_initialize+0xbc>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001102:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001104:	4b43      	ldr	r3, [pc, #268]	@ (8001214 <SD_disk_initialize+0x1cc>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d064      	beq.n	80011d8 <SD_disk_initialize+0x190>
 800110e:	2100      	movs	r1, #0
 8001110:	207a      	movs	r0, #122	@ 0x7a
 8001112:	f7ff ff45 	bl	8000fa0 <SD_SendCmd>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d15d      	bne.n	80011d8 <SD_disk_initialize+0x190>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e00c      	b.n	800113c <SD_disk_initialize+0xf4>
					{
						ocr[n] = SPI_RxByte();
 8001122:	7bfc      	ldrb	r4, [r7, #15]
 8001124:	f7ff fe1e 	bl	8000d64 <SPI_RxByte>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	f104 0310 	add.w	r3, r4, #16
 8001130:	443b      	add	r3, r7
 8001132:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	3301      	adds	r3, #1
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d9ef      	bls.n	8001122 <SD_disk_initialize+0xda>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001142:	7a3b      	ldrb	r3, [r7, #8]
 8001144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SD_disk_initialize+0x108>
 800114c:	230c      	movs	r3, #12
 800114e:	e000      	b.n	8001152 <SD_disk_initialize+0x10a>
 8001150:	2304      	movs	r3, #4
 8001152:	73bb      	strb	r3, [r7, #14]
 8001154:	e040      	b.n	80011d8 <SD_disk_initialize+0x190>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001156:	2100      	movs	r1, #0
 8001158:	2077      	movs	r0, #119	@ 0x77
 800115a:	f7ff ff21 	bl	8000fa0 <SD_SendCmd>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d808      	bhi.n	8001176 <SD_disk_initialize+0x12e>
 8001164:	2100      	movs	r1, #0
 8001166:	2069      	movs	r0, #105	@ 0x69
 8001168:	f7ff ff1a 	bl	8000fa0 <SD_SendCmd>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d801      	bhi.n	8001176 <SD_disk_initialize+0x12e>
 8001172:	2302      	movs	r3, #2
 8001174:	e000      	b.n	8001178 <SD_disk_initialize+0x130>
 8001176:	2301      	movs	r3, #1
 8001178:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d10e      	bne.n	800119e <SD_disk_initialize+0x156>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001180:	2100      	movs	r1, #0
 8001182:	2077      	movs	r0, #119	@ 0x77
 8001184:	f7ff ff0c 	bl	8000fa0 <SD_SendCmd>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d80e      	bhi.n	80011ac <SD_disk_initialize+0x164>
 800118e:	2100      	movs	r1, #0
 8001190:	2069      	movs	r0, #105	@ 0x69
 8001192:	f7ff ff05 	bl	8000fa0 <SD_SendCmd>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d107      	bne.n	80011ac <SD_disk_initialize+0x164>
 800119c:	e00d      	b.n	80011ba <SD_disk_initialize+0x172>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800119e:	2100      	movs	r1, #0
 80011a0:	2041      	movs	r0, #65	@ 0x41
 80011a2:	f7ff fefd 	bl	8000fa0 <SD_SendCmd>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <SD_disk_initialize+0x170>
				}

			} while (Timer1);
 80011ac:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <SD_disk_initialize+0x1cc>)
 80011ae:	881b      	ldrh	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1e1      	bne.n	800117a <SD_disk_initialize+0x132>
 80011b6:	e000      	b.n	80011ba <SD_disk_initialize+0x172>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80011b8:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <SD_disk_initialize+0x1cc>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <SD_disk_initialize+0x18c>
 80011c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c8:	2050      	movs	r0, #80	@ 0x50
 80011ca:	f7ff fee9 	bl	8000fa0 <SD_SendCmd>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SD_disk_initialize+0x190>
 80011d4:	2300      	movs	r3, #0
 80011d6:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80011d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001218 <SD_disk_initialize+0x1d0>)
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80011de:	f7ff fd96 	bl	8000d0e <DESELECT>
	SPI_RxByte();
 80011e2:	f7ff fdbf 	bl	8000d64 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d008      	beq.n	80011fe <SD_disk_initialize+0x1b6>
	{
		Stat &= ~STA_NOINIT;
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <SD_disk_initialize+0x1c8>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SD_disk_initialize+0x1c8>)
 80011fa:	701a      	strb	r2, [r3, #0]
 80011fc:	e001      	b.n	8001202 <SD_disk_initialize+0x1ba>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80011fe:	f7ff fe2f 	bl	8000e60 <SD_PowerOff>
	}

	return Stat;
 8001202:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <SD_disk_initialize+0x1c8>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	200026ad 	.word	0x200026ad
 8001218:	20000188 	.word	0x20000188

0800121c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SD_disk_status+0x14>
 800122c:	2301      	movs	r3, #1
 800122e:	e002      	b.n	8001236 <SD_disk_status+0x1a>
	return Stat;
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SD_disk_status+0x28>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000000 	.word	0x20000000

08001248 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4603      	mov	r3, r0
 8001256:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <SD_disk_read+0x1c>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <SD_disk_read+0x20>
 8001264:	2304      	movs	r3, #4
 8001266:	e051      	b.n	800130c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001268:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <SD_disk_read+0xcc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SD_disk_read+0x32>
 8001276:	2303      	movs	r3, #3
 8001278:	e048      	b.n	800130c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800127a:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <SD_disk_read+0xd0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <SD_disk_read+0x44>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	607b      	str	r3, [r7, #4]

	SELECT();
 800128c:	f7ff fd38 	bl	8000d00 <SELECT>

	if (count == 1)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d111      	bne.n	80012ba <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	2051      	movs	r0, #81	@ 0x51
 800129a:	f7ff fe81 	bl	8000fa0 <SD_SendCmd>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d129      	bne.n	80012f8 <SD_disk_read+0xb0>
 80012a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012a8:	68b8      	ldr	r0, [r7, #8]
 80012aa:	f7ff fdf1 	bl	8000e90 <SD_RxDataBlock>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d021      	beq.n	80012f8 <SD_disk_read+0xb0>
 80012b4:	2300      	movs	r3, #0
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	e01e      	b.n	80012f8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	2052      	movs	r0, #82	@ 0x52
 80012be:	f7ff fe6f 	bl	8000fa0 <SD_SendCmd>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d117      	bne.n	80012f8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80012c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012cc:	68b8      	ldr	r0, [r7, #8]
 80012ce:	f7ff fddf 	bl	8000e90 <SD_RxDataBlock>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00a      	beq.n	80012ee <SD_disk_read+0xa6>
				buff += 512;
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012de:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ed      	bne.n	80012c8 <SD_disk_read+0x80>
 80012ec:	e000      	b.n	80012f0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80012ee:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80012f0:	2100      	movs	r1, #0
 80012f2:	204c      	movs	r0, #76	@ 0x4c
 80012f4:	f7ff fe54 	bl	8000fa0 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80012f8:	f7ff fd09 	bl	8000d0e <DESELECT>
	SPI_RxByte();
 80012fc:	f7ff fd32 	bl	8000d64 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf14      	ite	ne
 8001306:	2301      	movne	r3, #1
 8001308:	2300      	moveq	r3, #0
 800130a:	b2db      	uxtb	r3, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000188 	.word	0x20000188

0800131c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <SD_disk_write+0x1c>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <SD_disk_write+0x20>
 8001338:	2304      	movs	r3, #4
 800133a:	e06b      	b.n	8001414 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800133c:	4b37      	ldr	r3, [pc, #220]	@ (800141c <SD_disk_write+0x100>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SD_disk_write+0x32>
 800134a:	2303      	movs	r3, #3
 800134c:	e062      	b.n	8001414 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800134e:	4b33      	ldr	r3, [pc, #204]	@ (800141c <SD_disk_write+0x100>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SD_disk_write+0x44>
 800135c:	2302      	movs	r3, #2
 800135e:	e059      	b.n	8001414 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001360:	4b2f      	ldr	r3, [pc, #188]	@ (8001420 <SD_disk_write+0x104>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <SD_disk_write+0x56>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	025b      	lsls	r3, r3, #9
 8001370:	607b      	str	r3, [r7, #4]

	SELECT();
 8001372:	f7ff fcc5 	bl	8000d00 <SELECT>

	if (count == 1)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d110      	bne.n	800139e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800137c:	6879      	ldr	r1, [r7, #4]
 800137e:	2058      	movs	r0, #88	@ 0x58
 8001380:	f7ff fe0e 	bl	8000fa0 <SD_SendCmd>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d13a      	bne.n	8001400 <SD_disk_write+0xe4>
 800138a:	21fe      	movs	r1, #254	@ 0xfe
 800138c:	68b8      	ldr	r0, [r7, #8]
 800138e:	f7ff fdaf 	bl	8000ef0 <SD_TxDataBlock>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d033      	beq.n	8001400 <SD_disk_write+0xe4>
			count = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	603b      	str	r3, [r7, #0]
 800139c:	e030      	b.n	8001400 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800139e:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <SD_disk_write+0x104>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d007      	beq.n	80013ba <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80013aa:	2100      	movs	r1, #0
 80013ac:	2077      	movs	r0, #119	@ 0x77
 80013ae:	f7ff fdf7 	bl	8000fa0 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80013b2:	6839      	ldr	r1, [r7, #0]
 80013b4:	2057      	movs	r0, #87	@ 0x57
 80013b6:	f7ff fdf3 	bl	8000fa0 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2059      	movs	r0, #89	@ 0x59
 80013be:	f7ff fdef 	bl	8000fa0 <SD_SendCmd>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d11b      	bne.n	8001400 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013c8:	21fc      	movs	r1, #252	@ 0xfc
 80013ca:	68b8      	ldr	r0, [r7, #8]
 80013cc:	f7ff fd90 	bl	8000ef0 <SD_TxDataBlock>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00a      	beq.n	80013ec <SD_disk_write+0xd0>
				buff += 512;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80013dc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ee      	bne.n	80013c8 <SD_disk_write+0xac>
 80013ea:	e000      	b.n	80013ee <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80013ec:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80013ee:	21fd      	movs	r1, #253	@ 0xfd
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fd7d 	bl	8000ef0 <SD_TxDataBlock>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <SD_disk_write+0xe4>
			{
				count = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001400:	f7ff fc85 	bl	8000d0e <DESELECT>
	SPI_RxByte();
 8001404:	f7ff fcae 	bl	8000d64 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000188 	.word	0x20000188

08001424 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b08b      	sub	sp, #44	@ 0x2c
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	603a      	str	r2, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	460b      	mov	r3, r1
 8001432:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SD_disk_ioctl+0x1e>
 800143e:	2304      	movs	r3, #4
 8001440:	e113      	b.n	800166a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001448:	79bb      	ldrb	r3, [r7, #6]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d124      	bne.n	8001498 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d012      	beq.n	800147c <SD_disk_ioctl+0x58>
 8001456:	2b02      	cmp	r3, #2
 8001458:	dc1a      	bgt.n	8001490 <SD_disk_ioctl+0x6c>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <SD_disk_ioctl+0x40>
 800145e:	2b01      	cmp	r3, #1
 8001460:	d006      	beq.n	8001470 <SD_disk_ioctl+0x4c>
 8001462:	e015      	b.n	8001490 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001464:	f7ff fcfc 	bl	8000e60 <SD_PowerOff>
			res = RES_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800146e:	e0fa      	b.n	8001666 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001470:	f7ff fcb4 	bl	8000ddc <SD_PowerOn>
			res = RES_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800147a:	e0f4      	b.n	8001666 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 800147c:	6a3b      	ldr	r3, [r7, #32]
 800147e:	1c5c      	adds	r4, r3, #1
 8001480:	f7ff fcfa 	bl	8000e78 <SD_CheckPower>
 8001484:	4603      	mov	r3, r0
 8001486:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800148e:	e0ea      	b.n	8001666 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001490:	2304      	movs	r3, #4
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001496:	e0e6      	b.n	8001666 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001498:	4b76      	ldr	r3, [pc, #472]	@ (8001674 <SD_disk_ioctl+0x250>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SD_disk_ioctl+0x86>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e0df      	b.n	800166a <SD_disk_ioctl+0x246>

		SELECT();
 80014aa:	f7ff fc29 	bl	8000d00 <SELECT>

		switch (ctrl)
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	2b0d      	cmp	r3, #13
 80014b2:	f200 80c9 	bhi.w	8001648 <SD_disk_ioctl+0x224>
 80014b6:	a201      	add	r2, pc, #4	@ (adr r2, 80014bc <SD_disk_ioctl+0x98>)
 80014b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014bc:	080015b3 	.word	0x080015b3
 80014c0:	080014f5 	.word	0x080014f5
 80014c4:	080015a3 	.word	0x080015a3
 80014c8:	08001649 	.word	0x08001649
 80014cc:	08001649 	.word	0x08001649
 80014d0:	08001649 	.word	0x08001649
 80014d4:	08001649 	.word	0x08001649
 80014d8:	08001649 	.word	0x08001649
 80014dc:	08001649 	.word	0x08001649
 80014e0:	08001649 	.word	0x08001649
 80014e4:	08001649 	.word	0x08001649
 80014e8:	080015c5 	.word	0x080015c5
 80014ec:	080015e9 	.word	0x080015e9
 80014f0:	0800160d 	.word	0x0800160d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80014f4:	2100      	movs	r1, #0
 80014f6:	2049      	movs	r0, #73	@ 0x49
 80014f8:	f7ff fd52 	bl	8000fa0 <SD_SendCmd>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f040 80a6 	bne.w	8001650 <SD_disk_ioctl+0x22c>
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2110      	movs	r1, #16
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fcc0 	bl	8000e90 <SD_RxDataBlock>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 809c 	beq.w	8001650 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001518:	7b3b      	ldrb	r3, [r7, #12]
 800151a:	099b      	lsrs	r3, r3, #6
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d10d      	bne.n	800153e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001522:	7d7b      	ldrb	r3, [r7, #21]
 8001524:	461a      	mov	r2, r3
 8001526:	7d3b      	ldrb	r3, [r7, #20]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b29b      	uxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b29b      	uxth	r3, r3
 8001530:	3301      	adds	r3, #1
 8001532:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	029a      	lsls	r2, r3, #10
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e02d      	b.n	800159a <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800153e:	7c7b      	ldrb	r3, [r7, #17]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	b2da      	uxtb	r2, r3
 8001546:	7dbb      	ldrb	r3, [r7, #22]
 8001548:	09db      	lsrs	r3, r3, #7
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b2da      	uxtb	r2, r3
 8001550:	7d7b      	ldrb	r3, [r7, #21]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f003 0306 	and.w	r3, r3, #6
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	3302      	adds	r3, #2
 8001562:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001566:	7d3b      	ldrb	r3, [r7, #20]
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	b2db      	uxtb	r3, r3
 800156c:	461a      	mov	r2, r3
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	b29b      	uxth	r3, r3
 8001574:	4413      	add	r3, r2
 8001576:	b29a      	uxth	r2, r3
 8001578:	7cbb      	ldrb	r3, [r7, #18]
 800157a:	029b      	lsls	r3, r3, #10
 800157c:	b29b      	uxth	r3, r3
 800157e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001582:	b29b      	uxth	r3, r3
 8001584:	4413      	add	r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	3301      	adds	r3, #1
 800158a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800158c:	8bfa      	ldrh	r2, [r7, #30]
 800158e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001592:	3b09      	subs	r3, #9
 8001594:	409a      	lsls	r2, r3
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80015a0:	e056      	b.n	8001650 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015b0:	e055      	b.n	800165e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80015b2:	f7ff fbf9 	bl	8000da8 <SD_ReadyWait>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2bff      	cmp	r3, #255	@ 0xff
 80015ba:	d14b      	bne.n	8001654 <SD_disk_ioctl+0x230>
 80015bc:	2300      	movs	r3, #0
 80015be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015c2:	e047      	b.n	8001654 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015c4:	2100      	movs	r1, #0
 80015c6:	2049      	movs	r0, #73	@ 0x49
 80015c8:	f7ff fcea 	bl	8000fa0 <SD_SendCmd>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d142      	bne.n	8001658 <SD_disk_ioctl+0x234>
 80015d2:	2110      	movs	r1, #16
 80015d4:	6a38      	ldr	r0, [r7, #32]
 80015d6:	f7ff fc5b 	bl	8000e90 <SD_RxDataBlock>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d03b      	beq.n	8001658 <SD_disk_ioctl+0x234>
 80015e0:	2300      	movs	r3, #0
 80015e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80015e6:	e037      	b.n	8001658 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80015e8:	2100      	movs	r1, #0
 80015ea:	204a      	movs	r0, #74	@ 0x4a
 80015ec:	f7ff fcd8 	bl	8000fa0 <SD_SendCmd>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d132      	bne.n	800165c <SD_disk_ioctl+0x238>
 80015f6:	2110      	movs	r1, #16
 80015f8:	6a38      	ldr	r0, [r7, #32]
 80015fa:	f7ff fc49 	bl	8000e90 <SD_RxDataBlock>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d02b      	beq.n	800165c <SD_disk_ioctl+0x238>
 8001604:	2300      	movs	r3, #0
 8001606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800160a:	e027      	b.n	800165c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 800160c:	2100      	movs	r1, #0
 800160e:	207a      	movs	r0, #122	@ 0x7a
 8001610:	f7ff fcc6 	bl	8000fa0 <SD_SendCmd>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d116      	bne.n	8001648 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800161a:	2300      	movs	r3, #0
 800161c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001620:	e00b      	b.n	800163a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001622:	6a3c      	ldr	r4, [r7, #32]
 8001624:	1c63      	adds	r3, r4, #1
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	f7ff fb9c 	bl	8000d64 <SPI_RxByte>
 800162c:	4603      	mov	r3, r0
 800162e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001634:	3301      	adds	r3, #1
 8001636:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800163a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800163e:	2b03      	cmp	r3, #3
 8001640:	d9ef      	bls.n	8001622 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001648:	2304      	movs	r3, #4
 800164a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800164e:	e006      	b.n	800165e <SD_disk_ioctl+0x23a>
			break;
 8001650:	bf00      	nop
 8001652:	e004      	b.n	800165e <SD_disk_ioctl+0x23a>
			break;
 8001654:	bf00      	nop
 8001656:	e002      	b.n	800165e <SD_disk_ioctl+0x23a>
			break;
 8001658:	bf00      	nop
 800165a:	e000      	b.n	800165e <SD_disk_ioctl+0x23a>
			break;
 800165c:	bf00      	nop
		}

		DESELECT();
 800165e:	f7ff fb56 	bl	8000d0e <DESELECT>
		SPI_RxByte();
 8001662:	f7ff fb7f 	bl	8000d64 <SPI_RxByte>
	}

	return res;
 8001666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800166a:	4618      	mov	r0, r3
 800166c:	372c      	adds	r7, #44	@ 0x2c
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000

08001678 <send_uart>:
DWORD fre_clust;
uint32_t total, free_space;

// to send data to uart
void send_uart(char *string)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b09c      	sub	sp, #112	@ 0x70
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(string);  
	memset(buf2, 0, sizeof(buf2));
	HAL_UART_Transmit(&huart1, (uint8_t)* string, len, 2000);
	*/
  char buf1[100];
  memset(buf1, 0, sizeof(buf1));
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	2264      	movs	r2, #100	@ 0x64
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00d f943 	bl	800e914 <memset>
  strcpy(buf1, string);
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	f00d f971 	bl	800e97c <strcpy>
  HAL_UART_Transmit(&huart1,(char*) buf1, sizeof(buf1), 2000);
 800169a:	f107 010c 	add.w	r1, r7, #12
 800169e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016a2:	2264      	movs	r2, #100	@ 0x64
 80016a4:	4803      	ldr	r0, [pc, #12]	@ (80016b4 <send_uart+0x3c>)
 80016a6:	f003 fb81 	bl	8004dac <HAL_UART_Transmit>

}
 80016aa:	bf00      	nop
 80016ac:	3770      	adds	r7, #112	@ 0x70
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200001e4 	.word	0x200001e4

080016b8 <bufclear>:
	int i=0;
	while (*buf++ != '\0' )i++;

	return i;
}
void bufclear(void){
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
	for (int i=0;i<1024;i++){
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	e007      	b.n	80016d4 <bufclear+0x1c>
		buffer[i] = '\0';
 80016c4:	4a09      	ldr	r2, [pc, #36]	@ (80016ec <bufclear+0x34>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<1024;i++){
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016da:	dbf3      	blt.n	80016c4 <bufclear+0xc>
	}
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20002298 	.word	0x20002298

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f4:	f000 fc34 	bl	8001f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f8:	f000 f95a 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fc:	f000 fa22 	bl	8001b44 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001700:	f000 f9c0 	bl	8001a84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001704:	f000 f9f4 	bl	8001af0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8001708:	f7ff fae0 	bl	8000ccc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800170c:	f00c fc0a 	bl	800df24 <MX_USB_DEVICE_Init>
  //SD_FATFS_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8001710:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001714:	f000 fc96 	bl	8002044 <HAL_Delay>
  // Mount the SD card

  fresult = f_mount(&fs, "", 0);  // Changed to "0:" and force mount
 8001718:	2200      	movs	r2, #0
 800171a:	4989      	ldr	r1, [pc, #548]	@ (8001940 <main+0x250>)
 800171c:	4889      	ldr	r0, [pc, #548]	@ (8001944 <main+0x254>)
 800171e:	f00b f8d9 	bl	800c8d4 <f_mount>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	4b88      	ldr	r3, [pc, #544]	@ (8001948 <main+0x258>)
 8001728:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) {
 800172a:	4b87      	ldr	r3, [pc, #540]	@ (8001948 <main+0x258>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d03e      	beq.n	80017b0 <main+0xc0>
    switch(fresult) {
 8001732:	4b85      	ldr	r3, [pc, #532]	@ (8001948 <main+0x258>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d82d      	bhi.n	8001798 <main+0xa8>
 800173c:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <main+0x54>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001779 	.word	0x08001779
 8001748:	08001781 	.word	0x08001781
 800174c:	08001789 	.word	0x08001789
 8001750:	08001799 	.word	0x08001799
 8001754:	08001799 	.word	0x08001799
 8001758:	08001799 	.word	0x08001799
 800175c:	08001799 	.word	0x08001799
 8001760:	08001799 	.word	0x08001799
 8001764:	08001799 	.word	0x08001799
 8001768:	08001799 	.word	0x08001799
 800176c:	08001799 	.word	0x08001799
 8001770:	08001799 	.word	0x08001799
 8001774:	08001791 	.word	0x08001791
      case FR_DISK_ERR:
        send_uart("Error: Disk error\n");
 8001778:	4874      	ldr	r0, [pc, #464]	@ (800194c <main+0x25c>)
 800177a:	f7ff ff7d 	bl	8001678 <send_uart>
        break;
 800177e:	e015      	b.n	80017ac <main+0xbc>
      case FR_INT_ERR:
        send_uart("Error: Internal error\n");
 8001780:	4873      	ldr	r0, [pc, #460]	@ (8001950 <main+0x260>)
 8001782:	f7ff ff79 	bl	8001678 <send_uart>
        break;
 8001786:	e011      	b.n	80017ac <main+0xbc>
      case FR_NOT_READY:
        send_uart("Error: Not ready\n");
 8001788:	4872      	ldr	r0, [pc, #456]	@ (8001954 <main+0x264>)
 800178a:	f7ff ff75 	bl	8001678 <send_uart>
        break;
 800178e:	e00d      	b.n	80017ac <main+0xbc>
      case FR_NO_FILESYSTEM:
        send_uart("Error: No valid FAT volume\n");
 8001790:	4871      	ldr	r0, [pc, #452]	@ (8001958 <main+0x268>)
 8001792:	f7ff ff71 	bl	8001678 <send_uart>
        break;
 8001796:	e009      	b.n	80017ac <main+0xbc>
      default:
        sprintf(buffer, "Error mounting SD card: %d\n", fresult);
 8001798:	4b6b      	ldr	r3, [pc, #428]	@ (8001948 <main+0x258>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	496f      	ldr	r1, [pc, #444]	@ (800195c <main+0x26c>)
 80017a0:	486f      	ldr	r0, [pc, #444]	@ (8001960 <main+0x270>)
 80017a2:	f00d f897 	bl	800e8d4 <siprintf>
        send_uart(buffer);
 80017a6:	486e      	ldr	r0, [pc, #440]	@ (8001960 <main+0x270>)
 80017a8:	f7ff ff66 	bl	8001678 <send_uart>
    }
    Error_Handler();
 80017ac:	f000 fa1a 	bl	8001be4 <Error_Handler>
  }
  send_uart("SD Card mounted successfully\n");
 80017b0:	486c      	ldr	r0, [pc, #432]	@ (8001964 <main+0x274>)
 80017b2:	f7ff ff61 	bl	8001678 <send_uart>
  }


/* Open file to write */
  // check free space
  f_getfree("", &fre_clust, &pfs);
 80017b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001968 <main+0x278>)
 80017b8:	496c      	ldr	r1, [pc, #432]	@ (800196c <main+0x27c>)
 80017ba:	4861      	ldr	r0, [pc, #388]	@ (8001940 <main+0x250>)
 80017bc:	f00c f857 	bl	800d86e <f_getfree>
  total = (uint32_t)((pfs->n_fatent -2)* pfs->csize*0.5);
 80017c0:	4b69      	ldr	r3, [pc, #420]	@ (8001968 <main+0x278>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	3b02      	subs	r3, #2
 80017c8:	4a67      	ldr	r2, [pc, #412]	@ (8001968 <main+0x278>)
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	8952      	ldrh	r2, [r2, #10]
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe ffc8 	bl	8000768 <__aeabi_ui2d>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b64      	ldr	r3, [pc, #400]	@ (8001970 <main+0x280>)
 80017de:	f7fe fd57 	bl	8000290 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f837 	bl	800085c <__aeabi_d2uiz>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4a60      	ldr	r2, [pc, #384]	@ (8001974 <main+0x284>)
 80017f2:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD Card total size: \t%lu\n", total);
 80017f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001974 <main+0x284>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	495f      	ldr	r1, [pc, #380]	@ (8001978 <main+0x288>)
 80017fc:	4858      	ldr	r0, [pc, #352]	@ (8001960 <main+0x270>)
 80017fe:	f00d f869 	bl	800e8d4 <siprintf>
  send_uart(buffer);
 8001802:	4857      	ldr	r0, [pc, #348]	@ (8001960 <main+0x270>)
 8001804:	f7ff ff38 	bl	8001678 <send_uart>
  bufclear();
 8001808:	f7ff ff56 	bl	80016b8 <bufclear>
  free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800180c:	4b56      	ldr	r3, [pc, #344]	@ (8001968 <main+0x278>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	895b      	ldrh	r3, [r3, #10]
 8001812:	461a      	mov	r2, r3
 8001814:	4b55      	ldr	r3, [pc, #340]	@ (800196c <main+0x27c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe ffa3 	bl	8000768 <__aeabi_ui2d>
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b52      	ldr	r3, [pc, #328]	@ (8001970 <main+0x280>)
 8001828:	f7fe fd32 	bl	8000290 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f812 	bl	800085c <__aeabi_d2uiz>
 8001838:	4603      	mov	r3, r0
 800183a:	4a50      	ldr	r2, [pc, #320]	@ (800197c <main+0x28c>)
 800183c:	6013      	str	r3, [r2, #0]
  sprintf(buffer, "SD_CARD Free Space: \t%lu\n", free_space);
 800183e:	4b4f      	ldr	r3, [pc, #316]	@ (800197c <main+0x28c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	494e      	ldr	r1, [pc, #312]	@ (8001980 <main+0x290>)
 8001846:	4846      	ldr	r0, [pc, #280]	@ (8001960 <main+0x270>)
 8001848:	f00d f844 	bl	800e8d4 <siprintf>
  send_uart(buffer);
 800184c:	4844      	ldr	r0, [pc, #272]	@ (8001960 <main+0x270>)
 800184e:	f7ff ff13 	bl	8001678 <send_uart>

  // open a file or create if not existing
  fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001852:	2213      	movs	r2, #19
 8001854:	494b      	ldr	r1, [pc, #300]	@ (8001984 <main+0x294>)
 8001856:	484c      	ldr	r0, [pc, #304]	@ (8001988 <main+0x298>)
 8001858:	f00b f882 	bl	800c960 <f_open>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	4b39      	ldr	r3, [pc, #228]	@ (8001948 <main+0x258>)
 8001862:	701a      	strb	r2, [r3, #0]

  // WRITE TEXT
  fresult = f_puts("This data is from the first file \n\n", &fil);
 8001864:	4948      	ldr	r1, [pc, #288]	@ (8001988 <main+0x298>)
 8001866:	4849      	ldr	r0, [pc, #292]	@ (800198c <main+0x29c>)
 8001868:	f00c fa16 	bl	800dc98 <f_puts>
 800186c:	4603      	mov	r3, r0
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b35      	ldr	r3, [pc, #212]	@ (8001948 <main+0x258>)
 8001872:	701a      	strb	r2, [r3, #0]


  // close
  fresult = f_close(&fil);
 8001874:	4844      	ldr	r0, [pc, #272]	@ (8001988 <main+0x298>)
 8001876:	f00b fdac 	bl	800d3d2 <f_close>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b32      	ldr	r3, [pc, #200]	@ (8001948 <main+0x258>)
 8001880:	701a      	strb	r2, [r3, #0]
  //
  send_uart ("file1.txt created and the data is written\n");
 8001882:	4843      	ldr	r0, [pc, #268]	@ (8001990 <main+0x2a0>)
 8001884:	f7ff fef8 	bl	8001678 <send_uart>

  // open file to read
  fresult = f_open(&fil, "file.txt", FA_READ);
 8001888:	2201      	movs	r2, #1
 800188a:	4942      	ldr	r1, [pc, #264]	@ (8001994 <main+0x2a4>)
 800188c:	483e      	ldr	r0, [pc, #248]	@ (8001988 <main+0x298>)
 800188e:	f00b f867 	bl	800c960 <f_open>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4b2c      	ldr	r3, [pc, #176]	@ (8001948 <main+0x258>)
 8001898:	701a      	strb	r2, [r3, #0]

  // read string from the file
  f_gets(buffer, fil.buf, &fil);
 800189a:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <main+0x2a8>)
 800189c:	4a3a      	ldr	r2, [pc, #232]	@ (8001988 <main+0x298>)
 800189e:	4619      	mov	r1, r3
 80018a0:	482f      	ldr	r0, [pc, #188]	@ (8001960 <main+0x270>)
 80018a2:	f00c f944 	bl	800db2e <f_gets>

  send_uart(buffer);
 80018a6:	482e      	ldr	r0, [pc, #184]	@ (8001960 <main+0x270>)
 80018a8:	f7ff fee6 	bl	8001678 <send_uart>
  // close file
  f_close(&fil);
 80018ac:	4836      	ldr	r0, [pc, #216]	@ (8001988 <main+0x298>)
 80018ae:	f00b fd90 	bl	800d3d2 <f_close>
  bufclear();
 80018b2:	f7ff ff01 	bl	80016b8 <bufclear>


 //----------Update a file-------------/
  fresult = f_open(&fil, 'file1.txt', FA_OPEN_ALWAYS | FA_WRITE);
 80018b6:	2212      	movs	r2, #18
 80018b8:	4938      	ldr	r1, [pc, #224]	@ (800199c <main+0x2ac>)
 80018ba:	4833      	ldr	r0, [pc, #204]	@ (8001988 <main+0x298>)
 80018bc:	f00b f850 	bl	800c960 <f_open>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b20      	ldr	r3, [pc, #128]	@ (8001948 <main+0x258>)
 80018c6:	701a      	strb	r2, [r3, #0]

  // move to the end
  fresult = f_lseek(&fil, fil.buf); // xem lai de la f.size
 80018c8:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <main+0x2a8>)
 80018ca:	4619      	mov	r1, r3
 80018cc:	482e      	ldr	r0, [pc, #184]	@ (8001988 <main+0x298>)
 80018ce:	f00b fdaa 	bl	800d426 <f_lseek>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001948 <main+0x258>)
 80018d8:	701a      	strb	r2, [r3, #0]


  // write to string to file
  fresult = f_puts("This is updated area and it should be at the end\n", &fil);
 80018da:	492b      	ldr	r1, [pc, #172]	@ (8001988 <main+0x298>)
 80018dc:	4830      	ldr	r0, [pc, #192]	@ (80019a0 <main+0x2b0>)
 80018de:	f00c f9db 	bl	800dc98 <f_puts>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4b18      	ldr	r3, [pc, #96]	@ (8001948 <main+0x258>)
 80018e8:	701a      	strb	r2, [r3, #0]

  f_close(&fil);
 80018ea:	4827      	ldr	r0, [pc, #156]	@ (8001988 <main+0x298>)
 80018ec:	f00b fd71 	bl	800d3d2 <f_close>

  // open to read
  fresult = f_open(&fil, "file1.txt", FA_READ);
 80018f0:	2201      	movs	r2, #1
 80018f2:	4924      	ldr	r1, [pc, #144]	@ (8001984 <main+0x294>)
 80018f4:	4824      	ldr	r0, [pc, #144]	@ (8001988 <main+0x298>)
 80018f6:	f00b f833 	bl	800c960 <f_open>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <main+0x258>)
 8001900:	701a      	strb	r2, [r3, #0]

  // read from string
  f_read(&fil, buffer, fil.buf, &br);
 8001902:	4a25      	ldr	r2, [pc, #148]	@ (8001998 <main+0x2a8>)
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <main+0x2b4>)
 8001906:	4916      	ldr	r1, [pc, #88]	@ (8001960 <main+0x270>)
 8001908:	481f      	ldr	r0, [pc, #124]	@ (8001988 <main+0x298>)
 800190a:	f00b f9f1 	bl	800ccf0 <f_read>
  send_uart(buffer);
 800190e:	4814      	ldr	r0, [pc, #80]	@ (8001960 <main+0x270>)
 8001910:	f7ff feb2 	bl	8001678 <send_uart>

  // close file
  f_close(&fil);
 8001914:	481c      	ldr	r0, [pc, #112]	@ (8001988 <main+0x298>)
 8001916:	f00b fd5c 	bl	800d3d2 <f_close>

  bufclear();
 800191a:	f7ff fecd 	bl	80016b8 <bufclear>

  //-----------------Delete from Card-----------------/
  fresult = f_unlink("/file1.txt");
 800191e:	4822      	ldr	r0, [pc, #136]	@ (80019a8 <main+0x2b8>)
 8001920:	f00c f85a 	bl	800d9d8 <f_unlink>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <main+0x258>)
 800192a:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK){
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <main+0x258>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <main+0x24c>
	  send_uart("file1.txt removed sucessfully\n");
 8001934:	481d      	ldr	r0, [pc, #116]	@ (80019ac <main+0x2bc>)
 8001936:	f7ff fe9f 	bl	8001678 <send_uart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <main+0x24c>
 8001940:	0800f23c 	.word	0x0800f23c
 8001944:	2000022c 	.word	0x2000022c
 8001948:	20002294 	.word	0x20002294
 800194c:	0800f240 	.word	0x0800f240
 8001950:	0800f254 	.word	0x0800f254
 8001954:	0800f26c 	.word	0x0800f26c
 8001958:	0800f280 	.word	0x0800f280
 800195c:	0800f29c 	.word	0x0800f29c
 8001960:	20002298 	.word	0x20002298
 8001964:	0800f2b8 	.word	0x0800f2b8
 8001968:	2000269c 	.word	0x2000269c
 800196c:	200026a0 	.word	0x200026a0
 8001970:	3fe00000 	.word	0x3fe00000
 8001974:	200026a4 	.word	0x200026a4
 8001978:	0800f2d8 	.word	0x0800f2d8
 800197c:	200026a8 	.word	0x200026a8
 8001980:	0800f2f4 	.word	0x0800f2f4
 8001984:	0800f310 	.word	0x0800f310
 8001988:	20001264 	.word	0x20001264
 800198c:	0800f31c 	.word	0x0800f31c
 8001990:	0800f340 	.word	0x0800f340
 8001994:	0800f36c 	.word	0x0800f36c
 8001998:	20001294 	.word	0x20001294
 800199c:	2e747874 	.word	0x2e747874
 80019a0:	0800f378 	.word	0x0800f378
 80019a4:	20002698 	.word	0x20002698
 80019a8:	0800f3ac 	.word	0x0800f3ac
 80019ac:	0800f3b8 	.word	0x0800f3b8

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b094      	sub	sp, #80	@ 0x50
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	2230      	movs	r2, #48	@ 0x30
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f00c ffa8 	bl	800e914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b28      	ldr	r3, [pc, #160]	@ (8001a7c <SystemClock_Config+0xcc>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	4a27      	ldr	r2, [pc, #156]	@ (8001a7c <SystemClock_Config+0xcc>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e4:	4b25      	ldr	r3, [pc, #148]	@ (8001a7c <SystemClock_Config+0xcc>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <SystemClock_Config+0xd0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80019fc:	4a20      	ldr	r2, [pc, #128]	@ (8001a80 <SystemClock_Config+0xd0>)
 80019fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <SystemClock_Config+0xd0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a24:	2304      	movs	r3, #4
 8001a26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a28:	2348      	movs	r3, #72	@ 0x48
 8001a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a30:	2303      	movs	r3, #3
 8001a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a34:	f107 0320 	add.w	r3, r7, #32
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 f87d 	bl	8003b38 <HAL_RCC_OscConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001a44:	f000 f8ce 	bl	8001be4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a48:	230f      	movs	r3, #15
 8001a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	2102      	movs	r1, #2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fadf 	bl	8004028 <HAL_RCC_ClockConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001a70:	f000 f8b8 	bl	8001be4 <Error_Handler>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3750      	adds	r7, #80	@ 0x50
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000

08001a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <MX_SPI1_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ab8:	2220      	movs	r2, #32
 8001aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_SPI1_Init+0x64>)
 8001ad6:	f002 fcc7 	bl	8004468 <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f000 f880 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000018c 	.word	0x2000018c
 8001aec:	40013000 	.word	0x40013000

08001af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <MX_USART1_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b28:	f003 f8f0 	bl	8004d0c <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 f857 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200001e4 	.word	0x200001e4
 8001b40:	40011000 	.word	0x40011000

08001b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]
 8001b54:	609a      	str	r2, [r3, #8]
 8001b56:	60da      	str	r2, [r3, #12]
 8001b58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a1e      	ldr	r2, [pc, #120]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a17      	ldr	r2, [pc, #92]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <MX_GPIO_Init+0x98>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	480b      	ldr	r0, [pc, #44]	@ (8001be0 <MX_GPIO_Init+0x9c>)
 8001bb4:	f000 fd28 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4804      	ldr	r0, [pc, #16]	@ (8001be0 <MX_GPIO_Init+0x9c>)
 8001bd0:	f000 fb6e 	bl	80022b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd4:	bf00      	nop
 8001bd6:	3720      	adds	r7, #32
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020800 	.word	0x40020800

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be8:	b672      	cpsid	i
}
 8001bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <Error_Handler+0x8>

08001bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a08      	ldr	r2, [pc, #32]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	603b      	str	r3, [r7, #0]
 8001c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a19      	ldr	r2, [pc, #100]	@ (8001cc4 <HAL_SPI_MspInit+0x84>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d12b      	bne.n	8001cba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b18      	ldr	r3, [pc, #96]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a17      	ldr	r2, [pc, #92]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a10      	ldr	r2, [pc, #64]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <HAL_SPI_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c9a:	23e0      	movs	r3, #224	@ 0xe0
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001caa:	2305      	movs	r3, #5
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4805      	ldr	r0, [pc, #20]	@ (8001ccc <HAL_SPI_MspInit+0x8c>)
 8001cb6:	f000 fafb 	bl	80022b0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	@ 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08a      	sub	sp, #40	@ 0x28
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a19      	ldr	r2, [pc, #100]	@ (8001d54 <HAL_UART_MspInit+0x84>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12c      	bne.n	8001d4c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b18      	ldr	r3, [pc, #96]	@ (8001d58 <HAL_UART_MspInit+0x88>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a17      	ldr	r2, [pc, #92]	@ (8001d58 <HAL_UART_MspInit+0x88>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <HAL_UART_MspInit+0x88>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <HAL_UART_MspInit+0x88>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	4a10      	ldr	r2, [pc, #64]	@ (8001d58 <HAL_UART_MspInit+0x88>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <HAL_UART_MspInit+0x88>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4619      	mov	r1, r3
 8001d46:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <HAL_UART_MspInit+0x8c>)
 8001d48:	f000 fab2 	bl	80022b0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	@ 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40011000 	.word	0x40011000
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2,Timer3,Timer4;

void SDTimer_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <SDTimer_Handler+0x70>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <SDTimer_Handler+0x1c>
    Timer1--;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <SDTimer_Handler+0x70>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <SDTimer_Handler+0x70>)
 8001d7a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <SDTimer_Handler+0x74>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <SDTimer_Handler+0x34>
    Timer2--;
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <SDTimer_Handler+0x74>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <SDTimer_Handler+0x74>)
 8001d92:	701a      	strb	r2, [r3, #0]
  if(Timer3 > 0)
 8001d94:	4b10      	ldr	r3, [pc, #64]	@ (8001dd8 <SDTimer_Handler+0x78>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <SDTimer_Handler+0x4c>
      Timer1--;
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <SDTimer_Handler+0x70>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <SDTimer_Handler+0x70>)
 8001daa:	701a      	strb	r2, [r3, #0]

  if(Timer4 > 0)
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <SDTimer_Handler+0x7c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <SDTimer_Handler+0x64>
      Timer2--;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <SDTimer_Handler+0x74>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <SDTimer_Handler+0x74>)
 8001dc2:	701a      	strb	r2, [r3, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200026ad 	.word	0x200026ad
 8001dd4:	200026ae 	.word	0x200026ae
 8001dd8:	200026af 	.word	0x200026af
 8001ddc:	200026b0 	.word	0x200026b0

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <NMI_Handler+0x4>

08001de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <SysTick_Handler+0x30>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <SysTick_Handler+0x30>)
 8001e44:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <SysTick_Handler+0x30>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b09      	cmp	r3, #9
 8001e4e:	d904      	bls.n	8001e5a <SysTick_Handler+0x26>
	  {
		FatFsCnt = 0;
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <SysTick_Handler+0x30>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001e56:	f7ff ff83 	bl	8001d60 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5a:	f000 f8d3 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200026ac 	.word	0x200026ac

08001e68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <OTG_FS_IRQHandler+0x10>)
 8001e6e:	f000 fd28 	bl	80028c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20002df0 	.word	0x20002df0

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f00c fd3a 	bl	800e924 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20030000 	.word	0x20030000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	200026b4 	.word	0x200026b4
 8001ee4:	200036a8 	.word	0x200036a8

08001ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <SystemInit+0x20>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <SystemInit+0x20>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f10:	f7ff ffea 	bl	8001ee8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f14:	480c      	ldr	r0, [pc, #48]	@ (8001f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f16:	490d      	ldr	r1, [pc, #52]	@ (8001f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f1c:	e002      	b.n	8001f24 <LoopCopyDataInit>

08001f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f22:	3304      	adds	r3, #4

08001f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f28:	d3f9      	bcc.n	8001f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f30:	e001      	b.n	8001f36 <LoopFillZerobss>

08001f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f34:	3204      	adds	r2, #4

08001f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f38:	d3fb      	bcc.n	8001f32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f3a:	f00c fcf9 	bl	800e930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f3e:	f7ff fbd7 	bl	80016f0 <main>
  bx  lr    
 8001f42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001f50:	0800f924 	.word	0x0800f924
  ldr r2, =_sbss
 8001f54:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8001f58:	200036a4 	.word	0x200036a4

08001f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC_IRQHandler>
	...

08001f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f64:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_Init+0x40>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa0 <HAL_Init+0x40>)
 8001f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_Init+0x40>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <HAL_Init+0x40>)
 8001f76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7c:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_Init+0x40>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <HAL_Init+0x40>)
 8001f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f88:	2003      	movs	r0, #3
 8001f8a:	f000 f94f 	bl	800222c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f8e:	200f      	movs	r0, #15
 8001f90:	f000 f808 	bl	8001fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f94:	f7ff fe2c 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <HAL_InitTick+0x54>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x58>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f000 f967 	bl	8002296 <HAL_SYSTICK_Config>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00e      	b.n	8001ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d80a      	bhi.n	8001fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f000 f92f 	bl	8002242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe4:	4a06      	ldr	r2, [pc, #24]	@ (8002000 <HAL_InitTick+0x5c>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e000      	b.n	8001ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000004 	.word	0x20000004
 8001ffc:	2000000c 	.word	0x2000000c
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	@ (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	2000000c 	.word	0x2000000c
 8002028:	200026b8 	.word	0x200026b8

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	@ (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	200026b8 	.word	0x200026b8

08002044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff ffee 	bl	800202c <HAL_GetTick>
 8002050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d005      	beq.n	800206a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205e:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_Delay+0x44>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206a:	bf00      	nop
 800206c:	f7ff ffde 	bl	800202c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d8f7      	bhi.n	800206c <HAL_Delay+0x28>
  {
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000000c 	.word	0x2000000c

0800208c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020a8:	4013      	ands	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020be:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <__NVIC_SetPriorityGrouping+0x44>)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	60d3      	str	r3, [r2, #12]
}
 80020c4:	bf00      	nop
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d8:	4b04      	ldr	r3, [pc, #16]	@ (80020ec <__NVIC_GetPriorityGrouping+0x18>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	f003 0307 	and.w	r3, r3, #7
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db0b      	blt.n	800211a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	4907      	ldr	r1, [pc, #28]	@ (8002128 <__NVIC_EnableIRQ+0x38>)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	095b      	lsrs	r3, r3, #5
 8002110:	2001      	movs	r0, #1
 8002112:	fa00 f202 	lsl.w	r2, r0, r2
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000e100 	.word	0xe000e100

0800212c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	6039      	str	r1, [r7, #0]
 8002136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db0a      	blt.n	8002156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	490c      	ldr	r1, [pc, #48]	@ (8002178 <__NVIC_SetPriority+0x4c>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	0112      	lsls	r2, r2, #4
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	440b      	add	r3, r1
 8002150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002154:	e00a      	b.n	800216c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4908      	ldr	r1, [pc, #32]	@ (800217c <__NVIC_SetPriority+0x50>)
 800215c:	79fb      	ldrb	r3, [r7, #7]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3b04      	subs	r3, #4
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	440b      	add	r3, r1
 800216a:	761a      	strb	r2, [r3, #24]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000e100 	.word	0xe000e100
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002180:	b480      	push	{r7}
 8002182:	b089      	sub	sp, #36	@ 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f1c3 0307 	rsb	r3, r3, #7
 800219a:	2b04      	cmp	r3, #4
 800219c:	bf28      	it	cs
 800219e:	2304      	movcs	r3, #4
 80021a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <NVIC_EncodePriority+0x30>
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	3b03      	subs	r3, #3
 80021ae:	e000      	b.n	80021b2 <NVIC_EncodePriority+0x32>
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	f04f 32ff 	mov.w	r2, #4294967295
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	401a      	ands	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c8:	f04f 31ff 	mov.w	r1, #4294967295
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	43d9      	mvns	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d8:	4313      	orrs	r3, r2
         );
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3724      	adds	r7, #36	@ 0x24
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021f8:	d301      	bcc.n	80021fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002228 <SysTick_Config+0x40>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002206:	210f      	movs	r1, #15
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f7ff ff8e 	bl	800212c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <SysTick_Config+0x40>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002216:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <SysTick_Config+0x40>)
 8002218:	2207      	movs	r2, #7
 800221a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	e000e010 	.word	0xe000e010

0800222c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ff29 	bl	800208c <__NVIC_SetPriorityGrouping>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b086      	sub	sp, #24
 8002246:	af00      	add	r7, sp, #0
 8002248:	4603      	mov	r3, r0
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002254:	f7ff ff3e 	bl	80020d4 <__NVIC_GetPriorityGrouping>
 8002258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	6978      	ldr	r0, [r7, #20]
 8002260:	f7ff ff8e 	bl	8002180 <NVIC_EncodePriority>
 8002264:	4602      	mov	r2, r0
 8002266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226a:	4611      	mov	r1, r2
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff ff5d 	bl	800212c <__NVIC_SetPriority>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff31 	bl	80020f0 <__NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffa2 	bl	80021e8 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e177      	b.n	80025bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8166 	bne.w	80025b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d005      	beq.n	8002302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d130      	bne.n	8002364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0201 	and.w	r2, r3, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b03      	cmp	r3, #3
 800236e:	d017      	beq.n	80023a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d123      	bne.n	80023f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80c0 	beq.w	80025b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b66      	ldr	r3, [pc, #408]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	4a65      	ldr	r2, [pc, #404]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002444:	6453      	str	r3, [r2, #68]	@ 0x44
 8002446:	4b63      	ldr	r3, [pc, #396]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002452:	4a61      	ldr	r2, [pc, #388]	@ (80025d8 <HAL_GPIO_Init+0x328>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_GPIO_Init+0x32c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d037      	beq.n	80024ee <HAL_GPIO_Init+0x23e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a57      	ldr	r2, [pc, #348]	@ (80025e0 <HAL_GPIO_Init+0x330>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d031      	beq.n	80024ea <HAL_GPIO_Init+0x23a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a56      	ldr	r2, [pc, #344]	@ (80025e4 <HAL_GPIO_Init+0x334>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d02b      	beq.n	80024e6 <HAL_GPIO_Init+0x236>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a55      	ldr	r2, [pc, #340]	@ (80025e8 <HAL_GPIO_Init+0x338>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d025      	beq.n	80024e2 <HAL_GPIO_Init+0x232>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a54      	ldr	r2, [pc, #336]	@ (80025ec <HAL_GPIO_Init+0x33c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <HAL_GPIO_Init+0x22e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a53      	ldr	r2, [pc, #332]	@ (80025f0 <HAL_GPIO_Init+0x340>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_GPIO_Init+0x22a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a52      	ldr	r2, [pc, #328]	@ (80025f4 <HAL_GPIO_Init+0x344>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x226>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a51      	ldr	r2, [pc, #324]	@ (80025f8 <HAL_GPIO_Init+0x348>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x222>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a50      	ldr	r2, [pc, #320]	@ (80025fc <HAL_GPIO_Init+0x34c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x21e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002600 <HAL_GPIO_Init+0x350>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x21a>
 80024c6:	2309      	movs	r3, #9
 80024c8:	e012      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ca:	230a      	movs	r3, #10
 80024cc:	e010      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ce:	2308      	movs	r3, #8
 80024d0:	e00e      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e00c      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00a      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024da:	2305      	movs	r3, #5
 80024dc:	e008      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024de:	2304      	movs	r3, #4
 80024e0:	e006      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024e2:	2303      	movs	r3, #3
 80024e4:	e004      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e002      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_GPIO_Init+0x240>
 80024ee:	2300      	movs	r3, #0
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	f002 0203 	and.w	r2, r2, #3
 80024f6:	0092      	lsls	r2, r2, #2
 80024f8:	4093      	lsls	r3, r2
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002500:	4935      	ldr	r1, [pc, #212]	@ (80025d8 <HAL_GPIO_Init+0x328>)
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	089b      	lsrs	r3, r3, #2
 8002506:	3302      	adds	r3, #2
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250e:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002532:	4a34      	ldr	r2, [pc, #208]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002538:	4b32      	ldr	r3, [pc, #200]	@ (8002604 <HAL_GPIO_Init+0x354>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800255c:	4a29      	ldr	r2, [pc, #164]	@ (8002604 <HAL_GPIO_Init+0x354>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002562:	4b28      	ldr	r3, [pc, #160]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002586:	4a1f      	ldr	r2, [pc, #124]	@ (8002604 <HAL_GPIO_Init+0x354>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258c:	4b1d      	ldr	r3, [pc, #116]	@ (8002604 <HAL_GPIO_Init+0x354>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b0:	4a14      	ldr	r2, [pc, #80]	@ (8002604 <HAL_GPIO_Init+0x354>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	f67f ae84 	bls.w	80022cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3724      	adds	r7, #36	@ 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40013800 	.word	0x40013800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40020400 	.word	0x40020400
 80025e4:	40020800 	.word	0x40020800
 80025e8:	40020c00 	.word	0x40020c00
 80025ec:	40021000 	.word	0x40021000
 80025f0:	40021400 	.word	0x40021400
 80025f4:	40021800 	.word	0x40021800
 80025f8:	40021c00 	.word	0x40021c00
 80025fc:	40022000 	.word	0x40022000
 8002600:	40022400 	.word	0x40022400
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af02      	add	r7, sp, #8
 8002640:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e101      	b.n	8002850 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f00b fe00 	bl	800e26c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2203      	movs	r2, #3
 8002670:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800267a:	d102      	bne.n	8002682 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f003 f863 	bl	8005752 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	7c1a      	ldrb	r2, [r3, #16]
 8002694:	f88d 2000 	strb.w	r2, [sp]
 8002698:	3304      	adds	r3, #4
 800269a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800269c:	f002 ff42 	bl	8005524 <USB_CoreInit>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2202      	movs	r2, #2
 80026aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0ce      	b.n	8002850 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2100      	movs	r1, #0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 f85b 	bl	8005774 <USB_SetCurrentMode>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0bf      	b.n	8002850 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e04a      	b.n	800276c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	3315      	adds	r3, #21
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3314      	adds	r3, #20
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	b298      	uxth	r0, r3
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	332e      	adds	r3, #46	@ 0x2e
 8002712:	4602      	mov	r2, r0
 8002714:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	3318      	adds	r3, #24
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4413      	add	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	331c      	adds	r3, #28
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3320      	adds	r3, #32
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002752:	7bfa      	ldrb	r2, [r7, #15]
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	4613      	mov	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4413      	add	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	3324      	adds	r3, #36	@ 0x24
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	3301      	adds	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	791b      	ldrb	r3, [r3, #4]
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	429a      	cmp	r2, r3
 8002774:	d3af      	bcc.n	80026d6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
 800277a:	e044      	b.n	8002806 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	3301      	adds	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	791b      	ldrb	r3, [r3, #4]
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	429a      	cmp	r2, r3
 800280e:	d3b5      	bcc.n	800277c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7c1a      	ldrb	r2, [r3, #16]
 8002818:	f88d 2000 	strb.w	r2, [sp]
 800281c:	3304      	adds	r3, #4
 800281e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002820:	f002 fff4 	bl	800580c <USB_DevInit>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e00c      	b.n	8002850 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f004 f83e 	bl	80068ca <USB_DevDisconnect>

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_PCD_Start+0x1c>
 8002870:	2302      	movs	r3, #2
 8002872:	e022      	b.n	80028ba <HAL_PCD_Start+0x62>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002894:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 ff45 	bl	8005730 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 ffec 	bl	8006888 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028c2:	b590      	push	{r4, r7, lr}
 80028c4:	b08d      	sub	sp, #52	@ 0x34
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 f8aa 	bl	8006a32 <USB_GetMode>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 848c 	bne.w	80031fe <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 f80e 	bl	800690c <USB_ReadInterrupts>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8482 	beq.w	80031fc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fffb 	bl	800690c <USB_ReadInterrupts>
 8002916:	4603      	mov	r3, r0
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b02      	cmp	r3, #2
 800291e:	d107      	bne.n	8002930 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f002 0202 	and.w	r2, r2, #2
 800292e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f003 ffe9 	bl	800690c <USB_ReadInterrupts>
 800293a:	4603      	mov	r3, r0
 800293c:	f003 0310 	and.w	r3, r3, #16
 8002940:	2b10      	cmp	r3, #16
 8002942:	d161      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0210 	bic.w	r2, r2, #16
 8002952:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	3304      	adds	r3, #4
 8002972:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	0c5b      	lsrs	r3, r3, #17
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	2b02      	cmp	r3, #2
 800297e:	d124      	bne.n	80029ca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d035      	beq.n	80029f8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	091b      	lsrs	r3, r3, #4
 8002994:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002996:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	6a38      	ldr	r0, [r7, #32]
 80029a0:	f003 fe20 	bl	80065e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b0:	441a      	add	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029c2:	441a      	add	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	615a      	str	r2, [r3, #20]
 80029c8:	e016      	b.n	80029f8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	0c5b      	lsrs	r3, r3, #17
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d110      	bne.n	80029f8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029dc:	2208      	movs	r2, #8
 80029de:	4619      	mov	r1, r3
 80029e0:	6a38      	ldr	r0, [r7, #32]
 80029e2:	f003 fdff 	bl	80065e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029f2:	441a      	add	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0210 	orr.w	r2, r2, #16
 8002a06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 ff7d 	bl	800690c <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002a1c:	f040 80a7 	bne.w	8002b6e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 ff82 	bl	8006932 <USB_ReadDevAllOutEpInterrupt>
 8002a2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002a30:	e099      	b.n	8002b66 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 808e 	beq.w	8002b5a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 ffa6 	bl	800699a <USB_ReadDevOutEPInterrupt>
 8002a4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00c      	beq.n	8002a74 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a66:	461a      	mov	r2, r3
 8002a68:	2301      	movs	r3, #1
 8002a6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fed0 	bl	8003814 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00c      	beq.n	8002a98 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2308      	movs	r3, #8
 8002a8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 ffa6 	bl	80039e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d030      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac6:	2b80      	cmp	r3, #128	@ 0x80
 8002ac8:	d109      	bne.n	8002ade <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ad8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002adc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d108      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2200      	movs	r2, #0
 8002b00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f00b fcb5 	bl	800e478 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b36:	461a      	mov	r2, r3
 8002b38:	2320      	movs	r3, #32
 8002b3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b52:	461a      	mov	r2, r3
 8002b54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b62:	085b      	lsrs	r3, r3, #1
 8002b64:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f47f af62 	bne.w	8002a32 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f003 feca 	bl	800690c <USB_ReadInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b82:	f040 80db 	bne.w	8002d3c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f003 feeb 	bl	8006966 <USB_ReadDevAllInEpInterrupt>
 8002b90:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b96:	e0cd      	b.n	8002d34 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80c2 	beq.w	8002d28 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	4611      	mov	r1, r2
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 ff11 	bl	80069d6 <USB_ReadDevInEPInterrupt>
 8002bb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d057      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69f9      	ldr	r1, [r7, #28]
 8002bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002be0:	4013      	ands	r3, r2
 8002be2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	015a      	lsls	r2, r3, #5
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	799b      	ldrb	r3, [r3, #6]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d132      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3320      	adds	r3, #32
 8002c0e:	6819      	ldr	r1, [r3, #0]
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4403      	add	r3, r0
 8002c1e:	331c      	adds	r3, #28
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4419      	add	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4403      	add	r3, r0
 8002c32:	3320      	adds	r3, #32
 8002c34:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d113      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x3a2>
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3324      	adds	r3, #36	@ 0x24
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2101      	movs	r1, #1
 8002c60:	f003 ff18 	bl	8006a94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f00b fb7f 	bl	800e36e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c86:	461a      	mov	r2, r3
 8002c88:	2308      	movs	r3, #8
 8002c8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d008      	beq.n	8002ca8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d008      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	015a      	lsls	r2, r3, #5
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4413      	add	r3, r2
 8002cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	2340      	movs	r3, #64	@ 0x40
 8002cc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d023      	beq.n	8002d16 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002cce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cd0:	6a38      	ldr	r0, [r7, #32]
 8002cd2:	f002 feff 	bl	8005ad4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd8:	4613      	mov	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	3310      	adds	r3, #16
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	78db      	ldrb	r3, [r3, #3]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d108      	bne.n	8002d04 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f00b fbcc 	bl	800e49c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d10:	461a      	mov	r2, r3
 8002d12:	2302      	movs	r3, #2
 8002d14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fcea 	bl	80036fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d30:	085b      	lsrs	r3, r3, #1
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f47f af2e 	bne.w	8002b98 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fde3 	bl	800690c <USB_ReadInterrupts>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d50:	d122      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d60:	f023 0301 	bic.w	r3, r3, #1
 8002d64:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d108      	bne.n	8002d82 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d78:	2100      	movs	r1, #0
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fed0 	bl	8003b20 <HAL_PCDEx_LPM_Callback>
 8002d80:	e002      	b.n	8002d88 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f00b fb6a 	bl	800e45c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f003 fdb5 	bl	800690c <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002dac:	d112      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d102      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f00b fb26 	bl	800e410 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002dd2:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fd97 	bl	800690c <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de8:	f040 80b7 	bne.w	8002f5a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2110      	movs	r1, #16
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fe64 	bl	8005ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e10:	e046      	b.n	8002ea0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e24:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e36:	0151      	lsls	r1, r2, #5
 8002e38:	69fa      	ldr	r2, [r7, #28]
 8002e3a:	440a      	add	r2, r1
 8002e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e40:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e52:	461a      	mov	r2, r3
 8002e54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e58:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6a:	0151      	lsls	r1, r2, #5
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	440a      	add	r2, r1
 8002e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e74:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e78:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7c:	015a      	lsls	r2, r3, #5
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e8a:	0151      	lsls	r1, r2, #5
 8002e8c:	69fa      	ldr	r2, [r7, #28]
 8002e8e:	440a      	add	r2, r1
 8002e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e98:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	791b      	ldrb	r3, [r3, #4]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d3b2      	bcc.n	8002e12 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eba:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ebe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7bdb      	ldrb	r3, [r3, #15]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d016      	beq.n	8002ef6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ed8:	f043 030b 	orr.w	r3, r3, #11
 8002edc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002eee:	f043 030b 	orr.w	r3, r3, #11
 8002ef2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef4:	e015      	b.n	8002f22 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	69fa      	ldr	r2, [r7, #28]
 8002f00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f04:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002f08:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002f0c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f1c:	f043 030b 	orr.w	r3, r3, #11
 8002f20:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f30:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f34:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6818      	ldr	r0, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f44:	461a      	mov	r2, r3
 8002f46:	f003 fda5 	bl	8006a94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f003 fcd4 	bl	800690c <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f6e:	d123      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fd6a 	bl	8006a4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 fe21 	bl	8005bc6 <USB_GetDevSpeed>
 8002f84:	4603      	mov	r3, r0
 8002f86:	461a      	mov	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681c      	ldr	r4, [r3, #0]
 8002f90:	f001 fa36 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8002f94:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f002 fb25 	bl	80055ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f00b fa0b 	bl	800e3be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002fb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 fca5 	bl	800690c <USB_ReadInterrupts>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d10a      	bne.n	8002fe2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f00b f9e8 	bl	800e3a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f002 0208 	and.w	r2, r2, #8
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f003 fc90 	bl	800690c <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff2:	2b80      	cmp	r3, #128	@ 0x80
 8002ff4:	d123      	bne.n	800303e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003002:	2301      	movs	r3, #1
 8003004:	627b      	str	r3, [r7, #36]	@ 0x24
 8003006:	e014      	b.n	8003032 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d105      	bne.n	800302c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	b2db      	uxtb	r3, r3
 8003024:	4619      	mov	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fb0a 	bl	8003640 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	3301      	adds	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	791b      	ldrb	r3, [r3, #4]
 8003036:	461a      	mov	r2, r3
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	4293      	cmp	r3, r2
 800303c:	d3e4      	bcc.n	8003008 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fc62 	bl	800690c <USB_ReadInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800304e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003052:	d13c      	bne.n	80030ce <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	e02b      	b.n	80030b2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	015a      	lsls	r2, r3, #5
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3318      	adds	r3, #24
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d115      	bne.n	80030ac <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003080:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	da12      	bge.n	80030ac <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	3317      	adds	r3, #23
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	b2db      	uxtb	r3, r3
 800309e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4619      	mov	r1, r3
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 faca 	bl	8003640 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	3301      	adds	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d3cd      	bcc.n	800305a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80030cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fc1a 	bl	800690c <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030e2:	d156      	bne.n	8003192 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030e4:	2301      	movs	r3, #1
 80030e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e8:	e045      	b.n	8003176 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fe:	4613      	mov	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d12e      	bne.n	8003170 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003112:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003114:	2b00      	cmp	r3, #0
 8003116:	da2b      	bge.n	8003170 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	0c1a      	lsrs	r2, r3, #16
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003122:	4053      	eors	r3, r2
 8003124:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003128:	2b00      	cmp	r3, #0
 800312a:	d121      	bne.n	8003170 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800313e:	2201      	movs	r2, #1
 8003140:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003168:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800316c:	6053      	str	r3, [r2, #4]
            break;
 800316e:	e008      	b.n	8003182 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	3301      	adds	r3, #1
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	791b      	ldrb	r3, [r3, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	4293      	cmp	r3, r2
 8003180:	d3b3      	bcc.n	80030ea <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695a      	ldr	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f003 fbb8 	bl	800690c <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d10a      	bne.n	80031be <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f00b f989 	bl	800e4c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695a      	ldr	r2, [r3, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 fba2 	bl	800690c <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d115      	bne.n	80031fe <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f00b f979 	bl	800e4dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	e000      	b.n	80031fe <HAL_PCD_IRQHandler+0x93c>
      return;
 80031fc:	bf00      	nop
    }
  }
}
 80031fe:	3734      	adds	r7, #52	@ 0x34
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}

08003204 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_PCD_SetAddress+0x1a>
 800321a:	2302      	movs	r3, #2
 800321c:	e012      	b.n	8003244 <HAL_PCD_SetAddress+0x40>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f003 fb01 	bl	800683c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	4608      	mov	r0, r1
 8003256:	4611      	mov	r1, r2
 8003258:	461a      	mov	r2, r3
 800325a:	4603      	mov	r3, r0
 800325c:	70fb      	strb	r3, [r7, #3]
 800325e:	460b      	mov	r3, r1
 8003260:	803b      	strh	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800326a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326e:	2b00      	cmp	r3, #0
 8003270:	da0f      	bge.n	8003292 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 020f 	and.w	r2, r3, #15
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	3310      	adds	r3, #16
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	3304      	adds	r3, #4
 8003288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	705a      	strb	r2, [r3, #1]
 8003290:	e00f      	b.n	80032b2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032be:	883b      	ldrh	r3, [r7, #0]
 80032c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	78ba      	ldrb	r2, [r7, #2]
 80032cc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032e0:	78bb      	ldrb	r3, [r7, #2]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d102      	bne.n	80032ec <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_PCD_EP_Open+0xae>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e00e      	b.n	8003318 <HAL_PCD_EP_Open+0xcc>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68f9      	ldr	r1, [r7, #12]
 8003308:	4618      	mov	r0, r3
 800330a:	f002 fc81 	bl	8005c10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003316:	7afb      	ldrb	r3, [r7, #11]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800332c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003330:	2b00      	cmp	r3, #0
 8003332:	da0f      	bge.n	8003354 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	3310      	adds	r3, #16
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	705a      	strb	r2, [r3, #1]
 8003352:	e00f      	b.n	8003374 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	3304      	adds	r3, #4
 800336c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_PCD_EP_Close+0x6e>
 800338a:	2302      	movs	r3, #2
 800338c:	e00e      	b.n	80033ac <HAL_PCD_EP_Close+0x8c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68f9      	ldr	r1, [r7, #12]
 800339c:	4618      	mov	r0, r3
 800339e:	f002 fcbf 	bl	8005d20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	460b      	mov	r3, r1
 80033c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c4:	7afb      	ldrb	r3, [r7, #11]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	4613      	mov	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	3304      	adds	r3, #4
 80033dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033f6:	7afb      	ldrb	r3, [r7, #11]
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	799b      	ldrb	r3, [r3, #6]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d102      	bne.n	8003410 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	799b      	ldrb	r3, [r3, #6]
 8003418:	461a      	mov	r2, r3
 800341a:	6979      	ldr	r1, [r7, #20]
 800341c:	f002 fd5c 	bl	8005ed8 <USB_EPStartXfer>

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	f003 020f 	and.w	r2, r3, #15
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800344c:	681b      	ldr	r3, [r3, #0]
}
 800344e:	4618      	mov	r0, r3
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b086      	sub	sp, #24
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	460b      	mov	r3, r1
 8003468:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346a:	7afb      	ldrb	r3, [r7, #11]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	3310      	adds	r3, #16
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	3304      	adds	r3, #4
 8003480:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2200      	movs	r2, #0
 8003492:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2201      	movs	r2, #1
 8003498:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800349a:	7afb      	ldrb	r3, [r7, #11]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	799b      	ldrb	r3, [r3, #6]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d102      	bne.n	80034b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	799b      	ldrb	r3, [r3, #6]
 80034bc:	461a      	mov	r2, r3
 80034be:	6979      	ldr	r1, [r7, #20]
 80034c0:	f002 fd0a 	bl	8005ed8 <USB_EPStartXfer>

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b084      	sub	sp, #16
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	f003 030f 	and.w	r3, r3, #15
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	7912      	ldrb	r2, [r2, #4]
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d901      	bls.n	80034ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e04f      	b.n	800358c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da0f      	bge.n	8003514 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	f003 020f 	and.w	r2, r3, #15
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	3310      	adds	r3, #16
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	3304      	adds	r3, #4
 800350a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	705a      	strb	r2, [r3, #1]
 8003512:	e00d      	b.n	8003530 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	4413      	add	r3, r2
 8003526:	3304      	adds	r3, #4
 8003528:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	f003 030f 	and.w	r3, r3, #15
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_PCD_EP_SetStall+0x82>
 800354c:	2302      	movs	r3, #2
 800354e:	e01d      	b.n	800358c <HAL_PCD_EP_SetStall+0xbe>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68f9      	ldr	r1, [r7, #12]
 800355e:	4618      	mov	r0, r3
 8003560:	f003 f898 	bl	8006694 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7999      	ldrb	r1, [r3, #6]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800357c:	461a      	mov	r2, r3
 800357e:	f003 fa89 	bl	8006a94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	7912      	ldrb	r2, [r2, #4]
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e042      	b.n	8003638 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	da0f      	bge.n	80035da <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3310      	adds	r3, #16
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	3304      	adds	r3, #4
 80035d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	705a      	strb	r2, [r3, #1]
 80035d8:	e00f      	b.n	80035fa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	f003 020f 	and.w	r2, r3, #15
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_PCD_EP_ClrStall+0x86>
 8003616:	2302      	movs	r3, #2
 8003618:	e00e      	b.n	8003638 <HAL_PCD_EP_ClrStall+0xa4>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68f9      	ldr	r1, [r7, #12]
 8003628:	4618      	mov	r0, r3
 800362a:	f003 f8a1 	bl	8006770 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800364c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003650:	2b00      	cmp	r3, #0
 8003652:	da0c      	bge.n	800366e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	f003 020f 	and.w	r2, r3, #15
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	3310      	adds	r3, #16
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	4413      	add	r3, r2
 8003668:	3304      	adds	r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e00c      	b.n	8003688 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68f9      	ldr	r1, [r7, #12]
 800368e:	4618      	mov	r0, r3
 8003690:	f002 fec0 	bl	8006414 <USB_EPStopXfer>
 8003694:	4603      	mov	r3, r0
 8003696:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003698:	7afb      	ldrb	r3, [r7, #11]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_PCD_EP_Flush+0x1a>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e01b      	b.n	80036f4 <HAL_PCD_EP_Flush+0x52>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if ((ep_addr & 0x80U) == 0x80U)
 80036c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	da09      	bge.n	80036e0 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	4619      	mov	r1, r3
 80036d8:	4610      	mov	r0, r2
 80036da:	f002 f9fb 	bl	8005ad4 <USB_FlushTxFifo>
 80036de:	e004      	b.n	80036ea <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f002 fa27 	bl	8005b38 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	@ 0x28
 8003700:	af02      	add	r7, sp, #8
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	3310      	adds	r3, #16
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	429a      	cmp	r2, r3
 800372e:	d901      	bls.n	8003734 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e06b      	b.n	800380c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691a      	ldr	r2, [r3, #16]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	429a      	cmp	r2, r3
 8003748:	d902      	bls.n	8003750 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	3303      	adds	r3, #3
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003758:	e02a      	b.n	80037b0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	429a      	cmp	r2, r3
 800376e:	d902      	bls.n	8003776 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3303      	adds	r3, #3
 800377a:	089b      	lsrs	r3, r3, #2
 800377c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68d9      	ldr	r1, [r3, #12]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	b2da      	uxtb	r2, r3
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	4603      	mov	r3, r0
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f002 fee8 	bl	8006568 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68da      	ldr	r2, [r3, #12]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	441a      	add	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d809      	bhi.n	80037da <PCD_WriteEmptyTxFifo+0xde>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d203      	bcs.n	80037da <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1bf      	bne.n	800375a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d811      	bhi.n	800380a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f003 030f 	and.w	r3, r3, #15
 80037ec:	2201      	movs	r2, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	43db      	mvns	r3, r3
 8003800:	6939      	ldr	r1, [r7, #16]
 8003802:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003806:	4013      	ands	r3, r2
 8003808:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3720      	adds	r7, #32
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	333c      	adds	r3, #60	@ 0x3c
 800382c:	3304      	adds	r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	799b      	ldrb	r3, [r3, #6]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d17b      	bne.n	8003942 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4a61      	ldr	r2, [pc, #388]	@ (80039dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	f240 80b9 	bls.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80b3 	beq.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387c:	6093      	str	r3, [r2, #8]
 800387e:	e0a7      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	2320      	movs	r3, #32
 800389a:	6093      	str	r3, [r2, #8]
 800389c:	e098      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f040 8093 	bne.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	@ (80039dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d90f      	bls.n	80038d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ce:	6093      	str	r3, [r2, #8]
 80038d0:	e07e      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d114      	bne.n	8003934 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800391c:	461a      	mov	r2, r3
 800391e:	2101      	movs	r1, #1
 8003920:	f003 f8b8 	bl	8006a94 <USB_EP0_OutStart>
 8003924:	e006      	b.n	8003934 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f00a fcfc 	bl	800e338 <HAL_PCD_DataOutStageCallback>
 8003940:	e046      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a26      	ldr	r2, [pc, #152]	@ (80039e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d124      	bne.n	8003994 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003966:	6093      	str	r3, [r2, #8]
 8003968:	e032      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	2320      	movs	r3, #32
 8003984:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f00a fcd3 	bl	800e338 <HAL_PCD_DataOutStageCallback>
 8003992:	e01d      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d114      	bne.n	80039c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039bc:	461a      	mov	r2, r3
 80039be:	2100      	movs	r1, #0
 80039c0:	f003 f868 	bl	8006a94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f00a fcb4 	bl	800e338 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	4f54300a 	.word	0x4f54300a
 80039e0:	4f54310a 	.word	0x4f54310a

080039e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	333c      	adds	r3, #60	@ 0x3c
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a15      	ldr	r2, [pc, #84]	@ (8003a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d90e      	bls.n	8003a38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f00a fc6b 	bl	800e314 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d90c      	bls.n	8003a60 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	799b      	ldrb	r3, [r3, #6]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d108      	bne.n	8003a60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f003 f81a 	bl	8006a94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	4f54300a 	.word	0x4f54300a

08003a70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a8e:	883b      	ldrh	r3, [r7, #0]
 8003a90:	0419      	lsls	r1, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a9c:	e028      	b.n	8003af0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e00d      	b.n	8003ace <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3340      	adds	r3, #64	@ 0x40
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3ec      	bcc.n	8003ab2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ad8:	883b      	ldrh	r3, [r7, #0]
 8003ada:	0418      	lsls	r0, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	4302      	orrs	r2, r0
 8003ae8:	3340      	adds	r3, #64	@ 0x40
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e267      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d075      	beq.n	8003c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b56:	4b88      	ldr	r3, [pc, #544]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d00c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b85      	ldr	r3, [pc, #532]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d112      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6e:	4b82      	ldr	r3, [pc, #520]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05b      	beq.n	8003c40 <HAL_RCC_OscConfig+0x108>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d157      	bne.n	8003c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e242      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCC_OscConfig+0x74>
 8003b9e:	4b76      	ldr	r3, [pc, #472]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a75      	ldr	r2, [pc, #468]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e01d      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x98>
 8003bb6:	4b70      	ldr	r3, [pc, #448]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6f      	ldr	r2, [pc, #444]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6c      	ldr	r2, [pc, #432]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bd0:	4b69      	ldr	r3, [pc, #420]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a68      	ldr	r2, [pc, #416]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b66      	ldr	r3, [pc, #408]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fa1c 	bl	800202c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fa18 	bl	800202c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	@ 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e207      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xc0>
 8003c16:	e014      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fe fa08 	bl	800202c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fe fa04 	bl	800202c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	@ 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1f3      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	4b51      	ldr	r3, [pc, #324]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0xe8>
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d063      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b47      	ldr	r3, [pc, #284]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d11c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b44      	ldr	r3, [pc, #272]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d116      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	4b41      	ldr	r3, [pc, #260]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1c7      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4937      	ldr	r1, [pc, #220]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	e03a      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca8:	4b34      	ldr	r3, [pc, #208]	@ (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fe f9bd 	bl	800202c <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cb6:	f7fe f9b9 	bl	800202c <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1a8      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b28      	ldr	r3, [pc, #160]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4925      	ldr	r1, [pc, #148]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cea:	4b24      	ldr	r3, [pc, #144]	@ (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f99c 	bl	800202c <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf8:	f7fe f998 	bl	800202c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e187      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d036      	beq.n	8003d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2a:	4b15      	ldr	r3, [pc, #84]	@ (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fe f97c 	bl	800202c <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fe f978 	bl	800202c <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e167      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x200>
 8003d56:	e01b      	b.n	8003d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d58:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fe f965 	bl	800202c <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	e00e      	b.n	8003d84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d66:	f7fe f961 	bl	800202c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d907      	bls.n	8003d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e150      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	42470000 	.word	0x42470000
 8003d80:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b88      	ldr	r3, [pc, #544]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ea      	bne.n	8003d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8097 	beq.w	8003ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b81      	ldr	r3, [pc, #516]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dce:	4b77      	ldr	r3, [pc, #476]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dda:	4b74      	ldr	r3, [pc, #464]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a73      	ldr	r2, [pc, #460]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de6:	f7fe f921 	bl	800202c <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dee:	f7fe f91d 	bl	800202c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e10c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	4b6a      	ldr	r3, [pc, #424]	@ (8003fac <HAL_RCC_OscConfig+0x474>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2ea>
 8003e14:	4b64      	ldr	r3, [pc, #400]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e18:	4a63      	ldr	r2, [pc, #396]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e20:	e01c      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x30c>
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e36:	4b5c      	ldr	r3, [pc, #368]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e44:	4b58      	ldr	r3, [pc, #352]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e48:	4a57      	ldr	r2, [pc, #348]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e50:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	4a54      	ldr	r2, [pc, #336]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d015      	beq.n	8003e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe f8e2 	bl	800202c <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fe f8de 	bl	800202c <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0cb      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	4b49      	ldr	r3, [pc, #292]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ee      	beq.n	8003e6c <HAL_RCC_OscConfig+0x334>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fe f8cc 	bl	800202c <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fe f8c8 	bl	800202c <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0b5      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eae:	4b3e      	ldr	r3, [pc, #248]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec0:	4b39      	ldr	r3, [pc, #228]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	4a38      	ldr	r2, [pc, #224]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a1 	beq.w	8004018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed6:	4b34      	ldr	r3, [pc, #208]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d05c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d141      	bne.n	8003f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b31      	ldr	r3, [pc, #196]	@ (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fe f89c 	bl	800202c <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe f898 	bl	800202c <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e087      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	491b      	ldr	r1, [pc, #108]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b1b      	ldr	r3, [pc, #108]	@ (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fe f871 	bl	800202c <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fe f86d 	bl	800202c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e05c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f60:	4b11      	ldr	r3, [pc, #68]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x416>
 8003f6c:	e054      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b10      	ldr	r3, [pc, #64]	@ (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fe f85a 	bl	800202c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fe f856 	bl	800202c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e045      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x444>
 8003f9a:	e03d      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e038      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004024 <HAL_RCC_OscConfig+0x4ec>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d028      	beq.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d121      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d11a      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d111      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0cc      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b68      	ldr	r3, [pc, #416]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d90c      	bls.n	8004064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b65      	ldr	r3, [pc, #404]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b63      	ldr	r3, [pc, #396]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0b8      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800407c:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a58      	ldr	r2, [pc, #352]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004086:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004094:	4b53      	ldr	r3, [pc, #332]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a52      	ldr	r2, [pc, #328]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800409e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b50      	ldr	r3, [pc, #320]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	494d      	ldr	r1, [pc, #308]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d044      	beq.n	8004148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b47      	ldr	r3, [pc, #284]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d119      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b3f      	ldr	r3, [pc, #252]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e06f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3b      	ldr	r3, [pc, #236]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e067      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b37      	ldr	r3, [pc, #220]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4934      	ldr	r1, [pc, #208]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fd ff88 	bl	800202c <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fd ff84 	bl	800202c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e04f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2b      	ldr	r3, [pc, #172]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d20c      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b22      	ldr	r3, [pc, #136]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b20      	ldr	r3, [pc, #128]	@ (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e032      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4916      	ldr	r1, [pc, #88]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419a:	4b12      	ldr	r3, [pc, #72]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	490e      	ldr	r1, [pc, #56]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ae:	f000 f821 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b0b      	ldr	r3, [pc, #44]	@ (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	490a      	ldr	r1, [pc, #40]	@ (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	5ccb      	ldrb	r3, [r1, r3]
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	4a09      	ldr	r2, [pc, #36]	@ (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041ca:	4b09      	ldr	r3, [pc, #36]	@ (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd fee8 	bl	8001fa4 <HAL_InitTick>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023c00 	.word	0x40023c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	0800f464 	.word	0x0800f464
 80041ec:	20000004 	.word	0x20000004
 80041f0:	20000008 	.word	0x20000008

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f8:	b094      	sub	sp, #80	@ 0x50
 80041fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420c:	4b79      	ldr	r3, [pc, #484]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d00d      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x40>
 8004218:	2b08      	cmp	r3, #8
 800421a:	f200 80e1 	bhi.w	80043e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x34>
 8004222:	2b04      	cmp	r3, #4
 8004224:	d003      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0x3a>
 8004226:	e0db      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b73      	ldr	r3, [pc, #460]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800422a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800422c:	e0db      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800422e:	4b73      	ldr	r3, [pc, #460]	@ (80043fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004230:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004232:	e0d8      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004234:	4b6f      	ldr	r3, [pc, #444]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800423c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800423e:	4b6d      	ldr	r3, [pc, #436]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d063      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424a:	4b6a      	ldr	r3, [pc, #424]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	2200      	movs	r2, #0
 8004252:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004254:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	633b      	str	r3, [r7, #48]	@ 0x30
 800425e:	2300      	movs	r3, #0
 8004260:	637b      	str	r3, [r7, #52]	@ 0x34
 8004262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004266:	4622      	mov	r2, r4
 8004268:	462b      	mov	r3, r5
 800426a:	f04f 0000 	mov.w	r0, #0
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	0159      	lsls	r1, r3, #5
 8004274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004278:	0150      	lsls	r0, r2, #5
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4621      	mov	r1, r4
 8004280:	1a51      	subs	r1, r2, r1
 8004282:	6139      	str	r1, [r7, #16]
 8004284:	4629      	mov	r1, r5
 8004286:	eb63 0301 	sbc.w	r3, r3, r1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004298:	4659      	mov	r1, fp
 800429a:	018b      	lsls	r3, r1, #6
 800429c:	4651      	mov	r1, sl
 800429e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a2:	4651      	mov	r1, sl
 80042a4:	018a      	lsls	r2, r1, #6
 80042a6:	4651      	mov	r1, sl
 80042a8:	ebb2 0801 	subs.w	r8, r2, r1
 80042ac:	4659      	mov	r1, fp
 80042ae:	eb63 0901 	sbc.w	r9, r3, r1
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c6:	4690      	mov	r8, r2
 80042c8:	4699      	mov	r9, r3
 80042ca:	4623      	mov	r3, r4
 80042cc:	eb18 0303 	adds.w	r3, r8, r3
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	462b      	mov	r3, r5
 80042d4:	eb49 0303 	adc.w	r3, r9, r3
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042e6:	4629      	mov	r1, r5
 80042e8:	024b      	lsls	r3, r1, #9
 80042ea:	4621      	mov	r1, r4
 80042ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f0:	4621      	mov	r1, r4
 80042f2:	024a      	lsls	r2, r1, #9
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042fa:	2200      	movs	r2, #0
 80042fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004304:	f7fc faca 	bl	800089c <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4613      	mov	r3, r2
 800430e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004310:	e058      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004312:	4b38      	ldr	r3, [pc, #224]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	2200      	movs	r2, #0
 800431a:	4618      	mov	r0, r3
 800431c:	4611      	mov	r1, r2
 800431e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
 8004328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	f04f 0000 	mov.w	r0, #0
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	0159      	lsls	r1, r3, #5
 800433a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433e:	0150      	lsls	r0, r2, #5
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4641      	mov	r1, r8
 8004346:	ebb2 0a01 	subs.w	sl, r2, r1
 800434a:	4649      	mov	r1, r9
 800434c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800435c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004364:	ebb2 040a 	subs.w	r4, r2, sl
 8004368:	eb63 050b 	sbc.w	r5, r3, fp
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	00eb      	lsls	r3, r5, #3
 8004376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	4614      	mov	r4, r2
 800437e:	461d      	mov	r5, r3
 8004380:	4643      	mov	r3, r8
 8004382:	18e3      	adds	r3, r4, r3
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	464b      	mov	r3, r9
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800439a:	4629      	mov	r1, r5
 800439c:	028b      	lsls	r3, r1, #10
 800439e:	4621      	mov	r1, r4
 80043a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a4:	4621      	mov	r1, r4
 80043a6:	028a      	lsls	r2, r1, #10
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ae:	2200      	movs	r2, #0
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	61fa      	str	r2, [r7, #28]
 80043b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b8:	f7fc fa70 	bl	800089c <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4613      	mov	r3, r2
 80043c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	3301      	adds	r3, #1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80043d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043de:	e002      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3750      	adds	r7, #80	@ 0x50
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	@ (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000004 	.word	0x20000004

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4903      	ldr	r1, [pc, #12]	@ (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	0800f474 	.word	0x0800f474

08004440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004444:	f7ff ffdc 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0b5b      	lsrs	r3, r3, #13
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4903      	ldr	r1, [pc, #12]	@ (8004464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	0800f474 	.word	0x0800f474

08004468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e07b      	b.n	8004572 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	d108      	bne.n	8004494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800448a:	d009      	beq.n	80044a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	61da      	str	r2, [r3, #28]
 8004492:	e005      	b.n	80044a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd fbc0 	bl	8001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800451a:	431a      	orrs	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004524:	ea42 0103 	orr.w	r1, r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	0c1b      	lsrs	r3, r3, #16
 800453e:	f003 0104 	and.w	r1, r3, #4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	f003 0210 	and.w	r2, r3, #16
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	69da      	ldr	r2, [r3, #28]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b088      	sub	sp, #32
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458a:	f7fd fd4f 	bl	800202c <HAL_GetTick>
 800458e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d001      	beq.n	80045a4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
 80045a2:	e12a      	b.n	80047fa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_SPI_Transmit+0x36>
 80045aa:	88fb      	ldrh	r3, [r7, #6]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e122      	b.n	80047fa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_SPI_Transmit+0x48>
 80045be:	2302      	movs	r3, #2
 80045c0:	e11b      	b.n	80047fa <HAL_SPI_Transmit+0x280>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2203      	movs	r2, #3
 80045ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004610:	d10f      	bne.n	8004632 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004620:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004630:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800463c:	2b40      	cmp	r3, #64	@ 0x40
 800463e:	d007      	beq.n	8004650 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800464e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004658:	d152      	bne.n	8004700 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_SPI_Transmit+0xee>
 8004662:	8b7b      	ldrh	r3, [r7, #26]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d145      	bne.n	80046f4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800468c:	e032      	b.n	80046f4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b02      	cmp	r3, #2
 800469a:	d112      	bne.n	80046c2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a0:	881a      	ldrh	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ac:	1c9a      	adds	r2, r3, #2
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046c0:	e018      	b.n	80046f4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c2:	f7fd fcb3 	bl	800202c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d803      	bhi.n	80046da <HAL_SPI_Transmit+0x160>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d8:	d102      	bne.n	80046e0 <HAL_SPI_Transmit+0x166>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e082      	b.n	80047fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1c7      	bne.n	800468e <HAL_SPI_Transmit+0x114>
 80046fe:	e053      	b.n	80047a8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <HAL_SPI_Transmit+0x194>
 8004708:	8b7b      	ldrh	r3, [r7, #26]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d147      	bne.n	800479e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	330c      	adds	r3, #12
 8004718:	7812      	ldrb	r2, [r2, #0]
 800471a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004734:	e033      	b.n	800479e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b02      	cmp	r3, #2
 8004742:	d113      	bne.n	800476c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	86da      	strh	r2, [r3, #54]	@ 0x36
 800476a:	e018      	b.n	800479e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800476c:	f7fd fc5e 	bl	800202c <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d803      	bhi.n	8004784 <HAL_SPI_Transmit+0x20a>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004782:	d102      	bne.n	800478a <HAL_SPI_Transmit+0x210>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e02d      	b.n	80047fa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1c6      	bne.n	8004736 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fa59 	bl	8004c64 <SPI_EndRxTxTransaction>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2220      	movs	r2, #32
 80047bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80047f8:	2300      	movs	r3, #0
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b08a      	sub	sp, #40	@ 0x28
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004810:	2301      	movs	r3, #1
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004814:	f7fd fc0a 	bl	800202c <HAL_GetTick>
 8004818:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004820:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800482c:	7ffb      	ldrb	r3, [r7, #31]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d00c      	beq.n	800484c <HAL_SPI_TransmitReceive+0x4a>
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004838:	d106      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <HAL_SPI_TransmitReceive+0x46>
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d001      	beq.n	800484c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
 800484a:	e17f      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_SPI_TransmitReceive+0x5c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_TransmitReceive+0x5c>
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e174      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_SPI_TransmitReceive+0x6e>
 800486c:	2302      	movs	r3, #2
 800486e:	e16d      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x34a>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b04      	cmp	r3, #4
 8004882:	d003      	beq.n	800488c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2205      	movs	r2, #5
 8004888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	887a      	ldrh	r2, [r7, #2]
 80048a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	887a      	ldrh	r2, [r7, #2]
 80048ae:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	887a      	ldrh	r2, [r7, #2]
 80048b4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048cc:	2b40      	cmp	r3, #64	@ 0x40
 80048ce:	d007      	beq.n	80048e0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048e8:	d17e      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0xf6>
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d16c      	bne.n	80049d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fc:	881a      	ldrh	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491c:	e059      	b.n	80049d2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b02      	cmp	r3, #2
 800492a:	d11b      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x162>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x162>
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	2b01      	cmp	r3, #1
 800493a:	d113      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b01      	cmp	r3, #1
 8004970:	d119      	bne.n	80049a6 <HAL_SPI_TransmitReceive+0x1a4>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004976:	b29b      	uxth	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d014      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68da      	ldr	r2, [r3, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004986:	b292      	uxth	r2, r2
 8004988:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	1c9a      	adds	r2, r3, #2
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a2:	2301      	movs	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049a6:	f7fd fb41 	bl	800202c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d80d      	bhi.n	80049d2 <HAL_SPI_TransmitReceive+0x1d0>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d009      	beq.n	80049d2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e0bc      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1a0      	bne.n	800491e <HAL_SPI_TransmitReceive+0x11c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d19b      	bne.n	800491e <HAL_SPI_TransmitReceive+0x11c>
 80049e6:	e082      	b.n	8004aee <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <HAL_SPI_TransmitReceive+0x1f4>
 80049f0:	8afb      	ldrh	r3, [r7, #22]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d171      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a1c:	e05d      	b.n	8004ada <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d11c      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x264>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <HAL_SPI_TransmitReceive+0x264>
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d114      	bne.n	8004a66 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d119      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x2a6>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d014      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004aa8:	f7fd fac0 	bl	800202c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6a3b      	ldr	r3, [r7, #32]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d803      	bhi.n	8004ac0 <HAL_SPI_TransmitReceive+0x2be>
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abe:	d102      	bne.n	8004ac6 <HAL_SPI_TransmitReceive+0x2c4>
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e038      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d19c      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x21c>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d197      	bne.n	8004a1e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f8b6 	bl	8004c64 <SPI_EndRxTxTransaction>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e01d      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10a      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	613b      	str	r3, [r7, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	613b      	str	r3, [r7, #16]
 8004b2c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
  }
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	@ 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b64:	f7fd fa62 	bl	800202c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b74:	f7fd fa5a 	bl	800202c <HAL_GetTick>
 8004b78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7a:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	015b      	lsls	r3, r3, #5
 8004b80:	0d1b      	lsrs	r3, r3, #20
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	fb02 f303 	mul.w	r3, r2, r3
 8004b88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8a:	e055      	b.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d051      	beq.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b94:	f7fd fa4a 	bl	800202c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d902      	bls.n	8004baa <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d13d      	bne.n	8004c26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bc2:	d111      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bcc:	d004      	beq.n	8004bd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd6:	d107      	bne.n	8004be8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bf0:	d10f      	bne.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e018      	b.n	8004c58 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d102      	bne.n	8004c32 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e002      	b.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d19a      	bne.n	8004b8c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000004 	.word	0x20000004

08004c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2201      	movs	r2, #1
 8004c78:	2102      	movs	r1, #2
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff ff6a 	bl	8004b54 <SPI_WaitFlagStateUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d007      	beq.n	8004c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e032      	b.n	8004cfc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c96:	4b1b      	ldr	r3, [pc, #108]	@ (8004d04 <SPI_EndRxTxTransaction+0xa0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004d08 <SPI_EndRxTxTransaction+0xa4>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	0d5b      	lsrs	r3, r3, #21
 8004ca2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004ca6:	fb02 f303 	mul.w	r3, r2, r3
 8004caa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cb4:	d112      	bne.n	8004cdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2180      	movs	r1, #128	@ 0x80
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ff47 	bl	8004b54 <SPI_WaitFlagStateUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d016      	beq.n	8004cfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e00f      	b.n	8004cfc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b80      	cmp	r3, #128	@ 0x80
 8004cf4:	d0f2      	beq.n	8004cdc <SPI_EndRxTxTransaction+0x78>
 8004cf6:	e000      	b.n	8004cfa <SPI_EndRxTxTransaction+0x96>
        break;
 8004cf8:	bf00      	nop
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	20000004 	.word	0x20000004
 8004d08:	165e9f81 	.word	0x165e9f81

08004d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e042      	b.n	8004da4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc ffcc 	bl	8001cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2224      	movs	r2, #36	@ 0x24
 8004d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68da      	ldr	r2, [r3, #12]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f973 	bl	800503c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695a      	ldr	r2, [r3, #20]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	@ 0x28
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d175      	bne.n	8004eb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_UART_Transmit+0x2c>
 8004dd2:	88fb      	ldrh	r3, [r7, #6]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e06e      	b.n	8004eba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2221      	movs	r2, #33	@ 0x21
 8004de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004dea:	f7fd f91f 	bl	800202c <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	88fa      	ldrh	r2, [r7, #6]
 8004df4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e04:	d108      	bne.n	8004e18 <HAL_UART_Transmit+0x6c>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d104      	bne.n	8004e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	61bb      	str	r3, [r7, #24]
 8004e16:	e003      	b.n	8004e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e20:	e02e      	b.n	8004e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	2180      	movs	r1, #128	@ 0x80
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f848 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d005      	beq.n	8004e44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e03a      	b.n	8004eba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10b      	bne.n	8004e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	61bb      	str	r3, [r7, #24]
 8004e60:	e007      	b.n	8004e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	781a      	ldrb	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1cb      	bne.n	8004e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2200      	movs	r2, #0
 8004e92:	2140      	movs	r1, #64	@ 0x40
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 f814 	bl	8004ec2 <UART_WaitOnFlagUntilTimeout>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e006      	b.n	8004eba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e000      	b.n	8004eba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004eb8:	2302      	movs	r3, #2
  }
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3720      	adds	r7, #32
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	603b      	str	r3, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed2:	e03b      	b.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d037      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	f7fd f8a6 	bl	800202c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	6a3a      	ldr	r2, [r7, #32]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e03a      	b.n	8004f6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d023      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b80      	cmp	r3, #128	@ 0x80
 8004f08:	d020      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b40      	cmp	r3, #64	@ 0x40
 8004f0e:	d01d      	beq.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d116      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f81d 	bl	8004f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e00f      	b.n	8004f6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	4013      	ands	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d0b4      	beq.n	8004ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b095      	sub	sp, #84	@ 0x54
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	330c      	adds	r3, #12
 8004f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	330c      	adds	r3, #12
 8004f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e5      	bne.n	8004f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	e853 3f00 	ldrex	r3, [r3]
 8004fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3314      	adds	r3, #20
 8004fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fd8:	e841 2300 	strex	r3, r2, [r1]
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e5      	bne.n	8004fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d119      	bne.n	8005020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	647b      	str	r3, [r7, #68]	@ 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800500c:	61ba      	str	r2, [r7, #24]
 800500e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	6979      	ldr	r1, [r7, #20]
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	613b      	str	r3, [r7, #16]
   return(result);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800502e:	bf00      	nop
 8005030:	3754      	adds	r7, #84	@ 0x54
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800503c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005040:	b0c0      	sub	sp, #256	@ 0x100
 8005042:	af00      	add	r7, sp, #0
 8005044:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	68d9      	ldr	r1, [r3, #12]
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	ea40 0301 	orr.w	r3, r0, r1
 8005064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	431a      	orrs	r2, r3
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	431a      	orrs	r2, r3
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005094:	f021 010c 	bic.w	r1, r1, #12
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80050a2:	430b      	orrs	r3, r1
 80050a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b6:	6999      	ldr	r1, [r3, #24]
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	ea40 0301 	orr.w	r3, r0, r1
 80050c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005308 <UART_SetConfig+0x2cc>)
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d005      	beq.n	80050dc <UART_SetConfig+0xa0>
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b8d      	ldr	r3, [pc, #564]	@ (800530c <UART_SetConfig+0x2d0>)
 80050d8:	429a      	cmp	r2, r3
 80050da:	d104      	bne.n	80050e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050dc:	f7ff f9b0 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 80050e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80050e4:	e003      	b.n	80050ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050e6:	f7ff f997 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 80050ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050f8:	f040 810c 	bne.w	8005314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005106:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800510a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	1891      	adds	r1, r2, r2
 8005114:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005116:	415b      	adcs	r3, r3
 8005118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800511a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800511e:	4621      	mov	r1, r4
 8005120:	eb12 0801 	adds.w	r8, r2, r1
 8005124:	4629      	mov	r1, r5
 8005126:	eb43 0901 	adc.w	r9, r3, r1
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800513a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800513e:	4690      	mov	r8, r2
 8005140:	4699      	mov	r9, r3
 8005142:	4623      	mov	r3, r4
 8005144:	eb18 0303 	adds.w	r3, r8, r3
 8005148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800514c:	462b      	mov	r3, r5
 800514e:	eb49 0303 	adc.w	r3, r9, r3
 8005152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005162:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800516a:	460b      	mov	r3, r1
 800516c:	18db      	adds	r3, r3, r3
 800516e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005170:	4613      	mov	r3, r2
 8005172:	eb42 0303 	adc.w	r3, r2, r3
 8005176:	657b      	str	r3, [r7, #84]	@ 0x54
 8005178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800517c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005180:	f7fb fb8c 	bl	800089c <__aeabi_uldivmod>
 8005184:	4602      	mov	r2, r0
 8005186:	460b      	mov	r3, r1
 8005188:	4b61      	ldr	r3, [pc, #388]	@ (8005310 <UART_SetConfig+0x2d4>)
 800518a:	fba3 2302 	umull	r2, r3, r3, r2
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	011c      	lsls	r4, r3, #4
 8005192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005196:	2200      	movs	r2, #0
 8005198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800519c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80051a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80051a4:	4642      	mov	r2, r8
 80051a6:	464b      	mov	r3, r9
 80051a8:	1891      	adds	r1, r2, r2
 80051aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80051ac:	415b      	adcs	r3, r3
 80051ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80051b4:	4641      	mov	r1, r8
 80051b6:	eb12 0a01 	adds.w	sl, r2, r1
 80051ba:	4649      	mov	r1, r9
 80051bc:	eb43 0b01 	adc.w	fp, r3, r1
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051d4:	4692      	mov	sl, r2
 80051d6:	469b      	mov	fp, r3
 80051d8:	4643      	mov	r3, r8
 80051da:	eb1a 0303 	adds.w	r3, sl, r3
 80051de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051e2:	464b      	mov	r3, r9
 80051e4:	eb4b 0303 	adc.w	r3, fp, r3
 80051e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005200:	460b      	mov	r3, r1
 8005202:	18db      	adds	r3, r3, r3
 8005204:	643b      	str	r3, [r7, #64]	@ 0x40
 8005206:	4613      	mov	r3, r2
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	647b      	str	r3, [r7, #68]	@ 0x44
 800520e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005216:	f7fb fb41 	bl	800089c <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4611      	mov	r1, r2
 8005220:	4b3b      	ldr	r3, [pc, #236]	@ (8005310 <UART_SetConfig+0x2d4>)
 8005222:	fba3 2301 	umull	r2, r3, r3, r1
 8005226:	095b      	lsrs	r3, r3, #5
 8005228:	2264      	movs	r2, #100	@ 0x64
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	1acb      	subs	r3, r1, r3
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005236:	4b36      	ldr	r3, [pc, #216]	@ (8005310 <UART_SetConfig+0x2d4>)
 8005238:	fba3 2302 	umull	r2, r3, r3, r2
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005244:	441c      	add	r4, r3
 8005246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005250:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005258:	4642      	mov	r2, r8
 800525a:	464b      	mov	r3, r9
 800525c:	1891      	adds	r1, r2, r2
 800525e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005260:	415b      	adcs	r3, r3
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005268:	4641      	mov	r1, r8
 800526a:	1851      	adds	r1, r2, r1
 800526c:	6339      	str	r1, [r7, #48]	@ 0x30
 800526e:	4649      	mov	r1, r9
 8005270:	414b      	adcs	r3, r1
 8005272:	637b      	str	r3, [r7, #52]	@ 0x34
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005280:	4659      	mov	r1, fp
 8005282:	00cb      	lsls	r3, r1, #3
 8005284:	4651      	mov	r1, sl
 8005286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528a:	4651      	mov	r1, sl
 800528c:	00ca      	lsls	r2, r1, #3
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	4603      	mov	r3, r0
 8005294:	4642      	mov	r2, r8
 8005296:	189b      	adds	r3, r3, r2
 8005298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800529c:	464b      	mov	r3, r9
 800529e:	460a      	mov	r2, r1
 80052a0:	eb42 0303 	adc.w	r3, r2, r3
 80052a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80052b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052bc:	460b      	mov	r3, r1
 80052be:	18db      	adds	r3, r3, r3
 80052c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c2:	4613      	mov	r3, r2
 80052c4:	eb42 0303 	adc.w	r3, r2, r3
 80052c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80052d2:	f7fb fae3 	bl	800089c <__aeabi_uldivmod>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <UART_SetConfig+0x2d4>)
 80052dc:	fba3 1302 	umull	r1, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	2164      	movs	r1, #100	@ 0x64
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3332      	adds	r3, #50	@ 0x32
 80052ee:	4a08      	ldr	r2, [pc, #32]	@ (8005310 <UART_SetConfig+0x2d4>)
 80052f0:	fba2 2303 	umull	r2, r3, r2, r3
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	f003 0207 	and.w	r2, r3, #7
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4422      	add	r2, r4
 8005302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005304:	e106      	b.n	8005514 <UART_SetConfig+0x4d8>
 8005306:	bf00      	nop
 8005308:	40011000 	.word	0x40011000
 800530c:	40011400 	.word	0x40011400
 8005310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005318:	2200      	movs	r2, #0
 800531a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800531e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005326:	4642      	mov	r2, r8
 8005328:	464b      	mov	r3, r9
 800532a:	1891      	adds	r1, r2, r2
 800532c:	6239      	str	r1, [r7, #32]
 800532e:	415b      	adcs	r3, r3
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
 8005332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005336:	4641      	mov	r1, r8
 8005338:	1854      	adds	r4, r2, r1
 800533a:	4649      	mov	r1, r9
 800533c:	eb43 0501 	adc.w	r5, r3, r1
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	00eb      	lsls	r3, r5, #3
 800534a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534e:	00e2      	lsls	r2, r4, #3
 8005350:	4614      	mov	r4, r2
 8005352:	461d      	mov	r5, r3
 8005354:	4643      	mov	r3, r8
 8005356:	18e3      	adds	r3, r4, r3
 8005358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800535c:	464b      	mov	r3, r9
 800535e:	eb45 0303 	adc.w	r3, r5, r3
 8005362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005372:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005382:	4629      	mov	r1, r5
 8005384:	008b      	lsls	r3, r1, #2
 8005386:	4621      	mov	r1, r4
 8005388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538c:	4621      	mov	r1, r4
 800538e:	008a      	lsls	r2, r1, #2
 8005390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005394:	f7fb fa82 	bl	800089c <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4b60      	ldr	r3, [pc, #384]	@ (8005520 <UART_SetConfig+0x4e4>)
 800539e:	fba3 2302 	umull	r2, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	011c      	lsls	r4, r3, #4
 80053a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80053b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80053b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	1891      	adds	r1, r2, r2
 80053be:	61b9      	str	r1, [r7, #24]
 80053c0:	415b      	adcs	r3, r3
 80053c2:	61fb      	str	r3, [r7, #28]
 80053c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053c8:	4641      	mov	r1, r8
 80053ca:	1851      	adds	r1, r2, r1
 80053cc:	6139      	str	r1, [r7, #16]
 80053ce:	4649      	mov	r1, r9
 80053d0:	414b      	adcs	r3, r1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053e0:	4659      	mov	r1, fp
 80053e2:	00cb      	lsls	r3, r1, #3
 80053e4:	4651      	mov	r1, sl
 80053e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ea:	4651      	mov	r1, sl
 80053ec:	00ca      	lsls	r2, r1, #3
 80053ee:	4610      	mov	r0, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	4642      	mov	r2, r8
 80053f6:	189b      	adds	r3, r3, r2
 80053f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053fc:	464b      	mov	r3, r9
 80053fe:	460a      	mov	r2, r1
 8005400:	eb42 0303 	adc.w	r3, r2, r3
 8005404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005412:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005420:	4649      	mov	r1, r9
 8005422:	008b      	lsls	r3, r1, #2
 8005424:	4641      	mov	r1, r8
 8005426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542a:	4641      	mov	r1, r8
 800542c:	008a      	lsls	r2, r1, #2
 800542e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005432:	f7fb fa33 	bl	800089c <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4611      	mov	r1, r2
 800543c:	4b38      	ldr	r3, [pc, #224]	@ (8005520 <UART_SetConfig+0x4e4>)
 800543e:	fba3 2301 	umull	r2, r3, r3, r1
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2264      	movs	r2, #100	@ 0x64
 8005446:	fb02 f303 	mul.w	r3, r2, r3
 800544a:	1acb      	subs	r3, r1, r3
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	3332      	adds	r3, #50	@ 0x32
 8005450:	4a33      	ldr	r2, [pc, #204]	@ (8005520 <UART_SetConfig+0x4e4>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800545c:	441c      	add	r4, r3
 800545e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005462:	2200      	movs	r2, #0
 8005464:	673b      	str	r3, [r7, #112]	@ 0x70
 8005466:	677a      	str	r2, [r7, #116]	@ 0x74
 8005468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800546c:	4642      	mov	r2, r8
 800546e:	464b      	mov	r3, r9
 8005470:	1891      	adds	r1, r2, r2
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	415b      	adcs	r3, r3
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800547c:	4641      	mov	r1, r8
 800547e:	1851      	adds	r1, r2, r1
 8005480:	6039      	str	r1, [r7, #0]
 8005482:	4649      	mov	r1, r9
 8005484:	414b      	adcs	r3, r1
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005494:	4659      	mov	r1, fp
 8005496:	00cb      	lsls	r3, r1, #3
 8005498:	4651      	mov	r1, sl
 800549a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800549e:	4651      	mov	r1, sl
 80054a0:	00ca      	lsls	r2, r1, #3
 80054a2:	4610      	mov	r0, r2
 80054a4:	4619      	mov	r1, r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	4642      	mov	r2, r8
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054ae:	464b      	mov	r3, r9
 80054b0:	460a      	mov	r2, r1
 80054b2:	eb42 0303 	adc.w	r3, r2, r3
 80054b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80054c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80054d0:	4649      	mov	r1, r9
 80054d2:	008b      	lsls	r3, r1, #2
 80054d4:	4641      	mov	r1, r8
 80054d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054da:	4641      	mov	r1, r8
 80054dc:	008a      	lsls	r2, r1, #2
 80054de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80054e2:	f7fb f9db 	bl	800089c <__aeabi_uldivmod>
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005520 <UART_SetConfig+0x4e4>)
 80054ec:	fba3 1302 	umull	r1, r3, r3, r2
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	2164      	movs	r1, #100	@ 0x64
 80054f4:	fb01 f303 	mul.w	r3, r1, r3
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	3332      	adds	r3, #50	@ 0x32
 80054fe:	4a08      	ldr	r2, [pc, #32]	@ (8005520 <UART_SetConfig+0x4e4>)
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	f003 020f 	and.w	r2, r3, #15
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4422      	add	r2, r4
 8005512:	609a      	str	r2, [r3, #8]
}
 8005514:	bf00      	nop
 8005516:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800551a:	46bd      	mov	sp, r7
 800551c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005520:	51eb851f 	.word	0x51eb851f

08005524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005524:	b084      	sub	sp, #16
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	f107 001c 	add.w	r0, r7, #28
 8005532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005536:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800553a:	2b01      	cmp	r3, #1
 800553c:	d123      	bne.n	8005586 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005542:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005566:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800556a:	2b01      	cmp	r3, #1
 800556c:	d105      	bne.n	800557a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 fae8 	bl	8006b50 <USB_CoreReset>
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
 8005584:	e01b      	b.n	80055be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 fadc 	bl	8006b50 <USB_CoreReset>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800559c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80055b0:	e005      	b.n	80055be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80055be:	7fbb      	ldrb	r3, [r7, #30]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10b      	bne.n	80055dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f043 0206 	orr.w	r2, r3, #6
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055e8:	b004      	add	sp, #16
 80055ea:	4770      	bx	lr

080055ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	4613      	mov	r3, r2
 80055f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d165      	bne.n	80056cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a41      	ldr	r2, [pc, #260]	@ (8005708 <USB_SetTurnaroundTime+0x11c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d906      	bls.n	8005616 <USB_SetTurnaroundTime+0x2a>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a40      	ldr	r2, [pc, #256]	@ (800570c <USB_SetTurnaroundTime+0x120>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d202      	bcs.n	8005616 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005610:	230f      	movs	r3, #15
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e062      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a3c      	ldr	r2, [pc, #240]	@ (800570c <USB_SetTurnaroundTime+0x120>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d306      	bcc.n	800562c <USB_SetTurnaroundTime+0x40>
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4a3b      	ldr	r2, [pc, #236]	@ (8005710 <USB_SetTurnaroundTime+0x124>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d202      	bcs.n	800562c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005626:	230e      	movs	r3, #14
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e057      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a38      	ldr	r2, [pc, #224]	@ (8005710 <USB_SetTurnaroundTime+0x124>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d306      	bcc.n	8005642 <USB_SetTurnaroundTime+0x56>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4a37      	ldr	r2, [pc, #220]	@ (8005714 <USB_SetTurnaroundTime+0x128>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d202      	bcs.n	8005642 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800563c:	230d      	movs	r3, #13
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	e04c      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	4a33      	ldr	r2, [pc, #204]	@ (8005714 <USB_SetTurnaroundTime+0x128>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d306      	bcc.n	8005658 <USB_SetTurnaroundTime+0x6c>
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4a32      	ldr	r2, [pc, #200]	@ (8005718 <USB_SetTurnaroundTime+0x12c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d802      	bhi.n	8005658 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005652:	230c      	movs	r3, #12
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e041      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a2f      	ldr	r2, [pc, #188]	@ (8005718 <USB_SetTurnaroundTime+0x12c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d906      	bls.n	800566e <USB_SetTurnaroundTime+0x82>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4a2e      	ldr	r2, [pc, #184]	@ (800571c <USB_SetTurnaroundTime+0x130>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d802      	bhi.n	800566e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005668:	230b      	movs	r3, #11
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	e036      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	4a2a      	ldr	r2, [pc, #168]	@ (800571c <USB_SetTurnaroundTime+0x130>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d906      	bls.n	8005684 <USB_SetTurnaroundTime+0x98>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	4a29      	ldr	r2, [pc, #164]	@ (8005720 <USB_SetTurnaroundTime+0x134>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d802      	bhi.n	8005684 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800567e:	230a      	movs	r3, #10
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e02b      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a26      	ldr	r2, [pc, #152]	@ (8005720 <USB_SetTurnaroundTime+0x134>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d906      	bls.n	800569a <USB_SetTurnaroundTime+0xae>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4a25      	ldr	r2, [pc, #148]	@ (8005724 <USB_SetTurnaroundTime+0x138>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d202      	bcs.n	800569a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005694:	2309      	movs	r3, #9
 8005696:	617b      	str	r3, [r7, #20]
 8005698:	e020      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a21      	ldr	r2, [pc, #132]	@ (8005724 <USB_SetTurnaroundTime+0x138>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d306      	bcc.n	80056b0 <USB_SetTurnaroundTime+0xc4>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4a20      	ldr	r2, [pc, #128]	@ (8005728 <USB_SetTurnaroundTime+0x13c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d802      	bhi.n	80056b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80056aa:	2308      	movs	r3, #8
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e015      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005728 <USB_SetTurnaroundTime+0x13c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d906      	bls.n	80056c6 <USB_SetTurnaroundTime+0xda>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	@ (800572c <USB_SetTurnaroundTime+0x140>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d202      	bcs.n	80056c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80056c0:	2307      	movs	r3, #7
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e00a      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80056c6:	2306      	movs	r3, #6
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e007      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d102      	bne.n	80056d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80056d2:	2309      	movs	r3, #9
 80056d4:	617b      	str	r3, [r7, #20]
 80056d6:	e001      	b.n	80056dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80056d8:	2309      	movs	r3, #9
 80056da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	029b      	lsls	r3, r3, #10
 80056f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	00d8acbf 	.word	0x00d8acbf
 800570c:	00e4e1c0 	.word	0x00e4e1c0
 8005710:	00f42400 	.word	0x00f42400
 8005714:	01067380 	.word	0x01067380
 8005718:	011a499f 	.word	0x011a499f
 800571c:	01312cff 	.word	0x01312cff
 8005720:	014ca43f 	.word	0x014ca43f
 8005724:	016e3600 	.word	0x016e3600
 8005728:	01a6ab1f 	.word	0x01a6ab1f
 800572c:	01e84800 	.word	0x01e84800

08005730 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f043 0201 	orr.w	r2, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr

08005752 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005752:	b480      	push	{r7}
 8005754:	b083      	sub	sp, #12
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f023 0201 	bic.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	460b      	mov	r3, r1
 800577e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d115      	bne.n	80057c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057a2:	200a      	movs	r0, #10
 80057a4:	f7fc fc4e 	bl	8002044 <HAL_Delay>
      ms += 10U;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	330a      	adds	r3, #10
 80057ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f001 f93f 	bl	8006a32 <USB_GetMode>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d01e      	beq.n	80057f8 <USB_SetCurrentMode+0x84>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80057be:	d9f0      	bls.n	80057a2 <USB_SetCurrentMode+0x2e>
 80057c0:	e01a      	b.n	80057f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057c2:	78fb      	ldrb	r3, [r7, #3]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d115      	bne.n	80057f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057d4:	200a      	movs	r0, #10
 80057d6:	f7fc fc35 	bl	8002044 <HAL_Delay>
      ms += 10U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	330a      	adds	r3, #10
 80057de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f001 f926 	bl	8006a32 <USB_GetMode>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <USB_SetCurrentMode+0x84>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80057f0:	d9f0      	bls.n	80057d4 <USB_SetCurrentMode+0x60>
 80057f2:	e001      	b.n	80057f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e005      	b.n	8005804 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80057fc:	d101      	bne.n	8005802 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800580c:	b084      	sub	sp, #16
 800580e:	b580      	push	{r7, lr}
 8005810:	b086      	sub	sp, #24
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800581a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	e009      	b.n	8005840 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	3340      	adds	r3, #64	@ 0x40
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	2b0e      	cmp	r3, #14
 8005844:	d9f2      	bls.n	800582c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005846:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800584a:	2b00      	cmp	r3, #0
 800584c:	d11c      	bne.n	8005888 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800585c:	f043 0302 	orr.w	r3, r3, #2
 8005860:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005866:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	639a      	str	r2, [r3, #56]	@ 0x38
 8005886:	e00b      	b.n	80058a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80058a6:	461a      	mov	r2, r3
 80058a8:	2300      	movs	r3, #0
 80058aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d10d      	bne.n	80058d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80058bc:	2100      	movs	r1, #0
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f968 	bl	8005b94 <USB_SetDevSpeed>
 80058c4:	e008      	b.n	80058d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80058c6:	2101      	movs	r1, #1
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f963 	bl	8005b94 <USB_SetDevSpeed>
 80058ce:	e003      	b.n	80058d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058d0:	2103      	movs	r1, #3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f95e 	bl	8005b94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058d8:	2110      	movs	r1, #16
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f8fa 	bl	8005ad4 <USB_FlushTxFifo>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f924 	bl	8005b38 <USB_FlushRxFifo>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005900:	461a      	mov	r2, r3
 8005902:	2300      	movs	r3, #0
 8005904:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005918:	461a      	mov	r2, r3
 800591a:	2300      	movs	r3, #0
 800591c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591e:	2300      	movs	r3, #0
 8005920:	613b      	str	r3, [r7, #16]
 8005922:	e043      	b.n	80059ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800593a:	d118      	bne.n	800596e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10a      	bne.n	8005958 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594e:	461a      	mov	r2, r3
 8005950:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e013      	b.n	8005980 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005964:	461a      	mov	r2, r3
 8005966:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	e008      	b.n	8005980 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800597a:	461a      	mov	r2, r3
 800597c:	2300      	movs	r3, #0
 800597e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598c:	461a      	mov	r2, r3
 800598e:	2300      	movs	r3, #0
 8005990:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800599e:	461a      	mov	r2, r3
 80059a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	3301      	adds	r3, #1
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80059b0:	461a      	mov	r2, r3
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d3b5      	bcc.n	8005924 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	e043      	b.n	8005a46 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059d4:	d118      	bne.n	8005a08 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	015a      	lsls	r2, r3, #5
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4413      	add	r3, r2
 80059e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e8:	461a      	mov	r2, r3
 80059ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	e013      	b.n	8005a1a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fe:	461a      	mov	r2, r3
 8005a00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	e008      	b.n	8005a1a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a14:	461a      	mov	r2, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a26:	461a      	mov	r2, r3
 8005a28:	2300      	movs	r3, #0
 8005a2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a38:	461a      	mov	r2, r3
 8005a3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	3301      	adds	r3, #1
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d3b5      	bcc.n	80059be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d105      	bne.n	8005a88 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	f043 0210 	orr.w	r2, r3, #16
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <USB_DevInit+0x2c4>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	f043 0208 	orr.w	r2, r3, #8
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005aa8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d107      	bne.n	8005ac0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ab8:	f043 0304 	orr.w	r3, r3, #4
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005acc:	b004      	add	sp, #16
 8005ace:	4770      	bx	lr
 8005ad0:	803c3800 	.word	0x803c3800

08005ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aee:	d901      	bls.n	8005af4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e01b      	b.n	8005b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	daf2      	bge.n	8005ae2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	019b      	lsls	r3, r3, #6
 8005b04:	f043 0220 	orr.w	r2, r3, #32
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b18:	d901      	bls.n	8005b1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e006      	b.n	8005b2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d0f0      	beq.n	8005b0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	3301      	adds	r3, #1
 8005b48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b50:	d901      	bls.n	8005b56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e018      	b.n	8005b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	daf2      	bge.n	8005b44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2210      	movs	r2, #16
 8005b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b74:	d901      	bls.n	8005b7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e006      	b.n	8005b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d0f0      	beq.n	8005b68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b087      	sub	sp, #28
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0306 	and.w	r3, r3, #6
 8005bde:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]
 8005bea:	e00a      	b.n	8005c02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d002      	beq.n	8005bf8 <USB_GetDevSpeed+0x32>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b06      	cmp	r3, #6
 8005bf6:	d102      	bne.n	8005bfe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	75fb      	strb	r3, [r7, #23]
 8005bfc:	e001      	b.n	8005c02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005bfe:	230f      	movs	r3, #15
 8005c00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	785b      	ldrb	r3, [r3, #1]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d13a      	bne.n	8005ca2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f003 030f 	and.w	r3, r3, #15
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	68f9      	ldr	r1, [r7, #12]
 8005c46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d155      	bne.n	8005d10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	791b      	ldrb	r3, [r3, #4]
 8005c7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	059b      	lsls	r3, r3, #22
 8005c86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e036      	b.n	8005d10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ca8:	69da      	ldr	r2, [r3, #28]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	041b      	lsls	r3, r3, #16
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11a      	bne.n	8005d10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	785b      	ldrb	r3, [r3, #1]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d161      	bne.n	8005e00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d52:	d11f      	bne.n	8005d94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f003 030f 	and.w	r3, r3, #15
 8005da4:	2101      	movs	r1, #1
 8005da6:	fa01 f303 	lsl.w	r3, r1, r3
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005db4:	4013      	ands	r3, r2
 8005db6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2101      	movs	r1, #1
 8005dca:	fa01 f303 	lsl.w	r3, r1, r3
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dd8:	4013      	ands	r3, r2
 8005dda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	0159      	lsls	r1, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	440b      	add	r3, r1
 8005df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df6:	4619      	mov	r1, r3
 8005df8:	4b35      	ldr	r3, [pc, #212]	@ (8005ed0 <USB_DeactivateEndpoint+0x1b0>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]
 8005dfe:	e060      	b.n	8005ec2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e16:	d11f      	bne.n	8005e58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	2101      	movs	r1, #1
 8005e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	43db      	mvns	r3, r3
 8005e72:	68f9      	ldr	r1, [r7, #12]
 8005e74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e78:	4013      	ands	r3, r2
 8005e7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	43db      	mvns	r3, r3
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	0159      	lsls	r1, r3, #5
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	440b      	add	r3, r1
 8005eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <USB_DeactivateEndpoint+0x1b4>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3714      	adds	r7, #20
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	ec337800 	.word	0xec337800
 8005ed4:	eff37800 	.word	0xeff37800

08005ed8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	@ 0x28
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	785b      	ldrb	r3, [r3, #1]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	f040 817f 	bne.w	80061f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d132      	bne.n	8005f68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	0151      	lsls	r1, r2, #5
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	440a      	add	r2, r1
 8005f18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f60:	0cdb      	lsrs	r3, r3, #19
 8005f62:	04db      	lsls	r3, r3, #19
 8005f64:	6113      	str	r3, [r2, #16]
 8005f66:	e097      	b.n	8006098 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	69fb      	ldr	r3, [r7, #28]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	0151      	lsls	r1, r2, #5
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	440a      	add	r2, r1
 8005f7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f82:	0cdb      	lsrs	r3, r3, #19
 8005f84:	04db      	lsls	r3, r3, #19
 8005f86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005fa6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005faa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d11a      	bne.n	8005fe8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d903      	bls.n	8005fc6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fe4:	6113      	str	r3, [r2, #16]
 8005fe6:	e044      	b.n	8006072 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	691a      	ldr	r2, [r3, #16]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	1e5a      	subs	r2, r3, #1
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	4413      	add	r3, r2
 8006006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	8afb      	ldrh	r3, [r7, #22]
 800600e:	04d9      	lsls	r1, r3, #19
 8006010:	4ba4      	ldr	r3, [pc, #656]	@ (80062a4 <USB_EPStartXfer+0x3cc>)
 8006012:	400b      	ands	r3, r1
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	0148      	lsls	r0, r1, #5
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	4401      	add	r1, r0
 800601c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006020:	4313      	orrs	r3, r2
 8006022:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	791b      	ldrb	r3, [r3, #4]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d122      	bne.n	8006072 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006046:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800604a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	8afb      	ldrh	r3, [r7, #22]
 800605c:	075b      	lsls	r3, r3, #29
 800605e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006062:	69b9      	ldr	r1, [r7, #24]
 8006064:	0148      	lsls	r0, r1, #5
 8006066:	69f9      	ldr	r1, [r7, #28]
 8006068:	4401      	add	r1, r0
 800606a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006088:	69b9      	ldr	r1, [r7, #24]
 800608a:	0148      	lsls	r0, r1, #5
 800608c:	69f9      	ldr	r1, [r7, #28]
 800608e:	4401      	add	r1, r0
 8006090:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006094:	4313      	orrs	r3, r2
 8006096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d14b      	bne.n	8006136 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b2:	461a      	mov	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	791b      	ldrb	r3, [r3, #4]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d128      	bne.n	8006114 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d110      	bne.n	80060f4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060f0:	6013      	str	r3, [r2, #0]
 80060f2:	e00f      	b.n	8006114 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800610e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006112:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800612e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e166      	b.n	8006404 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	0151      	lsls	r1, r2, #5
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	440a      	add	r2, r1
 800614c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006150:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006154:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	791b      	ldrb	r3, [r3, #4]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d015      	beq.n	800618a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 814e 	beq.w	8006404 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2101      	movs	r1, #1
 800617a:	fa01 f303 	lsl.w	r3, r1, r3
 800617e:	69f9      	ldr	r1, [r7, #28]
 8006180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006184:	4313      	orrs	r3, r2
 8006186:	634b      	str	r3, [r1, #52]	@ 0x34
 8006188:	e13c      	b.n	8006404 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006196:	2b00      	cmp	r3, #0
 8006198:	d110      	bne.n	80061bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	e00f      	b.n	80061dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	68d9      	ldr	r1, [r3, #12]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	781a      	ldrb	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	b298      	uxth	r0, r3
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4603      	mov	r3, r0
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f9b9 	bl	8006568 <USB_WritePacket>
 80061f6:	e105      	b.n	8006404 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	440a      	add	r2, r1
 800620e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006212:	0cdb      	lsrs	r3, r3, #19
 8006214:	04db      	lsls	r3, r3, #19
 8006216:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006232:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006236:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800623a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d132      	bne.n	80062a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006270:	69b9      	ldr	r1, [r7, #24]
 8006272:	0148      	lsls	r0, r1, #5
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	4401      	add	r1, r0
 8006278:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800627c:	4313      	orrs	r3, r2
 800627e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800629a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800629e:	6113      	str	r3, [r2, #16]
 80062a0:	e062      	b.n	8006368 <USB_EPStartXfer+0x490>
 80062a2:	bf00      	nop
 80062a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d123      	bne.n	80062f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c6:	69b9      	ldr	r1, [r7, #24]
 80062c8:	0148      	lsls	r0, r1, #5
 80062ca:	69f9      	ldr	r1, [r7, #28]
 80062cc:	4401      	add	r1, r0
 80062ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062d2:	4313      	orrs	r3, r2
 80062d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	0151      	lsls	r1, r2, #5
 80062e8:	69fa      	ldr	r2, [r7, #28]
 80062ea:	440a      	add	r2, r1
 80062ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062f4:	6113      	str	r3, [r2, #16]
 80062f6:	e037      	b.n	8006368 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	4413      	add	r3, r2
 8006302:	1e5a      	subs	r2, r3, #1
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	fbb2 f3f3 	udiv	r3, r2, r3
 800630c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	8afa      	ldrh	r2, [r7, #22]
 8006314:	fb03 f202 	mul.w	r2, r3, r2
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006328:	691a      	ldr	r2, [r3, #16]
 800632a:	8afb      	ldrh	r3, [r7, #22]
 800632c:	04d9      	lsls	r1, r3, #19
 800632e:	4b38      	ldr	r3, [pc, #224]	@ (8006410 <USB_EPStartXfer+0x538>)
 8006330:	400b      	ands	r3, r1
 8006332:	69b9      	ldr	r1, [r7, #24]
 8006334:	0148      	lsls	r0, r1, #5
 8006336:	69f9      	ldr	r1, [r7, #28]
 8006338:	4401      	add	r1, r0
 800633a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800633e:	4313      	orrs	r3, r2
 8006340:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006358:	69b9      	ldr	r1, [r7, #24]
 800635a:	0148      	lsls	r0, r1, #5
 800635c:	69f9      	ldr	r1, [r7, #28]
 800635e:	4401      	add	r1, r0
 8006360:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006364:	4313      	orrs	r3, r2
 8006366:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d10d      	bne.n	800638a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d009      	beq.n	800638a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	68d9      	ldr	r1, [r3, #12]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006386:	460a      	mov	r2, r1
 8006388:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	791b      	ldrb	r3, [r3, #4]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d128      	bne.n	80063e4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d110      	bne.n	80063c4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	0151      	lsls	r1, r2, #5
 80063b4:	69fa      	ldr	r2, [r7, #28]
 80063b6:	440a      	add	r2, r1
 80063b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e00f      	b.n	80063e4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	1ff80000 	.word	0x1ff80000

08006414 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d14a      	bne.n	80064c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006446:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800644a:	f040 8086 	bne.w	800655a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	7812      	ldrb	r2, [r2, #0]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800646c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006470:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	7812      	ldrb	r2, [r2, #0]
 8006486:	0151      	lsls	r1, r2, #5
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	440a      	add	r2, r1
 800648c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006490:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006494:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d902      	bls.n	80064ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	75fb      	strb	r3, [r7, #23]
          break;
 80064aa:	e056      	b.n	800655a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064c4:	d0e7      	beq.n	8006496 <USB_EPStopXfer+0x82>
 80064c6:	e048      	b.n	800655a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064e0:	d13b      	bne.n	800655a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	7812      	ldrb	r2, [r2, #0]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006500:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006504:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	7812      	ldrb	r2, [r2, #0]
 800651a:	0151      	lsls	r1, r2, #5
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	440a      	add	r2, r1
 8006520:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006524:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006528:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006536:	4293      	cmp	r3, r2
 8006538:	d902      	bls.n	8006540 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	75fb      	strb	r3, [r7, #23]
          break;
 800653e:	e00c      	b.n	800655a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006558:	d0e7      	beq.n	800652a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800655a:	7dfb      	ldrb	r3, [r7, #23]
}
 800655c:	4618      	mov	r0, r3
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	@ 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	4611      	mov	r1, r2
 8006574:	461a      	mov	r2, r3
 8006576:	460b      	mov	r3, r1
 8006578:	71fb      	strb	r3, [r7, #7]
 800657a:	4613      	mov	r3, r2
 800657c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d123      	bne.n	80065d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800658e:	88bb      	ldrh	r3, [r7, #4]
 8006590:	3303      	adds	r3, #3
 8006592:	089b      	lsrs	r3, r3, #2
 8006594:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006596:	2300      	movs	r3, #0
 8006598:	61bb      	str	r3, [r7, #24]
 800659a:	e018      	b.n	80065ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	031a      	lsls	r2, r3, #12
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065a8:	461a      	mov	r2, r3
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	3301      	adds	r3, #1
 80065b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	3301      	adds	r3, #1
 80065ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	3301      	adds	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	3301      	adds	r3, #1
 80065c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	3301      	adds	r3, #1
 80065cc:	61bb      	str	r3, [r7, #24]
 80065ce:	69ba      	ldr	r2, [r7, #24]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d3e2      	bcc.n	800659c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3724      	adds	r7, #36	@ 0x24
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b08b      	sub	sp, #44	@ 0x2c
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	089b      	lsrs	r3, r3, #2
 80065fe:	b29b      	uxth	r3, r3
 8006600:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800660a:	2300      	movs	r3, #0
 800660c:	623b      	str	r3, [r7, #32]
 800660e:	e014      	b.n	800663a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	601a      	str	r2, [r3, #0]
    pDest++;
 800661c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661e:	3301      	adds	r3, #1
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	3301      	adds	r3, #1
 8006626:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	3301      	adds	r3, #1
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	3301      	adds	r3, #1
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	3301      	adds	r3, #1
 8006638:	623b      	str	r3, [r7, #32]
 800663a:	6a3a      	ldr	r2, [r7, #32]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	429a      	cmp	r2, r3
 8006640:	d3e6      	bcc.n	8006610 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006642:	8bfb      	ldrh	r3, [r7, #30]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01e      	beq.n	8006686 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006652:	461a      	mov	r2, r3
 8006654:	f107 0310 	add.w	r3, r7, #16
 8006658:	6812      	ldr	r2, [r2, #0]
 800665a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	b2da      	uxtb	r2, r3
 800666a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666c:	701a      	strb	r2, [r3, #0]
      i++;
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	3301      	adds	r3, #1
 8006672:	623b      	str	r3, [r7, #32]
      pDest++;
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	3301      	adds	r3, #1
 8006678:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800667a:	8bfb      	ldrh	r3, [r7, #30]
 800667c:	3b01      	subs	r3, #1
 800667e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006680:	8bfb      	ldrh	r3, [r7, #30]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1ea      	bne.n	800665c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006688:	4618      	mov	r0, r3
 800668a:	372c      	adds	r7, #44	@ 0x2c
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d12c      	bne.n	800670a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	db12      	blt.n	80066e8 <USB_EPSetStall+0x54>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00f      	beq.n	80066e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	0151      	lsls	r1, r2, #5
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	440a      	add	r2, r1
 80066de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006702:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006706:	6013      	str	r3, [r2, #0]
 8006708:	e02b      	b.n	8006762 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	015a      	lsls	r2, r3, #5
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	4413      	add	r3, r2
 8006712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	db12      	blt.n	8006742 <USB_EPSetStall+0xae>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00f      	beq.n	8006742 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	440a      	add	r2, r1
 8006738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800673c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006740:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	015a      	lsls	r2, r3, #5
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4413      	add	r3, r2
 800674a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	0151      	lsls	r1, r2, #5
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	440a      	add	r2, r1
 8006758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800675c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006760:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	2b01      	cmp	r3, #1
 800678a:	d128      	bne.n	80067de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	791b      	ldrb	r3, [r3, #4]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d003      	beq.n	80067bc <USB_EPClearStall+0x4c>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	791b      	ldrb	r3, [r3, #4]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d138      	bne.n	800682e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067da:	6013      	str	r3, [r2, #0]
 80067dc:	e027      	b.n	800682e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	791b      	ldrb	r3, [r3, #4]
 8006802:	2b03      	cmp	r3, #3
 8006804:	d003      	beq.n	800680e <USB_EPClearStall+0x9e>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	791b      	ldrb	r3, [r3, #4]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d10f      	bne.n	800682e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800682c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800685a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800685e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006876:	4313      	orrs	r3, r2
 8006878:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068b6:	f023 0302 	bic.w	r3, r3, #2
 80068ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b085      	sub	sp, #20
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80068e4:	f023 0303 	bic.w	r3, r3, #3
 80068e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068f8:	f043 0302 	orr.w	r3, r3, #2
 80068fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4013      	ands	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006924:	68fb      	ldr	r3, [r7, #12]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006932:	b480      	push	{r7}
 8006934:	b085      	sub	sp, #20
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	4013      	ands	r3, r2
 8006954:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	0c1b      	lsrs	r3, r3, #16
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	b29b      	uxth	r3, r3
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	4013      	ands	r3, r2
 80069c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069c8:	68bb      	ldr	r3, [r7, #8]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b087      	sub	sp, #28
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	460b      	mov	r3, r1
 80069e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	fa22 f303 	lsr.w	r3, r2, r3
 8006a06:	01db      	lsls	r3, r3, #7
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a10:	78fb      	ldrb	r3, [r7, #3]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	4013      	ands	r3, r2
 8006a22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a24:	68bb      	ldr	r3, [r7, #8]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a32:	b480      	push	{r7}
 8006a34:	b083      	sub	sp, #12
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006a6c:	f023 0307 	bic.w	r3, r3, #7
 8006a70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	333c      	adds	r3, #60	@ 0x3c
 8006aaa:	3304      	adds	r3, #4
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4a26      	ldr	r2, [pc, #152]	@ (8006b4c <USB_EP0_OutStart+0xb8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d90a      	bls.n	8006ace <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ac8:	d101      	bne.n	8006ace <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e037      	b.n	8006b3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ae8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006afc:	f043 0318 	orr.w	r3, r3, #24
 8006b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006b14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d10f      	bne.n	8006b3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006b3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	4f54300a 	.word	0x4f54300a

08006b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b68:	d901      	bls.n	8006b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e022      	b.n	8006bb4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	daf2      	bge.n	8006b5c <USB_CoreReset+0xc>

  count = 10U;
 8006b76:	230a      	movs	r3, #10
 8006b78:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006b7a:	e002      	b.n	8006b82 <USB_CoreReset+0x32>
  {
    count--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f9      	bne.n	8006b7c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691b      	ldr	r3, [r3, #16]
 8006b8c:	f043 0201 	orr.w	r2, r3, #1
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ba0:	d901      	bls.n	8006ba6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e006      	b.n	8006bb4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d0f0      	beq.n	8006b94 <USB_CoreReset+0x44>

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize(pdrv);
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa fa3b 	bl	8001048 <SD_disk_initialize>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	4603      	mov	r3, r0
 8006be6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status(pdrv);
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fa fb16 	bl	800121c <SD_disk_status>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006c0c:	7bf8      	ldrb	r0, [r7, #15]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	f7fa fb18 	bl	8001248 <SD_disk_read>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60b9      	str	r1, [r7, #8]
 8006c2c:	607a      	str	r2, [r7, #4]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006c34:	7bf8      	ldrb	r0, [r7, #15]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	68b9      	ldr	r1, [r7, #8]
 8006c3c:	f7fa fb6e 	bl	800131c <SD_disk_write>
 8006c40:	4603      	mov	r3, r0
 8006c42:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	4603      	mov	r3, r0
 8006c54:	603a      	str	r2, [r7, #0]
 8006c56:	71fb      	strb	r3, [r7, #7]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
   return SD_disk_ioctl(pdrv,cmd, buff);
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	79b9      	ldrb	r1, [r7, #6]
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fa fbde 	bl	8001424 <SD_disk_ioctl>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006c80:	f44f 7021 	mov.w	r0, #644	@ 0x284
 8006c84:	f007 fde2 	bl	800e84c <USBD_static_malloc>
 8006c88:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	32b0      	adds	r2, #176	@ 0xb0
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e06e      	b.n	8006d82 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	32b0      	adds	r2, #176	@ 0xb0
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	32b0      	adds	r2, #176	@ 0xb0
 8006cbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	7c1b      	ldrb	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d12b      	bne.n	8006d28 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006cd0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d8c <USBD_MSC_Init+0x118>)
 8006cd2:	7819      	ldrb	r1, [r3, #0]
 8006cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cd8:	2202      	movs	r2, #2
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f007 fc73 	bl	800e5c6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8006d8c <USBD_MSC_Init+0x118>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 020f 	and.w	r2, r3, #15
 8006ce8:	6879      	ldr	r1, [r7, #4]
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006cfc:	4b24      	ldr	r3, [pc, #144]	@ (8006d90 <USBD_MSC_Init+0x11c>)
 8006cfe:	7819      	ldrb	r1, [r3, #0]
 8006d00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d04:	2202      	movs	r2, #2
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f007 fc5d 	bl	800e5c6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006d0c:	4b20      	ldr	r3, [pc, #128]	@ (8006d90 <USBD_MSC_Init+0x11c>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	f003 020f 	and.w	r2, r3, #15
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4413      	add	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	440b      	add	r3, r1
 8006d20:	3323      	adds	r3, #35	@ 0x23
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	e028      	b.n	8006d7a <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006d28:	4b18      	ldr	r3, [pc, #96]	@ (8006d8c <USBD_MSC_Init+0x118>)
 8006d2a:	7819      	ldrb	r1, [r3, #0]
 8006d2c:	2340      	movs	r3, #64	@ 0x40
 8006d2e:	2202      	movs	r2, #2
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f007 fc48 	bl	800e5c6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8006d36:	4b15      	ldr	r3, [pc, #84]	@ (8006d8c <USBD_MSC_Init+0x118>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	f003 020f 	and.w	r2, r3, #15
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	440b      	add	r3, r1
 8006d4a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006d4e:	2201      	movs	r2, #1
 8006d50:	701a      	strb	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006d52:	4b0f      	ldr	r3, [pc, #60]	@ (8006d90 <USBD_MSC_Init+0x11c>)
 8006d54:	7819      	ldrb	r1, [r3, #0]
 8006d56:	2340      	movs	r3, #64	@ 0x40
 8006d58:	2202      	movs	r2, #2
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f007 fc33 	bl	800e5c6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8006d60:	4b0b      	ldr	r3, [pc, #44]	@ (8006d90 <USBD_MSC_Init+0x11c>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 020f 	and.w	r2, r3, #15
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3323      	adds	r3, #35	@ 0x23
 8006d76:	2201      	movs	r2, #1
 8006d78:	701a      	strb	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fa30 	bl	80071e0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000087 	.word	0x20000087
 8006d90:	20000086 	.word	0x20000086

08006d94 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8006da0:	4b26      	ldr	r3, [pc, #152]	@ (8006e3c <USBD_MSC_DeInit+0xa8>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f007 fc33 	bl	800e612 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8006dac:	4b23      	ldr	r3, [pc, #140]	@ (8006e3c <USBD_MSC_DeInit+0xa8>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 020f 	and.w	r2, r3, #15
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e40 <USBD_MSC_DeInit+0xac>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f007 fc1f 	bl	800e612 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8006dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006e40 <USBD_MSC_DeInit+0xac>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	3323      	adds	r3, #35	@ 0x23
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	32b0      	adds	r2, #176	@ 0xb0
 8006df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d018      	beq.n	8006e32 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa6b 	bl	80072dc <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	32b0      	adds	r2, #176	@ 0xb0
 8006e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f007 fd27 	bl	800e868 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	32b0      	adds	r2, #176	@ 0xb0
 8006e24:	2100      	movs	r1, #0
 8006e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000087 	.word	0x20000087
 8006e40:	20000086 	.word	0x20000086

08006e44 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	32b0      	adds	r2, #176	@ 0xb0
 8006e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint32_t max_lun;
  uint16_t status_info = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	817b      	strh	r3, [r7, #10]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0e5      	b.n	800703c <USBD_MSC_Setup+0x1f8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d058      	beq.n	8006f2e <USBD_MSC_Setup+0xea>
 8006e7c:	2b20      	cmp	r3, #32
 8006e7e:	f040 80d5 	bne.w	800702c <USBD_MSC_Setup+0x1e8>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2bfe      	cmp	r3, #254	@ 0xfe
 8006e88:	d002      	beq.n	8006e90 <USBD_MSC_Setup+0x4c>
 8006e8a:	2bff      	cmp	r3, #255	@ 0xff
 8006e8c:	d02f      	beq.n	8006eee <USBD_MSC_Setup+0xaa>
 8006e8e:	e046      	b.n	8006f1e <USBD_MSC_Setup+0xda>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	885b      	ldrh	r3, [r3, #2]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d123      	bne.n	8006ee0 <USBD_MSC_Setup+0x9c>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	88db      	ldrh	r3, [r3, #6]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d11f      	bne.n	8006ee0 <USBD_MSC_Setup+0x9c>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	da1a      	bge.n	8006ee0 <USBD_MSC_Setup+0x9c>
          {
            max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	33b0      	adds	r3, #176	@ 0xb0
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	4798      	blx	r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	60fb      	str	r3, [r7, #12]
            hmsc->max_lun = (max_lun > MSC_BOT_MAX_LUN) ? MSC_BOT_MAX_LUN : max_lun;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	bf28      	it	cs
 8006ec8:	2302      	movcs	r3, #2
 8006eca:	461a      	mov	r2, r3
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f003 fa0a 	bl	800a2f0 <USBD_CtlSendData>
 8006edc:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ede:	e025      	b.n	8006f2c <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f003 f987 	bl	800a1f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	75fb      	strb	r3, [r7, #23]
          break;
 8006eec:	e01e      	b.n	8006f2c <USBD_MSC_Setup+0xe8>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	885b      	ldrh	r3, [r3, #2]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10c      	bne.n	8006f10 <USBD_MSC_Setup+0xcc>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	88db      	ldrh	r3, [r3, #6]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d108      	bne.n	8006f10 <USBD_MSC_Setup+0xcc>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	db03      	blt.n	8006f10 <USBD_MSC_Setup+0xcc>
          {
            MSC_BOT_Reset(pdev);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f9b3 	bl	8007274 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f0e:	e00d      	b.n	8006f2c <USBD_MSC_Setup+0xe8>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f003 f96f 	bl	800a1f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8006f1c:	e006      	b.n	8006f2c <USBD_MSC_Setup+0xe8>

        default:
          USBD_CtlError(pdev, req);
 8006f1e:	6839      	ldr	r1, [r7, #0]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f003 f968 	bl	800a1f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f26:	2303      	movs	r3, #3
 8006f28:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2a:	bf00      	nop
      }
      break;
 8006f2c:	e085      	b.n	800703a <USBD_MSC_Setup+0x1f6>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	785b      	ldrb	r3, [r3, #1]
 8006f32:	2b0b      	cmp	r3, #11
 8006f34:	d871      	bhi.n	800701a <USBD_MSC_Setup+0x1d6>
 8006f36:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <USBD_MSC_Setup+0xf8>)
 8006f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3c:	08006f6d 	.word	0x08006f6d
 8006f40:	08006fe9 	.word	0x08006fe9
 8006f44:	0800701b 	.word	0x0800701b
 8006f48:	0800701b 	.word	0x0800701b
 8006f4c:	0800701b 	.word	0x0800701b
 8006f50:	0800701b 	.word	0x0800701b
 8006f54:	0800701b 	.word	0x0800701b
 8006f58:	0800701b 	.word	0x0800701b
 8006f5c:	0800701b 	.word	0x0800701b
 8006f60:	0800701b 	.word	0x0800701b
 8006f64:	08006f97 	.word	0x08006f97
 8006f68:	08006fc1 	.word	0x08006fc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d107      	bne.n	8006f88 <USBD_MSC_Setup+0x144>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f78:	f107 030a 	add.w	r3, r7, #10
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f003 f9b5 	bl	800a2f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f86:	e050      	b.n	800702a <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f003 f933 	bl	800a1f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	75fb      	strb	r3, [r7, #23]
          break;
 8006f94:	e049      	b.n	800702a <USBD_MSC_Setup+0x1e6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d107      	bne.n	8006fb2 <USBD_MSC_Setup+0x16e>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4619      	mov	r1, r3
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f003 f9a0 	bl	800a2f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fb0:	e03b      	b.n	800702a <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f003 f91e 	bl	800a1f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	75fb      	strb	r3, [r7, #23]
          break;
 8006fbe:	e034      	b.n	800702a <USBD_MSC_Setup+0x1e6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b03      	cmp	r3, #3
 8006fca:	d106      	bne.n	8006fda <USBD_MSC_Setup+0x196>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	885b      	ldrh	r3, [r3, #2]
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd8:	e027      	b.n	800702a <USBD_MSC_Setup+0x1e6>
            USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f003 f90a 	bl	800a1f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe6:	e020      	b.n	800702a <USBD_MSC_Setup+0x1e6>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d119      	bne.n	8007028 <USBD_MSC_Setup+0x1e4>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	885b      	ldrh	r3, [r3, #2]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d115      	bne.n	8007028 <USBD_MSC_Setup+0x1e4>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	889b      	ldrh	r3, [r3, #4]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f007 fb23 	bl	800e650 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	889b      	ldrh	r3, [r3, #4]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fb30 	bl	8007678 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8007018:	e006      	b.n	8007028 <USBD_MSC_Setup+0x1e4>

        default:
          USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f003 f8ea 	bl	800a1f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007022:	2303      	movs	r3, #3
 8007024:	75fb      	strb	r3, [r7, #23]
          break;
 8007026:	e000      	b.n	800702a <USBD_MSC_Setup+0x1e6>
          break;
 8007028:	bf00      	nop
      }
      break;
 800702a:	e006      	b.n	800703a <USBD_MSC_Setup+0x1f6>

    default:
      USBD_CtlError(pdev, req);
 800702c:	6839      	ldr	r1, [r7, #0]
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f003 f8e1 	bl	800a1f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007034:	2303      	movs	r3, #3
 8007036:	75fb      	strb	r3, [r7, #23]
      break;
 8007038:	bf00      	nop
  }

  return (uint8_t)ret;
 800703a:	7dfb      	ldrb	r3, [r7, #23]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3718      	adds	r7, #24
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f959 	bl	800730c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f983 	bl	8007380 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800708c:	2181      	movs	r1, #129	@ 0x81
 800708e:	4812      	ldr	r0, [pc, #72]	@ (80070d8 <USBD_MSC_GetHSCfgDesc+0x54>)
 8007090:	f002 fa79 	bl	8009586 <USBD_GetEpDesc>
 8007094:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007096:	2101      	movs	r1, #1
 8007098:	480f      	ldr	r0, [pc, #60]	@ (80070d8 <USBD_MSC_GetHSCfgDesc+0x54>)
 800709a:	f002 fa74 	bl	8009586 <USBD_GetEpDesc>
 800709e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d006      	beq.n	80070b4 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	711a      	strb	r2, [r3, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f042 0202 	orr.w	r2, r2, #2
 80070b2:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d006      	beq.n	80070c8 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2200      	movs	r2, #0
 80070be:	711a      	strb	r2, [r3, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f042 0202 	orr.w	r2, r2, #2
 80070c6:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80070ce:	4b02      	ldr	r3, [pc, #8]	@ (80070d8 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	2000005c 	.word	0x2000005c

080070dc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80070e4:	2181      	movs	r1, #129	@ 0x81
 80070e6:	4812      	ldr	r0, [pc, #72]	@ (8007130 <USBD_MSC_GetFSCfgDesc+0x54>)
 80070e8:	f002 fa4d 	bl	8009586 <USBD_GetEpDesc>
 80070ec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80070ee:	2101      	movs	r1, #1
 80070f0:	480f      	ldr	r0, [pc, #60]	@ (8007130 <USBD_MSC_GetFSCfgDesc+0x54>)
 80070f2:	f002 fa48 	bl	8009586 <USBD_GetEpDesc>
 80070f6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d006      	beq.n	800710c <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007106:	711a      	strb	r2, [r3, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d006      	beq.n	8007120 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2200      	movs	r2, #0
 8007116:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800711a:	711a      	strb	r2, [r3, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8007126:	4b02      	ldr	r3, [pc, #8]	@ (8007130 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	2000005c 	.word	0x2000005c

08007134 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 800713c:	2181      	movs	r1, #129	@ 0x81
 800713e:	4812      	ldr	r0, [pc, #72]	@ (8007188 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8007140:	f002 fa21 	bl	8009586 <USBD_GetEpDesc>
 8007144:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8007146:	2101      	movs	r1, #1
 8007148:	480f      	ldr	r0, [pc, #60]	@ (8007188 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 800714a:	f002 fa1c 	bl	8009586 <USBD_GetEpDesc>
 800714e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d006      	beq.n	8007164 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800715e:	711a      	strb	r2, [r3, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007172:	711a      	strb	r2, [r3, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 800717e:	4b02      	ldr	r3, [pc, #8]	@ (8007188 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	2000005c 	.word	0x2000005c

0800718c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	220a      	movs	r2, #10
 8007198:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800719a:	4b03      	ldr	r3, [pc, #12]	@ (80071a8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	2000007c 	.word	0x2000007c

080071ac <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80071bc:	2303      	movs	r3, #3
 80071be:	e009      	b.n	80071d4 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	33b0      	adds	r3, #176	@ 0xb0
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	32b0      	adds	r2, #176	@ 0xb0
 80071f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d032      	beq.n	8007264 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
  hmsc->scsi_sense_head = 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	33b0      	adds	r3, #176	@ 0xb0
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2000      	movs	r0, #0
 8007236:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8007238:	4b0c      	ldr	r3, [pc, #48]	@ (800726c <MSC_BOT_Init+0x8c>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f007 fa06 	bl	800e650 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8007244:	4b0a      	ldr	r3, [pc, #40]	@ (8007270 <MSC_BOT_Init+0x90>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f007 fa00 	bl	800e650 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8007250:	4b06      	ldr	r3, [pc, #24]	@ (800726c <MSC_BOT_Init+0x8c>)
 8007252:	7819      	ldrb	r1, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 800725a:	231f      	movs	r3, #31
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f007 fac0 	bl	800e7e2 <USBD_LL_PrepareReceive>
 8007262:	e000      	b.n	8007266 <MSC_BOT_Init+0x86>
    return;
 8007264:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000087 	.word	0x20000087
 8007270:	20000086 	.word	0x20000086

08007274 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	32b0      	adds	r2, #176	@ 0xb0
 8007286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d01b      	beq.n	80072ca <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 800729e:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <MSC_BOT_Reset+0x60>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f007 fa11 	bl	800e6cc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80072aa:	4b0b      	ldr	r3, [pc, #44]	@ (80072d8 <MSC_BOT_Reset+0x64>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f007 fa0b 	bl	800e6cc <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80072b6:	4b08      	ldr	r3, [pc, #32]	@ (80072d8 <MSC_BOT_Reset+0x64>)
 80072b8:	7819      	ldrb	r1, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80072c0:	231f      	movs	r3, #31
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f007 fa8d 	bl	800e7e2 <USBD_LL_PrepareReceive>
 80072c8:	e000      	b.n	80072cc <MSC_BOT_Reset+0x58>
    return;
 80072ca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000086 	.word	0x20000086
 80072d8:	20000087 	.word	0x20000087

080072dc <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	32b0      	adds	r2, #176	@ 0xb0
 80072ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	721a      	strb	r2, [r3, #8]
  }
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	32b0      	adds	r2, #176	@ 0xb0
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d020      	beq.n	8007370 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	7a1b      	ldrb	r3, [r3, #8]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d005      	beq.n	8007342 <MSC_BOT_DataIn+0x36>
 8007336:	2b02      	cmp	r3, #2
 8007338:	db1c      	blt.n	8007374 <MSC_BOT_DataIn+0x68>
 800733a:	3b03      	subs	r3, #3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d819      	bhi.n	8007374 <MSC_BOT_DataIn+0x68>
 8007340:	e011      	b.n	8007366 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800734e:	461a      	mov	r2, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9cb 	bl	80076ec <SCSI_ProcessCmd>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	da0d      	bge.n	8007378 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800735c:	2101      	movs	r1, #1
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f90e 	bl	8007580 <MSC_BOT_SendCSW>
      }
      break;
 8007364:	e008      	b.n	8007378 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007366:	2100      	movs	r1, #0
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f909 	bl	8007580 <MSC_BOT_SendCSW>
      break;
 800736e:	e004      	b.n	800737a <MSC_BOT_DataIn+0x6e>
    return;
 8007370:	bf00      	nop
 8007372:	e002      	b.n	800737a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8007374:	bf00      	nop
 8007376:	e000      	b.n	800737a <MSC_BOT_DataIn+0x6e>
      break;
 8007378:	bf00      	nop
  }
}
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	32b0      	adds	r2, #176	@ 0xb0
 8007396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01c      	beq.n	80073dc <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	7a1b      	ldrb	r3, [r3, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <MSC_BOT_DataOut+0x30>
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d004      	beq.n	80073b8 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80073ae:	e018      	b.n	80073e2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f819 	bl	80073e8 <MSC_BOT_CBW_Decode>
      break;
 80073b6:	e014      	b.n	80073e2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 80073c4:	461a      	mov	r2, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f990 	bl	80076ec <SCSI_ProcessCmd>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da06      	bge.n	80073e0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80073d2:	2101      	movs	r1, #1
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f8d3 	bl	8007580 <MSC_BOT_SendCSW>
      break;
 80073da:	e001      	b.n	80073e0 <MSC_BOT_DataOut+0x60>
    return;
 80073dc:	bf00      	nop
 80073de:	e000      	b.n	80073e2 <MSC_BOT_DataOut+0x62>
      break;
 80073e0:	bf00      	nop
  }
}
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32b0      	adds	r2, #176	@ 0xb0
 80073fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fe:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d07c      	beq.n	8007500 <MSC_BOT_CBW_Decode+0x118>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 800741e:	4b3b      	ldr	r3, [pc, #236]	@ (800750c <MSC_BOT_CBW_Decode+0x124>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	4619      	mov	r1, r3
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f007 f9fd 	bl	800e824 <USBD_LL_GetRxDataSize>
 800742a:	4603      	mov	r3, r0
 800742c:	2b1f      	cmp	r3, #31
 800742e:	d117      	bne.n	8007460 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8007436:	4a36      	ldr	r2, [pc, #216]	@ (8007510 <MSC_BOT_CBW_Decode+0x128>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d111      	bne.n	8007460 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 321d 	ldrb.w	r3, [r3, #541]	@ 0x21d
 8007442:	461a      	mov	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007448:	429a      	cmp	r2, r3
 800744a:	d809      	bhi.n	8007460 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <MSC_BOT_CBW_Decode+0x78>
      (hmsc->cbw.bCBLength > 16U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f893 321e 	ldrb.w	r3, [r3, #542]	@ 0x21e
      (hmsc->cbw.bLUN > hmsc->max_lun) || (hmsc->cbw.bCBLength < 1U) ||
 800745c:	2b10      	cmp	r3, #16
 800745e:	d90e      	bls.n	800747e <MSC_BOT_CBW_Decode+0x96>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007466:	2320      	movs	r3, #32
 8007468:	2205      	movs	r2, #5
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fe85 	bl	800817a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2202      	movs	r2, #2
 8007474:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f8bc 	bl	80075f4 <MSC_BOT_Abort>
 800747c:	e043      	b.n	8007506 <MSC_BOT_CBW_Decode+0x11e>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f203 231f 	addw	r3, r3, #543	@ 0x21f
 800748a:	461a      	mov	r2, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f92d 	bl	80076ec <SCSI_ProcessCmd>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	da0c      	bge.n	80074b2 <MSC_BOT_CBW_Decode+0xca>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	7a1b      	ldrb	r3, [r3, #8]
 800749c:	2b05      	cmp	r3, #5
 800749e:	d104      	bne.n	80074aa <MSC_BOT_CBW_Decode+0xc2>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80074a0:	2101      	movs	r1, #1
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f86c 	bl	8007580 <MSC_BOT_SendCSW>
 80074a8:	e02d      	b.n	8007506 <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8a2 	bl	80075f4 <MSC_BOT_Abort>
 80074b0:	e029      	b.n	8007506 <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	7a1b      	ldrb	r3, [r3, #8]
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d024      	beq.n	8007504 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d020      	beq.n	8007504 <MSC_BOT_CBW_Decode+0x11c>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d01c      	beq.n	8007504 <MSC_BOT_CBW_Decode+0x11c>
    {
      if (hmsc->bot_data_length > 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d009      	beq.n	80074e6 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f103 0110 	add.w	r1, r3, #16
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	461a      	mov	r2, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f818 	bl	8007514 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80074e4:	e00f      	b.n	8007506 <MSC_BOT_CBW_Decode+0x11e>
      }
      else if (hmsc->bot_data_length == 0U)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d104      	bne.n	80074f8 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f845 	bl	8007580 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80074f6:	e006      	b.n	8007506 <MSC_BOT_CBW_Decode+0x11e>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 f87b 	bl	80075f4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80074fe:	e002      	b.n	8007506 <MSC_BOT_CBW_Decode+0x11e>
    return;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <MSC_BOT_CBW_Decode+0x11e>
      }
    }
    else
    {
      return;
 8007504:	bf00      	nop
    }
  }
}
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000087 	.word	0x20000087
 8007510:	43425355 	.word	0x43425355

08007514 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	32b0      	adds	r2, #176	@ 0xb0
 800752a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01e      	beq.n	8007574 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	4293      	cmp	r3, r2
 8007540:	bf28      	it	cs
 8007542:	4613      	movcs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	1ad2      	subs	r2, r2, r3
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2204      	movs	r2, #4
 8007562:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8007564:	4b05      	ldr	r3, [pc, #20]	@ (800757c <MSC_BOT_SendData+0x68>)
 8007566:	7819      	ldrb	r1, [r3, #0]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f007 f917 	bl	800e7a0 <USBD_LL_Transmit>
 8007572:	e000      	b.n	8007576 <MSC_BOT_SendData+0x62>
    return;
 8007574:	bf00      	nop
}
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000086 	.word	0x20000086

08007580 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	32b0      	adds	r2, #176	@ 0xb0
 8007596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01d      	beq.n	80075de <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4a10      	ldr	r2, [pc, #64]	@ (80075e8 <MSC_BOT_SendCSW+0x68>)
 80075a6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
  hmsc->csw.bStatus = CSW_Status;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	78fa      	ldrb	r2, [r7, #3]
 80075ae:	f883 223c 	strb.w	r2, [r3, #572]	@ 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80075b8:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <MSC_BOT_SendCSW+0x6c>)
 80075ba:	7819      	ldrb	r1, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 720c 	add.w	r2, r3, #560	@ 0x230
 80075c2:	230d      	movs	r3, #13
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f007 f8eb 	bl	800e7a0 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80075ca:	4b09      	ldr	r3, [pc, #36]	@ (80075f0 <MSC_BOT_SendCSW+0x70>)
 80075cc:	7819      	ldrb	r1, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 7204 	add.w	r2, r3, #528	@ 0x210
 80075d4:	231f      	movs	r3, #31
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f007 f903 	bl	800e7e2 <USBD_LL_PrepareReceive>
 80075dc:	e000      	b.n	80075e0 <MSC_BOT_SendCSW+0x60>
    return;
 80075de:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	53425355 	.word	0x53425355
 80075ec:	20000086 	.word	0x20000086
 80075f0:	20000087 	.word	0x20000087

080075f4 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32b0      	adds	r2, #176	@ 0xb0
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d02a      	beq.n	8007668 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10e      	bne.n	800763a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007622:	2b00      	cmp	r3, #0
 8007624:	d009      	beq.n	800763a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800762a:	2b00      	cmp	r3, #0
 800762c:	d105      	bne.n	800763a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800762e:	4b10      	ldr	r3, [pc, #64]	@ (8007670 <MSC_BOT_Abort+0x7c>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f007 f82a 	bl	800e68e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800763a:	4b0e      	ldr	r3, [pc, #56]	@ (8007674 <MSC_BOT_Abort+0x80>)
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f007 f824 	bl	800e68e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	7a5b      	ldrb	r3, [r3, #9]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d10d      	bne.n	800766a <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 800764e:	4b09      	ldr	r3, [pc, #36]	@ (8007674 <MSC_BOT_Abort+0x80>)
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f007 f81a 	bl	800e68e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 800765a:	4b05      	ldr	r3, [pc, #20]	@ (8007670 <MSC_BOT_Abort+0x7c>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f007 f814 	bl	800e68e <USBD_LL_StallEP>
 8007666:	e000      	b.n	800766a <MSC_BOT_Abort+0x76>
    return;
 8007668:	bf00      	nop
  }
}
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000087 	.word	0x20000087
 8007674:	20000086 	.word	0x20000086

08007678 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32b0      	adds	r2, #176	@ 0xb0
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d01d      	beq.n	80076d6 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	7a5b      	ldrb	r3, [r3, #9]
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d10c      	bne.n	80076bc <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80076a2:	4b10      	ldr	r3, [pc, #64]	@ (80076e4 <MSC_BOT_CplClrFeature+0x6c>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f006 fff0 	bl	800e68e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80076ae:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <MSC_BOT_CplClrFeature+0x70>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	4619      	mov	r1, r3
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f006 ffea 	bl	800e68e <USBD_LL_StallEP>
 80076ba:	e00f      	b.n	80076dc <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80076bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	da0a      	bge.n	80076da <MSC_BOT_CplClrFeature+0x62>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	7a5b      	ldrb	r3, [r3, #9]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d006      	beq.n	80076da <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80076cc:	2101      	movs	r1, #1
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff ff56 	bl	8007580 <MSC_BOT_SendCSW>
 80076d4:	e002      	b.n	80076dc <MSC_BOT_CplClrFeature+0x64>
    return;
 80076d6:	bf00      	nop
 80076d8:	e000      	b.n	80076dc <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80076da:	bf00      	nop
  }
}
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	20000086 	.word	0x20000086
 80076e8:	20000087 	.word	0x20000087

080076ec <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	460b      	mov	r3, r1
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	32b0      	adds	r2, #176	@ 0xb0
 8007704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007708:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8007710:	f04f 33ff 	mov.w	r3, #4294967295
 8007714:	e18f      	b.n	8007a36 <SCSI_ProcessCmd+0x34a>
  }

  switch (cmd[0])
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	2b5a      	cmp	r3, #90	@ 0x5a
 800771c:	f300 80e0 	bgt.w	80078e0 <SCSI_ProcessCmd+0x1f4>
 8007720:	2b00      	cmp	r3, #0
 8007722:	da21      	bge.n	8007768 <SCSI_ProcessCmd+0x7c>
 8007724:	e17c      	b.n	8007a20 <SCSI_ProcessCmd+0x334>
 8007726:	3b9e      	subs	r3, #158	@ 0x9e
 8007728:	2b0c      	cmp	r3, #12
 800772a:	f200 8179 	bhi.w	8007a20 <SCSI_ProcessCmd+0x334>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <SCSI_ProcessCmd+0x48>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007991 	.word	0x08007991
 8007738:	08007a21 	.word	0x08007a21
 800773c:	080079fd 	.word	0x080079fd
 8007740:	08007a21 	.word	0x08007a21
 8007744:	08007a21 	.word	0x08007a21
 8007748:	08007a21 	.word	0x08007a21
 800774c:	08007a21 	.word	0x08007a21
 8007750:	08007a21 	.word	0x08007a21
 8007754:	08007a21 	.word	0x08007a21
 8007758:	08007a21 	.word	0x08007a21
 800775c:	080079b5 	.word	0x080079b5
 8007760:	08007a21 	.word	0x08007a21
 8007764:	080079d9 	.word	0x080079d9
 8007768:	2b5a      	cmp	r3, #90	@ 0x5a
 800776a:	f200 8159 	bhi.w	8007a20 <SCSI_ProcessCmd+0x334>
 800776e:	a201      	add	r2, pc, #4	@ (adr r2, 8007774 <SCSI_ProcessCmd+0x88>)
 8007770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007774:	080078ef 	.word	0x080078ef
 8007778:	08007a21 	.word	0x08007a21
 800777c:	08007a21 	.word	0x08007a21
 8007780:	08007901 	.word	0x08007901
 8007784:	08007a21 	.word	0x08007a21
 8007788:	08007a21 	.word	0x08007a21
 800778c:	08007a21 	.word	0x08007a21
 8007790:	08007a21 	.word	0x08007a21
 8007794:	08007a21 	.word	0x08007a21
 8007798:	08007a21 	.word	0x08007a21
 800779c:	08007a21 	.word	0x08007a21
 80077a0:	08007a21 	.word	0x08007a21
 80077a4:	08007a21 	.word	0x08007a21
 80077a8:	08007a21 	.word	0x08007a21
 80077ac:	08007a21 	.word	0x08007a21
 80077b0:	08007a21 	.word	0x08007a21
 80077b4:	08007a21 	.word	0x08007a21
 80077b8:	08007a21 	.word	0x08007a21
 80077bc:	08007913 	.word	0x08007913
 80077c0:	08007a21 	.word	0x08007a21
 80077c4:	08007a21 	.word	0x08007a21
 80077c8:	08007a21 	.word	0x08007a21
 80077cc:	08007a21 	.word	0x08007a21
 80077d0:	08007a21 	.word	0x08007a21
 80077d4:	08007a21 	.word	0x08007a21
 80077d8:	08007a21 	.word	0x08007a21
 80077dc:	08007949 	.word	0x08007949
 80077e0:	08007925 	.word	0x08007925
 80077e4:	08007a0f 	.word	0x08007a0f
 80077e8:	08007a21 	.word	0x08007a21
 80077ec:	08007937 	.word	0x08007937
 80077f0:	08007a21 	.word	0x08007a21
 80077f4:	08007a21 	.word	0x08007a21
 80077f8:	08007a21 	.word	0x08007a21
 80077fc:	08007a21 	.word	0x08007a21
 8007800:	0800796d 	.word	0x0800796d
 8007804:	08007a21 	.word	0x08007a21
 8007808:	0800797f 	.word	0x0800797f
 800780c:	08007a21 	.word	0x08007a21
 8007810:	08007a21 	.word	0x08007a21
 8007814:	080079a3 	.word	0x080079a3
 8007818:	08007a21 	.word	0x08007a21
 800781c:	080079c7 	.word	0x080079c7
 8007820:	08007a21 	.word	0x08007a21
 8007824:	08007a21 	.word	0x08007a21
 8007828:	08007a21 	.word	0x08007a21
 800782c:	08007a21 	.word	0x08007a21
 8007830:	080079eb 	.word	0x080079eb
 8007834:	08007a21 	.word	0x08007a21
 8007838:	08007a21 	.word	0x08007a21
 800783c:	08007a21 	.word	0x08007a21
 8007840:	08007a21 	.word	0x08007a21
 8007844:	08007a21 	.word	0x08007a21
 8007848:	08007a21 	.word	0x08007a21
 800784c:	08007a21 	.word	0x08007a21
 8007850:	08007a21 	.word	0x08007a21
 8007854:	08007a21 	.word	0x08007a21
 8007858:	08007a21 	.word	0x08007a21
 800785c:	08007a21 	.word	0x08007a21
 8007860:	08007a21 	.word	0x08007a21
 8007864:	08007a21 	.word	0x08007a21
 8007868:	08007a21 	.word	0x08007a21
 800786c:	08007a21 	.word	0x08007a21
 8007870:	08007a21 	.word	0x08007a21
 8007874:	08007a21 	.word	0x08007a21
 8007878:	08007a21 	.word	0x08007a21
 800787c:	08007a21 	.word	0x08007a21
 8007880:	08007a21 	.word	0x08007a21
 8007884:	08007a21 	.word	0x08007a21
 8007888:	08007a21 	.word	0x08007a21
 800788c:	08007a21 	.word	0x08007a21
 8007890:	08007a21 	.word	0x08007a21
 8007894:	08007a21 	.word	0x08007a21
 8007898:	08007a21 	.word	0x08007a21
 800789c:	08007a21 	.word	0x08007a21
 80078a0:	08007a21 	.word	0x08007a21
 80078a4:	08007a21 	.word	0x08007a21
 80078a8:	08007a21 	.word	0x08007a21
 80078ac:	08007a21 	.word	0x08007a21
 80078b0:	08007a21 	.word	0x08007a21
 80078b4:	08007a21 	.word	0x08007a21
 80078b8:	08007a21 	.word	0x08007a21
 80078bc:	08007a21 	.word	0x08007a21
 80078c0:	08007a21 	.word	0x08007a21
 80078c4:	08007a21 	.word	0x08007a21
 80078c8:	08007a21 	.word	0x08007a21
 80078cc:	08007a21 	.word	0x08007a21
 80078d0:	08007a21 	.word	0x08007a21
 80078d4:	08007a21 	.word	0x08007a21
 80078d8:	08007a21 	.word	0x08007a21
 80078dc:	0800795b 	.word	0x0800795b
 80078e0:	2baa      	cmp	r3, #170	@ 0xaa
 80078e2:	f300 809d 	bgt.w	8007a20 <SCSI_ProcessCmd+0x334>
 80078e6:	2b9e      	cmp	r3, #158	@ 0x9e
 80078e8:	f6bf af1d 	bge.w	8007726 <SCSI_ProcessCmd+0x3a>
 80078ec:	e098      	b.n	8007a20 <SCSI_ProcessCmd+0x334>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80078ee:	7afb      	ldrb	r3, [r7, #11]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4619      	mov	r1, r3
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f8a3 	bl	8007a40 <SCSI_TestUnitReady>
 80078fa:	4603      	mov	r3, r0
 80078fc:	75fb      	strb	r3, [r7, #23]
      break;
 80078fe:	e098      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	4619      	mov	r1, r3
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 fbb4 	bl	8008074 <SCSI_RequestSense>
 800790c:	4603      	mov	r3, r0
 800790e:	75fb      	strb	r3, [r7, #23]
      break;
 8007910:	e08f      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8007912:	7afb      	ldrb	r3, [r7, #11]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	4619      	mov	r1, r3
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 f8eb 	bl	8007af4 <SCSI_Inquiry>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]
      break;
 8007922:	e086      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f000 fc70 	bl	8008210 <SCSI_StartStopUnit>
 8007930:	4603      	mov	r3, r0
 8007932:	75fb      	strb	r3, [r7, #23]
      break;
 8007934:	e07d      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007936:	7afb      	ldrb	r3, [r7, #11]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	4619      	mov	r1, r3
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 fcbc 	bl	80082ba <SCSI_AllowPreventRemovable>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]
      break;
 8007946:	e074      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007948:	7afb      	ldrb	r3, [r7, #11]
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	4619      	mov	r1, r3
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f000 faf2 	bl	8007f38 <SCSI_ModeSense6>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]
      break;
 8007958:	e06b      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4619      	mov	r1, r3
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 fb39 	bl	8007fd8 <SCSI_ModeSense10>
 8007966:	4603      	mov	r3, r0
 8007968:	75fb      	strb	r3, [r7, #23]
      break;
 800796a:	e062      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800796c:	7afb      	ldrb	r3, [r7, #11]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	4619      	mov	r1, r3
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f000 fa64 	bl	8007e40 <SCSI_ReadFormatCapacity>
 8007978:	4603      	mov	r3, r0
 800797a:	75fb      	strb	r3, [r7, #23]
      break;
 800797c:	e059      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800797e:	7afb      	ldrb	r3, [r7, #11]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f931 	bl	8007bec <SCSI_ReadCapacity10>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]
      break;
 800798e:	e050      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007990:	7afb      	ldrb	r3, [r7, #11]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4619      	mov	r1, r3
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f9a2 	bl	8007ce0 <SCSI_ReadCapacity16>
 800799c:	4603      	mov	r3, r0
 800799e:	75fb      	strb	r3, [r7, #23]
      break;
 80079a0:	e047      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80079a2:	7afb      	ldrb	r3, [r7, #11]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	4619      	mov	r1, r3
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fcb3 	bl	8008314 <SCSI_Read10>
 80079ae:	4603      	mov	r3, r0
 80079b0:	75fb      	strb	r3, [r7, #23]
      break;
 80079b2:	e03e      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	4619      	mov	r1, r3
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 fd54 	bl	8008468 <SCSI_Read12>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75fb      	strb	r3, [r7, #23]
      break;
 80079c4:	e035      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80079c6:	7afb      	ldrb	r3, [r7, #11]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	4619      	mov	r1, r3
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 fe01 	bl	80085d4 <SCSI_Write10>
 80079d2:	4603      	mov	r3, r0
 80079d4:	75fb      	strb	r3, [r7, #23]
      break;
 80079d6:	e02c      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4619      	mov	r1, r3
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fed0 	bl	8008784 <SCSI_Write12>
 80079e4:	4603      	mov	r3, r0
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	e023      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80079ea:	7afb      	ldrb	r3, [r7, #11]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	4619      	mov	r1, r3
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 ffaf 	bl	8008954 <SCSI_Verify10>
 80079f6:	4603      	mov	r3, r0
 80079f8:	75fb      	strb	r3, [r7, #23]
      break;
 80079fa:	e01a      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_REPORT_LUNS:
      ret = SCSI_ReportLuns(pdev, lun, cmd);
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4619      	mov	r1, r3
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 ffe8 	bl	80089d8 <SCSI_ReportLuns>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a0c:	e011      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    case SCSI_RECEIVE_DIAGNOSTIC_RESULTS:
      ret = SCSI_ReceiveDiagnosticResults(pdev, lun, cmd);
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	4619      	mov	r1, r3
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f001 f835 	bl	8008a84 <SCSI_ReceiveDiagnosticResults>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1e:	e008      	b.n	8007a32 <SCSI_ProcessCmd+0x346>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007a20:	7af9      	ldrb	r1, [r7, #11]
 8007a22:	2320      	movs	r3, #32
 8007a24:	2205      	movs	r2, #5
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fba7 	bl	800817a <SCSI_SenseCode>
      ret = -1;
 8007a2c:	23ff      	movs	r3, #255	@ 0xff
 8007a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a30:	bf00      	nop
  }

  return ret;
 8007a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop

08007a40 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	32b0      	adds	r2, #176	@ 0xb0
 8007a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295
 8007a68:	e03f      	b.n	8007aea <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00a      	beq.n	8007a8a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007a7a:	2320      	movs	r3, #32
 8007a7c:	2205      	movs	r2, #5
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fb7b 	bl	800817a <SCSI_SenseCode>

    return -1;
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295
 8007a88:	e02f      	b.n	8007aea <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d10b      	bne.n	8007aac <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007a94:	7af9      	ldrb	r1, [r7, #11]
 8007a96:	233a      	movs	r3, #58	@ 0x3a
 8007a98:	2202      	movs	r2, #2
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 fb6d 	bl	800817a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2205      	movs	r2, #5
 8007aa4:	721a      	strb	r2, [r3, #8]
    return -1;
 8007aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007aaa:	e01e      	b.n	8007aea <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	33b0      	adds	r3, #176	@ 0xb0
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	7afa      	ldrb	r2, [r7, #11]
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	4798      	blx	r3
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007aca:	7af9      	ldrb	r1, [r7, #11]
 8007acc:	233a      	movs	r3, #58	@ 0x3a
 8007ace:	2202      	movs	r2, #2
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fb52 	bl	800817a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	2205      	movs	r2, #5
 8007ada:	721a      	strb	r2, [r3, #8]

    return -1;
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	e003      	b.n	8007aea <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	60da      	str	r2, [r3, #12]

  return 0;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	460b      	mov	r3, r1
 8007afe:	607a      	str	r2, [r7, #4]
 8007b00:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	32b0      	adds	r2, #176	@ 0xb0
 8007b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b10:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d102      	bne.n	8007b1e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8007b18:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1c:	e05e      	b.n	8007bdc <SCSI_Inquiry+0xe8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10a      	bne.n	8007b3e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007b2e:	2320      	movs	r3, #32
 8007b30:	2205      	movs	r2, #5
 8007b32:	68f8      	ldr	r0, [r7, #12]
 8007b34:	f000 fb21 	bl	800817a <SCSI_SenseCode>
    return -1;
 8007b38:	f04f 33ff 	mov.w	r3, #4294967295
 8007b3c:	e04e      	b.n	8007bdc <SCSI_Inquiry+0xe8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3301      	adds	r3, #1
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 0301 	and.w	r3, r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d020      	beq.n	8007b8e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	3302      	adds	r3, #2
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007b56:	2206      	movs	r2, #6
 8007b58:	4922      	ldr	r1, [pc, #136]	@ (8007be4 <SCSI_Inquiry+0xf0>)
 8007b5a:	69b8      	ldr	r0, [r7, #24]
 8007b5c:	f001 f908 	bl	8008d70 <SCSI_UpdateBotData>
 8007b60:	e03b      	b.n	8007bda <SCSI_Inquiry+0xe6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3302      	adds	r3, #2
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b80      	cmp	r3, #128	@ 0x80
 8007b6a:	d105      	bne.n	8007b78 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007b6c:	2208      	movs	r2, #8
 8007b6e:	491e      	ldr	r1, [pc, #120]	@ (8007be8 <SCSI_Inquiry+0xf4>)
 8007b70:	69b8      	ldr	r0, [r7, #24]
 8007b72:	f001 f8fd 	bl	8008d70 <SCSI_UpdateBotData>
 8007b76:	e030      	b.n	8007bda <SCSI_Inquiry+0xe6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8007b7e:	2324      	movs	r3, #36	@ 0x24
 8007b80:	2205      	movs	r2, #5
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 faf9 	bl	800817a <SCSI_SenseCode>
                     INVALID_FIELD_IN_COMMAND);

      return -1;
 8007b88:	f04f 33ff 	mov.w	r3, #4294967295
 8007b8c:	e026      	b.n	8007bdc <SCSI_Inquiry+0xe8>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	33b0      	adds	r3, #176	@ 0xb0
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	685b      	ldr	r3, [r3, #4]
            ->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007b9e:	69d9      	ldr	r1, [r3, #28]
 8007ba0:	7afa      	ldrb	r2, [r7, #11]
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	00db      	lsls	r3, r3, #3
 8007ba6:	4413      	add	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId]) \
 8007baa:	440b      	add	r3, r1
 8007bac:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	3305      	adds	r3, #5
 8007bb6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	8bfb      	ldrh	r3, [r7, #30]
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d303      	bcc.n	8007bce <SCSI_Inquiry+0xda>
    {
      len = params[4];
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3304      	adds	r3, #4
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007bce:	8bfb      	ldrh	r3, [r7, #30]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	6979      	ldr	r1, [r7, #20]
 8007bd4:	69b8      	ldr	r0, [r7, #24]
 8007bd6:	f001 f8cb 	bl	8008d70 <SCSI_UpdateBotData>
  }

  return 0;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3720      	adds	r7, #32
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000088 	.word	0x20000088
 8007be8:	20000090 	.word	0x20000090

08007bec <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	32b0      	adds	r2, #176	@ 0xb0
 8007c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c08:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	3326      	adds	r3, #38	@ 0x26
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	4413      	add	r3, r2
 8007c14:	3304      	adds	r3, #4
 8007c16:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <SCSI_ReadCapacity10+0x38>
  {
    return -1;
 8007c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c22:	e059      	b.n	8007cd8 <SCSI_ReadCapacity10+0xec>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c2a:	68fa      	ldr	r2, [r7, #12]
 8007c2c:	33b0      	adds	r3, #176	@ 0xb0
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4413      	add	r3, r2
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	1d11      	adds	r1, r2, #4
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	7af8      	ldrb	r0, [r7, #11]
 8007c3e:	4798      	blx	r3
 8007c40:	4603      	mov	r3, r0
 8007c42:	75fb      	strb	r3, [r7, #23]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007c44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d104      	bne.n	8007c56 <SCSI_ReadCapacity10+0x6a>
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d108      	bne.n	8007c68 <SCSI_ReadCapacity10+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c56:	7af9      	ldrb	r1, [r7, #11]
 8007c58:	233a      	movs	r3, #58	@ 0x3a
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fa8c 	bl	800817a <SCSI_SenseCode>
    return -1;
 8007c62:	f04f 33ff 	mov.w	r3, #4294967295
 8007c66:	e037      	b.n	8007cd8 <SCSI_ReadCapacity10+0xec>
  }

  hmsc->bot_data[0] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	0e1b      	lsrs	r3, r3, #24
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	0c1b      	lsrs	r3, r3, #16
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	0a1b      	lsrs	r3, r3, #8
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(p_scsi_blk->size >> 24);
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	161b      	asrs	r3, r3, #24
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(p_scsi_blk->size >> 16);
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	141b      	asrs	r3, r3, #16
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	69fb      	ldr	r3, [r7, #28]
 8007cb6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(p_scsi_blk->size >> 8);
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	0a1b      	lsrs	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->size);
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	2208      	movs	r2, #8
 8007cd4:	60da      	str	r2, [r3, #12]

  return 0;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint32_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	32b0      	adds	r2, #176	@ 0xb0
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	61bb      	str	r3, [r7, #24]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	3326      	adds	r3, #38	@ 0x26
 8007d02:	011b      	lsls	r3, r3, #4
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4413      	add	r3, r2
 8007d08:	3304      	adds	r3, #4
 8007d0a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d102      	bne.n	8007d18 <SCSI_ReadCapacity16+0x38>
  {
    return -1;
 8007d12:	f04f 33ff 	mov.w	r3, #4294967295
 8007d16:	e08f      	b.n	8007e38 <SCSI_ReadCapacity16+0x158>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &p_scsi_blk->nbr,
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	33b0      	adds	r3, #176	@ 0xb0
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	1d11      	adds	r1, r2, #4
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	7af8      	ldrb	r0, [r7, #11]
 8007d32:	4798      	blx	r3
 8007d34:	4603      	mov	r3, r0
 8007d36:	74fb      	strb	r3, [r7, #19]
                                                                             &p_scsi_blk->size);

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007d38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <SCSI_ReadCapacity16+0x6a>
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d108      	bne.n	8007d5c <SCSI_ReadCapacity16+0x7c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d4a:	7af9      	ldrb	r1, [r7, #11]
 8007d4c:	233a      	movs	r3, #58	@ 0x3a
 8007d4e:	2202      	movs	r2, #2
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fa12 	bl	800817a <SCSI_SenseCode>
    return -1;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5a:	e06d      	b.n	8007e38 <SCSI_ReadCapacity16+0x158>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	330a      	adds	r3, #10
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	330b      	adds	r3, #11
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007d6c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	330c      	adds	r3, #12
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007d76:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	320d      	adds	r2, #13
 8007d7c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007d7e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007d84:	2300      	movs	r3, #0
 8007d86:	61fb      	str	r3, [r7, #28]
 8007d88:	e008      	b.n	8007d9c <SCSI_ReadCapacity16+0xbc>
  {
    hmsc->bot_data[idx] = 0U;
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	4413      	add	r3, r2
 8007d90:	3310      	adds	r3, #16
 8007d92:	2200      	movs	r2, #0
 8007d94:	701a      	strb	r2, [r3, #0]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	61fb      	str	r3, [r7, #28]
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d3f1      	bcc.n	8007d8a <SCSI_ReadCapacity16+0xaa>
  }

  hmsc->bot_data[4] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 24);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	0e1b      	lsrs	r3, r3, #24
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((p_scsi_blk->nbr - 1U) >> 16);
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	0c1b      	lsrs	r3, r3, #16
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((p_scsi_blk->nbr - 1U) >>  8);
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	0a1b      	lsrs	r3, r3, #8
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(p_scsi_blk->nbr - 1U);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(p_scsi_blk->size >>  24);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	161b      	asrs	r3, r3, #24
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(p_scsi_blk->size >>  16);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	881b      	ldrh	r3, [r3, #0]
 8007dee:	141b      	asrs	r3, r3, #16
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(p_scsi_blk->size >>  8);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	881b      	ldrh	r3, [r3, #0]
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(p_scsi_blk->size);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	330a      	adds	r3, #10
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	330b      	adds	r3, #11
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007e1e:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	330c      	adds	r3, #12
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007e28:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	320d      	adds	r2, #13
 8007e2e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8007e30:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	60da      	str	r2, [r3, #12]

  return 0;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	32b0      	adds	r2, #176	@ 0xb0
 8007e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d102      	bne.n	8007e6a <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8007e64:	f04f 33ff 	mov.w	r3, #4294967295
 8007e68:	e061      	b.n	8007f2e <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	33b0      	adds	r3, #176	@ 0xb0
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f107 0214 	add.w	r2, r7, #20
 8007e80:	f107 0110 	add.w	r1, r7, #16
 8007e84:	7af8      	ldrb	r0, [r7, #11]
 8007e86:	4798      	blx	r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007e8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <SCSI_ReadFormatCapacity+0x5e>
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d108      	bne.n	8007eb0 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007e9e:	7af9      	ldrb	r1, [r7, #11]
 8007ea0:	233a      	movs	r3, #58	@ 0x3a
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f968 	bl	800817a <SCSI_SenseCode>
    return -1;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8007eae:	e03e      	b.n	8007f2e <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	83fb      	strh	r3, [r7, #30]
 8007eb4:	e007      	b.n	8007ec6 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8007eb6:	8bfb      	ldrh	r3, [r7, #30]
 8007eb8:	69ba      	ldr	r2, [r7, #24]
 8007eba:	4413      	add	r3, r2
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8007ec0:	8bfb      	ldrh	r3, [r7, #30]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	83fb      	strh	r3, [r7, #30]
 8007ec6:	8bfb      	ldrh	r3, [r7, #30]
 8007ec8:	2b0b      	cmp	r3, #11
 8007eca:	d9f4      	bls.n	8007eb6 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2208      	movs	r2, #8
 8007ed0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	0e1b      	lsrs	r3, r3, #24
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	0c1b      	lsrs	r3, r3, #16
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	0a1b      	lsrs	r3, r3, #8
 8007ef0:	b2da      	uxtb	r2, r3
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	3b01      	subs	r3, #1
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	2202      	movs	r2, #2
 8007f06:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007f08:	8abb      	ldrh	r3, [r7, #20]
 8007f0a:	141b      	asrs	r3, r3, #16
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007f12:	8abb      	ldrh	r3, [r7, #20]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8007f1e:	8abb      	ldrh	r3, [r7, #20]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	220c      	movs	r2, #12
 8007f2a:	60da      	str	r2, [r3, #12]

  return 0;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3720      	adds	r7, #32
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
	...

08007f38 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	460b      	mov	r3, r1
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	32b0      	adds	r2, #176	@ 0xb0
 8007f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f54:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8007f56:	2304      	movs	r3, #4
 8007f58:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8007f60:	f04f 33ff 	mov.w	r3, #4294967295
 8007f64:	e02f      	b.n	8007fc6 <SCSI_ModeSense6+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	33b0      	adds	r3, #176	@ 0xb0
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4413      	add	r3, r2
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	7afa      	ldrb	r2, [r7, #11]
 8007f7a:	4610      	mov	r0, r2
 8007f7c:	4798      	blx	r3
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <SCSI_ModeSense6+0x5c>
  {
    MSC_Mode_Sense6_data[2] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8007f84:	4b12      	ldr	r3, [pc, #72]	@ (8007fd0 <SCSI_ModeSense6+0x98>)
 8007f86:	789b      	ldrb	r3, [r3, #2]
 8007f88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	4b10      	ldr	r3, [pc, #64]	@ (8007fd0 <SCSI_ModeSense6+0x98>)
 8007f90:	709a      	strb	r2, [r3, #2]
 8007f92:	e006      	b.n	8007fa2 <SCSI_ModeSense6+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[2] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8007f94:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd4 <SCSI_ModeSense6+0x9c>)
 8007f96:	789b      	ldrb	r3, [r3, #2]
 8007f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <SCSI_ModeSense6+0x9c>)
 8007fa0:	709a      	strb	r2, [r3, #2]
  }

  if (params[4] <= len)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	8afb      	ldrh	r3, [r7, #22]
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d303      	bcc.n	8007fb8 <SCSI_ModeSense6+0x80>
  {
    len = params[4];
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007fb8:	8afb      	ldrh	r3, [r7, #22]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4904      	ldr	r1, [pc, #16]	@ (8007fd0 <SCSI_ModeSense6+0x98>)
 8007fbe:	6938      	ldr	r0, [r7, #16]
 8007fc0:	f000 fed6 	bl	8008d70 <SCSI_UpdateBotData>

  return 0;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20000098 	.word	0x20000098
 8007fd4:	2000009c 	.word	0x2000009c

08007fd8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	607a      	str	r2, [r7, #4]
 8007fe4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	32b0      	adds	r2, #176	@ 0xb0
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8008000:	f04f 33ff 	mov.w	r3, #4294967295
 8008004:	e02f      	b.n	8008066 <SCSI_ModeSense10+0x8e>
  }

  /* Check If media is write-protected */
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	33b0      	adds	r3, #176	@ 0xb0
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4413      	add	r3, r2
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	7afa      	ldrb	r2, [r7, #11]
 800801a:	4610      	mov	r0, r2
 800801c:	4798      	blx	r3
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <SCSI_ModeSense10+0x5c>
  {
    MSC_Mode_Sense10_data[3] |= (0x1U << 7); /* Set the WP (write protection) bit */
 8008024:	4b12      	ldr	r3, [pc, #72]	@ (8008070 <SCSI_ModeSense10+0x98>)
 8008026:	78db      	ldrb	r3, [r3, #3]
 8008028:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800802c:	b2da      	uxtb	r2, r3
 800802e:	4b10      	ldr	r3, [pc, #64]	@ (8008070 <SCSI_ModeSense10+0x98>)
 8008030:	70da      	strb	r2, [r3, #3]
 8008032:	e006      	b.n	8008042 <SCSI_ModeSense10+0x6a>
  }
  else
  {
    MSC_Mode_Sense10_data[3] &= ~(0x1U << 7); /* Clear the WP (write protection) bit */
 8008034:	4b0e      	ldr	r3, [pc, #56]	@ (8008070 <SCSI_ModeSense10+0x98>)
 8008036:	78db      	ldrb	r3, [r3, #3]
 8008038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800803c:	b2da      	uxtb	r2, r3
 800803e:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <SCSI_ModeSense10+0x98>)
 8008040:	70da      	strb	r2, [r3, #3]
  }

  if (params[8] <= len)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3308      	adds	r3, #8
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	8afb      	ldrh	r3, [r7, #22]
 800804c:	4293      	cmp	r3, r2
 800804e:	d303      	bcc.n	8008058 <SCSI_ModeSense10+0x80>
  {
    len = params[8];
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	3308      	adds	r3, #8
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8008058:	8afb      	ldrh	r3, [r7, #22]
 800805a:	461a      	mov	r2, r3
 800805c:	4904      	ldr	r1, [pc, #16]	@ (8008070 <SCSI_ModeSense10+0x98>)
 800805e:	6938      	ldr	r0, [r7, #16]
 8008060:	f000 fe86 	bl	8008d70 <SCSI_UpdateBotData>

  return 0;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	2000009c 	.word	0x2000009c

08008074 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	460b      	mov	r3, r1
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	32b0      	adds	r2, #176	@ 0xb0
 800808c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008090:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8008098:	f04f 33ff 	mov.w	r3, #4294967295
 800809c:	e069      	b.n	8008172 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80080ae:	2320      	movs	r3, #32
 80080b0:	2205      	movs	r2, #5
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f861 	bl	800817a <SCSI_SenseCode>
    return -1;
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295
 80080bc:	e059      	b.n	8008172 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]
 80080c2:	e007      	b.n	80080d4 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4413      	add	r3, r2
 80080ca:	2200      	movs	r2, #0
 80080cc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	3301      	adds	r3, #1
 80080d2:	75fb      	strb	r3, [r7, #23]
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b11      	cmp	r3, #17
 80080d8:	d9f4      	bls.n	80080c4 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2270      	movs	r2, #112	@ 0x70
 80080de:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	220c      	movs	r2, #12
 80080e4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	f893 2260 	ldrb.w	r2, [r3, #608]	@ 0x260
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d02e      	beq.n	8008154 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 80080fc:	461a      	mov	r2, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	3248      	adds	r2, #72	@ 0x48
 8008102:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	3348      	adds	r3, #72	@ 0x48
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4413      	add	r3, r2
 8008118:	791a      	ldrb	r2, [r3, #4]
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	3348      	adds	r3, #72	@ 0x48
 8008128:	00db      	lsls	r3, r3, #3
 800812a:	4413      	add	r3, r2
 800812c:	795a      	ldrb	r2, [r3, #5]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8008138:	3301      	adds	r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f893 3260 	ldrb.w	r3, [r3, #608]	@ 0x260
 8008148:	2b04      	cmp	r3, #4
 800814a:	d103      	bne.n	8008154 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2260 	strb.w	r2, [r3, #608]	@ 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2212      	movs	r2, #18
 8008158:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3304      	adds	r3, #4
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	2b12      	cmp	r3, #18
 8008162:	d805      	bhi.n	8008170 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	3304      	adds	r3, #4
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800817a:	b480      	push	{r7}
 800817c:	b085      	sub	sp, #20
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	4608      	mov	r0, r1
 8008184:	4611      	mov	r1, r2
 8008186:	461a      	mov	r2, r3
 8008188:	4603      	mov	r3, r0
 800818a:	70fb      	strb	r3, [r7, #3]
 800818c:	460b      	mov	r3, r1
 800818e:	70bb      	strb	r3, [r7, #2]
 8008190:	4613      	mov	r3, r2
 8008192:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	32b0      	adds	r2, #176	@ 0xb0
 800819e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d02c      	beq.n	8008204 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80081b0:	461a      	mov	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3248      	adds	r2, #72	@ 0x48
 80081b6:	78b9      	ldrb	r1, [r7, #2]
 80081b8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	3348      	adds	r3, #72	@ 0x48
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	4413      	add	r3, r2
 80081ca:	787a      	ldrb	r2, [r7, #1]
 80081cc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	3348      	adds	r3, #72	@ 0x48
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4413      	add	r3, r2
 80081dc:	2200      	movs	r2, #0
 80081de:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f893 3261 	ldrb.w	r3, [r3, #609]	@ 0x261
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	d105      	bne.n	8008206 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2261 	strb.w	r2, [r3, #609]	@ 0x261
 8008202:	e000      	b.n	8008206 <SCSI_SenseCode+0x8c>
    return;
 8008204:	bf00      	nop
  }
}
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	460b      	mov	r3, r1
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	32b0      	adds	r2, #176	@ 0xb0
 8008228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d102      	bne.n	800823a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8008234:	f04f 33ff 	mov.w	r3, #4294967295
 8008238:	e03b      	b.n	80082b2 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 8008240:	2b01      	cmp	r3, #1
 8008242:	d10f      	bne.n	8008264 <SCSI_StartStopUnit+0x54>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	3304      	adds	r3, #4
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d108      	bne.n	8008264 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 8008252:	7af9      	ldrb	r1, [r7, #11]
 8008254:	2324      	movs	r3, #36	@ 0x24
 8008256:	2205      	movs	r2, #5
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff ff8e 	bl	800817a <SCSI_SenseCode>

    return -1;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295
 8008262:	e026      	b.n	80082b2 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3304      	adds	r3, #4
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	f003 0303 	and.w	r3, r3, #3
 800826e:	2b01      	cmp	r3, #1
 8008270:	d104      	bne.n	800827c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 800827a:	e016      	b.n	80082aa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3304      	adds	r3, #4
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b02      	cmp	r3, #2
 8008288:	d104      	bne.n	8008294 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 8008292:	e00a      	b.n	80082aa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d103      	bne.n	80082aa <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2200      	movs	r2, #0
 80082ae:	60da      	str	r2, [r3, #12]

  return 0;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3718      	adds	r7, #24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80082ba:	b480      	push	{r7}
 80082bc:	b087      	sub	sp, #28
 80082be:	af00      	add	r7, sp, #0
 80082c0:	60f8      	str	r0, [r7, #12]
 80082c2:	460b      	mov	r3, r1
 80082c4:	607a      	str	r2, [r7, #4]
 80082c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	32b0      	adds	r2, #176	@ 0xb0
 80082d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d102      	bne.n	80082e4 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	e011      	b.n	8008308 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3304      	adds	r3, #4
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d104      	bne.n	80082f8 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
 80082f6:	e003      	b.n	8008300 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2262 	strb.w	r2, [r3, #610]	@ 0x262
  }

  hmsc->bot_data_length = 0U;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	60da      	str	r2, [r3, #12]

  return 0;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	371c      	adds	r7, #28
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	460b      	mov	r3, r1
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	32b0      	adds	r2, #176	@ 0xb0
 800832c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008330:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008332:	7afb      	ldrb	r3, [r7, #11]
 8008334:	3326      	adds	r3, #38	@ 0x26
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4413      	add	r3, r2
 800833c:	3304      	adds	r3, #4
 800833e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <SCSI_Read10+0x38>
  {
    return -1;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295
 800834a:	e089      	b.n	8008460 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	7a1b      	ldrb	r3, [r3, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d17b      	bne.n	800844c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800835a:	b25b      	sxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	db0a      	blt.n	8008376 <SCSI_Read10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008366:	2320      	movs	r3, #32
 8008368:	2205      	movs	r2, #5
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7ff ff05 	bl	800817a <SCSI_SenseCode>
      return -1;
 8008370:	f04f 33ff 	mov.w	r3, #4294967295
 8008374:	e074      	b.n	8008460 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 800837c:	2b02      	cmp	r3, #2
 800837e:	d108      	bne.n	8008392 <SCSI_Read10+0x7e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008380:	7af9      	ldrb	r1, [r7, #11]
 8008382:	233a      	movs	r3, #58	@ 0x3a
 8008384:	2202      	movs	r2, #2
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f7ff fef7 	bl	800817a <SCSI_SenseCode>

      return -1;
 800838c:	f04f 33ff 	mov.w	r3, #4294967295
 8008390:	e066      	b.n	8008460 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	33b0      	adds	r3, #176	@ 0xb0
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	4413      	add	r3, r2
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	7afa      	ldrb	r2, [r7, #11]
 80083a6:	4610      	mov	r0, r2
 80083a8:	4798      	blx	r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <SCSI_Read10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80083b0:	7af9      	ldrb	r1, [r7, #11]
 80083b2:	233a      	movs	r3, #58	@ 0x3a
 80083b4:	2202      	movs	r2, #2
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f7ff fedf 	bl	800817a <SCSI_SenseCode>
      return -1;
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295
 80083c0:	e04e      	b.n	8008460 <SCSI_Read10+0x14c>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	3302      	adds	r3, #2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	3303      	adds	r3, #3
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80083d2:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3304      	adds	r3, #4
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 80083dc:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	3205      	adds	r2, #5
 80083e2:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 80083e4:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3307      	adds	r3, #7
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	3208      	adds	r2, #8
 80083f6:	7812      	ldrb	r2, [r2, #0]
 80083f8:	431a      	orrs	r2, r3
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	689a      	ldr	r2, [r3, #8]
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	7af9      	ldrb	r1, [r7, #11]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fb6d 	bl	8008ae8 <SCSI_CheckAddressRange>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	da02      	bge.n	800841a <SCSI_Read10+0x106>
    {
      return -1; /* error */
 8008414:	f04f 33ff 	mov.w	r3, #4294967295
 8008418:	e022      	b.n	8008460 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	6939      	ldr	r1, [r7, #16]
 8008426:	8809      	ldrh	r1, [r1, #0]
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	429a      	cmp	r2, r3
 800842e:	d00a      	beq.n	8008446 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008436:	2320      	movs	r3, #32
 8008438:	2205      	movs	r2, #5
 800843a:	68f8      	ldr	r0, [r7, #12]
 800843c:	f7ff fe9d 	bl	800817a <SCSI_SenseCode>
      return -1;
 8008440:	f04f 33ff 	mov.w	r3, #4294967295
 8008444:	e00c      	b.n	8008460 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2202      	movs	r2, #2
 800844a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008452:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	4619      	mov	r1, r3
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 fb77 	bl	8008b4c <SCSI_ProcessRead>
 800845e:	4603      	mov	r3, r0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	460b      	mov	r3, r1
 8008472:	607a      	str	r2, [r7, #4]
 8008474:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	32b0      	adds	r2, #176	@ 0xb0
 8008480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008484:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008486:	7afb      	ldrb	r3, [r7, #11]
 8008488:	3326      	adds	r3, #38	@ 0x26
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4413      	add	r3, r2
 8008490:	3304      	adds	r3, #4
 8008492:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <SCSI_Read12+0x38>
  {
    return -1;
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	e094      	b.n	80085ca <SCSI_Read12+0x162>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	7a1b      	ldrb	r3, [r3, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 8086 	bne.w	80085b6 <SCSI_Read12+0x14e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80084b0:	b25b      	sxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db0a      	blt.n	80084cc <SCSI_Read12+0x64>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80084bc:	2320      	movs	r3, #32
 80084be:	2205      	movs	r2, #5
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f7ff fe5a 	bl	800817a <SCSI_SenseCode>
      return -1;
 80084c6:	f04f 33ff 	mov.w	r3, #4294967295
 80084ca:	e07e      	b.n	80085ca <SCSI_Read12+0x162>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f893 3262 	ldrb.w	r3, [r3, #610]	@ 0x262
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d108      	bne.n	80084e8 <SCSI_Read12+0x80>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80084d6:	7af9      	ldrb	r1, [r7, #11]
 80084d8:	233a      	movs	r3, #58	@ 0x3a
 80084da:	2202      	movs	r2, #2
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fe4c 	bl	800817a <SCSI_SenseCode>
      return -1;
 80084e2:	f04f 33ff 	mov.w	r3, #4294967295
 80084e6:	e070      	b.n	80085ca <SCSI_Read12+0x162>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	33b0      	adds	r3, #176	@ 0xb0
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	4413      	add	r3, r2
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	7afa      	ldrb	r2, [r7, #11]
 80084fc:	4610      	mov	r0, r2
 80084fe:	4798      	blx	r3
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d008      	beq.n	8008518 <SCSI_Read12+0xb0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008506:	7af9      	ldrb	r1, [r7, #11]
 8008508:	233a      	movs	r3, #58	@ 0x3a
 800850a:	2202      	movs	r2, #2
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7ff fe34 	bl	800817a <SCSI_SenseCode>
      return -1;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	e058      	b.n	80085ca <SCSI_Read12+0x162>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3302      	adds	r3, #2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3303      	adds	r3, #3
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008528:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] <<  8) |
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3304      	adds	r3, #4
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 8008532:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	3205      	adds	r2, #5
 8008538:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] <<  8) |
 800853a:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	3306      	adds	r3, #6
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3307      	adds	r3, #7
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008550:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	3308      	adds	r3, #8
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 800855a:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	3209      	adds	r2, #9
 8008560:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 8008562:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	60da      	str	r2, [r3, #12]

    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	7af9      	ldrb	r1, [r7, #11]
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 fab8 	bl	8008ae8 <SCSI_CheckAddressRange>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	da02      	bge.n	8008584 <SCSI_Read12+0x11c>
    {
      return -1; /* error */
 800857e:	f04f 33ff 	mov.w	r3, #4294967295
 8008582:	e022      	b.n	80085ca <SCSI_Read12+0x162>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (p_scsi_blk->len * p_scsi_blk->size))
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	6939      	ldr	r1, [r7, #16]
 8008590:	8809      	ldrh	r1, [r1, #0]
 8008592:	fb01 f303 	mul.w	r3, r1, r3
 8008596:	429a      	cmp	r2, r3
 8008598:	d00a      	beq.n	80085b0 <SCSI_Read12+0x148>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80085a0:	2320      	movs	r3, #32
 80085a2:	2205      	movs	r2, #5
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff fde8 	bl	800817a <SCSI_SenseCode>
      return -1;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	e00c      	b.n	80085ca <SCSI_Read12+0x162>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	2202      	movs	r2, #2
 80085b4:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085bc:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80085be:	7afb      	ldrb	r3, [r7, #11]
 80085c0:	4619      	mov	r1, r3
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fac2 	bl	8008b4c <SCSI_ProcessRead>
 80085c8:	4603      	mov	r3, r0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b088      	sub	sp, #32
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	460b      	mov	r3, r1
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	32b0      	adds	r2, #176	@ 0xb0
 80085ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f0:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	3326      	adds	r3, #38	@ 0x26
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	4413      	add	r3, r2
 80085fc:	3304      	adds	r3, #4
 80085fe:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <SCSI_Write10+0x38>
  {
    return -1;
 8008606:	f04f 33ff 	mov.w	r3, #4294967295
 800860a:	e0b4      	b.n	8008776 <SCSI_Write10+0x1a2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	7a1b      	ldrb	r3, [r3, #8]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 80aa 	bne.w	800876a <SCSI_Write10+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008626:	2320      	movs	r3, #32
 8008628:	2205      	movs	r2, #5
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f7ff fda5 	bl	800817a <SCSI_SenseCode>
      return -1;
 8008630:	f04f 33ff 	mov.w	r3, #4294967295
 8008634:	e09f      	b.n	8008776 <SCSI_Write10+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 800863c:	b25b      	sxtb	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	da0a      	bge.n	8008658 <SCSI_Write10+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008648:	2320      	movs	r3, #32
 800864a:	2205      	movs	r2, #5
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f7ff fd94 	bl	800817a <SCSI_SenseCode>
      return -1;
 8008652:	f04f 33ff 	mov.w	r3, #4294967295
 8008656:	e08e      	b.n	8008776 <SCSI_Write10+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	33b0      	adds	r3, #176	@ 0xb0
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	7afa      	ldrb	r2, [r7, #11]
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d008      	beq.n	8008688 <SCSI_Write10+0xb4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008676:	7af9      	ldrb	r1, [r7, #11]
 8008678:	233a      	movs	r3, #58	@ 0x3a
 800867a:	2202      	movs	r2, #2
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f7ff fd7c 	bl	800817a <SCSI_SenseCode>
      return -1;
 8008682:	f04f 33ff 	mov.w	r3, #4294967295
 8008686:	e076      	b.n	8008776 <SCSI_Write10+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	33b0      	adds	r3, #176	@ 0xb0
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	4413      	add	r3, r2
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	7afa      	ldrb	r2, [r7, #11]
 800869c:	4610      	mov	r0, r2
 800869e:	4798      	blx	r3
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <SCSI_Write10+0xe4>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80086a6:	7af9      	ldrb	r1, [r7, #11]
 80086a8:	2327      	movs	r3, #39	@ 0x27
 80086aa:	2202      	movs	r2, #2
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fd64 	bl	800817a <SCSI_SenseCode>
      return -1;
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295
 80086b6:	e05e      	b.n	8008776 <SCSI_Write10+0x1a2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	3302      	adds	r3, #2
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3303      	adds	r3, #3
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80086c8:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	3304      	adds	r3, #4
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 80086d2:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	3205      	adds	r2, #5
 80086d8:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 80086da:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	3307      	adds	r3, #7
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	021b      	lsls	r3, r3, #8
                      (uint32_t)params[8];
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	3208      	adds	r2, #8
 80086ec:	7812      	ldrb	r2, [r2, #0]
    p_scsi_blk->len = ((uint32_t)params[7] << 8) |
 80086ee:	431a      	orrs	r2, r3
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	689a      	ldr	r2, [r3, #8]
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	7af9      	ldrb	r1, [r7, #11]
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f000 f9f2 	bl	8008ae8 <SCSI_CheckAddressRange>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	da02      	bge.n	8008710 <SCSI_Write10+0x13c>
    {
      return -1; /* error */
 800870a:	f04f 33ff 	mov.w	r3, #4294967295
 800870e:	e032      	b.n	8008776 <SCSI_Write10+0x1a2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	8812      	ldrh	r2, [r2, #0]
 8008718:	fb02 f303 	mul.w	r3, r2, r3
 800871c:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	429a      	cmp	r2, r3
 8008728:	d00a      	beq.n	8008740 <SCSI_Write10+0x16c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008730:	2320      	movs	r3, #32
 8008732:	2205      	movs	r2, #5
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f7ff fd20 	bl	800817a <SCSI_SenseCode>
      return -1;
 800873a:	f04f 33ff 	mov.w	r3, #4294967295
 800873e:	e01a      	b.n	8008776 <SCSI_Write10+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008746:	bf28      	it	cs
 8008748:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800874c:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	2201      	movs	r2, #1
 8008752:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008754:	4b0a      	ldr	r3, [pc, #40]	@ (8008780 <SCSI_Write10+0x1ac>)
 8008756:	7819      	ldrb	r1, [r3, #0]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	f103 0210 	add.w	r2, r3, #16
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f006 f83e 	bl	800e7e2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008766:	2300      	movs	r3, #0
 8008768:	e005      	b.n	8008776 <SCSI_Write10+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 800876a:	7afb      	ldrb	r3, [r7, #11]
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 fa6e 	bl	8008c50 <SCSI_ProcessWrite>
 8008774:	4603      	mov	r3, r0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3720      	adds	r7, #32
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000087 	.word	0x20000087

08008784 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b088      	sub	sp, #32
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	460b      	mov	r3, r1
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	32b0      	adds	r2, #176	@ 0xb0
 800879c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a0:	61fb      	str	r3, [r7, #28]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	3326      	adds	r3, #38	@ 0x26
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	4413      	add	r3, r2
 80087ac:	3304      	adds	r3, #4
 80087ae:	61bb      	str	r3, [r7, #24]
  uint32_t len;

  if (hmsc == NULL)
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <SCSI_Write12+0x38>
  {
    return -1;
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	e0c4      	b.n	8008946 <SCSI_Write12+0x1c2>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	7a1b      	ldrb	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f040 80ba 	bne.w	800893a <SCSI_Write12+0x1b6>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80087d6:	2320      	movs	r3, #32
 80087d8:	2205      	movs	r2, #5
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff fccd 	bl	800817a <SCSI_SenseCode>
      return -1;
 80087e0:	f04f 33ff 	mov.w	r3, #4294967295
 80087e4:	e0af      	b.n	8008946 <SCSI_Write12+0x1c2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	f893 321c 	ldrb.w	r3, [r3, #540]	@ 0x21c
 80087ec:	b25b      	sxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	da0a      	bge.n	8008808 <SCSI_Write12+0x84>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 80087f8:	2320      	movs	r3, #32
 80087fa:	2205      	movs	r2, #5
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fcbc 	bl	800817a <SCSI_SenseCode>
      return -1;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295
 8008806:	e09e      	b.n	8008946 <SCSI_Write12+0x1c2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	33b0      	adds	r3, #176	@ 0xb0
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	7afa      	ldrb	r2, [r7, #11]
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00b      	beq.n	800883e <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008826:	7af9      	ldrb	r1, [r7, #11]
 8008828:	233a      	movs	r3, #58	@ 0x3a
 800882a:	2202      	movs	r2, #2
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7ff fca4 	bl	800817a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	2205      	movs	r2, #5
 8008836:	721a      	strb	r2, [r3, #8]
      return -1;
 8008838:	f04f 33ff 	mov.w	r3, #4294967295
 800883c:	e083      	b.n	8008946 <SCSI_Write12+0x1c2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	33b0      	adds	r3, #176	@ 0xb0
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	7afa      	ldrb	r2, [r7, #11]
 8008852:	4610      	mov	r0, r2
 8008854:	4798      	blx	r3
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00b      	beq.n	8008874 <SCSI_Write12+0xf0>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800885c:	7af9      	ldrb	r1, [r7, #11]
 800885e:	2327      	movs	r3, #39	@ 0x27
 8008860:	2202      	movs	r2, #2
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7ff fc89 	bl	800817a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2205      	movs	r2, #5
 800886c:	721a      	strb	r2, [r3, #8]
      return -1;
 800886e:	f04f 33ff 	mov.w	r3, #4294967295
 8008872:	e068      	b.n	8008946 <SCSI_Write12+0x1c2>
    }

    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	3302      	adds	r3, #2
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	061a      	lsls	r2, r3, #24
                       ((uint32_t)params[3] << 16) |
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3303      	adds	r3, #3
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	041b      	lsls	r3, r3, #16
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008884:	431a      	orrs	r2, r3
                       ((uint32_t)params[4] << 8) |
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	3304      	adds	r3, #4
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	021b      	lsls	r3, r3, #8
                       ((uint32_t)params[3] << 16) |
 800888e:	4313      	orrs	r3, r2
                       (uint32_t)params[5];
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	3205      	adds	r2, #5
 8008894:	7812      	ldrb	r2, [r2, #0]
                       ((uint32_t)params[4] << 8) |
 8008896:	431a      	orrs	r2, r3
    p_scsi_blk->addr = ((uint32_t)params[2] << 24) |
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	609a      	str	r2, [r3, #8]

    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3306      	adds	r3, #6
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	061a      	lsls	r2, r3, #24
                      ((uint32_t)params[7] << 16) |
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3307      	adds	r3, #7
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	041b      	lsls	r3, r3, #16
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80088ac:	431a      	orrs	r2, r3
                      ((uint32_t)params[8] << 8) |
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3308      	adds	r3, #8
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	021b      	lsls	r3, r3, #8
                      ((uint32_t)params[7] << 16) |
 80088b6:	4313      	orrs	r3, r2
                      (uint32_t)params[9];
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	3209      	adds	r2, #9
 80088bc:	7812      	ldrb	r2, [r2, #0]
                      ((uint32_t)params[8] << 8) |
 80088be:	431a      	orrs	r2, r3
    p_scsi_blk->len = ((uint32_t)params[6] << 24) |
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	60da      	str	r2, [r3, #12]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	7af9      	ldrb	r1, [r7, #11]
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f000 f90a 	bl	8008ae8 <SCSI_CheckAddressRange>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	da02      	bge.n	80088e0 <SCSI_Write12+0x15c>
    {
      return -1; /* error */
 80088da:	f04f 33ff 	mov.w	r3, #4294967295
 80088de:	e032      	b.n	8008946 <SCSI_Write12+0x1c2>
    }

    len = p_scsi_blk->len * p_scsi_blk->size;
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	8812      	ldrh	r2, [r2, #0]
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	617b      	str	r3, [r7, #20]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d00a      	beq.n	8008910 <SCSI_Write12+0x18c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	f893 121d 	ldrb.w	r1, [r3, #541]	@ 0x21d
 8008900:	2320      	movs	r3, #32
 8008902:	2205      	movs	r2, #5
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff fc38 	bl	800817a <SCSI_SenseCode>
      return -1;
 800890a:	f04f 33ff 	mov.w	r3, #4294967295
 800890e:	e01a      	b.n	8008946 <SCSI_Write12+0x1c2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008916:	bf28      	it	cs
 8008918:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 800891c:	617b      	str	r3, [r7, #20]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2201      	movs	r2, #1
 8008922:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008924:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <SCSI_Write12+0x1cc>)
 8008926:	7819      	ldrb	r1, [r3, #0]
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f103 0210 	add.w	r2, r3, #16
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f005 ff56 	bl	800e7e2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008936:	2300      	movs	r3, #0
 8008938:	e005      	b.n	8008946 <SCSI_Write12+0x1c2>
    return SCSI_ProcessWrite(pdev, lun);
 800893a:	7afb      	ldrb	r3, [r7, #11]
 800893c:	4619      	mov	r1, r3
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 f986 	bl	8008c50 <SCSI_ProcessWrite>
 8008944:	4603      	mov	r3, r0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3720      	adds	r7, #32
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	20000087 	.word	0x20000087

08008954 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	460b      	mov	r3, r1
 800895e:	607a      	str	r2, [r7, #4]
 8008960:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	32b0      	adds	r2, #176	@ 0xb0
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	3326      	adds	r3, #38	@ 0x26
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d102      	bne.n	800898c <SCSI_Verify10+0x38>
  {
    return -1;
 8008986:	f04f 33ff 	mov.w	r3, #4294967295
 800898a:	e021      	b.n	80089d0 <SCSI_Verify10+0x7c>
  }

  if ((params[1] & 0x02U) == 0x02U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	3301      	adds	r3, #1
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d008      	beq.n	80089ac <SCSI_Verify10+0x58>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELD_IN_COMMAND);
 800899a:	7af9      	ldrb	r1, [r7, #11]
 800899c:	2324      	movs	r3, #36	@ 0x24
 800899e:	2205      	movs	r2, #5
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f7ff fbea 	bl	800817a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80089a6:	f04f 33ff 	mov.w	r3, #4294967295
 80089aa:	e011      	b.n	80089d0 <SCSI_Verify10+0x7c>
  }

  if (SCSI_CheckAddressRange(pdev, lun, p_scsi_blk->addr, p_scsi_blk->len) < 0)
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	689a      	ldr	r2, [r3, #8]
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	7af9      	ldrb	r1, [r7, #11]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f896 	bl	8008ae8 <SCSI_CheckAddressRange>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	da02      	bge.n	80089c8 <SCSI_Verify10+0x74>
  {
    return -1; /* error */
 80089c2:	f04f 33ff 	mov.w	r3, #4294967295
 80089c6:	e003      	b.n	80089d0 <SCSI_Verify10+0x7c>
  }

  hmsc->bot_data_length = 0U;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2200      	movs	r2, #0
 80089cc:	60da      	str	r2, [r3, #12]

  return 0;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3718      	adds	r7, #24
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <SCSI_ReportLuns>:
  * @brief  SCSI_ReportLuns12
  *         Process ReportLuns command
  * @retval status
  */
static int8_t SCSI_ReportLuns(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	460b      	mov	r3, r1
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);

  /* Define the report LUNs buffer Each LUN entry is 8 bytes */
  static uint8_t lun_report[8U * (MSC_BOT_MAX_LUN + 1U)];

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	32b0      	adds	r2, #176	@ 0xb0
 80089f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <SCSI_ReportLuns+0x2a>
  {
    return -1;
 80089fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008a00:	e039      	b.n	8008a76 <SCSI_ReportLuns+0x9e>
  }

  /* Initialize the report LUNs buffer */
  (void)USBD_memset(lun_report, 0, sizeof(lun_report));
 8008a02:	2218      	movs	r2, #24
 8008a04:	2100      	movs	r1, #0
 8008a06:	481e      	ldr	r0, [pc, #120]	@ (8008a80 <SCSI_ReportLuns+0xa8>)
 8008a08:	f005 ff84 	bl	800e914 <memset>

  /* Set the LUN list length in the first 4 bytes */
  lun_list_length = 8U * (hmsc->max_lun + 1U);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3301      	adds	r3, #1
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	617b      	str	r3, [r7, #20]
  lun_report[0] = (uint8_t)(lun_list_length >> 24);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	0e1b      	lsrs	r3, r3, #24
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	4b18      	ldr	r3, [pc, #96]	@ (8008a80 <SCSI_ReportLuns+0xa8>)
 8008a1e:	701a      	strb	r2, [r3, #0]
  lun_report[1] = (uint8_t)(lun_list_length >> 16);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	0c1b      	lsrs	r3, r3, #16
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	4b16      	ldr	r3, [pc, #88]	@ (8008a80 <SCSI_ReportLuns+0xa8>)
 8008a28:	705a      	strb	r2, [r3, #1]
  lun_report[2] = (uint8_t)(lun_list_length >> 8);
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	0a1b      	lsrs	r3, r3, #8
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	4b13      	ldr	r3, [pc, #76]	@ (8008a80 <SCSI_ReportLuns+0xa8>)
 8008a32:	709a      	strb	r2, [r3, #2]
  lun_report[3] = (uint8_t)(lun_list_length & 0xFFU);
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	b2da      	uxtb	r2, r3
 8008a38:	4b11      	ldr	r3, [pc, #68]	@ (8008a80 <SCSI_ReportLuns+0xa8>)
 8008a3a:	70da      	strb	r2, [r3, #3]

  /* Update the LUN list */
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	77fb      	strb	r3, [r7, #31]
 8008a40:	e009      	b.n	8008a56 <SCSI_ReportLuns+0x7e>
  {
    /* LUN identifier is placed at the second byte of each 8-byte entry */
    lun_report[(8U * (lun_idx + 1U)) + 1U] = lun_idx;
 8008a42:	7ffb      	ldrb	r3, [r7, #31]
 8008a44:	3301      	adds	r3, #1
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	3301      	adds	r3, #1
 8008a4a:	490d      	ldr	r1, [pc, #52]	@ (8008a80 <SCSI_ReportLuns+0xa8>)
 8008a4c:	7ffa      	ldrb	r2, [r7, #31]
 8008a4e:	54ca      	strb	r2, [r1, r3]
  for (lun_idx = 0U; lun_idx <= hmsc->max_lun; lun_idx++)
 8008a50:	7ffb      	ldrb	r3, [r7, #31]
 8008a52:	3301      	adds	r3, #1
 8008a54:	77fb      	strb	r3, [r7, #31]
 8008a56:	7ffa      	ldrb	r2, [r7, #31]
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d9f0      	bls.n	8008a42 <SCSI_ReportLuns+0x6a>
  }

  /* Calculate the total length of the report LUNs buffer */
  total_length = lun_list_length + 8U;
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	3308      	adds	r3, #8
 8008a64:	613b      	str	r3, [r7, #16]

  /* Update the BOT data with the report LUNs buffer */
  (void)SCSI_UpdateBotData(hmsc, lun_report, (uint16_t)total_length);
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	4904      	ldr	r1, [pc, #16]	@ (8008a80 <SCSI_ReportLuns+0xa8>)
 8008a6e:	69b8      	ldr	r0, [r7, #24]
 8008a70:	f000 f97e 	bl	8008d70 <SCSI_UpdateBotData>

  return 0;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200026c4 	.word	0x200026c4

08008a84 <SCSI_ReceiveDiagnosticResults>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReceiveDiagnosticResults(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	32b0      	adds	r2, #176	@ 0xb0
 8008a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa0:	613b      	str	r3, [r7, #16]
  uint16_t allocation_length;

  /* Extract the allocation length from the CDB */
  allocation_length = (((uint16_t)params[3] << 8) | (uint16_t)params[4]);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3303      	adds	r3, #3
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	021b      	lsls	r3, r3, #8
 8008aaa:	b21a      	sxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	b21b      	sxth	r3, r3
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	b21b      	sxth	r3, r3
 8008ab8:	82fb      	strh	r3, [r7, #22]

  if (allocation_length == 0U)
 8008aba:	8afb      	ldrh	r3, [r7, #22]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <SCSI_ReceiveDiagnosticResults+0x40>
  {
    return 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	e00b      	b.n	8008adc <SCSI_ReceiveDiagnosticResults+0x58>
  }

  /* Ensure the allocation length does not exceed the diagnostic data length */
  if (allocation_length > DIAGNOSTIC_DATA_LEN)
 8008ac4:	8afb      	ldrh	r3, [r7, #22]
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d901      	bls.n	8008ace <SCSI_ReceiveDiagnosticResults+0x4a>
  {
    allocation_length = DIAGNOSTIC_DATA_LEN;
 8008aca:	2308      	movs	r3, #8
 8008acc:	82fb      	strh	r3, [r7, #22]
  }

  /* Send the diagnostic data to the host */
  (void)SCSI_UpdateBotData(hmsc, MSC_Diagnostic_Data, allocation_length);
 8008ace:	8afb      	ldrh	r3, [r7, #22]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	4904      	ldr	r1, [pc, #16]	@ (8008ae4 <SCSI_ReceiveDiagnosticResults+0x60>)
 8008ad4:	6938      	ldr	r0, [r7, #16]
 8008ad6:	f000 f94b 	bl	8008d70 <SCSI_UpdateBotData>

  return 0;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3718      	adds	r7, #24
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}
 8008ae4:	200026bc 	.word	0x200026bc

08008ae8 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	607a      	str	r2, [r7, #4]
 8008af2:	603b      	str	r3, [r7, #0]
 8008af4:	460b      	mov	r3, r1
 8008af6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	32b0      	adds	r2, #176	@ 0xb0
 8008b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b06:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008b08:	7afb      	ldrb	r3, [r7, #11]
 8008b0a:	3326      	adds	r3, #38	@ 0x26
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4413      	add	r3, r2
 8008b12:	3304      	adds	r3, #4
 8008b14:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d102      	bne.n	8008b22 <SCSI_CheckAddressRange+0x3a>
  {
    return -1;
 8008b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b20:	e010      	b.n	8008b44 <SCSI_CheckAddressRange+0x5c>
  }

  if ((blk_offset + blk_nbr) > p_scsi_blk->nbr)
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	441a      	add	r2, r3
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d908      	bls.n	8008b42 <SCSI_CheckAddressRange+0x5a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008b30:	7af9      	ldrb	r1, [r7, #11]
 8008b32:	2321      	movs	r3, #33	@ 0x21
 8008b34:	2205      	movs	r2, #5
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f7ff fb1f 	bl	800817a <SCSI_SenseCode>
    return -1;
 8008b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b40:	e000      	b.n	8008b44 <SCSI_CheckAddressRange+0x5c>
  }

  return 0;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008b4c:	b590      	push	{r4, r7, lr}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	460b      	mov	r3, r1
 8008b56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	32b0      	adds	r2, #176	@ 0xb0
 8008b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b66:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008b68:	78fb      	ldrb	r3, [r7, #3]
 8008b6a:	3326      	adds	r3, #38	@ 0x26
 8008b6c:	011b      	lsls	r3, r3, #4
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	3304      	adds	r3, #4
 8008b74:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d102      	bne.n	8008b82 <SCSI_ProcessRead+0x36>
  {
    return -1;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	e05f      	b.n	8008c42 <SCSI_ProcessRead+0xf6>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	8812      	ldrh	r2, [r2, #0]
 8008b8a:	fb02 f303 	mul.w	r3, r2, r3
 8008b8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b96:	bf28      	it	cs
 8008b98:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008b9c:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	33b0      	adds	r3, #176	@ 0xb0
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	691c      	ldr	r4, [r3, #16]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f103 0110 	add.w	r1, r3, #16
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	689a      	ldr	r2, [r3, #8]
                                                                    p_scsi_blk->addr,
                                                                    (len / p_scsi_blk->size)) < 0)
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	881b      	ldrh	r3, [r3, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	78f8      	ldrb	r0, [r7, #3]
 8008bca:	47a0      	blx	r4
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da08      	bge.n	8008be4 <SCSI_ProcessRead+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008bd2:	78f9      	ldrb	r1, [r7, #3]
 8008bd4:	2311      	movs	r3, #17
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff face 	bl	800817a <SCSI_SenseCode>
    return -1;
 8008bde:	f04f 33ff 	mov.w	r3, #4294967295
 8008be2:	e02e      	b.n	8008c42 <SCSI_ProcessRead+0xf6>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8008be4:	4b19      	ldr	r3, [pc, #100]	@ (8008c4c <SCSI_ProcessRead+0x100>)
 8008be6:	7819      	ldrb	r1, [r3, #0]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f103 0210 	add.w	r2, r3, #16
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f005 fdd5 	bl	800e7a0 <USBD_LL_Transmit>

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c06:	441a      	add	r2, r3
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	68da      	ldr	r2, [r3, #12]
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	4619      	mov	r1, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	fbb3 f3f1 	udiv	r3, r3, r1
 8008c1c:	1ad2      	subs	r2, r2, r3
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	60da      	str	r2, [r3, #12]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d102      	bne.n	8008c40 <SCSI_ProcessRead+0xf4>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd90      	pop	{r4, r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000086 	.word	0x20000086

08008c50 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	32b0      	adds	r2, #176	@ 0xb0
 8008c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c6a:	617b      	str	r3, [r7, #20]
  USBD_MSC_BOT_LUN_TypeDef *p_scsi_blk = &hmsc->scsi_blk[lun];
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	3326      	adds	r3, #38	@ 0x26
 8008c70:	011b      	lsls	r3, r3, #4
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	4413      	add	r3, r2
 8008c76:	3304      	adds	r3, #4
 8008c78:	613b      	str	r3, [r7, #16]
  uint32_t len;

  if (hmsc == NULL)
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d102      	bne.n	8008c86 <SCSI_ProcessWrite+0x36>
  {
    return -1;
 8008c80:	f04f 33ff 	mov.w	r3, #4294967295
 8008c84:	e06d      	b.n	8008d62 <SCSI_ProcessWrite+0x112>
  }

  len = p_scsi_blk->len * p_scsi_blk->size;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	8812      	ldrh	r2, [r2, #0]
 8008c8e:	fb02 f303 	mul.w	r3, r2, r3
 8008c92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c9a:	bf28      	it	cs
 8008c9c:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008ca0:	60fb      	str	r3, [r7, #12]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	33b0      	adds	r3, #176	@ 0xb0
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	695c      	ldr	r4, [r3, #20]
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f103 0110 	add.w	r1, r3, #16
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	689a      	ldr	r2, [r3, #8]
                                                                     (len / p_scsi_blk->size)) < 0)
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data, p_scsi_blk->addr,
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	78f8      	ldrb	r0, [r7, #3]
 8008cce:	47a0      	blx	r4
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da08      	bge.n	8008ce8 <SCSI_ProcessWrite+0x98>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008cd6:	78f9      	ldrb	r1, [r7, #3]
 8008cd8:	2303      	movs	r3, #3
 8008cda:	2204      	movs	r2, #4
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f7ff fa4c 	bl	800817a <SCSI_SenseCode>
    return -1;
 8008ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce6:	e03c      	b.n	8008d62 <SCSI_ProcessWrite+0x112>
  }

  p_scsi_blk->addr += (len / p_scsi_blk->size);
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	881b      	ldrh	r3, [r3, #0]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cf8:	441a      	add	r2, r3
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	609a      	str	r2, [r3, #8]
  p_scsi_blk->len -= (len / p_scsi_blk->size);
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	68da      	ldr	r2, [r3, #12]
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	4619      	mov	r1, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d0e:	1ad2      	subs	r2, r2, r3
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	60da      	str	r2, [r3, #12]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f8d3 2238 	ldr.w	r2, [r3, #568]	@ 0x238
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	1ad2      	subs	r2, r2, r3
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238

  if (p_scsi_blk->len == 0U)
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d104      	bne.n	8008d36 <SCSI_ProcessWrite+0xe6>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7fe fc26 	bl	8007580 <MSC_BOT_SendCSW>
 8008d34:	e014      	b.n	8008d60 <SCSI_ProcessWrite+0x110>
  }
  else
  {
    len = MIN((p_scsi_blk->len * p_scsi_blk->size), MSC_MEDIA_PACKET);
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	8812      	ldrh	r2, [r2, #0]
 8008d3e:	fb02 f303 	mul.w	r3, r2, r3
 8008d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d46:	bf28      	it	cs
 8008d48:	f44f 7300 	movcs.w	r3, #512	@ 0x200
 8008d4c:	60fb      	str	r3, [r7, #12]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8008d4e:	4b07      	ldr	r3, [pc, #28]	@ (8008d6c <SCSI_ProcessWrite+0x11c>)
 8008d50:	7819      	ldrb	r1, [r3, #0]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f103 0210 	add.w	r2, r3, #16
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f005 fd41 	bl	800e7e2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd90      	pop	{r4, r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000087 	.word	0x20000087

08008d70 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008d7e:	88fb      	ldrh	r3, [r7, #6]
 8008d80:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8c:	e013      	b.n	8008db6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8008d8e:	8afa      	ldrh	r2, [r7, #22]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008d94:	e00b      	b.n	8008dae <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008d96:	8afb      	ldrh	r3, [r7, #22]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008d9c:	8afb      	ldrh	r3, [r7, #22]
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	441a      	add	r2, r3
 8008da2:	8afb      	ldrh	r3, [r7, #22]
 8008da4:	7811      	ldrb	r1, [r2, #0]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	4413      	add	r3, r2
 8008daa:	460a      	mov	r2, r1
 8008dac:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008dae:	8afb      	ldrh	r3, [r7, #22]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1f0      	bne.n	8008d96 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	371c      	adds	r7, #28
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e01f      	b.n	8008e1a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	79fa      	ldrb	r2, [r7, #7]
 8008e0c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f005 fb72 	bl	800e4f8 <USBD_LL_Init>
 8008e14:	4603      	mov	r3, r0
 8008e16:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
 8008e2a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e025      	b.n	8008e86 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	32ae      	adds	r2, #174	@ 0xae
 8008e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00f      	beq.n	8008e76 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	32ae      	adds	r2, #174	@ 0xae
 8008e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e66:	f107 020e 	add.w	r2, r7, #14
 8008e6a:	4610      	mov	r0, r2
 8008e6c:	4798      	blx	r3
 8008e6e:	4602      	mov	r2, r0
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f005 fb7a 	bl	800e590 <USBD_LL_Start>
 8008e9c:	4603      	mov	r3, r0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b083      	sub	sp, #12
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d009      	beq.n	8008eea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	78fa      	ldrb	r2, [r7, #3]
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	4798      	blx	r3
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f001 f921 	bl	800a182 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008f5c:	f003 031f 	and.w	r3, r3, #31
 8008f60:	2b02      	cmp	r3, #2
 8008f62:	d01a      	beq.n	8008f9a <USBD_LL_SetupStage+0x72>
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d822      	bhi.n	8008fae <USBD_LL_SetupStage+0x86>
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <USBD_LL_SetupStage+0x4a>
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d00a      	beq.n	8008f86 <USBD_LL_SetupStage+0x5e>
 8008f70:	e01d      	b.n	8008fae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fb76 	bl	800966c <USBD_StdDevReq>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73fb      	strb	r3, [r7, #15]
      break;
 8008f84:	e020      	b.n	8008fc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fbde 	bl	8009750 <USBD_StdItfReq>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]
      break;
 8008f98:	e016      	b.n	8008fc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fc40 	bl	8009828 <USBD_StdEPReq>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
      break;
 8008fac:	e00c      	b.n	8008fc8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008fb4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f005 fb66 	bl	800e68e <USBD_LL_StallEP>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc6:	bf00      	nop
  }

  return ret;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b086      	sub	sp, #24
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	607a      	str	r2, [r7, #4]
 8008fde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d177      	bne.n	80090da <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008ff0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	f040 80a1 	bne.w	8009140 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	8992      	ldrh	r2, [r2, #12]
 8009006:	4293      	cmp	r3, r2
 8009008:	d91c      	bls.n	8009044 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	8992      	ldrh	r2, [r2, #12]
 8009012:	1a9a      	subs	r2, r3, r2
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	8992      	ldrh	r2, [r2, #12]
 8009020:	441a      	add	r2, r3
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6919      	ldr	r1, [r3, #16]
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	899b      	ldrh	r3, [r3, #12]
 800902e:	461a      	mov	r2, r3
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4293      	cmp	r3, r2
 8009036:	bf38      	it	cc
 8009038:	4613      	movcc	r3, r2
 800903a:	461a      	mov	r2, r3
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f001 f986 	bl	800a34e <USBD_CtlContinueRx>
 8009042:	e07d      	b.n	8009140 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800904a:	f003 031f 	and.w	r3, r3, #31
 800904e:	2b02      	cmp	r3, #2
 8009050:	d014      	beq.n	800907c <USBD_LL_DataOutStage+0xaa>
 8009052:	2b02      	cmp	r3, #2
 8009054:	d81d      	bhi.n	8009092 <USBD_LL_DataOutStage+0xc0>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <USBD_LL_DataOutStage+0x8e>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d003      	beq.n	8009066 <USBD_LL_DataOutStage+0x94>
 800905e:	e018      	b.n	8009092 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	75bb      	strb	r3, [r7, #22]
            break;
 8009064:	e018      	b.n	8009098 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800906c:	b2db      	uxtb	r3, r3
 800906e:	4619      	mov	r1, r3
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fa6e 	bl	8009552 <USBD_CoreFindIF>
 8009076:	4603      	mov	r3, r0
 8009078:	75bb      	strb	r3, [r7, #22]
            break;
 800907a:	e00d      	b.n	8009098 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009082:	b2db      	uxtb	r3, r3
 8009084:	4619      	mov	r1, r3
 8009086:	68f8      	ldr	r0, [r7, #12]
 8009088:	f000 fa70 	bl	800956c <USBD_CoreFindEP>
 800908c:	4603      	mov	r3, r0
 800908e:	75bb      	strb	r3, [r7, #22]
            break;
 8009090:	e002      	b.n	8009098 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	75bb      	strb	r3, [r7, #22]
            break;
 8009096:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009098:	7dbb      	ldrb	r3, [r7, #22]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d119      	bne.n	80090d2 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d113      	bne.n	80090d2 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090aa:	7dba      	ldrb	r2, [r7, #22]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	32ae      	adds	r2, #174	@ 0xae
 80090b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80090ba:	7dba      	ldrb	r2, [r7, #22]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80090c2:	7dba      	ldrb	r2, [r7, #22]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	32ae      	adds	r2, #174	@ 0xae
 80090c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f001 f94c 	bl	800a370 <USBD_CtlSendStatus>
 80090d8:	e032      	b.n	8009140 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	4619      	mov	r1, r3
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fa41 	bl	800956c <USBD_CoreFindEP>
 80090ea:	4603      	mov	r3, r0
 80090ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090ee:	7dbb      	ldrb	r3, [r7, #22]
 80090f0:	2bff      	cmp	r3, #255	@ 0xff
 80090f2:	d025      	beq.n	8009140 <USBD_LL_DataOutStage+0x16e>
 80090f4:	7dbb      	ldrb	r3, [r7, #22]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d122      	bne.n	8009140 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b03      	cmp	r3, #3
 8009104:	d117      	bne.n	8009136 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009106:	7dba      	ldrb	r2, [r7, #22]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	32ae      	adds	r2, #174	@ 0xae
 800910c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00f      	beq.n	8009136 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8009116:	7dba      	ldrb	r2, [r7, #22]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800911e:	7dba      	ldrb	r2, [r7, #22]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	32ae      	adds	r2, #174	@ 0xae
 8009124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	7afa      	ldrb	r2, [r7, #11]
 800912c:	4611      	mov	r1, r2
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	4798      	blx	r3
 8009132:	4603      	mov	r3, r0
 8009134:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
 800913e:	e000      	b.n	8009142 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	460b      	mov	r3, r1
 8009154:	607a      	str	r2, [r7, #4]
 8009156:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d178      	bne.n	8009250 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3314      	adds	r3, #20
 8009162:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800916a:	2b02      	cmp	r3, #2
 800916c:	d163      	bne.n	8009236 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	8992      	ldrh	r2, [r2, #12]
 8009176:	4293      	cmp	r3, r2
 8009178:	d91c      	bls.n	80091b4 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	8992      	ldrh	r2, [r2, #12]
 8009182:	1a9a      	subs	r2, r3, r2
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	691b      	ldr	r3, [r3, #16]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	8992      	ldrh	r2, [r2, #12]
 8009190:	441a      	add	r2, r3
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	6919      	ldr	r1, [r3, #16]
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	461a      	mov	r2, r3
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f001 f8c3 	bl	800a32c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091a6:	2300      	movs	r3, #0
 80091a8:	2200      	movs	r2, #0
 80091aa:	2100      	movs	r1, #0
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f005 fb18 	bl	800e7e2 <USBD_LL_PrepareReceive>
 80091b2:	e040      	b.n	8009236 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	899b      	ldrh	r3, [r3, #12]
 80091b8:	461a      	mov	r2, r3
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d11c      	bne.n	80091fc <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d316      	bcc.n	80091fc <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80091d8:	429a      	cmp	r2, r3
 80091da:	d20f      	bcs.n	80091fc <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80091dc:	2200      	movs	r2, #0
 80091de:	2100      	movs	r1, #0
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f001 f8a3 	bl	800a32c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091ee:	2300      	movs	r3, #0
 80091f0:	2200      	movs	r2, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f005 faf4 	bl	800e7e2 <USBD_LL_PrepareReceive>
 80091fa:	e01c      	b.n	8009236 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009202:	b2db      	uxtb	r3, r3
 8009204:	2b03      	cmp	r3, #3
 8009206:	d10f      	bne.n	8009228 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	68f8      	ldr	r0, [r7, #12]
 8009226:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009228:	2180      	movs	r1, #128	@ 0x80
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f005 fa2f 	bl	800e68e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f001 f8b0 	bl	800a396 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d03a      	beq.n	80092b6 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f7ff fe30 	bl	8008ea6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800924e:	e032      	b.n	80092b6 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009250:	7afb      	ldrb	r3, [r7, #11]
 8009252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4619      	mov	r1, r3
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f000 f986 	bl	800956c <USBD_CoreFindEP>
 8009260:	4603      	mov	r3, r0
 8009262:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009264:	7dfb      	ldrb	r3, [r7, #23]
 8009266:	2bff      	cmp	r3, #255	@ 0xff
 8009268:	d025      	beq.n	80092b6 <USBD_LL_DataInStage+0x16c>
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d122      	bne.n	80092b6 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b03      	cmp	r3, #3
 800927a:	d11c      	bne.n	80092b6 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800927c:	7dfa      	ldrb	r2, [r7, #23]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	32ae      	adds	r2, #174	@ 0xae
 8009282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009286:	695b      	ldr	r3, [r3, #20]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d014      	beq.n	80092b6 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800928c:	7dfa      	ldrb	r2, [r7, #23]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009294:	7dfa      	ldrb	r2, [r7, #23]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	32ae      	adds	r2, #174	@ 0xae
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	695b      	ldr	r3, [r3, #20]
 80092a0:	7afa      	ldrb	r2, [r7, #11]
 80092a2:	4611      	mov	r1, r2
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	4798      	blx	r3
 80092a8:	4603      	mov	r3, r0
 80092aa:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092ac:	7dbb      	ldrb	r3, [r7, #22]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80092b2:	7dbb      	ldrb	r3, [r7, #22]
 80092b4:	e000      	b.n	80092b8 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d014      	beq.n	8009326 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00e      	beq.n	8009326 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	6852      	ldr	r2, [r2, #4]
 8009314:	b2d2      	uxtb	r2, r2
 8009316:	4611      	mov	r1, r2
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	4798      	blx	r3
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009322:	2303      	movs	r3, #3
 8009324:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009326:	2340      	movs	r3, #64	@ 0x40
 8009328:	2200      	movs	r2, #0
 800932a:	2100      	movs	r1, #0
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f005 f94a 	bl	800e5c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2240      	movs	r2, #64	@ 0x40
 800933e:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009342:	2340      	movs	r3, #64	@ 0x40
 8009344:	2200      	movs	r2, #0
 8009346:	2180      	movs	r1, #128	@ 0x80
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f005 f93c 	bl	800e5c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2240      	movs	r2, #64	@ 0x40
 800935a:	841a      	strh	r2, [r3, #32]

  return ret;
 800935c:	7bfb      	ldrb	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009366:	b480      	push	{r7}
 8009368:	b083      	sub	sp, #12
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009386:	b480      	push	{r7}
 8009388:	b083      	sub	sp, #12
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b04      	cmp	r3, #4
 8009398:	d006      	beq.n	80093a8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2204      	movs	r2, #4
 80093ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d106      	bne.n	80093e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b082      	sub	sp, #8
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d110      	bne.n	8009424 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d005      	beq.n	8009424 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800941e:	69db      	ldr	r3, [r3, #28]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3708      	adds	r7, #8
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b082      	sub	sp, #8
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
 8009436:	460b      	mov	r3, r1
 8009438:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	32ae      	adds	r2, #174	@ 0xae
 8009444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800944c:	2303      	movs	r3, #3
 800944e:	e01c      	b.n	800948a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b03      	cmp	r3, #3
 800945a:	d115      	bne.n	8009488 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	32ae      	adds	r2, #174	@ 0xae
 8009466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946a:	6a1b      	ldr	r3, [r3, #32]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00b      	beq.n	8009488 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	32ae      	adds	r2, #174	@ 0xae
 800947a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	4611      	mov	r1, r2
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b082      	sub	sp, #8
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	460b      	mov	r3, r1
 800949c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	32ae      	adds	r2, #174	@ 0xae
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e01c      	b.n	80094ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b03      	cmp	r3, #3
 80094be:	d115      	bne.n	80094ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	32ae      	adds	r2, #174	@ 0xae
 80094ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	32ae      	adds	r2, #174	@ 0xae
 80094de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	4611      	mov	r1, r2
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b083      	sub	sp, #12
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009514:	2300      	movs	r3, #0
 8009516:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00e      	beq.n	8009548 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	6852      	ldr	r2, [r2, #4]
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	4611      	mov	r1, r2
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	4798      	blx	r3
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009544:	2303      	movs	r3, #3
 8009546:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009548:	7bfb      	ldrb	r3, [r7, #15]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800955e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009578:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800957a:	4618      	mov	r0, r3
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b086      	sub	sp, #24
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800959a:	2300      	movs	r3, #0
 800959c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	885b      	ldrh	r3, [r3, #2]
 80095a2:	b29b      	uxth	r3, r3
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	7812      	ldrb	r2, [r2, #0]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d91f      	bls.n	80095ec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095b2:	e013      	b.n	80095dc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095b4:	f107 030a 	add.w	r3, r7, #10
 80095b8:	4619      	mov	r1, r3
 80095ba:	6978      	ldr	r0, [r7, #20]
 80095bc:	f000 f81b 	bl	80095f6 <USBD_GetNextDesc>
 80095c0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	785b      	ldrb	r3, [r3, #1]
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	d108      	bne.n	80095dc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	789b      	ldrb	r3, [r3, #2]
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d008      	beq.n	80095ea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	897b      	ldrh	r3, [r7, #10]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d8e5      	bhi.n	80095b4 <USBD_GetEpDesc+0x2e>
 80095e8:	e000      	b.n	80095ec <USBD_GetEpDesc+0x66>
          break;
 80095ea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80095ec:	693b      	ldr	r3, [r7, #16]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3718      	adds	r7, #24
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80095f6:	b480      	push	{r7}
 80095f8:	b085      	sub	sp, #20
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	7812      	ldrb	r2, [r2, #0]
 800960c:	4413      	add	r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	461a      	mov	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4413      	add	r3, r2
 800961e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009620:	68fb      	ldr	r3, [r7, #12]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800962e:	b480      	push	{r7}
 8009630:	b087      	sub	sp, #28
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	3301      	adds	r3, #1
 8009644:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800964c:	8a3b      	ldrh	r3, [r7, #16]
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	b21a      	sxth	r2, r3
 8009652:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009656:	4313      	orrs	r3, r2
 8009658:	b21b      	sxth	r3, r3
 800965a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800965c:	89fb      	ldrh	r3, [r7, #14]
}
 800965e:	4618      	mov	r0, r3
 8009660:	371c      	adds	r7, #28
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009682:	2b40      	cmp	r3, #64	@ 0x40
 8009684:	d005      	beq.n	8009692 <USBD_StdDevReq+0x26>
 8009686:	2b40      	cmp	r3, #64	@ 0x40
 8009688:	d857      	bhi.n	800973a <USBD_StdDevReq+0xce>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00f      	beq.n	80096ae <USBD_StdDevReq+0x42>
 800968e:	2b20      	cmp	r3, #32
 8009690:	d153      	bne.n	800973a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	32ae      	adds	r2, #174	@ 0xae
 800969c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]
      break;
 80096ac:	e04a      	b.n	8009744 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b09      	cmp	r3, #9
 80096b4:	d83b      	bhi.n	800972e <USBD_StdDevReq+0xc2>
 80096b6:	a201      	add	r2, pc, #4	@ (adr r2, 80096bc <USBD_StdDevReq+0x50>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	08009711 	.word	0x08009711
 80096c0:	08009725 	.word	0x08009725
 80096c4:	0800972f 	.word	0x0800972f
 80096c8:	0800971b 	.word	0x0800971b
 80096cc:	0800972f 	.word	0x0800972f
 80096d0:	080096ef 	.word	0x080096ef
 80096d4:	080096e5 	.word	0x080096e5
 80096d8:	0800972f 	.word	0x0800972f
 80096dc:	08009707 	.word	0x08009707
 80096e0:	080096f9 	.word	0x080096f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80096e4:	6839      	ldr	r1, [r7, #0]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 fa3e 	bl	8009b68 <USBD_GetDescriptor>
          break;
 80096ec:	e024      	b.n	8009738 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80096ee:	6839      	ldr	r1, [r7, #0]
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fba3 	bl	8009e3c <USBD_SetAddress>
          break;
 80096f6:	e01f      	b.n	8009738 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fbe2 	bl	8009ec4 <USBD_SetConfig>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
          break;
 8009704:	e018      	b.n	8009738 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009706:	6839      	ldr	r1, [r7, #0]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fc85 	bl	800a018 <USBD_GetConfig>
          break;
 800970e:	e013      	b.n	8009738 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 fcb6 	bl	800a084 <USBD_GetStatus>
          break;
 8009718:	e00e      	b.n	8009738 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fce5 	bl	800a0ec <USBD_SetFeature>
          break;
 8009722:	e009      	b.n	8009738 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fd09 	bl	800a13e <USBD_ClrFeature>
          break;
 800972c:	e004      	b.n	8009738 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800972e:	6839      	ldr	r1, [r7, #0]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fd60 	bl	800a1f6 <USBD_CtlError>
          break;
 8009736:	bf00      	nop
      }
      break;
 8009738:	e004      	b.n	8009744 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fd5a 	bl	800a1f6 <USBD_CtlError>
      break;
 8009742:	bf00      	nop
  }

  return ret;
 8009744:	7bfb      	ldrb	r3, [r7, #15]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop

08009750 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b084      	sub	sp, #16
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009766:	2b40      	cmp	r3, #64	@ 0x40
 8009768:	d005      	beq.n	8009776 <USBD_StdItfReq+0x26>
 800976a:	2b40      	cmp	r3, #64	@ 0x40
 800976c:	d852      	bhi.n	8009814 <USBD_StdItfReq+0xc4>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <USBD_StdItfReq+0x26>
 8009772:	2b20      	cmp	r3, #32
 8009774:	d14e      	bne.n	8009814 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800977c:	b2db      	uxtb	r3, r3
 800977e:	3b01      	subs	r3, #1
 8009780:	2b02      	cmp	r3, #2
 8009782:	d840      	bhi.n	8009806 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	889b      	ldrh	r3, [r3, #4]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b01      	cmp	r3, #1
 800978c:	d836      	bhi.n	80097fc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	889b      	ldrh	r3, [r3, #4]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff fedb 	bl	8009552 <USBD_CoreFindIF>
 800979c:	4603      	mov	r3, r0
 800979e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2bff      	cmp	r3, #255	@ 0xff
 80097a4:	d01d      	beq.n	80097e2 <USBD_StdItfReq+0x92>
 80097a6:	7bbb      	ldrb	r3, [r7, #14]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d11a      	bne.n	80097e2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097ac:	7bba      	ldrb	r2, [r7, #14]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	32ae      	adds	r2, #174	@ 0xae
 80097b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00f      	beq.n	80097dc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097bc:	7bba      	ldrb	r2, [r7, #14]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097c4:	7bba      	ldrb	r2, [r7, #14]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	32ae      	adds	r2, #174	@ 0xae
 80097ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	6839      	ldr	r1, [r7, #0]
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4798      	blx	r3
 80097d6:	4603      	mov	r3, r0
 80097d8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097da:	e004      	b.n	80097e6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80097dc:	2303      	movs	r3, #3
 80097de:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097e0:	e001      	b.n	80097e6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80097e2:	2303      	movs	r3, #3
 80097e4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	88db      	ldrh	r3, [r3, #6]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d110      	bne.n	8009810 <USBD_StdItfReq+0xc0>
 80097ee:	7bfb      	ldrb	r3, [r7, #15]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10d      	bne.n	8009810 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fdbb 	bl	800a370 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80097fa:	e009      	b.n	8009810 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fcf9 	bl	800a1f6 <USBD_CtlError>
          break;
 8009804:	e004      	b.n	8009810 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fcf4 	bl	800a1f6 <USBD_CtlError>
          break;
 800980e:	e000      	b.n	8009812 <USBD_StdItfReq+0xc2>
          break;
 8009810:	bf00      	nop
      }
      break;
 8009812:	e004      	b.n	800981e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fced 	bl	800a1f6 <USBD_CtlError>
      break;
 800981c:	bf00      	nop
  }

  return ret;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	889b      	ldrh	r3, [r3, #4]
 800983a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009844:	2b40      	cmp	r3, #64	@ 0x40
 8009846:	d007      	beq.n	8009858 <USBD_StdEPReq+0x30>
 8009848:	2b40      	cmp	r3, #64	@ 0x40
 800984a:	f200 8181 	bhi.w	8009b50 <USBD_StdEPReq+0x328>
 800984e:	2b00      	cmp	r3, #0
 8009850:	d02a      	beq.n	80098a8 <USBD_StdEPReq+0x80>
 8009852:	2b20      	cmp	r3, #32
 8009854:	f040 817c 	bne.w	8009b50 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009858:	7bbb      	ldrb	r3, [r7, #14]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff fe85 	bl	800956c <USBD_CoreFindEP>
 8009862:	4603      	mov	r3, r0
 8009864:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009866:	7b7b      	ldrb	r3, [r7, #13]
 8009868:	2bff      	cmp	r3, #255	@ 0xff
 800986a:	f000 8176 	beq.w	8009b5a <USBD_StdEPReq+0x332>
 800986e:	7b7b      	ldrb	r3, [r7, #13]
 8009870:	2b00      	cmp	r3, #0
 8009872:	f040 8172 	bne.w	8009b5a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009876:	7b7a      	ldrb	r2, [r7, #13]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800987e:	7b7a      	ldrb	r2, [r7, #13]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	32ae      	adds	r2, #174	@ 0xae
 8009884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 8165 	beq.w	8009b5a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009890:	7b7a      	ldrb	r2, [r7, #13]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	32ae      	adds	r2, #174	@ 0xae
 8009896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	4798      	blx	r3
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098a6:	e158      	b.n	8009b5a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d008      	beq.n	80098c2 <USBD_StdEPReq+0x9a>
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	f300 8147 	bgt.w	8009b44 <USBD_StdEPReq+0x31c>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 809b 	beq.w	80099f2 <USBD_StdEPReq+0x1ca>
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d03c      	beq.n	800993a <USBD_StdEPReq+0x112>
 80098c0:	e140      	b.n	8009b44 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d002      	beq.n	80098d4 <USBD_StdEPReq+0xac>
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d016      	beq.n	8009900 <USBD_StdEPReq+0xd8>
 80098d2:	e02c      	b.n	800992e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00d      	beq.n	80098f6 <USBD_StdEPReq+0xce>
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	2b80      	cmp	r3, #128	@ 0x80
 80098de:	d00a      	beq.n	80098f6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80098e0:	7bbb      	ldrb	r3, [r7, #14]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f004 fed2 	bl	800e68e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80098ea:	2180      	movs	r1, #128	@ 0x80
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f004 fece 	bl	800e68e <USBD_LL_StallEP>
 80098f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80098f4:	e020      	b.n	8009938 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fc7c 	bl	800a1f6 <USBD_CtlError>
              break;
 80098fe:	e01b      	b.n	8009938 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	885b      	ldrh	r3, [r3, #2]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10e      	bne.n	8009926 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <USBD_StdEPReq+0xfe>
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b80      	cmp	r3, #128	@ 0x80
 8009912:	d008      	beq.n	8009926 <USBD_StdEPReq+0xfe>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	88db      	ldrh	r3, [r3, #6]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d104      	bne.n	8009926 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f004 feb4 	bl	800e68e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fd22 	bl	800a370 <USBD_CtlSendStatus>

              break;
 800992c:	e004      	b.n	8009938 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fc60 	bl	800a1f6 <USBD_CtlError>
              break;
 8009936:	bf00      	nop
          }
          break;
 8009938:	e109      	b.n	8009b4e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009940:	b2db      	uxtb	r3, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d002      	beq.n	800994c <USBD_StdEPReq+0x124>
 8009946:	2b03      	cmp	r3, #3
 8009948:	d016      	beq.n	8009978 <USBD_StdEPReq+0x150>
 800994a:	e04b      	b.n	80099e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00d      	beq.n	800996e <USBD_StdEPReq+0x146>
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	2b80      	cmp	r3, #128	@ 0x80
 8009956:	d00a      	beq.n	800996e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009958:	7bbb      	ldrb	r3, [r7, #14]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f004 fe96 	bl	800e68e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009962:	2180      	movs	r1, #128	@ 0x80
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f004 fe92 	bl	800e68e <USBD_LL_StallEP>
 800996a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800996c:	e040      	b.n	80099f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 fc40 	bl	800a1f6 <USBD_CtlError>
              break;
 8009976:	e03b      	b.n	80099f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	885b      	ldrh	r3, [r3, #2]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d136      	bne.n	80099ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009986:	2b00      	cmp	r3, #0
 8009988:	d004      	beq.n	8009994 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f004 fe9c 	bl	800e6cc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fceb 	bl	800a370 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800999a:	7bbb      	ldrb	r3, [r7, #14]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff fde4 	bl	800956c <USBD_CoreFindEP>
 80099a4:	4603      	mov	r3, r0
 80099a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099a8:	7b7b      	ldrb	r3, [r7, #13]
 80099aa:	2bff      	cmp	r3, #255	@ 0xff
 80099ac:	d01f      	beq.n	80099ee <USBD_StdEPReq+0x1c6>
 80099ae:	7b7b      	ldrb	r3, [r7, #13]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d11c      	bne.n	80099ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099b4:	7b7a      	ldrb	r2, [r7, #13]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099bc:	7b7a      	ldrb	r2, [r7, #13]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	32ae      	adds	r2, #174	@ 0xae
 80099c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d010      	beq.n	80099ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099cc:	7b7a      	ldrb	r2, [r7, #13]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	32ae      	adds	r2, #174	@ 0xae
 80099d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
 80099de:	4603      	mov	r3, r0
 80099e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80099e2:	e004      	b.n	80099ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80099e4:	6839      	ldr	r1, [r7, #0]
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 fc05 	bl	800a1f6 <USBD_CtlError>
              break;
 80099ec:	e000      	b.n	80099f0 <USBD_StdEPReq+0x1c8>
              break;
 80099ee:	bf00      	nop
          }
          break;
 80099f0:	e0ad      	b.n	8009b4e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d002      	beq.n	8009a04 <USBD_StdEPReq+0x1dc>
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d033      	beq.n	8009a6a <USBD_StdEPReq+0x242>
 8009a02:	e099      	b.n	8009b38 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a04:	7bbb      	ldrb	r3, [r7, #14]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d007      	beq.n	8009a1a <USBD_StdEPReq+0x1f2>
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b80      	cmp	r3, #128	@ 0x80
 8009a0e:	d004      	beq.n	8009a1a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fbef 	bl	800a1f6 <USBD_CtlError>
                break;
 8009a18:	e093      	b.n	8009b42 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	da0b      	bge.n	8009a3a <USBD_StdEPReq+0x212>
 8009a22:	7bbb      	ldrb	r3, [r7, #14]
 8009a24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	3310      	adds	r3, #16
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	4413      	add	r3, r2
 8009a36:	3304      	adds	r3, #4
 8009a38:	e00b      	b.n	8009a52 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a40:	4613      	mov	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	4413      	add	r3, r2
 8009a50:	3304      	adds	r3, #4
 8009a52:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	2200      	movs	r2, #0
 8009a58:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	330e      	adds	r3, #14
 8009a5e:	2202      	movs	r2, #2
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fc44 	bl	800a2f0 <USBD_CtlSendData>
              break;
 8009a68:	e06b      	b.n	8009b42 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	da11      	bge.n	8009a96 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	f003 020f 	and.w	r2, r3, #15
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	440b      	add	r3, r1
 8009a84:	3323      	adds	r3, #35	@ 0x23
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d117      	bne.n	8009abc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009a8c:	6839      	ldr	r1, [r7, #0]
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fbb1 	bl	800a1f6 <USBD_CtlError>
                  break;
 8009a94:	e055      	b.n	8009b42 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009a96:	7bbb      	ldrb	r3, [r7, #14]
 8009a98:	f003 020f 	and.w	r2, r3, #15
 8009a9c:	6879      	ldr	r1, [r7, #4]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	440b      	add	r3, r1
 8009aa8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d104      	bne.n	8009abc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fb9e 	bl	800a1f6 <USBD_CtlError>
                  break;
 8009aba:	e042      	b.n	8009b42 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	da0b      	bge.n	8009adc <USBD_StdEPReq+0x2b4>
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	3310      	adds	r3, #16
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3304      	adds	r3, #4
 8009ada:	e00b      	b.n	8009af4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	4413      	add	r3, r2
 8009af2:	3304      	adds	r3, #4
 8009af4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <USBD_StdEPReq+0x2da>
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	2b80      	cmp	r3, #128	@ 0x80
 8009b00:	d103      	bne.n	8009b0a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2200      	movs	r2, #0
 8009b06:	739a      	strb	r2, [r3, #14]
 8009b08:	e00e      	b.n	8009b28 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f004 fdfb 	bl	800e70a <USBD_LL_IsStallEP>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	739a      	strb	r2, [r3, #14]
 8009b20:	e002      	b.n	8009b28 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2200      	movs	r2, #0
 8009b26:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	330e      	adds	r3, #14
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fbdd 	bl	800a2f0 <USBD_CtlSendData>
              break;
 8009b36:	e004      	b.n	8009b42 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fb5b 	bl	800a1f6 <USBD_CtlError>
              break;
 8009b40:	bf00      	nop
          }
          break;
 8009b42:	e004      	b.n	8009b4e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fb55 	bl	800a1f6 <USBD_CtlError>
          break;
 8009b4c:	bf00      	nop
      }
      break;
 8009b4e:	e005      	b.n	8009b5c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8009b50:	6839      	ldr	r1, [r7, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fb4f 	bl	800a1f6 <USBD_CtlError>
      break;
 8009b58:	e000      	b.n	8009b5c <USBD_StdEPReq+0x334>
      break;
 8009b5a:	bf00      	nop
  }

  return ret;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	0a1b      	lsrs	r3, r3, #8
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	3b01      	subs	r3, #1
 8009b88:	2b06      	cmp	r3, #6
 8009b8a:	f200 8128 	bhi.w	8009dde <USBD_GetDescriptor+0x276>
 8009b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b94 <USBD_GetDescriptor+0x2c>)
 8009b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b94:	08009bb1 	.word	0x08009bb1
 8009b98:	08009bc9 	.word	0x08009bc9
 8009b9c:	08009c09 	.word	0x08009c09
 8009ba0:	08009ddf 	.word	0x08009ddf
 8009ba4:	08009ddf 	.word	0x08009ddf
 8009ba8:	08009d7f 	.word	0x08009d7f
 8009bac:	08009dab 	.word	0x08009dab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	7c12      	ldrb	r2, [r2, #16]
 8009bbc:	f107 0108 	add.w	r1, r7, #8
 8009bc0:	4610      	mov	r0, r2
 8009bc2:	4798      	blx	r3
 8009bc4:	60f8      	str	r0, [r7, #12]
      break;
 8009bc6:	e112      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	7c1b      	ldrb	r3, [r3, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10d      	bne.n	8009bec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd8:	f107 0208 	add.w	r2, r7, #8
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4798      	blx	r3
 8009be0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	2202      	movs	r2, #2
 8009be8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009bea:	e100      	b.n	8009dee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf4:	f107 0208 	add.w	r2, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	2202      	movs	r2, #2
 8009c04:	701a      	strb	r2, [r3, #0]
      break;
 8009c06:	e0f2      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	885b      	ldrh	r3, [r3, #2]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	f200 80ac 	bhi.w	8009d6c <USBD_GetDescriptor+0x204>
 8009c14:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <USBD_GetDescriptor+0xb4>)
 8009c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1a:	bf00      	nop
 8009c1c:	08009c35 	.word	0x08009c35
 8009c20:	08009c69 	.word	0x08009c69
 8009c24:	08009c9d 	.word	0x08009c9d
 8009c28:	08009cd1 	.word	0x08009cd1
 8009c2c:	08009d05 	.word	0x08009d05
 8009c30:	08009d39 	.word	0x08009d39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00b      	beq.n	8009c58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	7c12      	ldrb	r2, [r2, #16]
 8009c4c:	f107 0108 	add.w	r1, r7, #8
 8009c50:	4610      	mov	r0, r2
 8009c52:	4798      	blx	r3
 8009c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c56:	e091      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 facb 	bl	800a1f6 <USBD_CtlError>
            err++;
 8009c60:	7afb      	ldrb	r3, [r7, #11]
 8009c62:	3301      	adds	r3, #1
 8009c64:	72fb      	strb	r3, [r7, #11]
          break;
 8009c66:	e089      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	7c12      	ldrb	r2, [r2, #16]
 8009c80:	f107 0108 	add.w	r1, r7, #8
 8009c84:	4610      	mov	r0, r2
 8009c86:	4798      	blx	r3
 8009c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c8a:	e077      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fab1 	bl	800a1f6 <USBD_CtlError>
            err++;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	3301      	adds	r3, #1
 8009c98:	72fb      	strb	r3, [r7, #11]
          break;
 8009c9a:	e06f      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00b      	beq.n	8009cc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	7c12      	ldrb	r2, [r2, #16]
 8009cb4:	f107 0108 	add.w	r1, r7, #8
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4798      	blx	r3
 8009cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cbe:	e05d      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cc0:	6839      	ldr	r1, [r7, #0]
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fa97 	bl	800a1f6 <USBD_CtlError>
            err++;
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cce:	e055      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cd6:	691b      	ldr	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00b      	beq.n	8009cf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	7c12      	ldrb	r2, [r2, #16]
 8009ce8:	f107 0108 	add.w	r1, r7, #8
 8009cec:	4610      	mov	r0, r2
 8009cee:	4798      	blx	r3
 8009cf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cf2:	e043      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fa7d 	bl	800a1f6 <USBD_CtlError>
            err++;
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	72fb      	strb	r3, [r7, #11]
          break;
 8009d02:	e03b      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d00b      	beq.n	8009d28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	7c12      	ldrb	r2, [r2, #16]
 8009d1c:	f107 0108 	add.w	r1, r7, #8
 8009d20:	4610      	mov	r0, r2
 8009d22:	4798      	blx	r3
 8009d24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d26:	e029      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fa63 	bl	800a1f6 <USBD_CtlError>
            err++;
 8009d30:	7afb      	ldrb	r3, [r7, #11]
 8009d32:	3301      	adds	r3, #1
 8009d34:	72fb      	strb	r3, [r7, #11]
          break;
 8009d36:	e021      	b.n	8009d7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00b      	beq.n	8009d5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	7c12      	ldrb	r2, [r2, #16]
 8009d50:	f107 0108 	add.w	r1, r7, #8
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d5a:	e00f      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa49 	bl	800a1f6 <USBD_CtlError>
            err++;
 8009d64:	7afb      	ldrb	r3, [r7, #11]
 8009d66:	3301      	adds	r3, #1
 8009d68:	72fb      	strb	r3, [r7, #11]
          break;
 8009d6a:	e007      	b.n	8009d7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d6c:	6839      	ldr	r1, [r7, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 fa41 	bl	800a1f6 <USBD_CtlError>
          err++;
 8009d74:	7afb      	ldrb	r3, [r7, #11]
 8009d76:	3301      	adds	r3, #1
 8009d78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009d7a:	bf00      	nop
      }
      break;
 8009d7c:	e037      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7c1b      	ldrb	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d109      	bne.n	8009d9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d8e:	f107 0208 	add.w	r2, r7, #8
 8009d92:	4610      	mov	r0, r2
 8009d94:	4798      	blx	r3
 8009d96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009d98:	e029      	b.n	8009dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009d9a:	6839      	ldr	r1, [r7, #0]
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fa2a 	bl	800a1f6 <USBD_CtlError>
        err++;
 8009da2:	7afb      	ldrb	r3, [r7, #11]
 8009da4:	3301      	adds	r3, #1
 8009da6:	72fb      	strb	r3, [r7, #11]
      break;
 8009da8:	e021      	b.n	8009dee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7c1b      	ldrb	r3, [r3, #16]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10d      	bne.n	8009dce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dba:	f107 0208 	add.w	r2, r7, #8
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	4798      	blx	r3
 8009dc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	2207      	movs	r2, #7
 8009dca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dcc:	e00f      	b.n	8009dee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dce:	6839      	ldr	r1, [r7, #0]
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 fa10 	bl	800a1f6 <USBD_CtlError>
        err++;
 8009dd6:	7afb      	ldrb	r3, [r7, #11]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	72fb      	strb	r3, [r7, #11]
      break;
 8009ddc:	e007      	b.n	8009dee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fa08 	bl	800a1f6 <USBD_CtlError>
      err++;
 8009de6:	7afb      	ldrb	r3, [r7, #11]
 8009de8:	3301      	adds	r3, #1
 8009dea:	72fb      	strb	r3, [r7, #11]
      break;
 8009dec:	bf00      	nop
  }

  if (err != 0U)
 8009dee:	7afb      	ldrb	r3, [r7, #11]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d11e      	bne.n	8009e32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	88db      	ldrh	r3, [r3, #6]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d016      	beq.n	8009e2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009dfc:	893b      	ldrh	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00e      	beq.n	8009e20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	88da      	ldrh	r2, [r3, #6]
 8009e06:	893b      	ldrh	r3, [r7, #8]
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	bf28      	it	cs
 8009e0c:	4613      	movcs	r3, r2
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e12:	893b      	ldrh	r3, [r7, #8]
 8009e14:	461a      	mov	r2, r3
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fa69 	bl	800a2f0 <USBD_CtlSendData>
 8009e1e:	e009      	b.n	8009e34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e20:	6839      	ldr	r1, [r7, #0]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 f9e7 	bl	800a1f6 <USBD_CtlError>
 8009e28:	e004      	b.n	8009e34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 faa0 	bl	800a370 <USBD_CtlSendStatus>
 8009e30:	e000      	b.n	8009e34 <USBD_GetDescriptor+0x2cc>
    return;
 8009e32:	bf00      	nop
  }
}
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop

08009e3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	889b      	ldrh	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d131      	bne.n	8009eb2 <USBD_SetAddress+0x76>
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	88db      	ldrh	r3, [r3, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d12d      	bne.n	8009eb2 <USBD_SetAddress+0x76>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	885b      	ldrh	r3, [r3, #2]
 8009e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e5c:	d829      	bhi.n	8009eb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	885b      	ldrh	r3, [r3, #2]
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d104      	bne.n	8009e80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f9bc 	bl	800a1f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e7e:	e01d      	b.n	8009ebc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	7bfa      	ldrb	r2, [r7, #15]
 8009e84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f004 fc68 	bl	800e762 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa6c 	bl	800a370 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009e98:	7bfb      	ldrb	r3, [r7, #15]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea6:	e009      	b.n	8009ebc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eb0:	e004      	b.n	8009ebc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009eb2:	6839      	ldr	r1, [r7, #0]
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 f99e 	bl	800a1f6 <USBD_CtlError>
  }
}
 8009eba:	bf00      	nop
 8009ebc:	bf00      	nop
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	885b      	ldrh	r3, [r3, #2]
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	4b4e      	ldr	r3, [pc, #312]	@ (800a014 <USBD_SetConfig+0x150>)
 8009eda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009edc:	4b4d      	ldr	r3, [pc, #308]	@ (800a014 <USBD_SetConfig+0x150>)
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d905      	bls.n	8009ef0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f985 	bl	800a1f6 <USBD_CtlError>
    return USBD_FAIL;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e08c      	b.n	800a00a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	d002      	beq.n	8009f02 <USBD_SetConfig+0x3e>
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d029      	beq.n	8009f54 <USBD_SetConfig+0x90>
 8009f00:	e075      	b.n	8009fee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f02:	4b44      	ldr	r3, [pc, #272]	@ (800a014 <USBD_SetConfig+0x150>)
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d020      	beq.n	8009f4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f0a:	4b42      	ldr	r3, [pc, #264]	@ (800a014 <USBD_SetConfig+0x150>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f14:	4b3f      	ldr	r3, [pc, #252]	@ (800a014 <USBD_SetConfig+0x150>)
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7fe ffce 	bl	8008ebc <USBD_SetClassConfig>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d008      	beq.n	8009f3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f2a:	6839      	ldr	r1, [r7, #0]
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f962 	bl	800a1f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2202      	movs	r2, #2
 8009f36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f3a:	e065      	b.n	800a008 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa17 	bl	800a370 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2203      	movs	r2, #3
 8009f46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009f4a:	e05d      	b.n	800a008 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fa0f 	bl	800a370 <USBD_CtlSendStatus>
      break;
 8009f52:	e059      	b.n	800a008 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f54:	4b2f      	ldr	r3, [pc, #188]	@ (800a014 <USBD_SetConfig+0x150>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d112      	bne.n	8009f82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009f64:	4b2b      	ldr	r3, [pc, #172]	@ (800a014 <USBD_SetConfig+0x150>)
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f6e:	4b29      	ldr	r3, [pc, #164]	@ (800a014 <USBD_SetConfig+0x150>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7fe ffbd 	bl	8008ef4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f9f8 	bl	800a370 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f80:	e042      	b.n	800a008 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009f82:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <USBD_SetConfig+0x150>)
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	461a      	mov	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d02a      	beq.n	8009fe6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7fe ffab 	bl	8008ef4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009f9e:	4b1d      	ldr	r3, [pc, #116]	@ (800a014 <USBD_SetConfig+0x150>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fa8:	4b1a      	ldr	r3, [pc, #104]	@ (800a014 <USBD_SetConfig+0x150>)
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7fe ff84 	bl	8008ebc <USBD_SetClassConfig>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00f      	beq.n	8009fde <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f918 	bl	800a1f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fe ff90 	bl	8008ef4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2202      	movs	r2, #2
 8009fd8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009fdc:	e014      	b.n	800a008 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f9c6 	bl	800a370 <USBD_CtlSendStatus>
      break;
 8009fe4:	e010      	b.n	800a008 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f9c2 	bl	800a370 <USBD_CtlSendStatus>
      break;
 8009fec:	e00c      	b.n	800a008 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f900 	bl	800a1f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ff6:	4b07      	ldr	r3, [pc, #28]	@ (800a014 <USBD_SetConfig+0x150>)
 8009ff8:	781b      	ldrb	r3, [r3, #0]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7fe ff79 	bl	8008ef4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a002:	2303      	movs	r3, #3
 800a004:	73fb      	strb	r3, [r7, #15]
      break;
 800a006:	bf00      	nop
  }

  return ret;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	200026dc 	.word	0x200026dc

0800a018 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	88db      	ldrh	r3, [r3, #6]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d004      	beq.n	800a034 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f8e2 	bl	800a1f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a032:	e023      	b.n	800a07c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	dc02      	bgt.n	800a046 <USBD_GetConfig+0x2e>
 800a040:	2b00      	cmp	r3, #0
 800a042:	dc03      	bgt.n	800a04c <USBD_GetConfig+0x34>
 800a044:	e015      	b.n	800a072 <USBD_GetConfig+0x5a>
 800a046:	2b03      	cmp	r3, #3
 800a048:	d00b      	beq.n	800a062 <USBD_GetConfig+0x4a>
 800a04a:	e012      	b.n	800a072 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	3308      	adds	r3, #8
 800a056:	2201      	movs	r2, #1
 800a058:	4619      	mov	r1, r3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f948 	bl	800a2f0 <USBD_CtlSendData>
        break;
 800a060:	e00c      	b.n	800a07c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	3304      	adds	r3, #4
 800a066:	2201      	movs	r2, #1
 800a068:	4619      	mov	r1, r3
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f940 	bl	800a2f0 <USBD_CtlSendData>
        break;
 800a070:	e004      	b.n	800a07c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f8be 	bl	800a1f6 <USBD_CtlError>
        break;
 800a07a:	bf00      	nop
}
 800a07c:	bf00      	nop
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a094:	b2db      	uxtb	r3, r3
 800a096:	3b01      	subs	r3, #1
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d81e      	bhi.n	800a0da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	88db      	ldrh	r3, [r3, #6]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d004      	beq.n	800a0ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f8a5 	bl	800a1f6 <USBD_CtlError>
        break;
 800a0ac:	e01a      	b.n	800a0e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d005      	beq.n	800a0ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	f043 0202 	orr.w	r2, r3, #2
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	330c      	adds	r3, #12
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f90c 	bl	800a2f0 <USBD_CtlSendData>
      break;
 800a0d8:	e004      	b.n	800a0e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 f88a 	bl	800a1f6 <USBD_CtlError>
      break;
 800a0e2:	bf00      	nop
  }
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	885b      	ldrh	r3, [r3, #2]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d107      	bne.n	800a10e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f932 	bl	800a370 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a10c:	e013      	b.n	800a136 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	885b      	ldrh	r3, [r3, #2]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d10b      	bne.n	800a12e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	889b      	ldrh	r3, [r3, #4]
 800a11a:	0a1b      	lsrs	r3, r3, #8
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f922 	bl	800a370 <USBD_CtlSendStatus>
}
 800a12c:	e003      	b.n	800a136 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a12e:	6839      	ldr	r1, [r7, #0]
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f860 	bl	800a1f6 <USBD_CtlError>
}
 800a136:	bf00      	nop
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b082      	sub	sp, #8
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	2b02      	cmp	r3, #2
 800a154:	d80b      	bhi.n	800a16e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	885b      	ldrh	r3, [r3, #2]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d10c      	bne.n	800a178 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f902 	bl	800a370 <USBD_CtlSendStatus>
      }
      break;
 800a16c:	e004      	b.n	800a178 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f840 	bl	800a1f6 <USBD_CtlError>
      break;
 800a176:	e000      	b.n	800a17a <USBD_ClrFeature+0x3c>
      break;
 800a178:	bf00      	nop
  }
}
 800a17a:	bf00      	nop
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	781a      	ldrb	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
 800a19c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	781a      	ldrb	r2, [r3, #0]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f7ff fa3e 	bl	800962e <SWAPBYTE>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fa31 	bl	800962e <SWAPBYTE>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7ff fa24 	bl	800962e <SWAPBYTE>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	80da      	strh	r2, [r3, #6]
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b082      	sub	sp, #8
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a200:	2180      	movs	r1, #128	@ 0x80
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f004 fa43 	bl	800e68e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a208:	2100      	movs	r1, #0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f004 fa3f 	bl	800e68e <USBD_LL_StallEP>
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a224:	2300      	movs	r3, #0
 800a226:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d042      	beq.n	800a2b4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a232:	6938      	ldr	r0, [r7, #16]
 800a234:	f000 f842 	bl	800a2bc <USBD_GetLen>
 800a238:	4603      	mov	r3, r0
 800a23a:	3301      	adds	r3, #1
 800a23c:	005b      	lsls	r3, r3, #1
 800a23e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a242:	d808      	bhi.n	800a256 <USBD_GetString+0x3e>
 800a244:	6938      	ldr	r0, [r7, #16]
 800a246:	f000 f839 	bl	800a2bc <USBD_GetLen>
 800a24a:	4603      	mov	r3, r0
 800a24c:	3301      	adds	r3, #1
 800a24e:	b29b      	uxth	r3, r3
 800a250:	005b      	lsls	r3, r3, #1
 800a252:	b29a      	uxth	r2, r3
 800a254:	e001      	b.n	800a25a <USBD_GetString+0x42>
 800a256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	4413      	add	r3, r2
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7812      	ldrb	r2, [r2, #0]
 800a268:	701a      	strb	r2, [r3, #0]
  idx++;
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	3301      	adds	r3, #1
 800a26e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	4413      	add	r3, r2
 800a276:	2203      	movs	r2, #3
 800a278:	701a      	strb	r2, [r3, #0]
  idx++;
 800a27a:	7dfb      	ldrb	r3, [r7, #23]
 800a27c:	3301      	adds	r3, #1
 800a27e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a280:	e013      	b.n	800a2aa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	4413      	add	r3, r2
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	7812      	ldrb	r2, [r2, #0]
 800a28c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	3301      	adds	r3, #1
 800a292:	613b      	str	r3, [r7, #16]
    idx++;
 800a294:	7dfb      	ldrb	r3, [r7, #23]
 800a296:	3301      	adds	r3, #1
 800a298:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	4413      	add	r3, r2
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1e7      	bne.n	800a282 <USBD_GetString+0x6a>
 800a2b2:	e000      	b.n	800a2b6 <USBD_GetString+0x9e>
    return;
 800a2b4:	bf00      	nop
  }
}
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2cc:	e005      	b.n	800a2da <USBD_GetLen+0x1e>
  {
    len++;
 800a2ce:	7bfb      	ldrb	r3, [r7, #15]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1f5      	bne.n	800a2ce <USBD_GetLen+0x12>
  }

  return len;
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b084      	sub	sp, #16
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2202      	movs	r2, #2
 800a300:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	2100      	movs	r1, #0
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f004 fa3f 	bl	800e7a0 <USBD_LL_Transmit>

  return USBD_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	2100      	movs	r1, #0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f004 fa2e 	bl	800e7a0 <USBD_LL_Transmit>

  return USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	60f8      	str	r0, [r7, #12]
 800a356:	60b9      	str	r1, [r7, #8]
 800a358:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	2100      	movs	r1, #0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f004 fa3e 	bl	800e7e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2204      	movs	r2, #4
 800a37c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a380:	2300      	movs	r3, #0
 800a382:	2200      	movs	r2, #0
 800a384:	2100      	movs	r1, #0
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f004 fa0a 	bl	800e7a0 <USBD_LL_Transmit>

  return USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2205      	movs	r2, #5
 800a3a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f004 fa18 	bl	800e7e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a3cc:	89fb      	ldrh	r3, [r7, #14]
 800a3ce:	021b      	lsls	r3, r3, #8
 800a3d0:	b21a      	sxth	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	b21b      	sxth	r3, r3
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	b21b      	sxth	r3, r3
 800a3dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a3de:	89fb      	ldrh	r3, [r7, #14]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	3303      	adds	r3, #3
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	021b      	lsls	r3, r3, #8
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	3202      	adds	r2, #2
 800a404:	7812      	ldrb	r2, [r2, #0]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	3201      	adds	r2, #1
 800a412:	7812      	ldrb	r2, [r2, #0]
 800a414:	4313      	orrs	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	021b      	lsls	r3, r3, #8
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	7812      	ldrb	r2, [r2, #0]
 800a420:	4313      	orrs	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]
	return rv;
 800a424:	68fb      	ldr	r3, [r7, #12]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a432:	b480      	push	{r7}
 800a434:	b083      	sub	sp, #12
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	460b      	mov	r3, r1
 800a43c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	607a      	str	r2, [r7, #4]
 800a444:	887a      	ldrh	r2, [r7, #2]
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	887b      	ldrh	r3, [r7, #2]
 800a44c:	0a1b      	lsrs	r3, r3, #8
 800a44e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	607a      	str	r2, [r7, #4]
 800a456:	887a      	ldrh	r2, [r7, #2]
 800a458:	b2d2      	uxtb	r2, r2
 800a45a:	701a      	strb	r2, [r3, #0]
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr

0800a468 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a468:	b480      	push	{r7}
 800a46a:	b083      	sub	sp, #12
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	1c5a      	adds	r2, r3, #1
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	b2d2      	uxtb	r2, r2
 800a47c:	701a      	strb	r2, [r3, #0]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	0a1b      	lsrs	r3, r3, #8
 800a482:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	1c5a      	adds	r2, r3, #1
 800a488:	607a      	str	r2, [r7, #4]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	b2d2      	uxtb	r2, r2
 800a48e:	701a      	strb	r2, [r3, #0]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	0a1b      	lsrs	r3, r3, #8
 800a494:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	1c5a      	adds	r2, r3, #1
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	683a      	ldr	r2, [r7, #0]
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	0a1b      	lsrs	r3, r3, #8
 800a4a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	607a      	str	r2, [r7, #4]
 800a4ae:	683a      	ldr	r2, [r7, #0]
 800a4b0:	b2d2      	uxtb	r2, r2
 800a4b2:	701a      	strb	r2, [r3, #0]
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a4c0:	b480      	push	{r7}
 800a4c2:	b087      	sub	sp, #28
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00d      	beq.n	800a4f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	1c53      	adds	r3, r2, #1
 800a4de:	613b      	str	r3, [r7, #16]
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	1c59      	adds	r1, r3, #1
 800a4e4:	6179      	str	r1, [r7, #20]
 800a4e6:	7812      	ldrb	r2, [r2, #0]
 800a4e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	607b      	str	r3, [r7, #4]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1f1      	bne.n	800a4da <mem_cpy+0x1a>
	}
}
 800a4f6:	bf00      	nop
 800a4f8:	371c      	adds	r7, #28
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a502:	b480      	push	{r7}
 800a504:	b087      	sub	sp, #28
 800a506:	af00      	add	r7, sp, #0
 800a508:	60f8      	str	r0, [r7, #12]
 800a50a:	60b9      	str	r1, [r7, #8]
 800a50c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	1c5a      	adds	r2, r3, #1
 800a516:	617a      	str	r2, [r7, #20]
 800a518:	68ba      	ldr	r2, [r7, #8]
 800a51a:	b2d2      	uxtb	r2, r2
 800a51c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3b01      	subs	r3, #1
 800a522:	607b      	str	r3, [r7, #4]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d1f3      	bne.n	800a512 <mem_set+0x10>
}
 800a52a:	bf00      	nop
 800a52c:	bf00      	nop
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a538:	b480      	push	{r7}
 800a53a:	b089      	sub	sp, #36	@ 0x24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	61fb      	str	r3, [r7, #28]
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	1c5a      	adds	r2, r3, #1
 800a554:	61fa      	str	r2, [r7, #28]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	4619      	mov	r1, r3
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	61ba      	str	r2, [r7, #24]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	1acb      	subs	r3, r1, r3
 800a564:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3b01      	subs	r3, #1
 800a56a:	607b      	str	r3, [r7, #4]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d002      	beq.n	800a578 <mem_cmp+0x40>
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d0eb      	beq.n	800a550 <mem_cmp+0x18>

	return r;
 800a578:	697b      	ldr	r3, [r7, #20]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3724      	adds	r7, #36	@ 0x24
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a590:	e002      	b.n	800a598 <chk_chr+0x12>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	3301      	adds	r3, #1
 800a596:	607b      	str	r3, [r7, #4]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d005      	beq.n	800a5ac <chk_chr+0x26>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d1f2      	bne.n	800a592 <chk_chr+0xc>
	return *str;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e029      	b.n	800a624 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a5d0:	4a27      	ldr	r2, [pc, #156]	@ (800a670 <chk_lock+0xb4>)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	011b      	lsls	r3, r3, #4
 800a5d6:	4413      	add	r3, r2
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01d      	beq.n	800a61a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a5de:	4a24      	ldr	r2, [pc, #144]	@ (800a670 <chk_lock+0xb4>)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	011b      	lsls	r3, r3, #4
 800a5e4:	4413      	add	r3, r2
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d116      	bne.n	800a61e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a5f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a670 <chk_lock+0xb4>)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	011b      	lsls	r3, r3, #4
 800a5f6:	4413      	add	r3, r2
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a600:	429a      	cmp	r2, r3
 800a602:	d10c      	bne.n	800a61e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a604:	4a1a      	ldr	r2, [pc, #104]	@ (800a670 <chk_lock+0xb4>)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	011b      	lsls	r3, r3, #4
 800a60a:	4413      	add	r3, r2
 800a60c:	3308      	adds	r3, #8
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a614:	429a      	cmp	r2, r3
 800a616:	d102      	bne.n	800a61e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a618:	e007      	b.n	800a62a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a61a:	2301      	movs	r3, #1
 800a61c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3301      	adds	r3, #1
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d9d2      	bls.n	800a5d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d109      	bne.n	800a644 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d102      	bne.n	800a63c <chk_lock+0x80>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d101      	bne.n	800a640 <chk_lock+0x84>
 800a63c:	2300      	movs	r3, #0
 800a63e:	e010      	b.n	800a662 <chk_lock+0xa6>
 800a640:	2312      	movs	r3, #18
 800a642:	e00e      	b.n	800a662 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d108      	bne.n	800a65c <chk_lock+0xa0>
 800a64a:	4a09      	ldr	r2, [pc, #36]	@ (800a670 <chk_lock+0xb4>)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	011b      	lsls	r3, r3, #4
 800a650:	4413      	add	r3, r2
 800a652:	330c      	adds	r3, #12
 800a654:	881b      	ldrh	r3, [r3, #0]
 800a656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a65a:	d101      	bne.n	800a660 <chk_lock+0xa4>
 800a65c:	2310      	movs	r3, #16
 800a65e:	e000      	b.n	800a662 <chk_lock+0xa6>
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr
 800a66e:	bf00      	nop
 800a670:	200026e8 	.word	0x200026e8

0800a674 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a67a:	2300      	movs	r3, #0
 800a67c:	607b      	str	r3, [r7, #4]
 800a67e:	e002      	b.n	800a686 <enq_lock+0x12>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3301      	adds	r3, #1
 800a684:	607b      	str	r3, [r7, #4]
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d806      	bhi.n	800a69a <enq_lock+0x26>
 800a68c:	4a09      	ldr	r2, [pc, #36]	@ (800a6b4 <enq_lock+0x40>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	4413      	add	r3, r2
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1f2      	bne.n	800a680 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	bf14      	ite	ne
 800a6a0:	2301      	movne	r3, #1
 800a6a2:	2300      	moveq	r3, #0
 800a6a4:	b2db      	uxtb	r3, r3
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	200026e8 	.word	0x200026e8

0800a6b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	60fb      	str	r3, [r7, #12]
 800a6c6:	e01f      	b.n	800a708 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a6c8:	4a41      	ldr	r2, [pc, #260]	@ (800a7d0 <inc_lock+0x118>)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	011b      	lsls	r3, r3, #4
 800a6ce:	4413      	add	r3, r2
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d113      	bne.n	800a702 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a6da:	4a3d      	ldr	r2, [pc, #244]	@ (800a7d0 <inc_lock+0x118>)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	4413      	add	r3, r2
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d109      	bne.n	800a702 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a6ee:	4a38      	ldr	r2, [pc, #224]	@ (800a7d0 <inc_lock+0x118>)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	011b      	lsls	r3, r3, #4
 800a6f4:	4413      	add	r3, r2
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d006      	beq.n	800a710 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3301      	adds	r3, #1
 800a706:	60fb      	str	r3, [r7, #12]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d9dc      	bls.n	800a6c8 <inc_lock+0x10>
 800a70e:	e000      	b.n	800a712 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a710:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d132      	bne.n	800a77e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a718:	2300      	movs	r3, #0
 800a71a:	60fb      	str	r3, [r7, #12]
 800a71c:	e002      	b.n	800a724 <inc_lock+0x6c>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3301      	adds	r3, #1
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d806      	bhi.n	800a738 <inc_lock+0x80>
 800a72a:	4a29      	ldr	r2, [pc, #164]	@ (800a7d0 <inc_lock+0x118>)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	011b      	lsls	r3, r3, #4
 800a730:	4413      	add	r3, r2
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1f2      	bne.n	800a71e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d101      	bne.n	800a742 <inc_lock+0x8a>
 800a73e:	2300      	movs	r3, #0
 800a740:	e040      	b.n	800a7c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	4922      	ldr	r1, [pc, #136]	@ (800a7d0 <inc_lock+0x118>)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	011b      	lsls	r3, r3, #4
 800a74c:	440b      	add	r3, r1
 800a74e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	491e      	ldr	r1, [pc, #120]	@ (800a7d0 <inc_lock+0x118>)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	440b      	add	r3, r1
 800a75c:	3304      	adds	r3, #4
 800a75e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695a      	ldr	r2, [r3, #20]
 800a764:	491a      	ldr	r1, [pc, #104]	@ (800a7d0 <inc_lock+0x118>)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	011b      	lsls	r3, r3, #4
 800a76a:	440b      	add	r3, r1
 800a76c:	3308      	adds	r3, #8
 800a76e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a770:	4a17      	ldr	r2, [pc, #92]	@ (800a7d0 <inc_lock+0x118>)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	4413      	add	r3, r2
 800a778:	330c      	adds	r3, #12
 800a77a:	2200      	movs	r2, #0
 800a77c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d009      	beq.n	800a798 <inc_lock+0xe0>
 800a784:	4a12      	ldr	r2, [pc, #72]	@ (800a7d0 <inc_lock+0x118>)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	011b      	lsls	r3, r3, #4
 800a78a:	4413      	add	r3, r2
 800a78c:	330c      	adds	r3, #12
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <inc_lock+0xe0>
 800a794:	2300      	movs	r3, #0
 800a796:	e015      	b.n	800a7c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d108      	bne.n	800a7b0 <inc_lock+0xf8>
 800a79e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d0 <inc_lock+0x118>)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	011b      	lsls	r3, r3, #4
 800a7a4:	4413      	add	r3, r2
 800a7a6:	330c      	adds	r3, #12
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	e001      	b.n	800a7b4 <inc_lock+0xfc>
 800a7b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a7b4:	4906      	ldr	r1, [pc, #24]	@ (800a7d0 <inc_lock+0x118>)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	011b      	lsls	r3, r3, #4
 800a7ba:	440b      	add	r3, r1
 800a7bc:	330c      	adds	r3, #12
 800a7be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	3714      	adds	r7, #20
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	200026e8 	.word	0x200026e8

0800a7d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	607b      	str	r3, [r7, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d825      	bhi.n	800a834 <dec_lock+0x60>
		n = Files[i].ctr;
 800a7e8:	4a17      	ldr	r2, [pc, #92]	@ (800a848 <dec_lock+0x74>)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	011b      	lsls	r3, r3, #4
 800a7ee:	4413      	add	r3, r2
 800a7f0:	330c      	adds	r3, #12
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a7f6:	89fb      	ldrh	r3, [r7, #14]
 800a7f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7fc:	d101      	bne.n	800a802 <dec_lock+0x2e>
 800a7fe:	2300      	movs	r3, #0
 800a800:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a802:	89fb      	ldrh	r3, [r7, #14]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d002      	beq.n	800a80e <dec_lock+0x3a>
 800a808:	89fb      	ldrh	r3, [r7, #14]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a80e:	4a0e      	ldr	r2, [pc, #56]	@ (800a848 <dec_lock+0x74>)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	4413      	add	r3, r2
 800a816:	330c      	adds	r3, #12
 800a818:	89fa      	ldrh	r2, [r7, #14]
 800a81a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a81c:	89fb      	ldrh	r3, [r7, #14]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d105      	bne.n	800a82e <dec_lock+0x5a>
 800a822:	4a09      	ldr	r2, [pc, #36]	@ (800a848 <dec_lock+0x74>)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	011b      	lsls	r3, r3, #4
 800a828:	4413      	add	r3, r2
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	737b      	strb	r3, [r7, #13]
 800a832:	e001      	b.n	800a838 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a834:	2302      	movs	r3, #2
 800a836:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a838:	7b7b      	ldrb	r3, [r7, #13]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3714      	adds	r7, #20
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	200026e8 	.word	0x200026e8

0800a84c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]
 800a858:	e010      	b.n	800a87c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a85a:	4a0d      	ldr	r2, [pc, #52]	@ (800a890 <clear_lock+0x44>)
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	4413      	add	r3, r2
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	d105      	bne.n	800a876 <clear_lock+0x2a>
 800a86a:	4a09      	ldr	r2, [pc, #36]	@ (800a890 <clear_lock+0x44>)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	011b      	lsls	r3, r3, #4
 800a870:	4413      	add	r3, r2
 800a872:	2200      	movs	r2, #0
 800a874:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3301      	adds	r3, #1
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d9eb      	bls.n	800a85a <clear_lock+0xe>
	}
}
 800a882:	bf00      	nop
 800a884:	bf00      	nop
 800a886:	3714      	adds	r7, #20
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	200026e8 	.word	0x200026e8

0800a894 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b086      	sub	sp, #24
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	78db      	ldrb	r3, [r3, #3]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d034      	beq.n	800a912 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	7858      	ldrb	r0, [r3, #1]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	697a      	ldr	r2, [r7, #20]
 800a8bc:	f7f6 f9c8 	bl	8000c50 <disk_write>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	73fb      	strb	r3, [r7, #15]
 800a8ca:	e022      	b.n	800a912 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	1ad2      	subs	r2, r2, r3
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d217      	bcs.n	800a912 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	789b      	ldrb	r3, [r3, #2]
 800a8e6:	613b      	str	r3, [r7, #16]
 800a8e8:	e010      	b.n	800a90c <sync_window+0x78>
					wsect += fs->fsize;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7858      	ldrb	r0, [r3, #1]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a8fe:	2301      	movs	r3, #1
 800a900:	697a      	ldr	r2, [r7, #20]
 800a902:	f7f6 f9a5 	bl	8000c50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	3b01      	subs	r3, #1
 800a90a:	613b      	str	r3, [r7, #16]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d8eb      	bhi.n	800a8ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a912:	7bfb      	ldrb	r3, [r7, #15]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a926:	2300      	movs	r3, #0
 800a928:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	429a      	cmp	r2, r3
 800a932:	d01b      	beq.n	800a96c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff ffad 	bl	800a894 <sync_window>
 800a93a:	4603      	mov	r3, r0
 800a93c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d113      	bne.n	800a96c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7858      	ldrb	r0, [r3, #1]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a94e:	2301      	movs	r3, #1
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	f7f6 f95d 	bl	8000c10 <disk_read>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a95c:	f04f 33ff 	mov.w	r3, #4294967295
 800a960:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a962:	2301      	movs	r3, #1
 800a964:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800a96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3710      	adds	r7, #16
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
	...

0800a978 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7ff ff87 	bl	800a894 <sync_window>
 800a986:	4603      	mov	r3, r0
 800a988:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a98a:	7bfb      	ldrb	r3, [r7, #15]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d159      	bne.n	800aa44 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	2b03      	cmp	r3, #3
 800a996:	d149      	bne.n	800aa2c <sync_fs+0xb4>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	791b      	ldrb	r3, [r3, #4]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d145      	bne.n	800aa2c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	899b      	ldrh	r3, [r3, #12]
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	f7ff fda8 	bl	800a502 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3338      	adds	r3, #56	@ 0x38
 800a9b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a9ba:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff fd37 	bl	800a432 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	3338      	adds	r3, #56	@ 0x38
 800a9c8:	4921      	ldr	r1, [pc, #132]	@ (800aa50 <sync_fs+0xd8>)
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fd4c 	bl	800a468 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3338      	adds	r3, #56	@ 0x38
 800a9d4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a9d8:	491e      	ldr	r1, [pc, #120]	@ (800aa54 <sync_fs+0xdc>)
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff fd44 	bl	800a468 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3338      	adds	r3, #56	@ 0x38
 800a9e4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f7ff fd3a 	bl	800a468 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	3338      	adds	r3, #56	@ 0x38
 800a9f8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	695b      	ldr	r3, [r3, #20]
 800aa00:	4619      	mov	r1, r3
 800aa02:	4610      	mov	r0, r2
 800aa04:	f7ff fd30 	bl	800a468 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	7858      	ldrb	r0, [r3, #1]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa20:	2301      	movs	r3, #1
 800aa22:	f7f6 f915 	bl	8000c50 <disk_write>
			fs->fsi_flag = 0;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	2200      	movs	r2, #0
 800aa32:	2100      	movs	r1, #0
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7f6 f92b 	bl	8000c90 <disk_ioctl>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d001      	beq.n	800aa44 <sync_fs+0xcc>
 800aa40:	2301      	movs	r3, #1
 800aa42:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	41615252 	.word	0x41615252
 800aa54:	61417272 	.word	0x61417272

0800aa58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	3b02      	subs	r3, #2
 800aa66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	3b02      	subs	r3, #2
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d301      	bcc.n	800aa78 <clust2sect+0x20>
 800aa74:	2300      	movs	r3, #0
 800aa76:	e008      	b.n	800aa8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	895b      	ldrh	r3, [r3, #10]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	fb03 f202 	mul.w	r2, r3, r2
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa88:	4413      	add	r3, r2
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b086      	sub	sp, #24
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d904      	bls.n	800aab6 <get_fat+0x20>
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d302      	bcc.n	800aabc <get_fat+0x26>
		val = 1;	/* Internal error */
 800aab6:	2301      	movs	r3, #1
 800aab8:	617b      	str	r3, [r7, #20]
 800aaba:	e0ba      	b.n	800ac32 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aabc:	f04f 33ff 	mov.w	r3, #4294967295
 800aac0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b03      	cmp	r3, #3
 800aac8:	f000 8082 	beq.w	800abd0 <get_fat+0x13a>
 800aacc:	2b03      	cmp	r3, #3
 800aace:	f300 80a6 	bgt.w	800ac1e <get_fat+0x188>
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d002      	beq.n	800aadc <get_fat+0x46>
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d055      	beq.n	800ab86 <get_fat+0xf0>
 800aada:	e0a0      	b.n	800ac1e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	60fb      	str	r3, [r7, #12]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	085b      	lsrs	r3, r3, #1
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aaee:	693b      	ldr	r3, [r7, #16]
 800aaf0:	899b      	ldrh	r3, [r3, #12]
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800aafa:	4413      	add	r3, r2
 800aafc:	4619      	mov	r1, r3
 800aafe:	6938      	ldr	r0, [r7, #16]
 800ab00:	f7ff ff0c 	bl	800a91c <move_window>
 800ab04:	4603      	mov	r3, r0
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f040 808c 	bne.w	800ac24 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	60fa      	str	r2, [r7, #12]
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	8992      	ldrh	r2, [r2, #12]
 800ab16:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab1a:	fb01 f202 	mul.w	r2, r1, r2
 800ab1e:	1a9b      	subs	r3, r3, r2
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	4413      	add	r3, r2
 800ab24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	899b      	ldrh	r3, [r3, #12]
 800ab32:	4619      	mov	r1, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab3a:	4413      	add	r3, r2
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6938      	ldr	r0, [r7, #16]
 800ab40:	f7ff feec 	bl	800a91c <move_window>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d16e      	bne.n	800ac28 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	899b      	ldrh	r3, [r3, #12]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab56:	fb01 f202 	mul.w	r2, r1, r2
 800ab5a:	1a9b      	subs	r3, r3, r2
 800ab5c:	693a      	ldr	r2, [r7, #16]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d002      	beq.n	800ab7c <get_fat+0xe6>
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	091b      	lsrs	r3, r3, #4
 800ab7a:	e002      	b.n	800ab82 <get_fat+0xec>
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab82:	617b      	str	r3, [r7, #20]
			break;
 800ab84:	e055      	b.n	800ac32 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	899b      	ldrh	r3, [r3, #12]
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	4619      	mov	r1, r3
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab9a:	4413      	add	r3, r2
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6938      	ldr	r0, [r7, #16]
 800aba0:	f7ff febc 	bl	800a91c <move_window>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d140      	bne.n	800ac2c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	8992      	ldrh	r2, [r2, #12]
 800abb8:	fbb3 f0f2 	udiv	r0, r3, r2
 800abbc:	fb00 f202 	mul.w	r2, r0, r2
 800abc0:	1a9b      	subs	r3, r3, r2
 800abc2:	440b      	add	r3, r1
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff fbf9 	bl	800a3bc <ld_word>
 800abca:	4603      	mov	r3, r0
 800abcc:	617b      	str	r3, [r7, #20]
			break;
 800abce:	e030      	b.n	800ac32 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	899b      	ldrh	r3, [r3, #12]
 800abd8:	089b      	lsrs	r3, r3, #2
 800abda:	b29b      	uxth	r3, r3
 800abdc:	4619      	mov	r1, r3
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	fbb3 f3f1 	udiv	r3, r3, r1
 800abe4:	4413      	add	r3, r2
 800abe6:	4619      	mov	r1, r3
 800abe8:	6938      	ldr	r0, [r7, #16]
 800abea:	f7ff fe97 	bl	800a91c <move_window>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d11d      	bne.n	800ac30 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	8992      	ldrh	r2, [r2, #12]
 800ac02:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac06:	fb00 f202 	mul.w	r2, r0, r2
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	440b      	add	r3, r1
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff fbec 	bl	800a3ec <ld_dword>
 800ac14:	4603      	mov	r3, r0
 800ac16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ac1a:	617b      	str	r3, [r7, #20]
			break;
 800ac1c:	e009      	b.n	800ac32 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ac1e:	2301      	movs	r3, #1
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	e006      	b.n	800ac32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac24:	bf00      	nop
 800ac26:	e004      	b.n	800ac32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac28:	bf00      	nop
 800ac2a:	e002      	b.n	800ac32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ac2c:	bf00      	nop
 800ac2e:	e000      	b.n	800ac32 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ac30:	bf00      	nop
		}
	}

	return val;
 800ac32:	697b      	ldr	r3, [r7, #20]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3718      	adds	r7, #24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ac3c:	b590      	push	{r4, r7, lr}
 800ac3e:	b089      	sub	sp, #36	@ 0x24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ac48:	2302      	movs	r3, #2
 800ac4a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	f240 8109 	bls.w	800ae66 <put_fat+0x22a>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	f080 8103 	bcs.w	800ae66 <put_fat+0x22a>
		switch (fs->fs_type) {
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	2b03      	cmp	r3, #3
 800ac66:	f000 80b6 	beq.w	800add6 <put_fat+0x19a>
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	f300 80fb 	bgt.w	800ae66 <put_fat+0x22a>
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d003      	beq.n	800ac7c <put_fat+0x40>
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	f000 8083 	beq.w	800ad80 <put_fat+0x144>
 800ac7a:	e0f4      	b.n	800ae66 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	61bb      	str	r3, [r7, #24]
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	085b      	lsrs	r3, r3, #1
 800ac84:	69ba      	ldr	r2, [r7, #24]
 800ac86:	4413      	add	r3, r2
 800ac88:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	899b      	ldrh	r3, [r3, #12]
 800ac92:	4619      	mov	r1, r3
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7ff fe3c 	bl	800a91c <move_window>
 800aca4:	4603      	mov	r3, r0
 800aca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aca8:	7ffb      	ldrb	r3, [r7, #31]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f040 80d4 	bne.w	800ae58 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	1c5a      	adds	r2, r3, #1
 800acba:	61ba      	str	r2, [r7, #24]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	8992      	ldrh	r2, [r2, #12]
 800acc0:	fbb3 f0f2 	udiv	r0, r3, r2
 800acc4:	fb00 f202 	mul.w	r2, r0, r2
 800acc8:	1a9b      	subs	r3, r3, r2
 800acca:	440b      	add	r3, r1
 800accc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d00d      	beq.n	800acf4 <put_fat+0xb8>
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	b25b      	sxtb	r3, r3
 800acde:	f003 030f 	and.w	r3, r3, #15
 800ace2:	b25a      	sxtb	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	011b      	lsls	r3, r3, #4
 800acea:	b25b      	sxtb	r3, r3
 800acec:	4313      	orrs	r3, r2
 800acee:	b25b      	sxtb	r3, r3
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	e001      	b.n	800acf8 <put_fat+0xbc>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	697a      	ldr	r2, [r7, #20]
 800acfa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	2201      	movs	r2, #1
 800ad00:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	899b      	ldrh	r3, [r3, #12]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad12:	4413      	add	r3, r2
 800ad14:	4619      	mov	r1, r3
 800ad16:	68f8      	ldr	r0, [r7, #12]
 800ad18:	f7ff fe00 	bl	800a91c <move_window>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad20:	7ffb      	ldrb	r3, [r7, #31]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	f040 809a 	bne.w	800ae5c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	899b      	ldrh	r3, [r3, #12]
 800ad32:	461a      	mov	r2, r3
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad3a:	fb00 f202 	mul.w	r2, r0, r2
 800ad3e:	1a9b      	subs	r3, r3, r2
 800ad40:	440b      	add	r3, r1
 800ad42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	f003 0301 	and.w	r3, r3, #1
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <put_fat+0x11a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	091b      	lsrs	r3, r3, #4
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	e00e      	b.n	800ad74 <put_fat+0x138>
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	b25b      	sxtb	r3, r3
 800ad5c:	f023 030f 	bic.w	r3, r3, #15
 800ad60:	b25a      	sxtb	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	0a1b      	lsrs	r3, r3, #8
 800ad66:	b25b      	sxtb	r3, r3
 800ad68:	f003 030f 	and.w	r3, r3, #15
 800ad6c:	b25b      	sxtb	r3, r3
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	b25b      	sxtb	r3, r3
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	70da      	strb	r2, [r3, #3]
			break;
 800ad7e:	e072      	b.n	800ae66 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	899b      	ldrh	r3, [r3, #12]
 800ad88:	085b      	lsrs	r3, r3, #1
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad94:	4413      	add	r3, r2
 800ad96:	4619      	mov	r1, r3
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f7ff fdbf 	bl	800a91c <move_window>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ada2:	7ffb      	ldrb	r3, [r7, #31]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d15b      	bne.n	800ae60 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	005b      	lsls	r3, r3, #1
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	8992      	ldrh	r2, [r2, #12]
 800adb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800adba:	fb00 f202 	mul.w	r2, r0, r2
 800adbe:	1a9b      	subs	r3, r3, r2
 800adc0:	440b      	add	r3, r1
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	b292      	uxth	r2, r2
 800adc6:	4611      	mov	r1, r2
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff fb32 	bl	800a432 <st_word>
			fs->wflag = 1;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2201      	movs	r2, #1
 800add2:	70da      	strb	r2, [r3, #3]
			break;
 800add4:	e047      	b.n	800ae66 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	899b      	ldrh	r3, [r3, #12]
 800adde:	089b      	lsrs	r3, r3, #2
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	4619      	mov	r1, r3
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	fbb3 f3f1 	udiv	r3, r3, r1
 800adea:	4413      	add	r3, r2
 800adec:	4619      	mov	r1, r3
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f7ff fd94 	bl	800a91c <move_window>
 800adf4:	4603      	mov	r3, r0
 800adf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adf8:	7ffb      	ldrb	r3, [r7, #31]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d132      	bne.n	800ae64 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	8992      	ldrh	r2, [r2, #12]
 800ae12:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae16:	fb00 f202 	mul.w	r2, r0, r2
 800ae1a:	1a9b      	subs	r3, r3, r2
 800ae1c:	440b      	add	r3, r1
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7ff fae4 	bl	800a3ec <ld_dword>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ae2a:	4323      	orrs	r3, r4
 800ae2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	8992      	ldrh	r2, [r2, #12]
 800ae3c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae40:	fb00 f202 	mul.w	r2, r0, r2
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	440b      	add	r3, r1
 800ae48:	6879      	ldr	r1, [r7, #4]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff fb0c 	bl	800a468 <st_dword>
			fs->wflag = 1;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	70da      	strb	r2, [r3, #3]
			break;
 800ae56:	e006      	b.n	800ae66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ae58:	bf00      	nop
 800ae5a:	e004      	b.n	800ae66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ae5c:	bf00      	nop
 800ae5e:	e002      	b.n	800ae66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ae60:	bf00      	nop
 800ae62:	e000      	b.n	800ae66 <put_fat+0x22a>
			if (res != FR_OK) break;
 800ae64:	bf00      	nop
		}
	}
	return res;
 800ae66:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3724      	adds	r7, #36	@ 0x24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd90      	pop	{r4, r7, pc}

0800ae70 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d904      	bls.n	800ae96 <remove_chain+0x26>
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	69db      	ldr	r3, [r3, #28]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d301      	bcc.n	800ae9a <remove_chain+0x2a>
 800ae96:	2302      	movs	r3, #2
 800ae98:	e04b      	b.n	800af32 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00c      	beq.n	800aeba <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800aea0:	f04f 32ff 	mov.w	r2, #4294967295
 800aea4:	6879      	ldr	r1, [r7, #4]
 800aea6:	69b8      	ldr	r0, [r7, #24]
 800aea8:	f7ff fec8 	bl	800ac3c <put_fat>
 800aeac:	4603      	mov	r3, r0
 800aeae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aeb0:	7ffb      	ldrb	r3, [r7, #31]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <remove_chain+0x4a>
 800aeb6:	7ffb      	ldrb	r3, [r7, #31]
 800aeb8:	e03b      	b.n	800af32 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800aeba:	68b9      	ldr	r1, [r7, #8]
 800aebc:	68f8      	ldr	r0, [r7, #12]
 800aebe:	f7ff fdea 	bl	800aa96 <get_fat>
 800aec2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d031      	beq.n	800af2e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d101      	bne.n	800aed4 <remove_chain+0x64>
 800aed0:	2302      	movs	r3, #2
 800aed2:	e02e      	b.n	800af32 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeda:	d101      	bne.n	800aee0 <remove_chain+0x70>
 800aedc:	2301      	movs	r3, #1
 800aede:	e028      	b.n	800af32 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800aee0:	2200      	movs	r2, #0
 800aee2:	68b9      	ldr	r1, [r7, #8]
 800aee4:	69b8      	ldr	r0, [r7, #24]
 800aee6:	f7ff fea9 	bl	800ac3c <put_fat>
 800aeea:	4603      	mov	r3, r0
 800aeec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aeee:	7ffb      	ldrb	r3, [r7, #31]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <remove_chain+0x88>
 800aef4:	7ffb      	ldrb	r3, [r7, #31]
 800aef6:	e01c      	b.n	800af32 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	699a      	ldr	r2, [r3, #24]
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	3b02      	subs	r3, #2
 800af02:	429a      	cmp	r2, r3
 800af04:	d20b      	bcs.n	800af1e <remove_chain+0xae>
			fs->free_clst++;
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800af10:	69bb      	ldr	r3, [r7, #24]
 800af12:	791b      	ldrb	r3, [r3, #4]
 800af14:	f043 0301 	orr.w	r3, r3, #1
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d3c6      	bcc.n	800aeba <remove_chain+0x4a>
 800af2c:	e000      	b.n	800af30 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800af2e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3720      	adds	r7, #32
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b088      	sub	sp, #32
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
 800af42:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10d      	bne.n	800af6c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d004      	beq.n	800af66 <create_chain+0x2c>
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	429a      	cmp	r2, r3
 800af64:	d31b      	bcc.n	800af9e <create_chain+0x64>
 800af66:	2301      	movs	r3, #1
 800af68:	61bb      	str	r3, [r7, #24]
 800af6a:	e018      	b.n	800af9e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7ff fd91 	bl	800aa96 <get_fat>
 800af74:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d801      	bhi.n	800af80 <create_chain+0x46>
 800af7c:	2301      	movs	r3, #1
 800af7e:	e070      	b.n	800b062 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af86:	d101      	bne.n	800af8c <create_chain+0x52>
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	e06a      	b.n	800b062 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	429a      	cmp	r2, r3
 800af94:	d201      	bcs.n	800af9a <create_chain+0x60>
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	e063      	b.n	800b062 <create_chain+0x128>
		scl = clst;
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	3301      	adds	r3, #1
 800afa6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	69db      	ldr	r3, [r3, #28]
 800afac:	69fa      	ldr	r2, [r7, #28]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d307      	bcc.n	800afc2 <create_chain+0x88>
				ncl = 2;
 800afb2:	2302      	movs	r3, #2
 800afb4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800afb6:	69fa      	ldr	r2, [r7, #28]
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d901      	bls.n	800afc2 <create_chain+0x88>
 800afbe:	2300      	movs	r3, #0
 800afc0:	e04f      	b.n	800b062 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800afc2:	69f9      	ldr	r1, [r7, #28]
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f7ff fd66 	bl	800aa96 <get_fat>
 800afca:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00e      	beq.n	800aff0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d003      	beq.n	800afe0 <create_chain+0xa6>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afde:	d101      	bne.n	800afe4 <create_chain+0xaa>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	e03e      	b.n	800b062 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800afe4:	69fa      	ldr	r2, [r7, #28]
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d1da      	bne.n	800afa2 <create_chain+0x68>
 800afec:	2300      	movs	r3, #0
 800afee:	e038      	b.n	800b062 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800aff0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800aff2:	f04f 32ff 	mov.w	r2, #4294967295
 800aff6:	69f9      	ldr	r1, [r7, #28]
 800aff8:	6938      	ldr	r0, [r7, #16]
 800affa:	f7ff fe1f 	bl	800ac3c <put_fat>
 800affe:	4603      	mov	r3, r0
 800b000:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d109      	bne.n	800b01c <create_chain+0xe2>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d006      	beq.n	800b01c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b00e:	69fa      	ldr	r2, [r7, #28]
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6938      	ldr	r0, [r7, #16]
 800b014:	f7ff fe12 	bl	800ac3c <put_fat>
 800b018:	4603      	mov	r3, r0
 800b01a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d116      	bne.n	800b050 <create_chain+0x116>
		fs->last_clst = ncl;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	69fa      	ldr	r2, [r7, #28]
 800b026:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	699a      	ldr	r2, [r3, #24]
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	69db      	ldr	r3, [r3, #28]
 800b030:	3b02      	subs	r3, #2
 800b032:	429a      	cmp	r2, r3
 800b034:	d804      	bhi.n	800b040 <create_chain+0x106>
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	1e5a      	subs	r2, r3, #1
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	791b      	ldrb	r3, [r3, #4]
 800b044:	f043 0301 	orr.w	r3, r3, #1
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	711a      	strb	r2, [r3, #4]
 800b04e:	e007      	b.n	800b060 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b050:	7dfb      	ldrb	r3, [r7, #23]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d102      	bne.n	800b05c <create_chain+0x122>
 800b056:	f04f 33ff 	mov.w	r3, #4294967295
 800b05a:	e000      	b.n	800b05e <create_chain+0x124>
 800b05c:	2301      	movs	r3, #1
 800b05e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b060:	69fb      	ldr	r3, [r7, #28]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3720      	adds	r7, #32
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b06a:	b480      	push	{r7}
 800b06c:	b087      	sub	sp, #28
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
 800b072:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07e:	3304      	adds	r3, #4
 800b080:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	899b      	ldrh	r3, [r3, #12]
 800b086:	461a      	mov	r2, r3
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	8952      	ldrh	r2, [r2, #10]
 800b092:	fbb3 f3f2 	udiv	r3, r3, r2
 800b096:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	1d1a      	adds	r2, r3, #4
 800b09c:	613a      	str	r2, [r7, #16]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <clmt_clust+0x42>
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	e010      	b.n	800b0ce <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d307      	bcc.n	800b0c4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	617b      	str	r3, [r7, #20]
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b0c2:	e7e9      	b.n	800b098 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b0c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	4413      	add	r3, r2
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	371c      	adds	r7, #28
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b086      	sub	sp, #24
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b0f0:	d204      	bcs.n	800b0fc <dir_sdi+0x22>
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	f003 031f 	and.w	r3, r3, #31
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b0fc:	2302      	movs	r3, #2
 800b0fe:	e071      	b.n	800b1e4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d106      	bne.n	800b120 <dir_sdi+0x46>
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	2b02      	cmp	r3, #2
 800b118:	d902      	bls.n	800b120 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b11e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d10c      	bne.n	800b140 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	095b      	lsrs	r3, r3, #5
 800b12a:	693a      	ldr	r2, [r7, #16]
 800b12c:	8912      	ldrh	r2, [r2, #8]
 800b12e:	4293      	cmp	r3, r2
 800b130:	d301      	bcc.n	800b136 <dir_sdi+0x5c>
 800b132:	2302      	movs	r3, #2
 800b134:	e056      	b.n	800b1e4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	61da      	str	r2, [r3, #28]
 800b13e:	e02d      	b.n	800b19c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	895b      	ldrh	r3, [r3, #10]
 800b144:	461a      	mov	r2, r3
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	899b      	ldrh	r3, [r3, #12]
 800b14a:	fb02 f303 	mul.w	r3, r2, r3
 800b14e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b150:	e019      	b.n	800b186 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6979      	ldr	r1, [r7, #20]
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fc9d 	bl	800aa96 <get_fat>
 800b15c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b164:	d101      	bne.n	800b16a <dir_sdi+0x90>
 800b166:	2301      	movs	r3, #1
 800b168:	e03c      	b.n	800b1e4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d904      	bls.n	800b17a <dir_sdi+0xa0>
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	429a      	cmp	r2, r3
 800b178:	d301      	bcc.n	800b17e <dir_sdi+0xa4>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e032      	b.n	800b1e4 <dir_sdi+0x10a>
			ofs -= csz;
 800b17e:	683a      	ldr	r2, [r7, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d2e1      	bcs.n	800b152 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b18e:	6979      	ldr	r1, [r7, #20]
 800b190:	6938      	ldr	r0, [r7, #16]
 800b192:	f7ff fc61 	bl	800aa58 <clust2sect>
 800b196:	4602      	mov	r2, r0
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <dir_sdi+0xd4>
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	e01a      	b.n	800b1e4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	69da      	ldr	r2, [r3, #28]
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	899b      	ldrh	r3, [r3, #12]
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800b1be:	441a      	add	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	899b      	ldrh	r3, [r3, #12]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1d6:	fb00 f202 	mul.w	r2, r0, r2
 800b1da:	1a9b      	subs	r3, r3, r2
 800b1dc:	18ca      	adds	r2, r1, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	3320      	adds	r3, #32
 800b202:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	69db      	ldr	r3, [r3, #28]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d003      	beq.n	800b214 <dir_next+0x28>
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b212:	d301      	bcc.n	800b218 <dir_next+0x2c>
 800b214:	2304      	movs	r3, #4
 800b216:	e0bb      	b.n	800b390 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	899b      	ldrh	r3, [r3, #12]
 800b21c:	461a      	mov	r2, r3
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	fbb3 f1f2 	udiv	r1, r3, r2
 800b224:	fb01 f202 	mul.w	r2, r1, r2
 800b228:	1a9b      	subs	r3, r3, r2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f040 809d 	bne.w	800b36a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10b      	bne.n	800b25a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	095b      	lsrs	r3, r3, #5
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	8912      	ldrh	r2, [r2, #8]
 800b24a:	4293      	cmp	r3, r2
 800b24c:	f0c0 808d 	bcc.w	800b36a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	61da      	str	r2, [r3, #28]
 800b256:	2304      	movs	r3, #4
 800b258:	e09a      	b.n	800b390 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	899b      	ldrh	r3, [r3, #12]
 800b25e:	461a      	mov	r2, r3
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	fbb3 f3f2 	udiv	r3, r3, r2
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	8952      	ldrh	r2, [r2, #10]
 800b26a:	3a01      	subs	r2, #1
 800b26c:	4013      	ands	r3, r2
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d17b      	bne.n	800b36a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	4619      	mov	r1, r3
 800b27a:	4610      	mov	r0, r2
 800b27c:	f7ff fc0b 	bl	800aa96 <get_fat>
 800b280:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d801      	bhi.n	800b28c <dir_next+0xa0>
 800b288:	2302      	movs	r3, #2
 800b28a:	e081      	b.n	800b390 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b292:	d101      	bne.n	800b298 <dir_next+0xac>
 800b294:	2301      	movs	r3, #1
 800b296:	e07b      	b.n	800b390 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d359      	bcc.n	800b356 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d104      	bne.n	800b2b2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	61da      	str	r2, [r3, #28]
 800b2ae:	2304      	movs	r3, #4
 800b2b0:	e06e      	b.n	800b390 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	699b      	ldr	r3, [r3, #24]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f7ff fe3d 	bl	800af3a <create_chain>
 800b2c0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d101      	bne.n	800b2cc <dir_next+0xe0>
 800b2c8:	2307      	movs	r3, #7
 800b2ca:	e061      	b.n	800b390 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d101      	bne.n	800b2d6 <dir_next+0xea>
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	e05c      	b.n	800b390 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2dc:	d101      	bne.n	800b2e2 <dir_next+0xf6>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e056      	b.n	800b390 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f7ff fad6 	bl	800a894 <sync_window>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <dir_next+0x106>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e04e      	b.n	800b390 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	899b      	ldrh	r3, [r3, #12]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	2100      	movs	r1, #0
 800b300:	f7ff f8ff 	bl	800a502 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b304:	2300      	movs	r3, #0
 800b306:	613b      	str	r3, [r7, #16]
 800b308:	6979      	ldr	r1, [r7, #20]
 800b30a:	68f8      	ldr	r0, [r7, #12]
 800b30c:	f7ff fba4 	bl	800aa58 <clust2sect>
 800b310:	4602      	mov	r2, r0
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	635a      	str	r2, [r3, #52]	@ 0x34
 800b316:	e012      	b.n	800b33e <dir_next+0x152>
						fs->wflag = 1;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2201      	movs	r2, #1
 800b31c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	f7ff fab8 	bl	800a894 <sync_window>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <dir_next+0x142>
 800b32a:	2301      	movs	r3, #1
 800b32c:	e030      	b.n	800b390 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	3301      	adds	r3, #1
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	635a      	str	r2, [r3, #52]	@ 0x34
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	895b      	ldrh	r3, [r3, #10]
 800b342:	461a      	mov	r2, r3
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	4293      	cmp	r3, r2
 800b348:	d3e6      	bcc.n	800b318 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	1ad2      	subs	r2, r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	697a      	ldr	r2, [r7, #20]
 800b35a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b35c:	6979      	ldr	r1, [r7, #20]
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f7ff fb7a 	bl	800aa58 <clust2sect>
 800b364:	4602      	mov	r2, r0
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	899b      	ldrh	r3, [r3, #12]
 800b37a:	461a      	mov	r2, r3
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b382:	fb00 f202 	mul.w	r2, r0, r2
 800b386:	1a9b      	subs	r3, r3, r2
 800b388:	18ca      	adds	r2, r1, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3718      	adds	r7, #24
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff fe95 	bl	800b0da <dir_sdi>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b3b4:	7dfb      	ldrb	r3, [r7, #23]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d12b      	bne.n	800b412 <dir_alloc+0x7a>
		n = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f7ff faa9 	bl	800a91c <move_window>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d11d      	bne.n	800b410 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a1b      	ldr	r3, [r3, #32]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2be5      	cmp	r3, #229	@ 0xe5
 800b3dc:	d004      	beq.n	800b3e8 <dir_alloc+0x50>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d107      	bne.n	800b3f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	613b      	str	r3, [r7, #16]
 800b3ee:	693a      	ldr	r2, [r7, #16]
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d102      	bne.n	800b3fc <dir_alloc+0x64>
 800b3f6:	e00c      	b.n	800b412 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f7ff fef4 	bl	800b1ec <dir_next>
 800b404:	4603      	mov	r3, r0
 800b406:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d0d7      	beq.n	800b3be <dir_alloc+0x26>
 800b40e:	e000      	b.n	800b412 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b410:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	2b04      	cmp	r3, #4
 800b416:	d101      	bne.n	800b41c <dir_alloc+0x84>
 800b418:	2307      	movs	r3, #7
 800b41a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b084      	sub	sp, #16
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
 800b42e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	331a      	adds	r3, #26
 800b434:	4618      	mov	r0, r3
 800b436:	f7fe ffc1 	bl	800a3bc <ld_word>
 800b43a:	4603      	mov	r3, r0
 800b43c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b03      	cmp	r3, #3
 800b444:	d109      	bne.n	800b45a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	3314      	adds	r3, #20
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe ffb6 	bl	800a3bc <ld_word>
 800b450:	4603      	mov	r3, r0
 800b452:	041b      	lsls	r3, r3, #16
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	4313      	orrs	r3, r2
 800b458:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b45a:	68fb      	ldr	r3, [r7, #12]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	331a      	adds	r3, #26
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	b292      	uxth	r2, r2
 800b478:	4611      	mov	r1, r2
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe ffd9 	bl	800a432 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	2b03      	cmp	r3, #3
 800b486:	d109      	bne.n	800b49c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	f103 0214 	add.w	r2, r3, #20
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	0c1b      	lsrs	r3, r3, #16
 800b492:	b29b      	uxth	r3, r3
 800b494:	4619      	mov	r1, r3
 800b496:	4610      	mov	r0, r2
 800b498:	f7fe ffcb 	bl	800a432 <st_word>
	}
}
 800b49c:	bf00      	nop
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b4a4:	b590      	push	{r4, r7, lr}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	331a      	adds	r3, #26
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe ff82 	bl	800a3bc <ld_word>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <cmp_lfn+0x1e>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e059      	b.n	800b576 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b4ca:	1e5a      	subs	r2, r3, #1
 800b4cc:	4613      	mov	r3, r2
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	4413      	add	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b4d8:	2301      	movs	r3, #1
 800b4da:	81fb      	strh	r3, [r7, #14]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	613b      	str	r3, [r7, #16]
 800b4e0:	e033      	b.n	800b54a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b4e2:	4a27      	ldr	r2, [pc, #156]	@ (800b580 <cmp_lfn+0xdc>)
 800b4e4:	693b      	ldr	r3, [r7, #16]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fe ff63 	bl	800a3bc <ld_word>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b4fa:	89fb      	ldrh	r3, [r7, #14]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d01a      	beq.n	800b536 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	2bfe      	cmp	r3, #254	@ 0xfe
 800b504:	d812      	bhi.n	800b52c <cmp_lfn+0x88>
 800b506:	89bb      	ldrh	r3, [r7, #12]
 800b508:	4618      	mov	r0, r3
 800b50a:	f002 fc81 	bl	800de10 <ff_wtoupper>
 800b50e:	4603      	mov	r3, r0
 800b510:	461c      	mov	r4, r3
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	617a      	str	r2, [r7, #20]
 800b518:	005b      	lsls	r3, r3, #1
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	4413      	add	r3, r2
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	f002 fc75 	bl	800de10 <ff_wtoupper>
 800b526:	4603      	mov	r3, r0
 800b528:	429c      	cmp	r4, r3
 800b52a:	d001      	beq.n	800b530 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b52c:	2300      	movs	r3, #0
 800b52e:	e022      	b.n	800b576 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b530:	89bb      	ldrh	r3, [r7, #12]
 800b532:	81fb      	strh	r3, [r7, #14]
 800b534:	e006      	b.n	800b544 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b536:	89bb      	ldrh	r3, [r7, #12]
 800b538:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d001      	beq.n	800b544 <cmp_lfn+0xa0>
 800b540:	2300      	movs	r3, #0
 800b542:	e018      	b.n	800b576 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	3301      	adds	r3, #1
 800b548:	613b      	str	r3, [r7, #16]
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	2b0c      	cmp	r3, #12
 800b54e:	d9c8      	bls.n	800b4e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00b      	beq.n	800b574 <cmp_lfn+0xd0>
 800b55c:	89fb      	ldrh	r3, [r7, #14]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d008      	beq.n	800b574 <cmp_lfn+0xd0>
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	4413      	add	r3, r2
 800b56a:	881b      	ldrh	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <cmp_lfn+0xd0>
 800b570:	2300      	movs	r3, #0
 800b572:	e000      	b.n	800b576 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b574:	2301      	movs	r3, #1
}
 800b576:	4618      	mov	r0, r3
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd90      	pop	{r4, r7, pc}
 800b57e:	bf00      	nop
 800b580:	0800f4fc 	.word	0x0800f4fc

0800b584 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	331a      	adds	r3, #26
 800b592:	4618      	mov	r0, r3
 800b594:	f7fe ff12 	bl	800a3bc <ld_word>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <pick_lfn+0x1e>
 800b59e:	2300      	movs	r3, #0
 800b5a0:	e04d      	b.n	800b63e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5aa:	1e5a      	subs	r2, r3, #1
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	005b      	lsls	r3, r3, #1
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	81fb      	strh	r3, [r7, #14]
 800b5bc:	2300      	movs	r3, #0
 800b5be:	613b      	str	r3, [r7, #16]
 800b5c0:	e028      	b.n	800b614 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b5c2:	4a21      	ldr	r2, [pc, #132]	@ (800b648 <pick_lfn+0xc4>)
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f7fe fef3 	bl	800a3bc <ld_word>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b5da:	89fb      	ldrh	r3, [r7, #14]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00f      	beq.n	800b600 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	2bfe      	cmp	r3, #254	@ 0xfe
 800b5e4:	d901      	bls.n	800b5ea <pick_lfn+0x66>
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e029      	b.n	800b63e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b5ea:	89bb      	ldrh	r3, [r7, #12]
 800b5ec:	81fb      	strh	r3, [r7, #14]
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	617a      	str	r2, [r7, #20]
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	89fa      	ldrh	r2, [r7, #14]
 800b5fc:	801a      	strh	r2, [r3, #0]
 800b5fe:	e006      	b.n	800b60e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b600:	89bb      	ldrh	r3, [r7, #12]
 800b602:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b606:	4293      	cmp	r3, r2
 800b608:	d001      	beq.n	800b60e <pick_lfn+0x8a>
 800b60a:	2300      	movs	r3, #0
 800b60c:	e017      	b.n	800b63e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	3301      	adds	r3, #1
 800b612:	613b      	str	r3, [r7, #16]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	2b0c      	cmp	r3, #12
 800b618:	d9d3      	bls.n	800b5c2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2bfe      	cmp	r3, #254	@ 0xfe
 800b62a:	d901      	bls.n	800b630 <pick_lfn+0xac>
 800b62c:	2300      	movs	r3, #0
 800b62e:	e006      	b.n	800b63e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	687a      	ldr	r2, [r7, #4]
 800b636:	4413      	add	r3, r2
 800b638:	2200      	movs	r2, #0
 800b63a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b63c:	2301      	movs	r3, #1
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	0800f4fc 	.word	0x0800f4fc

0800b64c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	4611      	mov	r1, r2
 800b658:	461a      	mov	r2, r3
 800b65a:	460b      	mov	r3, r1
 800b65c:	71fb      	strb	r3, [r7, #7]
 800b65e:	4613      	mov	r3, r2
 800b660:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	330d      	adds	r3, #13
 800b666:	79ba      	ldrb	r2, [r7, #6]
 800b668:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	330b      	adds	r3, #11
 800b66e:	220f      	movs	r2, #15
 800b670:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	330c      	adds	r3, #12
 800b676:	2200      	movs	r2, #0
 800b678:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	331a      	adds	r3, #26
 800b67e:	2100      	movs	r1, #0
 800b680:	4618      	mov	r0, r3
 800b682:	f7fe fed6 	bl	800a432 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b686:	79fb      	ldrb	r3, [r7, #7]
 800b688:	1e5a      	subs	r2, r3, #1
 800b68a:	4613      	mov	r3, r2
 800b68c:	005b      	lsls	r3, r3, #1
 800b68e:	4413      	add	r3, r2
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	4413      	add	r3, r2
 800b694:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	82fb      	strh	r3, [r7, #22]
 800b69a:	2300      	movs	r3, #0
 800b69c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b69e:	8afb      	ldrh	r3, [r7, #22]
 800b6a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d007      	beq.n	800b6b8 <put_lfn+0x6c>
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	61fa      	str	r2, [r7, #28]
 800b6ae:	005b      	lsls	r3, r3, #1
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b6b8:	4a17      	ldr	r2, [pc, #92]	@ (800b718 <put_lfn+0xcc>)
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	4413      	add	r3, r2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	8afa      	ldrh	r2, [r7, #22]
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe feb1 	bl	800a432 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b6d0:	8afb      	ldrh	r3, [r7, #22]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <put_lfn+0x90>
 800b6d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	61bb      	str	r3, [r7, #24]
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	2b0c      	cmp	r3, #12
 800b6e6:	d9da      	bls.n	800b69e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b6e8:	8afb      	ldrh	r3, [r7, #22]
 800b6ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d006      	beq.n	800b700 <put_lfn+0xb4>
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	4413      	add	r3, r2
 800b6fa:	881b      	ldrh	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d103      	bne.n	800b708 <put_lfn+0xbc>
 800b700:	79fb      	ldrb	r3, [r7, #7]
 800b702:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b706:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	79fa      	ldrb	r2, [r7, #7]
 800b70c:	701a      	strb	r2, [r3, #0]
}
 800b70e:	bf00      	nop
 800b710:	3720      	adds	r7, #32
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	0800f4fc 	.word	0x0800f4fc

0800b71c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08c      	sub	sp, #48	@ 0x30
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b72a:	220b      	movs	r2, #11
 800b72c:	68b9      	ldr	r1, [r7, #8]
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f7fe fec6 	bl	800a4c0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	2b05      	cmp	r3, #5
 800b738:	d92b      	bls.n	800b792 <gen_numname+0x76>
		sr = seq;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b73e:	e022      	b.n	800b786 <gen_numname+0x6a>
			wc = *lfn++;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	1c9a      	adds	r2, r3, #2
 800b744:	607a      	str	r2, [r7, #4]
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b74a:	2300      	movs	r3, #0
 800b74c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b74e:	e017      	b.n	800b780 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	005a      	lsls	r2, r3, #1
 800b754:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	4413      	add	r3, r2
 800b75c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b75e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b760:	085b      	lsrs	r3, r3, #1
 800b762:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d005      	beq.n	800b77a <gen_numname+0x5e>
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b774:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b778:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b77a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77c:	3301      	adds	r3, #1
 800b77e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b782:	2b0f      	cmp	r3, #15
 800b784:	d9e4      	bls.n	800b750 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	881b      	ldrh	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1d8      	bne.n	800b740 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b792:	2307      	movs	r3, #7
 800b794:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	f003 030f 	and.w	r3, r3, #15
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	3330      	adds	r3, #48	@ 0x30
 800b7a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7aa:	2b39      	cmp	r3, #57	@ 0x39
 800b7ac:	d904      	bls.n	800b7b8 <gen_numname+0x9c>
 800b7ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7b2:	3307      	adds	r3, #7
 800b7b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	1e5a      	subs	r2, r3, #1
 800b7bc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b7be:	3330      	adds	r3, #48	@ 0x30
 800b7c0:	443b      	add	r3, r7
 800b7c2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b7c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	091b      	lsrs	r3, r3, #4
 800b7ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1df      	bne.n	800b796 <gen_numname+0x7a>
	ns[i] = '~';
 800b7d6:	f107 0214 	add.w	r2, r7, #20
 800b7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7dc:	4413      	add	r3, r2
 800b7de:	227e      	movs	r2, #126	@ 0x7e
 800b7e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7e6:	e002      	b.n	800b7ee <gen_numname+0xd2>
 800b7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d205      	bcs.n	800b802 <gen_numname+0xe6>
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7fa:	4413      	add	r3, r2
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	2b20      	cmp	r3, #32
 800b800:	d1f2      	bne.n	800b7e8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b804:	2b07      	cmp	r3, #7
 800b806:	d807      	bhi.n	800b818 <gen_numname+0xfc>
 800b808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80a:	1c5a      	adds	r2, r3, #1
 800b80c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b80e:	3330      	adds	r3, #48	@ 0x30
 800b810:	443b      	add	r3, r7
 800b812:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b816:	e000      	b.n	800b81a <gen_numname+0xfe>
 800b818:	2120      	movs	r1, #32
 800b81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81c:	1c5a      	adds	r2, r3, #1
 800b81e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	4413      	add	r3, r2
 800b824:	460a      	mov	r2, r1
 800b826:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82a:	2b07      	cmp	r3, #7
 800b82c:	d9e9      	bls.n	800b802 <gen_numname+0xe6>
}
 800b82e:	bf00      	nop
 800b830:	bf00      	nop
 800b832:	3730      	adds	r7, #48	@ 0x30
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b844:	230b      	movs	r3, #11
 800b846:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	b2da      	uxtb	r2, r3
 800b84c:	0852      	lsrs	r2, r2, #1
 800b84e:	01db      	lsls	r3, r3, #7
 800b850:	4313      	orrs	r3, r2
 800b852:	b2da      	uxtb	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	1c59      	adds	r1, r3, #1
 800b858:	6079      	str	r1, [r7, #4]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	4413      	add	r3, r2
 800b85e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	3b01      	subs	r3, #1
 800b864:	60bb      	str	r3, [r7, #8]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d1ed      	bne.n	800b848 <sum_sfn+0x10>
	return sum;
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b086      	sub	sp, #24
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b884:	2304      	movs	r3, #4
 800b886:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b88e:	23ff      	movs	r3, #255	@ 0xff
 800b890:	757b      	strb	r3, [r7, #21]
 800b892:	23ff      	movs	r3, #255	@ 0xff
 800b894:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b896:	e081      	b.n	800b99c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	4619      	mov	r1, r3
 800b89e:	6938      	ldr	r0, [r7, #16]
 800b8a0:	f7ff f83c 	bl	800a91c <move_window>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d17c      	bne.n	800b9a8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a1b      	ldr	r3, [r3, #32]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b8b6:	7dbb      	ldrb	r3, [r7, #22]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b8bc:	2304      	movs	r3, #4
 800b8be:	75fb      	strb	r3, [r7, #23]
 800b8c0:	e077      	b.n	800b9b2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	330b      	adds	r3, #11
 800b8c8:	781b      	ldrb	r3, [r3, #0]
 800b8ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8ce:	73fb      	strb	r3, [r7, #15]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	7bfa      	ldrb	r2, [r7, #15]
 800b8d4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b8d6:	7dbb      	ldrb	r3, [r7, #22]
 800b8d8:	2be5      	cmp	r3, #229	@ 0xe5
 800b8da:	d00e      	beq.n	800b8fa <dir_read+0x80>
 800b8dc:	7dbb      	ldrb	r3, [r7, #22]
 800b8de:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8e0:	d00b      	beq.n	800b8fa <dir_read+0x80>
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
 800b8e4:	f023 0320 	bic.w	r3, r3, #32
 800b8e8:	2b08      	cmp	r3, #8
 800b8ea:	bf0c      	ite	eq
 800b8ec:	2301      	moveq	r3, #1
 800b8ee:	2300      	movne	r3, #0
 800b8f0:	b2db      	uxtb	r3, r3
 800b8f2:	461a      	mov	r2, r3
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d002      	beq.n	800b900 <dir_read+0x86>
				ord = 0xFF;
 800b8fa:	23ff      	movs	r3, #255	@ 0xff
 800b8fc:	757b      	strb	r3, [r7, #21]
 800b8fe:	e044      	b.n	800b98a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b0f      	cmp	r3, #15
 800b904:	d12f      	bne.n	800b966 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b906:	7dbb      	ldrb	r3, [r7, #22]
 800b908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00d      	beq.n	800b92c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a1b      	ldr	r3, [r3, #32]
 800b914:	7b5b      	ldrb	r3, [r3, #13]
 800b916:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b918:	7dbb      	ldrb	r3, [r7, #22]
 800b91a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b91e:	75bb      	strb	r3, [r7, #22]
 800b920:	7dbb      	ldrb	r3, [r7, #22]
 800b922:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	695a      	ldr	r2, [r3, #20]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b92c:	7dba      	ldrb	r2, [r7, #22]
 800b92e:	7d7b      	ldrb	r3, [r7, #21]
 800b930:	429a      	cmp	r2, r3
 800b932:	d115      	bne.n	800b960 <dir_read+0xe6>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a1b      	ldr	r3, [r3, #32]
 800b938:	330d      	adds	r3, #13
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	7d3a      	ldrb	r2, [r7, #20]
 800b93e:	429a      	cmp	r2, r3
 800b940:	d10e      	bne.n	800b960 <dir_read+0xe6>
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	691a      	ldr	r2, [r3, #16]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a1b      	ldr	r3, [r3, #32]
 800b94a:	4619      	mov	r1, r3
 800b94c:	4610      	mov	r0, r2
 800b94e:	f7ff fe19 	bl	800b584 <pick_lfn>
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d003      	beq.n	800b960 <dir_read+0xe6>
 800b958:	7d7b      	ldrb	r3, [r7, #21]
 800b95a:	3b01      	subs	r3, #1
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	e000      	b.n	800b962 <dir_read+0xe8>
 800b960:	23ff      	movs	r3, #255	@ 0xff
 800b962:	757b      	strb	r3, [r7, #21]
 800b964:	e011      	b.n	800b98a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b966:	7d7b      	ldrb	r3, [r7, #21]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d109      	bne.n	800b980 <dir_read+0x106>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff ff61 	bl	800b838 <sum_sfn>
 800b976:	4603      	mov	r3, r0
 800b978:	461a      	mov	r2, r3
 800b97a:	7d3b      	ldrb	r3, [r7, #20]
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d015      	beq.n	800b9ac <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f04f 32ff 	mov.w	r2, #4294967295
 800b986:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800b988:	e010      	b.n	800b9ac <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b98a:	2100      	movs	r1, #0
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f7ff fc2d 	bl	800b1ec <dir_next>
 800b992:	4603      	mov	r3, r0
 800b994:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d109      	bne.n	800b9b0 <dir_read+0x136>
	while (dp->sect) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f47f af79 	bne.w	800b898 <dir_read+0x1e>
 800b9a6:	e004      	b.n	800b9b2 <dir_read+0x138>
		if (res != FR_OK) break;
 800b9a8:	bf00      	nop
 800b9aa:	e002      	b.n	800b9b2 <dir_read+0x138>
					break;
 800b9ac:	bf00      	nop
 800b9ae:	e000      	b.n	800b9b2 <dir_read+0x138>
		if (res != FR_OK) break;
 800b9b0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d002      	beq.n	800b9be <dir_read+0x144>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	61da      	str	r2, [r3, #28]
	return res;
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3718      	adds	r7, #24
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff fb7e 	bl	800b0da <dir_sdi>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d001      	beq.n	800b9ec <dir_find+0x24>
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ea:	e0a9      	b.n	800bb40 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b9ec:	23ff      	movs	r3, #255	@ 0xff
 800b9ee:	753b      	strb	r3, [r7, #20]
 800b9f0:	7d3b      	ldrb	r3, [r7, #20]
 800b9f2:	757b      	strb	r3, [r7, #21]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b9fa:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	4619      	mov	r1, r3
 800ba02:	6938      	ldr	r0, [r7, #16]
 800ba04:	f7fe ff8a 	bl	800a91c <move_window>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ba0c:	7dfb      	ldrb	r3, [r7, #23]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	f040 8090 	bne.w	800bb34 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ba1c:	7dbb      	ldrb	r3, [r7, #22]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d102      	bne.n	800ba28 <dir_find+0x60>
 800ba22:	2304      	movs	r3, #4
 800ba24:	75fb      	strb	r3, [r7, #23]
 800ba26:	e08a      	b.n	800bb3e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6a1b      	ldr	r3, [r3, #32]
 800ba2c:	330b      	adds	r3, #11
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba34:	73fb      	strb	r3, [r7, #15]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	7bfa      	ldrb	r2, [r7, #15]
 800ba3a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ba3c:	7dbb      	ldrb	r3, [r7, #22]
 800ba3e:	2be5      	cmp	r3, #229	@ 0xe5
 800ba40:	d007      	beq.n	800ba52 <dir_find+0x8a>
 800ba42:	7bfb      	ldrb	r3, [r7, #15]
 800ba44:	f003 0308 	and.w	r3, r3, #8
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d009      	beq.n	800ba60 <dir_find+0x98>
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	2b0f      	cmp	r3, #15
 800ba50:	d006      	beq.n	800ba60 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ba52:	23ff      	movs	r3, #255	@ 0xff
 800ba54:	757b      	strb	r3, [r7, #21]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f04f 32ff 	mov.w	r2, #4294967295
 800ba5c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ba5e:	e05e      	b.n	800bb1e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	2b0f      	cmp	r3, #15
 800ba64:	d136      	bne.n	800bad4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ba6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d154      	bne.n	800bb1e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ba74:	7dbb      	ldrb	r3, [r7, #22]
 800ba76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00d      	beq.n	800ba9a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	7b5b      	ldrb	r3, [r3, #13]
 800ba84:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ba86:	7dbb      	ldrb	r3, [r7, #22]
 800ba88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba8c:	75bb      	strb	r3, [r7, #22]
 800ba8e:	7dbb      	ldrb	r3, [r7, #22]
 800ba90:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	695a      	ldr	r2, [r3, #20]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ba9a:	7dba      	ldrb	r2, [r7, #22]
 800ba9c:	7d7b      	ldrb	r3, [r7, #21]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d115      	bne.n	800bace <dir_find+0x106>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a1b      	ldr	r3, [r3, #32]
 800baa6:	330d      	adds	r3, #13
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	7d3a      	ldrb	r2, [r7, #20]
 800baac:	429a      	cmp	r2, r3
 800baae:	d10e      	bne.n	800bace <dir_find+0x106>
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	691a      	ldr	r2, [r3, #16]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a1b      	ldr	r3, [r3, #32]
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f7ff fcf2 	bl	800b4a4 <cmp_lfn>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d003      	beq.n	800bace <dir_find+0x106>
 800bac6:	7d7b      	ldrb	r3, [r7, #21]
 800bac8:	3b01      	subs	r3, #1
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	e000      	b.n	800bad0 <dir_find+0x108>
 800bace:	23ff      	movs	r3, #255	@ 0xff
 800bad0:	757b      	strb	r3, [r7, #21]
 800bad2:	e024      	b.n	800bb1e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bad4:	7d7b      	ldrb	r3, [r7, #21]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d109      	bne.n	800baee <dir_find+0x126>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	4618      	mov	r0, r3
 800bae0:	f7ff feaa 	bl	800b838 <sum_sfn>
 800bae4:	4603      	mov	r3, r0
 800bae6:	461a      	mov	r2, r3
 800bae8:	7d3b      	ldrb	r3, [r7, #20]
 800baea:	4293      	cmp	r3, r2
 800baec:	d024      	beq.n	800bb38 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800baf4:	f003 0301 	and.w	r3, r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10a      	bne.n	800bb12 <dir_find+0x14a>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6a18      	ldr	r0, [r3, #32]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3324      	adds	r3, #36	@ 0x24
 800bb04:	220b      	movs	r2, #11
 800bb06:	4619      	mov	r1, r3
 800bb08:	f7fe fd16 	bl	800a538 <mem_cmp>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d014      	beq.n	800bb3c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb12:	23ff      	movs	r3, #255	@ 0xff
 800bb14:	757b      	strb	r3, [r7, #21]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bb1e:	2100      	movs	r1, #0
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7ff fb63 	bl	800b1ec <dir_next>
 800bb26:	4603      	mov	r3, r0
 800bb28:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f43f af65 	beq.w	800b9fc <dir_find+0x34>
 800bb32:	e004      	b.n	800bb3e <dir_find+0x176>
		if (res != FR_OK) break;
 800bb34:	bf00      	nop
 800bb36:	e002      	b.n	800bb3e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bb38:	bf00      	nop
 800bb3a:	e000      	b.n	800bb3e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bb3c:	bf00      	nop

	return res;
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08c      	sub	sp, #48	@ 0x30
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb5c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <dir_register+0x20>
 800bb64:	2306      	movs	r3, #6
 800bb66:	e0e0      	b.n	800bd2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bb68:	2300      	movs	r3, #0
 800bb6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb6c:	e002      	b.n	800bb74 <dir_register+0x2c>
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb70:	3301      	adds	r3, #1
 800bb72:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	691a      	ldr	r2, [r3, #16]
 800bb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	4413      	add	r3, r2
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d1f4      	bne.n	800bb6e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800bb8a:	f107 030c 	add.w	r3, r7, #12
 800bb8e:	220c      	movs	r2, #12
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fc95 	bl	800a4c0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d032      	beq.n	800bc06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2240      	movs	r2, #64	@ 0x40
 800bba4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800bba8:	2301      	movs	r3, #1
 800bbaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbac:	e016      	b.n	800bbdc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	691a      	ldr	r2, [r3, #16]
 800bbb8:	f107 010c 	add.w	r1, r7, #12
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	f7ff fdad 	bl	800b71c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f7ff ff00 	bl	800b9c8 <dir_find>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800bbce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd8:	3301      	adds	r3, #1
 800bbda:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbde:	2b63      	cmp	r3, #99	@ 0x63
 800bbe0:	d9e5      	bls.n	800bbae <dir_register+0x66>
 800bbe2:	e000      	b.n	800bbe6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bbe4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bbe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe8:	2b64      	cmp	r3, #100	@ 0x64
 800bbea:	d101      	bne.n	800bbf0 <dir_register+0xa8>
 800bbec:	2307      	movs	r3, #7
 800bbee:	e09c      	b.n	800bd2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bbf0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbf4:	2b04      	cmp	r3, #4
 800bbf6:	d002      	beq.n	800bbfe <dir_register+0xb6>
 800bbf8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bbfc:	e095      	b.n	800bd2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bbfe:	7dfa      	ldrb	r2, [r7, #23]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d007      	beq.n	800bc20 <dir_register+0xd8>
 800bc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc12:	330c      	adds	r3, #12
 800bc14:	4a47      	ldr	r2, [pc, #284]	@ (800bd34 <dir_register+0x1ec>)
 800bc16:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1a:	089b      	lsrs	r3, r3, #2
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	e000      	b.n	800bc22 <dir_register+0xda>
 800bc20:	2301      	movs	r3, #1
 800bc22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bc24:	6a39      	ldr	r1, [r7, #32]
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff fbb6 	bl	800b398 <dir_alloc>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bc32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d148      	bne.n	800bccc <dir_register+0x184>
 800bc3a:	6a3b      	ldr	r3, [r7, #32]
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	623b      	str	r3, [r7, #32]
 800bc40:	6a3b      	ldr	r3, [r7, #32]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d042      	beq.n	800bccc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	695a      	ldr	r2, [r3, #20]
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	015b      	lsls	r3, r3, #5
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	4619      	mov	r1, r3
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f7ff fa41 	bl	800b0da <dir_sdi>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d132      	bne.n	800bccc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	3324      	adds	r3, #36	@ 0x24
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff fde4 	bl	800b838 <sum_sfn>
 800bc70:	4603      	mov	r3, r0
 800bc72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	69db      	ldr	r3, [r3, #28]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	69f8      	ldr	r0, [r7, #28]
 800bc7c:	f7fe fe4e 	bl	800a91c <move_window>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800bc86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d11d      	bne.n	800bcca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	6918      	ldr	r0, [r3, #16]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a19      	ldr	r1, [r3, #32]
 800bc96:	6a3b      	ldr	r3, [r7, #32]
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	7efb      	ldrb	r3, [r7, #27]
 800bc9c:	f7ff fcd6 	bl	800b64c <put_lfn>
				fs->wflag = 1;
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	2201      	movs	r2, #1
 800bca4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bca6:	2100      	movs	r1, #0
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f7ff fa9f 	bl	800b1ec <dir_next>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800bcb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d107      	bne.n	800bccc <dir_register+0x184>
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	623b      	str	r3, [r7, #32]
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1d5      	bne.n	800bc74 <dir_register+0x12c>
 800bcc8:	e000      	b.n	800bccc <dir_register+0x184>
				if (res != FR_OK) break;
 800bcca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bccc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d128      	bne.n	800bd26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	69db      	ldr	r3, [r3, #28]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	69f8      	ldr	r0, [r7, #28]
 800bcdc:	f7fe fe1e 	bl	800a91c <move_window>
 800bce0:	4603      	mov	r3, r0
 800bce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d11b      	bne.n	800bd26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a1b      	ldr	r3, [r3, #32]
 800bcf2:	2220      	movs	r2, #32
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe fc03 	bl	800a502 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a18      	ldr	r0, [r3, #32]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	3324      	adds	r3, #36	@ 0x24
 800bd04:	220b      	movs	r2, #11
 800bd06:	4619      	mov	r1, r3
 800bd08:	f7fe fbda 	bl	800a4c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	330c      	adds	r3, #12
 800bd18:	f002 0218 	and.w	r2, r2, #24
 800bd1c:	b2d2      	uxtb	r2, r2
 800bd1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	2201      	movs	r2, #1
 800bd24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3730      	adds	r7, #48	@ 0x30
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	4ec4ec4f 	.word	0x4ec4ec4f

0800bd38 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	695b      	ldr	r3, [r3, #20]
 800bd4a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd54:	d007      	beq.n	800bd66 <dir_remove+0x2e>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f7ff f9bc 	bl	800b0da <dir_sdi>
 800bd62:	4603      	mov	r3, r0
 800bd64:	e000      	b.n	800bd68 <dir_remove+0x30>
 800bd66:	2300      	movs	r3, #0
 800bd68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d128      	bne.n	800bdc2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	4619      	mov	r1, r3
 800bd76:	6938      	ldr	r0, [r7, #16]
 800bd78:	f7fe fdd0 	bl	800a91c <move_window>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d115      	bne.n	800bdb2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	22e5      	movs	r2, #229	@ 0xe5
 800bd8c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	2201      	movs	r2, #1
 800bd92:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	695b      	ldr	r3, [r3, #20]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d90b      	bls.n	800bdb6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800bd9e:	2100      	movs	r1, #0
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff fa23 	bl	800b1ec <dir_next>
 800bda6:	4603      	mov	r3, r0
 800bda8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0df      	beq.n	800bd70 <dir_remove+0x38>
 800bdb0:	e002      	b.n	800bdb8 <dir_remove+0x80>
			if (res != FR_OK) break;
 800bdb2:	bf00      	nop
 800bdb4:	e000      	b.n	800bdb8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800bdb6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800bdb8:	7dfb      	ldrb	r3, [r7, #23]
 800bdba:	2b04      	cmp	r3, #4
 800bdbc:	d101      	bne.n	800bdc2 <dir_remove+0x8a>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3718      	adds	r7, #24
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b08a      	sub	sp, #40	@ 0x28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	613b      	str	r3, [r7, #16]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	2300      	movs	r3, #0
 800bde6:	617b      	str	r3, [r7, #20]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	61ba      	str	r2, [r7, #24]
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800bdfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bdfc:	2b1f      	cmp	r3, #31
 800bdfe:	d940      	bls.n	800be82 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800be00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be02:	2b2f      	cmp	r3, #47	@ 0x2f
 800be04:	d006      	beq.n	800be14 <create_name+0x48>
 800be06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be08:	2b5c      	cmp	r3, #92	@ 0x5c
 800be0a:	d110      	bne.n	800be2e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be0c:	e002      	b.n	800be14 <create_name+0x48>
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	3301      	adds	r3, #1
 800be12:	61bb      	str	r3, [r7, #24]
 800be14:	693a      	ldr	r2, [r7, #16]
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	4413      	add	r3, r2
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800be1e:	d0f6      	beq.n	800be0e <create_name+0x42>
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	4413      	add	r3, r2
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	2b5c      	cmp	r3, #92	@ 0x5c
 800be2a:	d0f0      	beq.n	800be0e <create_name+0x42>
			break;
 800be2c:	e02a      	b.n	800be84 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2bfe      	cmp	r3, #254	@ 0xfe
 800be32:	d901      	bls.n	800be38 <create_name+0x6c>
 800be34:	2306      	movs	r3, #6
 800be36:	e17d      	b.n	800c134 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800be38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800be3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be40:	2101      	movs	r1, #1
 800be42:	4618      	mov	r0, r3
 800be44:	f001 ffa8 	bl	800dd98 <ff_convert>
 800be48:	4603      	mov	r3, r0
 800be4a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800be4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <create_name+0x8a>
 800be52:	2306      	movs	r3, #6
 800be54:	e16e      	b.n	800c134 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800be56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be58:	2b7f      	cmp	r3, #127	@ 0x7f
 800be5a:	d809      	bhi.n	800be70 <create_name+0xa4>
 800be5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be5e:	4619      	mov	r1, r3
 800be60:	488d      	ldr	r0, [pc, #564]	@ (800c098 <create_name+0x2cc>)
 800be62:	f7fe fb90 	bl	800a586 <chk_chr>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d001      	beq.n	800be70 <create_name+0xa4>
 800be6c:	2306      	movs	r3, #6
 800be6e:	e161      	b.n	800c134 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	617a      	str	r2, [r7, #20]
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4413      	add	r3, r2
 800be7c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800be7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800be80:	e7b4      	b.n	800bdec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800be82:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800be84:	693a      	ldr	r2, [r7, #16]
 800be86:	69bb      	ldr	r3, [r7, #24]
 800be88:	441a      	add	r2, r3
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be90:	2b1f      	cmp	r3, #31
 800be92:	d801      	bhi.n	800be98 <create_name+0xcc>
 800be94:	2304      	movs	r3, #4
 800be96:	e000      	b.n	800be9a <create_name+0xce>
 800be98:	2300      	movs	r3, #0
 800be9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800be9e:	e011      	b.n	800bec4 <create_name+0xf8>
		w = lfn[di - 1];
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bea6:	3b01      	subs	r3, #1
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	4413      	add	r3, r2
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800beb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	d002      	beq.n	800bebe <create_name+0xf2>
 800beb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beba:	2b2e      	cmp	r3, #46	@ 0x2e
 800bebc:	d106      	bne.n	800becc <create_name+0x100>
		di--;
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1ea      	bne.n	800bea0 <create_name+0xd4>
 800beca:	e000      	b.n	800bece <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800becc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	005b      	lsls	r3, r3, #1
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	4413      	add	r3, r2
 800bed6:	2200      	movs	r2, #0
 800bed8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <create_name+0x118>
 800bee0:	2306      	movs	r3, #6
 800bee2:	e127      	b.n	800c134 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	3324      	adds	r3, #36	@ 0x24
 800bee8:	220b      	movs	r2, #11
 800beea:	2120      	movs	r1, #32
 800beec:	4618      	mov	r0, r3
 800beee:	f7fe fb08 	bl	800a502 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bef2:	2300      	movs	r3, #0
 800bef4:	61bb      	str	r3, [r7, #24]
 800bef6:	e002      	b.n	800befe <create_name+0x132>
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	3301      	adds	r3, #1
 800befc:	61bb      	str	r3, [r7, #24]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	4413      	add	r3, r2
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	2b20      	cmp	r3, #32
 800bf0a:	d0f5      	beq.n	800bef8 <create_name+0x12c>
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	005b      	lsls	r3, r3, #1
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	4413      	add	r3, r2
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf18:	d0ee      	beq.n	800bef8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d009      	beq.n	800bf34 <create_name+0x168>
 800bf20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf24:	f043 0303 	orr.w	r3, r3, #3
 800bf28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bf2c:	e002      	b.n	800bf34 <create_name+0x168>
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	617b      	str	r3, [r7, #20]
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d009      	beq.n	800bf4e <create_name+0x182>
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bf40:	3b01      	subs	r3, #1
 800bf42:	005b      	lsls	r3, r3, #1
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	4413      	add	r3, r2
 800bf48:	881b      	ldrh	r3, [r3, #0]
 800bf4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf4c:	d1ef      	bne.n	800bf2e <create_name+0x162>

	i = b = 0; ni = 8;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bf54:	2300      	movs	r3, #0
 800bf56:	623b      	str	r3, [r7, #32]
 800bf58:	2308      	movs	r3, #8
 800bf5a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	1c5a      	adds	r2, r3, #1
 800bf60:	61ba      	str	r2, [r7, #24]
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	68fa      	ldr	r2, [r7, #12]
 800bf66:	4413      	add	r3, r2
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bf6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 8090 	beq.w	800c094 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bf74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf76:	2b20      	cmp	r3, #32
 800bf78:	d006      	beq.n	800bf88 <create_name+0x1bc>
 800bf7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf7c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf7e:	d10a      	bne.n	800bf96 <create_name+0x1ca>
 800bf80:	69ba      	ldr	r2, [r7, #24]
 800bf82:	697b      	ldr	r3, [r7, #20]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d006      	beq.n	800bf96 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bf88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf8c:	f043 0303 	orr.w	r3, r3, #3
 800bf90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bf94:	e07d      	b.n	800c092 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bf96:	6a3a      	ldr	r2, [r7, #32]
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d203      	bcs.n	800bfa6 <create_name+0x1da>
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d123      	bne.n	800bfee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	2b0b      	cmp	r3, #11
 800bfaa:	d106      	bne.n	800bfba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bfac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfb0:	f043 0303 	orr.w	r3, r3, #3
 800bfb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bfb8:	e075      	b.n	800c0a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d005      	beq.n	800bfce <create_name+0x202>
 800bfc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfc6:	f043 0303 	orr.w	r3, r3, #3
 800bfca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800bfce:	69ba      	ldr	r2, [r7, #24]
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d866      	bhi.n	800c0a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	61bb      	str	r3, [r7, #24]
 800bfda:	2308      	movs	r3, #8
 800bfdc:	623b      	str	r3, [r7, #32]
 800bfde:	230b      	movs	r3, #11
 800bfe0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bfe2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bfec:	e051      	b.n	800c092 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bfee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bff0:	2b7f      	cmp	r3, #127	@ 0x7f
 800bff2:	d914      	bls.n	800c01e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bff4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bff6:	2100      	movs	r1, #0
 800bff8:	4618      	mov	r0, r3
 800bffa:	f001 fecd 	bl	800dd98 <ff_convert>
 800bffe:	4603      	mov	r3, r0
 800c000:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	d004      	beq.n	800c012 <create_name+0x246>
 800c008:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c00a:	3b80      	subs	r3, #128	@ 0x80
 800c00c:	4a23      	ldr	r2, [pc, #140]	@ (800c09c <create_name+0x2d0>)
 800c00e:	5cd3      	ldrb	r3, [r2, r3]
 800c010:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c016:	f043 0302 	orr.w	r3, r3, #2
 800c01a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c01e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <create_name+0x268>
 800c024:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c026:	4619      	mov	r1, r3
 800c028:	481d      	ldr	r0, [pc, #116]	@ (800c0a0 <create_name+0x2d4>)
 800c02a:	f7fe faac 	bl	800a586 <chk_chr>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d008      	beq.n	800c046 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c034:	235f      	movs	r3, #95	@ 0x5f
 800c036:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c03c:	f043 0303 	orr.w	r3, r3, #3
 800c040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c044:	e01b      	b.n	800c07e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c048:	2b40      	cmp	r3, #64	@ 0x40
 800c04a:	d909      	bls.n	800c060 <create_name+0x294>
 800c04c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c04e:	2b5a      	cmp	r3, #90	@ 0x5a
 800c050:	d806      	bhi.n	800c060 <create_name+0x294>
					b |= 2;
 800c052:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c056:	f043 0302 	orr.w	r3, r3, #2
 800c05a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c05e:	e00e      	b.n	800c07e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c060:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c062:	2b60      	cmp	r3, #96	@ 0x60
 800c064:	d90b      	bls.n	800c07e <create_name+0x2b2>
 800c066:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c068:	2b7a      	cmp	r3, #122	@ 0x7a
 800c06a:	d808      	bhi.n	800c07e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c06c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c070:	f043 0301 	orr.w	r3, r3, #1
 800c074:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c078:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c07a:	3b20      	subs	r3, #32
 800c07c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	1c5a      	adds	r2, r3, #1
 800c082:	623a      	str	r2, [r7, #32]
 800c084:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c086:	b2d1      	uxtb	r1, r2
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	4413      	add	r3, r2
 800c08c:	460a      	mov	r2, r1
 800c08e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c092:	e763      	b.n	800bf5c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c094:	bf00      	nop
 800c096:	e006      	b.n	800c0a6 <create_name+0x2da>
 800c098:	0800f3d8 	.word	0x0800f3d8
 800c09c:	0800f47c 	.word	0x0800f47c
 800c0a0:	0800f3e4 	.word	0x0800f3e4
			if (si > di) break;			/* No extension */
 800c0a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c0ac:	2be5      	cmp	r3, #229	@ 0xe5
 800c0ae:	d103      	bne.n	800c0b8 <create_name+0x2ec>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2205      	movs	r2, #5
 800c0b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	2b08      	cmp	r3, #8
 800c0bc:	d104      	bne.n	800c0c8 <create_name+0x2fc>
 800c0be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c0c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0cc:	f003 030c 	and.w	r3, r3, #12
 800c0d0:	2b0c      	cmp	r3, #12
 800c0d2:	d005      	beq.n	800c0e0 <create_name+0x314>
 800c0d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0d8:	f003 0303 	and.w	r3, r3, #3
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d105      	bne.n	800c0ec <create_name+0x320>
 800c0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0e4:	f043 0302 	orr.w	r3, r3, #2
 800c0e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c0ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0f0:	f003 0302 	and.w	r3, r3, #2
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d117      	bne.n	800c128 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0fc:	f003 0303 	and.w	r3, r3, #3
 800c100:	2b01      	cmp	r3, #1
 800c102:	d105      	bne.n	800c110 <create_name+0x344>
 800c104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c108:	f043 0310 	orr.w	r3, r3, #16
 800c10c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c114:	f003 030c 	and.w	r3, r3, #12
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d105      	bne.n	800c128 <create_name+0x35c>
 800c11c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c120:	f043 0308 	orr.w	r3, r3, #8
 800c124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c12e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800c132:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c134:	4618      	mov	r0, r3
 800c136:	3728      	adds	r7, #40	@ 0x28
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c150:	e002      	b.n	800c158 <follow_path+0x1c>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	3301      	adds	r3, #1
 800c156:	603b      	str	r3, [r7, #0]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c15e:	d0f8      	beq.n	800c152 <follow_path+0x16>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	2b5c      	cmp	r3, #92	@ 0x5c
 800c166:	d0f4      	beq.n	800c152 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2200      	movs	r2, #0
 800c16c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	2b1f      	cmp	r3, #31
 800c174:	d80a      	bhi.n	800c18c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2280      	movs	r2, #128	@ 0x80
 800c17a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c17e:	2100      	movs	r1, #0
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7fe ffaa 	bl	800b0da <dir_sdi>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
 800c18a:	e048      	b.n	800c21e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c18c:	463b      	mov	r3, r7
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff fe1b 	bl	800bdcc <create_name>
 800c196:	4603      	mov	r3, r0
 800c198:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c19a:	7dfb      	ldrb	r3, [r7, #23]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d139      	bne.n	800c214 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7ff fc11 	bl	800b9c8 <dir_find>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c1b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c1b2:	7dfb      	ldrb	r3, [r7, #23]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00a      	beq.n	800c1ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c1b8:	7dfb      	ldrb	r3, [r7, #23]
 800c1ba:	2b04      	cmp	r3, #4
 800c1bc:	d12c      	bne.n	800c218 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c1be:	7afb      	ldrb	r3, [r7, #11]
 800c1c0:	f003 0304 	and.w	r3, r3, #4
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d127      	bne.n	800c218 <follow_path+0xdc>
 800c1c8:	2305      	movs	r3, #5
 800c1ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c1cc:	e024      	b.n	800c218 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c1ce:	7afb      	ldrb	r3, [r7, #11]
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d121      	bne.n	800c21c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	799b      	ldrb	r3, [r3, #6]
 800c1dc:	f003 0310 	and.w	r3, r3, #16
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c1e4:	2305      	movs	r3, #5
 800c1e6:	75fb      	strb	r3, [r7, #23]
 800c1e8:	e019      	b.n	800c21e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	8992      	ldrh	r2, [r2, #12]
 800c1f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800c1fc:	fb00 f202 	mul.w	r2, r0, r2
 800c200:	1a9b      	subs	r3, r3, r2
 800c202:	440b      	add	r3, r1
 800c204:	4619      	mov	r1, r3
 800c206:	68f8      	ldr	r0, [r7, #12]
 800c208:	f7ff f90d 	bl	800b426 <ld_clust>
 800c20c:	4602      	mov	r2, r0
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c212:	e7bb      	b.n	800c18c <follow_path+0x50>
			if (res != FR_OK) break;
 800c214:	bf00      	nop
 800c216:	e002      	b.n	800c21e <follow_path+0xe2>
				break;
 800c218:	bf00      	nop
 800c21a:	e000      	b.n	800c21e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c21c:	bf00      	nop
			}
		}
	}

	return res;
 800c21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c220:	4618      	mov	r0, r3
 800c222:	3718      	adds	r7, #24
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c230:	f04f 33ff 	mov.w	r3, #4294967295
 800c234:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d031      	beq.n	800c2a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	617b      	str	r3, [r7, #20]
 800c244:	e002      	b.n	800c24c <get_ldnumber+0x24>
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	3301      	adds	r3, #1
 800c24a:	617b      	str	r3, [r7, #20]
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	2b1f      	cmp	r3, #31
 800c252:	d903      	bls.n	800c25c <get_ldnumber+0x34>
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b3a      	cmp	r3, #58	@ 0x3a
 800c25a:	d1f4      	bne.n	800c246 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b3a      	cmp	r3, #58	@ 0x3a
 800c262:	d11c      	bne.n	800c29e <get_ldnumber+0x76>
			tp = *path;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	1c5a      	adds	r2, r3, #1
 800c26e:	60fa      	str	r2, [r7, #12]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	3b30      	subs	r3, #48	@ 0x30
 800c274:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b09      	cmp	r3, #9
 800c27a:	d80e      	bhi.n	800c29a <get_ldnumber+0x72>
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	429a      	cmp	r2, r3
 800c282:	d10a      	bne.n	800c29a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d107      	bne.n	800c29a <get_ldnumber+0x72>
					vol = (int)i;
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	3301      	adds	r3, #1
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	e002      	b.n	800c2a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c29e:	2300      	movs	r3, #0
 800c2a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c2a2:	693b      	ldr	r3, [r7, #16]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	371c      	adds	r7, #28
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	70da      	strb	r2, [r3, #3]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c2c8:	6839      	ldr	r1, [r7, #0]
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7fe fb26 	bl	800a91c <move_window>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d001      	beq.n	800c2da <check_fs+0x2a>
 800c2d6:	2304      	movs	r3, #4
 800c2d8:	e038      	b.n	800c34c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3338      	adds	r3, #56	@ 0x38
 800c2de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe f86a 	bl	800a3bc <ld_word>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d001      	beq.n	800c2f8 <check_fs+0x48>
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e029      	b.n	800c34c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c2fe:	2be9      	cmp	r3, #233	@ 0xe9
 800c300:	d009      	beq.n	800c316 <check_fs+0x66>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c308:	2beb      	cmp	r3, #235	@ 0xeb
 800c30a:	d11e      	bne.n	800c34a <check_fs+0x9a>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c312:	2b90      	cmp	r3, #144	@ 0x90
 800c314:	d119      	bne.n	800c34a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3338      	adds	r3, #56	@ 0x38
 800c31a:	3336      	adds	r3, #54	@ 0x36
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe f865 	bl	800a3ec <ld_dword>
 800c322:	4603      	mov	r3, r0
 800c324:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c328:	4a0a      	ldr	r2, [pc, #40]	@ (800c354 <check_fs+0xa4>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d101      	bne.n	800c332 <check_fs+0x82>
 800c32e:	2300      	movs	r3, #0
 800c330:	e00c      	b.n	800c34c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	3338      	adds	r3, #56	@ 0x38
 800c336:	3352      	adds	r3, #82	@ 0x52
 800c338:	4618      	mov	r0, r3
 800c33a:	f7fe f857 	bl	800a3ec <ld_dword>
 800c33e:	4603      	mov	r3, r0
 800c340:	4a05      	ldr	r2, [pc, #20]	@ (800c358 <check_fs+0xa8>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d101      	bne.n	800c34a <check_fs+0x9a>
 800c346:	2300      	movs	r3, #0
 800c348:	e000      	b.n	800c34c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c34a:	2302      	movs	r3, #2
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	00544146 	.word	0x00544146
 800c358:	33544146 	.word	0x33544146

0800c35c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b096      	sub	sp, #88	@ 0x58
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	4613      	mov	r3, r2
 800c368:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f7ff ff59 	bl	800c228 <get_ldnumber>
 800c376:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	da01      	bge.n	800c382 <find_volume+0x26>
 800c37e:	230b      	movs	r3, #11
 800c380:	e265      	b.n	800c84e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c382:	4a9f      	ldr	r2, [pc, #636]	@ (800c600 <find_volume+0x2a4>)
 800c384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c38a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <find_volume+0x3a>
 800c392:	230c      	movs	r3, #12
 800c394:	e25b      	b.n	800c84e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c39a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	f023 0301 	bic.w	r3, r3, #1
 800c3a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d01a      	beq.n	800c3e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ae:	785b      	ldrb	r3, [r3, #1]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7f4 fbeb 	bl	8000b8c <disk_status>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c3bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3c0:	f003 0301 	and.w	r3, r3, #1
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10c      	bne.n	800c3e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c3c8:	79fb      	ldrb	r3, [r7, #7]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d007      	beq.n	800c3de <find_volume+0x82>
 800c3ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3d2:	f003 0304 	and.w	r3, r3, #4
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c3da:	230a      	movs	r3, #10
 800c3dc:	e237      	b.n	800c84e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e235      	b.n	800c84e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f2:	785b      	ldrb	r3, [r3, #1]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7f4 fbe3 	bl	8000bc0 <disk_initialize>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c400:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c404:	f003 0301 	and.w	r3, r3, #1
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c40c:	2303      	movs	r3, #3
 800c40e:	e21e      	b.n	800c84e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c410:	79fb      	ldrb	r3, [r7, #7]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d007      	beq.n	800c426 <find_volume+0xca>
 800c416:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c41a:	f003 0304 	and.w	r3, r3, #4
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c422:	230a      	movs	r3, #10
 800c424:	e213      	b.n	800c84e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	7858      	ldrb	r0, [r3, #1]
 800c42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42c:	330c      	adds	r3, #12
 800c42e:	461a      	mov	r2, r3
 800c430:	2102      	movs	r1, #2
 800c432:	f7f4 fc2d 	bl	8000c90 <disk_ioctl>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d001      	beq.n	800c440 <find_volume+0xe4>
 800c43c:	2301      	movs	r3, #1
 800c43e:	e206      	b.n	800c84e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c442:	899b      	ldrh	r3, [r3, #12]
 800c444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c448:	d80d      	bhi.n	800c466 <find_volume+0x10a>
 800c44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44c:	899b      	ldrh	r3, [r3, #12]
 800c44e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c452:	d308      	bcc.n	800c466 <find_volume+0x10a>
 800c454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c456:	899b      	ldrh	r3, [r3, #12]
 800c458:	461a      	mov	r2, r3
 800c45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c45c:	899b      	ldrh	r3, [r3, #12]
 800c45e:	3b01      	subs	r3, #1
 800c460:	4013      	ands	r3, r2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d001      	beq.n	800c46a <find_volume+0x10e>
 800c466:	2301      	movs	r3, #1
 800c468:	e1f1      	b.n	800c84e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c46a:	2300      	movs	r3, #0
 800c46c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c46e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c470:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c472:	f7ff ff1d 	bl	800c2b0 <check_fs>
 800c476:	4603      	mov	r3, r0
 800c478:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c47c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c480:	2b02      	cmp	r3, #2
 800c482:	d149      	bne.n	800c518 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c484:	2300      	movs	r3, #0
 800c486:	643b      	str	r3, [r7, #64]	@ 0x40
 800c488:	e01e      	b.n	800c4c8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c48a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c48c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c492:	011b      	lsls	r3, r3, #4
 800c494:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c498:	4413      	add	r3, r2
 800c49a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49e:	3304      	adds	r3, #4
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d006      	beq.n	800c4b4 <find_volume+0x158>
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fd ff9e 	bl	800a3ec <ld_dword>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	e000      	b.n	800c4b6 <find_volume+0x15a>
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	3358      	adds	r3, #88	@ 0x58
 800c4bc:	443b      	add	r3, r7
 800c4be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d9dd      	bls.n	800c48a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <find_volume+0x182>
 800c4d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	3358      	adds	r3, #88	@ 0x58
 800c4e4:	443b      	add	r3, r7
 800c4e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c4ea:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c4ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d005      	beq.n	800c4fe <find_volume+0x1a2>
 800c4f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4f6:	f7ff fedb 	bl	800c2b0 <check_fs>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	e000      	b.n	800c500 <find_volume+0x1a4>
 800c4fe:	2303      	movs	r3, #3
 800c500:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c504:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d905      	bls.n	800c518 <find_volume+0x1bc>
 800c50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c50e:	3301      	adds	r3, #1
 800c510:	643b      	str	r3, [r7, #64]	@ 0x40
 800c512:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c514:	2b03      	cmp	r3, #3
 800c516:	d9e2      	bls.n	800c4de <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c518:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c51c:	2b04      	cmp	r3, #4
 800c51e:	d101      	bne.n	800c524 <find_volume+0x1c8>
 800c520:	2301      	movs	r3, #1
 800c522:	e194      	b.n	800c84e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c524:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d901      	bls.n	800c530 <find_volume+0x1d4>
 800c52c:	230d      	movs	r3, #13
 800c52e:	e18e      	b.n	800c84e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c532:	3338      	adds	r3, #56	@ 0x38
 800c534:	330b      	adds	r3, #11
 800c536:	4618      	mov	r0, r3
 800c538:	f7fd ff40 	bl	800a3bc <ld_word>
 800c53c:	4603      	mov	r3, r0
 800c53e:	461a      	mov	r2, r3
 800c540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c542:	899b      	ldrh	r3, [r3, #12]
 800c544:	429a      	cmp	r2, r3
 800c546:	d001      	beq.n	800c54c <find_volume+0x1f0>
 800c548:	230d      	movs	r3, #13
 800c54a:	e180      	b.n	800c84e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c54e:	3338      	adds	r3, #56	@ 0x38
 800c550:	3316      	adds	r3, #22
 800c552:	4618      	mov	r0, r3
 800c554:	f7fd ff32 	bl	800a3bc <ld_word>
 800c558:	4603      	mov	r3, r0
 800c55a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c55c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d106      	bne.n	800c570 <find_volume+0x214>
 800c562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c564:	3338      	adds	r3, #56	@ 0x38
 800c566:	3324      	adds	r3, #36	@ 0x24
 800c568:	4618      	mov	r0, r3
 800c56a:	f7fd ff3f 	bl	800a3ec <ld_dword>
 800c56e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c572:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c574:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c578:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c582:	789b      	ldrb	r3, [r3, #2]
 800c584:	2b01      	cmp	r3, #1
 800c586:	d005      	beq.n	800c594 <find_volume+0x238>
 800c588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58a:	789b      	ldrb	r3, [r3, #2]
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d001      	beq.n	800c594 <find_volume+0x238>
 800c590:	230d      	movs	r3, #13
 800c592:	e15c      	b.n	800c84e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c596:	789b      	ldrb	r3, [r3, #2]
 800c598:	461a      	mov	r2, r3
 800c59a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c59c:	fb02 f303 	mul.w	r3, r2, r3
 800c5a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5a8:	461a      	mov	r2, r3
 800c5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b0:	895b      	ldrh	r3, [r3, #10]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d008      	beq.n	800c5c8 <find_volume+0x26c>
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b8:	895b      	ldrh	r3, [r3, #10]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5be:	895b      	ldrh	r3, [r3, #10]
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	4013      	ands	r3, r2
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <find_volume+0x270>
 800c5c8:	230d      	movs	r3, #13
 800c5ca:	e140      	b.n	800c84e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ce:	3338      	adds	r3, #56	@ 0x38
 800c5d0:	3311      	adds	r3, #17
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7fd fef2 	bl	800a3bc <ld_word>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	461a      	mov	r2, r3
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e2:	891b      	ldrh	r3, [r3, #8]
 800c5e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5e6:	8992      	ldrh	r2, [r2, #12]
 800c5e8:	0952      	lsrs	r2, r2, #5
 800c5ea:	b292      	uxth	r2, r2
 800c5ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5f0:	fb01 f202 	mul.w	r2, r1, r2
 800c5f4:	1a9b      	subs	r3, r3, r2
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d003      	beq.n	800c604 <find_volume+0x2a8>
 800c5fc:	230d      	movs	r3, #13
 800c5fe:	e126      	b.n	800c84e <find_volume+0x4f2>
 800c600:	200026e0 	.word	0x200026e0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c606:	3338      	adds	r3, #56	@ 0x38
 800c608:	3313      	adds	r3, #19
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fd fed6 	bl	800a3bc <ld_word>
 800c610:	4603      	mov	r3, r0
 800c612:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c616:	2b00      	cmp	r3, #0
 800c618:	d106      	bne.n	800c628 <find_volume+0x2cc>
 800c61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61c:	3338      	adds	r3, #56	@ 0x38
 800c61e:	3320      	adds	r3, #32
 800c620:	4618      	mov	r0, r3
 800c622:	f7fd fee3 	bl	800a3ec <ld_dword>
 800c626:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62a:	3338      	adds	r3, #56	@ 0x38
 800c62c:	330e      	adds	r3, #14
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fd fec4 	bl	800a3bc <ld_word>
 800c634:	4603      	mov	r3, r0
 800c636:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c638:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <find_volume+0x2e6>
 800c63e:	230d      	movs	r3, #13
 800c640:	e105      	b.n	800c84e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c642:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c646:	4413      	add	r3, r2
 800c648:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c64a:	8911      	ldrh	r1, [r2, #8]
 800c64c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c64e:	8992      	ldrh	r2, [r2, #12]
 800c650:	0952      	lsrs	r2, r2, #5
 800c652:	b292      	uxth	r2, r2
 800c654:	fbb1 f2f2 	udiv	r2, r1, r2
 800c658:	b292      	uxth	r2, r2
 800c65a:	4413      	add	r3, r2
 800c65c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c65e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c662:	429a      	cmp	r2, r3
 800c664:	d201      	bcs.n	800c66a <find_volume+0x30e>
 800c666:	230d      	movs	r3, #13
 800c668:	e0f1      	b.n	800c84e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c66a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c672:	8952      	ldrh	r2, [r2, #10]
 800c674:	fbb3 f3f2 	udiv	r3, r3, r2
 800c678:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <find_volume+0x328>
 800c680:	230d      	movs	r3, #13
 800c682:	e0e4      	b.n	800c84e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c684:	2303      	movs	r3, #3
 800c686:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c690:	4293      	cmp	r3, r2
 800c692:	d802      	bhi.n	800c69a <find_volume+0x33e>
 800c694:	2302      	movs	r3, #2
 800c696:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d802      	bhi.n	800c6aa <find_volume+0x34e>
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ac:	1c9a      	adds	r2, r3, #2
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c6b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6b6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c6b8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c6ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6bc:	441a      	add	r2, r3
 800c6be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c0:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c6c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6c6:	441a      	add	r2, r3
 800c6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ca:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6d0:	2b03      	cmp	r3, #3
 800c6d2:	d11e      	bne.n	800c712 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d6:	3338      	adds	r3, #56	@ 0x38
 800c6d8:	332a      	adds	r3, #42	@ 0x2a
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fd fe6e 	bl	800a3bc <ld_word>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <find_volume+0x38e>
 800c6e6:	230d      	movs	r3, #13
 800c6e8:	e0b1      	b.n	800c84e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ec:	891b      	ldrh	r3, [r3, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d001      	beq.n	800c6f6 <find_volume+0x39a>
 800c6f2:	230d      	movs	r3, #13
 800c6f4:	e0ab      	b.n	800c84e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f8:	3338      	adds	r3, #56	@ 0x38
 800c6fa:	332c      	adds	r3, #44	@ 0x2c
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fd fe75 	bl	800a3ec <ld_dword>
 800c702:	4602      	mov	r2, r0
 800c704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c706:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70a:	69db      	ldr	r3, [r3, #28]
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c710:	e01f      	b.n	800c752 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c714:	891b      	ldrh	r3, [r3, #8]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d101      	bne.n	800c71e <find_volume+0x3c2>
 800c71a:	230d      	movs	r3, #13
 800c71c:	e097      	b.n	800c84e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c724:	441a      	add	r2, r3
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c72a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d103      	bne.n	800c73a <find_volume+0x3de>
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	005b      	lsls	r3, r3, #1
 800c738:	e00a      	b.n	800c750 <find_volume+0x3f4>
 800c73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73c:	69da      	ldr	r2, [r3, #28]
 800c73e:	4613      	mov	r3, r2
 800c740:	005b      	lsls	r3, r3, #1
 800c742:	4413      	add	r3, r2
 800c744:	085a      	lsrs	r2, r3, #1
 800c746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c748:	69db      	ldr	r3, [r3, #28]
 800c74a:	f003 0301 	and.w	r3, r3, #1
 800c74e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c750:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c754:	6a1a      	ldr	r2, [r3, #32]
 800c756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c758:	899b      	ldrh	r3, [r3, #12]
 800c75a:	4619      	mov	r1, r3
 800c75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c75e:	440b      	add	r3, r1
 800c760:	3b01      	subs	r3, #1
 800c762:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c764:	8989      	ldrh	r1, [r1, #12]
 800c766:	fbb3 f3f1 	udiv	r3, r3, r1
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d201      	bcs.n	800c772 <find_volume+0x416>
 800c76e:	230d      	movs	r3, #13
 800c770:	e06d      	b.n	800c84e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c774:	f04f 32ff 	mov.w	r2, #4294967295
 800c778:	619a      	str	r2, [r3, #24]
 800c77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77c:	699a      	ldr	r2, [r3, #24]
 800c77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c780:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c784:	2280      	movs	r2, #128	@ 0x80
 800c786:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c788:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c78c:	2b03      	cmp	r3, #3
 800c78e:	d149      	bne.n	800c824 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c792:	3338      	adds	r3, #56	@ 0x38
 800c794:	3330      	adds	r3, #48	@ 0x30
 800c796:	4618      	mov	r0, r3
 800c798:	f7fd fe10 	bl	800a3bc <ld_word>
 800c79c:	4603      	mov	r3, r0
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d140      	bne.n	800c824 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c7a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7aa:	f7fe f8b7 	bl	800a91c <move_window>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d137      	bne.n	800c824 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7bc:	3338      	adds	r3, #56	@ 0x38
 800c7be:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fd fdfa 	bl	800a3bc <ld_word>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d127      	bne.n	800c824 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d6:	3338      	adds	r3, #56	@ 0x38
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fd fe07 	bl	800a3ec <ld_dword>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c858 <find_volume+0x4fc>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d11e      	bne.n	800c824 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c7e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e8:	3338      	adds	r3, #56	@ 0x38
 800c7ea:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fd fdfc 	bl	800a3ec <ld_dword>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	4a19      	ldr	r2, [pc, #100]	@ (800c85c <find_volume+0x500>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d113      	bne.n	800c824 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fe:	3338      	adds	r3, #56	@ 0x38
 800c800:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c804:	4618      	mov	r0, r3
 800c806:	f7fd fdf1 	bl	800a3ec <ld_dword>
 800c80a:	4602      	mov	r2, r0
 800c80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c80e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c812:	3338      	adds	r3, #56	@ 0x38
 800c814:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fd fde7 	bl	800a3ec <ld_dword>
 800c81e:	4602      	mov	r2, r0
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c826:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c82a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c82c:	4b0c      	ldr	r3, [pc, #48]	@ (800c860 <find_volume+0x504>)
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	3301      	adds	r3, #1
 800c832:	b29a      	uxth	r2, r3
 800c834:	4b0a      	ldr	r3, [pc, #40]	@ (800c860 <find_volume+0x504>)
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	4b09      	ldr	r3, [pc, #36]	@ (800c860 <find_volume+0x504>)
 800c83a:	881a      	ldrh	r2, [r3, #0]
 800c83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c842:	4a08      	ldr	r2, [pc, #32]	@ (800c864 <find_volume+0x508>)
 800c844:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c846:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c848:	f7fe f800 	bl	800a84c <clear_lock>
#endif
	return FR_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3758      	adds	r7, #88	@ 0x58
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	41615252 	.word	0x41615252
 800c85c:	61417272 	.word	0x61417272
 800c860:	200026e4 	.word	0x200026e4
 800c864:	20002708 	.word	0x20002708

0800c868 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c872:	2309      	movs	r3, #9
 800c874:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d01c      	beq.n	800c8b6 <validate+0x4e>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d018      	beq.n	800c8b6 <validate+0x4e>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d013      	beq.n	800c8b6 <validate+0x4e>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	889a      	ldrh	r2, [r3, #4]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	88db      	ldrh	r3, [r3, #6]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d10c      	bne.n	800c8b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7f4 f972 	bl	8000b8c <disk_status>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <validate+0x4e>
			res = FR_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d102      	bne.n	800c8c2 <validate+0x5a>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	e000      	b.n	800c8c4 <validate+0x5c>
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	6013      	str	r3, [r2, #0]
	return res;
 800c8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}
	...

0800c8d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b088      	sub	sp, #32
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	4613      	mov	r3, r2
 800c8e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c8e6:	f107 0310 	add.w	r3, r7, #16
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7ff fc9c 	bl	800c228 <get_ldnumber>
 800c8f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	da01      	bge.n	800c8fc <f_mount+0x28>
 800c8f8:	230b      	movs	r3, #11
 800c8fa:	e02b      	b.n	800c954 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c8fc:	4a17      	ldr	r2, [pc, #92]	@ (800c95c <f_mount+0x88>)
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c904:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d005      	beq.n	800c918 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c90c:	69b8      	ldr	r0, [r7, #24]
 800c90e:	f7fd ff9d 	bl	800a84c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	2200      	movs	r2, #0
 800c916:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	490d      	ldr	r1, [pc, #52]	@ (800c95c <f_mount+0x88>)
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <f_mount+0x66>
 800c934:	79fb      	ldrb	r3, [r7, #7]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d001      	beq.n	800c93e <f_mount+0x6a>
 800c93a:	2300      	movs	r3, #0
 800c93c:	e00a      	b.n	800c954 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c93e:	f107 010c 	add.w	r1, r7, #12
 800c942:	f107 0308 	add.w	r3, r7, #8
 800c946:	2200      	movs	r2, #0
 800c948:	4618      	mov	r0, r3
 800c94a:	f7ff fd07 	bl	800c35c <find_volume>
 800c94e:	4603      	mov	r3, r0
 800c950:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c952:	7dfb      	ldrb	r3, [r7, #23]
}
 800c954:	4618      	mov	r0, r3
 800c956:	3720      	adds	r7, #32
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	200026e0 	.word	0x200026e0

0800c960 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b09a      	sub	sp, #104	@ 0x68
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	4613      	mov	r3, r2
 800c96c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d101      	bne.n	800c978 <f_open+0x18>
 800c974:	2309      	movs	r3, #9
 800c976:	e1b7      	b.n	800cce8 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c978:	79fb      	ldrb	r3, [r7, #7]
 800c97a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c97e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c980:	79fa      	ldrb	r2, [r7, #7]
 800c982:	f107 0114 	add.w	r1, r7, #20
 800c986:	f107 0308 	add.w	r3, r7, #8
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff fce6 	bl	800c35c <find_volume>
 800c990:	4603      	mov	r3, r0
 800c992:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c996:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f040 819b 	bne.w	800ccd6 <f_open+0x376>
		dj.obj.fs = fs;
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	f107 0318 	add.w	r3, r7, #24
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff fbc5 	bl	800c13c <follow_path>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c9b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d118      	bne.n	800c9f2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c9c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c9c4:	b25b      	sxtb	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	da03      	bge.n	800c9d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c9ca:	2306      	movs	r3, #6
 800c9cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c9d0:	e00f      	b.n	800c9f2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	bf8c      	ite	hi
 800c9d8:	2301      	movhi	r3, #1
 800c9da:	2300      	movls	r3, #0
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	461a      	mov	r2, r3
 800c9e0:	f107 0318 	add.w	r3, r7, #24
 800c9e4:	4611      	mov	r1, r2
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fd fde8 	bl	800a5bc <chk_lock>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c9f2:	79fb      	ldrb	r3, [r7, #7]
 800c9f4:	f003 031c 	and.w	r3, r3, #28
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d07f      	beq.n	800cafc <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c9fc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d017      	beq.n	800ca34 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca04:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d10e      	bne.n	800ca2a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca0c:	f7fd fe32 	bl	800a674 <enq_lock>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d006      	beq.n	800ca24 <f_open+0xc4>
 800ca16:	f107 0318 	add.w	r3, r7, #24
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7ff f894 	bl	800bb48 <dir_register>
 800ca20:	4603      	mov	r3, r0
 800ca22:	e000      	b.n	800ca26 <f_open+0xc6>
 800ca24:	2312      	movs	r3, #18
 800ca26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
 800ca2c:	f043 0308 	orr.w	r3, r3, #8
 800ca30:	71fb      	strb	r3, [r7, #7]
 800ca32:	e010      	b.n	800ca56 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca34:	7fbb      	ldrb	r3, [r7, #30]
 800ca36:	f003 0311 	and.w	r3, r3, #17
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d003      	beq.n	800ca46 <f_open+0xe6>
					res = FR_DENIED;
 800ca3e:	2307      	movs	r3, #7
 800ca40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ca44:	e007      	b.n	800ca56 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca46:	79fb      	ldrb	r3, [r7, #7]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <f_open+0xf6>
 800ca50:	2308      	movs	r3, #8
 800ca52:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca56:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d168      	bne.n	800cb30 <f_open+0x1d0>
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	f003 0308 	and.w	r3, r3, #8
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d063      	beq.n	800cb30 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ca68:	f7f4 f942 	bl	8000cf0 <get_fattime>
 800ca6c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca70:	330e      	adds	r3, #14
 800ca72:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ca74:	4618      	mov	r0, r3
 800ca76:	f7fd fcf7 	bl	800a468 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ca7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7c:	3316      	adds	r3, #22
 800ca7e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fd fcf1 	bl	800a468 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ca86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca88:	330b      	adds	r3, #11
 800ca8a:	2220      	movs	r2, #32
 800ca8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fcc6 	bl	800b426 <ld_clust>
 800ca9a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800caa0:	2200      	movs	r2, #0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f7fe fcde 	bl	800b464 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800caa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caaa:	331c      	adds	r3, #28
 800caac:	2100      	movs	r1, #0
 800caae:	4618      	mov	r0, r3
 800cab0:	f7fd fcda 	bl	800a468 <st_dword>
					fs->wflag = 1;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	2201      	movs	r2, #1
 800cab8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800caba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d037      	beq.n	800cb30 <f_open+0x1d0>
						dw = fs->winsect;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cac4:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cac6:	f107 0318 	add.w	r3, r7, #24
 800caca:	2200      	movs	r2, #0
 800cacc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe f9ce 	bl	800ae70 <remove_chain>
 800cad4:	4603      	mov	r3, r0
 800cad6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800cada:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d126      	bne.n	800cb30 <f_open+0x1d0>
							res = move_window(fs, dw);
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7fd ff18 	bl	800a91c <move_window>
 800caec:	4603      	mov	r3, r0
 800caee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800caf6:	3a01      	subs	r2, #1
 800caf8:	615a      	str	r2, [r3, #20]
 800cafa:	e019      	b.n	800cb30 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cafc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d115      	bne.n	800cb30 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb04:	7fbb      	ldrb	r3, [r7, #30]
 800cb06:	f003 0310 	and.w	r3, r3, #16
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d003      	beq.n	800cb16 <f_open+0x1b6>
					res = FR_NO_FILE;
 800cb0e:	2304      	movs	r3, #4
 800cb10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb14:	e00c      	b.n	800cb30 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	f003 0302 	and.w	r3, r3, #2
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d007      	beq.n	800cb30 <f_open+0x1d0>
 800cb20:	7fbb      	ldrb	r3, [r7, #30]
 800cb22:	f003 0301 	and.w	r3, r3, #1
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d002      	beq.n	800cb30 <f_open+0x1d0>
						res = FR_DENIED;
 800cb2a:	2307      	movs	r3, #7
 800cb2c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cb30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d126      	bne.n	800cb86 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cb38:	79fb      	ldrb	r3, [r7, #7]
 800cb3a:	f003 0308 	and.w	r3, r3, #8
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d003      	beq.n	800cb4a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cb42:	79fb      	ldrb	r3, [r7, #7]
 800cb44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb48:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cb52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	bf8c      	ite	hi
 800cb5e:	2301      	movhi	r3, #1
 800cb60:	2300      	movls	r3, #0
 800cb62:	b2db      	uxtb	r3, r3
 800cb64:	461a      	mov	r2, r3
 800cb66:	f107 0318 	add.w	r3, r7, #24
 800cb6a:	4611      	mov	r1, r2
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fd fda3 	bl	800a6b8 <inc_lock>
 800cb72:	4602      	mov	r2, r0
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	691b      	ldr	r3, [r3, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d102      	bne.n	800cb86 <f_open+0x226>
 800cb80:	2302      	movs	r3, #2
 800cb82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cb86:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f040 80a3 	bne.w	800ccd6 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb94:	4611      	mov	r1, r2
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fe fc45 	bl	800b426 <ld_clust>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba4:	331c      	adds	r3, #28
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fd fc20 	bl	800a3ec <ld_dword>
 800cbac:	4602      	mov	r2, r0
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cbb8:	697a      	ldr	r2, [r7, #20]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	88da      	ldrh	r2, [r3, #6]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	79fa      	ldrb	r2, [r7, #7]
 800cbca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3330      	adds	r3, #48	@ 0x30
 800cbe2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fd fc8a 	bl	800a502 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cbee:	79fb      	ldrb	r3, [r7, #7]
 800cbf0:	f003 0320 	and.w	r3, r3, #32
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d06e      	beq.n	800ccd6 <f_open+0x376>
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d06a      	beq.n	800ccd6 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	68da      	ldr	r2, [r3, #12]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	895b      	ldrh	r3, [r3, #10]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	899b      	ldrh	r3, [r3, #12]
 800cc12:	fb02 f303 	mul.w	r3, r2, r3
 800cc16:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	689b      	ldr	r3, [r3, #8]
 800cc1c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc24:	e016      	b.n	800cc54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fd ff33 	bl	800aa96 <get_fat>
 800cc30:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cc32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d802      	bhi.n	800cc3e <f_open+0x2de>
 800cc38:	2302      	movs	r3, #2
 800cc3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cc3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc44:	d102      	bne.n	800cc4c <f_open+0x2ec>
 800cc46:	2301      	movs	r3, #1
 800cc48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc54:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d103      	bne.n	800cc64 <f_open+0x304>
 800cc5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d8e0      	bhi.n	800cc26 <f_open+0x2c6>
				}
				fp->clust = clst;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cc68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cc6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d131      	bne.n	800ccd6 <f_open+0x376>
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	899b      	ldrh	r3, [r3, #12]
 800cc76:	461a      	mov	r2, r3
 800cc78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cc7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc7e:	fb01 f202 	mul.w	r2, r1, r2
 800cc82:	1a9b      	subs	r3, r3, r2
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d026      	beq.n	800ccd6 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fd fee3 	bl	800aa58 <clust2sect>
 800cc92:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800cc94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d103      	bne.n	800cca2 <f_open+0x342>
						res = FR_INT_ERR;
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cca0:	e019      	b.n	800ccd6 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	899b      	ldrh	r3, [r3, #12]
 800cca6:	461a      	mov	r2, r3
 800cca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800ccae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccb0:	441a      	add	r2, r3
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	7858      	ldrb	r0, [r3, #1]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6a1a      	ldr	r2, [r3, #32]
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	f7f3 ffa3 	bl	8000c10 <disk_read>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d002      	beq.n	800ccd6 <f_open+0x376>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ccd6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <f_open+0x384>
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cce4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3768      	adds	r7, #104	@ 0x68
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b08e      	sub	sp, #56	@ 0x38
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	f107 0214 	add.w	r2, r7, #20
 800cd0e:	4611      	mov	r1, r2
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff fda9 	bl	800c868 <validate>
 800cd16:	4603      	mov	r3, r0
 800cd18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d107      	bne.n	800cd34 <f_read+0x44>
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	7d5b      	ldrb	r3, [r3, #21]
 800cd28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd2c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d002      	beq.n	800cd3a <f_read+0x4a>
 800cd34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd38:	e135      	b.n	800cfa6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	7d1b      	ldrb	r3, [r3, #20]
 800cd3e:	f003 0301 	and.w	r3, r3, #1
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <f_read+0x5a>
 800cd46:	2307      	movs	r3, #7
 800cd48:	e12d      	b.n	800cfa6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	f240 811e 	bls.w	800cf9c <f_read+0x2ac>
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cd64:	e11a      	b.n	800cf9c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	699b      	ldr	r3, [r3, #24]
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	8992      	ldrh	r2, [r2, #12]
 800cd6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd72:	fb01 f202 	mul.w	r2, r1, r2
 800cd76:	1a9b      	subs	r3, r3, r2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	f040 80d5 	bne.w	800cf28 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	699b      	ldr	r3, [r3, #24]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	8992      	ldrh	r2, [r2, #12]
 800cd86:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	8952      	ldrh	r2, [r2, #10]
 800cd8e:	3a01      	subs	r2, #1
 800cd90:	4013      	ands	r3, r2
 800cd92:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d12f      	bne.n	800cdfa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d103      	bne.n	800cdaa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cda8:	e013      	b.n	800cdd2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f7fe f956 	bl	800b06a <clmt_clust>
 800cdbe:	6338      	str	r0, [r7, #48]	@ 0x30
 800cdc0:	e007      	b.n	800cdd2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	69db      	ldr	r3, [r3, #28]
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4610      	mov	r0, r2
 800cdcc:	f7fd fe63 	bl	800aa96 <get_fat>
 800cdd0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d804      	bhi.n	800cde2 <f_read+0xf2>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2202      	movs	r2, #2
 800cddc:	755a      	strb	r2, [r3, #21]
 800cdde:	2302      	movs	r3, #2
 800cde0:	e0e1      	b.n	800cfa6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde8:	d104      	bne.n	800cdf4 <f_read+0x104>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	755a      	strb	r2, [r3, #21]
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e0d8      	b.n	800cfa6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdf8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	69db      	ldr	r3, [r3, #28]
 800ce00:	4619      	mov	r1, r3
 800ce02:	4610      	mov	r0, r2
 800ce04:	f7fd fe28 	bl	800aa58 <clust2sect>
 800ce08:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d104      	bne.n	800ce1a <f_read+0x12a>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2202      	movs	r2, #2
 800ce14:	755a      	strb	r2, [r3, #21]
 800ce16:	2302      	movs	r3, #2
 800ce18:	e0c5      	b.n	800cfa6 <f_read+0x2b6>
			sect += csect;
 800ce1a:	69ba      	ldr	r2, [r7, #24]
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	4413      	add	r3, r2
 800ce20:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	899b      	ldrh	r3, [r3, #12]
 800ce26:	461a      	mov	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce2e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d041      	beq.n	800ceba <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ce36:	69fa      	ldr	r2, [r7, #28]
 800ce38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3a:	4413      	add	r3, r2
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	8952      	ldrh	r2, [r2, #10]
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d905      	bls.n	800ce50 <f_read+0x160>
					cc = fs->csize - csect;
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	895b      	ldrh	r3, [r3, #10]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	7858      	ldrb	r0, [r3, #1]
 800ce54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce5a:	f7f3 fed9 	bl	8000c10 <disk_read>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d004      	beq.n	800ce6e <f_read+0x17e>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2201      	movs	r2, #1
 800ce68:	755a      	strb	r2, [r3, #21]
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	e09b      	b.n	800cfa6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7d1b      	ldrb	r3, [r3, #20]
 800ce72:	b25b      	sxtb	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	da18      	bge.n	800ceaa <f_read+0x1ba>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6a1a      	ldr	r2, [r3, #32]
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d911      	bls.n	800ceaa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6a1a      	ldr	r2, [r3, #32]
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	697a      	ldr	r2, [r7, #20]
 800ce90:	8992      	ldrh	r2, [r2, #12]
 800ce92:	fb02 f303 	mul.w	r3, r2, r3
 800ce96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce98:	18d0      	adds	r0, r2, r3
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cea0:	697b      	ldr	r3, [r7, #20]
 800cea2:	899b      	ldrh	r3, [r3, #12]
 800cea4:	461a      	mov	r2, r3
 800cea6:	f7fd fb0b 	bl	800a4c0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	899b      	ldrh	r3, [r3, #12]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb2:	fb02 f303 	mul.w	r3, r2, r3
 800ceb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ceb8:	e05c      	b.n	800cf74 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6a1b      	ldr	r3, [r3, #32]
 800cebe:	69ba      	ldr	r2, [r7, #24]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d02e      	beq.n	800cf22 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	7d1b      	ldrb	r3, [r3, #20]
 800cec8:	b25b      	sxtb	r3, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	da18      	bge.n	800cf00 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	7858      	ldrb	r0, [r3, #1]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6a1a      	ldr	r2, [r3, #32]
 800cedc:	2301      	movs	r3, #1
 800cede:	f7f3 feb7 	bl	8000c50 <disk_write>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d004      	beq.n	800cef2 <f_read+0x202>
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2201      	movs	r2, #1
 800ceec:	755a      	strb	r2, [r3, #21]
 800ceee:	2301      	movs	r3, #1
 800cef0:	e059      	b.n	800cfa6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	7d1b      	ldrb	r3, [r3, #20]
 800cef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cefa:	b2da      	uxtb	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	7858      	ldrb	r0, [r3, #1]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	69ba      	ldr	r2, [r7, #24]
 800cf0e:	f7f3 fe7f 	bl	8000c10 <disk_read>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <f_read+0x232>
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	755a      	strb	r2, [r3, #21]
 800cf1e:	2301      	movs	r3, #1
 800cf20:	e041      	b.n	800cfa6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	69ba      	ldr	r2, [r7, #24]
 800cf26:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	899b      	ldrh	r3, [r3, #12]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	8992      	ldrh	r2, [r2, #12]
 800cf36:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf3a:	fb01 f202 	mul.w	r2, r1, r2
 800cf3e:	1a9b      	subs	r3, r3, r2
 800cf40:	1ac3      	subs	r3, r0, r3
 800cf42:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cf44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d901      	bls.n	800cf50 <f_read+0x260>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	697a      	ldr	r2, [r7, #20]
 800cf5c:	8992      	ldrh	r2, [r2, #12]
 800cf5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf62:	fb00 f202 	mul.w	r2, r0, r2
 800cf66:	1a9b      	subs	r3, r3, r2
 800cf68:	440b      	add	r3, r1
 800cf6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf70:	f7fd faa6 	bl	800a4c0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cf74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf78:	4413      	add	r3, r2
 800cf7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	699a      	ldr	r2, [r3, #24]
 800cf80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf82:	441a      	add	r2, r3
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	619a      	str	r2, [r3, #24]
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8e:	441a      	add	r2, r3
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	601a      	str	r2, [r3, #0]
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f47f aee1 	bne.w	800cd66 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3738      	adds	r7, #56	@ 0x38
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b08c      	sub	sp, #48	@ 0x30
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	60f8      	str	r0, [r7, #12]
 800cfb6:	60b9      	str	r1, [r7, #8]
 800cfb8:	607a      	str	r2, [r7, #4]
 800cfba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f107 0210 	add.w	r2, r7, #16
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7ff fc4a 	bl	800c868 <validate>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cfda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d107      	bne.n	800cff2 <f_write+0x44>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	7d5b      	ldrb	r3, [r3, #21]
 800cfe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cfea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d002      	beq.n	800cff8 <f_write+0x4a>
 800cff2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cff6:	e16a      	b.n	800d2ce <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	7d1b      	ldrb	r3, [r3, #20]
 800cffc:	f003 0302 	and.w	r3, r3, #2
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <f_write+0x5a>
 800d004:	2307      	movs	r3, #7
 800d006:	e162      	b.n	800d2ce <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	699a      	ldr	r2, [r3, #24]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	441a      	add	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	699b      	ldr	r3, [r3, #24]
 800d014:	429a      	cmp	r2, r3
 800d016:	f080 814c 	bcs.w	800d2b2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	43db      	mvns	r3, r3
 800d020:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d022:	e146      	b.n	800d2b2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	8992      	ldrh	r2, [r2, #12]
 800d02c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d030:	fb01 f202 	mul.w	r2, r1, r2
 800d034:	1a9b      	subs	r3, r3, r2
 800d036:	2b00      	cmp	r3, #0
 800d038:	f040 80f1 	bne.w	800d21e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	693a      	ldr	r2, [r7, #16]
 800d042:	8992      	ldrh	r2, [r2, #12]
 800d044:	fbb3 f3f2 	udiv	r3, r3, r2
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	8952      	ldrh	r2, [r2, #10]
 800d04c:	3a01      	subs	r2, #1
 800d04e:	4013      	ands	r3, r2
 800d050:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d143      	bne.n	800d0e0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10c      	bne.n	800d07a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d11a      	bne.n	800d0a2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2100      	movs	r1, #0
 800d070:	4618      	mov	r0, r3
 800d072:	f7fd ff62 	bl	800af3a <create_chain>
 800d076:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d078:	e013      	b.n	800d0a2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d007      	beq.n	800d092 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	4619      	mov	r1, r3
 800d088:	68f8      	ldr	r0, [r7, #12]
 800d08a:	f7fd ffee 	bl	800b06a <clmt_clust>
 800d08e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d090:	e007      	b.n	800d0a2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d092:	68fa      	ldr	r2, [r7, #12]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	69db      	ldr	r3, [r3, #28]
 800d098:	4619      	mov	r1, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	f7fd ff4d 	bl	800af3a <create_chain>
 800d0a0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8109 	beq.w	800d2bc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d104      	bne.n	800d0ba <f_write+0x10c>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2202      	movs	r2, #2
 800d0b4:	755a      	strb	r2, [r3, #21]
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	e109      	b.n	800d2ce <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c0:	d104      	bne.n	800d0cc <f_write+0x11e>
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	755a      	strb	r2, [r3, #21]
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e100      	b.n	800d2ce <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0d0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d102      	bne.n	800d0e0 <f_write+0x132>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0de:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	7d1b      	ldrb	r3, [r3, #20]
 800d0e4:	b25b      	sxtb	r3, r3
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	da18      	bge.n	800d11c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	7858      	ldrb	r0, [r3, #1]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6a1a      	ldr	r2, [r3, #32]
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f7f3 fda9 	bl	8000c50 <disk_write>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b00      	cmp	r3, #0
 800d102:	d004      	beq.n	800d10e <f_write+0x160>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2201      	movs	r2, #1
 800d108:	755a      	strb	r2, [r3, #21]
 800d10a:	2301      	movs	r3, #1
 800d10c:	e0df      	b.n	800d2ce <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	7d1b      	ldrb	r3, [r3, #20]
 800d112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d116:	b2da      	uxtb	r2, r3
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	69db      	ldr	r3, [r3, #28]
 800d122:	4619      	mov	r1, r3
 800d124:	4610      	mov	r0, r2
 800d126:	f7fd fc97 	bl	800aa58 <clust2sect>
 800d12a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d104      	bne.n	800d13c <f_write+0x18e>
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2202      	movs	r2, #2
 800d136:	755a      	strb	r2, [r3, #21]
 800d138:	2302      	movs	r3, #2
 800d13a:	e0c8      	b.n	800d2ce <f_write+0x320>
			sect += csect;
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	69bb      	ldr	r3, [r7, #24]
 800d140:	4413      	add	r3, r2
 800d142:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	899b      	ldrh	r3, [r3, #12]
 800d148:	461a      	mov	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d150:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d152:	6a3b      	ldr	r3, [r7, #32]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d043      	beq.n	800d1e0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d158:	69ba      	ldr	r2, [r7, #24]
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	4413      	add	r3, r2
 800d15e:	693a      	ldr	r2, [r7, #16]
 800d160:	8952      	ldrh	r2, [r2, #10]
 800d162:	4293      	cmp	r3, r2
 800d164:	d905      	bls.n	800d172 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	895b      	ldrh	r3, [r3, #10]
 800d16a:	461a      	mov	r2, r3
 800d16c:	69bb      	ldr	r3, [r7, #24]
 800d16e:	1ad3      	subs	r3, r2, r3
 800d170:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	7858      	ldrb	r0, [r3, #1]
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	69f9      	ldr	r1, [r7, #28]
 800d17c:	f7f3 fd68 	bl	8000c50 <disk_write>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d004      	beq.n	800d190 <f_write+0x1e2>
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2201      	movs	r2, #1
 800d18a:	755a      	strb	r2, [r3, #21]
 800d18c:	2301      	movs	r3, #1
 800d18e:	e09e      	b.n	800d2ce <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6a1a      	ldr	r2, [r3, #32]
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	1ad3      	subs	r3, r2, r3
 800d198:	6a3a      	ldr	r2, [r7, #32]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d918      	bls.n	800d1d0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	6a1a      	ldr	r2, [r3, #32]
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	8992      	ldrh	r2, [r2, #12]
 800d1b0:	fb02 f303 	mul.w	r3, r2, r3
 800d1b4:	69fa      	ldr	r2, [r7, #28]
 800d1b6:	18d1      	adds	r1, r2, r3
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	899b      	ldrh	r3, [r3, #12]
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f7fd f97f 	bl	800a4c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	7d1b      	ldrb	r3, [r3, #20]
 800d1c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1ca:	b2da      	uxtb	r2, r3
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	899b      	ldrh	r3, [r3, #12]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	6a3b      	ldr	r3, [r7, #32]
 800d1d8:	fb02 f303 	mul.w	r3, r2, r3
 800d1dc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d1de:	e04b      	b.n	800d278 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6a1b      	ldr	r3, [r3, #32]
 800d1e4:	697a      	ldr	r2, [r7, #20]
 800d1e6:	429a      	cmp	r2, r3
 800d1e8:	d016      	beq.n	800d218 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	699a      	ldr	r2, [r3, #24]
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d210      	bcs.n	800d218 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	7858      	ldrb	r0, [r3, #1]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d200:	2301      	movs	r3, #1
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	f7f3 fd04 	bl	8000c10 <disk_read>
 800d208:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d004      	beq.n	800d218 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2201      	movs	r2, #1
 800d212:	755a      	strb	r2, [r3, #21]
 800d214:	2301      	movs	r3, #1
 800d216:	e05a      	b.n	800d2ce <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	899b      	ldrh	r3, [r3, #12]
 800d222:	4618      	mov	r0, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	699b      	ldr	r3, [r3, #24]
 800d228:	693a      	ldr	r2, [r7, #16]
 800d22a:	8992      	ldrh	r2, [r2, #12]
 800d22c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d230:	fb01 f202 	mul.w	r2, r1, r2
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	1ac3      	subs	r3, r0, r3
 800d238:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d23a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d901      	bls.n	800d246 <f_write+0x298>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	693a      	ldr	r2, [r7, #16]
 800d252:	8992      	ldrh	r2, [r2, #12]
 800d254:	fbb3 f0f2 	udiv	r0, r3, r2
 800d258:	fb00 f202 	mul.w	r2, r0, r2
 800d25c:	1a9b      	subs	r3, r3, r2
 800d25e:	440b      	add	r3, r1
 800d260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d262:	69f9      	ldr	r1, [r7, #28]
 800d264:	4618      	mov	r0, r3
 800d266:	f7fd f92b 	bl	800a4c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	7d1b      	ldrb	r3, [r3, #20]
 800d26e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d272:	b2da      	uxtb	r2, r3
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d278:	69fa      	ldr	r2, [r7, #28]
 800d27a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d27c:	4413      	add	r3, r2
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	699a      	ldr	r2, [r3, #24]
 800d284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d286:	441a      	add	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	619a      	str	r2, [r3, #24]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	68da      	ldr	r2, [r3, #12]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	699b      	ldr	r3, [r3, #24]
 800d294:	429a      	cmp	r2, r3
 800d296:	bf38      	it	cc
 800d298:	461a      	movcc	r2, r3
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	60da      	str	r2, [r3, #12]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a4:	441a      	add	r2, r3
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	f47f aeb5 	bne.w	800d024 <f_write+0x76>
 800d2ba:	e000      	b.n	800d2be <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2bc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	7d1b      	ldrb	r3, [r3, #20]
 800d2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2c6:	b2da      	uxtb	r2, r3
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3730      	adds	r7, #48	@ 0x30
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}

0800d2d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d2d6:	b580      	push	{r7, lr}
 800d2d8:	b086      	sub	sp, #24
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f107 0208 	add.w	r2, r7, #8
 800d2e4:	4611      	mov	r1, r2
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff fabe 	bl	800c868 <validate>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d2f0:	7dfb      	ldrb	r3, [r7, #23]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d168      	bne.n	800d3c8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	7d1b      	ldrb	r3, [r3, #20]
 800d2fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d062      	beq.n	800d3c8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	7d1b      	ldrb	r3, [r3, #20]
 800d306:	b25b      	sxtb	r3, r3
 800d308:	2b00      	cmp	r3, #0
 800d30a:	da15      	bge.n	800d338 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	7858      	ldrb	r0, [r3, #1]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6a1a      	ldr	r2, [r3, #32]
 800d31a:	2301      	movs	r3, #1
 800d31c:	f7f3 fc98 	bl	8000c50 <disk_write>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d001      	beq.n	800d32a <f_sync+0x54>
 800d326:	2301      	movs	r3, #1
 800d328:	e04f      	b.n	800d3ca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	7d1b      	ldrb	r3, [r3, #20]
 800d32e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d332:	b2da      	uxtb	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d338:	f7f3 fcda 	bl	8000cf0 <get_fattime>
 800d33c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d344:	4619      	mov	r1, r3
 800d346:	4610      	mov	r0, r2
 800d348:	f7fd fae8 	bl	800a91c <move_window>
 800d34c:	4603      	mov	r3, r0
 800d34e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d350:	7dfb      	ldrb	r3, [r7, #23]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d138      	bne.n	800d3c8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d35a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	330b      	adds	r3, #11
 800d360:	781a      	ldrb	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	330b      	adds	r3, #11
 800d366:	f042 0220 	orr.w	r2, r2, #32
 800d36a:	b2d2      	uxtb	r2, r2
 800d36c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6818      	ldr	r0, [r3, #0]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	461a      	mov	r2, r3
 800d378:	68f9      	ldr	r1, [r7, #12]
 800d37a:	f7fe f873 	bl	800b464 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f103 021c 	add.w	r2, r3, #28
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	4619      	mov	r1, r3
 800d38a:	4610      	mov	r0, r2
 800d38c:	f7fd f86c 	bl	800a468 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	3316      	adds	r3, #22
 800d394:	6939      	ldr	r1, [r7, #16]
 800d396:	4618      	mov	r0, r3
 800d398:	f7fd f866 	bl	800a468 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	3312      	adds	r3, #18
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f7fd f845 	bl	800a432 <st_word>
					fs->wflag = 1;
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f7fd fae1 	bl	800a978 <sync_fs>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7d1b      	ldrb	r3, [r3, #20]
 800d3be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3c2:	b2da      	uxtb	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d3c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3718      	adds	r7, #24
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f7ff ff7b 	bl	800d2d6 <f_sync>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d3e4:	7bfb      	ldrb	r3, [r7, #15]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d118      	bne.n	800d41c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f107 0208 	add.w	r2, r7, #8
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7ff fa38 	bl	800c868 <validate>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10c      	bne.n	800d41c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	4618      	mov	r0, r3
 800d408:	f7fd f9e4 	bl	800a7d4 <dec_lock>
 800d40c:	4603      	mov	r3, r0
 800d40e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d410:	7bfb      	ldrb	r3, [r7, #15]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d102      	bne.n	800d41c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41e:	4618      	mov	r0, r3
 800d420:	3710      	adds	r7, #16
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}

0800d426 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d426:	b580      	push	{r7, lr}
 800d428:	b090      	sub	sp, #64	@ 0x40
 800d42a:	af00      	add	r7, sp, #0
 800d42c:	6078      	str	r0, [r7, #4]
 800d42e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f107 0208 	add.w	r2, r7, #8
 800d436:	4611      	mov	r1, r2
 800d438:	4618      	mov	r0, r3
 800d43a:	f7ff fa15 	bl	800c868 <validate>
 800d43e:	4603      	mov	r3, r0
 800d440:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d444:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d103      	bne.n	800d454 <f_lseek+0x2e>
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7d5b      	ldrb	r3, [r3, #21]
 800d450:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d454:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <f_lseek+0x3c>
 800d45c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d460:	e201      	b.n	800d866 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 80d9 	beq.w	800d61e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d472:	d15a      	bne.n	800d52a <f_lseek+0x104>
			tbl = fp->cltbl;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d478:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d47c:	1d1a      	adds	r2, r3, #4
 800d47e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	617b      	str	r3, [r7, #20]
 800d484:	2302      	movs	r3, #2
 800d486:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d490:	2b00      	cmp	r3, #0
 800d492:	d03a      	beq.n	800d50a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d496:	613b      	str	r3, [r7, #16]
 800d498:	2300      	movs	r3, #0
 800d49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d49e:	3302      	adds	r3, #2
 800d4a0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a4:	60fb      	str	r3, [r7, #12]
 800d4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fd faf0 	bl	800aa96 <get_fat>
 800d4b6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d804      	bhi.n	800d4c8 <f_lseek+0xa2>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2202      	movs	r2, #2
 800d4c2:	755a      	strb	r2, [r3, #21]
 800d4c4:	2302      	movs	r3, #2
 800d4c6:	e1ce      	b.n	800d866 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d4c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d104      	bne.n	800d4da <f_lseek+0xb4>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	755a      	strb	r2, [r3, #21]
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e1c5      	b.n	800d866 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d0de      	beq.n	800d4a2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d4e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d809      	bhi.n	800d500 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ee:	1d1a      	adds	r2, r3, #4
 800d4f0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d4f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4f4:	601a      	str	r2, [r3, #0]
 800d4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f8:	1d1a      	adds	r2, r3, #4
 800d4fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	69db      	ldr	r3, [r3, #28]
 800d504:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d506:	429a      	cmp	r2, r3
 800d508:	d3c4      	bcc.n	800d494 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d50e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d510:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	429a      	cmp	r2, r3
 800d518:	d803      	bhi.n	800d522 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51c:	2200      	movs	r2, #0
 800d51e:	601a      	str	r2, [r3, #0]
 800d520:	e19f      	b.n	800d862 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d522:	2311      	movs	r3, #17
 800d524:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d528:	e19b      	b.n	800d862 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	429a      	cmp	r2, r3
 800d532:	d902      	bls.n	800d53a <f_lseek+0x114>
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	f000 818d 	beq.w	800d862 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	3b01      	subs	r3, #1
 800d54c:	4619      	mov	r1, r3
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f7fd fd8b 	bl	800b06a <clmt_clust>
 800d554:	4602      	mov	r2, r0
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d55a:	68ba      	ldr	r2, [r7, #8]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	4619      	mov	r1, r3
 800d562:	4610      	mov	r0, r2
 800d564:	f7fd fa78 	bl	800aa58 <clust2sect>
 800d568:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d104      	bne.n	800d57a <f_lseek+0x154>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	755a      	strb	r2, [r3, #21]
 800d576:	2302      	movs	r3, #2
 800d578:	e175      	b.n	800d866 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	3b01      	subs	r3, #1
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	8992      	ldrh	r2, [r2, #12]
 800d582:	fbb3 f3f2 	udiv	r3, r3, r2
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	8952      	ldrh	r2, [r2, #10]
 800d58a:	3a01      	subs	r2, #1
 800d58c:	4013      	ands	r3, r2
 800d58e:	69ba      	ldr	r2, [r7, #24]
 800d590:	4413      	add	r3, r2
 800d592:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	8992      	ldrh	r2, [r2, #12]
 800d59c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5a0:	fb01 f202 	mul.w	r2, r1, r2
 800d5a4:	1a9b      	subs	r3, r3, r2
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 815b 	beq.w	800d862 <f_lseek+0x43c>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a1b      	ldr	r3, [r3, #32]
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	f000 8155 	beq.w	800d862 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	7d1b      	ldrb	r3, [r3, #20]
 800d5bc:	b25b      	sxtb	r3, r3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	da18      	bge.n	800d5f4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	7858      	ldrb	r0, [r3, #1]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6a1a      	ldr	r2, [r3, #32]
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	f7f3 fb3d 	bl	8000c50 <disk_write>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <f_lseek+0x1c0>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	755a      	strb	r2, [r3, #21]
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e13f      	b.n	800d866 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	7d1b      	ldrb	r3, [r3, #20]
 800d5ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	7858      	ldrb	r0, [r3, #1]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d5fe:	2301      	movs	r3, #1
 800d600:	69ba      	ldr	r2, [r7, #24]
 800d602:	f7f3 fb05 	bl	8000c10 <disk_read>
 800d606:	4603      	mov	r3, r0
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d004      	beq.n	800d616 <f_lseek+0x1f0>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	755a      	strb	r2, [r3, #21]
 800d612:	2301      	movs	r3, #1
 800d614:	e127      	b.n	800d866 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	69ba      	ldr	r2, [r7, #24]
 800d61a:	621a      	str	r2, [r3, #32]
 800d61c:	e121      	b.n	800d862 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	429a      	cmp	r2, r3
 800d626:	d908      	bls.n	800d63a <f_lseek+0x214>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	7d1b      	ldrb	r3, [r3, #20]
 800d62c:	f003 0302 	and.w	r3, r3, #2
 800d630:	2b00      	cmp	r3, #0
 800d632:	d102      	bne.n	800d63a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68db      	ldr	r3, [r3, #12]
 800d638:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d640:	2300      	movs	r3, #0
 800d642:	637b      	str	r3, [r7, #52]	@ 0x34
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d648:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f000 80b5 	beq.w	800d7bc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	895b      	ldrh	r3, [r3, #10]
 800d656:	461a      	mov	r2, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	899b      	ldrh	r3, [r3, #12]
 800d65c:	fb02 f303 	mul.w	r3, r2, r3
 800d660:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d662:	6a3b      	ldr	r3, [r7, #32]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d01b      	beq.n	800d6a0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	1e5a      	subs	r2, r3, #1
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	fbb2 f2f3 	udiv	r2, r2, r3
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	1e59      	subs	r1, r3, #1
 800d676:	69fb      	ldr	r3, [r7, #28]
 800d678:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d30f      	bcc.n	800d6a0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d680:	6a3b      	ldr	r3, [r7, #32]
 800d682:	1e5a      	subs	r2, r3, #1
 800d684:	69fb      	ldr	r3, [r7, #28]
 800d686:	425b      	negs	r3, r3
 800d688:	401a      	ands	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	699b      	ldr	r3, [r3, #24]
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d69e:	e022      	b.n	800d6e6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d119      	bne.n	800d6e0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fd fc42 	bl	800af3a <create_chain>
 800d6b6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ba:	2b01      	cmp	r3, #1
 800d6bc:	d104      	bne.n	800d6c8 <f_lseek+0x2a2>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2202      	movs	r2, #2
 800d6c2:	755a      	strb	r2, [r3, #21]
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	e0ce      	b.n	800d866 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ce:	d104      	bne.n	800d6da <f_lseek+0x2b4>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	755a      	strb	r2, [r3, #21]
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e0c5      	b.n	800d866 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6de:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d6e4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d067      	beq.n	800d7bc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d6ec:	e03a      	b.n	800d764 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d6ee:	683a      	ldr	r2, [r7, #0]
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	1ad3      	subs	r3, r2, r3
 800d6f4:	603b      	str	r3, [r7, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	699a      	ldr	r2, [r3, #24]
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	441a      	add	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	7d1b      	ldrb	r3, [r3, #20]
 800d706:	f003 0302 	and.w	r3, r3, #2
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00b      	beq.n	800d726 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d712:	4618      	mov	r0, r3
 800d714:	f7fd fc11 	bl	800af3a <create_chain>
 800d718:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d108      	bne.n	800d732 <f_lseek+0x30c>
							ofs = 0; break;
 800d720:	2300      	movs	r3, #0
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	e022      	b.n	800d76c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fd f9b3 	bl	800aa96 <get_fat>
 800d730:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d738:	d104      	bne.n	800d744 <f_lseek+0x31e>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	755a      	strb	r2, [r3, #21]
 800d740:	2301      	movs	r3, #1
 800d742:	e090      	b.n	800d866 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d746:	2b01      	cmp	r3, #1
 800d748:	d904      	bls.n	800d754 <f_lseek+0x32e>
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d750:	429a      	cmp	r2, r3
 800d752:	d304      	bcc.n	800d75e <f_lseek+0x338>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	755a      	strb	r2, [r3, #21]
 800d75a:	2302      	movs	r3, #2
 800d75c:	e083      	b.n	800d866 <f_lseek+0x440>
					fp->clust = clst;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d762:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	429a      	cmp	r2, r3
 800d76a:	d8c0      	bhi.n	800d6ee <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	699a      	ldr	r2, [r3, #24]
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	441a      	add	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	899b      	ldrh	r3, [r3, #12]
 800d77c:	461a      	mov	r2, r3
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	fbb3 f1f2 	udiv	r1, r3, r2
 800d784:	fb01 f202 	mul.w	r2, r1, r2
 800d788:	1a9b      	subs	r3, r3, r2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d016      	beq.n	800d7bc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d792:	4618      	mov	r0, r3
 800d794:	f7fd f960 	bl	800aa58 <clust2sect>
 800d798:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d104      	bne.n	800d7aa <f_lseek+0x384>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	755a      	strb	r2, [r3, #21]
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	e05d      	b.n	800d866 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	899b      	ldrh	r3, [r3, #12]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7b8:	4413      	add	r3, r2
 800d7ba:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	699a      	ldr	r2, [r3, #24]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	68db      	ldr	r3, [r3, #12]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d90a      	bls.n	800d7de <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	699a      	ldr	r2, [r3, #24]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	7d1b      	ldrb	r3, [r3, #20]
 800d7d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	699b      	ldr	r3, [r3, #24]
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	8992      	ldrh	r2, [r2, #12]
 800d7e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7ea:	fb01 f202 	mul.w	r2, r1, r2
 800d7ee:	1a9b      	subs	r3, r3, r2
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d036      	beq.n	800d862 <f_lseek+0x43c>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d031      	beq.n	800d862 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	7d1b      	ldrb	r3, [r3, #20]
 800d802:	b25b      	sxtb	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	da18      	bge.n	800d83a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	7858      	ldrb	r0, [r3, #1]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a1a      	ldr	r2, [r3, #32]
 800d816:	2301      	movs	r3, #1
 800d818:	f7f3 fa1a 	bl	8000c50 <disk_write>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d004      	beq.n	800d82c <f_lseek+0x406>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2201      	movs	r2, #1
 800d826:	755a      	strb	r2, [r3, #21]
 800d828:	2301      	movs	r3, #1
 800d82a:	e01c      	b.n	800d866 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	7d1b      	ldrb	r3, [r3, #20]
 800d830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d834:	b2da      	uxtb	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	7858      	ldrb	r0, [r3, #1]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d844:	2301      	movs	r3, #1
 800d846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d848:	f7f3 f9e2 	bl	8000c10 <disk_read>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d004      	beq.n	800d85c <f_lseek+0x436>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	755a      	strb	r2, [r3, #21]
 800d858:	2301      	movs	r3, #1
 800d85a:	e004      	b.n	800d866 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d860:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d862:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d866:	4618      	mov	r0, r3
 800d868:	3740      	adds	r7, #64	@ 0x40
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}

0800d86e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b092      	sub	sp, #72	@ 0x48
 800d872:	af00      	add	r7, sp, #0
 800d874:	60f8      	str	r0, [r7, #12]
 800d876:	60b9      	str	r1, [r7, #8]
 800d878:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d87a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800d87e:	f107 030c 	add.w	r3, r7, #12
 800d882:	2200      	movs	r2, #0
 800d884:	4618      	mov	r0, r3
 800d886:	f7fe fd69 	bl	800c35c <find_volume>
 800d88a:	4603      	mov	r3, r0
 800d88c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800d890:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d894:	2b00      	cmp	r3, #0
 800d896:	f040 8099 	bne.w	800d9cc <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d89a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a2:	699a      	ldr	r2, [r3, #24]
 800d8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8a6:	69db      	ldr	r3, [r3, #28]
 800d8a8:	3b02      	subs	r3, #2
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d804      	bhi.n	800d8b8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b0:	699a      	ldr	r2, [r3, #24]
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	e089      	b.n	800d9cc <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d128      	bne.n	800d916 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d8c4:	2302      	movs	r3, #2
 800d8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ca:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d8cc:	f107 0314 	add.w	r3, r7, #20
 800d8d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fd f8df 	bl	800aa96 <get_fat>
 800d8d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8e0:	d103      	bne.n	800d8ea <f_getfree+0x7c>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d8e8:	e063      	b.n	800d9b2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d103      	bne.n	800d8f8 <f_getfree+0x8a>
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d8f6:	e05c      	b.n	800d9b2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d102      	bne.n	800d904 <f_getfree+0x96>
 800d8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d900:	3301      	adds	r3, #1
 800d902:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800d904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d906:	3301      	adds	r3, #1
 800d908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d910:	429a      	cmp	r2, r3
 800d912:	d3db      	bcc.n	800d8cc <f_getfree+0x5e>
 800d914:	e04d      	b.n	800d9b2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d918:	69db      	ldr	r3, [r3, #28]
 800d91a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d920:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800d922:	2300      	movs	r3, #0
 800d924:	637b      	str	r3, [r7, #52]	@ 0x34
 800d926:	2300      	movs	r3, #0
 800d928:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800d92a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d113      	bne.n	800d958 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d934:	1c5a      	adds	r2, r3, #1
 800d936:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d938:	4619      	mov	r1, r3
 800d93a:	f7fc ffef 	bl	800a91c <move_window>
 800d93e:	4603      	mov	r3, r0
 800d940:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800d944:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d131      	bne.n	800d9b0 <f_getfree+0x142>
							p = fs->win;
 800d94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94e:	3338      	adds	r3, #56	@ 0x38
 800d950:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800d952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d954:	899b      	ldrh	r3, [r3, #12]
 800d956:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d10f      	bne.n	800d980 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d962:	f7fc fd2b 	bl	800a3bc <ld_word>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d102      	bne.n	800d972 <f_getfree+0x104>
 800d96c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d96e:	3301      	adds	r3, #1
 800d970:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800d972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d974:	3302      	adds	r3, #2
 800d976:	633b      	str	r3, [r7, #48]	@ 0x30
 800d978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d97a:	3b02      	subs	r3, #2
 800d97c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d97e:	e010      	b.n	800d9a2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d980:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d982:	f7fc fd33 	bl	800a3ec <ld_dword>
 800d986:	4603      	mov	r3, r0
 800d988:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <f_getfree+0x128>
 800d990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d992:	3301      	adds	r3, #1
 800d994:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800d996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d998:	3304      	adds	r3, #4
 800d99a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d99c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d99e:	3b04      	subs	r3, #4
 800d9a0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800d9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d1bd      	bne.n	800d92a <f_getfree+0xbc>
 800d9ae:	e000      	b.n	800d9b2 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d9b0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9b6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d9bc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c0:	791a      	ldrb	r2, [r3, #4]
 800d9c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c4:	f042 0201 	orr.w	r2, r2, #1
 800d9c8:	b2d2      	uxtb	r2, r2
 800d9ca:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d9cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3748      	adds	r7, #72	@ 0x48
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b0a0      	sub	sp, #128	@ 0x80
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d9e4:	f107 010c 	add.w	r1, r7, #12
 800d9e8:	1d3b      	adds	r3, r7, #4
 800d9ea:	2202      	movs	r2, #2
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe fcb5 	bl	800c35c <find_volume>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	647b      	str	r3, [r7, #68]	@ 0x44
	if (res == FR_OK) {
 800d9fc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da00:	2b00      	cmp	r3, #0
 800da02:	f040 808e 	bne.w	800db22 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800da0c:	4611      	mov	r1, r2
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe fb94 	bl	800c13c <follow_path>
 800da14:	4603      	mov	r3, r0
 800da16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800da1a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d108      	bne.n	800da34 <f_unlink+0x5c>
 800da22:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800da26:	2102      	movs	r1, #2
 800da28:	4618      	mov	r0, r3
 800da2a:	f7fc fdc7 	bl	800a5bc <chk_lock>
 800da2e:	4603      	mov	r3, r0
 800da30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800da34:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d172      	bne.n	800db22 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800da3c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800da40:	b25b      	sxtb	r3, r3
 800da42:	2b00      	cmp	r3, #0
 800da44:	da03      	bge.n	800da4e <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800da46:	2306      	movs	r3, #6
 800da48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800da4c:	e008      	b.n	800da60 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800da4e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800da52:	f003 0301 	and.w	r3, r3, #1
 800da56:	2b00      	cmp	r3, #0
 800da58:	d002      	beq.n	800da60 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800da5a:	2307      	movs	r3, #7
 800da5c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 800da60:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800da64:	2b00      	cmp	r3, #0
 800da66:	d134      	bne.n	800dad2 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800da6c:	4611      	mov	r1, r2
 800da6e:	4618      	mov	r0, r3
 800da70:	f7fd fcd9 	bl	800b426 <ld_clust>
 800da74:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800da76:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800da7a:	f003 0310 	and.w	r3, r3, #16
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d027      	beq.n	800dad2 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800da86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800da88:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800da8a:	f107 0310 	add.w	r3, r7, #16
 800da8e:	2100      	movs	r1, #0
 800da90:	4618      	mov	r0, r3
 800da92:	f7fd fb22 	bl	800b0da <dir_sdi>
 800da96:	4603      	mov	r3, r0
 800da98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 800da9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d116      	bne.n	800dad2 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800daa4:	f107 0310 	add.w	r3, r7, #16
 800daa8:	2100      	movs	r1, #0
 800daaa:	4618      	mov	r0, r3
 800daac:	f7fd fee5 	bl	800b87a <dir_read>
 800dab0:	4603      	mov	r3, r0
 800dab2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800dab6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d102      	bne.n	800dac4 <f_unlink+0xec>
 800dabe:	2307      	movs	r3, #7
 800dac0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800dac4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800dac8:	2b04      	cmp	r3, #4
 800daca:	d102      	bne.n	800dad2 <f_unlink+0xfa>
 800dacc:	2300      	movs	r3, #0
 800dace:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800dad2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d123      	bne.n	800db22 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800dada:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe f92a 	bl	800bd38 <dir_remove>
 800dae4:	4603      	mov	r3, r0
 800dae6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800daea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d10c      	bne.n	800db0c <f_unlink+0x134>
 800daf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d009      	beq.n	800db0c <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800daf8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800dafc:	2200      	movs	r2, #0
 800dafe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800db00:	4618      	mov	r0, r3
 800db02:	f7fd f9b5 	bl	800ae70 <remove_chain>
 800db06:	4603      	mov	r3, r0
 800db08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800db0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800db10:	2b00      	cmp	r3, #0
 800db12:	d106      	bne.n	800db22 <f_unlink+0x14a>
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	4618      	mov	r0, r3
 800db18:	f7fc ff2e 	bl	800a978 <sync_fs>
 800db1c:	4603      	mov	r3, r0
 800db1e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800db22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800db26:	4618      	mov	r0, r3
 800db28:	3780      	adds	r7, #128	@ 0x80
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b088      	sub	sp, #32
 800db32:	af00      	add	r7, sp, #0
 800db34:	60f8      	str	r0, [r7, #12]
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	607a      	str	r2, [r7, #4]
	int n = 0;
 800db3a:	2300      	movs	r3, #0
 800db3c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800db42:	e01c      	b.n	800db7e <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800db44:	f107 0310 	add.w	r3, r7, #16
 800db48:	f107 0114 	add.w	r1, r7, #20
 800db4c:	2201      	movs	r2, #1
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f7ff f8ce 	bl	800ccf0 <f_read>
		if (rc != 1) break;
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	2b01      	cmp	r3, #1
 800db58:	d117      	bne.n	800db8a <f_gets+0x5c>
		c = s[0];
 800db5a:	7d3b      	ldrb	r3, [r7, #20]
 800db5c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	2b0d      	cmp	r3, #13
 800db62:	d00b      	beq.n	800db7c <f_gets+0x4e>
		*p++ = c;
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	1c5a      	adds	r2, r3, #1
 800db68:	61ba      	str	r2, [r7, #24]
 800db6a:	7dfa      	ldrb	r2, [r7, #23]
 800db6c:	701a      	strb	r2, [r3, #0]
		n++;
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	3301      	adds	r3, #1
 800db72:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	2b0a      	cmp	r3, #10
 800db78:	d009      	beq.n	800db8e <f_gets+0x60>
 800db7a:	e000      	b.n	800db7e <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800db7c:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	3b01      	subs	r3, #1
 800db82:	69fa      	ldr	r2, [r7, #28]
 800db84:	429a      	cmp	r2, r3
 800db86:	dbdd      	blt.n	800db44 <f_gets+0x16>
 800db88:	e002      	b.n	800db90 <f_gets+0x62>
		if (rc != 1) break;
 800db8a:	bf00      	nop
 800db8c:	e000      	b.n	800db90 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800db8e:	bf00      	nop
	}
	*p = 0;
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	2200      	movs	r2, #0
 800db94:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800db96:	69fb      	ldr	r3, [r7, #28]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <f_gets+0x72>
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	e000      	b.n	800dba2 <f_gets+0x74>
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800dbb6:	78fb      	ldrb	r3, [r7, #3]
 800dbb8:	2b0a      	cmp	r3, #10
 800dbba:	d103      	bne.n	800dbc4 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800dbbc:	210d      	movs	r1, #13
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f7ff fff3 	bl	800dbaa <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	db25      	blt.n	800dc1c <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	1c5a      	adds	r2, r3, #1
 800dbd4:	60fa      	str	r2, [r7, #12]
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	4413      	add	r3, r2
 800dbda:	78fa      	ldrb	r2, [r7, #3]
 800dbdc:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b3c      	cmp	r3, #60	@ 0x3c
 800dbe2:	dd12      	ble.n	800dc0a <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6818      	ldr	r0, [r3, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f103 010c 	add.w	r1, r3, #12
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	f107 0308 	add.w	r3, r7, #8
 800dbf4:	f7ff f9db 	bl	800cfae <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d101      	bne.n	800dc04 <putc_bfd+0x5a>
 800dc00:	2300      	movs	r3, #0
 800dc02:	e001      	b.n	800dc08 <putc_bfd+0x5e>
 800dc04:	f04f 33ff 	mov.w	r3, #4294967295
 800dc08:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	1c5a      	adds	r2, r3, #1
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	609a      	str	r2, [r3, #8]
 800dc1a:	e000      	b.n	800dc1e <putc_bfd+0x74>
	if (i < 0) return;
 800dc1c:	bf00      	nop
}
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	685b      	ldr	r3, [r3, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	db16      	blt.n	800dc62 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6818      	ldr	r0, [r3, #0]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f103 010c 	add.w	r1, r3, #12
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	461a      	mov	r2, r3
 800dc44:	f107 030c 	add.w	r3, r7, #12
 800dc48:	f7ff f9b1 	bl	800cfae <f_write>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d107      	bne.n	800dc62 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d102      	bne.n	800dc62 <putc_flush+0x3e>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	e001      	b.n	800dc66 <putc_flush+0x42>
	return EOF;
 800dc62:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800dc6e:	b480      	push	{r7}
 800dc70:	b083      	sub	sp, #12
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
 800dc76:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	683a      	ldr	r2, [r7, #0]
 800dc7c:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	605a      	str	r2, [r3, #4]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	685a      	ldr	r2, [r3, #4]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	609a      	str	r2, [r3, #8]
}
 800dc8c:	bf00      	nop
 800dc8e:	370c      	adds	r7, #12
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b096      	sub	sp, #88	@ 0x58
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800dca2:	f107 030c 	add.w	r3, r7, #12
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7ff ffe0 	bl	800dc6e <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800dcae:	e009      	b.n	800dcc4 <f_puts+0x2c>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	607a      	str	r2, [r7, #4]
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	f107 030c 	add.w	r3, r7, #12
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7ff ff73 	bl	800dbaa <putc_bfd>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1f1      	bne.n	800dcb0 <f_puts+0x18>
	return putc_flush(&pb);
 800dccc:	f107 030c 	add.w	r3, r7, #12
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff ffa7 	bl	800dc24 <putc_flush>
 800dcd6:	4603      	mov	r3, r0
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3758      	adds	r7, #88	@ 0x58
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b087      	sub	sp, #28
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	60b9      	str	r1, [r7, #8]
 800dcea:	4613      	mov	r3, r2
 800dcec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dcf6:	4b1f      	ldr	r3, [pc, #124]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dcf8:	7a5b      	ldrb	r3, [r3, #9]
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d131      	bne.n	800dd64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd00:	4b1c      	ldr	r3, [pc, #112]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd02:	7a5b      	ldrb	r3, [r3, #9]
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	461a      	mov	r2, r3
 800dd08:	4b1a      	ldr	r3, [pc, #104]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd0e:	4b19      	ldr	r3, [pc, #100]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd10:	7a5b      	ldrb	r3, [r3, #9]
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	4a17      	ldr	r2, [pc, #92]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	4413      	add	r3, r2
 800dd1a:	68fa      	ldr	r2, [r7, #12]
 800dd1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd1e:	4b15      	ldr	r3, [pc, #84]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd20:	7a5b      	ldrb	r3, [r3, #9]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	461a      	mov	r2, r3
 800dd26:	4b13      	ldr	r3, [pc, #76]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd28:	4413      	add	r3, r2
 800dd2a:	79fa      	ldrb	r2, [r7, #7]
 800dd2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd2e:	4b11      	ldr	r3, [pc, #68]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd30:	7a5b      	ldrb	r3, [r3, #9]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	b2d1      	uxtb	r1, r2
 800dd38:	4a0e      	ldr	r2, [pc, #56]	@ (800dd74 <FATFS_LinkDriverEx+0x94>)
 800dd3a:	7251      	strb	r1, [r2, #9]
 800dd3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd3e:	7dbb      	ldrb	r3, [r7, #22]
 800dd40:	3330      	adds	r3, #48	@ 0x30
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	223a      	movs	r2, #58	@ 0x3a
 800dd4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	3302      	adds	r3, #2
 800dd54:	222f      	movs	r2, #47	@ 0x2f
 800dd56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	3303      	adds	r3, #3
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd60:	2300      	movs	r3, #0
 800dd62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd64:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	371c      	adds	r7, #28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20002908 	.word	0x20002908

0800dd78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd82:	2200      	movs	r2, #0
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff ffaa 	bl	800dce0 <FATFS_LinkDriverEx>
 800dd8c:	4603      	mov	r3, r0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
	...

0800dd98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dd98:	b480      	push	{r7}
 800dd9a:	b085      	sub	sp, #20
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	6039      	str	r1, [r7, #0]
 800dda2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dda4:	88fb      	ldrh	r3, [r7, #6]
 800dda6:	2b7f      	cmp	r3, #127	@ 0x7f
 800dda8:	d802      	bhi.n	800ddb0 <ff_convert+0x18>
		c = chr;
 800ddaa:	88fb      	ldrh	r3, [r7, #6]
 800ddac:	81fb      	strh	r3, [r7, #14]
 800ddae:	e025      	b.n	800ddfc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00b      	beq.n	800ddce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ddb6:	88fb      	ldrh	r3, [r7, #6]
 800ddb8:	2bff      	cmp	r3, #255	@ 0xff
 800ddba:	d805      	bhi.n	800ddc8 <ff_convert+0x30>
 800ddbc:	88fb      	ldrh	r3, [r7, #6]
 800ddbe:	3b80      	subs	r3, #128	@ 0x80
 800ddc0:	4a12      	ldr	r2, [pc, #72]	@ (800de0c <ff_convert+0x74>)
 800ddc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddc6:	e000      	b.n	800ddca <ff_convert+0x32>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	81fb      	strh	r3, [r7, #14]
 800ddcc:	e016      	b.n	800ddfc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ddce:	2300      	movs	r3, #0
 800ddd0:	81fb      	strh	r3, [r7, #14]
 800ddd2:	e009      	b.n	800dde8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ddd4:	89fb      	ldrh	r3, [r7, #14]
 800ddd6:	4a0d      	ldr	r2, [pc, #52]	@ (800de0c <ff_convert+0x74>)
 800ddd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dddc:	88fa      	ldrh	r2, [r7, #6]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d006      	beq.n	800ddf0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dde2:	89fb      	ldrh	r3, [r7, #14]
 800dde4:	3301      	adds	r3, #1
 800dde6:	81fb      	strh	r3, [r7, #14]
 800dde8:	89fb      	ldrh	r3, [r7, #14]
 800ddea:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddec:	d9f2      	bls.n	800ddd4 <ff_convert+0x3c>
 800ddee:	e000      	b.n	800ddf2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ddf0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ddf2:	89fb      	ldrh	r3, [r7, #14]
 800ddf4:	3380      	adds	r3, #128	@ 0x80
 800ddf6:	b29b      	uxth	r3, r3
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ddfc:	89fb      	ldrh	r3, [r7, #14]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	0800f50c 	.word	0x0800f50c

0800de10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
 800de16:	4603      	mov	r3, r0
 800de18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800de1a:	88fb      	ldrh	r3, [r7, #6]
 800de1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de20:	d201      	bcs.n	800de26 <ff_wtoupper+0x16>
 800de22:	4b3e      	ldr	r3, [pc, #248]	@ (800df1c <ff_wtoupper+0x10c>)
 800de24:	e000      	b.n	800de28 <ff_wtoupper+0x18>
 800de26:	4b3e      	ldr	r3, [pc, #248]	@ (800df20 <ff_wtoupper+0x110>)
 800de28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	1c9a      	adds	r2, r3, #2
 800de2e:	617a      	str	r2, [r7, #20]
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800de34:	8a7b      	ldrh	r3, [r7, #18]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d068      	beq.n	800df0c <ff_wtoupper+0xfc>
 800de3a:	88fa      	ldrh	r2, [r7, #6]
 800de3c:	8a7b      	ldrh	r3, [r7, #18]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d364      	bcc.n	800df0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	1c9a      	adds	r2, r3, #2
 800de46:	617a      	str	r2, [r7, #20]
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	823b      	strh	r3, [r7, #16]
 800de4c:	8a3b      	ldrh	r3, [r7, #16]
 800de4e:	0a1b      	lsrs	r3, r3, #8
 800de50:	81fb      	strh	r3, [r7, #14]
 800de52:	8a3b      	ldrh	r3, [r7, #16]
 800de54:	b2db      	uxtb	r3, r3
 800de56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800de58:	88fa      	ldrh	r2, [r7, #6]
 800de5a:	8a79      	ldrh	r1, [r7, #18]
 800de5c:	8a3b      	ldrh	r3, [r7, #16]
 800de5e:	440b      	add	r3, r1
 800de60:	429a      	cmp	r2, r3
 800de62:	da49      	bge.n	800def8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800de64:	89fb      	ldrh	r3, [r7, #14]
 800de66:	2b08      	cmp	r3, #8
 800de68:	d84f      	bhi.n	800df0a <ff_wtoupper+0xfa>
 800de6a:	a201      	add	r2, pc, #4	@ (adr r2, 800de70 <ff_wtoupper+0x60>)
 800de6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de70:	0800de95 	.word	0x0800de95
 800de74:	0800dea7 	.word	0x0800dea7
 800de78:	0800debd 	.word	0x0800debd
 800de7c:	0800dec5 	.word	0x0800dec5
 800de80:	0800decd 	.word	0x0800decd
 800de84:	0800ded5 	.word	0x0800ded5
 800de88:	0800dedd 	.word	0x0800dedd
 800de8c:	0800dee5 	.word	0x0800dee5
 800de90:	0800deed 	.word	0x0800deed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800de94:	88fa      	ldrh	r2, [r7, #6]
 800de96:	8a7b      	ldrh	r3, [r7, #18]
 800de98:	1ad3      	subs	r3, r2, r3
 800de9a:	005b      	lsls	r3, r3, #1
 800de9c:	697a      	ldr	r2, [r7, #20]
 800de9e:	4413      	add	r3, r2
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	80fb      	strh	r3, [r7, #6]
 800dea4:	e027      	b.n	800def6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dea6:	88fa      	ldrh	r2, [r7, #6]
 800dea8:	8a7b      	ldrh	r3, [r7, #18]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	b29b      	uxth	r3, r3
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	88fa      	ldrh	r2, [r7, #6]
 800deb6:	1ad3      	subs	r3, r2, r3
 800deb8:	80fb      	strh	r3, [r7, #6]
 800deba:	e01c      	b.n	800def6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800debc:	88fb      	ldrh	r3, [r7, #6]
 800debe:	3b10      	subs	r3, #16
 800dec0:	80fb      	strh	r3, [r7, #6]
 800dec2:	e018      	b.n	800def6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dec4:	88fb      	ldrh	r3, [r7, #6]
 800dec6:	3b20      	subs	r3, #32
 800dec8:	80fb      	strh	r3, [r7, #6]
 800deca:	e014      	b.n	800def6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800decc:	88fb      	ldrh	r3, [r7, #6]
 800dece:	3b30      	subs	r3, #48	@ 0x30
 800ded0:	80fb      	strh	r3, [r7, #6]
 800ded2:	e010      	b.n	800def6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ded4:	88fb      	ldrh	r3, [r7, #6]
 800ded6:	3b1a      	subs	r3, #26
 800ded8:	80fb      	strh	r3, [r7, #6]
 800deda:	e00c      	b.n	800def6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800dedc:	88fb      	ldrh	r3, [r7, #6]
 800dede:	3308      	adds	r3, #8
 800dee0:	80fb      	strh	r3, [r7, #6]
 800dee2:	e008      	b.n	800def6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dee4:	88fb      	ldrh	r3, [r7, #6]
 800dee6:	3b50      	subs	r3, #80	@ 0x50
 800dee8:	80fb      	strh	r3, [r7, #6]
 800deea:	e004      	b.n	800def6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800deec:	88fb      	ldrh	r3, [r7, #6]
 800deee:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800def2:	80fb      	strh	r3, [r7, #6]
 800def4:	bf00      	nop
			}
			break;
 800def6:	e008      	b.n	800df0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800def8:	89fb      	ldrh	r3, [r7, #14]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d195      	bne.n	800de2a <ff_wtoupper+0x1a>
 800defe:	8a3b      	ldrh	r3, [r7, #16]
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	697a      	ldr	r2, [r7, #20]
 800df04:	4413      	add	r3, r2
 800df06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800df08:	e78f      	b.n	800de2a <ff_wtoupper+0x1a>
			break;
 800df0a:	bf00      	nop
	}

	return chr;
 800df0c:	88fb      	ldrh	r3, [r7, #6]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	371c      	adds	r7, #28
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	0800f60c 	.word	0x0800f60c
 800df20:	0800f800 	.word	0x0800f800

0800df24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df28:	2200      	movs	r2, #0
 800df2a:	4912      	ldr	r1, [pc, #72]	@ (800df74 <MX_USB_DEVICE_Init+0x50>)
 800df2c:	4812      	ldr	r0, [pc, #72]	@ (800df78 <MX_USB_DEVICE_Init+0x54>)
 800df2e:	f7fa ff48 	bl	8008dc2 <USBD_Init>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df38:	f7f3 fe54 	bl	8001be4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800df3c:	490f      	ldr	r1, [pc, #60]	@ (800df7c <MX_USB_DEVICE_Init+0x58>)
 800df3e:	480e      	ldr	r0, [pc, #56]	@ (800df78 <MX_USB_DEVICE_Init+0x54>)
 800df40:	f7fa ff6f 	bl	8008e22 <USBD_RegisterClass>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d001      	beq.n	800df4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df4a:	f7f3 fe4b 	bl	8001be4 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800df4e:	490c      	ldr	r1, [pc, #48]	@ (800df80 <MX_USB_DEVICE_Init+0x5c>)
 800df50:	4809      	ldr	r0, [pc, #36]	@ (800df78 <MX_USB_DEVICE_Init+0x54>)
 800df52:	f7f9 f92b 	bl	80071ac <USBD_MSC_RegisterStorage>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d001      	beq.n	800df60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df5c:	f7f3 fe42 	bl	8001be4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df60:	4805      	ldr	r0, [pc, #20]	@ (800df78 <MX_USB_DEVICE_Init+0x54>)
 800df62:	f7fa ff94 	bl	8008e8e <USBD_Start>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df6c:	f7f3 fe3a 	bl	8001be4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df70:	bf00      	nop
 800df72:	bd80      	pop	{r7, pc}
 800df74:	200000a4 	.word	0x200000a4
 800df78:	20002914 	.word	0x20002914
 800df7c:	20000024 	.word	0x20000024
 800df80:	200000f4 	.word	0x200000f4

0800df84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	6039      	str	r1, [r7, #0]
 800df8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2212      	movs	r2, #18
 800df94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df96:	4b03      	ldr	r3, [pc, #12]	@ (800dfa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800df98:	4618      	mov	r0, r3
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	200000c0 	.word	0x200000c0

0800dfa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	4603      	mov	r3, r0
 800dfb0:	6039      	str	r1, [r7, #0]
 800dfb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	2204      	movs	r2, #4
 800dfb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dfba:	4b03      	ldr	r3, [pc, #12]	@ (800dfc8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	200000d4 	.word	0x200000d4

0800dfcc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	6039      	str	r1, [r7, #0]
 800dfd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d105      	bne.n	800dfea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	4907      	ldr	r1, [pc, #28]	@ (800e000 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfe2:	4808      	ldr	r0, [pc, #32]	@ (800e004 <USBD_FS_ProductStrDescriptor+0x38>)
 800dfe4:	f7fc f918 	bl	800a218 <USBD_GetString>
 800dfe8:	e004      	b.n	800dff4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfea:	683a      	ldr	r2, [r7, #0]
 800dfec:	4904      	ldr	r1, [pc, #16]	@ (800e000 <USBD_FS_ProductStrDescriptor+0x34>)
 800dfee:	4805      	ldr	r0, [pc, #20]	@ (800e004 <USBD_FS_ProductStrDescriptor+0x38>)
 800dff0:	f7fc f912 	bl	800a218 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dff4:	4b02      	ldr	r3, [pc, #8]	@ (800e000 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3708      	adds	r7, #8
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	20002bf0 	.word	0x20002bf0
 800e004:	0800f420 	.word	0x0800f420

0800e008 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	4603      	mov	r3, r0
 800e010:	6039      	str	r1, [r7, #0]
 800e012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e014:	683a      	ldr	r2, [r7, #0]
 800e016:	4904      	ldr	r1, [pc, #16]	@ (800e028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e018:	4804      	ldr	r0, [pc, #16]	@ (800e02c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e01a:	f7fc f8fd 	bl	800a218 <USBD_GetString>
  return USBD_StrDesc;
 800e01e:	4b02      	ldr	r3, [pc, #8]	@ (800e028 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20002bf0 	.word	0x20002bf0
 800e02c:	0800f434 	.word	0x0800f434

0800e030 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	6039      	str	r1, [r7, #0]
 800e03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	221a      	movs	r2, #26
 800e040:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e042:	f000 f843 	bl	800e0cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e046:	4b02      	ldr	r3, [pc, #8]	@ (800e050 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	200000d8 	.word	0x200000d8

0800e054 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	4603      	mov	r3, r0
 800e05c:	6039      	str	r1, [r7, #0]
 800e05e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d105      	bne.n	800e072 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	4907      	ldr	r1, [pc, #28]	@ (800e088 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e06a:	4808      	ldr	r0, [pc, #32]	@ (800e08c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e06c:	f7fc f8d4 	bl	800a218 <USBD_GetString>
 800e070:	e004      	b.n	800e07c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e072:	683a      	ldr	r2, [r7, #0]
 800e074:	4904      	ldr	r1, [pc, #16]	@ (800e088 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e076:	4805      	ldr	r0, [pc, #20]	@ (800e08c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e078:	f7fc f8ce 	bl	800a218 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e07c:	4b02      	ldr	r3, [pc, #8]	@ (800e088 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	20002bf0 	.word	0x20002bf0
 800e08c:	0800f448 	.word	0x0800f448

0800e090 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	6039      	str	r1, [r7, #0]
 800e09a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e09c:	79fb      	ldrb	r3, [r7, #7]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d105      	bne.n	800e0ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e0a2:	683a      	ldr	r2, [r7, #0]
 800e0a4:	4907      	ldr	r1, [pc, #28]	@ (800e0c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e0a6:	4808      	ldr	r0, [pc, #32]	@ (800e0c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0a8:	f7fc f8b6 	bl	800a218 <USBD_GetString>
 800e0ac:	e004      	b.n	800e0b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	4904      	ldr	r1, [pc, #16]	@ (800e0c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e0b2:	4805      	ldr	r0, [pc, #20]	@ (800e0c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0b4:	f7fc f8b0 	bl	800a218 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0b8:	4b02      	ldr	r3, [pc, #8]	@ (800e0c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	20002bf0 	.word	0x20002bf0
 800e0c8:	0800f454 	.word	0x0800f454

0800e0cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b084      	sub	sp, #16
 800e0d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e110 <Get_SerialNum+0x44>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e114 <Get_SerialNum+0x48>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0de:	4b0e      	ldr	r3, [pc, #56]	@ (800e118 <Get_SerialNum+0x4c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	4413      	add	r3, r2
 800e0ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d009      	beq.n	800e106 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e0f2:	2208      	movs	r2, #8
 800e0f4:	4909      	ldr	r1, [pc, #36]	@ (800e11c <Get_SerialNum+0x50>)
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f000 f814 	bl	800e124 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0fc:	2204      	movs	r2, #4
 800e0fe:	4908      	ldr	r1, [pc, #32]	@ (800e120 <Get_SerialNum+0x54>)
 800e100:	68b8      	ldr	r0, [r7, #8]
 800e102:	f000 f80f 	bl	800e124 <IntToUnicode>
  }
}
 800e106:	bf00      	nop
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	1fff7a10 	.word	0x1fff7a10
 800e114:	1fff7a14 	.word	0x1fff7a14
 800e118:	1fff7a18 	.word	0x1fff7a18
 800e11c:	200000da 	.word	0x200000da
 800e120:	200000ea 	.word	0x200000ea

0800e124 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e124:	b480      	push	{r7}
 800e126:	b087      	sub	sp, #28
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	4613      	mov	r3, r2
 800e130:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e132:	2300      	movs	r3, #0
 800e134:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e136:	2300      	movs	r3, #0
 800e138:	75fb      	strb	r3, [r7, #23]
 800e13a:	e027      	b.n	800e18c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	0f1b      	lsrs	r3, r3, #28
 800e140:	2b09      	cmp	r3, #9
 800e142:	d80b      	bhi.n	800e15c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	0f1b      	lsrs	r3, r3, #28
 800e148:	b2da      	uxtb	r2, r3
 800e14a:	7dfb      	ldrb	r3, [r7, #23]
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4619      	mov	r1, r3
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	440b      	add	r3, r1
 800e154:	3230      	adds	r2, #48	@ 0x30
 800e156:	b2d2      	uxtb	r2, r2
 800e158:	701a      	strb	r2, [r3, #0]
 800e15a:	e00a      	b.n	800e172 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	0f1b      	lsrs	r3, r3, #28
 800e160:	b2da      	uxtb	r2, r3
 800e162:	7dfb      	ldrb	r3, [r7, #23]
 800e164:	005b      	lsls	r3, r3, #1
 800e166:	4619      	mov	r1, r3
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	440b      	add	r3, r1
 800e16c:	3237      	adds	r2, #55	@ 0x37
 800e16e:	b2d2      	uxtb	r2, r2
 800e170:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	011b      	lsls	r3, r3, #4
 800e176:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e178:	7dfb      	ldrb	r3, [r7, #23]
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	3301      	adds	r3, #1
 800e17e:	68ba      	ldr	r2, [r7, #8]
 800e180:	4413      	add	r3, r2
 800e182:	2200      	movs	r2, #0
 800e184:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e186:	7dfb      	ldrb	r3, [r7, #23]
 800e188:	3301      	adds	r3, #1
 800e18a:	75fb      	strb	r3, [r7, #23]
 800e18c:	7dfa      	ldrb	r2, [r7, #23]
 800e18e:	79fb      	ldrb	r3, [r7, #7]
 800e190:	429a      	cmp	r2, r3
 800e192:	d3d3      	bcc.n	800e13c <IntToUnicode+0x18>
  }
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop
 800e198:	371c      	adds	r7, #28
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	b083      	sub	sp, #12
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
 UNUSED(lun);

  return (USBD_OK);
 800e1ac:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	370c      	adds	r7, #12
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800e1ba:	b480      	push	{r7}
 800e1bc:	b085      	sub	sp, #20
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	607a      	str	r2, [r7, #4]
 800e1c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  UNUSED(lun);

  *block_num  = STORAGE_BLK_NBR;
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e1ce:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1d6:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800e1d8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3714      	adds	r7, #20
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b083      	sub	sp, #12
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(lun);

  return (USBD_OK);
 800e1f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800e1fe:	b480      	push	{r7}
 800e200:	b083      	sub	sp, #12
 800e202:	af00      	add	r7, sp, #0
 800e204:	4603      	mov	r3, r0
 800e206:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(lun);

  return (USBD_OK);
 800e208:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e216:	b480      	push	{r7}
 800e218:	b085      	sub	sp, #20
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	461a      	mov	r2, r3
 800e222:	4603      	mov	r3, r0
 800e224:	73fb      	strb	r3, [r7, #15]
 800e226:	4613      	mov	r3, r2
 800e228:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800e22a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3714      	adds	r7, #20
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60b9      	str	r1, [r7, #8]
 800e240:	607a      	str	r2, [r7, #4]
 800e242:	461a      	mov	r2, r3
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]
 800e248:	4613      	mov	r3, r2
 800e24a:	81bb      	strh	r3, [r7, #12]
  UNUSED(lun);
  UNUSED(buf);
  UNUSED(blk_addr);
  UNUSED(blk_len);

  return (USBD_OK);
 800e24c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3714      	adds	r7, #20
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr

0800e25a <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800e25a:	b480      	push	{r7}
 800e25c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800e25e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e260:	4618      	mov	r0, r3
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr
	...

0800e26c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08a      	sub	sp, #40	@ 0x28
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e274:	f107 0314 	add.w	r3, r7, #20
 800e278:	2200      	movs	r2, #0
 800e27a:	601a      	str	r2, [r3, #0]
 800e27c:	605a      	str	r2, [r3, #4]
 800e27e:	609a      	str	r2, [r3, #8]
 800e280:	60da      	str	r2, [r3, #12]
 800e282:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e28c:	d13a      	bne.n	800e304 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e28e:	2300      	movs	r3, #0
 800e290:	613b      	str	r3, [r7, #16]
 800e292:	4b1e      	ldr	r3, [pc, #120]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e296:	4a1d      	ldr	r2, [pc, #116]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e298:	f043 0301 	orr.w	r3, r3, #1
 800e29c:	6313      	str	r3, [r2, #48]	@ 0x30
 800e29e:	4b1b      	ldr	r3, [pc, #108]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2a2:	f003 0301 	and.w	r3, r3, #1
 800e2a6:	613b      	str	r3, [r7, #16]
 800e2a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e2aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e2ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2b8:	2303      	movs	r3, #3
 800e2ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e2bc:	230a      	movs	r3, #10
 800e2be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2c0:	f107 0314 	add.w	r3, r7, #20
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4812      	ldr	r0, [pc, #72]	@ (800e310 <HAL_PCD_MspInit+0xa4>)
 800e2c8:	f7f3 fff2 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e2cc:	4b0f      	ldr	r3, [pc, #60]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2d0:	4a0e      	ldr	r2, [pc, #56]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e2d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2d6:	6353      	str	r3, [r2, #52]	@ 0x34
 800e2d8:	2300      	movs	r3, #0
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	4b0b      	ldr	r3, [pc, #44]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e2de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2e0:	4a0a      	ldr	r2, [pc, #40]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e2e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e2e6:	6453      	str	r3, [r2, #68]	@ 0x44
 800e2e8:	4b08      	ldr	r3, [pc, #32]	@ (800e30c <HAL_PCD_MspInit+0xa0>)
 800e2ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e2f0:	60fb      	str	r3, [r7, #12]
 800e2f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	2043      	movs	r0, #67	@ 0x43
 800e2fa:	f7f3 ffa2 	bl	8002242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e2fe:	2043      	movs	r0, #67	@ 0x43
 800e300:	f7f3 ffbb 	bl	800227a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e304:	bf00      	nop
 800e306:	3728      	adds	r7, #40	@ 0x28
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	40023800 	.word	0x40023800
 800e310:	40020000 	.word	0x40020000

0800e314 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e328:	4619      	mov	r1, r3
 800e32a:	4610      	mov	r0, r2
 800e32c:	f7fa fdfc 	bl	8008f28 <USBD_LL_SetupStage>
}
 800e330:	bf00      	nop
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e34a:	78fa      	ldrb	r2, [r7, #3]
 800e34c:	6879      	ldr	r1, [r7, #4]
 800e34e:	4613      	mov	r3, r2
 800e350:	00db      	lsls	r3, r3, #3
 800e352:	4413      	add	r3, r2
 800e354:	009b      	lsls	r3, r3, #2
 800e356:	440b      	add	r3, r1
 800e358:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	78fb      	ldrb	r3, [r7, #3]
 800e360:	4619      	mov	r1, r3
 800e362:	f7fa fe36 	bl	8008fd2 <USBD_LL_DataOutStage>
}
 800e366:	bf00      	nop
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}

0800e36e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e36e:	b580      	push	{r7, lr}
 800e370:	b082      	sub	sp, #8
 800e372:	af00      	add	r7, sp, #0
 800e374:	6078      	str	r0, [r7, #4]
 800e376:	460b      	mov	r3, r1
 800e378:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e380:	78fa      	ldrb	r2, [r7, #3]
 800e382:	6879      	ldr	r1, [r7, #4]
 800e384:	4613      	mov	r3, r2
 800e386:	00db      	lsls	r3, r3, #3
 800e388:	4413      	add	r3, r2
 800e38a:	009b      	lsls	r3, r3, #2
 800e38c:	440b      	add	r3, r1
 800e38e:	3320      	adds	r3, #32
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	78fb      	ldrb	r3, [r7, #3]
 800e394:	4619      	mov	r1, r3
 800e396:	f7fa fed8 	bl	800914a <USBD_LL_DataInStage>
}
 800e39a:	bf00      	nop
 800e39c:	3708      	adds	r7, #8
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}

0800e3a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fb f81c 	bl	80093ee <USBD_LL_SOF>
}
 800e3b6:	bf00      	nop
 800e3b8:	3708      	adds	r7, #8
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b084      	sub	sp, #16
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	79db      	ldrb	r3, [r3, #7]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d102      	bne.n	800e3d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	73fb      	strb	r3, [r7, #15]
 800e3d6:	e008      	b.n	800e3ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	79db      	ldrb	r3, [r3, #7]
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	d102      	bne.n	800e3e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	73fb      	strb	r3, [r7, #15]
 800e3e4:	e001      	b.n	800e3ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e3e6:	f7f3 fbfd 	bl	8001be4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3f0:	7bfa      	ldrb	r2, [r7, #15]
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fa ffb6 	bl	8009366 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e400:	4618      	mov	r0, r3
 800e402:	f7fa ff5d 	bl	80092c0 <USBD_LL_Reset>
}
 800e406:	bf00      	nop
 800e408:	3710      	adds	r7, #16
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e41e:	4618      	mov	r0, r3
 800e420:	f7fa ffb1 	bl	8009386 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	6812      	ldr	r2, [r2, #0]
 800e432:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e436:	f043 0301 	orr.w	r3, r3, #1
 800e43a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	7adb      	ldrb	r3, [r3, #11]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d005      	beq.n	800e450 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e444:	4b04      	ldr	r3, [pc, #16]	@ (800e458 <HAL_PCD_SuspendCallback+0x48>)
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	4a03      	ldr	r2, [pc, #12]	@ (800e458 <HAL_PCD_SuspendCallback+0x48>)
 800e44a:	f043 0306 	orr.w	r3, r3, #6
 800e44e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e450:	bf00      	nop
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	e000ed00 	.word	0xe000ed00

0800e45c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b082      	sub	sp, #8
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fa ffa7 	bl	80093be <USBD_LL_Resume>
}
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	460b      	mov	r3, r1
 800e482:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e48a:	78fa      	ldrb	r2, [r7, #3]
 800e48c:	4611      	mov	r1, r2
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fa ffff 	bl	8009492 <USBD_LL_IsoOUTIncomplete>
}
 800e494:	bf00      	nop
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4ae:	78fa      	ldrb	r2, [r7, #3]
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fa ffbb 	bl	800942e <USBD_LL_IsoINIncomplete>
}
 800e4b8:	bf00      	nop
 800e4ba:	3708      	adds	r7, #8
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b082      	sub	sp, #8
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f7fb f811 	bl	80094f6 <USBD_LL_DevConnected>
}
 800e4d4:	bf00      	nop
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}

0800e4dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fb f80e 	bl	800950c <USBD_LL_DevDisconnected>
}
 800e4f0:	bf00      	nop
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b082      	sub	sp, #8
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d13c      	bne.n	800e582 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e508:	4a20      	ldr	r2, [pc, #128]	@ (800e58c <USBD_LL_Init+0x94>)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	4a1e      	ldr	r2, [pc, #120]	@ (800e58c <USBD_LL_Init+0x94>)
 800e514:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e518:	4b1c      	ldr	r3, [pc, #112]	@ (800e58c <USBD_LL_Init+0x94>)
 800e51a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e51e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e520:	4b1a      	ldr	r3, [pc, #104]	@ (800e58c <USBD_LL_Init+0x94>)
 800e522:	2204      	movs	r2, #4
 800e524:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e526:	4b19      	ldr	r3, [pc, #100]	@ (800e58c <USBD_LL_Init+0x94>)
 800e528:	2202      	movs	r2, #2
 800e52a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e52c:	4b17      	ldr	r3, [pc, #92]	@ (800e58c <USBD_LL_Init+0x94>)
 800e52e:	2200      	movs	r2, #0
 800e530:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e532:	4b16      	ldr	r3, [pc, #88]	@ (800e58c <USBD_LL_Init+0x94>)
 800e534:	2202      	movs	r2, #2
 800e536:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e538:	4b14      	ldr	r3, [pc, #80]	@ (800e58c <USBD_LL_Init+0x94>)
 800e53a:	2200      	movs	r2, #0
 800e53c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e53e:	4b13      	ldr	r3, [pc, #76]	@ (800e58c <USBD_LL_Init+0x94>)
 800e540:	2200      	movs	r2, #0
 800e542:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e544:	4b11      	ldr	r3, [pc, #68]	@ (800e58c <USBD_LL_Init+0x94>)
 800e546:	2200      	movs	r2, #0
 800e548:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e54a:	4b10      	ldr	r3, [pc, #64]	@ (800e58c <USBD_LL_Init+0x94>)
 800e54c:	2200      	movs	r2, #0
 800e54e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e550:	4b0e      	ldr	r3, [pc, #56]	@ (800e58c <USBD_LL_Init+0x94>)
 800e552:	2200      	movs	r2, #0
 800e554:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e556:	480d      	ldr	r0, [pc, #52]	@ (800e58c <USBD_LL_Init+0x94>)
 800e558:	f7f4 f86f 	bl	800263a <HAL_PCD_Init>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d001      	beq.n	800e566 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e562:	f7f3 fb3f 	bl	8001be4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e566:	2180      	movs	r1, #128	@ 0x80
 800e568:	4808      	ldr	r0, [pc, #32]	@ (800e58c <USBD_LL_Init+0x94>)
 800e56a:	f7f5 fac8 	bl	8003afe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e56e:	2240      	movs	r2, #64	@ 0x40
 800e570:	2100      	movs	r1, #0
 800e572:	4806      	ldr	r0, [pc, #24]	@ (800e58c <USBD_LL_Init+0x94>)
 800e574:	f7f5 fa7c 	bl	8003a70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e578:	2280      	movs	r2, #128	@ 0x80
 800e57a:	2101      	movs	r1, #1
 800e57c:	4803      	ldr	r0, [pc, #12]	@ (800e58c <USBD_LL_Init+0x94>)
 800e57e:	f7f5 fa77 	bl	8003a70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e582:	2300      	movs	r3, #0
}
 800e584:	4618      	mov	r0, r3
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20002df0 	.word	0x20002df0

0800e590 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e59c:	2300      	movs	r3, #0
 800e59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f4 f956 	bl	8002858 <HAL_PCD_Start>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5b0:	7bfb      	ldrb	r3, [r7, #15]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 f962 	bl	800e87c <USBD_Get_USB_Status>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	4608      	mov	r0, r1
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	70fb      	strb	r3, [r7, #3]
 800e5d8:	460b      	mov	r3, r1
 800e5da:	70bb      	strb	r3, [r7, #2]
 800e5dc:	4613      	mov	r3, r2
 800e5de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e5ee:	78bb      	ldrb	r3, [r7, #2]
 800e5f0:	883a      	ldrh	r2, [r7, #0]
 800e5f2:	78f9      	ldrb	r1, [r7, #3]
 800e5f4:	f7f4 fe2a 	bl	800324c <HAL_PCD_EP_Open>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 f93c 	bl	800e87c <USBD_Get_USB_Status>
 800e604:	4603      	mov	r3, r0
 800e606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e608:	7bbb      	ldrb	r3, [r7, #14]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}

0800e612 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e612:	b580      	push	{r7, lr}
 800e614:	b084      	sub	sp, #16
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
 800e61a:	460b      	mov	r3, r1
 800e61c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e61e:	2300      	movs	r3, #0
 800e620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e62c:	78fa      	ldrb	r2, [r7, #3]
 800e62e:	4611      	mov	r1, r2
 800e630:	4618      	mov	r0, r3
 800e632:	f7f4 fe75 	bl	8003320 <HAL_PCD_EP_Close>
 800e636:	4603      	mov	r3, r0
 800e638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f000 f91d 	bl	800e87c <USBD_Get_USB_Status>
 800e642:	4603      	mov	r3, r0
 800e644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e646:	7bbb      	ldrb	r3, [r7, #14]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	460b      	mov	r3, r1
 800e65a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e65c:	2300      	movs	r3, #0
 800e65e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e660:	2300      	movs	r3, #0
 800e662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e66a:	78fa      	ldrb	r2, [r7, #3]
 800e66c:	4611      	mov	r1, r2
 800e66e:	4618      	mov	r0, r3
 800e670:	f7f5 f817 	bl	80036a2 <HAL_PCD_EP_Flush>
 800e674:	4603      	mov	r3, r0
 800e676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e678:	7bfb      	ldrb	r3, [r7, #15]
 800e67a:	4618      	mov	r0, r3
 800e67c:	f000 f8fe 	bl	800e87c <USBD_Get_USB_Status>
 800e680:	4603      	mov	r3, r0
 800e682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e684:	7bbb      	ldrb	r3, [r7, #14]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b084      	sub	sp, #16
 800e692:	af00      	add	r7, sp, #0
 800e694:	6078      	str	r0, [r7, #4]
 800e696:	460b      	mov	r3, r1
 800e698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6a8:	78fa      	ldrb	r2, [r7, #3]
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f4 ff0e 	bl	80034ce <HAL_PCD_EP_SetStall>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b6:	7bfb      	ldrb	r3, [r7, #15]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 f8df 	bl	800e87c <USBD_Get_USB_Status>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6e6:	78fa      	ldrb	r2, [r7, #3]
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7f4 ff52 	bl	8003594 <HAL_PCD_EP_ClrStall>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f4:	7bfb      	ldrb	r3, [r7, #15]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 f8c0 	bl	800e87c <USBD_Get_USB_Status>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e700:	7bbb      	ldrb	r3, [r7, #14]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3710      	adds	r7, #16
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e70a:	b480      	push	{r7}
 800e70c:	b085      	sub	sp, #20
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	460b      	mov	r3, r1
 800e714:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e71c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e71e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e722:	2b00      	cmp	r3, #0
 800e724:	da0b      	bge.n	800e73e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e726:	78fb      	ldrb	r3, [r7, #3]
 800e728:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e72c:	68f9      	ldr	r1, [r7, #12]
 800e72e:	4613      	mov	r3, r2
 800e730:	00db      	lsls	r3, r3, #3
 800e732:	4413      	add	r3, r2
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	440b      	add	r3, r1
 800e738:	3316      	adds	r3, #22
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	e00b      	b.n	800e756 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e73e:	78fb      	ldrb	r3, [r7, #3]
 800e740:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e744:	68f9      	ldr	r1, [r7, #12]
 800e746:	4613      	mov	r3, r2
 800e748:	00db      	lsls	r3, r3, #3
 800e74a:	4413      	add	r3, r2
 800e74c:	009b      	lsls	r3, r3, #2
 800e74e:	440b      	add	r3, r1
 800e750:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e754:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e756:	4618      	mov	r0, r3
 800e758:	3714      	adds	r7, #20
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr

0800e762 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e762:	b580      	push	{r7, lr}
 800e764:	b084      	sub	sp, #16
 800e766:	af00      	add	r7, sp, #0
 800e768:	6078      	str	r0, [r7, #4]
 800e76a:	460b      	mov	r3, r1
 800e76c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e772:	2300      	movs	r3, #0
 800e774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e77c:	78fa      	ldrb	r2, [r7, #3]
 800e77e:	4611      	mov	r1, r2
 800e780:	4618      	mov	r0, r3
 800e782:	f7f4 fd3f 	bl	8003204 <HAL_PCD_SetAddress>
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	4618      	mov	r0, r3
 800e78e:	f000 f875 	bl	800e87c <USBD_Get_USB_Status>
 800e792:	4603      	mov	r3, r0
 800e794:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e796:	7bbb      	ldrb	r3, [r7, #14]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3710      	adds	r7, #16
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	60f8      	str	r0, [r7, #12]
 800e7a8:	607a      	str	r2, [r7, #4]
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e7be:	7af9      	ldrb	r1, [r7, #11]
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	f7f4 fe49 	bl	800345a <HAL_PCD_EP_Transmit>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 f854 	bl	800e87c <USBD_Get_USB_Status>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e7d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3718      	adds	r7, #24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b086      	sub	sp, #24
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	60f8      	str	r0, [r7, #12]
 800e7ea:	607a      	str	r2, [r7, #4]
 800e7ec:	603b      	str	r3, [r7, #0]
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e800:	7af9      	ldrb	r1, [r7, #11]
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	687a      	ldr	r2, [r7, #4]
 800e806:	f7f4 fdd5 	bl	80033b4 <HAL_PCD_EP_Receive>
 800e80a:	4603      	mov	r3, r0
 800e80c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	4618      	mov	r0, r3
 800e812:	f000 f833 	bl	800e87c <USBD_Get_USB_Status>
 800e816:	4603      	mov	r3, r0
 800e818:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e81a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	3718      	adds	r7, #24
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	460b      	mov	r3, r1
 800e82e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e836:	78fa      	ldrb	r2, [r7, #3]
 800e838:	4611      	mov	r1, r2
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7f4 fdf5 	bl	800342a <HAL_PCD_EP_GetRxCount>
 800e840:	4603      	mov	r3, r0
}
 800e842:	4618      	mov	r0, r3
 800e844:	3708      	adds	r7, #8
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
	...

0800e84c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b083      	sub	sp, #12
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e854:	4b03      	ldr	r3, [pc, #12]	@ (800e864 <USBD_static_malloc+0x18>)
}
 800e856:	4618      	mov	r0, r3
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr
 800e862:	bf00      	nop
 800e864:	200032d4 	.word	0x200032d4

0800e868 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e868:	b480      	push	{r7}
 800e86a:	b083      	sub	sp, #12
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]

}
 800e870:	bf00      	nop
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	4603      	mov	r3, r0
 800e884:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e886:	2300      	movs	r3, #0
 800e888:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e88a:	79fb      	ldrb	r3, [r7, #7]
 800e88c:	2b03      	cmp	r3, #3
 800e88e:	d817      	bhi.n	800e8c0 <USBD_Get_USB_Status+0x44>
 800e890:	a201      	add	r2, pc, #4	@ (adr r2, 800e898 <USBD_Get_USB_Status+0x1c>)
 800e892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e896:	bf00      	nop
 800e898:	0800e8a9 	.word	0x0800e8a9
 800e89c:	0800e8af 	.word	0x0800e8af
 800e8a0:	0800e8b5 	.word	0x0800e8b5
 800e8a4:	0800e8bb 	.word	0x0800e8bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e8ac:	e00b      	b.n	800e8c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8ae:	2303      	movs	r3, #3
 800e8b0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b2:	e008      	b.n	800e8c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8b8:	e005      	b.n	800e8c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	73fb      	strb	r3, [r7, #15]
    break;
 800e8be:	e002      	b.n	800e8c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e8c0:	2303      	movs	r3, #3
 800e8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e8c4:	bf00      	nop
  }
  return usb_status;
 800e8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3714      	adds	r7, #20
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <siprintf>:
 800e8d4:	b40e      	push	{r1, r2, r3}
 800e8d6:	b500      	push	{lr}
 800e8d8:	b09c      	sub	sp, #112	@ 0x70
 800e8da:	ab1d      	add	r3, sp, #116	@ 0x74
 800e8dc:	9002      	str	r0, [sp, #8]
 800e8de:	9006      	str	r0, [sp, #24]
 800e8e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e8e4:	4809      	ldr	r0, [pc, #36]	@ (800e90c <siprintf+0x38>)
 800e8e6:	9107      	str	r1, [sp, #28]
 800e8e8:	9104      	str	r1, [sp, #16]
 800e8ea:	4909      	ldr	r1, [pc, #36]	@ (800e910 <siprintf+0x3c>)
 800e8ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8f0:	9105      	str	r1, [sp, #20]
 800e8f2:	6800      	ldr	r0, [r0, #0]
 800e8f4:	9301      	str	r3, [sp, #4]
 800e8f6:	a902      	add	r1, sp, #8
 800e8f8:	f000 f99c 	bl	800ec34 <_svfiprintf_r>
 800e8fc:	9b02      	ldr	r3, [sp, #8]
 800e8fe:	2200      	movs	r2, #0
 800e900:	701a      	strb	r2, [r3, #0]
 800e902:	b01c      	add	sp, #112	@ 0x70
 800e904:	f85d eb04 	ldr.w	lr, [sp], #4
 800e908:	b003      	add	sp, #12
 800e90a:	4770      	bx	lr
 800e90c:	20000114 	.word	0x20000114
 800e910:	ffff0208 	.word	0xffff0208

0800e914 <memset>:
 800e914:	4402      	add	r2, r0
 800e916:	4603      	mov	r3, r0
 800e918:	4293      	cmp	r3, r2
 800e91a:	d100      	bne.n	800e91e <memset+0xa>
 800e91c:	4770      	bx	lr
 800e91e:	f803 1b01 	strb.w	r1, [r3], #1
 800e922:	e7f9      	b.n	800e918 <memset+0x4>

0800e924 <__errno>:
 800e924:	4b01      	ldr	r3, [pc, #4]	@ (800e92c <__errno+0x8>)
 800e926:	6818      	ldr	r0, [r3, #0]
 800e928:	4770      	bx	lr
 800e92a:	bf00      	nop
 800e92c:	20000114 	.word	0x20000114

0800e930 <__libc_init_array>:
 800e930:	b570      	push	{r4, r5, r6, lr}
 800e932:	4d0d      	ldr	r5, [pc, #52]	@ (800e968 <__libc_init_array+0x38>)
 800e934:	4c0d      	ldr	r4, [pc, #52]	@ (800e96c <__libc_init_array+0x3c>)
 800e936:	1b64      	subs	r4, r4, r5
 800e938:	10a4      	asrs	r4, r4, #2
 800e93a:	2600      	movs	r6, #0
 800e93c:	42a6      	cmp	r6, r4
 800e93e:	d109      	bne.n	800e954 <__libc_init_array+0x24>
 800e940:	4d0b      	ldr	r5, [pc, #44]	@ (800e970 <__libc_init_array+0x40>)
 800e942:	4c0c      	ldr	r4, [pc, #48]	@ (800e974 <__libc_init_array+0x44>)
 800e944:	f000 fc6e 	bl	800f224 <_init>
 800e948:	1b64      	subs	r4, r4, r5
 800e94a:	10a4      	asrs	r4, r4, #2
 800e94c:	2600      	movs	r6, #0
 800e94e:	42a6      	cmp	r6, r4
 800e950:	d105      	bne.n	800e95e <__libc_init_array+0x2e>
 800e952:	bd70      	pop	{r4, r5, r6, pc}
 800e954:	f855 3b04 	ldr.w	r3, [r5], #4
 800e958:	4798      	blx	r3
 800e95a:	3601      	adds	r6, #1
 800e95c:	e7ee      	b.n	800e93c <__libc_init_array+0xc>
 800e95e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e962:	4798      	blx	r3
 800e964:	3601      	adds	r6, #1
 800e966:	e7f2      	b.n	800e94e <__libc_init_array+0x1e>
 800e968:	0800f91c 	.word	0x0800f91c
 800e96c:	0800f91c 	.word	0x0800f91c
 800e970:	0800f91c 	.word	0x0800f91c
 800e974:	0800f920 	.word	0x0800f920

0800e978 <__retarget_lock_acquire_recursive>:
 800e978:	4770      	bx	lr

0800e97a <__retarget_lock_release_recursive>:
 800e97a:	4770      	bx	lr

0800e97c <strcpy>:
 800e97c:	4603      	mov	r3, r0
 800e97e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e982:	f803 2b01 	strb.w	r2, [r3], #1
 800e986:	2a00      	cmp	r2, #0
 800e988:	d1f9      	bne.n	800e97e <strcpy+0x2>
 800e98a:	4770      	bx	lr

0800e98c <_free_r>:
 800e98c:	b538      	push	{r3, r4, r5, lr}
 800e98e:	4605      	mov	r5, r0
 800e990:	2900      	cmp	r1, #0
 800e992:	d041      	beq.n	800ea18 <_free_r+0x8c>
 800e994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e998:	1f0c      	subs	r4, r1, #4
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	bfb8      	it	lt
 800e99e:	18e4      	addlt	r4, r4, r3
 800e9a0:	f000 f8e0 	bl	800eb64 <__malloc_lock>
 800e9a4:	4a1d      	ldr	r2, [pc, #116]	@ (800ea1c <_free_r+0x90>)
 800e9a6:	6813      	ldr	r3, [r2, #0]
 800e9a8:	b933      	cbnz	r3, 800e9b8 <_free_r+0x2c>
 800e9aa:	6063      	str	r3, [r4, #4]
 800e9ac:	6014      	str	r4, [r2, #0]
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9b4:	f000 b8dc 	b.w	800eb70 <__malloc_unlock>
 800e9b8:	42a3      	cmp	r3, r4
 800e9ba:	d908      	bls.n	800e9ce <_free_r+0x42>
 800e9bc:	6820      	ldr	r0, [r4, #0]
 800e9be:	1821      	adds	r1, r4, r0
 800e9c0:	428b      	cmp	r3, r1
 800e9c2:	bf01      	itttt	eq
 800e9c4:	6819      	ldreq	r1, [r3, #0]
 800e9c6:	685b      	ldreq	r3, [r3, #4]
 800e9c8:	1809      	addeq	r1, r1, r0
 800e9ca:	6021      	streq	r1, [r4, #0]
 800e9cc:	e7ed      	b.n	800e9aa <_free_r+0x1e>
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	b10b      	cbz	r3, 800e9d8 <_free_r+0x4c>
 800e9d4:	42a3      	cmp	r3, r4
 800e9d6:	d9fa      	bls.n	800e9ce <_free_r+0x42>
 800e9d8:	6811      	ldr	r1, [r2, #0]
 800e9da:	1850      	adds	r0, r2, r1
 800e9dc:	42a0      	cmp	r0, r4
 800e9de:	d10b      	bne.n	800e9f8 <_free_r+0x6c>
 800e9e0:	6820      	ldr	r0, [r4, #0]
 800e9e2:	4401      	add	r1, r0
 800e9e4:	1850      	adds	r0, r2, r1
 800e9e6:	4283      	cmp	r3, r0
 800e9e8:	6011      	str	r1, [r2, #0]
 800e9ea:	d1e0      	bne.n	800e9ae <_free_r+0x22>
 800e9ec:	6818      	ldr	r0, [r3, #0]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	6053      	str	r3, [r2, #4]
 800e9f2:	4408      	add	r0, r1
 800e9f4:	6010      	str	r0, [r2, #0]
 800e9f6:	e7da      	b.n	800e9ae <_free_r+0x22>
 800e9f8:	d902      	bls.n	800ea00 <_free_r+0x74>
 800e9fa:	230c      	movs	r3, #12
 800e9fc:	602b      	str	r3, [r5, #0]
 800e9fe:	e7d6      	b.n	800e9ae <_free_r+0x22>
 800ea00:	6820      	ldr	r0, [r4, #0]
 800ea02:	1821      	adds	r1, r4, r0
 800ea04:	428b      	cmp	r3, r1
 800ea06:	bf04      	itt	eq
 800ea08:	6819      	ldreq	r1, [r3, #0]
 800ea0a:	685b      	ldreq	r3, [r3, #4]
 800ea0c:	6063      	str	r3, [r4, #4]
 800ea0e:	bf04      	itt	eq
 800ea10:	1809      	addeq	r1, r1, r0
 800ea12:	6021      	streq	r1, [r4, #0]
 800ea14:	6054      	str	r4, [r2, #4]
 800ea16:	e7ca      	b.n	800e9ae <_free_r+0x22>
 800ea18:	bd38      	pop	{r3, r4, r5, pc}
 800ea1a:	bf00      	nop
 800ea1c:	200036a0 	.word	0x200036a0

0800ea20 <sbrk_aligned>:
 800ea20:	b570      	push	{r4, r5, r6, lr}
 800ea22:	4e0f      	ldr	r6, [pc, #60]	@ (800ea60 <sbrk_aligned+0x40>)
 800ea24:	460c      	mov	r4, r1
 800ea26:	6831      	ldr	r1, [r6, #0]
 800ea28:	4605      	mov	r5, r0
 800ea2a:	b911      	cbnz	r1, 800ea32 <sbrk_aligned+0x12>
 800ea2c:	f000 fba6 	bl	800f17c <_sbrk_r>
 800ea30:	6030      	str	r0, [r6, #0]
 800ea32:	4621      	mov	r1, r4
 800ea34:	4628      	mov	r0, r5
 800ea36:	f000 fba1 	bl	800f17c <_sbrk_r>
 800ea3a:	1c43      	adds	r3, r0, #1
 800ea3c:	d103      	bne.n	800ea46 <sbrk_aligned+0x26>
 800ea3e:	f04f 34ff 	mov.w	r4, #4294967295
 800ea42:	4620      	mov	r0, r4
 800ea44:	bd70      	pop	{r4, r5, r6, pc}
 800ea46:	1cc4      	adds	r4, r0, #3
 800ea48:	f024 0403 	bic.w	r4, r4, #3
 800ea4c:	42a0      	cmp	r0, r4
 800ea4e:	d0f8      	beq.n	800ea42 <sbrk_aligned+0x22>
 800ea50:	1a21      	subs	r1, r4, r0
 800ea52:	4628      	mov	r0, r5
 800ea54:	f000 fb92 	bl	800f17c <_sbrk_r>
 800ea58:	3001      	adds	r0, #1
 800ea5a:	d1f2      	bne.n	800ea42 <sbrk_aligned+0x22>
 800ea5c:	e7ef      	b.n	800ea3e <sbrk_aligned+0x1e>
 800ea5e:	bf00      	nop
 800ea60:	2000369c 	.word	0x2000369c

0800ea64 <_malloc_r>:
 800ea64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea68:	1ccd      	adds	r5, r1, #3
 800ea6a:	f025 0503 	bic.w	r5, r5, #3
 800ea6e:	3508      	adds	r5, #8
 800ea70:	2d0c      	cmp	r5, #12
 800ea72:	bf38      	it	cc
 800ea74:	250c      	movcc	r5, #12
 800ea76:	2d00      	cmp	r5, #0
 800ea78:	4606      	mov	r6, r0
 800ea7a:	db01      	blt.n	800ea80 <_malloc_r+0x1c>
 800ea7c:	42a9      	cmp	r1, r5
 800ea7e:	d904      	bls.n	800ea8a <_malloc_r+0x26>
 800ea80:	230c      	movs	r3, #12
 800ea82:	6033      	str	r3, [r6, #0]
 800ea84:	2000      	movs	r0, #0
 800ea86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eb60 <_malloc_r+0xfc>
 800ea8e:	f000 f869 	bl	800eb64 <__malloc_lock>
 800ea92:	f8d8 3000 	ldr.w	r3, [r8]
 800ea96:	461c      	mov	r4, r3
 800ea98:	bb44      	cbnz	r4, 800eaec <_malloc_r+0x88>
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	f7ff ffbf 	bl	800ea20 <sbrk_aligned>
 800eaa2:	1c43      	adds	r3, r0, #1
 800eaa4:	4604      	mov	r4, r0
 800eaa6:	d158      	bne.n	800eb5a <_malloc_r+0xf6>
 800eaa8:	f8d8 4000 	ldr.w	r4, [r8]
 800eaac:	4627      	mov	r7, r4
 800eaae:	2f00      	cmp	r7, #0
 800eab0:	d143      	bne.n	800eb3a <_malloc_r+0xd6>
 800eab2:	2c00      	cmp	r4, #0
 800eab4:	d04b      	beq.n	800eb4e <_malloc_r+0xea>
 800eab6:	6823      	ldr	r3, [r4, #0]
 800eab8:	4639      	mov	r1, r7
 800eaba:	4630      	mov	r0, r6
 800eabc:	eb04 0903 	add.w	r9, r4, r3
 800eac0:	f000 fb5c 	bl	800f17c <_sbrk_r>
 800eac4:	4581      	cmp	r9, r0
 800eac6:	d142      	bne.n	800eb4e <_malloc_r+0xea>
 800eac8:	6821      	ldr	r1, [r4, #0]
 800eaca:	1a6d      	subs	r5, r5, r1
 800eacc:	4629      	mov	r1, r5
 800eace:	4630      	mov	r0, r6
 800ead0:	f7ff ffa6 	bl	800ea20 <sbrk_aligned>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d03a      	beq.n	800eb4e <_malloc_r+0xea>
 800ead8:	6823      	ldr	r3, [r4, #0]
 800eada:	442b      	add	r3, r5
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	f8d8 3000 	ldr.w	r3, [r8]
 800eae2:	685a      	ldr	r2, [r3, #4]
 800eae4:	bb62      	cbnz	r2, 800eb40 <_malloc_r+0xdc>
 800eae6:	f8c8 7000 	str.w	r7, [r8]
 800eaea:	e00f      	b.n	800eb0c <_malloc_r+0xa8>
 800eaec:	6822      	ldr	r2, [r4, #0]
 800eaee:	1b52      	subs	r2, r2, r5
 800eaf0:	d420      	bmi.n	800eb34 <_malloc_r+0xd0>
 800eaf2:	2a0b      	cmp	r2, #11
 800eaf4:	d917      	bls.n	800eb26 <_malloc_r+0xc2>
 800eaf6:	1961      	adds	r1, r4, r5
 800eaf8:	42a3      	cmp	r3, r4
 800eafa:	6025      	str	r5, [r4, #0]
 800eafc:	bf18      	it	ne
 800eafe:	6059      	strne	r1, [r3, #4]
 800eb00:	6863      	ldr	r3, [r4, #4]
 800eb02:	bf08      	it	eq
 800eb04:	f8c8 1000 	streq.w	r1, [r8]
 800eb08:	5162      	str	r2, [r4, r5]
 800eb0a:	604b      	str	r3, [r1, #4]
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	f000 f82f 	bl	800eb70 <__malloc_unlock>
 800eb12:	f104 000b 	add.w	r0, r4, #11
 800eb16:	1d23      	adds	r3, r4, #4
 800eb18:	f020 0007 	bic.w	r0, r0, #7
 800eb1c:	1ac2      	subs	r2, r0, r3
 800eb1e:	bf1c      	itt	ne
 800eb20:	1a1b      	subne	r3, r3, r0
 800eb22:	50a3      	strne	r3, [r4, r2]
 800eb24:	e7af      	b.n	800ea86 <_malloc_r+0x22>
 800eb26:	6862      	ldr	r2, [r4, #4]
 800eb28:	42a3      	cmp	r3, r4
 800eb2a:	bf0c      	ite	eq
 800eb2c:	f8c8 2000 	streq.w	r2, [r8]
 800eb30:	605a      	strne	r2, [r3, #4]
 800eb32:	e7eb      	b.n	800eb0c <_malloc_r+0xa8>
 800eb34:	4623      	mov	r3, r4
 800eb36:	6864      	ldr	r4, [r4, #4]
 800eb38:	e7ae      	b.n	800ea98 <_malloc_r+0x34>
 800eb3a:	463c      	mov	r4, r7
 800eb3c:	687f      	ldr	r7, [r7, #4]
 800eb3e:	e7b6      	b.n	800eaae <_malloc_r+0x4a>
 800eb40:	461a      	mov	r2, r3
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	42a3      	cmp	r3, r4
 800eb46:	d1fb      	bne.n	800eb40 <_malloc_r+0xdc>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	6053      	str	r3, [r2, #4]
 800eb4c:	e7de      	b.n	800eb0c <_malloc_r+0xa8>
 800eb4e:	230c      	movs	r3, #12
 800eb50:	6033      	str	r3, [r6, #0]
 800eb52:	4630      	mov	r0, r6
 800eb54:	f000 f80c 	bl	800eb70 <__malloc_unlock>
 800eb58:	e794      	b.n	800ea84 <_malloc_r+0x20>
 800eb5a:	6005      	str	r5, [r0, #0]
 800eb5c:	e7d6      	b.n	800eb0c <_malloc_r+0xa8>
 800eb5e:	bf00      	nop
 800eb60:	200036a0 	.word	0x200036a0

0800eb64 <__malloc_lock>:
 800eb64:	4801      	ldr	r0, [pc, #4]	@ (800eb6c <__malloc_lock+0x8>)
 800eb66:	f7ff bf07 	b.w	800e978 <__retarget_lock_acquire_recursive>
 800eb6a:	bf00      	nop
 800eb6c:	20003698 	.word	0x20003698

0800eb70 <__malloc_unlock>:
 800eb70:	4801      	ldr	r0, [pc, #4]	@ (800eb78 <__malloc_unlock+0x8>)
 800eb72:	f7ff bf02 	b.w	800e97a <__retarget_lock_release_recursive>
 800eb76:	bf00      	nop
 800eb78:	20003698 	.word	0x20003698

0800eb7c <__ssputs_r>:
 800eb7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb80:	688e      	ldr	r6, [r1, #8]
 800eb82:	461f      	mov	r7, r3
 800eb84:	42be      	cmp	r6, r7
 800eb86:	680b      	ldr	r3, [r1, #0]
 800eb88:	4682      	mov	sl, r0
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	4690      	mov	r8, r2
 800eb8e:	d82d      	bhi.n	800ebec <__ssputs_r+0x70>
 800eb90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800eb98:	d026      	beq.n	800ebe8 <__ssputs_r+0x6c>
 800eb9a:	6965      	ldr	r5, [r4, #20]
 800eb9c:	6909      	ldr	r1, [r1, #16]
 800eb9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eba2:	eba3 0901 	sub.w	r9, r3, r1
 800eba6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebaa:	1c7b      	adds	r3, r7, #1
 800ebac:	444b      	add	r3, r9
 800ebae:	106d      	asrs	r5, r5, #1
 800ebb0:	429d      	cmp	r5, r3
 800ebb2:	bf38      	it	cc
 800ebb4:	461d      	movcc	r5, r3
 800ebb6:	0553      	lsls	r3, r2, #21
 800ebb8:	d527      	bpl.n	800ec0a <__ssputs_r+0x8e>
 800ebba:	4629      	mov	r1, r5
 800ebbc:	f7ff ff52 	bl	800ea64 <_malloc_r>
 800ebc0:	4606      	mov	r6, r0
 800ebc2:	b360      	cbz	r0, 800ec1e <__ssputs_r+0xa2>
 800ebc4:	6921      	ldr	r1, [r4, #16]
 800ebc6:	464a      	mov	r2, r9
 800ebc8:	f000 fae8 	bl	800f19c <memcpy>
 800ebcc:	89a3      	ldrh	r3, [r4, #12]
 800ebce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ebd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ebd6:	81a3      	strh	r3, [r4, #12]
 800ebd8:	6126      	str	r6, [r4, #16]
 800ebda:	6165      	str	r5, [r4, #20]
 800ebdc:	444e      	add	r6, r9
 800ebde:	eba5 0509 	sub.w	r5, r5, r9
 800ebe2:	6026      	str	r6, [r4, #0]
 800ebe4:	60a5      	str	r5, [r4, #8]
 800ebe6:	463e      	mov	r6, r7
 800ebe8:	42be      	cmp	r6, r7
 800ebea:	d900      	bls.n	800ebee <__ssputs_r+0x72>
 800ebec:	463e      	mov	r6, r7
 800ebee:	6820      	ldr	r0, [r4, #0]
 800ebf0:	4632      	mov	r2, r6
 800ebf2:	4641      	mov	r1, r8
 800ebf4:	f000 faa8 	bl	800f148 <memmove>
 800ebf8:	68a3      	ldr	r3, [r4, #8]
 800ebfa:	1b9b      	subs	r3, r3, r6
 800ebfc:	60a3      	str	r3, [r4, #8]
 800ebfe:	6823      	ldr	r3, [r4, #0]
 800ec00:	4433      	add	r3, r6
 800ec02:	6023      	str	r3, [r4, #0]
 800ec04:	2000      	movs	r0, #0
 800ec06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0a:	462a      	mov	r2, r5
 800ec0c:	f000 fad4 	bl	800f1b8 <_realloc_r>
 800ec10:	4606      	mov	r6, r0
 800ec12:	2800      	cmp	r0, #0
 800ec14:	d1e0      	bne.n	800ebd8 <__ssputs_r+0x5c>
 800ec16:	6921      	ldr	r1, [r4, #16]
 800ec18:	4650      	mov	r0, sl
 800ec1a:	f7ff feb7 	bl	800e98c <_free_r>
 800ec1e:	230c      	movs	r3, #12
 800ec20:	f8ca 3000 	str.w	r3, [sl]
 800ec24:	89a3      	ldrh	r3, [r4, #12]
 800ec26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec2a:	81a3      	strh	r3, [r4, #12]
 800ec2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec30:	e7e9      	b.n	800ec06 <__ssputs_r+0x8a>
	...

0800ec34 <_svfiprintf_r>:
 800ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec38:	4698      	mov	r8, r3
 800ec3a:	898b      	ldrh	r3, [r1, #12]
 800ec3c:	061b      	lsls	r3, r3, #24
 800ec3e:	b09d      	sub	sp, #116	@ 0x74
 800ec40:	4607      	mov	r7, r0
 800ec42:	460d      	mov	r5, r1
 800ec44:	4614      	mov	r4, r2
 800ec46:	d510      	bpl.n	800ec6a <_svfiprintf_r+0x36>
 800ec48:	690b      	ldr	r3, [r1, #16]
 800ec4a:	b973      	cbnz	r3, 800ec6a <_svfiprintf_r+0x36>
 800ec4c:	2140      	movs	r1, #64	@ 0x40
 800ec4e:	f7ff ff09 	bl	800ea64 <_malloc_r>
 800ec52:	6028      	str	r0, [r5, #0]
 800ec54:	6128      	str	r0, [r5, #16]
 800ec56:	b930      	cbnz	r0, 800ec66 <_svfiprintf_r+0x32>
 800ec58:	230c      	movs	r3, #12
 800ec5a:	603b      	str	r3, [r7, #0]
 800ec5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec60:	b01d      	add	sp, #116	@ 0x74
 800ec62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec66:	2340      	movs	r3, #64	@ 0x40
 800ec68:	616b      	str	r3, [r5, #20]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec6e:	2320      	movs	r3, #32
 800ec70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ec74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec78:	2330      	movs	r3, #48	@ 0x30
 800ec7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ee18 <_svfiprintf_r+0x1e4>
 800ec7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ec82:	f04f 0901 	mov.w	r9, #1
 800ec86:	4623      	mov	r3, r4
 800ec88:	469a      	mov	sl, r3
 800ec8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec8e:	b10a      	cbz	r2, 800ec94 <_svfiprintf_r+0x60>
 800ec90:	2a25      	cmp	r2, #37	@ 0x25
 800ec92:	d1f9      	bne.n	800ec88 <_svfiprintf_r+0x54>
 800ec94:	ebba 0b04 	subs.w	fp, sl, r4
 800ec98:	d00b      	beq.n	800ecb2 <_svfiprintf_r+0x7e>
 800ec9a:	465b      	mov	r3, fp
 800ec9c:	4622      	mov	r2, r4
 800ec9e:	4629      	mov	r1, r5
 800eca0:	4638      	mov	r0, r7
 800eca2:	f7ff ff6b 	bl	800eb7c <__ssputs_r>
 800eca6:	3001      	adds	r0, #1
 800eca8:	f000 80a7 	beq.w	800edfa <_svfiprintf_r+0x1c6>
 800ecac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecae:	445a      	add	r2, fp
 800ecb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f000 809f 	beq.w	800edfa <_svfiprintf_r+0x1c6>
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ecc6:	f10a 0a01 	add.w	sl, sl, #1
 800ecca:	9304      	str	r3, [sp, #16]
 800eccc:	9307      	str	r3, [sp, #28]
 800ecce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ecd2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecd4:	4654      	mov	r4, sl
 800ecd6:	2205      	movs	r2, #5
 800ecd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecdc:	484e      	ldr	r0, [pc, #312]	@ (800ee18 <_svfiprintf_r+0x1e4>)
 800ecde:	f7f1 fa87 	bl	80001f0 <memchr>
 800ece2:	9a04      	ldr	r2, [sp, #16]
 800ece4:	b9d8      	cbnz	r0, 800ed1e <_svfiprintf_r+0xea>
 800ece6:	06d0      	lsls	r0, r2, #27
 800ece8:	bf44      	itt	mi
 800ecea:	2320      	movmi	r3, #32
 800ecec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecf0:	0711      	lsls	r1, r2, #28
 800ecf2:	bf44      	itt	mi
 800ecf4:	232b      	movmi	r3, #43	@ 0x2b
 800ecf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ecfa:	f89a 3000 	ldrb.w	r3, [sl]
 800ecfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed00:	d015      	beq.n	800ed2e <_svfiprintf_r+0xfa>
 800ed02:	9a07      	ldr	r2, [sp, #28]
 800ed04:	4654      	mov	r4, sl
 800ed06:	2000      	movs	r0, #0
 800ed08:	f04f 0c0a 	mov.w	ip, #10
 800ed0c:	4621      	mov	r1, r4
 800ed0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed12:	3b30      	subs	r3, #48	@ 0x30
 800ed14:	2b09      	cmp	r3, #9
 800ed16:	d94b      	bls.n	800edb0 <_svfiprintf_r+0x17c>
 800ed18:	b1b0      	cbz	r0, 800ed48 <_svfiprintf_r+0x114>
 800ed1a:	9207      	str	r2, [sp, #28]
 800ed1c:	e014      	b.n	800ed48 <_svfiprintf_r+0x114>
 800ed1e:	eba0 0308 	sub.w	r3, r0, r8
 800ed22:	fa09 f303 	lsl.w	r3, r9, r3
 800ed26:	4313      	orrs	r3, r2
 800ed28:	9304      	str	r3, [sp, #16]
 800ed2a:	46a2      	mov	sl, r4
 800ed2c:	e7d2      	b.n	800ecd4 <_svfiprintf_r+0xa0>
 800ed2e:	9b03      	ldr	r3, [sp, #12]
 800ed30:	1d19      	adds	r1, r3, #4
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	9103      	str	r1, [sp, #12]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	bfbb      	ittet	lt
 800ed3a:	425b      	neglt	r3, r3
 800ed3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ed40:	9307      	strge	r3, [sp, #28]
 800ed42:	9307      	strlt	r3, [sp, #28]
 800ed44:	bfb8      	it	lt
 800ed46:	9204      	strlt	r2, [sp, #16]
 800ed48:	7823      	ldrb	r3, [r4, #0]
 800ed4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed4c:	d10a      	bne.n	800ed64 <_svfiprintf_r+0x130>
 800ed4e:	7863      	ldrb	r3, [r4, #1]
 800ed50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed52:	d132      	bne.n	800edba <_svfiprintf_r+0x186>
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	1d1a      	adds	r2, r3, #4
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	9203      	str	r2, [sp, #12]
 800ed5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ed60:	3402      	adds	r4, #2
 800ed62:	9305      	str	r3, [sp, #20]
 800ed64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee28 <_svfiprintf_r+0x1f4>
 800ed68:	7821      	ldrb	r1, [r4, #0]
 800ed6a:	2203      	movs	r2, #3
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	f7f1 fa3f 	bl	80001f0 <memchr>
 800ed72:	b138      	cbz	r0, 800ed84 <_svfiprintf_r+0x150>
 800ed74:	9b04      	ldr	r3, [sp, #16]
 800ed76:	eba0 000a 	sub.w	r0, r0, sl
 800ed7a:	2240      	movs	r2, #64	@ 0x40
 800ed7c:	4082      	lsls	r2, r0
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	3401      	adds	r4, #1
 800ed82:	9304      	str	r3, [sp, #16]
 800ed84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed88:	4824      	ldr	r0, [pc, #144]	@ (800ee1c <_svfiprintf_r+0x1e8>)
 800ed8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ed8e:	2206      	movs	r2, #6
 800ed90:	f7f1 fa2e 	bl	80001f0 <memchr>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d036      	beq.n	800ee06 <_svfiprintf_r+0x1d2>
 800ed98:	4b21      	ldr	r3, [pc, #132]	@ (800ee20 <_svfiprintf_r+0x1ec>)
 800ed9a:	bb1b      	cbnz	r3, 800ede4 <_svfiprintf_r+0x1b0>
 800ed9c:	9b03      	ldr	r3, [sp, #12]
 800ed9e:	3307      	adds	r3, #7
 800eda0:	f023 0307 	bic.w	r3, r3, #7
 800eda4:	3308      	adds	r3, #8
 800eda6:	9303      	str	r3, [sp, #12]
 800eda8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edaa:	4433      	add	r3, r6
 800edac:	9309      	str	r3, [sp, #36]	@ 0x24
 800edae:	e76a      	b.n	800ec86 <_svfiprintf_r+0x52>
 800edb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800edb4:	460c      	mov	r4, r1
 800edb6:	2001      	movs	r0, #1
 800edb8:	e7a8      	b.n	800ed0c <_svfiprintf_r+0xd8>
 800edba:	2300      	movs	r3, #0
 800edbc:	3401      	adds	r4, #1
 800edbe:	9305      	str	r3, [sp, #20]
 800edc0:	4619      	mov	r1, r3
 800edc2:	f04f 0c0a 	mov.w	ip, #10
 800edc6:	4620      	mov	r0, r4
 800edc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edcc:	3a30      	subs	r2, #48	@ 0x30
 800edce:	2a09      	cmp	r2, #9
 800edd0:	d903      	bls.n	800edda <_svfiprintf_r+0x1a6>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0c6      	beq.n	800ed64 <_svfiprintf_r+0x130>
 800edd6:	9105      	str	r1, [sp, #20]
 800edd8:	e7c4      	b.n	800ed64 <_svfiprintf_r+0x130>
 800edda:	fb0c 2101 	mla	r1, ip, r1, r2
 800edde:	4604      	mov	r4, r0
 800ede0:	2301      	movs	r3, #1
 800ede2:	e7f0      	b.n	800edc6 <_svfiprintf_r+0x192>
 800ede4:	ab03      	add	r3, sp, #12
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	462a      	mov	r2, r5
 800edea:	4b0e      	ldr	r3, [pc, #56]	@ (800ee24 <_svfiprintf_r+0x1f0>)
 800edec:	a904      	add	r1, sp, #16
 800edee:	4638      	mov	r0, r7
 800edf0:	f3af 8000 	nop.w
 800edf4:	1c42      	adds	r2, r0, #1
 800edf6:	4606      	mov	r6, r0
 800edf8:	d1d6      	bne.n	800eda8 <_svfiprintf_r+0x174>
 800edfa:	89ab      	ldrh	r3, [r5, #12]
 800edfc:	065b      	lsls	r3, r3, #25
 800edfe:	f53f af2d 	bmi.w	800ec5c <_svfiprintf_r+0x28>
 800ee02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee04:	e72c      	b.n	800ec60 <_svfiprintf_r+0x2c>
 800ee06:	ab03      	add	r3, sp, #12
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	462a      	mov	r2, r5
 800ee0c:	4b05      	ldr	r3, [pc, #20]	@ (800ee24 <_svfiprintf_r+0x1f0>)
 800ee0e:	a904      	add	r1, sp, #16
 800ee10:	4638      	mov	r0, r7
 800ee12:	f000 f879 	bl	800ef08 <_printf_i>
 800ee16:	e7ed      	b.n	800edf4 <_svfiprintf_r+0x1c0>
 800ee18:	0800f8e0 	.word	0x0800f8e0
 800ee1c:	0800f8ea 	.word	0x0800f8ea
 800ee20:	00000000 	.word	0x00000000
 800ee24:	0800eb7d 	.word	0x0800eb7d
 800ee28:	0800f8e6 	.word	0x0800f8e6

0800ee2c <_printf_common>:
 800ee2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee30:	4616      	mov	r6, r2
 800ee32:	4698      	mov	r8, r3
 800ee34:	688a      	ldr	r2, [r1, #8]
 800ee36:	690b      	ldr	r3, [r1, #16]
 800ee38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	bfb8      	it	lt
 800ee40:	4613      	movlt	r3, r2
 800ee42:	6033      	str	r3, [r6, #0]
 800ee44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ee48:	4607      	mov	r7, r0
 800ee4a:	460c      	mov	r4, r1
 800ee4c:	b10a      	cbz	r2, 800ee52 <_printf_common+0x26>
 800ee4e:	3301      	adds	r3, #1
 800ee50:	6033      	str	r3, [r6, #0]
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	0699      	lsls	r1, r3, #26
 800ee56:	bf42      	ittt	mi
 800ee58:	6833      	ldrmi	r3, [r6, #0]
 800ee5a:	3302      	addmi	r3, #2
 800ee5c:	6033      	strmi	r3, [r6, #0]
 800ee5e:	6825      	ldr	r5, [r4, #0]
 800ee60:	f015 0506 	ands.w	r5, r5, #6
 800ee64:	d106      	bne.n	800ee74 <_printf_common+0x48>
 800ee66:	f104 0a19 	add.w	sl, r4, #25
 800ee6a:	68e3      	ldr	r3, [r4, #12]
 800ee6c:	6832      	ldr	r2, [r6, #0]
 800ee6e:	1a9b      	subs	r3, r3, r2
 800ee70:	42ab      	cmp	r3, r5
 800ee72:	dc26      	bgt.n	800eec2 <_printf_common+0x96>
 800ee74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ee78:	6822      	ldr	r2, [r4, #0]
 800ee7a:	3b00      	subs	r3, #0
 800ee7c:	bf18      	it	ne
 800ee7e:	2301      	movne	r3, #1
 800ee80:	0692      	lsls	r2, r2, #26
 800ee82:	d42b      	bmi.n	800eedc <_printf_common+0xb0>
 800ee84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ee88:	4641      	mov	r1, r8
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	47c8      	blx	r9
 800ee8e:	3001      	adds	r0, #1
 800ee90:	d01e      	beq.n	800eed0 <_printf_common+0xa4>
 800ee92:	6823      	ldr	r3, [r4, #0]
 800ee94:	6922      	ldr	r2, [r4, #16]
 800ee96:	f003 0306 	and.w	r3, r3, #6
 800ee9a:	2b04      	cmp	r3, #4
 800ee9c:	bf02      	ittt	eq
 800ee9e:	68e5      	ldreq	r5, [r4, #12]
 800eea0:	6833      	ldreq	r3, [r6, #0]
 800eea2:	1aed      	subeq	r5, r5, r3
 800eea4:	68a3      	ldr	r3, [r4, #8]
 800eea6:	bf0c      	ite	eq
 800eea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eeac:	2500      	movne	r5, #0
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	bfc4      	itt	gt
 800eeb2:	1a9b      	subgt	r3, r3, r2
 800eeb4:	18ed      	addgt	r5, r5, r3
 800eeb6:	2600      	movs	r6, #0
 800eeb8:	341a      	adds	r4, #26
 800eeba:	42b5      	cmp	r5, r6
 800eebc:	d11a      	bne.n	800eef4 <_printf_common+0xc8>
 800eebe:	2000      	movs	r0, #0
 800eec0:	e008      	b.n	800eed4 <_printf_common+0xa8>
 800eec2:	2301      	movs	r3, #1
 800eec4:	4652      	mov	r2, sl
 800eec6:	4641      	mov	r1, r8
 800eec8:	4638      	mov	r0, r7
 800eeca:	47c8      	blx	r9
 800eecc:	3001      	adds	r0, #1
 800eece:	d103      	bne.n	800eed8 <_printf_common+0xac>
 800eed0:	f04f 30ff 	mov.w	r0, #4294967295
 800eed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eed8:	3501      	adds	r5, #1
 800eeda:	e7c6      	b.n	800ee6a <_printf_common+0x3e>
 800eedc:	18e1      	adds	r1, r4, r3
 800eede:	1c5a      	adds	r2, r3, #1
 800eee0:	2030      	movs	r0, #48	@ 0x30
 800eee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eee6:	4422      	add	r2, r4
 800eee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eeec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eef0:	3302      	adds	r3, #2
 800eef2:	e7c7      	b.n	800ee84 <_printf_common+0x58>
 800eef4:	2301      	movs	r3, #1
 800eef6:	4622      	mov	r2, r4
 800eef8:	4641      	mov	r1, r8
 800eefa:	4638      	mov	r0, r7
 800eefc:	47c8      	blx	r9
 800eefe:	3001      	adds	r0, #1
 800ef00:	d0e6      	beq.n	800eed0 <_printf_common+0xa4>
 800ef02:	3601      	adds	r6, #1
 800ef04:	e7d9      	b.n	800eeba <_printf_common+0x8e>
	...

0800ef08 <_printf_i>:
 800ef08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef0c:	7e0f      	ldrb	r7, [r1, #24]
 800ef0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ef10:	2f78      	cmp	r7, #120	@ 0x78
 800ef12:	4691      	mov	r9, r2
 800ef14:	4680      	mov	r8, r0
 800ef16:	460c      	mov	r4, r1
 800ef18:	469a      	mov	sl, r3
 800ef1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ef1e:	d807      	bhi.n	800ef30 <_printf_i+0x28>
 800ef20:	2f62      	cmp	r7, #98	@ 0x62
 800ef22:	d80a      	bhi.n	800ef3a <_printf_i+0x32>
 800ef24:	2f00      	cmp	r7, #0
 800ef26:	f000 80d2 	beq.w	800f0ce <_printf_i+0x1c6>
 800ef2a:	2f58      	cmp	r7, #88	@ 0x58
 800ef2c:	f000 80b9 	beq.w	800f0a2 <_printf_i+0x19a>
 800ef30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ef34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ef38:	e03a      	b.n	800efb0 <_printf_i+0xa8>
 800ef3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ef3e:	2b15      	cmp	r3, #21
 800ef40:	d8f6      	bhi.n	800ef30 <_printf_i+0x28>
 800ef42:	a101      	add	r1, pc, #4	@ (adr r1, 800ef48 <_printf_i+0x40>)
 800ef44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef48:	0800efa1 	.word	0x0800efa1
 800ef4c:	0800efb5 	.word	0x0800efb5
 800ef50:	0800ef31 	.word	0x0800ef31
 800ef54:	0800ef31 	.word	0x0800ef31
 800ef58:	0800ef31 	.word	0x0800ef31
 800ef5c:	0800ef31 	.word	0x0800ef31
 800ef60:	0800efb5 	.word	0x0800efb5
 800ef64:	0800ef31 	.word	0x0800ef31
 800ef68:	0800ef31 	.word	0x0800ef31
 800ef6c:	0800ef31 	.word	0x0800ef31
 800ef70:	0800ef31 	.word	0x0800ef31
 800ef74:	0800f0b5 	.word	0x0800f0b5
 800ef78:	0800efdf 	.word	0x0800efdf
 800ef7c:	0800f06f 	.word	0x0800f06f
 800ef80:	0800ef31 	.word	0x0800ef31
 800ef84:	0800ef31 	.word	0x0800ef31
 800ef88:	0800f0d7 	.word	0x0800f0d7
 800ef8c:	0800ef31 	.word	0x0800ef31
 800ef90:	0800efdf 	.word	0x0800efdf
 800ef94:	0800ef31 	.word	0x0800ef31
 800ef98:	0800ef31 	.word	0x0800ef31
 800ef9c:	0800f077 	.word	0x0800f077
 800efa0:	6833      	ldr	r3, [r6, #0]
 800efa2:	1d1a      	adds	r2, r3, #4
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	6032      	str	r2, [r6, #0]
 800efa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800efac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800efb0:	2301      	movs	r3, #1
 800efb2:	e09d      	b.n	800f0f0 <_printf_i+0x1e8>
 800efb4:	6833      	ldr	r3, [r6, #0]
 800efb6:	6820      	ldr	r0, [r4, #0]
 800efb8:	1d19      	adds	r1, r3, #4
 800efba:	6031      	str	r1, [r6, #0]
 800efbc:	0606      	lsls	r6, r0, #24
 800efbe:	d501      	bpl.n	800efc4 <_printf_i+0xbc>
 800efc0:	681d      	ldr	r5, [r3, #0]
 800efc2:	e003      	b.n	800efcc <_printf_i+0xc4>
 800efc4:	0645      	lsls	r5, r0, #25
 800efc6:	d5fb      	bpl.n	800efc0 <_printf_i+0xb8>
 800efc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800efcc:	2d00      	cmp	r5, #0
 800efce:	da03      	bge.n	800efd8 <_printf_i+0xd0>
 800efd0:	232d      	movs	r3, #45	@ 0x2d
 800efd2:	426d      	negs	r5, r5
 800efd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efd8:	4859      	ldr	r0, [pc, #356]	@ (800f140 <_printf_i+0x238>)
 800efda:	230a      	movs	r3, #10
 800efdc:	e011      	b.n	800f002 <_printf_i+0xfa>
 800efde:	6821      	ldr	r1, [r4, #0]
 800efe0:	6833      	ldr	r3, [r6, #0]
 800efe2:	0608      	lsls	r0, r1, #24
 800efe4:	f853 5b04 	ldr.w	r5, [r3], #4
 800efe8:	d402      	bmi.n	800eff0 <_printf_i+0xe8>
 800efea:	0649      	lsls	r1, r1, #25
 800efec:	bf48      	it	mi
 800efee:	b2ad      	uxthmi	r5, r5
 800eff0:	2f6f      	cmp	r7, #111	@ 0x6f
 800eff2:	4853      	ldr	r0, [pc, #332]	@ (800f140 <_printf_i+0x238>)
 800eff4:	6033      	str	r3, [r6, #0]
 800eff6:	bf14      	ite	ne
 800eff8:	230a      	movne	r3, #10
 800effa:	2308      	moveq	r3, #8
 800effc:	2100      	movs	r1, #0
 800effe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f002:	6866      	ldr	r6, [r4, #4]
 800f004:	60a6      	str	r6, [r4, #8]
 800f006:	2e00      	cmp	r6, #0
 800f008:	bfa2      	ittt	ge
 800f00a:	6821      	ldrge	r1, [r4, #0]
 800f00c:	f021 0104 	bicge.w	r1, r1, #4
 800f010:	6021      	strge	r1, [r4, #0]
 800f012:	b90d      	cbnz	r5, 800f018 <_printf_i+0x110>
 800f014:	2e00      	cmp	r6, #0
 800f016:	d04b      	beq.n	800f0b0 <_printf_i+0x1a8>
 800f018:	4616      	mov	r6, r2
 800f01a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f01e:	fb03 5711 	mls	r7, r3, r1, r5
 800f022:	5dc7      	ldrb	r7, [r0, r7]
 800f024:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f028:	462f      	mov	r7, r5
 800f02a:	42bb      	cmp	r3, r7
 800f02c:	460d      	mov	r5, r1
 800f02e:	d9f4      	bls.n	800f01a <_printf_i+0x112>
 800f030:	2b08      	cmp	r3, #8
 800f032:	d10b      	bne.n	800f04c <_printf_i+0x144>
 800f034:	6823      	ldr	r3, [r4, #0]
 800f036:	07df      	lsls	r7, r3, #31
 800f038:	d508      	bpl.n	800f04c <_printf_i+0x144>
 800f03a:	6923      	ldr	r3, [r4, #16]
 800f03c:	6861      	ldr	r1, [r4, #4]
 800f03e:	4299      	cmp	r1, r3
 800f040:	bfde      	ittt	le
 800f042:	2330      	movle	r3, #48	@ 0x30
 800f044:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f048:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f04c:	1b92      	subs	r2, r2, r6
 800f04e:	6122      	str	r2, [r4, #16]
 800f050:	f8cd a000 	str.w	sl, [sp]
 800f054:	464b      	mov	r3, r9
 800f056:	aa03      	add	r2, sp, #12
 800f058:	4621      	mov	r1, r4
 800f05a:	4640      	mov	r0, r8
 800f05c:	f7ff fee6 	bl	800ee2c <_printf_common>
 800f060:	3001      	adds	r0, #1
 800f062:	d14a      	bne.n	800f0fa <_printf_i+0x1f2>
 800f064:	f04f 30ff 	mov.w	r0, #4294967295
 800f068:	b004      	add	sp, #16
 800f06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f06e:	6823      	ldr	r3, [r4, #0]
 800f070:	f043 0320 	orr.w	r3, r3, #32
 800f074:	6023      	str	r3, [r4, #0]
 800f076:	4833      	ldr	r0, [pc, #204]	@ (800f144 <_printf_i+0x23c>)
 800f078:	2778      	movs	r7, #120	@ 0x78
 800f07a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f07e:	6823      	ldr	r3, [r4, #0]
 800f080:	6831      	ldr	r1, [r6, #0]
 800f082:	061f      	lsls	r7, r3, #24
 800f084:	f851 5b04 	ldr.w	r5, [r1], #4
 800f088:	d402      	bmi.n	800f090 <_printf_i+0x188>
 800f08a:	065f      	lsls	r7, r3, #25
 800f08c:	bf48      	it	mi
 800f08e:	b2ad      	uxthmi	r5, r5
 800f090:	6031      	str	r1, [r6, #0]
 800f092:	07d9      	lsls	r1, r3, #31
 800f094:	bf44      	itt	mi
 800f096:	f043 0320 	orrmi.w	r3, r3, #32
 800f09a:	6023      	strmi	r3, [r4, #0]
 800f09c:	b11d      	cbz	r5, 800f0a6 <_printf_i+0x19e>
 800f09e:	2310      	movs	r3, #16
 800f0a0:	e7ac      	b.n	800effc <_printf_i+0xf4>
 800f0a2:	4827      	ldr	r0, [pc, #156]	@ (800f140 <_printf_i+0x238>)
 800f0a4:	e7e9      	b.n	800f07a <_printf_i+0x172>
 800f0a6:	6823      	ldr	r3, [r4, #0]
 800f0a8:	f023 0320 	bic.w	r3, r3, #32
 800f0ac:	6023      	str	r3, [r4, #0]
 800f0ae:	e7f6      	b.n	800f09e <_printf_i+0x196>
 800f0b0:	4616      	mov	r6, r2
 800f0b2:	e7bd      	b.n	800f030 <_printf_i+0x128>
 800f0b4:	6833      	ldr	r3, [r6, #0]
 800f0b6:	6825      	ldr	r5, [r4, #0]
 800f0b8:	6961      	ldr	r1, [r4, #20]
 800f0ba:	1d18      	adds	r0, r3, #4
 800f0bc:	6030      	str	r0, [r6, #0]
 800f0be:	062e      	lsls	r6, r5, #24
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	d501      	bpl.n	800f0c8 <_printf_i+0x1c0>
 800f0c4:	6019      	str	r1, [r3, #0]
 800f0c6:	e002      	b.n	800f0ce <_printf_i+0x1c6>
 800f0c8:	0668      	lsls	r0, r5, #25
 800f0ca:	d5fb      	bpl.n	800f0c4 <_printf_i+0x1bc>
 800f0cc:	8019      	strh	r1, [r3, #0]
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	6123      	str	r3, [r4, #16]
 800f0d2:	4616      	mov	r6, r2
 800f0d4:	e7bc      	b.n	800f050 <_printf_i+0x148>
 800f0d6:	6833      	ldr	r3, [r6, #0]
 800f0d8:	1d1a      	adds	r2, r3, #4
 800f0da:	6032      	str	r2, [r6, #0]
 800f0dc:	681e      	ldr	r6, [r3, #0]
 800f0de:	6862      	ldr	r2, [r4, #4]
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	f7f1 f884 	bl	80001f0 <memchr>
 800f0e8:	b108      	cbz	r0, 800f0ee <_printf_i+0x1e6>
 800f0ea:	1b80      	subs	r0, r0, r6
 800f0ec:	6060      	str	r0, [r4, #4]
 800f0ee:	6863      	ldr	r3, [r4, #4]
 800f0f0:	6123      	str	r3, [r4, #16]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f0f8:	e7aa      	b.n	800f050 <_printf_i+0x148>
 800f0fa:	6923      	ldr	r3, [r4, #16]
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	4649      	mov	r1, r9
 800f100:	4640      	mov	r0, r8
 800f102:	47d0      	blx	sl
 800f104:	3001      	adds	r0, #1
 800f106:	d0ad      	beq.n	800f064 <_printf_i+0x15c>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	079b      	lsls	r3, r3, #30
 800f10c:	d413      	bmi.n	800f136 <_printf_i+0x22e>
 800f10e:	68e0      	ldr	r0, [r4, #12]
 800f110:	9b03      	ldr	r3, [sp, #12]
 800f112:	4298      	cmp	r0, r3
 800f114:	bfb8      	it	lt
 800f116:	4618      	movlt	r0, r3
 800f118:	e7a6      	b.n	800f068 <_printf_i+0x160>
 800f11a:	2301      	movs	r3, #1
 800f11c:	4632      	mov	r2, r6
 800f11e:	4649      	mov	r1, r9
 800f120:	4640      	mov	r0, r8
 800f122:	47d0      	blx	sl
 800f124:	3001      	adds	r0, #1
 800f126:	d09d      	beq.n	800f064 <_printf_i+0x15c>
 800f128:	3501      	adds	r5, #1
 800f12a:	68e3      	ldr	r3, [r4, #12]
 800f12c:	9903      	ldr	r1, [sp, #12]
 800f12e:	1a5b      	subs	r3, r3, r1
 800f130:	42ab      	cmp	r3, r5
 800f132:	dcf2      	bgt.n	800f11a <_printf_i+0x212>
 800f134:	e7eb      	b.n	800f10e <_printf_i+0x206>
 800f136:	2500      	movs	r5, #0
 800f138:	f104 0619 	add.w	r6, r4, #25
 800f13c:	e7f5      	b.n	800f12a <_printf_i+0x222>
 800f13e:	bf00      	nop
 800f140:	0800f8f1 	.word	0x0800f8f1
 800f144:	0800f902 	.word	0x0800f902

0800f148 <memmove>:
 800f148:	4288      	cmp	r0, r1
 800f14a:	b510      	push	{r4, lr}
 800f14c:	eb01 0402 	add.w	r4, r1, r2
 800f150:	d902      	bls.n	800f158 <memmove+0x10>
 800f152:	4284      	cmp	r4, r0
 800f154:	4623      	mov	r3, r4
 800f156:	d807      	bhi.n	800f168 <memmove+0x20>
 800f158:	1e43      	subs	r3, r0, #1
 800f15a:	42a1      	cmp	r1, r4
 800f15c:	d008      	beq.n	800f170 <memmove+0x28>
 800f15e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f162:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f166:	e7f8      	b.n	800f15a <memmove+0x12>
 800f168:	4402      	add	r2, r0
 800f16a:	4601      	mov	r1, r0
 800f16c:	428a      	cmp	r2, r1
 800f16e:	d100      	bne.n	800f172 <memmove+0x2a>
 800f170:	bd10      	pop	{r4, pc}
 800f172:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f176:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f17a:	e7f7      	b.n	800f16c <memmove+0x24>

0800f17c <_sbrk_r>:
 800f17c:	b538      	push	{r3, r4, r5, lr}
 800f17e:	4d06      	ldr	r5, [pc, #24]	@ (800f198 <_sbrk_r+0x1c>)
 800f180:	2300      	movs	r3, #0
 800f182:	4604      	mov	r4, r0
 800f184:	4608      	mov	r0, r1
 800f186:	602b      	str	r3, [r5, #0]
 800f188:	f7f2 fe78 	bl	8001e7c <_sbrk>
 800f18c:	1c43      	adds	r3, r0, #1
 800f18e:	d102      	bne.n	800f196 <_sbrk_r+0x1a>
 800f190:	682b      	ldr	r3, [r5, #0]
 800f192:	b103      	cbz	r3, 800f196 <_sbrk_r+0x1a>
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	bd38      	pop	{r3, r4, r5, pc}
 800f198:	20003694 	.word	0x20003694

0800f19c <memcpy>:
 800f19c:	440a      	add	r2, r1
 800f19e:	4291      	cmp	r1, r2
 800f1a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800f1a4:	d100      	bne.n	800f1a8 <memcpy+0xc>
 800f1a6:	4770      	bx	lr
 800f1a8:	b510      	push	{r4, lr}
 800f1aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1b2:	4291      	cmp	r1, r2
 800f1b4:	d1f9      	bne.n	800f1aa <memcpy+0xe>
 800f1b6:	bd10      	pop	{r4, pc}

0800f1b8 <_realloc_r>:
 800f1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1bc:	4680      	mov	r8, r0
 800f1be:	4615      	mov	r5, r2
 800f1c0:	460c      	mov	r4, r1
 800f1c2:	b921      	cbnz	r1, 800f1ce <_realloc_r+0x16>
 800f1c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	f7ff bc4b 	b.w	800ea64 <_malloc_r>
 800f1ce:	b92a      	cbnz	r2, 800f1dc <_realloc_r+0x24>
 800f1d0:	f7ff fbdc 	bl	800e98c <_free_r>
 800f1d4:	2400      	movs	r4, #0
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1dc:	f000 f81a 	bl	800f214 <_malloc_usable_size_r>
 800f1e0:	4285      	cmp	r5, r0
 800f1e2:	4606      	mov	r6, r0
 800f1e4:	d802      	bhi.n	800f1ec <_realloc_r+0x34>
 800f1e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f1ea:	d8f4      	bhi.n	800f1d6 <_realloc_r+0x1e>
 800f1ec:	4629      	mov	r1, r5
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	f7ff fc38 	bl	800ea64 <_malloc_r>
 800f1f4:	4607      	mov	r7, r0
 800f1f6:	2800      	cmp	r0, #0
 800f1f8:	d0ec      	beq.n	800f1d4 <_realloc_r+0x1c>
 800f1fa:	42b5      	cmp	r5, r6
 800f1fc:	462a      	mov	r2, r5
 800f1fe:	4621      	mov	r1, r4
 800f200:	bf28      	it	cs
 800f202:	4632      	movcs	r2, r6
 800f204:	f7ff ffca 	bl	800f19c <memcpy>
 800f208:	4621      	mov	r1, r4
 800f20a:	4640      	mov	r0, r8
 800f20c:	f7ff fbbe 	bl	800e98c <_free_r>
 800f210:	463c      	mov	r4, r7
 800f212:	e7e0      	b.n	800f1d6 <_realloc_r+0x1e>

0800f214 <_malloc_usable_size_r>:
 800f214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f218:	1f18      	subs	r0, r3, #4
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	bfbc      	itt	lt
 800f21e:	580b      	ldrlt	r3, [r1, r0]
 800f220:	18c0      	addlt	r0, r0, r3
 800f222:	4770      	bx	lr

0800f224 <_init>:
 800f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f226:	bf00      	nop
 800f228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22a:	bc08      	pop	{r3}
 800f22c:	469e      	mov	lr, r3
 800f22e:	4770      	bx	lr

0800f230 <_fini>:
 800f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f232:	bf00      	nop
 800f234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f236:	bc08      	pop	{r3}
 800f238:	469e      	mov	lr, r3
 800f23a:	4770      	bx	lr
